
RemoteTestIR.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008474  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005d8  08008604  08008604  00018604  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008bdc  08008bdc  000227f0  2**0
                  CONTENTS
  4 .ARM          00000000  08008bdc  08008bdc  000227f0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008bdc  08008bdc  000227f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008bdc  08008bdc  00018bdc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008be0  08008be0  00018be0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000027f0  20000000  08008be4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000060c  200027f0  0800b3d4  000227f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002dfc  0800b3d4  00022dfc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000227f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015d82  00000000  00000000  00022820  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002c8f  00000000  00000000  000385a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001320  00000000  00000000  0003b238  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001210  00000000  00000000  0003c558  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018091  00000000  00000000  0003d768  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000182b0  00000000  00000000  000557f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008e123  00000000  00000000  0006daa9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000fbbcc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000058a4  00000000  00000000  000fbc1c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200027f0 	.word	0x200027f0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080085ec 	.word	0x080085ec

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200027f4 	.word	0x200027f4
 80001cc:	080085ec 	.word	0x080085ec

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <Starting>:
extern uint16_t geheugenplaatsen;
extern uint16_t lengte_signaal[48]; //{1, 2, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0, 0};
extern uint16_t tijd[500];

void Starting()
{
 8000270:	b580      	push	{r7, lr}
 8000272:	af00      	add	r7, sp, #0
	  printf("\r\n-----------------------------------------------------------------------\r\n");
 8000274:	480e      	ldr	r0, [pc, #56]	; (80002b0 <Starting+0x40>)
 8000276:	f007 fa3b 	bl	80076f0 <puts>
	  printf("  ######  ########    ###    ########  ######## #### ##    ##  ######\r\n");
 800027a:	480e      	ldr	r0, [pc, #56]	; (80002b4 <Starting+0x44>)
 800027c:	f007 fa38 	bl	80076f0 <puts>
	  printf(" ##    ##    ##      ## ##   ##     ##    ##     ##  ###   ## ##    ##\r\n");
 8000280:	480d      	ldr	r0, [pc, #52]	; (80002b8 <Starting+0x48>)
 8000282:	f007 fa35 	bl	80076f0 <puts>
	  printf(" ##          ##     ##   ##  ##     ##    ##     ##  ####  ## ## \r\n");
 8000286:	480d      	ldr	r0, [pc, #52]	; (80002bc <Starting+0x4c>)
 8000288:	f007 fa32 	bl	80076f0 <puts>
	  printf("  ######     ##    ##     ## ########     ##     ##  ## ## ## ##   #### \r\n");
 800028c:	480c      	ldr	r0, [pc, #48]	; (80002c0 <Starting+0x50>)
 800028e:	f007 fa2f 	bl	80076f0 <puts>
	  printf("       ##    ##    ######### ##   ##      ##     ##  ##  #### ##    ##\r\n");
 8000292:	480c      	ldr	r0, [pc, #48]	; (80002c4 <Starting+0x54>)
 8000294:	f007 fa2c 	bl	80076f0 <puts>
	  printf(" ##    ##    ##    ##     ## ##    ##     ##     ##  ##   ### ##    ##  \r\n");
 8000298:	480b      	ldr	r0, [pc, #44]	; (80002c8 <Starting+0x58>)
 800029a:	f007 fa29 	bl	80076f0 <puts>
	  printf("  ######     ##    ##     ## ##     ##    ##    #### ##    ##  ######\r\n");
 800029e:	480b      	ldr	r0, [pc, #44]	; (80002cc <Starting+0x5c>)
 80002a0:	f007 fa26 	bl	80076f0 <puts>
	  printf("-----------------------------------------------------------------------\r\n\r\n");
 80002a4:	480a      	ldr	r0, [pc, #40]	; (80002d0 <Starting+0x60>)
 80002a6:	f007 fa23 	bl	80076f0 <puts>
}
 80002aa:	bf00      	nop
 80002ac:	bd80      	pop	{r7, pc}
 80002ae:	bf00      	nop
 80002b0:	08008604 	.word	0x08008604
 80002b4:	08008650 	.word	0x08008650
 80002b8:	08008698 	.word	0x08008698
 80002bc:	080086e0 	.word	0x080086e0
 80002c0:	08008724 	.word	0x08008724
 80002c4:	08008770 	.word	0x08008770
 80002c8:	080087b8 	.word	0x080087b8
 80002cc:	08008804 	.word	0x08008804
 80002d0:	0800884c 	.word	0x0800884c

080002d4 <All_Carl_Inits>:
void All_Carl_Inits()
{
 80002d4:	b580      	push	{r7, lr}
 80002d6:	b082      	sub	sp, #8
 80002d8:	af00      	add	r7, sp, #0
	if(UartScreen == 1)
 80002da:	4b12      	ldr	r3, [pc, #72]	; (8000324 <All_Carl_Inits+0x50>)
 80002dc:	781b      	ldrb	r3, [r3, #0]
 80002de:	2b01      	cmp	r3, #1
 80002e0:	d101      	bne.n	80002e6 <All_Carl_Inits+0x12>
	{
	Starting();
 80002e2:	f7ff ffc5 	bl	8000270 <Starting>
	}
	InitTouch();
 80002e6:	f001 f9a5 	bl	8001634 <InitTouch>
	DisplayBegin();
 80002ea:	f000 f969 	bl	80005c0 <DisplayBegin>
	IR_Carrier_OFF();
 80002ee:	f001 f89b 	bl	8001428 <IR_Carrier_OFF>

	//logo();
	mainscreen();
 80002f2:	f000 ffb9 	bl	8001268 <mainscreen>
//	WriteToGeheugen(3, 12);
//	DeleteFromGeheugen(3, 11);
//	DeleteFromGeheugen(1, 1);
	//Wat zit er eigenlijk in mijn geheugen?
	for(uint8_t i = 1; i <= 4; i++)
 80002f6:	2301      	movs	r3, #1
 80002f8:	71fb      	strb	r3, [r7, #7]
 80002fa:	e00b      	b.n	8000314 <All_Carl_Inits+0x40>
	{
		uint16_t *tijd;
		for(uint8_t j = 1; j <= 12; j ++)
 80002fc:	2301      	movs	r3, #1
 80002fe:	71bb      	strb	r3, [r7, #6]
 8000300:	e002      	b.n	8000308 <All_Carl_Inits+0x34>
 8000302:	79bb      	ldrb	r3, [r7, #6]
 8000304:	3301      	adds	r3, #1
 8000306:	71bb      	strb	r3, [r7, #6]
 8000308:	79bb      	ldrb	r3, [r7, #6]
 800030a:	2b0c      	cmp	r3, #12
 800030c:	d9f9      	bls.n	8000302 <All_Carl_Inits+0x2e>
	for(uint8_t i = 1; i <= 4; i++)
 800030e:	79fb      	ldrb	r3, [r7, #7]
 8000310:	3301      	adds	r3, #1
 8000312:	71fb      	strb	r3, [r7, #7]
 8000314:	79fb      	ldrb	r3, [r7, #7]
 8000316:	2b04      	cmp	r3, #4
 8000318:	d9f0      	bls.n	80002fc <All_Carl_Inits+0x28>
		{
			//tijd = TakefromGeheugen(i, j);
		}
	}
}
 800031a:	bf00      	nop
 800031c:	bf00      	nop
 800031e:	3708      	adds	r7, #8
 8000320:	46bd      	mov	sp, r7
 8000322:	bd80      	pop	{r7, pc}
 8000324:	20000000 	.word	0x20000000

08000328 <WriteToGeheugen>:

void WriteToGeheugen(uint8_t *dev, uint8_t *kn)
{
 8000328:	b580      	push	{r7, lr}
 800032a:	b084      	sub	sp, #16
 800032c:	af00      	add	r7, sp, #0
 800032e:	6078      	str	r0, [r7, #4]
 8000330:	6039      	str	r1, [r7, #0]
	uint8_t device = *dev;
 8000332:	687b      	ldr	r3, [r7, #4]
 8000334:	781b      	ldrb	r3, [r3, #0]
 8000336:	737b      	strb	r3, [r7, #13]
	uint8_t knop = *kn;
 8000338:	683b      	ldr	r3, [r7, #0]
 800033a:	781b      	ldrb	r3, [r3, #0]
 800033c:	733b      	strb	r3, [r7, #12]
	//stel singaal1 is 12 groot


	//stel Device 3 knop 4
	//berekening = 2*12 + 3 = 27
	uint8_t berekening = ((device-1) * 12) + knop-1 ; //zoek de plaats van lengte_signaal voor het knopje van het apparaat
 800033e:	7b7b      	ldrb	r3, [r7, #13]
 8000340:	461a      	mov	r2, r3
 8000342:	0052      	lsls	r2, r2, #1
 8000344:	4413      	add	r3, r2
 8000346:	009b      	lsls	r3, r3, #2
 8000348:	b2da      	uxtb	r2, r3
 800034a:	7b3b      	ldrb	r3, [r7, #12]
 800034c:	4413      	add	r3, r2
 800034e:	b2db      	uxtb	r3, r3
 8000350:	3b0d      	subs	r3, #13
 8000352:	72fb      	strb	r3, [r7, #11]

	printf("%d\r\n", berekening);
 8000354:	7afb      	ldrb	r3, [r7, #11]
 8000356:	4619      	mov	r1, r3
 8000358:	4817      	ldr	r0, [pc, #92]	; (80003b8 <WriteToGeheugen+0x90>)
 800035a:	f007 f943 	bl	80075e4 <iprintf>
	for(uint16_t i = 0; i < lengte_signaal[berekening] ; i++)
 800035e:	2300      	movs	r3, #0
 8000360:	81fb      	strh	r3, [r7, #14]
 8000362:	e00e      	b.n	8000382 <WriteToGeheugen+0x5a>
	{
		geheugen[geheugenplaatsen+i] = tijd[i];
 8000364:	89fa      	ldrh	r2, [r7, #14]
 8000366:	4b15      	ldr	r3, [pc, #84]	; (80003bc <WriteToGeheugen+0x94>)
 8000368:	881b      	ldrh	r3, [r3, #0]
 800036a:	4619      	mov	r1, r3
 800036c:	89fb      	ldrh	r3, [r7, #14]
 800036e:	440b      	add	r3, r1
 8000370:	4913      	ldr	r1, [pc, #76]	; (80003c0 <WriteToGeheugen+0x98>)
 8000372:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 8000376:	4a13      	ldr	r2, [pc, #76]	; (80003c4 <WriteToGeheugen+0x9c>)
 8000378:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(uint16_t i = 0; i < lengte_signaal[berekening] ; i++)
 800037c:	89fb      	ldrh	r3, [r7, #14]
 800037e:	3301      	adds	r3, #1
 8000380:	81fb      	strh	r3, [r7, #14]
 8000382:	7afb      	ldrb	r3, [r7, #11]
 8000384:	4a10      	ldr	r2, [pc, #64]	; (80003c8 <WriteToGeheugen+0xa0>)
 8000386:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800038a:	89fa      	ldrh	r2, [r7, #14]
 800038c:	429a      	cmp	r2, r3
 800038e:	d3e9      	bcc.n	8000364 <WriteToGeheugen+0x3c>
	}
	geheugenplaatsen += lengte_signaal[berekening];
 8000390:	7afb      	ldrb	r3, [r7, #11]
 8000392:	4a0d      	ldr	r2, [pc, #52]	; (80003c8 <WriteToGeheugen+0xa0>)
 8000394:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000398:	4b08      	ldr	r3, [pc, #32]	; (80003bc <WriteToGeheugen+0x94>)
 800039a:	881b      	ldrh	r3, [r3, #0]
 800039c:	4413      	add	r3, r2
 800039e:	b29a      	uxth	r2, r3
 80003a0:	4b06      	ldr	r3, [pc, #24]	; (80003bc <WriteToGeheugen+0x94>)
 80003a2:	801a      	strh	r2, [r3, #0]

	printf("geheugenplaatsen %d\r\n", geheugenplaatsen);
 80003a4:	4b05      	ldr	r3, [pc, #20]	; (80003bc <WriteToGeheugen+0x94>)
 80003a6:	881b      	ldrh	r3, [r3, #0]
 80003a8:	4619      	mov	r1, r3
 80003aa:	4808      	ldr	r0, [pc, #32]	; (80003cc <WriteToGeheugen+0xa4>)
 80003ac:	f007 f91a 	bl	80075e4 <iprintf>
}
 80003b0:	bf00      	nop
 80003b2:	3710      	adds	r7, #16
 80003b4:	46bd      	mov	sp, r7
 80003b6:	bd80      	pop	{r7, pc}
 80003b8:	08008898 	.word	0x08008898
 80003bc:	2000271c 	.word	0x2000271c
 80003c0:	20002818 	.word	0x20002818
 80003c4:	2000000c 	.word	0x2000000c
 80003c8:	20002720 	.word	0x20002720
 80003cc:	080088a0 	.word	0x080088a0

080003d0 <TakefromGeheugen>:
	printf("geheugenplaatsen = %d geheugen = %d\n\r", geheugenplaatsen, controle);
	}
}
*/
void TakefromGeheugen(uint8_t *dev, uint8_t *kn, uint16_t *DataFromGeheugen, uint8_t *controle)
{
 80003d0:	b580      	push	{r7, lr}
 80003d2:	b088      	sub	sp, #32
 80003d4:	af00      	add	r7, sp, #0
 80003d6:	60f8      	str	r0, [r7, #12]
 80003d8:	60b9      	str	r1, [r7, #8]
 80003da:	607a      	str	r2, [r7, #4]
 80003dc:	603b      	str	r3, [r7, #0]
		uint8_t device = *dev;
 80003de:	68fb      	ldr	r3, [r7, #12]
 80003e0:	781b      	ldrb	r3, [r3, #0]
 80003e2:	75fb      	strb	r3, [r7, #23]
		uint8_t knop = *kn;
 80003e4:	68bb      	ldr	r3, [r7, #8]
 80003e6:	781b      	ldrb	r3, [r3, #0]
 80003e8:	75bb      	strb	r3, [r7, #22]
		uint16_t plaatservoor = 0;
 80003ea:	2300      	movs	r3, #0
 80003ec:	83fb      	strh	r3, [r7, #30]
		uint8_t berekening = ((device-1) * 12) + knop-1 ;
 80003ee:	7dfb      	ldrb	r3, [r7, #23]
 80003f0:	461a      	mov	r2, r3
 80003f2:	0052      	lsls	r2, r2, #1
 80003f4:	4413      	add	r3, r2
 80003f6:	009b      	lsls	r3, r3, #2
 80003f8:	b2da      	uxtb	r2, r3
 80003fa:	7dbb      	ldrb	r3, [r7, #22]
 80003fc:	4413      	add	r3, r2
 80003fe:	b2db      	uxtb	r3, r3
 8000400:	3b0d      	subs	r3, #13
 8000402:	757b      	strb	r3, [r7, #21]
		if(lengte_signaal[berekening] == 0)
 8000404:	7d7b      	ldrb	r3, [r7, #21]
 8000406:	4a23      	ldr	r2, [pc, #140]	; (8000494 <TakefromGeheugen+0xc4>)
 8000408:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800040c:	2b00      	cmp	r3, #0
 800040e:	d109      	bne.n	8000424 <TakefromGeheugen+0x54>
		{
			printf("device: %d knop: %d is niet ingesteld!\r\n", device, knop);
 8000410:	7dfb      	ldrb	r3, [r7, #23]
 8000412:	7dba      	ldrb	r2, [r7, #22]
 8000414:	4619      	mov	r1, r3
 8000416:	4820      	ldr	r0, [pc, #128]	; (8000498 <TakefromGeheugen+0xc8>)
 8000418:	f007 f8e4 	bl	80075e4 <iprintf>
			*controle=0;
 800041c:	683b      	ldr	r3, [r7, #0]
 800041e:	2200      	movs	r2, #0
 8000420:	701a      	strb	r2, [r3, #0]
				//printf("%d ", DataFromGeheugen[index]);
				index++;
			}
			//printf("\r\n");
		}
}
 8000422:	e032      	b.n	800048a <TakefromGeheugen+0xba>
			*controle=1;
 8000424:	683b      	ldr	r3, [r7, #0]
 8000426:	2201      	movs	r2, #1
 8000428:	701a      	strb	r2, [r3, #0]
			for(uint8_t i = 0; i < berekening; i++)
 800042a:	2300      	movs	r3, #0
 800042c:	777b      	strb	r3, [r7, #29]
 800042e:	e009      	b.n	8000444 <TakefromGeheugen+0x74>
				plaatservoor += lengte_signaal[i];
 8000430:	7f7b      	ldrb	r3, [r7, #29]
 8000432:	4a18      	ldr	r2, [pc, #96]	; (8000494 <TakefromGeheugen+0xc4>)
 8000434:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000438:	8bfb      	ldrh	r3, [r7, #30]
 800043a:	4413      	add	r3, r2
 800043c:	83fb      	strh	r3, [r7, #30]
			for(uint8_t i = 0; i < berekening; i++)
 800043e:	7f7b      	ldrb	r3, [r7, #29]
 8000440:	3301      	adds	r3, #1
 8000442:	777b      	strb	r3, [r7, #29]
 8000444:	7f7a      	ldrb	r2, [r7, #29]
 8000446:	7d7b      	ldrb	r3, [r7, #21]
 8000448:	429a      	cmp	r2, r3
 800044a:	d3f1      	bcc.n	8000430 <TakefromGeheugen+0x60>
			uint16_t plaatserna = plaatservoor + lengte_signaal[berekening];
 800044c:	7d7b      	ldrb	r3, [r7, #21]
 800044e:	4a11      	ldr	r2, [pc, #68]	; (8000494 <TakefromGeheugen+0xc4>)
 8000450:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000454:	8bfb      	ldrh	r3, [r7, #30]
 8000456:	4413      	add	r3, r2
 8000458:	827b      	strh	r3, [r7, #18]
			uint16_t index = 0;
 800045a:	2300      	movs	r3, #0
 800045c:	837b      	strh	r3, [r7, #26]
			for(uint16_t i = plaatservoor; i < plaatserna; i++)
 800045e:	8bfb      	ldrh	r3, [r7, #30]
 8000460:	833b      	strh	r3, [r7, #24]
 8000462:	e00e      	b.n	8000482 <TakefromGeheugen+0xb2>
				DataFromGeheugen[index] = geheugen[i];
 8000464:	8b3a      	ldrh	r2, [r7, #24]
 8000466:	8b7b      	ldrh	r3, [r7, #26]
 8000468:	005b      	lsls	r3, r3, #1
 800046a:	6879      	ldr	r1, [r7, #4]
 800046c:	440b      	add	r3, r1
 800046e:	490b      	ldr	r1, [pc, #44]	; (800049c <TakefromGeheugen+0xcc>)
 8000470:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8000474:	801a      	strh	r2, [r3, #0]
				index++;
 8000476:	8b7b      	ldrh	r3, [r7, #26]
 8000478:	3301      	adds	r3, #1
 800047a:	837b      	strh	r3, [r7, #26]
			for(uint16_t i = plaatservoor; i < plaatserna; i++)
 800047c:	8b3b      	ldrh	r3, [r7, #24]
 800047e:	3301      	adds	r3, #1
 8000480:	833b      	strh	r3, [r7, #24]
 8000482:	8b3a      	ldrh	r2, [r7, #24]
 8000484:	8a7b      	ldrh	r3, [r7, #18]
 8000486:	429a      	cmp	r2, r3
 8000488:	d3ec      	bcc.n	8000464 <TakefromGeheugen+0x94>
}
 800048a:	bf00      	nop
 800048c:	3720      	adds	r7, #32
 800048e:	46bd      	mov	sp, r7
 8000490:	bd80      	pop	{r7, pc}
 8000492:	bf00      	nop
 8000494:	20002720 	.word	0x20002720
 8000498:	080088b8 	.word	0x080088b8
 800049c:	2000000c 	.word	0x2000000c

080004a0 <whilelus>:
uint16_t Xvalue = 160;
uint16_t Yvalue = 363;


uint8_t tijden = 0;
void whilelus(){
 80004a0:	b580      	push	{r7, lr}
 80004a2:	b082      	sub	sp, #8
 80004a4:	af02      	add	r7, sp, #8





	Touch(&aanraak, &Xvalue, &Yvalue);
 80004a6:	4a22      	ldr	r2, [pc, #136]	; (8000530 <whilelus+0x90>)
 80004a8:	4922      	ldr	r1, [pc, #136]	; (8000534 <whilelus+0x94>)
 80004aa:	4823      	ldr	r0, [pc, #140]	; (8000538 <whilelus+0x98>)
 80004ac:	f001 f8ee 	bl	800168c <Touch>
	ReadDevice(&device, &Xvalue, &Yvalue);
 80004b0:	4a1f      	ldr	r2, [pc, #124]	; (8000530 <whilelus+0x90>)
 80004b2:	4920      	ldr	r1, [pc, #128]	; (8000534 <whilelus+0x94>)
 80004b4:	4821      	ldr	r0, [pc, #132]	; (800053c <whilelus+0x9c>)
 80004b6:	f001 f96b 	bl	8001790 <ReadDevice>
	if(device != OldDevice)
 80004ba:	4b20      	ldr	r3, [pc, #128]	; (800053c <whilelus+0x9c>)
 80004bc:	781a      	ldrb	r2, [r3, #0]
 80004be:	4b20      	ldr	r3, [pc, #128]	; (8000540 <whilelus+0xa0>)
 80004c0:	781b      	ldrb	r3, [r3, #0]
 80004c2:	429a      	cmp	r2, r3
 80004c4:	d00d      	beq.n	80004e2 <whilelus+0x42>
	{
		OldDevice=device;
 80004c6:	4b1d      	ldr	r3, [pc, #116]	; (800053c <whilelus+0x9c>)
 80004c8:	781a      	ldrb	r2, [r3, #0]
 80004ca:	4b1d      	ldr	r3, [pc, #116]	; (8000540 <whilelus+0xa0>)
 80004cc:	701a      	strb	r2, [r3, #0]
		DevicePressed(&device);
 80004ce:	481b      	ldr	r0, [pc, #108]	; (800053c <whilelus+0x9c>)
 80004d0:	f000 fb3a 	bl	8000b48 <DevicePressed>
		Xvalue = 160; Yvalue = 363; //randomwaarde waar geen knop op staat
 80004d4:	4b17      	ldr	r3, [pc, #92]	; (8000534 <whilelus+0x94>)
 80004d6:	22a0      	movs	r2, #160	; 0xa0
 80004d8:	801a      	strh	r2, [r3, #0]
 80004da:	4b15      	ldr	r3, [pc, #84]	; (8000530 <whilelus+0x90>)
 80004dc:	f240 126b 	movw	r2, #363	; 0x16b
 80004e0:	801a      	strh	r2, [r3, #0]
	}
	if(device != 0)
 80004e2:	4b16      	ldr	r3, [pc, #88]	; (800053c <whilelus+0x9c>)
 80004e4:	781b      	ldrb	r3, [r3, #0]
 80004e6:	2b00      	cmp	r3, #0
 80004e8:	d01e      	beq.n	8000528 <whilelus+0x88>
	{
		ReadButton(&button, &Xvalue, &Yvalue);
 80004ea:	4a11      	ldr	r2, [pc, #68]	; (8000530 <whilelus+0x90>)
 80004ec:	4911      	ldr	r1, [pc, #68]	; (8000534 <whilelus+0x94>)
 80004ee:	4815      	ldr	r0, [pc, #84]	; (8000544 <whilelus+0xa4>)
 80004f0:	f001 f9a8 	bl	8001844 <ReadButton>
		if(button != 0 && aanraak != 0)
 80004f4:	4b13      	ldr	r3, [pc, #76]	; (8000544 <whilelus+0xa4>)
 80004f6:	781b      	ldrb	r3, [r3, #0]
 80004f8:	2b00      	cmp	r3, #0
 80004fa:	d015      	beq.n	8000528 <whilelus+0x88>
 80004fc:	4b0e      	ldr	r3, [pc, #56]	; (8000538 <whilelus+0x98>)
 80004fe:	781b      	ldrb	r3, [r3, #0]
 8000500:	2b00      	cmp	r3, #0
 8000502:	d011      	beq.n	8000528 <whilelus+0x88>
		{
		buttonPressed(&device, &button, &aanraak, &Xvalue, &Yvalue);
 8000504:	4b0a      	ldr	r3, [pc, #40]	; (8000530 <whilelus+0x90>)
 8000506:	9300      	str	r3, [sp, #0]
 8000508:	4b0a      	ldr	r3, [pc, #40]	; (8000534 <whilelus+0x94>)
 800050a:	4a0b      	ldr	r2, [pc, #44]	; (8000538 <whilelus+0x98>)
 800050c:	490d      	ldr	r1, [pc, #52]	; (8000544 <whilelus+0xa4>)
 800050e:	480b      	ldr	r0, [pc, #44]	; (800053c <whilelus+0x9c>)
 8000510:	f000 fc56 	bl	8000dc0 <buttonPressed>
		Xvalue = 160; Yvalue = 363; //randomwaarde waar geen knop op staat
 8000514:	4b07      	ldr	r3, [pc, #28]	; (8000534 <whilelus+0x94>)
 8000516:	22a0      	movs	r2, #160	; 0xa0
 8000518:	801a      	strh	r2, [r3, #0]
 800051a:	4b05      	ldr	r3, [pc, #20]	; (8000530 <whilelus+0x90>)
 800051c:	f240 126b 	movw	r2, #363	; 0x16b
 8000520:	801a      	strh	r2, [r3, #0]
		button=0;
 8000522:	4b08      	ldr	r3, [pc, #32]	; (8000544 <whilelus+0xa4>)
 8000524:	2200      	movs	r2, #0
 8000526:	701a      	strb	r2, [r3, #0]



//printf("device:%d button: %d   aanraak %d\r\n", device, button, aanraak);
//printf("X:%d Y:%d ", Xvalue, Yvalue);
}
 8000528:	bf00      	nop
 800052a:	46bd      	mov	sp, r7
 800052c:	bd80      	pop	{r7, pc}
 800052e:	bf00      	nop
 8000530:	20000004 	.word	0x20000004
 8000534:	20000002 	.word	0x20000002
 8000538:	2000280f 	.word	0x2000280f
 800053c:	2000280c 	.word	0x2000280c
 8000540:	2000280d 	.word	0x2000280d
 8000544:	2000280e 	.word	0x2000280e

08000548 <CS_HIGH>:
#define ILI9488_GREENYELLOW 	0xAFE5      /* 173, 255,  47 */
#define ILI9488_PINK        			0xF81F

/* Some Easy Functions */ 
void CS_HIGH() //High = The chip is not selected and not accessible pg23
{HAL_GPIO_WritePin(CS_Port, CS_Pin, 1);}
 8000548:	b580      	push	{r7, lr}
 800054a:	af00      	add	r7, sp, #0
 800054c:	2201      	movs	r2, #1
 800054e:	2120      	movs	r1, #32
 8000550:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000554:	f002 fa9a 	bl	8002a8c <HAL_GPIO_WritePin>
 8000558:	bf00      	nop
 800055a:	bd80      	pop	{r7, pc}

0800055c <CS_LOW>:
void CS_LOW()  //Low = The chip is selected and accessible pg23
{HAL_GPIO_WritePin(CS_Port, CS_Pin, 0);}
 800055c:	b580      	push	{r7, lr}
 800055e:	af00      	add	r7, sp, #0
 8000560:	2200      	movs	r2, #0
 8000562:	2120      	movs	r1, #32
 8000564:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000568:	f002 fa90 	bl	8002a8c <HAL_GPIO_WritePin>
 800056c:	bf00      	nop
 800056e:	bd80      	pop	{r7, pc}

08000570 <DC_HIGH>:
void DC_HIGH() //High = Parameter pg23
{HAL_GPIO_WritePin(DC_Port, DC_Pin, 1);}
 8000570:	b580      	push	{r7, lr}
 8000572:	af00      	add	r7, sp, #0
 8000574:	2201      	movs	r2, #1
 8000576:	2180      	movs	r1, #128	; 0x80
 8000578:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800057c:	f002 fa86 	bl	8002a8c <HAL_GPIO_WritePin>
 8000580:	bf00      	nop
 8000582:	bd80      	pop	{r7, pc}

08000584 <DC_LOW>:
void DC_LOW()  //Low = command pg23
{HAL_GPIO_WritePin(DC_Port, DC_Pin, 0);}
 8000584:	b580      	push	{r7, lr}
 8000586:	af00      	add	r7, sp, #0
 8000588:	2200      	movs	r2, #0
 800058a:	2180      	movs	r1, #128	; 0x80
 800058c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000590:	f002 fa7c 	bl	8002a8c <HAL_GPIO_WritePin>
 8000594:	bf00      	nop
 8000596:	bd80      	pop	{r7, pc}

08000598 <RST_HIGH>:
void RST_HIGH() 
{HAL_GPIO_WritePin(RST_Port, RST_Pin, 1);}
 8000598:	b580      	push	{r7, lr}
 800059a:	af00      	add	r7, sp, #0
 800059c:	2201      	movs	r2, #1
 800059e:	2140      	movs	r1, #64	; 0x40
 80005a0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005a4:	f002 fa72 	bl	8002a8c <HAL_GPIO_WritePin>
 80005a8:	bf00      	nop
 80005aa:	bd80      	pop	{r7, pc}

080005ac <RST_LOW>:
void RST_LOW() //initialize with a low input pg23
{HAL_GPIO_WritePin(RST_Port, RST_Pin, 0);}
 80005ac:	b580      	push	{r7, lr}
 80005ae:	af00      	add	r7, sp, #0
 80005b0:	2200      	movs	r2, #0
 80005b2:	2140      	movs	r1, #64	; 0x40
 80005b4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005b8:	f002 fa68 	bl	8002a8c <HAL_GPIO_WritePin>
 80005bc:	bf00      	nop
 80005be:	bd80      	pop	{r7, pc}

080005c0 <DisplayBegin>:

//#define TIM_1us htim2

void DisplayBegin(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	af00      	add	r7, sp, #0
	RST_LOW(); //initialize with a low input pg23
 80005c4:	f7ff fff2 	bl	80005ac <RST_LOW>
	HAL_Delay(500);
 80005c8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80005cc:	f001 ffb6 	bl	800253c <HAL_Delay>
	RST_HIGH();
 80005d0:	f7ff ffe2 	bl	8000598 <RST_HIGH>
	HAL_Delay(500);
 80005d4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80005d8:	f001 ffb0 	bl	800253c <HAL_Delay>
	writecommand(0xE0);
 80005dc:	20e0      	movs	r0, #224	; 0xe0
 80005de:	f000 f8bf 	bl	8000760 <writecommand>
	writedata(0x00);
 80005e2:	2000      	movs	r0, #0
 80005e4:	f000 f8d8 	bl	8000798 <writedata>
	writedata(0x03);
 80005e8:	2003      	movs	r0, #3
 80005ea:	f000 f8d5 	bl	8000798 <writedata>
	writedata(0x09);
 80005ee:	2009      	movs	r0, #9
 80005f0:	f000 f8d2 	bl	8000798 <writedata>
	writedata(0x08);
 80005f4:	2008      	movs	r0, #8
 80005f6:	f000 f8cf 	bl	8000798 <writedata>
	writedata(0x16);
 80005fa:	2016      	movs	r0, #22
 80005fc:	f000 f8cc 	bl	8000798 <writedata>
	writedata(0x0A);
 8000600:	200a      	movs	r0, #10
 8000602:	f000 f8c9 	bl	8000798 <writedata>
	writedata(0x3F);
 8000606:	203f      	movs	r0, #63	; 0x3f
 8000608:	f000 f8c6 	bl	8000798 <writedata>
	writedata(0x78);
 800060c:	2078      	movs	r0, #120	; 0x78
 800060e:	f000 f8c3 	bl	8000798 <writedata>
	writedata(0x4C);
 8000612:	204c      	movs	r0, #76	; 0x4c
 8000614:	f000 f8c0 	bl	8000798 <writedata>
	writedata(0x09);
 8000618:	2009      	movs	r0, #9
 800061a:	f000 f8bd 	bl	8000798 <writedata>
	writedata(0x0A);
 800061e:	200a      	movs	r0, #10
 8000620:	f000 f8ba 	bl	8000798 <writedata>
	writedata(0x08);
 8000624:	2008      	movs	r0, #8
 8000626:	f000 f8b7 	bl	8000798 <writedata>
	writedata(0x16);
 800062a:	2016      	movs	r0, #22
 800062c:	f000 f8b4 	bl	8000798 <writedata>
	writedata(0x1A);
 8000630:	201a      	movs	r0, #26
 8000632:	f000 f8b1 	bl	8000798 <writedata>
	writedata(0x0F);
 8000636:	200f      	movs	r0, #15
 8000638:	f000 f8ae 	bl	8000798 <writedata>

	writecommand(0XE1);
 800063c:	20e1      	movs	r0, #225	; 0xe1
 800063e:	f000 f88f 	bl	8000760 <writecommand>
	writedata(0x00);
 8000642:	2000      	movs	r0, #0
 8000644:	f000 f8a8 	bl	8000798 <writedata>
	writedata(0x16);
 8000648:	2016      	movs	r0, #22
 800064a:	f000 f8a5 	bl	8000798 <writedata>
	writedata(0x19);
 800064e:	2019      	movs	r0, #25
 8000650:	f000 f8a2 	bl	8000798 <writedata>
	writedata(0x03);
 8000654:	2003      	movs	r0, #3
 8000656:	f000 f89f 	bl	8000798 <writedata>
	writedata(0x0F);
 800065a:	200f      	movs	r0, #15
 800065c:	f000 f89c 	bl	8000798 <writedata>
	writedata(0x05);
 8000660:	2005      	movs	r0, #5
 8000662:	f000 f899 	bl	8000798 <writedata>
	writedata(0x32);
 8000666:	2032      	movs	r0, #50	; 0x32
 8000668:	f000 f896 	bl	8000798 <writedata>
	writedata(0x45);
 800066c:	2045      	movs	r0, #69	; 0x45
 800066e:	f000 f893 	bl	8000798 <writedata>
	writedata(0x46);
 8000672:	2046      	movs	r0, #70	; 0x46
 8000674:	f000 f890 	bl	8000798 <writedata>
	writedata(0x04);
 8000678:	2004      	movs	r0, #4
 800067a:	f000 f88d 	bl	8000798 <writedata>
	writedata(0x0E);
 800067e:	200e      	movs	r0, #14
 8000680:	f000 f88a 	bl	8000798 <writedata>
	writedata(0x0D);
 8000684:	200d      	movs	r0, #13
 8000686:	f000 f887 	bl	8000798 <writedata>
	writedata(0x35);
 800068a:	2035      	movs	r0, #53	; 0x35
 800068c:	f000 f884 	bl	8000798 <writedata>
	writedata(0x37);
 8000690:	2037      	movs	r0, #55	; 0x37
 8000692:	f000 f881 	bl	8000798 <writedata>
	writedata(0x0F);
 8000696:	200f      	movs	r0, #15
 8000698:	f000 f87e 	bl	8000798 <writedata>

	writecommand(0XC0);      //Power Control 1 (pg 237)
 800069c:	20c0      	movs	r0, #192	; 0xc0
 800069e:	f000 f85f 	bl	8000760 <writecommand>
							
	writedata(0x17);    //Vreg1out =  5V zie pg 237
 80006a2:	2017      	movs	r0, #23
 80006a4:	f000 f878 	bl	8000798 <writedata>
	writedata(0x15);    //Verg2out = -4.87V zie pg 237
 80006a8:	2015      	movs	r0, #21
 80006aa:	f000 f875 	bl	8000798 <writedata>
							//	Input voltage from the set-up circuit (-6 to -4.5V).
							
							//Op de DFR0669 staat een LevelShifter, zodat het op 5V werkt.
							

	writecommand(0xC1);      //Power Control 2 (pg 239)
 80006ae:	20c1      	movs	r0, #193	; 0xc1
 80006b0:	f000 f856 	bl	8000760 <writecommand>
	writedata(0x41);    //VGH,VGL
 80006b4:	2041      	movs	r0, #65	; 0x41
 80006b6:	f000 f86f 	bl	8000798 <writedata>
						// = 3'h1 = 001
						// 0100 0XXX 
						// 0100 0001 = 41h  (65 decimaal)
						

	writecommand(0xC5);      //VCOM control pg243
 80006ba:	20c5      	movs	r0, #197	; 0xc5
 80006bc:	f000 f850 	bl	8000760 <writecommand>
	writedata(0x00);		 //1e parameter standaard 00h
 80006c0:	2000      	movs	r0, #0
 80006c2:	f000 f869 	bl	8000798 <writedata>
	writedata(0x12);    	 //VCOM = -1.71    |VCOM| x 2 = VREG = 3.42V
 80006c6:	2012      	movs	r0, #18
 80006c8:	f000 f866 	bl	8000798 <writedata>
	writedata(0x80);		// ? 
 80006cc:	2080      	movs	r0, #128	; 0x80
 80006ce:	f000 f863 	bl	8000798 <writedata>

	writecommand(0x36);      //Memory Access pg192
 80006d2:	2036      	movs	r0, #54	; 0x36
 80006d4:	f000 f844 	bl	8000760 <writecommand>
	writedata(0x48);		//MY = 0				//in vb 0x48
 80006d8:	2048      	movs	r0, #72	; 0x48
 80006da:	f000 f85d 	bl	8000798 <writedata>
							//ML = 0
							//BGR = 0
							//MH = 0
							//=0h

	writecommand(0x3A);		// Interface Pixel Format (RGB 565 standaard 3Ah pg123
 80006de:	203a      	movs	r0, #58	; 0x3a
 80006e0:	f000 f83e 	bl	8000760 <writecommand>
	writedata(0x66); 	  	//pg 200 --> 16bits/pixel = 55 (decimal = 85)
 80006e4:	2066      	movs	r0, #102	; 0x66
 80006e6:	f000 f857 	bl	8000798 <writedata>
							//55 = 0101 0101

	writecommand(0XB0);      // Interface Mode Control pg219
 80006ea:	20b0      	movs	r0, #176	; 0xb0
 80006ec:	f000 f838 	bl	8000760 <writecommand>
	writedata(0x80);     			 //SDO NOT USE
 80006f0:	2080      	movs	r0, #128	; 0x80
 80006f2:	f000 f851 	bl	8000798 <writedata>
									//1000 0000
									//High enable for RGB interface,
									//data fetched at the rising time,
									//and low level sync clock
									
	writecommand(0xB1);      //Frame rate pg 221
 80006f6:	20b1      	movs	r0, #177	; 0xb1
 80006f8:	f000 f832 	bl	8000760 <writecommand>
	writedata(0xA0);    //60Hz      NOG UITREKENEN
 80006fc:	20a0      	movs	r0, #160	; 0xa0
 80006fe:	f000 f84b 	bl	8000798 <writedata>

	writecommand(0xB4);      //Display Inversion Control  pg 225
 8000702:	20b4      	movs	r0, #180	; 0xb4
 8000704:	f000 f82c 	bl	8000760 <writecommand>
	writedata(0x02);    //2-dot inversion (standard)
 8000708:	2002      	movs	r0, #2
 800070a:	f000 f845 	bl	8000798 <writedata>

	writecommand(0XB6); //Display Function Control  RGB/MCU Interface Control pg228
 800070e:	20b6      	movs	r0, #182	; 0xb6
 8000710:	f000 f826 	bl	8000760 <writecommand>

	writedata(0x02);    //MCU // 1e parameter standard    question Bypass= Memory or Shift register? 
 8000714:	2002      	movs	r0, #2
 8000716:	f000 f83f 	bl	8000798 <writedata>
	writedata(0x02);    //Source,Gate scan direction so frames at 84ms
 800071a:	2002      	movs	r0, #2
 800071c:	f000 f83c 	bl	8000798 <writedata>

	writecommand(0XE9);      // Set Image Function pg271 
 8000720:	20e9      	movs	r0, #233	; 0xe9
 8000722:	f000 f81d 	bl	8000760 <writecommand>
	writedata(0x00);    // Disable 24 bit data
 8000726:	2000      	movs	r0, #0
 8000728:	f000 f836 	bl	8000798 <writedata>

	writecommand(0xF7);      // Adjust Control   pg 276
 800072c:	20f7      	movs	r0, #247	; 0xf7
 800072e:	f000 f817 	bl	8000760 <writecommand>
	writedata(0xA9);  //standard 1e parameter
 8000732:	20a9      	movs	r0, #169	; 0xa9
 8000734:	f000 f830 	bl	8000798 <writedata>
	writedata(0x51);  //standard 2e parameter
 8000738:	2051      	movs	r0, #81	; 0x51
 800073a:	f000 f82d 	bl	8000798 <writedata>
	writedata(0x2C);  //standard 3e parameter
 800073e:	202c      	movs	r0, #44	; 0x2c
 8000740:	f000 f82a 	bl	8000798 <writedata>
	writedata(0x82);    // D7 stream, loose   //standard 4e parameter
 8000744:	2082      	movs	r0, #130	; 0x82
 8000746:	f000 f827 	bl	8000798 <writedata>

	writecommand(Display_ExitSleep);    //Exit Sleep
 800074a:	2011      	movs	r0, #17
 800074c:	f000 f808 	bl	8000760 <writecommand>

	HAL_Delay(120);
 8000750:	2078      	movs	r0, #120	; 0x78
 8000752:	f001 fef3 	bl	800253c <HAL_Delay>

	writecommand(Display_On);    //Display on
 8000756:	2029      	movs	r0, #41	; 0x29
 8000758:	f000 f802 	bl	8000760 <writecommand>


	
}
 800075c:	bf00      	nop
 800075e:	bd80      	pop	{r7, pc}

08000760 <writecommand>:

void writecommand(uint8_t cmdo)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b084      	sub	sp, #16
 8000764:	af00      	add	r7, sp, #0
 8000766:	4603      	mov	r3, r0
 8000768:	71fb      	strb	r3, [r7, #7]
	uint8_t commando = cmdo;
 800076a:	79fb      	ldrb	r3, [r7, #7]
 800076c:	73fb      	strb	r3, [r7, #15]
	DC_LOW(); //Low = command pg23
 800076e:	f7ff ff09 	bl	8000584 <DC_LOW>
	CS_LOW(); //The chip is selected and accessible pg23
 8000772:	f7ff fef3 	bl	800055c <CS_LOW>
	HAL_SPI_Transmit(&mySPI, &commando, 1, HAL_MAX_DELAY); //Size = bytes
 8000776:	f107 010f 	add.w	r1, r7, #15
 800077a:	f04f 33ff 	mov.w	r3, #4294967295
 800077e:	2201      	movs	r2, #1
 8000780:	4804      	ldr	r0, [pc, #16]	; (8000794 <writecommand+0x34>)
 8000782:	f004 feda 	bl	800553a <HAL_SPI_Transmit>
	CS_HIGH(); //The chip is not selected and not accessible pg23
 8000786:	f7ff fedf 	bl	8000548 <CS_HIGH>
	


}
 800078a:	bf00      	nop
 800078c:	3710      	adds	r7, #16
 800078e:	46bd      	mov	sp, r7
 8000790:	bd80      	pop	{r7, pc}
 8000792:	bf00      	nop
 8000794:	20002c60 	.word	0x20002c60

08000798 <writedata>:
void writedata(uint8_t dta )
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b084      	sub	sp, #16
 800079c:	af00      	add	r7, sp, #0
 800079e:	4603      	mov	r3, r0
 80007a0:	71fb      	strb	r3, [r7, #7]
	uint8_t data = dta;
 80007a2:	79fb      	ldrb	r3, [r7, #7]
 80007a4:	73fb      	strb	r3, [r7, #15]
	DC_HIGH(); //High = Parameter pg23
 80007a6:	f7ff fee3 	bl	8000570 <DC_HIGH>
	CS_LOW(); //The chip is selected and accessible pg23
 80007aa:	f7ff fed7 	bl	800055c <CS_LOW>
	HAL_SPI_Transmit(&mySPI, &data, 1, HAL_MAX_DELAY); //Size = bytes
 80007ae:	f107 010f 	add.w	r1, r7, #15
 80007b2:	f04f 33ff 	mov.w	r3, #4294967295
 80007b6:	2201      	movs	r2, #1
 80007b8:	4804      	ldr	r0, [pc, #16]	; (80007cc <writedata+0x34>)
 80007ba:	f004 febe 	bl	800553a <HAL_SPI_Transmit>
	CS_HIGH(); //The chip is not selected and not accessible pg23
 80007be:	f7ff fec3 	bl	8000548 <CS_HIGH>
	//als ik het scherm uitschakel, krijg ik ook geen errors
	//wel leuk om optimistisch te zijn, maar dit doet niks
	//uint8_t StateSpiHulp = HAL_SPI_GetState(&hspi2);
	//uint8_t ErrorSpiHulp = HAL_SPI_GetError(&hspi2);
	//printf("    data: 0x %x Spi_State:%d Error: %d\r\n", dta, StateSpiHulp, ErrorSpiHulp);
}
 80007c2:	bf00      	nop
 80007c4:	3710      	adds	r7, #16
 80007c6:	46bd      	mov	sp, r7
 80007c8:	bd80      	pop	{r7, pc}
 80007ca:	bf00      	nop
 80007cc:	20002c60 	.word	0x20002c60

080007d0 <setAddrWindow>:
void setAddrWindow(uint16_t x0,uint16_t y0,uint16_t x1,uint16_t y1)
{
 80007d0:	b590      	push	{r4, r7, lr}
 80007d2:	b083      	sub	sp, #12
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	4604      	mov	r4, r0
 80007d8:	4608      	mov	r0, r1
 80007da:	4611      	mov	r1, r2
 80007dc:	461a      	mov	r2, r3
 80007de:	4623      	mov	r3, r4
 80007e0:	80fb      	strh	r3, [r7, #6]
 80007e2:	4603      	mov	r3, r0
 80007e4:	80bb      	strh	r3, [r7, #4]
 80007e6:	460b      	mov	r3, r1
 80007e8:	807b      	strh	r3, [r7, #2]
 80007ea:	4613      	mov	r3, r2
 80007ec:	803b      	strh	r3, [r7, #0]
	//pg 175 -> Column Address Set = 2Ah
	writecommand(0x2A);
 80007ee:	202a      	movs	r0, #42	; 0x2a
 80007f0:	f7ff ffb6 	bl	8000760 <writecommand>
	
	writedata(x0 >> 8); //?
 80007f4:	88fb      	ldrh	r3, [r7, #6]
 80007f6:	0a1b      	lsrs	r3, r3, #8
 80007f8:	b29b      	uxth	r3, r3
 80007fa:	b2db      	uxtb	r3, r3
 80007fc:	4618      	mov	r0, r3
 80007fe:	f7ff ffcb 	bl	8000798 <writedata>
	writedata(x0 & 0xFF);     // XSTART ?
 8000802:	88fb      	ldrh	r3, [r7, #6]
 8000804:	b2db      	uxtb	r3, r3
 8000806:	4618      	mov	r0, r3
 8000808:	f7ff ffc6 	bl	8000798 <writedata>
	writedata(x1 >> 8); //?
 800080c:	887b      	ldrh	r3, [r7, #2]
 800080e:	0a1b      	lsrs	r3, r3, #8
 8000810:	b29b      	uxth	r3, r3
 8000812:	b2db      	uxtb	r3, r3
 8000814:	4618      	mov	r0, r3
 8000816:	f7ff ffbf 	bl	8000798 <writedata>
	writedata(x1 & 0xFF);     // XEND //?
 800081a:	887b      	ldrh	r3, [r7, #2]
 800081c:	b2db      	uxtb	r3, r3
 800081e:	4618      	mov	r0, r3
 8000820:	f7ff ffba 	bl	8000798 <writedata>
	
	//pg 177 -> Page Address Set = 2Bh = Row Address Set 
	writecommand(0x2B); // Row addr set
 8000824:	202b      	movs	r0, #43	; 0x2b
 8000826:	f7ff ff9b 	bl	8000760 <writecommand>
	writedata(y0 >> 8); //?
 800082a:	88bb      	ldrh	r3, [r7, #4]
 800082c:	0a1b      	lsrs	r3, r3, #8
 800082e:	b29b      	uxth	r3, r3
 8000830:	b2db      	uxtb	r3, r3
 8000832:	4618      	mov	r0, r3
 8000834:	f7ff ffb0 	bl	8000798 <writedata>
	writedata(y0 & 0xff);     // YSTART   ?
 8000838:	88bb      	ldrh	r3, [r7, #4]
 800083a:	b2db      	uxtb	r3, r3
 800083c:	4618      	mov	r0, r3
 800083e:	f7ff ffab 	bl	8000798 <writedata>
	writedata(y1 >> 8); // ?
 8000842:	883b      	ldrh	r3, [r7, #0]
 8000844:	0a1b      	lsrs	r3, r3, #8
 8000846:	b29b      	uxth	r3, r3
 8000848:	b2db      	uxtb	r3, r3
 800084a:	4618      	mov	r0, r3
 800084c:	f7ff ffa4 	bl	8000798 <writedata>
	writedata(y1 & 0xff);     // YEND //?
 8000850:	883b      	ldrh	r3, [r7, #0]
 8000852:	b2db      	uxtb	r3, r3
 8000854:	4618      	mov	r0, r3
 8000856:	f7ff ff9f 	bl	8000798 <writedata>
	writecommand(Display_Write_To_RAM);
 800085a:	202c      	movs	r0, #44	; 0x2c
 800085c:	f7ff ff80 	bl	8000760 <writecommand>
	
}
 8000860:	bf00      	nop
 8000862:	370c      	adds	r7, #12
 8000864:	46bd      	mov	sp, r7
 8000866:	bd90      	pop	{r4, r7, pc}

08000868 <drawPixel>:
void drawPixel(uint16_t x, uint16_t y, uint16_t color)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b082      	sub	sp, #8
 800086c:	af00      	add	r7, sp, #0
 800086e:	4603      	mov	r3, r0
 8000870:	80fb      	strh	r3, [r7, #6]
 8000872:	460b      	mov	r3, r1
 8000874:	80bb      	strh	r3, [r7, #4]
 8000876:	4613      	mov	r3, r2
 8000878:	807b      	strh	r3, [r7, #2]
	setAddrWindow(x, y, x + 1, y + 1);
 800087a:	88fb      	ldrh	r3, [r7, #6]
 800087c:	3301      	adds	r3, #1
 800087e:	b29a      	uxth	r2, r3
 8000880:	88bb      	ldrh	r3, [r7, #4]
 8000882:	3301      	adds	r3, #1
 8000884:	b29b      	uxth	r3, r3
 8000886:	88b9      	ldrh	r1, [r7, #4]
 8000888:	88f8      	ldrh	r0, [r7, #6]
 800088a:	f7ff ffa1 	bl	80007d0 <setAddrWindow>
	DC_HIGH();
 800088e:	f7ff fe6f 	bl	8000570 <DC_HIGH>
	CS_LOW();
 8000892:	f7ff fe63 	bl	800055c <CS_LOW>
	write16BitColor(color);
 8000896:	887b      	ldrh	r3, [r7, #2]
 8000898:	4618      	mov	r0, r3
 800089a:	f000 f806 	bl	80008aa <write16BitColor>
	CS_HIGH();
 800089e:	f7ff fe53 	bl	8000548 <CS_HIGH>
}
 80008a2:	bf00      	nop
 80008a4:	3708      	adds	r7, #8
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bd80      	pop	{r7, pc}

080008aa <write16BitColor>:
void DrawVolumebuttonDown()
{

}

void write16BitColor(uint16_t color){
 80008aa:	b580      	push	{r7, lr}
 80008ac:	b084      	sub	sp, #16
 80008ae:	af00      	add	r7, sp, #0
 80008b0:	4603      	mov	r3, r0
 80008b2:	80fb      	strh	r3, [r7, #6]
	//565  = rrrr rggg gggb bbbb
	//F800 = 1111 1000 0000 0000 //11 nullekes
	//07E0 = 0000 0111 1110 0000 //5 nulleks
	//001F = 0000 0000 0001 1111
	 uint8_t r = (color >> 8) & 0Xf8; //& 0xF800) >> 11;
 80008b4:	88fb      	ldrh	r3, [r7, #6]
 80008b6:	0a1b      	lsrs	r3, r3, #8
 80008b8:	b29b      	uxth	r3, r3
 80008ba:	b2db      	uxtb	r3, r3
 80008bc:	f023 0307 	bic.w	r3, r3, #7
 80008c0:	73fb      	strb	r3, [r7, #15]
	 uint8_t g = (color >> 3) & 0Xfc; //& 0x07E0) >> 5;
 80008c2:	88fb      	ldrh	r3, [r7, #6]
 80008c4:	08db      	lsrs	r3, r3, #3
 80008c6:	b29b      	uxth	r3, r3
 80008c8:	b2db      	uxtb	r3, r3
 80008ca:	f023 0303 	bic.w	r3, r3, #3
 80008ce:	73bb      	strb	r3, [r7, #14]
	 uint8_t b = (color <<3); //& 0x001F;
 80008d0:	88fb      	ldrh	r3, [r7, #6]
 80008d2:	b2db      	uxtb	r3, r3
 80008d4:	00db      	lsls	r3, r3, #3
 80008d6:	737b      	strb	r3, [r7, #13]
	 //2^6 = 64  (0 tot 63)
	 //2^5 = 32 (0 tot 31)
	  //r = (r * 255) / 31;
	  //g = (g * 255) / 63;
	  //b = (b * 255) / 31;
	 writedata(r);
 80008d8:	7bfb      	ldrb	r3, [r7, #15]
 80008da:	4618      	mov	r0, r3
 80008dc:	f7ff ff5c 	bl	8000798 <writedata>
	 writedata(g);
 80008e0:	7bbb      	ldrb	r3, [r7, #14]
 80008e2:	4618      	mov	r0, r3
 80008e4:	f7ff ff58 	bl	8000798 <writedata>
	 writedata(b);
 80008e8:	7b7b      	ldrb	r3, [r7, #13]
 80008ea:	4618      	mov	r0, r3
 80008ec:	f7ff ff54 	bl	8000798 <writedata>
	  //HAL_SPI_Transmit(&mySPI, &r, 1, HAL_MAX_DELAY); //Size = bytes
	  //HAL_SPI_Transmit(&mySPI, &g, 1, HAL_MAX_DELAY); //Size = bytes
	  //HAL_SPI_Transmit(&mySPI, &b, 1, HAL_MAX_DELAY); //Size = bytes
}
 80008f0:	bf00      	nop
 80008f2:	3710      	adds	r7, #16
 80008f4:	46bd      	mov	sp, r7
 80008f6:	bd80      	pop	{r7, pc}

080008f8 <DrawRectangle>:



}
void DrawRectangle(uint16_t x, uint16_t y, uint16_t h, uint16_t w, uint16_t color, uint16_t contentcolor, uint8_t border)
{
 80008f8:	b590      	push	{r4, r7, lr}
 80008fa:	b089      	sub	sp, #36	; 0x24
 80008fc:	af02      	add	r7, sp, #8
 80008fe:	4604      	mov	r4, r0
 8000900:	4608      	mov	r0, r1
 8000902:	4611      	mov	r1, r2
 8000904:	461a      	mov	r2, r3
 8000906:	4623      	mov	r3, r4
 8000908:	80fb      	strh	r3, [r7, #6]
 800090a:	4603      	mov	r3, r0
 800090c:	80bb      	strh	r3, [r7, #4]
 800090e:	460b      	mov	r3, r1
 8000910:	807b      	strh	r3, [r7, #2]
 8000912:	4613      	mov	r3, r2
 8000914:	803b      	strh	r3, [r7, #0]


	//lijntje horizontaal 1
	for(uint8_t j = 0; j <= border; j++)
 8000916:	2300      	movs	r3, #0
 8000918:	75fb      	strb	r3, [r7, #23]
 800091a:	e018      	b.n	800094e <DrawRectangle+0x56>
	{
		for(uint16_t i = x; i <= (x+w); i++)
 800091c:	88fb      	ldrh	r3, [r7, #6]
 800091e:	82bb      	strh	r3, [r7, #20]
 8000920:	e00c      	b.n	800093c <DrawRectangle+0x44>
		{
			drawPixel(i, y+j, color);
 8000922:	7dfb      	ldrb	r3, [r7, #23]
 8000924:	b29a      	uxth	r2, r3
 8000926:	88bb      	ldrh	r3, [r7, #4]
 8000928:	4413      	add	r3, r2
 800092a:	b299      	uxth	r1, r3
 800092c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800092e:	8abb      	ldrh	r3, [r7, #20]
 8000930:	4618      	mov	r0, r3
 8000932:	f7ff ff99 	bl	8000868 <drawPixel>
		for(uint16_t i = x; i <= (x+w); i++)
 8000936:	8abb      	ldrh	r3, [r7, #20]
 8000938:	3301      	adds	r3, #1
 800093a:	82bb      	strh	r3, [r7, #20]
 800093c:	8aba      	ldrh	r2, [r7, #20]
 800093e:	88f9      	ldrh	r1, [r7, #6]
 8000940:	883b      	ldrh	r3, [r7, #0]
 8000942:	440b      	add	r3, r1
 8000944:	429a      	cmp	r2, r3
 8000946:	ddec      	ble.n	8000922 <DrawRectangle+0x2a>
	for(uint8_t j = 0; j <= border; j++)
 8000948:	7dfb      	ldrb	r3, [r7, #23]
 800094a:	3301      	adds	r3, #1
 800094c:	75fb      	strb	r3, [r7, #23]
 800094e:	7dfa      	ldrb	r2, [r7, #23]
 8000950:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8000954:	429a      	cmp	r2, r3
 8000956:	d9e1      	bls.n	800091c <DrawRectangle+0x24>
		}
	}

//lijntje verticaal 1
for(uint8_t j = 0; j <= border; j++)
 8000958:	2300      	movs	r3, #0
 800095a:	74fb      	strb	r3, [r7, #19]
 800095c:	e018      	b.n	8000990 <DrawRectangle+0x98>
{
	for(uint16_t i = y; i <= (y+h); i++)
 800095e:	88bb      	ldrh	r3, [r7, #4]
 8000960:	823b      	strh	r3, [r7, #16]
 8000962:	e00c      	b.n	800097e <DrawRectangle+0x86>
	{
		drawPixel(x+j, i, color);
 8000964:	7cfb      	ldrb	r3, [r7, #19]
 8000966:	b29a      	uxth	r2, r3
 8000968:	88fb      	ldrh	r3, [r7, #6]
 800096a:	4413      	add	r3, r2
 800096c:	b29b      	uxth	r3, r3
 800096e:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8000970:	8a39      	ldrh	r1, [r7, #16]
 8000972:	4618      	mov	r0, r3
 8000974:	f7ff ff78 	bl	8000868 <drawPixel>
	for(uint16_t i = y; i <= (y+h); i++)
 8000978:	8a3b      	ldrh	r3, [r7, #16]
 800097a:	3301      	adds	r3, #1
 800097c:	823b      	strh	r3, [r7, #16]
 800097e:	8a3a      	ldrh	r2, [r7, #16]
 8000980:	88b9      	ldrh	r1, [r7, #4]
 8000982:	887b      	ldrh	r3, [r7, #2]
 8000984:	440b      	add	r3, r1
 8000986:	429a      	cmp	r2, r3
 8000988:	ddec      	ble.n	8000964 <DrawRectangle+0x6c>
for(uint8_t j = 0; j <= border; j++)
 800098a:	7cfb      	ldrb	r3, [r7, #19]
 800098c:	3301      	adds	r3, #1
 800098e:	74fb      	strb	r3, [r7, #19]
 8000990:	7cfa      	ldrb	r2, [r7, #19]
 8000992:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8000996:	429a      	cmp	r2, r3
 8000998:	d9e1      	bls.n	800095e <DrawRectangle+0x66>
	}
}
//lijntje verticaal 2
for(uint8_t j = 0; j <= border; j++)
 800099a:	2300      	movs	r3, #0
 800099c:	73fb      	strb	r3, [r7, #15]
 800099e:	e01b      	b.n	80009d8 <DrawRectangle+0xe0>
{
	for(uint16_t i = y; i <= (y+h); i++)
 80009a0:	88bb      	ldrh	r3, [r7, #4]
 80009a2:	81bb      	strh	r3, [r7, #12]
 80009a4:	e00f      	b.n	80009c6 <DrawRectangle+0xce>
	{
		drawPixel((x+w)-j, i, color);
 80009a6:	88fa      	ldrh	r2, [r7, #6]
 80009a8:	883b      	ldrh	r3, [r7, #0]
 80009aa:	4413      	add	r3, r2
 80009ac:	b29a      	uxth	r2, r3
 80009ae:	7bfb      	ldrb	r3, [r7, #15]
 80009b0:	b29b      	uxth	r3, r3
 80009b2:	1ad3      	subs	r3, r2, r3
 80009b4:	b29b      	uxth	r3, r3
 80009b6:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80009b8:	89b9      	ldrh	r1, [r7, #12]
 80009ba:	4618      	mov	r0, r3
 80009bc:	f7ff ff54 	bl	8000868 <drawPixel>
	for(uint16_t i = y; i <= (y+h); i++)
 80009c0:	89bb      	ldrh	r3, [r7, #12]
 80009c2:	3301      	adds	r3, #1
 80009c4:	81bb      	strh	r3, [r7, #12]
 80009c6:	89ba      	ldrh	r2, [r7, #12]
 80009c8:	88b9      	ldrh	r1, [r7, #4]
 80009ca:	887b      	ldrh	r3, [r7, #2]
 80009cc:	440b      	add	r3, r1
 80009ce:	429a      	cmp	r2, r3
 80009d0:	dde9      	ble.n	80009a6 <DrawRectangle+0xae>
for(uint8_t j = 0; j <= border; j++)
 80009d2:	7bfb      	ldrb	r3, [r7, #15]
 80009d4:	3301      	adds	r3, #1
 80009d6:	73fb      	strb	r3, [r7, #15]
 80009d8:	7bfa      	ldrb	r2, [r7, #15]
 80009da:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80009de:	429a      	cmp	r2, r3
 80009e0:	d9de      	bls.n	80009a0 <DrawRectangle+0xa8>
	}
}

//lijntje horizontaal 2
for(uint8_t j = 0; j <= border; j++)
 80009e2:	2300      	movs	r3, #0
 80009e4:	72fb      	strb	r3, [r7, #11]
 80009e6:	e01b      	b.n	8000a20 <DrawRectangle+0x128>
{
	for(uint16_t i = x; i <= (x+w); i++)
 80009e8:	88fb      	ldrh	r3, [r7, #6]
 80009ea:	813b      	strh	r3, [r7, #8]
 80009ec:	e00f      	b.n	8000a0e <DrawRectangle+0x116>
	{
		drawPixel(i, (y+h)-j, color);
 80009ee:	88ba      	ldrh	r2, [r7, #4]
 80009f0:	887b      	ldrh	r3, [r7, #2]
 80009f2:	4413      	add	r3, r2
 80009f4:	b29a      	uxth	r2, r3
 80009f6:	7afb      	ldrb	r3, [r7, #11]
 80009f8:	b29b      	uxth	r3, r3
 80009fa:	1ad3      	subs	r3, r2, r3
 80009fc:	b299      	uxth	r1, r3
 80009fe:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8000a00:	893b      	ldrh	r3, [r7, #8]
 8000a02:	4618      	mov	r0, r3
 8000a04:	f7ff ff30 	bl	8000868 <drawPixel>
	for(uint16_t i = x; i <= (x+w); i++)
 8000a08:	893b      	ldrh	r3, [r7, #8]
 8000a0a:	3301      	adds	r3, #1
 8000a0c:	813b      	strh	r3, [r7, #8]
 8000a0e:	893a      	ldrh	r2, [r7, #8]
 8000a10:	88f9      	ldrh	r1, [r7, #6]
 8000a12:	883b      	ldrh	r3, [r7, #0]
 8000a14:	440b      	add	r3, r1
 8000a16:	429a      	cmp	r2, r3
 8000a18:	dde9      	ble.n	80009ee <DrawRectangle+0xf6>
for(uint8_t j = 0; j <= border; j++)
 8000a1a:	7afb      	ldrb	r3, [r7, #11]
 8000a1c:	3301      	adds	r3, #1
 8000a1e:	72fb      	strb	r3, [r7, #11]
 8000a20:	7afa      	ldrb	r2, [r7, #11]
 8000a22:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8000a26:	429a      	cmp	r2, r3
 8000a28:	d9de      	bls.n	80009e8 <DrawRectangle+0xf0>
	}
}
//contentcolor
fillRect(x+border, y+border, w-(border*2), h-(border*2), contentcolor);
 8000a2a:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8000a2e:	b29a      	uxth	r2, r3
 8000a30:	88fb      	ldrh	r3, [r7, #6]
 8000a32:	4413      	add	r3, r2
 8000a34:	b298      	uxth	r0, r3
 8000a36:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8000a3a:	b29a      	uxth	r2, r3
 8000a3c:	88bb      	ldrh	r3, [r7, #4]
 8000a3e:	4413      	add	r3, r2
 8000a40:	b299      	uxth	r1, r3
 8000a42:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8000a46:	b29b      	uxth	r3, r3
 8000a48:	005b      	lsls	r3, r3, #1
 8000a4a:	b29b      	uxth	r3, r3
 8000a4c:	883a      	ldrh	r2, [r7, #0]
 8000a4e:	1ad3      	subs	r3, r2, r3
 8000a50:	b29c      	uxth	r4, r3
 8000a52:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8000a56:	b29b      	uxth	r3, r3
 8000a58:	005b      	lsls	r3, r3, #1
 8000a5a:	b29b      	uxth	r3, r3
 8000a5c:	887a      	ldrh	r2, [r7, #2]
 8000a5e:	1ad3      	subs	r3, r2, r3
 8000a60:	b29a      	uxth	r2, r3
 8000a62:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8000a64:	9300      	str	r3, [sp, #0]
 8000a66:	4613      	mov	r3, r2
 8000a68:	4622      	mov	r2, r4
 8000a6a:	f000 f805 	bl	8000a78 <fillRect>



}
 8000a6e:	bf00      	nop
 8000a70:	371c      	adds	r7, #28
 8000a72:	46bd      	mov	sp, r7
 8000a74:	bd90      	pop	{r4, r7, pc}
	...

08000a78 <fillRect>:
void fillRect(uint16_t x, uint16_t y , uint16_t w , uint16_t h, uint16_t color)
{
 8000a78:	b590      	push	{r4, r7, lr}
 8000a7a:	b083      	sub	sp, #12
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	4604      	mov	r4, r0
 8000a80:	4608      	mov	r0, r1
 8000a82:	4611      	mov	r1, r2
 8000a84:	461a      	mov	r2, r3
 8000a86:	4623      	mov	r3, r4
 8000a88:	80fb      	strh	r3, [r7, #6]
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	80bb      	strh	r3, [r7, #4]
 8000a8e:	460b      	mov	r3, r1
 8000a90:	807b      	strh	r3, [r7, #2]
 8000a92:	4613      	mov	r3, r2
 8000a94:	803b      	strh	r3, [r7, #0]
	if ((x >= Display_width) || (y >= Display_height))
 8000a96:	4b2a      	ldr	r3, [pc, #168]	; (8000b40 <fillRect+0xc8>)
 8000a98:	881b      	ldrh	r3, [r3, #0]
 8000a9a:	88fa      	ldrh	r2, [r7, #6]
 8000a9c:	429a      	cmp	r2, r3
 8000a9e:	d24a      	bcs.n	8000b36 <fillRect+0xbe>
 8000aa0:	4b28      	ldr	r3, [pc, #160]	; (8000b44 <fillRect+0xcc>)
 8000aa2:	881b      	ldrh	r3, [r3, #0]
 8000aa4:	88ba      	ldrh	r2, [r7, #4]
 8000aa6:	429a      	cmp	r2, r3
 8000aa8:	d245      	bcs.n	8000b36 <fillRect+0xbe>
		return;
	if ((x + w - 1) >= Display_width)
 8000aaa:	88fa      	ldrh	r2, [r7, #6]
 8000aac:	887b      	ldrh	r3, [r7, #2]
 8000aae:	4413      	add	r3, r2
 8000ab0:	4a23      	ldr	r2, [pc, #140]	; (8000b40 <fillRect+0xc8>)
 8000ab2:	8812      	ldrh	r2, [r2, #0]
 8000ab4:	4293      	cmp	r3, r2
 8000ab6:	dd04      	ble.n	8000ac2 <fillRect+0x4a>
		w = Display_width - x;
 8000ab8:	4b21      	ldr	r3, [pc, #132]	; (8000b40 <fillRect+0xc8>)
 8000aba:	881a      	ldrh	r2, [r3, #0]
 8000abc:	88fb      	ldrh	r3, [r7, #6]
 8000abe:	1ad3      	subs	r3, r2, r3
 8000ac0:	807b      	strh	r3, [r7, #2]
	if ((y + h - 1) >= Display_height)
 8000ac2:	88ba      	ldrh	r2, [r7, #4]
 8000ac4:	883b      	ldrh	r3, [r7, #0]
 8000ac6:	4413      	add	r3, r2
 8000ac8:	4a1e      	ldr	r2, [pc, #120]	; (8000b44 <fillRect+0xcc>)
 8000aca:	8812      	ldrh	r2, [r2, #0]
 8000acc:	4293      	cmp	r3, r2
 8000ace:	dd04      	ble.n	8000ada <fillRect+0x62>
		h = Display_height - y;
 8000ad0:	4b1c      	ldr	r3, [pc, #112]	; (8000b44 <fillRect+0xcc>)
 8000ad2:	881a      	ldrh	r2, [r3, #0]
 8000ad4:	88bb      	ldrh	r3, [r7, #4]
 8000ad6:	1ad3      	subs	r3, r2, r3
 8000ad8:	803b      	strh	r3, [r7, #0]

	setAddrWindow(x, y, x + w - 1, y + h - 1);
 8000ada:	88fa      	ldrh	r2, [r7, #6]
 8000adc:	887b      	ldrh	r3, [r7, #2]
 8000ade:	4413      	add	r3, r2
 8000ae0:	b29b      	uxth	r3, r3
 8000ae2:	3b01      	subs	r3, #1
 8000ae4:	b29c      	uxth	r4, r3
 8000ae6:	88ba      	ldrh	r2, [r7, #4]
 8000ae8:	883b      	ldrh	r3, [r7, #0]
 8000aea:	4413      	add	r3, r2
 8000aec:	b29b      	uxth	r3, r3
 8000aee:	3b01      	subs	r3, #1
 8000af0:	b29b      	uxth	r3, r3
 8000af2:	88b9      	ldrh	r1, [r7, #4]
 8000af4:	88f8      	ldrh	r0, [r7, #6]
 8000af6:	4622      	mov	r2, r4
 8000af8:	f7ff fe6a 	bl	80007d0 <setAddrWindow>

	DC_HIGH();
 8000afc:	f7ff fd38 	bl	8000570 <DC_HIGH>
	CS_LOW();
 8000b00:	f7ff fd2c 	bl	800055c <CS_LOW>

	for (y = h; y > 0; y--) {
 8000b04:	883b      	ldrh	r3, [r7, #0]
 8000b06:	80bb      	strh	r3, [r7, #4]
 8000b08:	e00f      	b.n	8000b2a <fillRect+0xb2>
		for (x = w; x > 0; x--) {
 8000b0a:	887b      	ldrh	r3, [r7, #2]
 8000b0c:	80fb      	strh	r3, [r7, #6]
 8000b0e:	e006      	b.n	8000b1e <fillRect+0xa6>

			write16BitColor(color);
 8000b10:	8b3b      	ldrh	r3, [r7, #24]
 8000b12:	4618      	mov	r0, r3
 8000b14:	f7ff fec9 	bl	80008aa <write16BitColor>
		for (x = w; x > 0; x--) {
 8000b18:	88fb      	ldrh	r3, [r7, #6]
 8000b1a:	3b01      	subs	r3, #1
 8000b1c:	80fb      	strh	r3, [r7, #6]
 8000b1e:	88fb      	ldrh	r3, [r7, #6]
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d1f5      	bne.n	8000b10 <fillRect+0x98>
	for (y = h; y > 0; y--) {
 8000b24:	88bb      	ldrh	r3, [r7, #4]
 8000b26:	3b01      	subs	r3, #1
 8000b28:	80bb      	strh	r3, [r7, #4]
 8000b2a:	88bb      	ldrh	r3, [r7, #4]
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d1ec      	bne.n	8000b0a <fillRect+0x92>
		}
	}

	CS_HIGH();
 8000b30:	f7ff fd0a 	bl	8000548 <CS_HIGH>
 8000b34:	e000      	b.n	8000b38 <fillRect+0xc0>
		return;
 8000b36:	bf00      	nop



}
 8000b38:	370c      	adds	r7, #12
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bd90      	pop	{r4, r7, pc}
 8000b3e:	bf00      	nop
 8000b40:	20000006 	.word	0x20000006
 8000b44:	20000008 	.word	0x20000008

08000b48 <DevicePressed>:


void DevicePressed(uint8_t *apparaat)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b088      	sub	sp, #32
 8000b4c:	af04      	add	r7, sp, #16
 8000b4e:	6078      	str	r0, [r7, #4]
	uint16_t color;
	uint16_t contentcolor;
	uint8_t device = *apparaat;
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	781b      	ldrb	r3, [r3, #0]
 8000b54:	72bb      	strb	r3, [r7, #10]
	switch(device)
 8000b56:	7abb      	ldrb	r3, [r7, #10]
 8000b58:	3b01      	subs	r3, #1
 8000b5a:	2b03      	cmp	r3, #3
 8000b5c:	d819      	bhi.n	8000b92 <DevicePressed+0x4a>
 8000b5e:	a201      	add	r2, pc, #4	; (adr r2, 8000b64 <DevicePressed+0x1c>)
 8000b60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b64:	08000b75 	.word	0x08000b75
 8000b68:	08000b7b 	.word	0x08000b7b
 8000b6c:	08000b83 	.word	0x08000b83
 8000b70:	08000b8b 	.word	0x08000b8b
	{
	case 1:
		color = ILI9488_BLUE;
 8000b74:	231f      	movs	r3, #31
 8000b76:	81fb      	strh	r3, [r7, #14]
		break;
 8000b78:	e00c      	b.n	8000b94 <DevicePressed+0x4c>
	case 2:
		color = ILI9488_YELLOW;
 8000b7a:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8000b7e:	81fb      	strh	r3, [r7, #14]
		break;
 8000b80:	e008      	b.n	8000b94 <DevicePressed+0x4c>
	case 3:
		color = ILI9488_GREEN;
 8000b82:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8000b86:	81fb      	strh	r3, [r7, #14]
		break;
 8000b88:	e004      	b.n	8000b94 <DevicePressed+0x4c>
	case 4:
		color = ILI9488_WHITE;
 8000b8a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000b8e:	81fb      	strh	r3, [r7, #14]
		break;
 8000b90:	e000      	b.n	8000b94 <DevicePressed+0x4c>
	default:
		break;
 8000b92:	bf00      	nop
	}
	for(uint8_t knop = 1; knop <= 14; knop++)
 8000b94:	2301      	movs	r3, #1
 8000b96:	72fb      	strb	r3, [r7, #11]
 8000b98:	e107      	b.n	8000daa <DevicePressed+0x262>
	{
		if(knop <= 12)
 8000b9a:	7afb      	ldrb	r3, [r7, #11]
 8000b9c:	2b0c      	cmp	r3, #12
 8000b9e:	d81d      	bhi.n	8000bdc <DevicePressed+0x94>
		{
			uint8_t berekening = ((device-1) * 12) + knop-1 ;
 8000ba0:	7abb      	ldrb	r3, [r7, #10]
 8000ba2:	461a      	mov	r2, r3
 8000ba4:	0052      	lsls	r2, r2, #1
 8000ba6:	4413      	add	r3, r2
 8000ba8:	009b      	lsls	r3, r3, #2
 8000baa:	b2da      	uxtb	r2, r3
 8000bac:	7afb      	ldrb	r3, [r7, #11]
 8000bae:	4413      	add	r3, r2
 8000bb0:	b2db      	uxtb	r3, r3
 8000bb2:	3b0d      	subs	r3, #13
 8000bb4:	727b      	strb	r3, [r7, #9]
			if(lengte_signaal[berekening] != 0)
 8000bb6:	7a7b      	ldrb	r3, [r7, #9]
 8000bb8:	4a80      	ldr	r2, [pc, #512]	; (8000dbc <DevicePressed+0x274>)
 8000bba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d00a      	beq.n	8000bd8 <DevicePressed+0x90>
			{
				if(knop == 1)
 8000bc2:	7afb      	ldrb	r3, [r7, #11]
 8000bc4:	2b01      	cmp	r3, #1
 8000bc6:	d103      	bne.n	8000bd0 <DevicePressed+0x88>
				{
					contentcolor = ILI9488_RED;
 8000bc8:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8000bcc:	81bb      	strh	r3, [r7, #12]
 8000bce:	e005      	b.n	8000bdc <DevicePressed+0x94>
				}
				else
				{
					contentcolor = ILI9488_DARKGREY;
 8000bd0:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8000bd4:	81bb      	strh	r3, [r7, #12]
 8000bd6:	e001      	b.n	8000bdc <DevicePressed+0x94>
				}

			}
			else
			{
			contentcolor = ILI9488_BLACK;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	81bb      	strh	r3, [r7, #12]
			}
		}
		switch(knop)
 8000bdc:	7afb      	ldrb	r3, [r7, #11]
 8000bde:	3b01      	subs	r3, #1
 8000be0:	2b0d      	cmp	r3, #13
 8000be2:	f200 80de 	bhi.w	8000da2 <DevicePressed+0x25a>
 8000be6:	a201      	add	r2, pc, #4	; (adr r2, 8000bec <DevicePressed+0xa4>)
 8000be8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000bec:	08000c25 	.word	0x08000c25
 8000bf0:	08000c3f 	.word	0x08000c3f
 8000bf4:	08000c59 	.word	0x08000c59
 8000bf8:	08000c73 	.word	0x08000c73
 8000bfc:	08000c8d 	.word	0x08000c8d
 8000c00:	08000ca7 	.word	0x08000ca7
 8000c04:	08000cc1 	.word	0x08000cc1
 8000c08:	08000cdb 	.word	0x08000cdb
 8000c0c:	08000cf7 	.word	0x08000cf7
 8000c10:	08000d13 	.word	0x08000d13
 8000c14:	08000d2f 	.word	0x08000d2f
 8000c18:	08000d4b 	.word	0x08000d4b
 8000c1c:	08000d67 	.word	0x08000d67
 8000c20:	08000d85 	.word	0x08000d85
		{
		case 1:
			//Power
			DrawRectangle(23, 50, 75, 75, color, contentcolor, 5);
 8000c24:	2305      	movs	r3, #5
 8000c26:	9302      	str	r3, [sp, #8]
 8000c28:	89bb      	ldrh	r3, [r7, #12]
 8000c2a:	9301      	str	r3, [sp, #4]
 8000c2c:	89fb      	ldrh	r3, [r7, #14]
 8000c2e:	9300      	str	r3, [sp, #0]
 8000c30:	234b      	movs	r3, #75	; 0x4b
 8000c32:	224b      	movs	r2, #75	; 0x4b
 8000c34:	2132      	movs	r1, #50	; 0x32
 8000c36:	2017      	movs	r0, #23
 8000c38:	f7ff fe5e 	bl	80008f8 <DrawRectangle>
			break;
 8000c3c:	e0b2      	b.n	8000da4 <DevicePressed+0x25c>
		case 2:
			//Src
			DrawRectangle(219, 50, 75, 75, color, contentcolor, 5);
 8000c3e:	2305      	movs	r3, #5
 8000c40:	9302      	str	r3, [sp, #8]
 8000c42:	89bb      	ldrh	r3, [r7, #12]
 8000c44:	9301      	str	r3, [sp, #4]
 8000c46:	89fb      	ldrh	r3, [r7, #14]
 8000c48:	9300      	str	r3, [sp, #0]
 8000c4a:	234b      	movs	r3, #75	; 0x4b
 8000c4c:	224b      	movs	r2, #75	; 0x4b
 8000c4e:	2132      	movs	r1, #50	; 0x32
 8000c50:	20db      	movs	r0, #219	; 0xdb
 8000c52:	f7ff fe51 	bl	80008f8 <DrawRectangle>
			break;
 8000c56:	e0a5      	b.n	8000da4 <DevicePressed+0x25c>
		case 3:
			//^
			DrawRectangle(121, 80, 75, 75, color, contentcolor, 5);
 8000c58:	2305      	movs	r3, #5
 8000c5a:	9302      	str	r3, [sp, #8]
 8000c5c:	89bb      	ldrh	r3, [r7, #12]
 8000c5e:	9301      	str	r3, [sp, #4]
 8000c60:	89fb      	ldrh	r3, [r7, #14]
 8000c62:	9300      	str	r3, [sp, #0]
 8000c64:	234b      	movs	r3, #75	; 0x4b
 8000c66:	224b      	movs	r2, #75	; 0x4b
 8000c68:	2150      	movs	r1, #80	; 0x50
 8000c6a:	2079      	movs	r0, #121	; 0x79
 8000c6c:	f7ff fe44 	bl	80008f8 <DrawRectangle>
			break;
 8000c70:	e098      	b.n	8000da4 <DevicePressed+0x25c>
		case 4:
			//<
			DrawRectangle(23, 165, 75, 75, color, contentcolor, 5);
 8000c72:	2305      	movs	r3, #5
 8000c74:	9302      	str	r3, [sp, #8]
 8000c76:	89bb      	ldrh	r3, [r7, #12]
 8000c78:	9301      	str	r3, [sp, #4]
 8000c7a:	89fb      	ldrh	r3, [r7, #14]
 8000c7c:	9300      	str	r3, [sp, #0]
 8000c7e:	234b      	movs	r3, #75	; 0x4b
 8000c80:	224b      	movs	r2, #75	; 0x4b
 8000c82:	21a5      	movs	r1, #165	; 0xa5
 8000c84:	2017      	movs	r0, #23
 8000c86:	f7ff fe37 	bl	80008f8 <DrawRectangle>
			break;
 8000c8a:	e08b      	b.n	8000da4 <DevicePressed+0x25c>
		case 5:
			//OK
			DrawRectangle(121, 165, 75, 75, color, contentcolor, 5);
 8000c8c:	2305      	movs	r3, #5
 8000c8e:	9302      	str	r3, [sp, #8]
 8000c90:	89bb      	ldrh	r3, [r7, #12]
 8000c92:	9301      	str	r3, [sp, #4]
 8000c94:	89fb      	ldrh	r3, [r7, #14]
 8000c96:	9300      	str	r3, [sp, #0]
 8000c98:	234b      	movs	r3, #75	; 0x4b
 8000c9a:	224b      	movs	r2, #75	; 0x4b
 8000c9c:	21a5      	movs	r1, #165	; 0xa5
 8000c9e:	2079      	movs	r0, #121	; 0x79
 8000ca0:	f7ff fe2a 	bl	80008f8 <DrawRectangle>
			break;
 8000ca4:	e07e      	b.n	8000da4 <DevicePressed+0x25c>
		case 6:
			//>
			DrawRectangle(219, 165, 75, 75, color, contentcolor, 5);
 8000ca6:	2305      	movs	r3, #5
 8000ca8:	9302      	str	r3, [sp, #8]
 8000caa:	89bb      	ldrh	r3, [r7, #12]
 8000cac:	9301      	str	r3, [sp, #4]
 8000cae:	89fb      	ldrh	r3, [r7, #14]
 8000cb0:	9300      	str	r3, [sp, #0]
 8000cb2:	234b      	movs	r3, #75	; 0x4b
 8000cb4:	224b      	movs	r2, #75	; 0x4b
 8000cb6:	21a5      	movs	r1, #165	; 0xa5
 8000cb8:	20db      	movs	r0, #219	; 0xdb
 8000cba:	f7ff fe1d 	bl	80008f8 <DrawRectangle>
			break;
 8000cbe:	e071      	b.n	8000da4 <DevicePressed+0x25c>
		case 7:
			//V
			DrawRectangle(121, 250, 75, 75, color, contentcolor, 5);
 8000cc0:	2305      	movs	r3, #5
 8000cc2:	9302      	str	r3, [sp, #8]
 8000cc4:	89bb      	ldrh	r3, [r7, #12]
 8000cc6:	9301      	str	r3, [sp, #4]
 8000cc8:	89fb      	ldrh	r3, [r7, #14]
 8000cca:	9300      	str	r3, [sp, #0]
 8000ccc:	234b      	movs	r3, #75	; 0x4b
 8000cce:	224b      	movs	r2, #75	; 0x4b
 8000cd0:	21fa      	movs	r1, #250	; 0xfa
 8000cd2:	2079      	movs	r0, #121	; 0x79
 8000cd4:	f7ff fe10 	bl	80008f8 <DrawRectangle>
			break;
 8000cd8:	e064      	b.n	8000da4 <DevicePressed+0x25c>
		case 8:
			//volume up
				DrawRectangle(23, 298, 75, 75, color, contentcolor, 5);
 8000cda:	2305      	movs	r3, #5
 8000cdc:	9302      	str	r3, [sp, #8]
 8000cde:	89bb      	ldrh	r3, [r7, #12]
 8000ce0:	9301      	str	r3, [sp, #4]
 8000ce2:	89fb      	ldrh	r3, [r7, #14]
 8000ce4:	9300      	str	r3, [sp, #0]
 8000ce6:	234b      	movs	r3, #75	; 0x4b
 8000ce8:	224b      	movs	r2, #75	; 0x4b
 8000cea:	f44f 7195 	mov.w	r1, #298	; 0x12a
 8000cee:	2017      	movs	r0, #23
 8000cf0:	f7ff fe02 	bl	80008f8 <DrawRectangle>
			break;
 8000cf4:	e056      	b.n	8000da4 <DevicePressed+0x25c>
		case 9:
			//volume down
				DrawRectangle(23, 393, 75, 75, color, contentcolor, 5);
 8000cf6:	2305      	movs	r3, #5
 8000cf8:	9302      	str	r3, [sp, #8]
 8000cfa:	89bb      	ldrh	r3, [r7, #12]
 8000cfc:	9301      	str	r3, [sp, #4]
 8000cfe:	89fb      	ldrh	r3, [r7, #14]
 8000d00:	9300      	str	r3, [sp, #0]
 8000d02:	234b      	movs	r3, #75	; 0x4b
 8000d04:	224b      	movs	r2, #75	; 0x4b
 8000d06:	f240 1189 	movw	r1, #393	; 0x189
 8000d0a:	2017      	movs	r0, #23
 8000d0c:	f7ff fdf4 	bl	80008f8 <DrawRectangle>
			break;
 8000d10:	e048      	b.n	8000da4 <DevicePressed+0x25c>
		case 10:
			//mute
				DrawRectangle(121, 393, 75, 75, color, contentcolor, 5);
 8000d12:	2305      	movs	r3, #5
 8000d14:	9302      	str	r3, [sp, #8]
 8000d16:	89bb      	ldrh	r3, [r7, #12]
 8000d18:	9301      	str	r3, [sp, #4]
 8000d1a:	89fb      	ldrh	r3, [r7, #14]
 8000d1c:	9300      	str	r3, [sp, #0]
 8000d1e:	234b      	movs	r3, #75	; 0x4b
 8000d20:	224b      	movs	r2, #75	; 0x4b
 8000d22:	f240 1189 	movw	r1, #393	; 0x189
 8000d26:	2079      	movs	r0, #121	; 0x79
 8000d28:	f7ff fde6 	bl	80008f8 <DrawRectangle>
			break;
 8000d2c:	e03a      	b.n	8000da4 <DevicePressed+0x25c>
		case 11:
			//channel up
				DrawRectangle(219, 298, 75, 75, color, contentcolor, 5);
 8000d2e:	2305      	movs	r3, #5
 8000d30:	9302      	str	r3, [sp, #8]
 8000d32:	89bb      	ldrh	r3, [r7, #12]
 8000d34:	9301      	str	r3, [sp, #4]
 8000d36:	89fb      	ldrh	r3, [r7, #14]
 8000d38:	9300      	str	r3, [sp, #0]
 8000d3a:	234b      	movs	r3, #75	; 0x4b
 8000d3c:	224b      	movs	r2, #75	; 0x4b
 8000d3e:	f44f 7195 	mov.w	r1, #298	; 0x12a
 8000d42:	20db      	movs	r0, #219	; 0xdb
 8000d44:	f7ff fdd8 	bl	80008f8 <DrawRectangle>
			break;
 8000d48:	e02c      	b.n	8000da4 <DevicePressed+0x25c>
		case 12:
			//channel down
				DrawRectangle(219, 393, 75, 75, color, contentcolor, 5);
 8000d4a:	2305      	movs	r3, #5
 8000d4c:	9302      	str	r3, [sp, #8]
 8000d4e:	89bb      	ldrh	r3, [r7, #12]
 8000d50:	9301      	str	r3, [sp, #4]
 8000d52:	89fb      	ldrh	r3, [r7, #14]
 8000d54:	9300      	str	r3, [sp, #0]
 8000d56:	234b      	movs	r3, #75	; 0x4b
 8000d58:	224b      	movs	r2, #75	; 0x4b
 8000d5a:	f240 1189 	movw	r1, #393	; 0x189
 8000d5e:	20db      	movs	r0, #219	; 0xdb
 8000d60:	f7ff fdca 	bl	80008f8 <DrawRectangle>
			break;
 8000d64:	e01e      	b.n	8000da4 <DevicePressed+0x25c>
		case 13:
			//Add
				DrawRectangle(23, 245, 48, 75, ILI9488_GREENYELLOW, ILI9488_GREENYELLOW, 0);
 8000d66:	2300      	movs	r3, #0
 8000d68:	9302      	str	r3, [sp, #8]
 8000d6a:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8000d6e:	9301      	str	r3, [sp, #4]
 8000d70:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8000d74:	9300      	str	r3, [sp, #0]
 8000d76:	234b      	movs	r3, #75	; 0x4b
 8000d78:	2230      	movs	r2, #48	; 0x30
 8000d7a:	21f5      	movs	r1, #245	; 0xf5
 8000d7c:	2017      	movs	r0, #23
 8000d7e:	f7ff fdbb 	bl	80008f8 <DrawRectangle>
			break;
 8000d82:	e00f      	b.n	8000da4 <DevicePressed+0x25c>
		case 14:
			//Delete
					DrawRectangle(219, 245, 48, 75, ILI9488_RED, ILI9488_RED, 0);
 8000d84:	2300      	movs	r3, #0
 8000d86:	9302      	str	r3, [sp, #8]
 8000d88:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8000d8c:	9301      	str	r3, [sp, #4]
 8000d8e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8000d92:	9300      	str	r3, [sp, #0]
 8000d94:	234b      	movs	r3, #75	; 0x4b
 8000d96:	2230      	movs	r2, #48	; 0x30
 8000d98:	21f5      	movs	r1, #245	; 0xf5
 8000d9a:	20db      	movs	r0, #219	; 0xdb
 8000d9c:	f7ff fdac 	bl	80008f8 <DrawRectangle>
			break;
 8000da0:	e000      	b.n	8000da4 <DevicePressed+0x25c>
		default:
			break;
 8000da2:	bf00      	nop
	for(uint8_t knop = 1; knop <= 14; knop++)
 8000da4:	7afb      	ldrb	r3, [r7, #11]
 8000da6:	3301      	adds	r3, #1
 8000da8:	72fb      	strb	r3, [r7, #11]
 8000daa:	7afb      	ldrb	r3, [r7, #11]
 8000dac:	2b0e      	cmp	r3, #14
 8000dae:	f67f aef4 	bls.w	8000b9a <DevicePressed+0x52>





}
 8000db2:	bf00      	nop
 8000db4:	bf00      	nop
 8000db6:	3710      	adds	r7, #16
 8000db8:	46bd      	mov	sp, r7
 8000dba:	bd80      	pop	{r7, pc}
 8000dbc:	20002720 	.word	0x20002720

08000dc0 <buttonPressed>:
void buttonPressed(uint8_t *dev, uint8_t *knop, uint8_t *Sensingtouch, uint16_t *X_w, uint16_t *Y_w)
{
 8000dc0:	b590      	push	{r4, r7, lr}
 8000dc2:	f2ad 4d0c 	subw	sp, sp, #1036	; 0x40c
 8000dc6:	af00      	add	r7, sp, #0
 8000dc8:	f507 6481 	add.w	r4, r7, #1032	; 0x408
 8000dcc:	f5a4 747f 	sub.w	r4, r4, #1020	; 0x3fc
 8000dd0:	6020      	str	r0, [r4, #0]
 8000dd2:	f507 6081 	add.w	r0, r7, #1032	; 0x408
 8000dd6:	f5a0 6080 	sub.w	r0, r0, #1024	; 0x400
 8000dda:	6001      	str	r1, [r0, #0]
 8000ddc:	f507 6181 	add.w	r1, r7, #1032	; 0x408
 8000de0:	f2a1 4104 	subw	r1, r1, #1028	; 0x404
 8000de4:	600a      	str	r2, [r1, #0]
 8000de6:	f507 6281 	add.w	r2, r7, #1032	; 0x408
 8000dea:	f5a2 6281 	sub.w	r2, r2, #1032	; 0x408
 8000dee:	6013      	str	r3, [r2, #0]
uint8_t device = *dev;
 8000df0:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 8000df4:	f5a3 737f 	sub.w	r3, r3, #1020	; 0x3fc
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	781b      	ldrb	r3, [r3, #0]
 8000dfc:	f887 3403 	strb.w	r3, [r7, #1027]	; 0x403
uint8_t button = *knop;
 8000e00:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 8000e04:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	781b      	ldrb	r3, [r3, #0]
 8000e0c:	f887 3402 	strb.w	r3, [r7, #1026]	; 0x402
uint8_t aanraak = *Sensingtouch;
 8000e10:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 8000e14:	f2a3 4304 	subw	r3, r3, #1028	; 0x404
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	781b      	ldrb	r3, [r3, #0]
 8000e1c:	f887 3401 	strb.w	r3, [r7, #1025]	; 0x401
uint16_t X_waarde = *X_w;
 8000e20:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 8000e24:	f5a3 6381 	sub.w	r3, r3, #1032	; 0x408
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	881b      	ldrh	r3, [r3, #0]
 8000e2c:	f8a7 33fe 	strh.w	r3, [r7, #1022]	; 0x3fe
uint16_t Y_waarde = *Y_w;
 8000e30:	f8d7 3418 	ldr.w	r3, [r7, #1048]	; 0x418
 8000e34:	881b      	ldrh	r3, [r3, #0]
 8000e36:	f8a7 33fc 	strh.w	r3, [r7, #1020]	; 0x3fc

uint8_t controle = 0;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	f887 33fb 	strb.w	r3, [r7, #1019]	; 0x3fb
uint8_t berekening = ((device-1) * 12) + button-1 ;
 8000e40:	f897 3403 	ldrb.w	r3, [r7, #1027]	; 0x403
 8000e44:	461a      	mov	r2, r3
 8000e46:	0052      	lsls	r2, r2, #1
 8000e48:	4413      	add	r3, r2
 8000e4a:	009b      	lsls	r3, r3, #2
 8000e4c:	b2da      	uxtb	r2, r3
 8000e4e:	f897 3402 	ldrb.w	r3, [r7, #1026]	; 0x402
 8000e52:	4413      	add	r3, r2
 8000e54:	b2db      	uxtb	r3, r3
 8000e56:	3b0d      	subs	r3, #13
 8000e58:	b2db      	uxtb	r3, r3
 8000e5a:	f887 33fa 	strb.w	r3, [r7, #1018]	; 0x3fa
	 if(button >= 13) //Is de knop een ADD/Delete button?
 8000e5e:	f897 3402 	ldrb.w	r3, [r7, #1026]	; 0x402
 8000e62:	2b0c      	cmp	r3, #12
 8000e64:	f240 80c9 	bls.w	8000ffa <buttonPressed+0x23a>
	 {
		 switch(button)
 8000e68:	f897 3402 	ldrb.w	r3, [r7, #1026]	; 0x402
 8000e6c:	2b0d      	cmp	r3, #13
 8000e6e:	d003      	beq.n	8000e78 <buttonPressed+0xb8>
 8000e70:	2b0e      	cmp	r3, #14
 8000e72:	f000 808a 	beq.w	8000f8a <buttonPressed+0x1ca>
			 	 printf("button %d , duw op een knop van de andere afstandsbediening, die je wilt instellen\r\n", button);
			 	 IR_Read();

			 break;
		 default:
			 break;
 8000e76:	e115      	b.n	80010a4 <buttonPressed+0x2e4>
			 button = 0;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	f887 3402 	strb.w	r3, [r7, #1026]	; 0x402
			 cleartijd();
 8000e7e:	f000 fa4d 	bl	800131c <cleartijd>
			 X_waarde = 160; Y_waarde = 363;
 8000e82:	23a0      	movs	r3, #160	; 0xa0
 8000e84:	f8a7 33fe 	strh.w	r3, [r7, #1022]	; 0x3fe
 8000e88:	f240 136b 	movw	r3, #363	; 0x16b
 8000e8c:	f8a7 33fc 	strh.w	r3, [r7, #1020]	; 0x3fc
			 printf("button %d , duw op een knop van de andere afstandsbediening, die je wilt instellen\r\n", button);
 8000e90:	f897 3402 	ldrb.w	r3, [r7, #1026]	; 0x402
 8000e94:	4619      	mov	r1, r3
 8000e96:	4886      	ldr	r0, [pc, #536]	; (80010b0 <buttonPressed+0x2f0>)
 8000e98:	f006 fba4 	bl	80075e4 <iprintf>
			 while(button == 0)
 8000e9c:	e02f      	b.n	8000efe <buttonPressed+0x13e>
				 Touch(&aanraak, &X_waarde, &Y_waarde);
 8000e9e:	f507 727f 	add.w	r2, r7, #1020	; 0x3fc
 8000ea2:	f207 31fe 	addw	r1, r7, #1022	; 0x3fe
 8000ea6:	f207 4301 	addw	r3, r7, #1025	; 0x401
 8000eaa:	4618      	mov	r0, r3
 8000eac:	f000 fbee 	bl	800168c <Touch>
				 ReadButton(&button, &X_waarde, &Y_waarde);
 8000eb0:	f507 727f 	add.w	r2, r7, #1020	; 0x3fc
 8000eb4:	f207 31fe 	addw	r1, r7, #1022	; 0x3fe
 8000eb8:	f207 4302 	addw	r3, r7, #1026	; 0x402
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	f000 fcc1 	bl	8001844 <ReadButton>
				 berekening = ((device-1) * 12) + button-1;
 8000ec2:	f897 3403 	ldrb.w	r3, [r7, #1027]	; 0x403
 8000ec6:	461a      	mov	r2, r3
 8000ec8:	0052      	lsls	r2, r2, #1
 8000eca:	4413      	add	r3, r2
 8000ecc:	009b      	lsls	r3, r3, #2
 8000ece:	b2da      	uxtb	r2, r3
 8000ed0:	f897 3402 	ldrb.w	r3, [r7, #1026]	; 0x402
 8000ed4:	4413      	add	r3, r2
 8000ed6:	b2db      	uxtb	r3, r3
 8000ed8:	3b0d      	subs	r3, #13
 8000eda:	b2db      	uxtb	r3, r3
 8000edc:	f887 33fa 	strb.w	r3, [r7, #1018]	; 0x3fa
				 if(button > 12 || lengte_signaal[berekening] != 0 ) //als add/delete knop ingesteld is, of als knop al ingesteld is
 8000ee0:	f897 3402 	ldrb.w	r3, [r7, #1026]	; 0x402
 8000ee4:	2b0c      	cmp	r3, #12
 8000ee6:	d807      	bhi.n	8000ef8 <buttonPressed+0x138>
 8000ee8:	f897 33fa 	ldrb.w	r3, [r7, #1018]	; 0x3fa
 8000eec:	461a      	mov	r2, r3
 8000eee:	4b71      	ldr	r3, [pc, #452]	; (80010b4 <buttonPressed+0x2f4>)
 8000ef0:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d002      	beq.n	8000efe <buttonPressed+0x13e>
					 button=0;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	f887 3402 	strb.w	r3, [r7, #1026]	; 0x402
			 while(button == 0)
 8000efe:	f897 3402 	ldrb.w	r3, [r7, #1026]	; 0x402
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d0cb      	beq.n	8000e9e <buttonPressed+0xde>
			 berekening = ((device-1) * 12) + button-1;
 8000f06:	f897 3403 	ldrb.w	r3, [r7, #1027]	; 0x403
 8000f0a:	461a      	mov	r2, r3
 8000f0c:	0052      	lsls	r2, r2, #1
 8000f0e:	4413      	add	r3, r2
 8000f10:	009b      	lsls	r3, r3, #2
 8000f12:	b2da      	uxtb	r2, r3
 8000f14:	f897 3402 	ldrb.w	r3, [r7, #1026]	; 0x402
 8000f18:	4413      	add	r3, r2
 8000f1a:	b2db      	uxtb	r3, r3
 8000f1c:	3b0d      	subs	r3, #13
 8000f1e:	b2db      	uxtb	r3, r3
 8000f20:	f887 33fa 	strb.w	r3, [r7, #1018]	; 0x3fa
			 ColorToSelectedbutton(&button, 0x07E0);
 8000f24:	f207 4302 	addw	r3, r7, #1026	; 0x402
 8000f28:	f44f 61fc 	mov.w	r1, #2016	; 0x7e0
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	f000 f8cb 	bl	80010c8 <ColorToSelectedbutton>
			 IR_Read();
 8000f32:	f000 fa83 	bl	800143c <IR_Read>
			 uint8_t nosignal = 0; //In het begin gaan we er vanuit dat er geen signaal is
 8000f36:	2300      	movs	r3, #0
 8000f38:	f887 33f9 	strb.w	r3, [r7, #1017]	; 0x3f9
			 uint8_t lengte_signaal_gevonden = 0; //In het begin gaan we er vanuit dat er nog geen lengte van het signaal gevonden is
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	f887 33f8 	strb.w	r3, [r7, #1016]	; 0x3f8
			 while(nosignal != 2)
 8000f42:	e008      	b.n	8000f56 <buttonPressed+0x196>
			 IR_UNDERSTAND(&berekening, &nosignal, &lengte_signaal_gevonden);
 8000f44:	f507 727e 	add.w	r2, r7, #1016	; 0x3f8
 8000f48:	f207 31f9 	addw	r1, r7, #1017	; 0x3f9
 8000f4c:	f207 33fa 	addw	r3, r7, #1018	; 0x3fa
 8000f50:	4618      	mov	r0, r3
 8000f52:	f000 fa7f 	bl	8001454 <IR_UNDERSTAND>
			 while(nosignal != 2)
 8000f56:	f897 33f9 	ldrb.w	r3, [r7, #1017]	; 0x3f9
 8000f5a:	2b02      	cmp	r3, #2
 8000f5c:	d1f2      	bne.n	8000f44 <buttonPressed+0x184>
			 IR_READ_flag = 0;
 8000f5e:	4b56      	ldr	r3, [pc, #344]	; (80010b8 <buttonPressed+0x2f8>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	701a      	strb	r2, [r3, #0]
			 WriteToGeheugen(&device,&button);
 8000f64:	f207 4202 	addw	r2, r7, #1026	; 0x402
 8000f68:	f207 4303 	addw	r3, r7, #1027	; 0x403
 8000f6c:	4611      	mov	r1, r2
 8000f6e:	4618      	mov	r0, r3
 8000f70:	f7ff f9da 	bl	8000328 <WriteToGeheugen>
			 ColorToSelectedbutton(&button, 0x7BEF);
 8000f74:	f207 4302 	addw	r3, r7, #1026	; 0x402
 8000f78:	f647 31ef 	movw	r1, #31727	; 0x7bef
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	f000 f8a3 	bl	80010c8 <ColorToSelectedbutton>
			 button=0;
 8000f82:	2300      	movs	r3, #0
 8000f84:	f887 3402 	strb.w	r3, [r7, #1026]	; 0x402
			 break;
 8000f88:	e08c      	b.n	80010a4 <buttonPressed+0x2e4>
			 button = 0;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	f887 3402 	strb.w	r3, [r7, #1026]	; 0x402
			 X_waarde = 160; Y_waarde = 363;
 8000f90:	23a0      	movs	r3, #160	; 0xa0
 8000f92:	f8a7 33fe 	strh.w	r3, [r7, #1022]	; 0x3fe
 8000f96:	f240 136b 	movw	r3, #363	; 0x16b
 8000f9a:	f8a7 33fc 	strh.w	r3, [r7, #1020]	; 0x3fc
			 while(button == 0)
 8000f9e:	e018      	b.n	8000fd2 <buttonPressed+0x212>
				 Touch(&aanraak, &X_waarde, &Y_waarde);
 8000fa0:	f507 727f 	add.w	r2, r7, #1020	; 0x3fc
 8000fa4:	f207 31fe 	addw	r1, r7, #1022	; 0x3fe
 8000fa8:	f207 4301 	addw	r3, r7, #1025	; 0x401
 8000fac:	4618      	mov	r0, r3
 8000fae:	f000 fb6d 	bl	800168c <Touch>
				 ReadButton(&button, &X_waarde, &Y_waarde);
 8000fb2:	f507 727f 	add.w	r2, r7, #1020	; 0x3fc
 8000fb6:	f207 31fe 	addw	r1, r7, #1022	; 0x3fe
 8000fba:	f207 4302 	addw	r3, r7, #1026	; 0x402
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	f000 fc40 	bl	8001844 <ReadButton>
				if(button > 12)
 8000fc4:	f897 3402 	ldrb.w	r3, [r7, #1026]	; 0x402
 8000fc8:	2b0c      	cmp	r3, #12
 8000fca:	d902      	bls.n	8000fd2 <buttonPressed+0x212>
					button=0;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	f887 3402 	strb.w	r3, [r7, #1026]	; 0x402
			 while(button == 0)
 8000fd2:	f897 3402 	ldrb.w	r3, [r7, #1026]	; 0x402
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d0e2      	beq.n	8000fa0 <buttonPressed+0x1e0>
			 	 ColorToSelectedbutton(&button, 0xF800);
 8000fda:	f207 4302 	addw	r3, r7, #1026	; 0x402
 8000fde:	f44f 4178 	mov.w	r1, #63488	; 0xf800
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	f000 f870 	bl	80010c8 <ColorToSelectedbutton>
			 	 printf("button %d , duw op een knop van de andere afstandsbediening, die je wilt instellen\r\n", button);
 8000fe8:	f897 3402 	ldrb.w	r3, [r7, #1026]	; 0x402
 8000fec:	4619      	mov	r1, r3
 8000fee:	4830      	ldr	r0, [pc, #192]	; (80010b0 <buttonPressed+0x2f0>)
 8000ff0:	f006 faf8 	bl	80075e4 <iprintf>
			 	 IR_Read();
 8000ff4:	f000 fa22 	bl	800143c <IR_Read>
			 break;
 8000ff8:	e054      	b.n	80010a4 <buttonPressed+0x2e4>
	 }
	 else
	 {
		 //Heeft ingeduwde knop tijdswaarden? Ja dan is controle = 1
		 uint16_t tijd_geheugen[500];
		 TakefromGeheugen(&device, &button, &tijd_geheugen, &controle);
 8000ffa:	f207 33fb 	addw	r3, r7, #1019	; 0x3fb
 8000ffe:	f107 0210 	add.w	r2, r7, #16
 8001002:	f207 4102 	addw	r1, r7, #1026	; 0x402
 8001006:	f207 4003 	addw	r0, r7, #1027	; 0x403
 800100a:	f7ff f9e1 	bl	80003d0 <TakefromGeheugen>
		 if(controle == 0)
 800100e:	f897 33fb 	ldrb.w	r3, [r7, #1019]	; 0x3fb
 8001012:	2b00      	cmp	r3, #0
 8001014:	d103      	bne.n	800101e <buttonPressed+0x25e>
		 {
			 printf("knop is niet ingesteld\r\n");
 8001016:	4829      	ldr	r0, [pc, #164]	; (80010bc <buttonPressed+0x2fc>)
 8001018:	f006 fb6a 	bl	80076f0 <puts>

		 }


	 }
}
 800101c:	e042      	b.n	80010a4 <buttonPressed+0x2e4>
			 	 	 uint16_t lensignaal = lengte_signaal[berekening];
 800101e:	f897 33fa 	ldrb.w	r3, [r7, #1018]	; 0x3fa
 8001022:	461a      	mov	r2, r3
 8001024:	4b23      	ldr	r3, [pc, #140]	; (80010b4 <buttonPressed+0x2f4>)
 8001026:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800102a:	f8a7 3404 	strh.w	r3, [r7, #1028]	; 0x404
			 	 	 printf("berekening is %d lengte is %d\r\n", berekening, lensignaal);
 800102e:	f897 33fa 	ldrb.w	r3, [r7, #1018]	; 0x3fa
 8001032:	4619      	mov	r1, r3
 8001034:	f8b7 3404 	ldrh.w	r3, [r7, #1028]	; 0x404
 8001038:	461a      	mov	r2, r3
 800103a:	4821      	ldr	r0, [pc, #132]	; (80010c0 <buttonPressed+0x300>)
 800103c:	f006 fad2 	bl	80075e4 <iprintf>
					 for(uint16_t i = 0; i < lengte_signaal[berekening]; i ++)
 8001040:	2300      	movs	r3, #0
 8001042:	f8a7 3406 	strh.w	r3, [r7, #1030]	; 0x406
 8001046:	e013      	b.n	8001070 <buttonPressed+0x2b0>
					 printf("ik werk %d  controle= %d\r\n ", tijd_geheugen[i], controle);
 8001048:	f8b7 2406 	ldrh.w	r2, [r7, #1030]	; 0x406
 800104c:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 8001050:	f5a3 737e 	sub.w	r3, r3, #1016	; 0x3f8
 8001054:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001058:	4619      	mov	r1, r3
 800105a:	f897 33fb 	ldrb.w	r3, [r7, #1019]	; 0x3fb
 800105e:	461a      	mov	r2, r3
 8001060:	4818      	ldr	r0, [pc, #96]	; (80010c4 <buttonPressed+0x304>)
 8001062:	f006 fabf 	bl	80075e4 <iprintf>
					 for(uint16_t i = 0; i < lengte_signaal[berekening]; i ++)
 8001066:	f8b7 3406 	ldrh.w	r3, [r7, #1030]	; 0x406
 800106a:	3301      	adds	r3, #1
 800106c:	f8a7 3406 	strh.w	r3, [r7, #1030]	; 0x406
 8001070:	f897 33fa 	ldrb.w	r3, [r7, #1018]	; 0x3fa
 8001074:	461a      	mov	r2, r3
 8001076:	4b0f      	ldr	r3, [pc, #60]	; (80010b4 <buttonPressed+0x2f4>)
 8001078:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800107c:	f8b7 2406 	ldrh.w	r2, [r7, #1030]	; 0x406
 8001080:	429a      	cmp	r2, r3
 8001082:	d3e1      	bcc.n	8001048 <buttonPressed+0x288>
					 IR_sent(&tijd_geheugen, lensignaal);
 8001084:	f8b7 2404 	ldrh.w	r2, [r7, #1028]	; 0x404
 8001088:	f107 0310 	add.w	r3, r7, #16
 800108c:	4611      	mov	r1, r2
 800108e:	4618      	mov	r0, r3
 8001090:	f000 fa74 	bl	800157c <IR_sent>
					 *knop = 0;
 8001094:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 8001098:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	2200      	movs	r2, #0
 80010a0:	701a      	strb	r2, [r3, #0]
}
 80010a2:	e7ff      	b.n	80010a4 <buttonPressed+0x2e4>
 80010a4:	bf00      	nop
 80010a6:	f207 470c 	addw	r7, r7, #1036	; 0x40c
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd90      	pop	{r4, r7, pc}
 80010ae:	bf00      	nop
 80010b0:	080088e4 	.word	0x080088e4
 80010b4:	20002720 	.word	0x20002720
 80010b8:	20002812 	.word	0x20002812
 80010bc:	0800893c 	.word	0x0800893c
 80010c0:	08008954 	.word	0x08008954
 80010c4:	08008974 	.word	0x08008974

080010c8 <ColorToSelectedbutton>:
void ColorToSelectedbutton(uint8_t *button, uint16_t color)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b088      	sub	sp, #32
 80010cc:	af04      	add	r7, sp, #16
 80010ce:	6078      	str	r0, [r7, #4]
 80010d0:	460b      	mov	r3, r1
 80010d2:	807b      	strh	r3, [r7, #2]
	uint8_t knop = *button;
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	781b      	ldrb	r3, [r3, #0]
 80010d8:	73fb      	strb	r3, [r7, #15]
	switch(knop)
 80010da:	7bfb      	ldrb	r3, [r7, #15]
 80010dc:	3b01      	subs	r3, #1
 80010de:	2b0b      	cmp	r3, #11
 80010e0:	f200 80bd 	bhi.w	800125e <ColorToSelectedbutton+0x196>
 80010e4:	a201      	add	r2, pc, #4	; (adr r2, 80010ec <ColorToSelectedbutton+0x24>)
 80010e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010ea:	bf00      	nop
 80010ec:	0800111d 	.word	0x0800111d
 80010f0:	08001137 	.word	0x08001137
 80010f4:	08001151 	.word	0x08001151
 80010f8:	0800116b 	.word	0x0800116b
 80010fc:	08001185 	.word	0x08001185
 8001100:	0800119f 	.word	0x0800119f
 8001104:	080011b9 	.word	0x080011b9
 8001108:	080011d3 	.word	0x080011d3
 800110c:	080011ef 	.word	0x080011ef
 8001110:	0800120b 	.word	0x0800120b
 8001114:	08001227 	.word	0x08001227
 8001118:	08001243 	.word	0x08001243
			{
			case 1:
				//Power
				DrawRectangle(23, 50, 75, 75, ILI9488_BLACK, color, 5);
 800111c:	2305      	movs	r3, #5
 800111e:	9302      	str	r3, [sp, #8]
 8001120:	887b      	ldrh	r3, [r7, #2]
 8001122:	9301      	str	r3, [sp, #4]
 8001124:	2300      	movs	r3, #0
 8001126:	9300      	str	r3, [sp, #0]
 8001128:	234b      	movs	r3, #75	; 0x4b
 800112a:	224b      	movs	r2, #75	; 0x4b
 800112c:	2132      	movs	r1, #50	; 0x32
 800112e:	2017      	movs	r0, #23
 8001130:	f7ff fbe2 	bl	80008f8 <DrawRectangle>
				break;
 8001134:	e094      	b.n	8001260 <ColorToSelectedbutton+0x198>
			case 2:
				//Src
				DrawRectangle(219, 50, 75, 75, ILI9488_BLACK, color, 5);
 8001136:	2305      	movs	r3, #5
 8001138:	9302      	str	r3, [sp, #8]
 800113a:	887b      	ldrh	r3, [r7, #2]
 800113c:	9301      	str	r3, [sp, #4]
 800113e:	2300      	movs	r3, #0
 8001140:	9300      	str	r3, [sp, #0]
 8001142:	234b      	movs	r3, #75	; 0x4b
 8001144:	224b      	movs	r2, #75	; 0x4b
 8001146:	2132      	movs	r1, #50	; 0x32
 8001148:	20db      	movs	r0, #219	; 0xdb
 800114a:	f7ff fbd5 	bl	80008f8 <DrawRectangle>
				break;
 800114e:	e087      	b.n	8001260 <ColorToSelectedbutton+0x198>
			case 3:
				//^
				DrawRectangle(121, 80, 75, 75, ILI9488_BLACK, color, 5);
 8001150:	2305      	movs	r3, #5
 8001152:	9302      	str	r3, [sp, #8]
 8001154:	887b      	ldrh	r3, [r7, #2]
 8001156:	9301      	str	r3, [sp, #4]
 8001158:	2300      	movs	r3, #0
 800115a:	9300      	str	r3, [sp, #0]
 800115c:	234b      	movs	r3, #75	; 0x4b
 800115e:	224b      	movs	r2, #75	; 0x4b
 8001160:	2150      	movs	r1, #80	; 0x50
 8001162:	2079      	movs	r0, #121	; 0x79
 8001164:	f7ff fbc8 	bl	80008f8 <DrawRectangle>
				break;
 8001168:	e07a      	b.n	8001260 <ColorToSelectedbutton+0x198>
			case 4:
				//<
				DrawRectangle(23, 165, 75, 75, ILI9488_BLACK, color, 5);
 800116a:	2305      	movs	r3, #5
 800116c:	9302      	str	r3, [sp, #8]
 800116e:	887b      	ldrh	r3, [r7, #2]
 8001170:	9301      	str	r3, [sp, #4]
 8001172:	2300      	movs	r3, #0
 8001174:	9300      	str	r3, [sp, #0]
 8001176:	234b      	movs	r3, #75	; 0x4b
 8001178:	224b      	movs	r2, #75	; 0x4b
 800117a:	21a5      	movs	r1, #165	; 0xa5
 800117c:	2017      	movs	r0, #23
 800117e:	f7ff fbbb 	bl	80008f8 <DrawRectangle>
				break;
 8001182:	e06d      	b.n	8001260 <ColorToSelectedbutton+0x198>
			case 5:
				//OK
				DrawRectangle(121, 165, 75, 75, ILI9488_BLACK, color, 5);
 8001184:	2305      	movs	r3, #5
 8001186:	9302      	str	r3, [sp, #8]
 8001188:	887b      	ldrh	r3, [r7, #2]
 800118a:	9301      	str	r3, [sp, #4]
 800118c:	2300      	movs	r3, #0
 800118e:	9300      	str	r3, [sp, #0]
 8001190:	234b      	movs	r3, #75	; 0x4b
 8001192:	224b      	movs	r2, #75	; 0x4b
 8001194:	21a5      	movs	r1, #165	; 0xa5
 8001196:	2079      	movs	r0, #121	; 0x79
 8001198:	f7ff fbae 	bl	80008f8 <DrawRectangle>
				break;
 800119c:	e060      	b.n	8001260 <ColorToSelectedbutton+0x198>
			case 6:
				//>
				DrawRectangle(219, 165, 75, 75, ILI9488_BLACK, color, 5);
 800119e:	2305      	movs	r3, #5
 80011a0:	9302      	str	r3, [sp, #8]
 80011a2:	887b      	ldrh	r3, [r7, #2]
 80011a4:	9301      	str	r3, [sp, #4]
 80011a6:	2300      	movs	r3, #0
 80011a8:	9300      	str	r3, [sp, #0]
 80011aa:	234b      	movs	r3, #75	; 0x4b
 80011ac:	224b      	movs	r2, #75	; 0x4b
 80011ae:	21a5      	movs	r1, #165	; 0xa5
 80011b0:	20db      	movs	r0, #219	; 0xdb
 80011b2:	f7ff fba1 	bl	80008f8 <DrawRectangle>
				break;
 80011b6:	e053      	b.n	8001260 <ColorToSelectedbutton+0x198>
			case 7:
				//V
				DrawRectangle(121, 250, 75, 75, ILI9488_BLACK, color, 5);
 80011b8:	2305      	movs	r3, #5
 80011ba:	9302      	str	r3, [sp, #8]
 80011bc:	887b      	ldrh	r3, [r7, #2]
 80011be:	9301      	str	r3, [sp, #4]
 80011c0:	2300      	movs	r3, #0
 80011c2:	9300      	str	r3, [sp, #0]
 80011c4:	234b      	movs	r3, #75	; 0x4b
 80011c6:	224b      	movs	r2, #75	; 0x4b
 80011c8:	21fa      	movs	r1, #250	; 0xfa
 80011ca:	2079      	movs	r0, #121	; 0x79
 80011cc:	f7ff fb94 	bl	80008f8 <DrawRectangle>
				break;
 80011d0:	e046      	b.n	8001260 <ColorToSelectedbutton+0x198>
			case 8:
				//volume up
					DrawRectangle(23, 298, 75, 75, ILI9488_BLACK, color, 5);
 80011d2:	2305      	movs	r3, #5
 80011d4:	9302      	str	r3, [sp, #8]
 80011d6:	887b      	ldrh	r3, [r7, #2]
 80011d8:	9301      	str	r3, [sp, #4]
 80011da:	2300      	movs	r3, #0
 80011dc:	9300      	str	r3, [sp, #0]
 80011de:	234b      	movs	r3, #75	; 0x4b
 80011e0:	224b      	movs	r2, #75	; 0x4b
 80011e2:	f44f 7195 	mov.w	r1, #298	; 0x12a
 80011e6:	2017      	movs	r0, #23
 80011e8:	f7ff fb86 	bl	80008f8 <DrawRectangle>
				break;
 80011ec:	e038      	b.n	8001260 <ColorToSelectedbutton+0x198>
			case 9:
				//volume down
					DrawRectangle(23, 393, 75, 75, ILI9488_BLACK, color, 5);
 80011ee:	2305      	movs	r3, #5
 80011f0:	9302      	str	r3, [sp, #8]
 80011f2:	887b      	ldrh	r3, [r7, #2]
 80011f4:	9301      	str	r3, [sp, #4]
 80011f6:	2300      	movs	r3, #0
 80011f8:	9300      	str	r3, [sp, #0]
 80011fa:	234b      	movs	r3, #75	; 0x4b
 80011fc:	224b      	movs	r2, #75	; 0x4b
 80011fe:	f240 1189 	movw	r1, #393	; 0x189
 8001202:	2017      	movs	r0, #23
 8001204:	f7ff fb78 	bl	80008f8 <DrawRectangle>
				break;
 8001208:	e02a      	b.n	8001260 <ColorToSelectedbutton+0x198>
			case 10:
				//mute
					DrawRectangle(121, 393, 75, 75, ILI9488_BLACK, color, 5);
 800120a:	2305      	movs	r3, #5
 800120c:	9302      	str	r3, [sp, #8]
 800120e:	887b      	ldrh	r3, [r7, #2]
 8001210:	9301      	str	r3, [sp, #4]
 8001212:	2300      	movs	r3, #0
 8001214:	9300      	str	r3, [sp, #0]
 8001216:	234b      	movs	r3, #75	; 0x4b
 8001218:	224b      	movs	r2, #75	; 0x4b
 800121a:	f240 1189 	movw	r1, #393	; 0x189
 800121e:	2079      	movs	r0, #121	; 0x79
 8001220:	f7ff fb6a 	bl	80008f8 <DrawRectangle>
				break;
 8001224:	e01c      	b.n	8001260 <ColorToSelectedbutton+0x198>
			case 11:
				//channel up
					DrawRectangle(219, 298, 75, 75, ILI9488_BLACK, color, 5);
 8001226:	2305      	movs	r3, #5
 8001228:	9302      	str	r3, [sp, #8]
 800122a:	887b      	ldrh	r3, [r7, #2]
 800122c:	9301      	str	r3, [sp, #4]
 800122e:	2300      	movs	r3, #0
 8001230:	9300      	str	r3, [sp, #0]
 8001232:	234b      	movs	r3, #75	; 0x4b
 8001234:	224b      	movs	r2, #75	; 0x4b
 8001236:	f44f 7195 	mov.w	r1, #298	; 0x12a
 800123a:	20db      	movs	r0, #219	; 0xdb
 800123c:	f7ff fb5c 	bl	80008f8 <DrawRectangle>
				break;
 8001240:	e00e      	b.n	8001260 <ColorToSelectedbutton+0x198>
			case 12:
				//channel down
					DrawRectangle(219, 393, 75, 75, ILI9488_BLACK, color, 5);
 8001242:	2305      	movs	r3, #5
 8001244:	9302      	str	r3, [sp, #8]
 8001246:	887b      	ldrh	r3, [r7, #2]
 8001248:	9301      	str	r3, [sp, #4]
 800124a:	2300      	movs	r3, #0
 800124c:	9300      	str	r3, [sp, #0]
 800124e:	234b      	movs	r3, #75	; 0x4b
 8001250:	224b      	movs	r2, #75	; 0x4b
 8001252:	f240 1189 	movw	r1, #393	; 0x189
 8001256:	20db      	movs	r0, #219	; 0xdb
 8001258:	f7ff fb4e 	bl	80008f8 <DrawRectangle>
				break;
 800125c:	e000      	b.n	8001260 <ColorToSelectedbutton+0x198>
			default:
				break;
 800125e:	bf00      	nop
			}
}
 8001260:	bf00      	nop
 8001262:	3710      	adds	r7, #16
 8001264:	46bd      	mov	sp, r7
 8001266:	bd80      	pop	{r7, pc}

08001268 <mainscreen>:
void mainscreen()
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b084      	sub	sp, #16
 800126c:	af04      	add	r7, sp, #16
	if(UartScreen == 1)
 800126e:	4b28      	ldr	r3, [pc, #160]	; (8001310 <mainscreen+0xa8>)
 8001270:	781b      	ldrb	r3, [r3, #0]
 8001272:	2b01      	cmp	r3, #1
 8001274:	d102      	bne.n	800127c <mainscreen+0x14>
		{
		printf("Even geduld...\r\n");
 8001276:	4827      	ldr	r0, [pc, #156]	; (8001314 <mainscreen+0xac>)
 8001278:	f006 fa3a 	bl	80076f0 <puts>
		}
	fillRect(0, 0, 320, 480, 0x0000);
 800127c:	2300      	movs	r3, #0
 800127e:	9300      	str	r3, [sp, #0]
 8001280:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8001284:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001288:	2100      	movs	r1, #0
 800128a:	2000      	movs	r0, #0
 800128c:	f7ff fbf4 	bl	8000a78 <fillRect>
	//DrawImage(0, 0, POWERBUTTON_DATA_X_PIXEL, POWERBUTTON_DATA_Y_PIXEL, POWERBUTTON_DATA);
	//DrawRectangle(x, y, h, w, color, contentcolor, border)
	DrawRectangle(0, 0, 40, 79, ILI9488_BLUE, ILI9488_BLUE, 0);
 8001290:	2300      	movs	r3, #0
 8001292:	9302      	str	r3, [sp, #8]
 8001294:	231f      	movs	r3, #31
 8001296:	9301      	str	r3, [sp, #4]
 8001298:	231f      	movs	r3, #31
 800129a:	9300      	str	r3, [sp, #0]
 800129c:	234f      	movs	r3, #79	; 0x4f
 800129e:	2228      	movs	r2, #40	; 0x28
 80012a0:	2100      	movs	r1, #0
 80012a2:	2000      	movs	r0, #0
 80012a4:	f7ff fb28 	bl	80008f8 <DrawRectangle>
	DrawRectangle(80, 0, 40, 79, ILI9488_YELLOW, ILI9488_YELLOW, 0);
 80012a8:	2300      	movs	r3, #0
 80012aa:	9302      	str	r3, [sp, #8]
 80012ac:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80012b0:	9301      	str	r3, [sp, #4]
 80012b2:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80012b6:	9300      	str	r3, [sp, #0]
 80012b8:	234f      	movs	r3, #79	; 0x4f
 80012ba:	2228      	movs	r2, #40	; 0x28
 80012bc:	2100      	movs	r1, #0
 80012be:	2050      	movs	r0, #80	; 0x50
 80012c0:	f7ff fb1a 	bl	80008f8 <DrawRectangle>
	DrawRectangle(160, 0, 40, 79, ILI9488_GREEN, ILI9488_GREEN, 0);
 80012c4:	2300      	movs	r3, #0
 80012c6:	9302      	str	r3, [sp, #8]
 80012c8:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80012cc:	9301      	str	r3, [sp, #4]
 80012ce:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80012d2:	9300      	str	r3, [sp, #0]
 80012d4:	234f      	movs	r3, #79	; 0x4f
 80012d6:	2228      	movs	r2, #40	; 0x28
 80012d8:	2100      	movs	r1, #0
 80012da:	20a0      	movs	r0, #160	; 0xa0
 80012dc:	f7ff fb0c 	bl	80008f8 <DrawRectangle>
	DrawRectangle(240, 0, 40, 79, ILI9488_WHITE, ILI9488_WHITE, 0);
 80012e0:	2300      	movs	r3, #0
 80012e2:	9302      	str	r3, [sp, #8]
 80012e4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80012e8:	9301      	str	r3, [sp, #4]
 80012ea:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80012ee:	9300      	str	r3, [sp, #0]
 80012f0:	234f      	movs	r3, #79	; 0x4f
 80012f2:	2228      	movs	r2, #40	; 0x28
 80012f4:	2100      	movs	r1, #0
 80012f6:	20f0      	movs	r0, #240	; 0xf0
 80012f8:	f7ff fafe 	bl	80008f8 <DrawRectangle>

	if(UartScreen == 1)
 80012fc:	4b04      	ldr	r3, [pc, #16]	; (8001310 <mainscreen+0xa8>)
 80012fe:	781b      	ldrb	r3, [r3, #0]
 8001300:	2b01      	cmp	r3, #1
 8001302:	d102      	bne.n	800130a <mainscreen+0xa2>
	{
	printf("MainScreen ingeladen\r\n");
 8001304:	4804      	ldr	r0, [pc, #16]	; (8001318 <mainscreen+0xb0>)
 8001306:	f006 f9f3 	bl	80076f0 <puts>
	}
}
 800130a:	bf00      	nop
 800130c:	46bd      	mov	sp, r7
 800130e:	bd80      	pop	{r7, pc}
 8001310:	20000000 	.word	0x20000000
 8001314:	08008990 	.word	0x08008990
 8001318:	080089a0 	.word	0x080089a0

0800131c <cleartijd>:
uint16_t eerste_flank = 0;
uint32_t eerste_flank_plus_2sec = 0;
uint8_t IR_Done = 0;

void cleartijd()
{
 800131c:	b480      	push	{r7}
 800131e:	b083      	sub	sp, #12
 8001320:	af00      	add	r7, sp, #0
	eerste_flank = 0;
 8001322:	4b0f      	ldr	r3, [pc, #60]	; (8001360 <cleartijd+0x44>)
 8001324:	2200      	movs	r2, #0
 8001326:	801a      	strh	r2, [r3, #0]
	eerste_flank_plus_2sec = 0;
 8001328:	4b0e      	ldr	r3, [pc, #56]	; (8001364 <cleartijd+0x48>)
 800132a:	2200      	movs	r2, #0
 800132c:	601a      	str	r2, [r3, #0]
	IR_Done = 0;
 800132e:	4b0e      	ldr	r3, [pc, #56]	; (8001368 <cleartijd+0x4c>)
 8001330:	2200      	movs	r2, #0
 8001332:	701a      	strb	r2, [r3, #0]
	for(uint16_t i = 0; i < 500; i++)
 8001334:	2300      	movs	r3, #0
 8001336:	80fb      	strh	r3, [r7, #6]
 8001338:	e007      	b.n	800134a <cleartijd+0x2e>
	{
		tijd[i]=0;
 800133a:	88fb      	ldrh	r3, [r7, #6]
 800133c:	4a0b      	ldr	r2, [pc, #44]	; (800136c <cleartijd+0x50>)
 800133e:	2100      	movs	r1, #0
 8001340:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(uint16_t i = 0; i < 500; i++)
 8001344:	88fb      	ldrh	r3, [r7, #6]
 8001346:	3301      	adds	r3, #1
 8001348:	80fb      	strh	r3, [r7, #6]
 800134a:	88fb      	ldrh	r3, [r7, #6]
 800134c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001350:	d3f3      	bcc.n	800133a <cleartijd+0x1e>
	}
}
 8001352:	bf00      	nop
 8001354:	bf00      	nop
 8001356:	370c      	adds	r7, #12
 8001358:	46bd      	mov	sp, r7
 800135a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135e:	4770      	bx	lr
 8001360:	20002c02 	.word	0x20002c02
 8001364:	20002c04 	.word	0x20002c04
 8001368:	20002c08 	.word	0x20002c08
 800136c:	20002818 	.word	0x20002818

08001370 <Interrupt_flank>:

void Interrupt_flank()
{
 8001370:	b580      	push	{r7, lr}
 8001372:	af00      	add	r7, sp, #0

	if(IR_READ_flag == 1)
 8001374:	4b1f      	ldr	r3, [pc, #124]	; (80013f4 <Interrupt_flank+0x84>)
 8001376:	781b      	ldrb	r3, [r3, #0]
 8001378:	2b01      	cmp	r3, #1
 800137a:	d136      	bne.n	80013ea <Interrupt_flank+0x7a>
	{
		eerste_flank++;
 800137c:	4b1e      	ldr	r3, [pc, #120]	; (80013f8 <Interrupt_flank+0x88>)
 800137e:	881b      	ldrh	r3, [r3, #0]
 8001380:	3301      	adds	r3, #1
 8001382:	b29a      	uxth	r2, r3
 8001384:	4b1c      	ldr	r3, [pc, #112]	; (80013f8 <Interrupt_flank+0x88>)
 8001386:	801a      	strh	r2, [r3, #0]
		if(eerste_flank == 1) //eerste flank
 8001388:	4b1b      	ldr	r3, [pc, #108]	; (80013f8 <Interrupt_flank+0x88>)
 800138a:	881b      	ldrh	r3, [r3, #0]
 800138c:	2b01      	cmp	r3, #1
 800138e:	d109      	bne.n	80013a4 <Interrupt_flank+0x34>
			{
					HAL_TIM_Base_Start(&TIM_1us);
 8001390:	481a      	ldr	r0, [pc, #104]	; (80013fc <Interrupt_flank+0x8c>)
 8001392:	f004 fc03 	bl	8005b9c <HAL_TIM_Base_Start>
					eerste_flank_plus_2sec = HAL_GetTick() + 2000;
 8001396:	f001 f8c5 	bl	8002524 <HAL_GetTick>
 800139a:	4603      	mov	r3, r0
 800139c:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 80013a0:	4a17      	ldr	r2, [pc, #92]	; (8001400 <Interrupt_flank+0x90>)
 80013a2:	6013      	str	r3, [r2, #0]
			}
		if(eerste_flank >= 2) // alle andere flanken
 80013a4:	4b14      	ldr	r3, [pc, #80]	; (80013f8 <Interrupt_flank+0x88>)
 80013a6:	881b      	ldrh	r3, [r3, #0]
 80013a8:	2b01      	cmp	r3, #1
 80013aa:	d921      	bls.n	80013f0 <Interrupt_flank+0x80>
			{
				HAL_TIM_Base_Stop(&TIM_1us); //timer stoppen
 80013ac:	4813      	ldr	r0, [pc, #76]	; (80013fc <Interrupt_flank+0x8c>)
 80013ae:	f004 fc41 	bl	8005c34 <HAL_TIM_Base_Stop>
				tijd[pulsecounter] = TIM_1us.Instance -> CNT; //timer opslaan
 80013b2:	4b12      	ldr	r3, [pc, #72]	; (80013fc <Interrupt_flank+0x8c>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80013b8:	4b12      	ldr	r3, [pc, #72]	; (8001404 <Interrupt_flank+0x94>)
 80013ba:	881b      	ldrh	r3, [r3, #0]
 80013bc:	461a      	mov	r2, r3
 80013be:	b289      	uxth	r1, r1
 80013c0:	4b11      	ldr	r3, [pc, #68]	; (8001408 <Interrupt_flank+0x98>)
 80013c2:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
				lengte = pulsecounter;
 80013c6:	4b0f      	ldr	r3, [pc, #60]	; (8001404 <Interrupt_flank+0x94>)
 80013c8:	881a      	ldrh	r2, [r3, #0]
 80013ca:	4b10      	ldr	r3, [pc, #64]	; (800140c <Interrupt_flank+0x9c>)
 80013cc:	801a      	strh	r2, [r3, #0]
				pulsecounter++;
 80013ce:	4b0d      	ldr	r3, [pc, #52]	; (8001404 <Interrupt_flank+0x94>)
 80013d0:	881b      	ldrh	r3, [r3, #0]
 80013d2:	3301      	adds	r3, #1
 80013d4:	b29a      	uxth	r2, r3
 80013d6:	4b0b      	ldr	r3, [pc, #44]	; (8001404 <Interrupt_flank+0x94>)
 80013d8:	801a      	strh	r2, [r3, #0]
				TIM_1us.Instance -> CNT = 0;
 80013da:	4b08      	ldr	r3, [pc, #32]	; (80013fc <Interrupt_flank+0x8c>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	2200      	movs	r2, #0
 80013e0:	625a      	str	r2, [r3, #36]	; 0x24
				HAL_TIM_Base_Start(&TIM_1us);
 80013e2:	4806      	ldr	r0, [pc, #24]	; (80013fc <Interrupt_flank+0x8c>)
 80013e4:	f004 fbda 	bl	8005b9c <HAL_TIM_Base_Start>
	else
	{
		printf("ik kan niet werken, aangezien ik uit sta\r\n");
	}

}
 80013e8:	e002      	b.n	80013f0 <Interrupt_flank+0x80>
		printf("ik kan niet werken, aangezien ik uit sta\r\n");
 80013ea:	4809      	ldr	r0, [pc, #36]	; (8001410 <Interrupt_flank+0xa0>)
 80013ec:	f006 f980 	bl	80076f0 <puts>
}
 80013f0:	bf00      	nop
 80013f2:	bd80      	pop	{r7, pc}
 80013f4:	20002812 	.word	0x20002812
 80013f8:	20002c02 	.word	0x20002c02
 80013fc:	20002d10 	.word	0x20002d10
 8001400:	20002c04 	.word	0x20002c04
 8001404:	20002810 	.word	0x20002810
 8001408:	20002818 	.word	0x20002818
 800140c:	20002814 	.word	0x20002814
 8001410:	080089b8 	.word	0x080089b8

08001414 <IR_Carrier_ON>:
void IR_Carrier_ON()
{
 8001414:	b580      	push	{r7, lr}
 8001416:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&TIM_PWM_CARRIER, TIM_PWM_CARRIER_CHANNEL);
 8001418:	2100      	movs	r1, #0
 800141a:	4802      	ldr	r0, [pc, #8]	; (8001424 <IR_Carrier_ON+0x10>)
 800141c:	f004 fc88 	bl	8005d30 <HAL_TIM_PWM_Start>
}
 8001420:	bf00      	nop
 8001422:	bd80      	pop	{r7, pc}
 8001424:	20002cc4 	.word	0x20002cc4

08001428 <IR_Carrier_OFF>:
void IR_Carrier_OFF()
{
 8001428:	b580      	push	{r7, lr}
 800142a:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Stop(&TIM_PWM_CARRIER, TIM_PWM_CARRIER_CHANNEL);
 800142c:	2100      	movs	r1, #0
 800142e:	4802      	ldr	r0, [pc, #8]	; (8001438 <IR_Carrier_OFF+0x10>)
 8001430:	f004 fd64 	bl	8005efc <HAL_TIM_PWM_Stop>
}
 8001434:	bf00      	nop
 8001436:	bd80      	pop	{r7, pc}
 8001438:	20002cc4 	.word	0x20002cc4

0800143c <IR_Read>:
void IR_Read()
{
 800143c:	b480      	push	{r7}
 800143e:	af00      	add	r7, sp, #0
	IR_READ_flag = 1 ;
 8001440:	4b03      	ldr	r3, [pc, #12]	; (8001450 <IR_Read+0x14>)
 8001442:	2201      	movs	r2, #1
 8001444:	701a      	strb	r2, [r3, #0]
}
 8001446:	bf00      	nop
 8001448:	46bd      	mov	sp, r7
 800144a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144e:	4770      	bx	lr
 8001450:	20002812 	.word	0x20002812

08001454 <IR_UNDERSTAND>:

void IR_UNDERSTAND(uint8_t *berekening, uint8_t *geen_signaal, uint8_t *lengte_signaal_gevonden)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b086      	sub	sp, #24
 8001458:	af00      	add	r7, sp, #0
 800145a:	60f8      	str	r0, [r7, #12]
 800145c:	60b9      	str	r1, [r7, #8]
 800145e:	607a      	str	r2, [r7, #4]



	if(HAL_GetTick() >= eerste_flank_plus_2sec)
 8001460:	f001 f860 	bl	8002524 <HAL_GetTick>
 8001464:	4602      	mov	r2, r0
 8001466:	4b3c      	ldr	r3, [pc, #240]	; (8001558 <IR_UNDERSTAND+0x104>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	429a      	cmp	r2, r3
 800146c:	d36f      	bcc.n	800154e <IR_UNDERSTAND+0xfa>
	{
	//geen_signaal in het begin op 0 zetten, geen signaal =0, wel een signaal = 1, lengte gevonden = 2
	//5 metingen test
	uint8_t measurement = 0;
 800146e:	2300      	movs	r3, #0
 8001470:	75fb      	strb	r3, [r7, #23]
	for(uint8_t five_measurements = 0; five_measurements < 5; five_measurements++)
 8001472:	2300      	movs	r3, #0
 8001474:	75bb      	strb	r3, [r7, #22]
 8001476:	e00b      	b.n	8001490 <IR_UNDERSTAND+0x3c>
	{
		if(tijd[five_measurements] == 0)
 8001478:	7dbb      	ldrb	r3, [r7, #22]
 800147a:	4a38      	ldr	r2, [pc, #224]	; (800155c <IR_UNDERSTAND+0x108>)
 800147c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001480:	2b00      	cmp	r3, #0
 8001482:	d102      	bne.n	800148a <IR_UNDERSTAND+0x36>
			{
				measurement++;
 8001484:	7dfb      	ldrb	r3, [r7, #23]
 8001486:	3301      	adds	r3, #1
 8001488:	75fb      	strb	r3, [r7, #23]
	for(uint8_t five_measurements = 0; five_measurements < 5; five_measurements++)
 800148a:	7dbb      	ldrb	r3, [r7, #22]
 800148c:	3301      	adds	r3, #1
 800148e:	75bb      	strb	r3, [r7, #22]
 8001490:	7dbb      	ldrb	r3, [r7, #22]
 8001492:	2b04      	cmp	r3, #4
 8001494:	d9f0      	bls.n	8001478 <IR_UNDERSTAND+0x24>
			}
		}
	if(measurement == 5)
 8001496:	7dfb      	ldrb	r3, [r7, #23]
 8001498:	2b05      	cmp	r3, #5
 800149a:	d106      	bne.n	80014aa <IR_UNDERSTAND+0x56>
		{
				printf("Er is niks gemeten \r\n");
 800149c:	4830      	ldr	r0, [pc, #192]	; (8001560 <IR_UNDERSTAND+0x10c>)
 800149e:	f006 f927 	bl	80076f0 <puts>
				*geen_signaal = 0;
 80014a2:	68bb      	ldr	r3, [r7, #8]
 80014a4:	2200      	movs	r2, #0
 80014a6:	701a      	strb	r2, [r3, #0]
 80014a8:	e00c      	b.n	80014c4 <IR_UNDERSTAND+0x70>
		}
	else
		{
		printf("Er is iets gemeten %d \r\n", lengte_signaal[commando]);
 80014aa:	4b2e      	ldr	r3, [pc, #184]	; (8001564 <IR_UNDERSTAND+0x110>)
 80014ac:	781b      	ldrb	r3, [r3, #0]
 80014ae:	461a      	mov	r2, r3
 80014b0:	4b2d      	ldr	r3, [pc, #180]	; (8001568 <IR_UNDERSTAND+0x114>)
 80014b2:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80014b6:	4619      	mov	r1, r3
 80014b8:	482c      	ldr	r0, [pc, #176]	; (800156c <IR_UNDERSTAND+0x118>)
 80014ba:	f006 f893 	bl	80075e4 <iprintf>
		*geen_signaal = 1;
 80014be:	68bb      	ldr	r3, [r7, #8]
 80014c0:	2201      	movs	r2, #1
 80014c2:	701a      	strb	r2, [r3, #0]
		}
	if(*geen_signaal == 1)   //als er een signaal gevonden is
 80014c4:	68bb      	ldr	r3, [r7, #8]
 80014c6:	781b      	ldrb	r3, [r3, #0]
 80014c8:	2b01      	cmp	r3, #1
 80014ca:	d140      	bne.n	800154e <IR_UNDERSTAND+0xfa>
		{

			if(*lengte_signaal_gevonden == 0)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	781b      	ldrb	r3, [r3, #0]
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d13c      	bne.n	800154e <IR_UNDERSTAND+0xfa>
			{

				for(uint16_t debugwaarde = 0; debugwaarde < 500 ; debugwaarde++)
 80014d4:	2300      	movs	r3, #0
 80014d6:	82bb      	strh	r3, [r7, #20]
 80014d8:	e00b      	b.n	80014f2 <IR_UNDERSTAND+0x9e>
				{
				 printf("tijd[%d] = %d \r\n", debugwaarde, tijd[debugwaarde]);
 80014da:	8ab9      	ldrh	r1, [r7, #20]
 80014dc:	8abb      	ldrh	r3, [r7, #20]
 80014de:	4a1f      	ldr	r2, [pc, #124]	; (800155c <IR_UNDERSTAND+0x108>)
 80014e0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80014e4:	461a      	mov	r2, r3
 80014e6:	4822      	ldr	r0, [pc, #136]	; (8001570 <IR_UNDERSTAND+0x11c>)
 80014e8:	f006 f87c 	bl	80075e4 <iprintf>
				for(uint16_t debugwaarde = 0; debugwaarde < 500 ; debugwaarde++)
 80014ec:	8abb      	ldrh	r3, [r7, #20]
 80014ee:	3301      	adds	r3, #1
 80014f0:	82bb      	strh	r3, [r7, #20]
 80014f2:	8abb      	ldrh	r3, [r7, #20]
 80014f4:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80014f8:	d3ef      	bcc.n	80014da <IR_UNDERSTAND+0x86>
				}
				uint16_t waarde = 499;
 80014fa:	f240 13f3 	movw	r3, #499	; 0x1f3
 80014fe:	827b      	strh	r3, [r7, #18]
				while(tijd[waarde] == 0)
 8001500:	e002      	b.n	8001508 <IR_UNDERSTAND+0xb4>
				{
				waarde--;
 8001502:	8a7b      	ldrh	r3, [r7, #18]
 8001504:	3b01      	subs	r3, #1
 8001506:	827b      	strh	r3, [r7, #18]
				while(tijd[waarde] == 0)
 8001508:	8a7b      	ldrh	r3, [r7, #18]
 800150a:	4a14      	ldr	r2, [pc, #80]	; (800155c <IR_UNDERSTAND+0x108>)
 800150c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001510:	2b00      	cmp	r3, #0
 8001512:	d0f6      	beq.n	8001502 <IR_UNDERSTAND+0xae>
				}
				lengte_signaal[*berekening] = waarde;
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	781b      	ldrb	r3, [r3, #0]
 8001518:	4619      	mov	r1, r3
 800151a:	4a13      	ldr	r2, [pc, #76]	; (8001568 <IR_UNDERSTAND+0x114>)
 800151c:	8a7b      	ldrh	r3, [r7, #18]
 800151e:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
				printf("lengte signaal = %d\r\n", lengte_signaal[*berekening]);
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	781b      	ldrb	r3, [r3, #0]
 8001526:	461a      	mov	r2, r3
 8001528:	4b0f      	ldr	r3, [pc, #60]	; (8001568 <IR_UNDERSTAND+0x114>)
 800152a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800152e:	4619      	mov	r1, r3
 8001530:	4810      	ldr	r0, [pc, #64]	; (8001574 <IR_UNDERSTAND+0x120>)
 8001532:	f006 f857 	bl	80075e4 <iprintf>
				printf("trouwens berekening= %d\r\n", *berekening);
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	781b      	ldrb	r3, [r3, #0]
 800153a:	4619      	mov	r1, r3
 800153c:	480e      	ldr	r0, [pc, #56]	; (8001578 <IR_UNDERSTAND+0x124>)
 800153e:	f006 f851 	bl	80075e4 <iprintf>
				*lengte_signaal_gevonden = 1;
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	2201      	movs	r2, #1
 8001546:	701a      	strb	r2, [r3, #0]
				*geen_signaal=2;
 8001548:	68bb      	ldr	r3, [r7, #8]
 800154a:	2202      	movs	r2, #2
 800154c:	701a      	strb	r2, [r3, #0]
			}
		}
	}

}
 800154e:	bf00      	nop
 8001550:	3718      	adds	r7, #24
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}
 8001556:	bf00      	nop
 8001558:	20002c04 	.word	0x20002c04
 800155c:	20002818 	.word	0x20002818
 8001560:	080089e4 	.word	0x080089e4
 8001564:	20002c00 	.word	0x20002c00
 8001568:	20002720 	.word	0x20002720
 800156c:	080089fc 	.word	0x080089fc
 8001570:	08008a18 	.word	0x08008a18
 8001574:	08008a2c 	.word	0x08008a2c
 8001578:	08008a44 	.word	0x08008a44

0800157c <IR_sent>:



void IR_sent(uint16_t *tijd, uint16_t lengte_sig)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b084      	sub	sp, #16
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
 8001584:	460b      	mov	r3, r1
 8001586:	807b      	strh	r3, [r7, #2]
	printf("lengte in IR_sent is %d en eerste tijdswaarden is %d\r\n", lengte_sig, tijd[0]);
 8001588:	8879      	ldrh	r1, [r7, #2]
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	881b      	ldrh	r3, [r3, #0]
 800158e:	461a      	mov	r2, r3
 8001590:	4825      	ldr	r0, [pc, #148]	; (8001628 <IR_sent+0xac>)
 8001592:	f006 f827 	bl	80075e4 <iprintf>
   IR_READ_flag = 0; //er kan niks meer ingelezen worden
 8001596:	4b25      	ldr	r3, [pc, #148]	; (800162c <IR_sent+0xb0>)
 8001598:	2200      	movs	r2, #0
 800159a:	701a      	strb	r2, [r3, #0]
   for(uint8_t i = 0; i < lengte_sig; i++)
 800159c:	2300      	movs	r3, #0
 800159e:	73fb      	strb	r3, [r7, #15]
 80015a0:	e037      	b.n	8001612 <IR_sent+0x96>
   {

	   if((i%2)==0)
 80015a2:	7bfb      	ldrb	r3, [r7, #15]
 80015a4:	f003 0301 	and.w	r3, r3, #1
 80015a8:	b2db      	uxtb	r3, r3
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d117      	bne.n	80015de <IR_sent+0x62>
	   {
		   HAL_TIM_Base_Stop(&TIM_1us);
 80015ae:	4820      	ldr	r0, [pc, #128]	; (8001630 <IR_sent+0xb4>)
 80015b0:	f004 fb40 	bl	8005c34 <HAL_TIM_Base_Stop>
		   TIM_1us.Instance->CNT = 0;
 80015b4:	4b1e      	ldr	r3, [pc, #120]	; (8001630 <IR_sent+0xb4>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	2200      	movs	r2, #0
 80015ba:	625a      	str	r2, [r3, #36]	; 0x24
		   HAL_TIM_Base_Start(&TIM_1us);
 80015bc:	481c      	ldr	r0, [pc, #112]	; (8001630 <IR_sent+0xb4>)
 80015be:	f004 faed 	bl	8005b9c <HAL_TIM_Base_Start>
		   IR_Carrier_ON();
 80015c2:	f7ff ff27 	bl	8001414 <IR_Carrier_ON>
		   while((TIM_1us.Instance->CNT) <= tijd[i]){}
 80015c6:	bf00      	nop
 80015c8:	4b19      	ldr	r3, [pc, #100]	; (8001630 <IR_sent+0xb4>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015ce:	7bfa      	ldrb	r2, [r7, #15]
 80015d0:	0052      	lsls	r2, r2, #1
 80015d2:	6879      	ldr	r1, [r7, #4]
 80015d4:	440a      	add	r2, r1
 80015d6:	8812      	ldrh	r2, [r2, #0]
 80015d8:	4293      	cmp	r3, r2
 80015da:	d9f5      	bls.n	80015c8 <IR_sent+0x4c>
 80015dc:	e016      	b.n	800160c <IR_sent+0x90>
	   }
	   else
	   {
		   HAL_TIM_Base_Stop(&TIM_1us);
 80015de:	4814      	ldr	r0, [pc, #80]	; (8001630 <IR_sent+0xb4>)
 80015e0:	f004 fb28 	bl	8005c34 <HAL_TIM_Base_Stop>
		   TIM_1us.Instance->CNT = 0;
 80015e4:	4b12      	ldr	r3, [pc, #72]	; (8001630 <IR_sent+0xb4>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	2200      	movs	r2, #0
 80015ea:	625a      	str	r2, [r3, #36]	; 0x24
		   HAL_TIM_Base_Start(&TIM_1us);
 80015ec:	4810      	ldr	r0, [pc, #64]	; (8001630 <IR_sent+0xb4>)
 80015ee:	f004 fad5 	bl	8005b9c <HAL_TIM_Base_Start>
		   IR_Carrier_OFF();
 80015f2:	f7ff ff19 	bl	8001428 <IR_Carrier_OFF>
		   while((TIM_1us.Instance->CNT) <= tijd[i]){}
 80015f6:	bf00      	nop
 80015f8:	4b0d      	ldr	r3, [pc, #52]	; (8001630 <IR_sent+0xb4>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015fe:	7bfa      	ldrb	r2, [r7, #15]
 8001600:	0052      	lsls	r2, r2, #1
 8001602:	6879      	ldr	r1, [r7, #4]
 8001604:	440a      	add	r2, r1
 8001606:	8812      	ldrh	r2, [r2, #0]
 8001608:	4293      	cmp	r3, r2
 800160a:	d9f5      	bls.n	80015f8 <IR_sent+0x7c>
   for(uint8_t i = 0; i < lengte_sig; i++)
 800160c:	7bfb      	ldrb	r3, [r7, #15]
 800160e:	3301      	adds	r3, #1
 8001610:	73fb      	strb	r3, [r7, #15]
 8001612:	7bfb      	ldrb	r3, [r7, #15]
 8001614:	b29b      	uxth	r3, r3
 8001616:	887a      	ldrh	r2, [r7, #2]
 8001618:	429a      	cmp	r2, r3
 800161a:	d8c2      	bhi.n	80015a2 <IR_sent+0x26>

	   }
   }
   IR_Carrier_OFF();
 800161c:	f7ff ff04 	bl	8001428 <IR_Carrier_OFF>
}
 8001620:	bf00      	nop
 8001622:	3710      	adds	r7, #16
 8001624:	46bd      	mov	sp, r7
 8001626:	bd80      	pop	{r7, pc}
 8001628:	08008a60 	.word	0x08008a60
 800162c:	20002812 	.word	0x20002812
 8001630:	20002d10 	.word	0x20002d10

08001634 <InitTouch>:
#define Tim_Backlight htim10



void InitTouch()
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b088      	sub	sp, #32
 8001638:	af02      	add	r7, sp, #8
	uint16_t device_address_write = 0xBA;
 800163a:	23ba      	movs	r3, #186	; 0xba
 800163c:	82fb      	strh	r3, [r7, #22]
	uint16_t device_address_read = 0xBB;
 800163e:	23bb      	movs	r3, #187	; 0xbb
 8001640:	82bb      	strh	r3, [r7, #20]
	uint8_t dataWrite[] = {0x81,0x40};
 8001642:	f244 0381 	movw	r3, #16513	; 0x4081
 8001646:	823b      	strh	r3, [r7, #16]
	uint8_t ontvangen[11];
	HAL_I2C_Master_Transmit(&hi2c1, device_address_write, 0, 0 , HAL_MAX_DELAY); //new
 8001648:	8af9      	ldrh	r1, [r7, #22]
 800164a:	f04f 33ff 	mov.w	r3, #4294967295
 800164e:	9300      	str	r3, [sp, #0]
 8001650:	2300      	movs	r3, #0
 8001652:	2200      	movs	r2, #0
 8001654:	480c      	ldr	r0, [pc, #48]	; (8001688 <InitTouch+0x54>)
 8001656:	f001 fae3 	bl	8002c20 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Transmit(&hi2c1, device_address_write, dataWrite, 2 , HAL_MAX_DELAY);
 800165a:	f107 0210 	add.w	r2, r7, #16
 800165e:	8af9      	ldrh	r1, [r7, #22]
 8001660:	f04f 33ff 	mov.w	r3, #4294967295
 8001664:	9300      	str	r3, [sp, #0]
 8001666:	2302      	movs	r3, #2
 8001668:	4807      	ldr	r0, [pc, #28]	; (8001688 <InitTouch+0x54>)
 800166a:	f001 fad9 	bl	8002c20 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1, device_address_read, ontvangen, 11, HAL_MAX_DELAY); //
 800166e:	1d3a      	adds	r2, r7, #4
 8001670:	8ab9      	ldrh	r1, [r7, #20]
 8001672:	f04f 33ff 	mov.w	r3, #4294967295
 8001676:	9300      	str	r3, [sp, #0]
 8001678:	230b      	movs	r3, #11
 800167a:	4803      	ldr	r0, [pc, #12]	; (8001688 <InitTouch+0x54>)
 800167c:	f001 fbc4 	bl	8002e08 <HAL_I2C_Master_Receive>
}
 8001680:	bf00      	nop
 8001682:	3718      	adds	r7, #24
 8001684:	46bd      	mov	sp, r7
 8001686:	bd80      	pop	{r7, pc}
 8001688:	20002c0c 	.word	0x20002c0c

0800168c <Touch>:
void Touch(uint8_t *Sensingtouch, uint16_t *X_waarde, uint16_t *Y_waarde)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b08e      	sub	sp, #56	; 0x38
 8001690:	af04      	add	r7, sp, #16
 8001692:	60f8      	str	r0, [r7, #12]
 8001694:	60b9      	str	r1, [r7, #8]
 8001696:	607a      	str	r2, [r7, #4]
	uint16_t device_address_write = 0xBA;
 8001698:	23ba      	movs	r3, #186	; 0xba
 800169a:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint16_t device_address_read = 0xBB;
 800169c:	23bb      	movs	r3, #187	; 0xbb
 800169e:	84bb      	strh	r3, [r7, #36]	; 0x24
	uint8_t nulladdress = 0x00;
 80016a0:	2300      	movs	r3, #0
 80016a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23





		HAL_Delay(5);
 80016a6:	2005      	movs	r0, #5
 80016a8:	f000 ff48 	bl	800253c <HAL_Delay>
		HAL_I2C_Mem_Read(&myI2C, device_address_read, 0x814E, 2, buffer1, 1, HAL_MAX_DELAY);
 80016ac:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 80016ae:	f04f 33ff 	mov.w	r3, #4294967295
 80016b2:	9302      	str	r3, [sp, #8]
 80016b4:	2301      	movs	r3, #1
 80016b6:	9301      	str	r3, [sp, #4]
 80016b8:	f107 0314 	add.w	r3, r7, #20
 80016bc:	9300      	str	r3, [sp, #0]
 80016be:	2302      	movs	r3, #2
 80016c0:	f248 124e 	movw	r2, #33102	; 0x814e
 80016c4:	482e      	ldr	r0, [pc, #184]	; (8001780 <Touch+0xf4>)
 80016c6:	f001 fda9 	bl	800321c <HAL_I2C_Mem_Read>
		if(buffer1[0] != 0x00)
 80016ca:	7d3b      	ldrb	r3, [r7, #20]
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d04d      	beq.n	800176c <Touch+0xe0>
		{
			*Sensingtouch = 1;
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	2201      	movs	r2, #1
 80016d4:	701a      	strb	r2, [r3, #0]
			HAL_I2C_Mem_Read(&myI2C, device_address_read, 0x814F, 2, buffer, 12, HAL_MAX_DELAY);
 80016d6:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 80016d8:	f04f 33ff 	mov.w	r3, #4294967295
 80016dc:	9302      	str	r3, [sp, #8]
 80016de:	230c      	movs	r3, #12
 80016e0:	9301      	str	r3, [sp, #4]
 80016e2:	f107 0314 	add.w	r3, r7, #20
 80016e6:	9300      	str	r3, [sp, #0]
 80016e8:	2302      	movs	r3, #2
 80016ea:	f248 124f 	movw	r2, #33103	; 0x814f
 80016ee:	4824      	ldr	r0, [pc, #144]	; (8001780 <Touch+0xf4>)
 80016f0:	f001 fd94 	bl	800321c <HAL_I2C_Mem_Read>
			if(buffer[4] == 1) //als buffer[3] het midden overschrijdt, dan gaat hij van 255 terug naar 0, en wordt buffer[4] op 1 gezet.
 80016f4:	7e3b      	ldrb	r3, [r7, #24]
 80016f6:	2b01      	cmp	r3, #1
 80016f8:	d106      	bne.n	8001708 <Touch+0x7c>
			{
				*Y_waarde = 0xFF + buffer[3];
 80016fa:	7dfb      	ldrb	r3, [r7, #23]
 80016fc:	b29b      	uxth	r3, r3
 80016fe:	33ff      	adds	r3, #255	; 0xff
 8001700:	b29a      	uxth	r2, r3
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	801a      	strh	r2, [r3, #0]
 8001706:	e003      	b.n	8001710 <Touch+0x84>
			}
			else
			{
				*Y_waarde = buffer[3];
 8001708:	7dfb      	ldrb	r3, [r7, #23]
 800170a:	b29a      	uxth	r2, r3
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	801a      	strh	r2, [r3, #0]
			}
			if(buffer[2] == 1)
 8001710:	7dbb      	ldrb	r3, [r7, #22]
 8001712:	2b01      	cmp	r3, #1
 8001714:	d106      	bne.n	8001724 <Touch+0x98>
			{
				*X_waarde = 0xFF + buffer[1];
 8001716:	7d7b      	ldrb	r3, [r7, #21]
 8001718:	b29b      	uxth	r3, r3
 800171a:	33ff      	adds	r3, #255	; 0xff
 800171c:	b29a      	uxth	r2, r3
 800171e:	68bb      	ldr	r3, [r7, #8]
 8001720:	801a      	strh	r2, [r3, #0]
 8001722:	e003      	b.n	800172c <Touch+0xa0>
			}
			else
			{
				*X_waarde = buffer[1];
 8001724:	7d7b      	ldrb	r3, [r7, #21]
 8001726:	b29a      	uxth	r2, r3
 8001728:	68bb      	ldr	r3, [r7, #8]
 800172a:	801a      	strh	r2, [r3, #0]
			}
						if(UartScreen == 1)
 800172c:	4b15      	ldr	r3, [pc, #84]	; (8001784 <Touch+0xf8>)
 800172e:	781b      	ldrb	r3, [r3, #0]
 8001730:	2b01      	cmp	r3, #1
 8001732:	d10b      	bne.n	800174c <Touch+0xc0>
							{
						printf("X= %d\r\n", *X_waarde);
 8001734:	68bb      	ldr	r3, [r7, #8]
 8001736:	881b      	ldrh	r3, [r3, #0]
 8001738:	4619      	mov	r1, r3
 800173a:	4813      	ldr	r0, [pc, #76]	; (8001788 <Touch+0xfc>)
 800173c:	f005 ff52 	bl	80075e4 <iprintf>
						printf("Y= %d\r\n", *Y_waarde);
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	881b      	ldrh	r3, [r3, #0]
 8001744:	4619      	mov	r1, r3
 8001746:	4811      	ldr	r0, [pc, #68]	; (800178c <Touch+0x100>)
 8001748:	f005 ff4c 	bl	80075e4 <iprintf>
							}

			HAL_I2C_Mem_Write(&myI2C, device_address_write, 0x814E, 2, &nulladdress, 1, HAL_MAX_DELAY); //de flag uitzetten
 800174c:	8cf9      	ldrh	r1, [r7, #38]	; 0x26
 800174e:	f04f 33ff 	mov.w	r3, #4294967295
 8001752:	9302      	str	r3, [sp, #8]
 8001754:	2301      	movs	r3, #1
 8001756:	9301      	str	r3, [sp, #4]
 8001758:	f107 0323 	add.w	r3, r7, #35	; 0x23
 800175c:	9300      	str	r3, [sp, #0]
 800175e:	2302      	movs	r3, #2
 8001760:	f248 124e 	movw	r2, #33102	; 0x814e
 8001764:	4806      	ldr	r0, [pc, #24]	; (8001780 <Touch+0xf4>)
 8001766:	f001 fc45 	bl	8002ff4 <HAL_I2C_Mem_Write>
 800176a:	e002      	b.n	8001772 <Touch+0xe6>
		}
		else
		{
			*Sensingtouch = 0;
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	2200      	movs	r2, #0
 8001770:	701a      	strb	r2, [r3, #0]
		}
		HAL_Delay(100);
 8001772:	2064      	movs	r0, #100	; 0x64
 8001774:	f000 fee2 	bl	800253c <HAL_Delay>
		}
 8001778:	bf00      	nop
 800177a:	3728      	adds	r7, #40	; 0x28
 800177c:	46bd      	mov	sp, r7
 800177e:	bd80      	pop	{r7, pc}
 8001780:	20002c0c 	.word	0x20002c0c
 8001784:	20000000 	.word	0x20000000
 8001788:	08008a98 	.word	0x08008a98
 800178c:	08008aa0 	.word	0x08008aa0

08001790 <ReadDevice>:

void ReadDevice(uint8_t *device, uint16_t *X_w, uint16_t *Y_w)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b08a      	sub	sp, #40	; 0x28
 8001794:	af00      	add	r7, sp, #0
 8001796:	60f8      	str	r0, [r7, #12]
 8001798:	60b9      	str	r1, [r7, #8]
 800179a:	607a      	str	r2, [r7, #4]
	uint16_t X_waarde = *X_w;
 800179c:	68bb      	ldr	r3, [r7, #8]
 800179e:	881b      	ldrh	r3, [r3, #0]
 80017a0:	84bb      	strh	r3, [r7, #36]	; 0x24
	uint16_t Y_waarde = *Y_w;
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	881b      	ldrh	r3, [r3, #0]
 80017a6:	847b      	strh	r3, [r7, #34]	; 0x22
	const uint16_t X_waarde_knoppen[] = {0,80,160,240};
 80017a8:	4a24      	ldr	r2, [pc, #144]	; (800183c <ReadDevice+0xac>)
 80017aa:	f107 0318 	add.w	r3, r7, #24
 80017ae:	e892 0003 	ldmia.w	r2, {r0, r1}
 80017b2:	e883 0003 	stmia.w	r3, {r0, r1}
	const uint16_t Y_waarde_knoppen[] = {0,40};
 80017b6:	2300      	movs	r3, #0
 80017b8:	82bb      	strh	r3, [r7, #20]
 80017ba:	2328      	movs	r3, #40	; 0x28
 80017bc:	82fb      	strh	r3, [r7, #22]
	uint8_t apparaat = 0; //if device = 0 , dan is er geen device geselecteerd
 80017be:	2300      	movs	r3, #0
 80017c0:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21

		for(uint8_t i = 1; i<= 4; i++)
 80017c4:	2301      	movs	r3, #1
 80017c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80017ca:	e02d      	b.n	8001828 <ReadDevice+0x98>
		{
		if((X_waarde >= X_waarde_knoppen[i-1])&&(X_waarde <=X_waarde_knoppen[i-1]+79)&&(Y_waarde >= Y_waarde_knoppen[0])&&(Y_waarde <=Y_waarde_knoppen[1]))
 80017cc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80017d0:	3b01      	subs	r3, #1
 80017d2:	005b      	lsls	r3, r3, #1
 80017d4:	3328      	adds	r3, #40	; 0x28
 80017d6:	443b      	add	r3, r7
 80017d8:	f833 3c10 	ldrh.w	r3, [r3, #-16]
 80017dc:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80017de:	429a      	cmp	r2, r3
 80017e0:	d31d      	bcc.n	800181e <ReadDevice+0x8e>
 80017e2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80017e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80017e8:	3b01      	subs	r3, #1
 80017ea:	005b      	lsls	r3, r3, #1
 80017ec:	3328      	adds	r3, #40	; 0x28
 80017ee:	443b      	add	r3, r7
 80017f0:	f833 3c10 	ldrh.w	r3, [r3, #-16]
 80017f4:	334f      	adds	r3, #79	; 0x4f
 80017f6:	429a      	cmp	r2, r3
 80017f8:	dc11      	bgt.n	800181e <ReadDevice+0x8e>
 80017fa:	8abb      	ldrh	r3, [r7, #20]
 80017fc:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80017fe:	429a      	cmp	r2, r3
 8001800:	d30d      	bcc.n	800181e <ReadDevice+0x8e>
 8001802:	8afb      	ldrh	r3, [r7, #22]
 8001804:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8001806:	429a      	cmp	r2, r3
 8001808:	d809      	bhi.n	800181e <ReadDevice+0x8e>
		{
			*device = i;
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8001810:	701a      	strb	r2, [r3, #0]
			printf("device %d\r\n", i);
 8001812:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001816:	4619      	mov	r1, r3
 8001818:	4809      	ldr	r0, [pc, #36]	; (8001840 <ReadDevice+0xb0>)
 800181a:	f005 fee3 	bl	80075e4 <iprintf>
		for(uint8_t i = 1; i<= 4; i++)
 800181e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001822:	3301      	adds	r3, #1
 8001824:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001828:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800182c:	2b04      	cmp	r3, #4
 800182e:	d9cd      	bls.n	80017cc <ReadDevice+0x3c>

		}
		}


}
 8001830:	bf00      	nop
 8001832:	bf00      	nop
 8001834:	3728      	adds	r7, #40	; 0x28
 8001836:	46bd      	mov	sp, r7
 8001838:	bd80      	pop	{r7, pc}
 800183a:	bf00      	nop
 800183c:	08008ab4 	.word	0x08008ab4
 8001840:	08008aa8 	.word	0x08008aa8

08001844 <ReadButton>:
void ReadButton(uint8_t *button, uint16_t *X_w, uint16_t *Y_w){
 8001844:	b5b0      	push	{r4, r5, r7, lr}
 8001846:	b094      	sub	sp, #80	; 0x50
 8001848:	af00      	add	r7, sp, #0
 800184a:	60f8      	str	r0, [r7, #12]
 800184c:	60b9      	str	r1, [r7, #8]
 800184e:	607a      	str	r2, [r7, #4]
	uint16_t X_waarde = *X_w;
 8001850:	68bb      	ldr	r3, [r7, #8]
 8001852:	881b      	ldrh	r3, [r3, #0]
 8001854:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
	uint16_t Y_waarde = *Y_w;
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	881b      	ldrh	r3, [r3, #0]
 800185c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
	const uint16_t X_waarde_knoppen[] = {23,219,121,23,121,219,121,23,23,121,219,219,23,219};
 8001860:	4b51      	ldr	r3, [pc, #324]	; (80019a8 <ReadButton+0x164>)
 8001862:	f107 042c 	add.w	r4, r7, #44	; 0x2c
 8001866:	461d      	mov	r5, r3
 8001868:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800186a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800186c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001870:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	const uint16_t Y_waarde_knoppen[] = {50,50,90,175,175,175,260,298,393,393,298,393,245,245};
 8001874:	4b4d      	ldr	r3, [pc, #308]	; (80019ac <ReadButton+0x168>)
 8001876:	f107 0410 	add.w	r4, r7, #16
 800187a:	461d      	mov	r5, r3
 800187c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800187e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001880:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001884:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	 * knop13: Add
	 * knop14: Delete
	 */


		for(uint8_t i = 1; i<= 14; i++)
 8001888:	2301      	movs	r3, #1
 800188a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800188e:	e081      	b.n	8001994 <ReadButton+0x150>
		{
			if(i <= 12)
 8001890:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001894:	2b0c      	cmp	r3, #12
 8001896:	d83c      	bhi.n	8001912 <ReadButton+0xce>
			{
				//hier lees ik mijn touch uit
				if((X_waarde >= X_waarde_knoppen[i-1])&&(X_waarde <=X_waarde_knoppen[i-1]+75)&&(Y_waarde >= Y_waarde_knoppen[i-1])&&(Y_waarde <=Y_waarde_knoppen[i-1]+75))
 8001898:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800189c:	3b01      	subs	r3, #1
 800189e:	005b      	lsls	r3, r3, #1
 80018a0:	3350      	adds	r3, #80	; 0x50
 80018a2:	443b      	add	r3, r7
 80018a4:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 80018a8:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 80018ac:	429a      	cmp	r2, r3
 80018ae:	d36c      	bcc.n	800198a <ReadButton+0x146>
 80018b0:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 80018b4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80018b8:	3b01      	subs	r3, #1
 80018ba:	005b      	lsls	r3, r3, #1
 80018bc:	3350      	adds	r3, #80	; 0x50
 80018be:	443b      	add	r3, r7
 80018c0:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 80018c4:	334b      	adds	r3, #75	; 0x4b
 80018c6:	429a      	cmp	r2, r3
 80018c8:	dc5f      	bgt.n	800198a <ReadButton+0x146>
 80018ca:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80018ce:	3b01      	subs	r3, #1
 80018d0:	005b      	lsls	r3, r3, #1
 80018d2:	3350      	adds	r3, #80	; 0x50
 80018d4:	443b      	add	r3, r7
 80018d6:	f833 3c40 	ldrh.w	r3, [r3, #-64]
 80018da:	f8b7 204a 	ldrh.w	r2, [r7, #74]	; 0x4a
 80018de:	429a      	cmp	r2, r3
 80018e0:	d353      	bcc.n	800198a <ReadButton+0x146>
 80018e2:	f8b7 204a 	ldrh.w	r2, [r7, #74]	; 0x4a
 80018e6:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80018ea:	3b01      	subs	r3, #1
 80018ec:	005b      	lsls	r3, r3, #1
 80018ee:	3350      	adds	r3, #80	; 0x50
 80018f0:	443b      	add	r3, r7
 80018f2:	f833 3c40 	ldrh.w	r3, [r3, #-64]
 80018f6:	334b      	adds	r3, #75	; 0x4b
 80018f8:	429a      	cmp	r2, r3
 80018fa:	dc46      	bgt.n	800198a <ReadButton+0x146>
				{

					*button = i;
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 8001902:	701a      	strb	r2, [r3, #0]
					printf("geduwd op button %d\r\n", i);
 8001904:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001908:	4619      	mov	r1, r3
 800190a:	4829      	ldr	r0, [pc, #164]	; (80019b0 <ReadButton+0x16c>)
 800190c:	f005 fe6a 	bl	80075e4 <iprintf>
 8001910:	e03b      	b.n	800198a <ReadButton+0x146>
				}
			}
			else
			{
				if((X_waarde >= X_waarde_knoppen[i-1])&&(X_waarde <=X_waarde_knoppen[i-1]+75)&&(Y_waarde >= Y_waarde_knoppen[i-1])&&(Y_waarde <=Y_waarde_knoppen[i-1]+48))
 8001912:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001916:	3b01      	subs	r3, #1
 8001918:	005b      	lsls	r3, r3, #1
 800191a:	3350      	adds	r3, #80	; 0x50
 800191c:	443b      	add	r3, r7
 800191e:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 8001922:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 8001926:	429a      	cmp	r2, r3
 8001928:	d32f      	bcc.n	800198a <ReadButton+0x146>
 800192a:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 800192e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001932:	3b01      	subs	r3, #1
 8001934:	005b      	lsls	r3, r3, #1
 8001936:	3350      	adds	r3, #80	; 0x50
 8001938:	443b      	add	r3, r7
 800193a:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 800193e:	334b      	adds	r3, #75	; 0x4b
 8001940:	429a      	cmp	r2, r3
 8001942:	dc22      	bgt.n	800198a <ReadButton+0x146>
 8001944:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001948:	3b01      	subs	r3, #1
 800194a:	005b      	lsls	r3, r3, #1
 800194c:	3350      	adds	r3, #80	; 0x50
 800194e:	443b      	add	r3, r7
 8001950:	f833 3c40 	ldrh.w	r3, [r3, #-64]
 8001954:	f8b7 204a 	ldrh.w	r2, [r7, #74]	; 0x4a
 8001958:	429a      	cmp	r2, r3
 800195a:	d316      	bcc.n	800198a <ReadButton+0x146>
 800195c:	f8b7 204a 	ldrh.w	r2, [r7, #74]	; 0x4a
 8001960:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001964:	3b01      	subs	r3, #1
 8001966:	005b      	lsls	r3, r3, #1
 8001968:	3350      	adds	r3, #80	; 0x50
 800196a:	443b      	add	r3, r7
 800196c:	f833 3c40 	ldrh.w	r3, [r3, #-64]
 8001970:	3330      	adds	r3, #48	; 0x30
 8001972:	429a      	cmp	r2, r3
 8001974:	dc09      	bgt.n	800198a <ReadButton+0x146>
				{

				*button = i;
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 800197c:	701a      	strb	r2, [r3, #0]
				printf("geduwd op button %d\r\n", i);
 800197e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001982:	4619      	mov	r1, r3
 8001984:	480a      	ldr	r0, [pc, #40]	; (80019b0 <ReadButton+0x16c>)
 8001986:	f005 fe2d 	bl	80075e4 <iprintf>
		for(uint8_t i = 1; i<= 14; i++)
 800198a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800198e:	3301      	adds	r3, #1
 8001990:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8001994:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001998:	2b0e      	cmp	r3, #14
 800199a:	f67f af79 	bls.w	8001890 <ReadButton+0x4c>
				}
			}
		}

}
 800199e:	bf00      	nop
 80019a0:	bf00      	nop
 80019a2:	3750      	adds	r7, #80	; 0x50
 80019a4:	46bd      	mov	sp, r7
 80019a6:	bdb0      	pop	{r4, r5, r7, pc}
 80019a8:	08008ad4 	.word	0x08008ad4
 80019ac:	08008af0 	.word	0x08008af0
 80019b0:	08008abc 	.word	0x08008abc

080019b4 <_write>:
/* USER CODE BEGIN 0 */
#include <errno.h>
#include <sys/stat.h>
#include <sys/times.h>
#include <sys/unistd.h>
int _write(int file, char *ptr, int len) {
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b086      	sub	sp, #24
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	60f8      	str	r0, [r7, #12]
 80019bc:	60b9      	str	r1, [r7, #8]
 80019be:	607a      	str	r2, [r7, #4]
    HAL_StatusTypeDef xStatus;
    switch (file) {
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	2b01      	cmp	r3, #1
 80019c4:	d003      	beq.n	80019ce <_write+0x1a>
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	2b02      	cmp	r3, #2
 80019ca:	d015      	beq.n	80019f8 <_write+0x44>
 80019cc:	e029      	b.n	8001a22 <_write+0x6e>
    case STDOUT_FILENO: /*stdout*/
		xStatus = HAL_UART_Transmit(&huart1, (uint8_t*)ptr, len, HAL_MAX_DELAY);
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	b29a      	uxth	r2, r3
 80019d2:	f04f 33ff 	mov.w	r3, #4294967295
 80019d6:	68b9      	ldr	r1, [r7, #8]
 80019d8:	481a      	ldr	r0, [pc, #104]	; (8001a44 <_write+0x90>)
 80019da:	f005 f9fb 	bl	8006dd4 <HAL_UART_Transmit>
 80019de:	4603      	mov	r3, r0
 80019e0:	75fb      	strb	r3, [r7, #23]
		if (xStatus != HAL_OK) {
 80019e2:	7dfb      	ldrb	r3, [r7, #23]
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d024      	beq.n	8001a32 <_write+0x7e>
			errno = EIO;
 80019e8:	f005 fdca 	bl	8007580 <__errno>
 80019ec:	4603      	mov	r3, r0
 80019ee:	2205      	movs	r2, #5
 80019f0:	601a      	str	r2, [r3, #0]
			return -1;
 80019f2:	f04f 33ff 	mov.w	r3, #4294967295
 80019f6:	e020      	b.n	8001a3a <_write+0x86>
		}
        break;
    case STDERR_FILENO: /* stderr */
		xStatus = HAL_UART_Transmit(&huart1, (uint8_t*)ptr, len, HAL_MAX_DELAY);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	b29a      	uxth	r2, r3
 80019fc:	f04f 33ff 	mov.w	r3, #4294967295
 8001a00:	68b9      	ldr	r1, [r7, #8]
 8001a02:	4810      	ldr	r0, [pc, #64]	; (8001a44 <_write+0x90>)
 8001a04:	f005 f9e6 	bl	8006dd4 <HAL_UART_Transmit>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	75fb      	strb	r3, [r7, #23]
		if (xStatus != HAL_OK) {
 8001a0c:	7dfb      	ldrb	r3, [r7, #23]
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d011      	beq.n	8001a36 <_write+0x82>
			errno = EIO;
 8001a12:	f005 fdb5 	bl	8007580 <__errno>
 8001a16:	4603      	mov	r3, r0
 8001a18:	2205      	movs	r2, #5
 8001a1a:	601a      	str	r2, [r3, #0]
			return -1;
 8001a1c:	f04f 33ff 	mov.w	r3, #4294967295
 8001a20:	e00b      	b.n	8001a3a <_write+0x86>
		}
        break;
    default:
        errno = EBADF;
 8001a22:	f005 fdad 	bl	8007580 <__errno>
 8001a26:	4603      	mov	r3, r0
 8001a28:	2209      	movs	r2, #9
 8001a2a:	601a      	str	r2, [r3, #0]
        return -1;
 8001a2c:	f04f 33ff 	mov.w	r3, #4294967295
 8001a30:	e003      	b.n	8001a3a <_write+0x86>
        break;
 8001a32:	bf00      	nop
 8001a34:	e000      	b.n	8001a38 <_write+0x84>
        break;
 8001a36:	bf00      	nop
    }
    return len;
 8001a38:	687b      	ldr	r3, [r7, #4]
}
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	3718      	adds	r7, #24
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bd80      	pop	{r7, pc}
 8001a42:	bf00      	nop
 8001a44:	20002d5c 	.word	0x20002d5c

08001a48 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001a4c:	f000 fd10 	bl	8002470 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001a50:	f000 f812 	bl	8001a78 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001a54:	f000 f9fe 	bl	8001e54 <MX_GPIO_Init>
  MX_TIM1_Init();
 8001a58:	f000 f8ea 	bl	8001c30 <MX_TIM1_Init>
  MX_TIM15_Init();
 8001a5c:	f000 f978 	bl	8001d50 <MX_TIM15_Init>
  MX_USART1_UART_Init();
 8001a60:	f000 f9c8 	bl	8001df4 <MX_USART1_UART_Init>
  MX_SPI2_Init();
 8001a64:	f000 f8a6 	bl	8001bb4 <MX_SPI2_Init>
  MX_I2C1_Init();
 8001a68:	f000 f864 	bl	8001b34 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  All_Carl_Inits();
 8001a6c:	f7fe fc32 	bl	80002d4 <All_Carl_Inits>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  whilelus();
 8001a70:	f7fe fd16 	bl	80004a0 <whilelus>
 8001a74:	e7fc      	b.n	8001a70 <main+0x28>
	...

08001a78 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b09c      	sub	sp, #112	; 0x70
 8001a7c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a7e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001a82:	2228      	movs	r2, #40	; 0x28
 8001a84:	2100      	movs	r1, #0
 8001a86:	4618      	mov	r0, r3
 8001a88:	f005 fda4 	bl	80075d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a8c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001a90:	2200      	movs	r2, #0
 8001a92:	601a      	str	r2, [r3, #0]
 8001a94:	605a      	str	r2, [r3, #4]
 8001a96:	609a      	str	r2, [r3, #8]
 8001a98:	60da      	str	r2, [r3, #12]
 8001a9a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001a9c:	1d3b      	adds	r3, r7, #4
 8001a9e:	2230      	movs	r2, #48	; 0x30
 8001aa0:	2100      	movs	r1, #0
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	f005 fd96 	bl	80075d4 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001aa8:	2302      	movs	r3, #2
 8001aaa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001aac:	2301      	movs	r3, #1
 8001aae:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001ab0:	2310      	movs	r3, #16
 8001ab2:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001ab4:	2302      	movs	r3, #2
 8001ab6:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001ab8:	2300      	movs	r3, #0
 8001aba:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8001abc:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8001ac0:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ac2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	f002 f894 	bl	8003bf4 <HAL_RCC_OscConfig>
 8001acc:	4603      	mov	r3, r0
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d001      	beq.n	8001ad6 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8001ad2:	f000 fa2d 	bl	8001f30 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ad6:	230f      	movs	r3, #15
 8001ad8:	637b      	str	r3, [r7, #52]	; 0x34
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001ada:	2302      	movs	r3, #2
 8001adc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001ae2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001ae6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	647b      	str	r3, [r7, #68]	; 0x44

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001aec:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001af0:	2102      	movs	r1, #2
 8001af2:	4618      	mov	r0, r3
 8001af4:	f003 f8bc 	bl	8004c70 <HAL_RCC_ClockConfig>
 8001af8:	4603      	mov	r3, r0
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d001      	beq.n	8001b02 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8001afe:	f000 fa17 	bl	8001f30 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1
 8001b02:	4b0b      	ldr	r3, [pc, #44]	; (8001b30 <SystemClock_Config+0xb8>)
 8001b04:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_TIM1|RCC_PERIPHCLK_TIM15;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8001b06:	2300      	movs	r3, #0
 8001b08:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	613b      	str	r3, [r7, #16]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInit.Tim15ClockSelection = RCC_TIM15CLK_HCLK;
 8001b12:	2300      	movs	r3, #0
 8001b14:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b16:	1d3b      	adds	r3, r7, #4
 8001b18:	4618      	mov	r0, r3
 8001b1a:	f003 fadf 	bl	80050dc <HAL_RCCEx_PeriphCLKConfig>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d001      	beq.n	8001b28 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8001b24:	f000 fa04 	bl	8001f30 <Error_Handler>
  }
}
 8001b28:	bf00      	nop
 8001b2a:	3770      	adds	r7, #112	; 0x70
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	bd80      	pop	{r7, pc}
 8001b30:	00041021 	.word	0x00041021

08001b34 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001b38:	4b1b      	ldr	r3, [pc, #108]	; (8001ba8 <MX_I2C1_Init+0x74>)
 8001b3a:	4a1c      	ldr	r2, [pc, #112]	; (8001bac <MX_I2C1_Init+0x78>)
 8001b3c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8001b3e:	4b1a      	ldr	r3, [pc, #104]	; (8001ba8 <MX_I2C1_Init+0x74>)
 8001b40:	4a1b      	ldr	r2, [pc, #108]	; (8001bb0 <MX_I2C1_Init+0x7c>)
 8001b42:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001b44:	4b18      	ldr	r3, [pc, #96]	; (8001ba8 <MX_I2C1_Init+0x74>)
 8001b46:	2200      	movs	r2, #0
 8001b48:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001b4a:	4b17      	ldr	r3, [pc, #92]	; (8001ba8 <MX_I2C1_Init+0x74>)
 8001b4c:	2201      	movs	r2, #1
 8001b4e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001b50:	4b15      	ldr	r3, [pc, #84]	; (8001ba8 <MX_I2C1_Init+0x74>)
 8001b52:	2200      	movs	r2, #0
 8001b54:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001b56:	4b14      	ldr	r3, [pc, #80]	; (8001ba8 <MX_I2C1_Init+0x74>)
 8001b58:	2200      	movs	r2, #0
 8001b5a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001b5c:	4b12      	ldr	r3, [pc, #72]	; (8001ba8 <MX_I2C1_Init+0x74>)
 8001b5e:	2200      	movs	r2, #0
 8001b60:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001b62:	4b11      	ldr	r3, [pc, #68]	; (8001ba8 <MX_I2C1_Init+0x74>)
 8001b64:	2200      	movs	r2, #0
 8001b66:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001b68:	4b0f      	ldr	r3, [pc, #60]	; (8001ba8 <MX_I2C1_Init+0x74>)
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001b6e:	480e      	ldr	r0, [pc, #56]	; (8001ba8 <MX_I2C1_Init+0x74>)
 8001b70:	f000 ffc7 	bl	8002b02 <HAL_I2C_Init>
 8001b74:	4603      	mov	r3, r0
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d001      	beq.n	8001b7e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001b7a:	f000 f9d9 	bl	8001f30 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001b7e:	2100      	movs	r1, #0
 8001b80:	4809      	ldr	r0, [pc, #36]	; (8001ba8 <MX_I2C1_Init+0x74>)
 8001b82:	f001 ff9f 	bl	8003ac4 <HAL_I2CEx_ConfigAnalogFilter>
 8001b86:	4603      	mov	r3, r0
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d001      	beq.n	8001b90 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001b8c:	f000 f9d0 	bl	8001f30 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001b90:	2100      	movs	r1, #0
 8001b92:	4805      	ldr	r0, [pc, #20]	; (8001ba8 <MX_I2C1_Init+0x74>)
 8001b94:	f001 ffe1 	bl	8003b5a <HAL_I2CEx_ConfigDigitalFilter>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d001      	beq.n	8001ba2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001b9e:	f000 f9c7 	bl	8001f30 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001ba2:	bf00      	nop
 8001ba4:	bd80      	pop	{r7, pc}
 8001ba6:	bf00      	nop
 8001ba8:	20002c0c 	.word	0x20002c0c
 8001bac:	40005400 	.word	0x40005400
 8001bb0:	2000090e 	.word	0x2000090e

08001bb4 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001bb8:	4b1b      	ldr	r3, [pc, #108]	; (8001c28 <MX_SPI2_Init+0x74>)
 8001bba:	4a1c      	ldr	r2, [pc, #112]	; (8001c2c <MX_SPI2_Init+0x78>)
 8001bbc:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001bbe:	4b1a      	ldr	r3, [pc, #104]	; (8001c28 <MX_SPI2_Init+0x74>)
 8001bc0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001bc4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001bc6:	4b18      	ldr	r3, [pc, #96]	; (8001c28 <MX_SPI2_Init+0x74>)
 8001bc8:	2200      	movs	r2, #0
 8001bca:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001bcc:	4b16      	ldr	r3, [pc, #88]	; (8001c28 <MX_SPI2_Init+0x74>)
 8001bce:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001bd2:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001bd4:	4b14      	ldr	r3, [pc, #80]	; (8001c28 <MX_SPI2_Init+0x74>)
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001bda:	4b13      	ldr	r3, [pc, #76]	; (8001c28 <MX_SPI2_Init+0x74>)
 8001bdc:	2200      	movs	r2, #0
 8001bde:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001be0:	4b11      	ldr	r3, [pc, #68]	; (8001c28 <MX_SPI2_Init+0x74>)
 8001be2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001be6:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001be8:	4b0f      	ldr	r3, [pc, #60]	; (8001c28 <MX_SPI2_Init+0x74>)
 8001bea:	2200      	movs	r2, #0
 8001bec:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001bee:	4b0e      	ldr	r3, [pc, #56]	; (8001c28 <MX_SPI2_Init+0x74>)
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001bf4:	4b0c      	ldr	r3, [pc, #48]	; (8001c28 <MX_SPI2_Init+0x74>)
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001bfa:	4b0b      	ldr	r3, [pc, #44]	; (8001c28 <MX_SPI2_Init+0x74>)
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8001c00:	4b09      	ldr	r3, [pc, #36]	; (8001c28 <MX_SPI2_Init+0x74>)
 8001c02:	2207      	movs	r2, #7
 8001c04:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001c06:	4b08      	ldr	r3, [pc, #32]	; (8001c28 <MX_SPI2_Init+0x74>)
 8001c08:	2200      	movs	r2, #0
 8001c0a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001c0c:	4b06      	ldr	r3, [pc, #24]	; (8001c28 <MX_SPI2_Init+0x74>)
 8001c0e:	2208      	movs	r2, #8
 8001c10:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001c12:	4805      	ldr	r0, [pc, #20]	; (8001c28 <MX_SPI2_Init+0x74>)
 8001c14:	f003 fbe6 	bl	80053e4 <HAL_SPI_Init>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d001      	beq.n	8001c22 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8001c1e:	f000 f987 	bl	8001f30 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001c22:	bf00      	nop
 8001c24:	bd80      	pop	{r7, pc}
 8001c26:	bf00      	nop
 8001c28:	20002c60 	.word	0x20002c60
 8001c2c:	40003800 	.word	0x40003800

08001c30 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b096      	sub	sp, #88	; 0x58
 8001c34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c36:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	601a      	str	r2, [r3, #0]
 8001c3e:	605a      	str	r2, [r3, #4]
 8001c40:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001c42:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001c46:	2200      	movs	r2, #0
 8001c48:	601a      	str	r2, [r3, #0]
 8001c4a:	605a      	str	r2, [r3, #4]
 8001c4c:	609a      	str	r2, [r3, #8]
 8001c4e:	60da      	str	r2, [r3, #12]
 8001c50:	611a      	str	r2, [r3, #16]
 8001c52:	615a      	str	r2, [r3, #20]
 8001c54:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001c56:	1d3b      	adds	r3, r7, #4
 8001c58:	222c      	movs	r2, #44	; 0x2c
 8001c5a:	2100      	movs	r1, #0
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	f005 fcb9 	bl	80075d4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001c62:	4b39      	ldr	r3, [pc, #228]	; (8001d48 <MX_TIM1_Init+0x118>)
 8001c64:	4a39      	ldr	r2, [pc, #228]	; (8001d4c <MX_TIM1_Init+0x11c>)
 8001c66:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 4-1;
 8001c68:	4b37      	ldr	r3, [pc, #220]	; (8001d48 <MX_TIM1_Init+0x118>)
 8001c6a:	2203      	movs	r2, #3
 8001c6c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c6e:	4b36      	ldr	r3, [pc, #216]	; (8001d48 <MX_TIM1_Init+0x118>)
 8001c70:	2200      	movs	r2, #0
 8001c72:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 422-1;
 8001c74:	4b34      	ldr	r3, [pc, #208]	; (8001d48 <MX_TIM1_Init+0x118>)
 8001c76:	f240 12a5 	movw	r2, #421	; 0x1a5
 8001c7a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c7c:	4b32      	ldr	r3, [pc, #200]	; (8001d48 <MX_TIM1_Init+0x118>)
 8001c7e:	2200      	movs	r2, #0
 8001c80:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001c82:	4b31      	ldr	r3, [pc, #196]	; (8001d48 <MX_TIM1_Init+0x118>)
 8001c84:	2200      	movs	r2, #0
 8001c86:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001c88:	4b2f      	ldr	r3, [pc, #188]	; (8001d48 <MX_TIM1_Init+0x118>)
 8001c8a:	2280      	movs	r2, #128	; 0x80
 8001c8c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001c8e:	482e      	ldr	r0, [pc, #184]	; (8001d48 <MX_TIM1_Init+0x118>)
 8001c90:	f003 fff7 	bl	8005c82 <HAL_TIM_PWM_Init>
 8001c94:	4603      	mov	r3, r0
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d001      	beq.n	8001c9e <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8001c9a:	f000 f949 	bl	8001f30 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001caa:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001cae:	4619      	mov	r1, r3
 8001cb0:	4825      	ldr	r0, [pc, #148]	; (8001d48 <MX_TIM1_Init+0x118>)
 8001cb2:	f004 ff63 	bl	8006b7c <HAL_TIMEx_MasterConfigSynchronization>
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d001      	beq.n	8001cc0 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001cbc:	f000 f938 	bl	8001f30 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001cc0:	2360      	movs	r3, #96	; 0x60
 8001cc2:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 211-1;
 8001cc4:	23d2      	movs	r3, #210	; 0xd2
 8001cc6:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001cc8:	2300      	movs	r3, #0
 8001cca:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001ccc:	2300      	movs	r3, #0
 8001cce:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001cd8:	2300      	movs	r3, #0
 8001cda:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001cdc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	4619      	mov	r1, r3
 8001ce4:	4818      	ldr	r0, [pc, #96]	; (8001d48 <MX_TIM1_Init+0x118>)
 8001ce6:	f004 f997 	bl	8006018 <HAL_TIM_PWM_ConfigChannel>
 8001cea:	4603      	mov	r3, r0
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d001      	beq.n	8001cf4 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001cf0:	f000 f91e 	bl	8001f30 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001d00:	2300      	movs	r3, #0
 8001d02:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001d04:	2300      	movs	r3, #0
 8001d06:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001d08:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001d0c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001d12:	2300      	movs	r3, #0
 8001d14:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001d16:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001d1a:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001d20:	2300      	movs	r3, #0
 8001d22:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001d24:	1d3b      	adds	r3, r7, #4
 8001d26:	4619      	mov	r1, r3
 8001d28:	4807      	ldr	r0, [pc, #28]	; (8001d48 <MX_TIM1_Init+0x118>)
 8001d2a:	f004 ff8d 	bl	8006c48 <HAL_TIMEx_ConfigBreakDeadTime>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d001      	beq.n	8001d38 <MX_TIM1_Init+0x108>
  {
    Error_Handler();
 8001d34:	f000 f8fc 	bl	8001f30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001d38:	4803      	ldr	r0, [pc, #12]	; (8001d48 <MX_TIM1_Init+0x118>)
 8001d3a:	f000 fa27 	bl	800218c <HAL_TIM_MspPostInit>

}
 8001d3e:	bf00      	nop
 8001d40:	3758      	adds	r7, #88	; 0x58
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bd80      	pop	{r7, pc}
 8001d46:	bf00      	nop
 8001d48:	20002cc4 	.word	0x20002cc4
 8001d4c:	40012c00 	.word	0x40012c00

08001d50 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b088      	sub	sp, #32
 8001d54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d56:	f107 0310 	add.w	r3, r7, #16
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	601a      	str	r2, [r3, #0]
 8001d5e:	605a      	str	r2, [r3, #4]
 8001d60:	609a      	str	r2, [r3, #8]
 8001d62:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d64:	1d3b      	adds	r3, r7, #4
 8001d66:	2200      	movs	r2, #0
 8001d68:	601a      	str	r2, [r3, #0]
 8001d6a:	605a      	str	r2, [r3, #4]
 8001d6c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8001d6e:	4b1f      	ldr	r3, [pc, #124]	; (8001dec <MX_TIM15_Init+0x9c>)
 8001d70:	4a1f      	ldr	r2, [pc, #124]	; (8001df0 <MX_TIM15_Init+0xa0>)
 8001d72:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 64-1;
 8001d74:	4b1d      	ldr	r3, [pc, #116]	; (8001dec <MX_TIM15_Init+0x9c>)
 8001d76:	223f      	movs	r2, #63	; 0x3f
 8001d78:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d7a:	4b1c      	ldr	r3, [pc, #112]	; (8001dec <MX_TIM15_Init+0x9c>)
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 8001d80:	4b1a      	ldr	r3, [pc, #104]	; (8001dec <MX_TIM15_Init+0x9c>)
 8001d82:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001d86:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d88:	4b18      	ldr	r3, [pc, #96]	; (8001dec <MX_TIM15_Init+0x9c>)
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8001d8e:	4b17      	ldr	r3, [pc, #92]	; (8001dec <MX_TIM15_Init+0x9c>)
 8001d90:	2200      	movs	r2, #0
 8001d92:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001d94:	4b15      	ldr	r3, [pc, #84]	; (8001dec <MX_TIM15_Init+0x9c>)
 8001d96:	2280      	movs	r2, #128	; 0x80
 8001d98:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8001d9a:	4814      	ldr	r0, [pc, #80]	; (8001dec <MX_TIM15_Init+0x9c>)
 8001d9c:	f003 fea6 	bl	8005aec <HAL_TIM_Base_Init>
 8001da0:	4603      	mov	r3, r0
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d001      	beq.n	8001daa <MX_TIM15_Init+0x5a>
  {
    Error_Handler();
 8001da6:	f000 f8c3 	bl	8001f30 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001daa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001dae:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8001db0:	f107 0310 	add.w	r3, r7, #16
 8001db4:	4619      	mov	r1, r3
 8001db6:	480d      	ldr	r0, [pc, #52]	; (8001dec <MX_TIM15_Init+0x9c>)
 8001db8:	f004 fa42 	bl	8006240 <HAL_TIM_ConfigClockSource>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d001      	beq.n	8001dc6 <MX_TIM15_Init+0x76>
  {
    Error_Handler();
 8001dc2:	f000 f8b5 	bl	8001f30 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001dca:	2300      	movs	r3, #0
 8001dcc:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8001dce:	1d3b      	adds	r3, r7, #4
 8001dd0:	4619      	mov	r1, r3
 8001dd2:	4806      	ldr	r0, [pc, #24]	; (8001dec <MX_TIM15_Init+0x9c>)
 8001dd4:	f004 fed2 	bl	8006b7c <HAL_TIMEx_MasterConfigSynchronization>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d001      	beq.n	8001de2 <MX_TIM15_Init+0x92>
  {
    Error_Handler();
 8001dde:	f000 f8a7 	bl	8001f30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 8001de2:	bf00      	nop
 8001de4:	3720      	adds	r7, #32
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bd80      	pop	{r7, pc}
 8001dea:	bf00      	nop
 8001dec:	20002d10 	.word	0x20002d10
 8001df0:	40014000 	.word	0x40014000

08001df4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001df8:	4b14      	ldr	r3, [pc, #80]	; (8001e4c <MX_USART1_UART_Init+0x58>)
 8001dfa:	4a15      	ldr	r2, [pc, #84]	; (8001e50 <MX_USART1_UART_Init+0x5c>)
 8001dfc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001dfe:	4b13      	ldr	r3, [pc, #76]	; (8001e4c <MX_USART1_UART_Init+0x58>)
 8001e00:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001e04:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001e06:	4b11      	ldr	r3, [pc, #68]	; (8001e4c <MX_USART1_UART_Init+0x58>)
 8001e08:	2200      	movs	r2, #0
 8001e0a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001e0c:	4b0f      	ldr	r3, [pc, #60]	; (8001e4c <MX_USART1_UART_Init+0x58>)
 8001e0e:	2200      	movs	r2, #0
 8001e10:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001e12:	4b0e      	ldr	r3, [pc, #56]	; (8001e4c <MX_USART1_UART_Init+0x58>)
 8001e14:	2200      	movs	r2, #0
 8001e16:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001e18:	4b0c      	ldr	r3, [pc, #48]	; (8001e4c <MX_USART1_UART_Init+0x58>)
 8001e1a:	220c      	movs	r2, #12
 8001e1c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e1e:	4b0b      	ldr	r3, [pc, #44]	; (8001e4c <MX_USART1_UART_Init+0x58>)
 8001e20:	2200      	movs	r2, #0
 8001e22:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e24:	4b09      	ldr	r3, [pc, #36]	; (8001e4c <MX_USART1_UART_Init+0x58>)
 8001e26:	2200      	movs	r2, #0
 8001e28:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001e2a:	4b08      	ldr	r3, [pc, #32]	; (8001e4c <MX_USART1_UART_Init+0x58>)
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001e30:	4b06      	ldr	r3, [pc, #24]	; (8001e4c <MX_USART1_UART_Init+0x58>)
 8001e32:	2200      	movs	r2, #0
 8001e34:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001e36:	4805      	ldr	r0, [pc, #20]	; (8001e4c <MX_USART1_UART_Init+0x58>)
 8001e38:	f004 ff7e 	bl	8006d38 <HAL_UART_Init>
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d001      	beq.n	8001e46 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001e42:	f000 f875 	bl	8001f30 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001e46:	bf00      	nop
 8001e48:	bd80      	pop	{r7, pc}
 8001e4a:	bf00      	nop
 8001e4c:	20002d5c 	.word	0x20002d5c
 8001e50:	40013800 	.word	0x40013800

08001e54 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b088      	sub	sp, #32
 8001e58:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e5a:	f107 030c 	add.w	r3, r7, #12
 8001e5e:	2200      	movs	r2, #0
 8001e60:	601a      	str	r2, [r3, #0]
 8001e62:	605a      	str	r2, [r3, #4]
 8001e64:	609a      	str	r2, [r3, #8]
 8001e66:	60da      	str	r2, [r3, #12]
 8001e68:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001e6a:	4b30      	ldr	r3, [pc, #192]	; (8001f2c <MX_GPIO_Init+0xd8>)
 8001e6c:	695b      	ldr	r3, [r3, #20]
 8001e6e:	4a2f      	ldr	r2, [pc, #188]	; (8001f2c <MX_GPIO_Init+0xd8>)
 8001e70:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001e74:	6153      	str	r3, [r2, #20]
 8001e76:	4b2d      	ldr	r3, [pc, #180]	; (8001f2c <MX_GPIO_Init+0xd8>)
 8001e78:	695b      	ldr	r3, [r3, #20]
 8001e7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e7e:	60bb      	str	r3, [r7, #8]
 8001e80:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e82:	4b2a      	ldr	r3, [pc, #168]	; (8001f2c <MX_GPIO_Init+0xd8>)
 8001e84:	695b      	ldr	r3, [r3, #20]
 8001e86:	4a29      	ldr	r2, [pc, #164]	; (8001f2c <MX_GPIO_Init+0xd8>)
 8001e88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e8c:	6153      	str	r3, [r2, #20]
 8001e8e:	4b27      	ldr	r3, [pc, #156]	; (8001f2c <MX_GPIO_Init+0xd8>)
 8001e90:	695b      	ldr	r3, [r3, #20]
 8001e92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e96:	607b      	str	r3, [r7, #4]
 8001e98:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e9a:	4b24      	ldr	r3, [pc, #144]	; (8001f2c <MX_GPIO_Init+0xd8>)
 8001e9c:	695b      	ldr	r3, [r3, #20]
 8001e9e:	4a23      	ldr	r2, [pc, #140]	; (8001f2c <MX_GPIO_Init+0xd8>)
 8001ea0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ea4:	6153      	str	r3, [r2, #20]
 8001ea6:	4b21      	ldr	r3, [pc, #132]	; (8001f2c <MX_GPIO_Init+0xd8>)
 8001ea8:	695b      	ldr	r3, [r3, #20]
 8001eaa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001eae:	603b      	str	r3, [r7, #0]
 8001eb0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DISPLAY_CS_Pin|DISPLAY_RESET_Pin|DISPLAY_DC_Pin, GPIO_PIN_RESET);
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	21e0      	movs	r1, #224	; 0xe0
 8001eb6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001eba:	f000 fde7 	bl	8002a8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : ReadIR_Pin */
  GPIO_InitStruct.Pin = ReadIR_Pin;
 8001ebe:	2308      	movs	r3, #8
 8001ec0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001ec2:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8001ec6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ec8:	2300      	movs	r3, #0
 8001eca:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(ReadIR_GPIO_Port, &GPIO_InitStruct);
 8001ecc:	f107 030c 	add.w	r3, r7, #12
 8001ed0:	4619      	mov	r1, r3
 8001ed2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ed6:	f000 fc67 	bl	80027a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : Button_Pin */
  GPIO_InitStruct.Pin = Button_Pin;
 8001eda:	2310      	movs	r3, #16
 8001edc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001ede:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001ee2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ee4:	2301      	movs	r3, #1
 8001ee6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(Button_GPIO_Port, &GPIO_InitStruct);
 8001ee8:	f107 030c 	add.w	r3, r7, #12
 8001eec:	4619      	mov	r1, r3
 8001eee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ef2:	f000 fc59 	bl	80027a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : DISPLAY_CS_Pin DISPLAY_RESET_Pin DISPLAY_DC_Pin */
  GPIO_InitStruct.Pin = DISPLAY_CS_Pin|DISPLAY_RESET_Pin|DISPLAY_DC_Pin;
 8001ef6:	23e0      	movs	r3, #224	; 0xe0
 8001ef8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001efa:	2301      	movs	r3, #1
 8001efc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001efe:	2300      	movs	r3, #0
 8001f00:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f02:	2300      	movs	r3, #0
 8001f04:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f06:	f107 030c 	add.w	r3, r7, #12
 8001f0a:	4619      	mov	r1, r3
 8001f0c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f10:	f000 fc4a 	bl	80027a8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8001f14:	2200      	movs	r2, #0
 8001f16:	2100      	movs	r1, #0
 8001f18:	2009      	movs	r0, #9
 8001f1a:	f000 fc0e 	bl	800273a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8001f1e:	2009      	movs	r0, #9
 8001f20:	f000 fc27 	bl	8002772 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001f24:	bf00      	nop
 8001f26:	3720      	adds	r7, #32
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	bd80      	pop	{r7, pc}
 8001f2c:	40021000 	.word	0x40021000

08001f30 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f30:	b480      	push	{r7}
 8001f32:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001f34:	b672      	cpsid	i
}
 8001f36:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001f38:	e7fe      	b.n	8001f38 <Error_Handler+0x8>
	...

08001f3c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	b083      	sub	sp, #12
 8001f40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f42:	4b0f      	ldr	r3, [pc, #60]	; (8001f80 <HAL_MspInit+0x44>)
 8001f44:	699b      	ldr	r3, [r3, #24]
 8001f46:	4a0e      	ldr	r2, [pc, #56]	; (8001f80 <HAL_MspInit+0x44>)
 8001f48:	f043 0301 	orr.w	r3, r3, #1
 8001f4c:	6193      	str	r3, [r2, #24]
 8001f4e:	4b0c      	ldr	r3, [pc, #48]	; (8001f80 <HAL_MspInit+0x44>)
 8001f50:	699b      	ldr	r3, [r3, #24]
 8001f52:	f003 0301 	and.w	r3, r3, #1
 8001f56:	607b      	str	r3, [r7, #4]
 8001f58:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f5a:	4b09      	ldr	r3, [pc, #36]	; (8001f80 <HAL_MspInit+0x44>)
 8001f5c:	69db      	ldr	r3, [r3, #28]
 8001f5e:	4a08      	ldr	r2, [pc, #32]	; (8001f80 <HAL_MspInit+0x44>)
 8001f60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f64:	61d3      	str	r3, [r2, #28]
 8001f66:	4b06      	ldr	r3, [pc, #24]	; (8001f80 <HAL_MspInit+0x44>)
 8001f68:	69db      	ldr	r3, [r3, #28]
 8001f6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f6e:	603b      	str	r3, [r7, #0]
 8001f70:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f72:	bf00      	nop
 8001f74:	370c      	adds	r7, #12
 8001f76:	46bd      	mov	sp, r7
 8001f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7c:	4770      	bx	lr
 8001f7e:	bf00      	nop
 8001f80:	40021000 	.word	0x40021000

08001f84 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b08a      	sub	sp, #40	; 0x28
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f8c:	f107 0314 	add.w	r3, r7, #20
 8001f90:	2200      	movs	r2, #0
 8001f92:	601a      	str	r2, [r3, #0]
 8001f94:	605a      	str	r2, [r3, #4]
 8001f96:	609a      	str	r2, [r3, #8]
 8001f98:	60da      	str	r2, [r3, #12]
 8001f9a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	4a26      	ldr	r2, [pc, #152]	; (800203c <HAL_I2C_MspInit+0xb8>)
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d145      	bne.n	8002032 <HAL_I2C_MspInit+0xae>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fa6:	4b26      	ldr	r3, [pc, #152]	; (8002040 <HAL_I2C_MspInit+0xbc>)
 8001fa8:	695b      	ldr	r3, [r3, #20]
 8001faa:	4a25      	ldr	r2, [pc, #148]	; (8002040 <HAL_I2C_MspInit+0xbc>)
 8001fac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001fb0:	6153      	str	r3, [r2, #20]
 8001fb2:	4b23      	ldr	r3, [pc, #140]	; (8002040 <HAL_I2C_MspInit+0xbc>)
 8001fb4:	695b      	ldr	r3, [r3, #20]
 8001fb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fba:	613b      	str	r3, [r7, #16]
 8001fbc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fbe:	4b20      	ldr	r3, [pc, #128]	; (8002040 <HAL_I2C_MspInit+0xbc>)
 8001fc0:	695b      	ldr	r3, [r3, #20]
 8001fc2:	4a1f      	ldr	r2, [pc, #124]	; (8002040 <HAL_I2C_MspInit+0xbc>)
 8001fc4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001fc8:	6153      	str	r3, [r2, #20]
 8001fca:	4b1d      	ldr	r3, [pc, #116]	; (8002040 <HAL_I2C_MspInit+0xbc>)
 8001fcc:	695b      	ldr	r3, [r3, #20]
 8001fce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001fd2:	60fb      	str	r3, [r7, #12]
 8001fd4:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001fd6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001fda:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001fdc:	2312      	movs	r3, #18
 8001fde:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001fe4:	2303      	movs	r3, #3
 8001fe6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001fe8:	2304      	movs	r3, #4
 8001fea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fec:	f107 0314 	add.w	r3, r7, #20
 8001ff0:	4619      	mov	r1, r3
 8001ff2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ff6:	f000 fbd7 	bl	80027a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001ffa:	2380      	movs	r3, #128	; 0x80
 8001ffc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ffe:	2312      	movs	r3, #18
 8002000:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002002:	2300      	movs	r3, #0
 8002004:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002006:	2303      	movs	r3, #3
 8002008:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800200a:	2304      	movs	r3, #4
 800200c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800200e:	f107 0314 	add.w	r3, r7, #20
 8002012:	4619      	mov	r1, r3
 8002014:	480b      	ldr	r0, [pc, #44]	; (8002044 <HAL_I2C_MspInit+0xc0>)
 8002016:	f000 fbc7 	bl	80027a8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800201a:	4b09      	ldr	r3, [pc, #36]	; (8002040 <HAL_I2C_MspInit+0xbc>)
 800201c:	69db      	ldr	r3, [r3, #28]
 800201e:	4a08      	ldr	r2, [pc, #32]	; (8002040 <HAL_I2C_MspInit+0xbc>)
 8002020:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002024:	61d3      	str	r3, [r2, #28]
 8002026:	4b06      	ldr	r3, [pc, #24]	; (8002040 <HAL_I2C_MspInit+0xbc>)
 8002028:	69db      	ldr	r3, [r3, #28]
 800202a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800202e:	60bb      	str	r3, [r7, #8]
 8002030:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002032:	bf00      	nop
 8002034:	3728      	adds	r7, #40	; 0x28
 8002036:	46bd      	mov	sp, r7
 8002038:	bd80      	pop	{r7, pc}
 800203a:	bf00      	nop
 800203c:	40005400 	.word	0x40005400
 8002040:	40021000 	.word	0x40021000
 8002044:	48000400 	.word	0x48000400

08002048 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b08a      	sub	sp, #40	; 0x28
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002050:	f107 0314 	add.w	r3, r7, #20
 8002054:	2200      	movs	r2, #0
 8002056:	601a      	str	r2, [r3, #0]
 8002058:	605a      	str	r2, [r3, #4]
 800205a:	609a      	str	r2, [r3, #8]
 800205c:	60da      	str	r2, [r3, #12]
 800205e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	4a25      	ldr	r2, [pc, #148]	; (80020fc <HAL_SPI_MspInit+0xb4>)
 8002066:	4293      	cmp	r3, r2
 8002068:	d144      	bne.n	80020f4 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800206a:	4b25      	ldr	r3, [pc, #148]	; (8002100 <HAL_SPI_MspInit+0xb8>)
 800206c:	69db      	ldr	r3, [r3, #28]
 800206e:	4a24      	ldr	r2, [pc, #144]	; (8002100 <HAL_SPI_MspInit+0xb8>)
 8002070:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002074:	61d3      	str	r3, [r2, #28]
 8002076:	4b22      	ldr	r3, [pc, #136]	; (8002100 <HAL_SPI_MspInit+0xb8>)
 8002078:	69db      	ldr	r3, [r3, #28]
 800207a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800207e:	613b      	str	r3, [r7, #16]
 8002080:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002082:	4b1f      	ldr	r3, [pc, #124]	; (8002100 <HAL_SPI_MspInit+0xb8>)
 8002084:	695b      	ldr	r3, [r3, #20]
 8002086:	4a1e      	ldr	r2, [pc, #120]	; (8002100 <HAL_SPI_MspInit+0xb8>)
 8002088:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800208c:	6153      	str	r3, [r2, #20]
 800208e:	4b1c      	ldr	r3, [pc, #112]	; (8002100 <HAL_SPI_MspInit+0xb8>)
 8002090:	695b      	ldr	r3, [r3, #20]
 8002092:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002096:	60fb      	str	r3, [r7, #12]
 8002098:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800209a:	4b19      	ldr	r3, [pc, #100]	; (8002100 <HAL_SPI_MspInit+0xb8>)
 800209c:	695b      	ldr	r3, [r3, #20]
 800209e:	4a18      	ldr	r2, [pc, #96]	; (8002100 <HAL_SPI_MspInit+0xb8>)
 80020a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80020a4:	6153      	str	r3, [r2, #20]
 80020a6:	4b16      	ldr	r3, [pc, #88]	; (8002100 <HAL_SPI_MspInit+0xb8>)
 80020a8:	695b      	ldr	r3, [r3, #20]
 80020aa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80020ae:	60bb      	str	r3, [r7, #8]
 80020b0:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PF1-OSC_OUT     ------> SPI2_SCK
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80020b2:	2302      	movs	r3, #2
 80020b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020b6:	2302      	movs	r3, #2
 80020b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ba:	2300      	movs	r3, #0
 80020bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80020be:	2303      	movs	r3, #3
 80020c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80020c2:	2305      	movs	r3, #5
 80020c4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80020c6:	f107 0314 	add.w	r3, r7, #20
 80020ca:	4619      	mov	r1, r3
 80020cc:	480d      	ldr	r0, [pc, #52]	; (8002104 <HAL_SPI_MspInit+0xbc>)
 80020ce:	f000 fb6b 	bl	80027a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80020d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80020d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020d8:	2302      	movs	r3, #2
 80020da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020dc:	2300      	movs	r3, #0
 80020de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80020e0:	2303      	movs	r3, #3
 80020e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80020e4:	2305      	movs	r3, #5
 80020e6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020e8:	f107 0314 	add.w	r3, r7, #20
 80020ec:	4619      	mov	r1, r3
 80020ee:	4806      	ldr	r0, [pc, #24]	; (8002108 <HAL_SPI_MspInit+0xc0>)
 80020f0:	f000 fb5a 	bl	80027a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80020f4:	bf00      	nop
 80020f6:	3728      	adds	r7, #40	; 0x28
 80020f8:	46bd      	mov	sp, r7
 80020fa:	bd80      	pop	{r7, pc}
 80020fc:	40003800 	.word	0x40003800
 8002100:	40021000 	.word	0x40021000
 8002104:	48001400 	.word	0x48001400
 8002108:	48000400 	.word	0x48000400

0800210c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800210c:	b480      	push	{r7}
 800210e:	b085      	sub	sp, #20
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	4a0a      	ldr	r2, [pc, #40]	; (8002144 <HAL_TIM_PWM_MspInit+0x38>)
 800211a:	4293      	cmp	r3, r2
 800211c:	d10b      	bne.n	8002136 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800211e:	4b0a      	ldr	r3, [pc, #40]	; (8002148 <HAL_TIM_PWM_MspInit+0x3c>)
 8002120:	699b      	ldr	r3, [r3, #24]
 8002122:	4a09      	ldr	r2, [pc, #36]	; (8002148 <HAL_TIM_PWM_MspInit+0x3c>)
 8002124:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002128:	6193      	str	r3, [r2, #24]
 800212a:	4b07      	ldr	r3, [pc, #28]	; (8002148 <HAL_TIM_PWM_MspInit+0x3c>)
 800212c:	699b      	ldr	r3, [r3, #24]
 800212e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002132:	60fb      	str	r3, [r7, #12]
 8002134:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8002136:	bf00      	nop
 8002138:	3714      	adds	r7, #20
 800213a:	46bd      	mov	sp, r7
 800213c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002140:	4770      	bx	lr
 8002142:	bf00      	nop
 8002144:	40012c00 	.word	0x40012c00
 8002148:	40021000 	.word	0x40021000

0800214c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800214c:	b480      	push	{r7}
 800214e:	b085      	sub	sp, #20
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM15)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	4a0a      	ldr	r2, [pc, #40]	; (8002184 <HAL_TIM_Base_MspInit+0x38>)
 800215a:	4293      	cmp	r3, r2
 800215c:	d10b      	bne.n	8002176 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM15_MspInit 0 */

  /* USER CODE END TIM15_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM15_CLK_ENABLE();
 800215e:	4b0a      	ldr	r3, [pc, #40]	; (8002188 <HAL_TIM_Base_MspInit+0x3c>)
 8002160:	699b      	ldr	r3, [r3, #24]
 8002162:	4a09      	ldr	r2, [pc, #36]	; (8002188 <HAL_TIM_Base_MspInit+0x3c>)
 8002164:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002168:	6193      	str	r3, [r2, #24]
 800216a:	4b07      	ldr	r3, [pc, #28]	; (8002188 <HAL_TIM_Base_MspInit+0x3c>)
 800216c:	699b      	ldr	r3, [r3, #24]
 800216e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002172:	60fb      	str	r3, [r7, #12]
 8002174:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 8002176:	bf00      	nop
 8002178:	3714      	adds	r7, #20
 800217a:	46bd      	mov	sp, r7
 800217c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002180:	4770      	bx	lr
 8002182:	bf00      	nop
 8002184:	40014000 	.word	0x40014000
 8002188:	40021000 	.word	0x40021000

0800218c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b088      	sub	sp, #32
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002194:	f107 030c 	add.w	r3, r7, #12
 8002198:	2200      	movs	r2, #0
 800219a:	601a      	str	r2, [r3, #0]
 800219c:	605a      	str	r2, [r3, #4]
 800219e:	609a      	str	r2, [r3, #8]
 80021a0:	60da      	str	r2, [r3, #12]
 80021a2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	4a12      	ldr	r2, [pc, #72]	; (80021f4 <HAL_TIM_MspPostInit+0x68>)
 80021aa:	4293      	cmp	r3, r2
 80021ac:	d11d      	bne.n	80021ea <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021ae:	4b12      	ldr	r3, [pc, #72]	; (80021f8 <HAL_TIM_MspPostInit+0x6c>)
 80021b0:	695b      	ldr	r3, [r3, #20]
 80021b2:	4a11      	ldr	r2, [pc, #68]	; (80021f8 <HAL_TIM_MspPostInit+0x6c>)
 80021b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80021b8:	6153      	str	r3, [r2, #20]
 80021ba:	4b0f      	ldr	r3, [pc, #60]	; (80021f8 <HAL_TIM_MspPostInit+0x6c>)
 80021bc:	695b      	ldr	r3, [r3, #20]
 80021be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021c2:	60bb      	str	r3, [r7, #8]
 80021c4:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80021c6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80021ca:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021cc:	2302      	movs	r3, #2
 80021ce:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021d0:	2300      	movs	r3, #0
 80021d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021d4:	2300      	movs	r3, #0
 80021d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 80021d8:	2306      	movs	r3, #6
 80021da:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021dc:	f107 030c 	add.w	r3, r7, #12
 80021e0:	4619      	mov	r1, r3
 80021e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80021e6:	f000 fadf 	bl	80027a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80021ea:	bf00      	nop
 80021ec:	3720      	adds	r7, #32
 80021ee:	46bd      	mov	sp, r7
 80021f0:	bd80      	pop	{r7, pc}
 80021f2:	bf00      	nop
 80021f4:	40012c00 	.word	0x40012c00
 80021f8:	40021000 	.word	0x40021000

080021fc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b08a      	sub	sp, #40	; 0x28
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002204:	f107 0314 	add.w	r3, r7, #20
 8002208:	2200      	movs	r2, #0
 800220a:	601a      	str	r2, [r3, #0]
 800220c:	605a      	str	r2, [r3, #4]
 800220e:	609a      	str	r2, [r3, #8]
 8002210:	60da      	str	r2, [r3, #12]
 8002212:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	4a18      	ldr	r2, [pc, #96]	; (800227c <HAL_UART_MspInit+0x80>)
 800221a:	4293      	cmp	r3, r2
 800221c:	d129      	bne.n	8002272 <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800221e:	4b18      	ldr	r3, [pc, #96]	; (8002280 <HAL_UART_MspInit+0x84>)
 8002220:	699b      	ldr	r3, [r3, #24]
 8002222:	4a17      	ldr	r2, [pc, #92]	; (8002280 <HAL_UART_MspInit+0x84>)
 8002224:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002228:	6193      	str	r3, [r2, #24]
 800222a:	4b15      	ldr	r3, [pc, #84]	; (8002280 <HAL_UART_MspInit+0x84>)
 800222c:	699b      	ldr	r3, [r3, #24]
 800222e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002232:	613b      	str	r3, [r7, #16]
 8002234:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002236:	4b12      	ldr	r3, [pc, #72]	; (8002280 <HAL_UART_MspInit+0x84>)
 8002238:	695b      	ldr	r3, [r3, #20]
 800223a:	4a11      	ldr	r2, [pc, #68]	; (8002280 <HAL_UART_MspInit+0x84>)
 800223c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002240:	6153      	str	r3, [r2, #20]
 8002242:	4b0f      	ldr	r3, [pc, #60]	; (8002280 <HAL_UART_MspInit+0x84>)
 8002244:	695b      	ldr	r3, [r3, #20]
 8002246:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800224a:	60fb      	str	r3, [r7, #12]
 800224c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800224e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002252:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002254:	2302      	movs	r3, #2
 8002256:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002258:	2300      	movs	r3, #0
 800225a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800225c:	2303      	movs	r3, #3
 800225e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002260:	2307      	movs	r3, #7
 8002262:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002264:	f107 0314 	add.w	r3, r7, #20
 8002268:	4619      	mov	r1, r3
 800226a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800226e:	f000 fa9b 	bl	80027a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002272:	bf00      	nop
 8002274:	3728      	adds	r7, #40	; 0x28
 8002276:	46bd      	mov	sp, r7
 8002278:	bd80      	pop	{r7, pc}
 800227a:	bf00      	nop
 800227c:	40013800 	.word	0x40013800
 8002280:	40021000 	.word	0x40021000

08002284 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002284:	b480      	push	{r7}
 8002286:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002288:	e7fe      	b.n	8002288 <NMI_Handler+0x4>

0800228a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800228a:	b480      	push	{r7}
 800228c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800228e:	e7fe      	b.n	800228e <HardFault_Handler+0x4>

08002290 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002290:	b480      	push	{r7}
 8002292:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002294:	e7fe      	b.n	8002294 <MemManage_Handler+0x4>

08002296 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002296:	b480      	push	{r7}
 8002298:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800229a:	e7fe      	b.n	800229a <BusFault_Handler+0x4>

0800229c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800229c:	b480      	push	{r7}
 800229e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80022a0:	e7fe      	b.n	80022a0 <UsageFault_Handler+0x4>

080022a2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80022a2:	b480      	push	{r7}
 80022a4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80022a6:	bf00      	nop
 80022a8:	46bd      	mov	sp, r7
 80022aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ae:	4770      	bx	lr

080022b0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80022b0:	b480      	push	{r7}
 80022b2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80022b4:	bf00      	nop
 80022b6:	46bd      	mov	sp, r7
 80022b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022bc:	4770      	bx	lr

080022be <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80022be:	b480      	push	{r7}
 80022c0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80022c2:	bf00      	nop
 80022c4:	46bd      	mov	sp, r7
 80022c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ca:	4770      	bx	lr

080022cc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80022d0:	f000 f914 	bl	80024fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80022d4:	bf00      	nop
 80022d6:	bd80      	pop	{r7, pc}

080022d8 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */
	Interrupt_flank();
 80022dc:	f7ff f848 	bl	8001370 <Interrupt_flank>
  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ReadIR_Pin);
 80022e0:	2008      	movs	r0, #8
 80022e2:	f000 fbeb 	bl	8002abc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 80022e6:	bf00      	nop
 80022e8:	bd80      	pop	{r7, pc}

080022ea <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80022ea:	b580      	push	{r7, lr}
 80022ec:	b086      	sub	sp, #24
 80022ee:	af00      	add	r7, sp, #0
 80022f0:	60f8      	str	r0, [r7, #12]
 80022f2:	60b9      	str	r1, [r7, #8]
 80022f4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022f6:	2300      	movs	r3, #0
 80022f8:	617b      	str	r3, [r7, #20]
 80022fa:	e00a      	b.n	8002312 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80022fc:	f3af 8000 	nop.w
 8002300:	4601      	mov	r1, r0
 8002302:	68bb      	ldr	r3, [r7, #8]
 8002304:	1c5a      	adds	r2, r3, #1
 8002306:	60ba      	str	r2, [r7, #8]
 8002308:	b2ca      	uxtb	r2, r1
 800230a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800230c:	697b      	ldr	r3, [r7, #20]
 800230e:	3301      	adds	r3, #1
 8002310:	617b      	str	r3, [r7, #20]
 8002312:	697a      	ldr	r2, [r7, #20]
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	429a      	cmp	r2, r3
 8002318:	dbf0      	blt.n	80022fc <_read+0x12>
  }

  return len;
 800231a:	687b      	ldr	r3, [r7, #4]
}
 800231c:	4618      	mov	r0, r3
 800231e:	3718      	adds	r7, #24
 8002320:	46bd      	mov	sp, r7
 8002322:	bd80      	pop	{r7, pc}

08002324 <_close>:
  }
  return len;
}

int _close(int file)
{
 8002324:	b480      	push	{r7}
 8002326:	b083      	sub	sp, #12
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800232c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002330:	4618      	mov	r0, r3
 8002332:	370c      	adds	r7, #12
 8002334:	46bd      	mov	sp, r7
 8002336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233a:	4770      	bx	lr

0800233c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800233c:	b480      	push	{r7}
 800233e:	b083      	sub	sp, #12
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
 8002344:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800234c:	605a      	str	r2, [r3, #4]
  return 0;
 800234e:	2300      	movs	r3, #0
}
 8002350:	4618      	mov	r0, r3
 8002352:	370c      	adds	r7, #12
 8002354:	46bd      	mov	sp, r7
 8002356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235a:	4770      	bx	lr

0800235c <_isatty>:

int _isatty(int file)
{
 800235c:	b480      	push	{r7}
 800235e:	b083      	sub	sp, #12
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002364:	2301      	movs	r3, #1
}
 8002366:	4618      	mov	r0, r3
 8002368:	370c      	adds	r7, #12
 800236a:	46bd      	mov	sp, r7
 800236c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002370:	4770      	bx	lr

08002372 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002372:	b480      	push	{r7}
 8002374:	b085      	sub	sp, #20
 8002376:	af00      	add	r7, sp, #0
 8002378:	60f8      	str	r0, [r7, #12]
 800237a:	60b9      	str	r1, [r7, #8]
 800237c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800237e:	2300      	movs	r3, #0
}
 8002380:	4618      	mov	r0, r3
 8002382:	3714      	adds	r7, #20
 8002384:	46bd      	mov	sp, r7
 8002386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238a:	4770      	bx	lr

0800238c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b086      	sub	sp, #24
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002394:	4a14      	ldr	r2, [pc, #80]	; (80023e8 <_sbrk+0x5c>)
 8002396:	4b15      	ldr	r3, [pc, #84]	; (80023ec <_sbrk+0x60>)
 8002398:	1ad3      	subs	r3, r2, r3
 800239a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800239c:	697b      	ldr	r3, [r7, #20]
 800239e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80023a0:	4b13      	ldr	r3, [pc, #76]	; (80023f0 <_sbrk+0x64>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d102      	bne.n	80023ae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80023a8:	4b11      	ldr	r3, [pc, #68]	; (80023f0 <_sbrk+0x64>)
 80023aa:	4a12      	ldr	r2, [pc, #72]	; (80023f4 <_sbrk+0x68>)
 80023ac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80023ae:	4b10      	ldr	r3, [pc, #64]	; (80023f0 <_sbrk+0x64>)
 80023b0:	681a      	ldr	r2, [r3, #0]
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	4413      	add	r3, r2
 80023b6:	693a      	ldr	r2, [r7, #16]
 80023b8:	429a      	cmp	r2, r3
 80023ba:	d207      	bcs.n	80023cc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80023bc:	f005 f8e0 	bl	8007580 <__errno>
 80023c0:	4603      	mov	r3, r0
 80023c2:	220c      	movs	r2, #12
 80023c4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80023c6:	f04f 33ff 	mov.w	r3, #4294967295
 80023ca:	e009      	b.n	80023e0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80023cc:	4b08      	ldr	r3, [pc, #32]	; (80023f0 <_sbrk+0x64>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80023d2:	4b07      	ldr	r3, [pc, #28]	; (80023f0 <_sbrk+0x64>)
 80023d4:	681a      	ldr	r2, [r3, #0]
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	4413      	add	r3, r2
 80023da:	4a05      	ldr	r2, [pc, #20]	; (80023f0 <_sbrk+0x64>)
 80023dc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80023de:	68fb      	ldr	r3, [r7, #12]
}
 80023e0:	4618      	mov	r0, r3
 80023e2:	3718      	adds	r7, #24
 80023e4:	46bd      	mov	sp, r7
 80023e6:	bd80      	pop	{r7, pc}
 80023e8:	20004000 	.word	0x20004000
 80023ec:	00000400 	.word	0x00000400
 80023f0:	20002de4 	.word	0x20002de4
 80023f4:	20002e00 	.word	0x20002e00

080023f8 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80023f8:	b480      	push	{r7}
 80023fa:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80023fc:	4b06      	ldr	r3, [pc, #24]	; (8002418 <SystemInit+0x20>)
 80023fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002402:	4a05      	ldr	r2, [pc, #20]	; (8002418 <SystemInit+0x20>)
 8002404:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002408:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800240c:	bf00      	nop
 800240e:	46bd      	mov	sp, r7
 8002410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002414:	4770      	bx	lr
 8002416:	bf00      	nop
 8002418:	e000ed00 	.word	0xe000ed00

0800241c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800241c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002454 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8002420:	f7ff ffea 	bl	80023f8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002424:	480c      	ldr	r0, [pc, #48]	; (8002458 <LoopForever+0x6>)
  ldr r1, =_edata
 8002426:	490d      	ldr	r1, [pc, #52]	; (800245c <LoopForever+0xa>)
  ldr r2, =_sidata
 8002428:	4a0d      	ldr	r2, [pc, #52]	; (8002460 <LoopForever+0xe>)
  movs r3, #0
 800242a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800242c:	e002      	b.n	8002434 <LoopCopyDataInit>

0800242e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800242e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002430:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002432:	3304      	adds	r3, #4

08002434 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002434:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002436:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002438:	d3f9      	bcc.n	800242e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800243a:	4a0a      	ldr	r2, [pc, #40]	; (8002464 <LoopForever+0x12>)
  ldr r4, =_ebss
 800243c:	4c0a      	ldr	r4, [pc, #40]	; (8002468 <LoopForever+0x16>)
  movs r3, #0
 800243e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002440:	e001      	b.n	8002446 <LoopFillZerobss>

08002442 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002442:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002444:	3204      	adds	r2, #4

08002446 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002446:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002448:	d3fb      	bcc.n	8002442 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800244a:	f005 f89f 	bl	800758c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800244e:	f7ff fafb 	bl	8001a48 <main>

08002452 <LoopForever>:

LoopForever:
    b LoopForever
 8002452:	e7fe      	b.n	8002452 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002454:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8002458:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800245c:	200027f0 	.word	0x200027f0
  ldr r2, =_sidata
 8002460:	08008be4 	.word	0x08008be4
  ldr r2, =_sbss
 8002464:	200027f0 	.word	0x200027f0
  ldr r4, =_ebss
 8002468:	20002dfc 	.word	0x20002dfc

0800246c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800246c:	e7fe      	b.n	800246c <ADC1_IRQHandler>
	...

08002470 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002474:	4b08      	ldr	r3, [pc, #32]	; (8002498 <HAL_Init+0x28>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	4a07      	ldr	r2, [pc, #28]	; (8002498 <HAL_Init+0x28>)
 800247a:	f043 0310 	orr.w	r3, r3, #16
 800247e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002480:	2003      	movs	r0, #3
 8002482:	f000 f94f 	bl	8002724 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002486:	200f      	movs	r0, #15
 8002488:	f000 f808 	bl	800249c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800248c:	f7ff fd56 	bl	8001f3c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002490:	2300      	movs	r3, #0
}
 8002492:	4618      	mov	r0, r3
 8002494:	bd80      	pop	{r7, pc}
 8002496:	bf00      	nop
 8002498:	40022000 	.word	0x40022000

0800249c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b082      	sub	sp, #8
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80024a4:	4b12      	ldr	r3, [pc, #72]	; (80024f0 <HAL_InitTick+0x54>)
 80024a6:	681a      	ldr	r2, [r3, #0]
 80024a8:	4b12      	ldr	r3, [pc, #72]	; (80024f4 <HAL_InitTick+0x58>)
 80024aa:	781b      	ldrb	r3, [r3, #0]
 80024ac:	4619      	mov	r1, r3
 80024ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80024b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80024b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80024ba:	4618      	mov	r0, r3
 80024bc:	f000 f967 	bl	800278e <HAL_SYSTICK_Config>
 80024c0:	4603      	mov	r3, r0
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d001      	beq.n	80024ca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80024c6:	2301      	movs	r3, #1
 80024c8:	e00e      	b.n	80024e8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	2b0f      	cmp	r3, #15
 80024ce:	d80a      	bhi.n	80024e6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80024d0:	2200      	movs	r2, #0
 80024d2:	6879      	ldr	r1, [r7, #4]
 80024d4:	f04f 30ff 	mov.w	r0, #4294967295
 80024d8:	f000 f92f 	bl	800273a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80024dc:	4a06      	ldr	r2, [pc, #24]	; (80024f8 <HAL_InitTick+0x5c>)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80024e2:	2300      	movs	r3, #0
 80024e4:	e000      	b.n	80024e8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80024e6:	2301      	movs	r3, #1
}
 80024e8:	4618      	mov	r0, r3
 80024ea:	3708      	adds	r7, #8
 80024ec:	46bd      	mov	sp, r7
 80024ee:	bd80      	pop	{r7, pc}
 80024f0:	20002780 	.word	0x20002780
 80024f4:	20002788 	.word	0x20002788
 80024f8:	20002784 	.word	0x20002784

080024fc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80024fc:	b480      	push	{r7}
 80024fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002500:	4b06      	ldr	r3, [pc, #24]	; (800251c <HAL_IncTick+0x20>)
 8002502:	781b      	ldrb	r3, [r3, #0]
 8002504:	461a      	mov	r2, r3
 8002506:	4b06      	ldr	r3, [pc, #24]	; (8002520 <HAL_IncTick+0x24>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	4413      	add	r3, r2
 800250c:	4a04      	ldr	r2, [pc, #16]	; (8002520 <HAL_IncTick+0x24>)
 800250e:	6013      	str	r3, [r2, #0]
}
 8002510:	bf00      	nop
 8002512:	46bd      	mov	sp, r7
 8002514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002518:	4770      	bx	lr
 800251a:	bf00      	nop
 800251c:	20002788 	.word	0x20002788
 8002520:	20002de8 	.word	0x20002de8

08002524 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002524:	b480      	push	{r7}
 8002526:	af00      	add	r7, sp, #0
  return uwTick;  
 8002528:	4b03      	ldr	r3, [pc, #12]	; (8002538 <HAL_GetTick+0x14>)
 800252a:	681b      	ldr	r3, [r3, #0]
}
 800252c:	4618      	mov	r0, r3
 800252e:	46bd      	mov	sp, r7
 8002530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002534:	4770      	bx	lr
 8002536:	bf00      	nop
 8002538:	20002de8 	.word	0x20002de8

0800253c <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b084      	sub	sp, #16
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002544:	f7ff ffee 	bl	8002524 <HAL_GetTick>
 8002548:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002554:	d005      	beq.n	8002562 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002556:	4b0a      	ldr	r3, [pc, #40]	; (8002580 <HAL_Delay+0x44>)
 8002558:	781b      	ldrb	r3, [r3, #0]
 800255a:	461a      	mov	r2, r3
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	4413      	add	r3, r2
 8002560:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8002562:	bf00      	nop
 8002564:	f7ff ffde 	bl	8002524 <HAL_GetTick>
 8002568:	4602      	mov	r2, r0
 800256a:	68bb      	ldr	r3, [r7, #8]
 800256c:	1ad3      	subs	r3, r2, r3
 800256e:	68fa      	ldr	r2, [r7, #12]
 8002570:	429a      	cmp	r2, r3
 8002572:	d8f7      	bhi.n	8002564 <HAL_Delay+0x28>
  {
  }
}
 8002574:	bf00      	nop
 8002576:	bf00      	nop
 8002578:	3710      	adds	r7, #16
 800257a:	46bd      	mov	sp, r7
 800257c:	bd80      	pop	{r7, pc}
 800257e:	bf00      	nop
 8002580:	20002788 	.word	0x20002788

08002584 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002584:	b480      	push	{r7}
 8002586:	b085      	sub	sp, #20
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	f003 0307 	and.w	r3, r3, #7
 8002592:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002594:	4b0c      	ldr	r3, [pc, #48]	; (80025c8 <__NVIC_SetPriorityGrouping+0x44>)
 8002596:	68db      	ldr	r3, [r3, #12]
 8002598:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800259a:	68ba      	ldr	r2, [r7, #8]
 800259c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80025a0:	4013      	ands	r3, r2
 80025a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80025a8:	68bb      	ldr	r3, [r7, #8]
 80025aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80025ac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80025b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80025b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80025b6:	4a04      	ldr	r2, [pc, #16]	; (80025c8 <__NVIC_SetPriorityGrouping+0x44>)
 80025b8:	68bb      	ldr	r3, [r7, #8]
 80025ba:	60d3      	str	r3, [r2, #12]
}
 80025bc:	bf00      	nop
 80025be:	3714      	adds	r7, #20
 80025c0:	46bd      	mov	sp, r7
 80025c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c6:	4770      	bx	lr
 80025c8:	e000ed00 	.word	0xe000ed00

080025cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80025cc:	b480      	push	{r7}
 80025ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80025d0:	4b04      	ldr	r3, [pc, #16]	; (80025e4 <__NVIC_GetPriorityGrouping+0x18>)
 80025d2:	68db      	ldr	r3, [r3, #12]
 80025d4:	0a1b      	lsrs	r3, r3, #8
 80025d6:	f003 0307 	and.w	r3, r3, #7
}
 80025da:	4618      	mov	r0, r3
 80025dc:	46bd      	mov	sp, r7
 80025de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e2:	4770      	bx	lr
 80025e4:	e000ed00 	.word	0xe000ed00

080025e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025e8:	b480      	push	{r7}
 80025ea:	b083      	sub	sp, #12
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	4603      	mov	r3, r0
 80025f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	db0b      	blt.n	8002612 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80025fa:	79fb      	ldrb	r3, [r7, #7]
 80025fc:	f003 021f 	and.w	r2, r3, #31
 8002600:	4907      	ldr	r1, [pc, #28]	; (8002620 <__NVIC_EnableIRQ+0x38>)
 8002602:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002606:	095b      	lsrs	r3, r3, #5
 8002608:	2001      	movs	r0, #1
 800260a:	fa00 f202 	lsl.w	r2, r0, r2
 800260e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002612:	bf00      	nop
 8002614:	370c      	adds	r7, #12
 8002616:	46bd      	mov	sp, r7
 8002618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261c:	4770      	bx	lr
 800261e:	bf00      	nop
 8002620:	e000e100 	.word	0xe000e100

08002624 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002624:	b480      	push	{r7}
 8002626:	b083      	sub	sp, #12
 8002628:	af00      	add	r7, sp, #0
 800262a:	4603      	mov	r3, r0
 800262c:	6039      	str	r1, [r7, #0]
 800262e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002630:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002634:	2b00      	cmp	r3, #0
 8002636:	db0a      	blt.n	800264e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	b2da      	uxtb	r2, r3
 800263c:	490c      	ldr	r1, [pc, #48]	; (8002670 <__NVIC_SetPriority+0x4c>)
 800263e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002642:	0112      	lsls	r2, r2, #4
 8002644:	b2d2      	uxtb	r2, r2
 8002646:	440b      	add	r3, r1
 8002648:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800264c:	e00a      	b.n	8002664 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	b2da      	uxtb	r2, r3
 8002652:	4908      	ldr	r1, [pc, #32]	; (8002674 <__NVIC_SetPriority+0x50>)
 8002654:	79fb      	ldrb	r3, [r7, #7]
 8002656:	f003 030f 	and.w	r3, r3, #15
 800265a:	3b04      	subs	r3, #4
 800265c:	0112      	lsls	r2, r2, #4
 800265e:	b2d2      	uxtb	r2, r2
 8002660:	440b      	add	r3, r1
 8002662:	761a      	strb	r2, [r3, #24]
}
 8002664:	bf00      	nop
 8002666:	370c      	adds	r7, #12
 8002668:	46bd      	mov	sp, r7
 800266a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266e:	4770      	bx	lr
 8002670:	e000e100 	.word	0xe000e100
 8002674:	e000ed00 	.word	0xe000ed00

08002678 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002678:	b480      	push	{r7}
 800267a:	b089      	sub	sp, #36	; 0x24
 800267c:	af00      	add	r7, sp, #0
 800267e:	60f8      	str	r0, [r7, #12]
 8002680:	60b9      	str	r1, [r7, #8]
 8002682:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	f003 0307 	and.w	r3, r3, #7
 800268a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800268c:	69fb      	ldr	r3, [r7, #28]
 800268e:	f1c3 0307 	rsb	r3, r3, #7
 8002692:	2b04      	cmp	r3, #4
 8002694:	bf28      	it	cs
 8002696:	2304      	movcs	r3, #4
 8002698:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800269a:	69fb      	ldr	r3, [r7, #28]
 800269c:	3304      	adds	r3, #4
 800269e:	2b06      	cmp	r3, #6
 80026a0:	d902      	bls.n	80026a8 <NVIC_EncodePriority+0x30>
 80026a2:	69fb      	ldr	r3, [r7, #28]
 80026a4:	3b03      	subs	r3, #3
 80026a6:	e000      	b.n	80026aa <NVIC_EncodePriority+0x32>
 80026a8:	2300      	movs	r3, #0
 80026aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026ac:	f04f 32ff 	mov.w	r2, #4294967295
 80026b0:	69bb      	ldr	r3, [r7, #24]
 80026b2:	fa02 f303 	lsl.w	r3, r2, r3
 80026b6:	43da      	mvns	r2, r3
 80026b8:	68bb      	ldr	r3, [r7, #8]
 80026ba:	401a      	ands	r2, r3
 80026bc:	697b      	ldr	r3, [r7, #20]
 80026be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80026c0:	f04f 31ff 	mov.w	r1, #4294967295
 80026c4:	697b      	ldr	r3, [r7, #20]
 80026c6:	fa01 f303 	lsl.w	r3, r1, r3
 80026ca:	43d9      	mvns	r1, r3
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026d0:	4313      	orrs	r3, r2
         );
}
 80026d2:	4618      	mov	r0, r3
 80026d4:	3724      	adds	r7, #36	; 0x24
 80026d6:	46bd      	mov	sp, r7
 80026d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026dc:	4770      	bx	lr
	...

080026e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b082      	sub	sp, #8
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	3b01      	subs	r3, #1
 80026ec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80026f0:	d301      	bcc.n	80026f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80026f2:	2301      	movs	r3, #1
 80026f4:	e00f      	b.n	8002716 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80026f6:	4a0a      	ldr	r2, [pc, #40]	; (8002720 <SysTick_Config+0x40>)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	3b01      	subs	r3, #1
 80026fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80026fe:	210f      	movs	r1, #15
 8002700:	f04f 30ff 	mov.w	r0, #4294967295
 8002704:	f7ff ff8e 	bl	8002624 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002708:	4b05      	ldr	r3, [pc, #20]	; (8002720 <SysTick_Config+0x40>)
 800270a:	2200      	movs	r2, #0
 800270c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800270e:	4b04      	ldr	r3, [pc, #16]	; (8002720 <SysTick_Config+0x40>)
 8002710:	2207      	movs	r2, #7
 8002712:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002714:	2300      	movs	r3, #0
}
 8002716:	4618      	mov	r0, r3
 8002718:	3708      	adds	r7, #8
 800271a:	46bd      	mov	sp, r7
 800271c:	bd80      	pop	{r7, pc}
 800271e:	bf00      	nop
 8002720:	e000e010 	.word	0xe000e010

08002724 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	b082      	sub	sp, #8
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800272c:	6878      	ldr	r0, [r7, #4]
 800272e:	f7ff ff29 	bl	8002584 <__NVIC_SetPriorityGrouping>
}
 8002732:	bf00      	nop
 8002734:	3708      	adds	r7, #8
 8002736:	46bd      	mov	sp, r7
 8002738:	bd80      	pop	{r7, pc}

0800273a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800273a:	b580      	push	{r7, lr}
 800273c:	b086      	sub	sp, #24
 800273e:	af00      	add	r7, sp, #0
 8002740:	4603      	mov	r3, r0
 8002742:	60b9      	str	r1, [r7, #8]
 8002744:	607a      	str	r2, [r7, #4]
 8002746:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002748:	2300      	movs	r3, #0
 800274a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800274c:	f7ff ff3e 	bl	80025cc <__NVIC_GetPriorityGrouping>
 8002750:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002752:	687a      	ldr	r2, [r7, #4]
 8002754:	68b9      	ldr	r1, [r7, #8]
 8002756:	6978      	ldr	r0, [r7, #20]
 8002758:	f7ff ff8e 	bl	8002678 <NVIC_EncodePriority>
 800275c:	4602      	mov	r2, r0
 800275e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002762:	4611      	mov	r1, r2
 8002764:	4618      	mov	r0, r3
 8002766:	f7ff ff5d 	bl	8002624 <__NVIC_SetPriority>
}
 800276a:	bf00      	nop
 800276c:	3718      	adds	r7, #24
 800276e:	46bd      	mov	sp, r7
 8002770:	bd80      	pop	{r7, pc}

08002772 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002772:	b580      	push	{r7, lr}
 8002774:	b082      	sub	sp, #8
 8002776:	af00      	add	r7, sp, #0
 8002778:	4603      	mov	r3, r0
 800277a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800277c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002780:	4618      	mov	r0, r3
 8002782:	f7ff ff31 	bl	80025e8 <__NVIC_EnableIRQ>
}
 8002786:	bf00      	nop
 8002788:	3708      	adds	r7, #8
 800278a:	46bd      	mov	sp, r7
 800278c:	bd80      	pop	{r7, pc}

0800278e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800278e:	b580      	push	{r7, lr}
 8002790:	b082      	sub	sp, #8
 8002792:	af00      	add	r7, sp, #0
 8002794:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002796:	6878      	ldr	r0, [r7, #4]
 8002798:	f7ff ffa2 	bl	80026e0 <SysTick_Config>
 800279c:	4603      	mov	r3, r0
}
 800279e:	4618      	mov	r0, r3
 80027a0:	3708      	adds	r7, #8
 80027a2:	46bd      	mov	sp, r7
 80027a4:	bd80      	pop	{r7, pc}
	...

080027a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80027a8:	b480      	push	{r7}
 80027aa:	b087      	sub	sp, #28
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
 80027b0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80027b2:	2300      	movs	r3, #0
 80027b4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80027b6:	e14e      	b.n	8002a56 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	681a      	ldr	r2, [r3, #0]
 80027bc:	2101      	movs	r1, #1
 80027be:	697b      	ldr	r3, [r7, #20]
 80027c0:	fa01 f303 	lsl.w	r3, r1, r3
 80027c4:	4013      	ands	r3, r2
 80027c6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	f000 8140 	beq.w	8002a50 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	685b      	ldr	r3, [r3, #4]
 80027d4:	f003 0303 	and.w	r3, r3, #3
 80027d8:	2b01      	cmp	r3, #1
 80027da:	d005      	beq.n	80027e8 <HAL_GPIO_Init+0x40>
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	685b      	ldr	r3, [r3, #4]
 80027e0:	f003 0303 	and.w	r3, r3, #3
 80027e4:	2b02      	cmp	r3, #2
 80027e6:	d130      	bne.n	800284a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	689b      	ldr	r3, [r3, #8]
 80027ec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80027ee:	697b      	ldr	r3, [r7, #20]
 80027f0:	005b      	lsls	r3, r3, #1
 80027f2:	2203      	movs	r2, #3
 80027f4:	fa02 f303 	lsl.w	r3, r2, r3
 80027f8:	43db      	mvns	r3, r3
 80027fa:	693a      	ldr	r2, [r7, #16]
 80027fc:	4013      	ands	r3, r2
 80027fe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	68da      	ldr	r2, [r3, #12]
 8002804:	697b      	ldr	r3, [r7, #20]
 8002806:	005b      	lsls	r3, r3, #1
 8002808:	fa02 f303 	lsl.w	r3, r2, r3
 800280c:	693a      	ldr	r2, [r7, #16]
 800280e:	4313      	orrs	r3, r2
 8002810:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	693a      	ldr	r2, [r7, #16]
 8002816:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	685b      	ldr	r3, [r3, #4]
 800281c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800281e:	2201      	movs	r2, #1
 8002820:	697b      	ldr	r3, [r7, #20]
 8002822:	fa02 f303 	lsl.w	r3, r2, r3
 8002826:	43db      	mvns	r3, r3
 8002828:	693a      	ldr	r2, [r7, #16]
 800282a:	4013      	ands	r3, r2
 800282c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	685b      	ldr	r3, [r3, #4]
 8002832:	091b      	lsrs	r3, r3, #4
 8002834:	f003 0201 	and.w	r2, r3, #1
 8002838:	697b      	ldr	r3, [r7, #20]
 800283a:	fa02 f303 	lsl.w	r3, r2, r3
 800283e:	693a      	ldr	r2, [r7, #16]
 8002840:	4313      	orrs	r3, r2
 8002842:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	693a      	ldr	r2, [r7, #16]
 8002848:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800284a:	683b      	ldr	r3, [r7, #0]
 800284c:	685b      	ldr	r3, [r3, #4]
 800284e:	f003 0303 	and.w	r3, r3, #3
 8002852:	2b03      	cmp	r3, #3
 8002854:	d017      	beq.n	8002886 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	68db      	ldr	r3, [r3, #12]
 800285a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800285c:	697b      	ldr	r3, [r7, #20]
 800285e:	005b      	lsls	r3, r3, #1
 8002860:	2203      	movs	r2, #3
 8002862:	fa02 f303 	lsl.w	r3, r2, r3
 8002866:	43db      	mvns	r3, r3
 8002868:	693a      	ldr	r2, [r7, #16]
 800286a:	4013      	ands	r3, r2
 800286c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	689a      	ldr	r2, [r3, #8]
 8002872:	697b      	ldr	r3, [r7, #20]
 8002874:	005b      	lsls	r3, r3, #1
 8002876:	fa02 f303 	lsl.w	r3, r2, r3
 800287a:	693a      	ldr	r2, [r7, #16]
 800287c:	4313      	orrs	r3, r2
 800287e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	693a      	ldr	r2, [r7, #16]
 8002884:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	685b      	ldr	r3, [r3, #4]
 800288a:	f003 0303 	and.w	r3, r3, #3
 800288e:	2b02      	cmp	r3, #2
 8002890:	d123      	bne.n	80028da <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002892:	697b      	ldr	r3, [r7, #20]
 8002894:	08da      	lsrs	r2, r3, #3
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	3208      	adds	r2, #8
 800289a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800289e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80028a0:	697b      	ldr	r3, [r7, #20]
 80028a2:	f003 0307 	and.w	r3, r3, #7
 80028a6:	009b      	lsls	r3, r3, #2
 80028a8:	220f      	movs	r2, #15
 80028aa:	fa02 f303 	lsl.w	r3, r2, r3
 80028ae:	43db      	mvns	r3, r3
 80028b0:	693a      	ldr	r2, [r7, #16]
 80028b2:	4013      	ands	r3, r2
 80028b4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	691a      	ldr	r2, [r3, #16]
 80028ba:	697b      	ldr	r3, [r7, #20]
 80028bc:	f003 0307 	and.w	r3, r3, #7
 80028c0:	009b      	lsls	r3, r3, #2
 80028c2:	fa02 f303 	lsl.w	r3, r2, r3
 80028c6:	693a      	ldr	r2, [r7, #16]
 80028c8:	4313      	orrs	r3, r2
 80028ca:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80028cc:	697b      	ldr	r3, [r7, #20]
 80028ce:	08da      	lsrs	r2, r3, #3
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	3208      	adds	r2, #8
 80028d4:	6939      	ldr	r1, [r7, #16]
 80028d6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80028e0:	697b      	ldr	r3, [r7, #20]
 80028e2:	005b      	lsls	r3, r3, #1
 80028e4:	2203      	movs	r2, #3
 80028e6:	fa02 f303 	lsl.w	r3, r2, r3
 80028ea:	43db      	mvns	r3, r3
 80028ec:	693a      	ldr	r2, [r7, #16]
 80028ee:	4013      	ands	r3, r2
 80028f0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	685b      	ldr	r3, [r3, #4]
 80028f6:	f003 0203 	and.w	r2, r3, #3
 80028fa:	697b      	ldr	r3, [r7, #20]
 80028fc:	005b      	lsls	r3, r3, #1
 80028fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002902:	693a      	ldr	r2, [r7, #16]
 8002904:	4313      	orrs	r3, r2
 8002906:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	693a      	ldr	r2, [r7, #16]
 800290c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	685b      	ldr	r3, [r3, #4]
 8002912:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002916:	2b00      	cmp	r3, #0
 8002918:	f000 809a 	beq.w	8002a50 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800291c:	4b55      	ldr	r3, [pc, #340]	; (8002a74 <HAL_GPIO_Init+0x2cc>)
 800291e:	699b      	ldr	r3, [r3, #24]
 8002920:	4a54      	ldr	r2, [pc, #336]	; (8002a74 <HAL_GPIO_Init+0x2cc>)
 8002922:	f043 0301 	orr.w	r3, r3, #1
 8002926:	6193      	str	r3, [r2, #24]
 8002928:	4b52      	ldr	r3, [pc, #328]	; (8002a74 <HAL_GPIO_Init+0x2cc>)
 800292a:	699b      	ldr	r3, [r3, #24]
 800292c:	f003 0301 	and.w	r3, r3, #1
 8002930:	60bb      	str	r3, [r7, #8]
 8002932:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002934:	4a50      	ldr	r2, [pc, #320]	; (8002a78 <HAL_GPIO_Init+0x2d0>)
 8002936:	697b      	ldr	r3, [r7, #20]
 8002938:	089b      	lsrs	r3, r3, #2
 800293a:	3302      	adds	r3, #2
 800293c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002940:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002942:	697b      	ldr	r3, [r7, #20]
 8002944:	f003 0303 	and.w	r3, r3, #3
 8002948:	009b      	lsls	r3, r3, #2
 800294a:	220f      	movs	r2, #15
 800294c:	fa02 f303 	lsl.w	r3, r2, r3
 8002950:	43db      	mvns	r3, r3
 8002952:	693a      	ldr	r2, [r7, #16]
 8002954:	4013      	ands	r3, r2
 8002956:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800295e:	d013      	beq.n	8002988 <HAL_GPIO_Init+0x1e0>
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	4a46      	ldr	r2, [pc, #280]	; (8002a7c <HAL_GPIO_Init+0x2d4>)
 8002964:	4293      	cmp	r3, r2
 8002966:	d00d      	beq.n	8002984 <HAL_GPIO_Init+0x1dc>
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	4a45      	ldr	r2, [pc, #276]	; (8002a80 <HAL_GPIO_Init+0x2d8>)
 800296c:	4293      	cmp	r3, r2
 800296e:	d007      	beq.n	8002980 <HAL_GPIO_Init+0x1d8>
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	4a44      	ldr	r2, [pc, #272]	; (8002a84 <HAL_GPIO_Init+0x2dc>)
 8002974:	4293      	cmp	r3, r2
 8002976:	d101      	bne.n	800297c <HAL_GPIO_Init+0x1d4>
 8002978:	2303      	movs	r3, #3
 800297a:	e006      	b.n	800298a <HAL_GPIO_Init+0x1e2>
 800297c:	2305      	movs	r3, #5
 800297e:	e004      	b.n	800298a <HAL_GPIO_Init+0x1e2>
 8002980:	2302      	movs	r3, #2
 8002982:	e002      	b.n	800298a <HAL_GPIO_Init+0x1e2>
 8002984:	2301      	movs	r3, #1
 8002986:	e000      	b.n	800298a <HAL_GPIO_Init+0x1e2>
 8002988:	2300      	movs	r3, #0
 800298a:	697a      	ldr	r2, [r7, #20]
 800298c:	f002 0203 	and.w	r2, r2, #3
 8002990:	0092      	lsls	r2, r2, #2
 8002992:	4093      	lsls	r3, r2
 8002994:	693a      	ldr	r2, [r7, #16]
 8002996:	4313      	orrs	r3, r2
 8002998:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800299a:	4937      	ldr	r1, [pc, #220]	; (8002a78 <HAL_GPIO_Init+0x2d0>)
 800299c:	697b      	ldr	r3, [r7, #20]
 800299e:	089b      	lsrs	r3, r3, #2
 80029a0:	3302      	adds	r3, #2
 80029a2:	693a      	ldr	r2, [r7, #16]
 80029a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80029a8:	4b37      	ldr	r3, [pc, #220]	; (8002a88 <HAL_GPIO_Init+0x2e0>)
 80029aa:	689b      	ldr	r3, [r3, #8]
 80029ac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	43db      	mvns	r3, r3
 80029b2:	693a      	ldr	r2, [r7, #16]
 80029b4:	4013      	ands	r3, r2
 80029b6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	685b      	ldr	r3, [r3, #4]
 80029bc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d003      	beq.n	80029cc <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 80029c4:	693a      	ldr	r2, [r7, #16]
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	4313      	orrs	r3, r2
 80029ca:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80029cc:	4a2e      	ldr	r2, [pc, #184]	; (8002a88 <HAL_GPIO_Init+0x2e0>)
 80029ce:	693b      	ldr	r3, [r7, #16]
 80029d0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80029d2:	4b2d      	ldr	r3, [pc, #180]	; (8002a88 <HAL_GPIO_Init+0x2e0>)
 80029d4:	68db      	ldr	r3, [r3, #12]
 80029d6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	43db      	mvns	r3, r3
 80029dc:	693a      	ldr	r2, [r7, #16]
 80029de:	4013      	ands	r3, r2
 80029e0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	685b      	ldr	r3, [r3, #4]
 80029e6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d003      	beq.n	80029f6 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 80029ee:	693a      	ldr	r2, [r7, #16]
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	4313      	orrs	r3, r2
 80029f4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80029f6:	4a24      	ldr	r2, [pc, #144]	; (8002a88 <HAL_GPIO_Init+0x2e0>)
 80029f8:	693b      	ldr	r3, [r7, #16]
 80029fa:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80029fc:	4b22      	ldr	r3, [pc, #136]	; (8002a88 <HAL_GPIO_Init+0x2e0>)
 80029fe:	685b      	ldr	r3, [r3, #4]
 8002a00:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	43db      	mvns	r3, r3
 8002a06:	693a      	ldr	r2, [r7, #16]
 8002a08:	4013      	ands	r3, r2
 8002a0a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	685b      	ldr	r3, [r3, #4]
 8002a10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d003      	beq.n	8002a20 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8002a18:	693a      	ldr	r2, [r7, #16]
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	4313      	orrs	r3, r2
 8002a1e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002a20:	4a19      	ldr	r2, [pc, #100]	; (8002a88 <HAL_GPIO_Init+0x2e0>)
 8002a22:	693b      	ldr	r3, [r7, #16]
 8002a24:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002a26:	4b18      	ldr	r3, [pc, #96]	; (8002a88 <HAL_GPIO_Init+0x2e0>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	43db      	mvns	r3, r3
 8002a30:	693a      	ldr	r2, [r7, #16]
 8002a32:	4013      	ands	r3, r2
 8002a34:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002a36:	683b      	ldr	r3, [r7, #0]
 8002a38:	685b      	ldr	r3, [r3, #4]
 8002a3a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d003      	beq.n	8002a4a <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8002a42:	693a      	ldr	r2, [r7, #16]
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	4313      	orrs	r3, r2
 8002a48:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002a4a:	4a0f      	ldr	r2, [pc, #60]	; (8002a88 <HAL_GPIO_Init+0x2e0>)
 8002a4c:	693b      	ldr	r3, [r7, #16]
 8002a4e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002a50:	697b      	ldr	r3, [r7, #20]
 8002a52:	3301      	adds	r3, #1
 8002a54:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	681a      	ldr	r2, [r3, #0]
 8002a5a:	697b      	ldr	r3, [r7, #20]
 8002a5c:	fa22 f303 	lsr.w	r3, r2, r3
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	f47f aea9 	bne.w	80027b8 <HAL_GPIO_Init+0x10>
  }
}
 8002a66:	bf00      	nop
 8002a68:	bf00      	nop
 8002a6a:	371c      	adds	r7, #28
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a72:	4770      	bx	lr
 8002a74:	40021000 	.word	0x40021000
 8002a78:	40010000 	.word	0x40010000
 8002a7c:	48000400 	.word	0x48000400
 8002a80:	48000800 	.word	0x48000800
 8002a84:	48000c00 	.word	0x48000c00
 8002a88:	40010400 	.word	0x40010400

08002a8c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a8c:	b480      	push	{r7}
 8002a8e:	b083      	sub	sp, #12
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
 8002a94:	460b      	mov	r3, r1
 8002a96:	807b      	strh	r3, [r7, #2]
 8002a98:	4613      	mov	r3, r2
 8002a9a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002a9c:	787b      	ldrb	r3, [r7, #1]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d003      	beq.n	8002aaa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002aa2:	887a      	ldrh	r2, [r7, #2]
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002aa8:	e002      	b.n	8002ab0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002aaa:	887a      	ldrh	r2, [r7, #2]
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002ab0:	bf00      	nop
 8002ab2:	370c      	adds	r7, #12
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aba:	4770      	bx	lr

08002abc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b082      	sub	sp, #8
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	4603      	mov	r3, r0
 8002ac4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002ac6:	4b08      	ldr	r3, [pc, #32]	; (8002ae8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002ac8:	695a      	ldr	r2, [r3, #20]
 8002aca:	88fb      	ldrh	r3, [r7, #6]
 8002acc:	4013      	ands	r3, r2
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d006      	beq.n	8002ae0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002ad2:	4a05      	ldr	r2, [pc, #20]	; (8002ae8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002ad4:	88fb      	ldrh	r3, [r7, #6]
 8002ad6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002ad8:	88fb      	ldrh	r3, [r7, #6]
 8002ada:	4618      	mov	r0, r3
 8002adc:	f000 f806 	bl	8002aec <HAL_GPIO_EXTI_Callback>
  }
}
 8002ae0:	bf00      	nop
 8002ae2:	3708      	adds	r7, #8
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	bd80      	pop	{r7, pc}
 8002ae8:	40010400 	.word	0x40010400

08002aec <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002aec:	b480      	push	{r7}
 8002aee:	b083      	sub	sp, #12
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	4603      	mov	r3, r0
 8002af4:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002af6:	bf00      	nop
 8002af8:	370c      	adds	r7, #12
 8002afa:	46bd      	mov	sp, r7
 8002afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b00:	4770      	bx	lr

08002b02 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002b02:	b580      	push	{r7, lr}
 8002b04:	b082      	sub	sp, #8
 8002b06:	af00      	add	r7, sp, #0
 8002b08:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d101      	bne.n	8002b14 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002b10:	2301      	movs	r3, #1
 8002b12:	e081      	b.n	8002c18 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b1a:	b2db      	uxtb	r3, r3
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d106      	bne.n	8002b2e <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2200      	movs	r2, #0
 8002b24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002b28:	6878      	ldr	r0, [r7, #4]
 8002b2a:	f7ff fa2b 	bl	8001f84 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	2224      	movs	r2, #36	; 0x24
 8002b32:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	681a      	ldr	r2, [r3, #0]
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f022 0201 	bic.w	r2, r2, #1
 8002b44:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	685a      	ldr	r2, [r3, #4]
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002b52:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	689a      	ldr	r2, [r3, #8]
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002b62:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	68db      	ldr	r3, [r3, #12]
 8002b68:	2b01      	cmp	r3, #1
 8002b6a:	d107      	bne.n	8002b7c <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	689a      	ldr	r2, [r3, #8]
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002b78:	609a      	str	r2, [r3, #8]
 8002b7a:	e006      	b.n	8002b8a <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	689a      	ldr	r2, [r3, #8]
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002b88:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	68db      	ldr	r3, [r3, #12]
 8002b8e:	2b02      	cmp	r3, #2
 8002b90:	d104      	bne.n	8002b9c <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002b9a:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	685b      	ldr	r3, [r3, #4]
 8002ba2:	687a      	ldr	r2, [r7, #4]
 8002ba4:	6812      	ldr	r2, [r2, #0]
 8002ba6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002baa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002bae:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	68da      	ldr	r2, [r3, #12]
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002bbe:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	691a      	ldr	r2, [r3, #16]
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	695b      	ldr	r3, [r3, #20]
 8002bc8:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	699b      	ldr	r3, [r3, #24]
 8002bd0:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	430a      	orrs	r2, r1
 8002bd8:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	69d9      	ldr	r1, [r3, #28]
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6a1a      	ldr	r2, [r3, #32]
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	430a      	orrs	r2, r1
 8002be8:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	681a      	ldr	r2, [r3, #0]
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f042 0201 	orr.w	r2, r2, #1
 8002bf8:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	2220      	movs	r2, #32
 8002c04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	2200      	movs	r2, #0
 8002c12:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002c16:	2300      	movs	r3, #0
}
 8002c18:	4618      	mov	r0, r3
 8002c1a:	3708      	adds	r7, #8
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	bd80      	pop	{r7, pc}

08002c20 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b088      	sub	sp, #32
 8002c24:	af02      	add	r7, sp, #8
 8002c26:	60f8      	str	r0, [r7, #12]
 8002c28:	607a      	str	r2, [r7, #4]
 8002c2a:	461a      	mov	r2, r3
 8002c2c:	460b      	mov	r3, r1
 8002c2e:	817b      	strh	r3, [r7, #10]
 8002c30:	4613      	mov	r3, r2
 8002c32:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c3a:	b2db      	uxtb	r3, r3
 8002c3c:	2b20      	cmp	r3, #32
 8002c3e:	f040 80da 	bne.w	8002df6 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002c48:	2b01      	cmp	r3, #1
 8002c4a:	d101      	bne.n	8002c50 <HAL_I2C_Master_Transmit+0x30>
 8002c4c:	2302      	movs	r3, #2
 8002c4e:	e0d3      	b.n	8002df8 <HAL_I2C_Master_Transmit+0x1d8>
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	2201      	movs	r2, #1
 8002c54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002c58:	f7ff fc64 	bl	8002524 <HAL_GetTick>
 8002c5c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002c5e:	697b      	ldr	r3, [r7, #20]
 8002c60:	9300      	str	r3, [sp, #0]
 8002c62:	2319      	movs	r3, #25
 8002c64:	2201      	movs	r2, #1
 8002c66:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002c6a:	68f8      	ldr	r0, [r7, #12]
 8002c6c:	f000 fcbc 	bl	80035e8 <I2C_WaitOnFlagUntilTimeout>
 8002c70:	4603      	mov	r3, r0
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d001      	beq.n	8002c7a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8002c76:	2301      	movs	r3, #1
 8002c78:	e0be      	b.n	8002df8 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	2221      	movs	r2, #33	; 0x21
 8002c7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	2210      	movs	r2, #16
 8002c86:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	687a      	ldr	r2, [r7, #4]
 8002c94:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	893a      	ldrh	r2, [r7, #8]
 8002c9a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ca6:	b29b      	uxth	r3, r3
 8002ca8:	2bff      	cmp	r3, #255	; 0xff
 8002caa:	d90e      	bls.n	8002cca <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	22ff      	movs	r2, #255	; 0xff
 8002cb0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cb6:	b2da      	uxtb	r2, r3
 8002cb8:	8979      	ldrh	r1, [r7, #10]
 8002cba:	4b51      	ldr	r3, [pc, #324]	; (8002e00 <HAL_I2C_Master_Transmit+0x1e0>)
 8002cbc:	9300      	str	r3, [sp, #0]
 8002cbe:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002cc2:	68f8      	ldr	r0, [r7, #12]
 8002cc4:	f000 fecc 	bl	8003a60 <I2C_TransferConfig>
 8002cc8:	e06c      	b.n	8002da4 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cce:	b29a      	uxth	r2, r3
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cd8:	b2da      	uxtb	r2, r3
 8002cda:	8979      	ldrh	r1, [r7, #10]
 8002cdc:	4b48      	ldr	r3, [pc, #288]	; (8002e00 <HAL_I2C_Master_Transmit+0x1e0>)
 8002cde:	9300      	str	r3, [sp, #0]
 8002ce0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002ce4:	68f8      	ldr	r0, [r7, #12]
 8002ce6:	f000 febb 	bl	8003a60 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8002cea:	e05b      	b.n	8002da4 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002cec:	697a      	ldr	r2, [r7, #20]
 8002cee:	6a39      	ldr	r1, [r7, #32]
 8002cf0:	68f8      	ldr	r0, [r7, #12]
 8002cf2:	f000 fcc8 	bl	8003686 <I2C_WaitOnTXISFlagUntilTimeout>
 8002cf6:	4603      	mov	r3, r0
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d001      	beq.n	8002d00 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8002cfc:	2301      	movs	r3, #1
 8002cfe:	e07b      	b.n	8002df8 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d04:	781a      	ldrb	r2, [r3, #0]
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d10:	1c5a      	adds	r2, r3, #1
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d1a:	b29b      	uxth	r3, r3
 8002d1c:	3b01      	subs	r3, #1
 8002d1e:	b29a      	uxth	r2, r3
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d28:	3b01      	subs	r3, #1
 8002d2a:	b29a      	uxth	r2, r3
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d34:	b29b      	uxth	r3, r3
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d034      	beq.n	8002da4 <HAL_I2C_Master_Transmit+0x184>
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d130      	bne.n	8002da4 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002d42:	697b      	ldr	r3, [r7, #20]
 8002d44:	9300      	str	r3, [sp, #0]
 8002d46:	6a3b      	ldr	r3, [r7, #32]
 8002d48:	2200      	movs	r2, #0
 8002d4a:	2180      	movs	r1, #128	; 0x80
 8002d4c:	68f8      	ldr	r0, [r7, #12]
 8002d4e:	f000 fc4b 	bl	80035e8 <I2C_WaitOnFlagUntilTimeout>
 8002d52:	4603      	mov	r3, r0
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d001      	beq.n	8002d5c <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8002d58:	2301      	movs	r3, #1
 8002d5a:	e04d      	b.n	8002df8 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d60:	b29b      	uxth	r3, r3
 8002d62:	2bff      	cmp	r3, #255	; 0xff
 8002d64:	d90e      	bls.n	8002d84 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	22ff      	movs	r2, #255	; 0xff
 8002d6a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d70:	b2da      	uxtb	r2, r3
 8002d72:	8979      	ldrh	r1, [r7, #10]
 8002d74:	2300      	movs	r3, #0
 8002d76:	9300      	str	r3, [sp, #0]
 8002d78:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002d7c:	68f8      	ldr	r0, [r7, #12]
 8002d7e:	f000 fe6f 	bl	8003a60 <I2C_TransferConfig>
 8002d82:	e00f      	b.n	8002da4 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d88:	b29a      	uxth	r2, r3
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d92:	b2da      	uxtb	r2, r3
 8002d94:	8979      	ldrh	r1, [r7, #10]
 8002d96:	2300      	movs	r3, #0
 8002d98:	9300      	str	r3, [sp, #0]
 8002d9a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002d9e:	68f8      	ldr	r0, [r7, #12]
 8002da0:	f000 fe5e 	bl	8003a60 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002da8:	b29b      	uxth	r3, r3
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d19e      	bne.n	8002cec <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002dae:	697a      	ldr	r2, [r7, #20]
 8002db0:	6a39      	ldr	r1, [r7, #32]
 8002db2:	68f8      	ldr	r0, [r7, #12]
 8002db4:	f000 fcae 	bl	8003714 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002db8:	4603      	mov	r3, r0
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d001      	beq.n	8002dc2 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8002dbe:	2301      	movs	r3, #1
 8002dc0:	e01a      	b.n	8002df8 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	2220      	movs	r2, #32
 8002dc8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	6859      	ldr	r1, [r3, #4]
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	681a      	ldr	r2, [r3, #0]
 8002dd4:	4b0b      	ldr	r3, [pc, #44]	; (8002e04 <HAL_I2C_Master_Transmit+0x1e4>)
 8002dd6:	400b      	ands	r3, r1
 8002dd8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	2220      	movs	r2, #32
 8002dde:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	2200      	movs	r2, #0
 8002de6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	2200      	movs	r2, #0
 8002dee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002df2:	2300      	movs	r3, #0
 8002df4:	e000      	b.n	8002df8 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8002df6:	2302      	movs	r3, #2
  }
}
 8002df8:	4618      	mov	r0, r3
 8002dfa:	3718      	adds	r7, #24
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	bd80      	pop	{r7, pc}
 8002e00:	80002000 	.word	0x80002000
 8002e04:	fe00e800 	.word	0xfe00e800

08002e08 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b088      	sub	sp, #32
 8002e0c:	af02      	add	r7, sp, #8
 8002e0e:	60f8      	str	r0, [r7, #12]
 8002e10:	607a      	str	r2, [r7, #4]
 8002e12:	461a      	mov	r2, r3
 8002e14:	460b      	mov	r3, r1
 8002e16:	817b      	strh	r3, [r7, #10]
 8002e18:	4613      	mov	r3, r2
 8002e1a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e22:	b2db      	uxtb	r3, r3
 8002e24:	2b20      	cmp	r3, #32
 8002e26:	f040 80db 	bne.w	8002fe0 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002e30:	2b01      	cmp	r3, #1
 8002e32:	d101      	bne.n	8002e38 <HAL_I2C_Master_Receive+0x30>
 8002e34:	2302      	movs	r3, #2
 8002e36:	e0d4      	b.n	8002fe2 <HAL_I2C_Master_Receive+0x1da>
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	2201      	movs	r2, #1
 8002e3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002e40:	f7ff fb70 	bl	8002524 <HAL_GetTick>
 8002e44:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002e46:	697b      	ldr	r3, [r7, #20]
 8002e48:	9300      	str	r3, [sp, #0]
 8002e4a:	2319      	movs	r3, #25
 8002e4c:	2201      	movs	r2, #1
 8002e4e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002e52:	68f8      	ldr	r0, [r7, #12]
 8002e54:	f000 fbc8 	bl	80035e8 <I2C_WaitOnFlagUntilTimeout>
 8002e58:	4603      	mov	r3, r0
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d001      	beq.n	8002e62 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8002e5e:	2301      	movs	r3, #1
 8002e60:	e0bf      	b.n	8002fe2 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	2222      	movs	r2, #34	; 0x22
 8002e66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	2210      	movs	r2, #16
 8002e6e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	2200      	movs	r2, #0
 8002e76:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	687a      	ldr	r2, [r7, #4]
 8002e7c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	893a      	ldrh	r2, [r7, #8]
 8002e82:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	2200      	movs	r2, #0
 8002e88:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e8e:	b29b      	uxth	r3, r3
 8002e90:	2bff      	cmp	r3, #255	; 0xff
 8002e92:	d90e      	bls.n	8002eb2 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	22ff      	movs	r2, #255	; 0xff
 8002e98:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e9e:	b2da      	uxtb	r2, r3
 8002ea0:	8979      	ldrh	r1, [r7, #10]
 8002ea2:	4b52      	ldr	r3, [pc, #328]	; (8002fec <HAL_I2C_Master_Receive+0x1e4>)
 8002ea4:	9300      	str	r3, [sp, #0]
 8002ea6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002eaa:	68f8      	ldr	r0, [r7, #12]
 8002eac:	f000 fdd8 	bl	8003a60 <I2C_TransferConfig>
 8002eb0:	e06d      	b.n	8002f8e <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002eb6:	b29a      	uxth	r2, r3
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ec0:	b2da      	uxtb	r2, r3
 8002ec2:	8979      	ldrh	r1, [r7, #10]
 8002ec4:	4b49      	ldr	r3, [pc, #292]	; (8002fec <HAL_I2C_Master_Receive+0x1e4>)
 8002ec6:	9300      	str	r3, [sp, #0]
 8002ec8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002ecc:	68f8      	ldr	r0, [r7, #12]
 8002ece:	f000 fdc7 	bl	8003a60 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8002ed2:	e05c      	b.n	8002f8e <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ed4:	697a      	ldr	r2, [r7, #20]
 8002ed6:	6a39      	ldr	r1, [r7, #32]
 8002ed8:	68f8      	ldr	r0, [r7, #12]
 8002eda:	f000 fc5f 	bl	800379c <I2C_WaitOnRXNEFlagUntilTimeout>
 8002ede:	4603      	mov	r3, r0
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d001      	beq.n	8002ee8 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8002ee4:	2301      	movs	r3, #1
 8002ee6:	e07c      	b.n	8002fe2 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ef2:	b2d2      	uxtb	r2, r2
 8002ef4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002efa:	1c5a      	adds	r2, r3, #1
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f04:	3b01      	subs	r3, #1
 8002f06:	b29a      	uxth	r2, r3
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f10:	b29b      	uxth	r3, r3
 8002f12:	3b01      	subs	r3, #1
 8002f14:	b29a      	uxth	r2, r3
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f1e:	b29b      	uxth	r3, r3
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d034      	beq.n	8002f8e <HAL_I2C_Master_Receive+0x186>
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d130      	bne.n	8002f8e <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002f2c:	697b      	ldr	r3, [r7, #20]
 8002f2e:	9300      	str	r3, [sp, #0]
 8002f30:	6a3b      	ldr	r3, [r7, #32]
 8002f32:	2200      	movs	r2, #0
 8002f34:	2180      	movs	r1, #128	; 0x80
 8002f36:	68f8      	ldr	r0, [r7, #12]
 8002f38:	f000 fb56 	bl	80035e8 <I2C_WaitOnFlagUntilTimeout>
 8002f3c:	4603      	mov	r3, r0
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d001      	beq.n	8002f46 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8002f42:	2301      	movs	r3, #1
 8002f44:	e04d      	b.n	8002fe2 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f4a:	b29b      	uxth	r3, r3
 8002f4c:	2bff      	cmp	r3, #255	; 0xff
 8002f4e:	d90e      	bls.n	8002f6e <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	22ff      	movs	r2, #255	; 0xff
 8002f54:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f5a:	b2da      	uxtb	r2, r3
 8002f5c:	8979      	ldrh	r1, [r7, #10]
 8002f5e:	2300      	movs	r3, #0
 8002f60:	9300      	str	r3, [sp, #0]
 8002f62:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002f66:	68f8      	ldr	r0, [r7, #12]
 8002f68:	f000 fd7a 	bl	8003a60 <I2C_TransferConfig>
 8002f6c:	e00f      	b.n	8002f8e <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f72:	b29a      	uxth	r2, r3
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f7c:	b2da      	uxtb	r2, r3
 8002f7e:	8979      	ldrh	r1, [r7, #10]
 8002f80:	2300      	movs	r3, #0
 8002f82:	9300      	str	r3, [sp, #0]
 8002f84:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002f88:	68f8      	ldr	r0, [r7, #12]
 8002f8a:	f000 fd69 	bl	8003a60 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f92:	b29b      	uxth	r3, r3
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d19d      	bne.n	8002ed4 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f98:	697a      	ldr	r2, [r7, #20]
 8002f9a:	6a39      	ldr	r1, [r7, #32]
 8002f9c:	68f8      	ldr	r0, [r7, #12]
 8002f9e:	f000 fbb9 	bl	8003714 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002fa2:	4603      	mov	r3, r0
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d001      	beq.n	8002fac <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8002fa8:	2301      	movs	r3, #1
 8002faa:	e01a      	b.n	8002fe2 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	2220      	movs	r2, #32
 8002fb2:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	6859      	ldr	r1, [r3, #4]
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	681a      	ldr	r2, [r3, #0]
 8002fbe:	4b0c      	ldr	r3, [pc, #48]	; (8002ff0 <HAL_I2C_Master_Receive+0x1e8>)
 8002fc0:	400b      	ands	r3, r1
 8002fc2:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	2220      	movs	r2, #32
 8002fc8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	2200      	movs	r2, #0
 8002fd0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002fdc:	2300      	movs	r3, #0
 8002fde:	e000      	b.n	8002fe2 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8002fe0:	2302      	movs	r3, #2
  }
}
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	3718      	adds	r7, #24
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	bd80      	pop	{r7, pc}
 8002fea:	bf00      	nop
 8002fec:	80002400 	.word	0x80002400
 8002ff0:	fe00e800 	.word	0xfe00e800

08002ff4 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b088      	sub	sp, #32
 8002ff8:	af02      	add	r7, sp, #8
 8002ffa:	60f8      	str	r0, [r7, #12]
 8002ffc:	4608      	mov	r0, r1
 8002ffe:	4611      	mov	r1, r2
 8003000:	461a      	mov	r2, r3
 8003002:	4603      	mov	r3, r0
 8003004:	817b      	strh	r3, [r7, #10]
 8003006:	460b      	mov	r3, r1
 8003008:	813b      	strh	r3, [r7, #8]
 800300a:	4613      	mov	r3, r2
 800300c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003014:	b2db      	uxtb	r3, r3
 8003016:	2b20      	cmp	r3, #32
 8003018:	f040 80f9 	bne.w	800320e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800301c:	6a3b      	ldr	r3, [r7, #32]
 800301e:	2b00      	cmp	r3, #0
 8003020:	d002      	beq.n	8003028 <HAL_I2C_Mem_Write+0x34>
 8003022:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003024:	2b00      	cmp	r3, #0
 8003026:	d105      	bne.n	8003034 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800302e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003030:	2301      	movs	r3, #1
 8003032:	e0ed      	b.n	8003210 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800303a:	2b01      	cmp	r3, #1
 800303c:	d101      	bne.n	8003042 <HAL_I2C_Mem_Write+0x4e>
 800303e:	2302      	movs	r3, #2
 8003040:	e0e6      	b.n	8003210 <HAL_I2C_Mem_Write+0x21c>
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	2201      	movs	r2, #1
 8003046:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800304a:	f7ff fa6b 	bl	8002524 <HAL_GetTick>
 800304e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003050:	697b      	ldr	r3, [r7, #20]
 8003052:	9300      	str	r3, [sp, #0]
 8003054:	2319      	movs	r3, #25
 8003056:	2201      	movs	r2, #1
 8003058:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800305c:	68f8      	ldr	r0, [r7, #12]
 800305e:	f000 fac3 	bl	80035e8 <I2C_WaitOnFlagUntilTimeout>
 8003062:	4603      	mov	r3, r0
 8003064:	2b00      	cmp	r3, #0
 8003066:	d001      	beq.n	800306c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8003068:	2301      	movs	r3, #1
 800306a:	e0d1      	b.n	8003210 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	2221      	movs	r2, #33	; 0x21
 8003070:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	2240      	movs	r2, #64	; 0x40
 8003078:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	2200      	movs	r2, #0
 8003080:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	6a3a      	ldr	r2, [r7, #32]
 8003086:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800308c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	2200      	movs	r2, #0
 8003092:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003094:	88f8      	ldrh	r0, [r7, #6]
 8003096:	893a      	ldrh	r2, [r7, #8]
 8003098:	8979      	ldrh	r1, [r7, #10]
 800309a:	697b      	ldr	r3, [r7, #20]
 800309c:	9301      	str	r3, [sp, #4]
 800309e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030a0:	9300      	str	r3, [sp, #0]
 80030a2:	4603      	mov	r3, r0
 80030a4:	68f8      	ldr	r0, [r7, #12]
 80030a6:	f000 f9d3 	bl	8003450 <I2C_RequestMemoryWrite>
 80030aa:	4603      	mov	r3, r0
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d005      	beq.n	80030bc <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	2200      	movs	r2, #0
 80030b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80030b8:	2301      	movs	r3, #1
 80030ba:	e0a9      	b.n	8003210 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030c0:	b29b      	uxth	r3, r3
 80030c2:	2bff      	cmp	r3, #255	; 0xff
 80030c4:	d90e      	bls.n	80030e4 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	22ff      	movs	r2, #255	; 0xff
 80030ca:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030d0:	b2da      	uxtb	r2, r3
 80030d2:	8979      	ldrh	r1, [r7, #10]
 80030d4:	2300      	movs	r3, #0
 80030d6:	9300      	str	r3, [sp, #0]
 80030d8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80030dc:	68f8      	ldr	r0, [r7, #12]
 80030de:	f000 fcbf 	bl	8003a60 <I2C_TransferConfig>
 80030e2:	e00f      	b.n	8003104 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030e8:	b29a      	uxth	r2, r3
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030f2:	b2da      	uxtb	r2, r3
 80030f4:	8979      	ldrh	r1, [r7, #10]
 80030f6:	2300      	movs	r3, #0
 80030f8:	9300      	str	r3, [sp, #0]
 80030fa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80030fe:	68f8      	ldr	r0, [r7, #12]
 8003100:	f000 fcae 	bl	8003a60 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003104:	697a      	ldr	r2, [r7, #20]
 8003106:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003108:	68f8      	ldr	r0, [r7, #12]
 800310a:	f000 fabc 	bl	8003686 <I2C_WaitOnTXISFlagUntilTimeout>
 800310e:	4603      	mov	r3, r0
 8003110:	2b00      	cmp	r3, #0
 8003112:	d001      	beq.n	8003118 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8003114:	2301      	movs	r3, #1
 8003116:	e07b      	b.n	8003210 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800311c:	781a      	ldrb	r2, [r3, #0]
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003128:	1c5a      	adds	r2, r3, #1
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003132:	b29b      	uxth	r3, r3
 8003134:	3b01      	subs	r3, #1
 8003136:	b29a      	uxth	r2, r3
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003140:	3b01      	subs	r3, #1
 8003142:	b29a      	uxth	r2, r3
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800314c:	b29b      	uxth	r3, r3
 800314e:	2b00      	cmp	r3, #0
 8003150:	d034      	beq.n	80031bc <HAL_I2C_Mem_Write+0x1c8>
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003156:	2b00      	cmp	r3, #0
 8003158:	d130      	bne.n	80031bc <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800315a:	697b      	ldr	r3, [r7, #20]
 800315c:	9300      	str	r3, [sp, #0]
 800315e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003160:	2200      	movs	r2, #0
 8003162:	2180      	movs	r1, #128	; 0x80
 8003164:	68f8      	ldr	r0, [r7, #12]
 8003166:	f000 fa3f 	bl	80035e8 <I2C_WaitOnFlagUntilTimeout>
 800316a:	4603      	mov	r3, r0
 800316c:	2b00      	cmp	r3, #0
 800316e:	d001      	beq.n	8003174 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8003170:	2301      	movs	r3, #1
 8003172:	e04d      	b.n	8003210 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003178:	b29b      	uxth	r3, r3
 800317a:	2bff      	cmp	r3, #255	; 0xff
 800317c:	d90e      	bls.n	800319c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	22ff      	movs	r2, #255	; 0xff
 8003182:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003188:	b2da      	uxtb	r2, r3
 800318a:	8979      	ldrh	r1, [r7, #10]
 800318c:	2300      	movs	r3, #0
 800318e:	9300      	str	r3, [sp, #0]
 8003190:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003194:	68f8      	ldr	r0, [r7, #12]
 8003196:	f000 fc63 	bl	8003a60 <I2C_TransferConfig>
 800319a:	e00f      	b.n	80031bc <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031a0:	b29a      	uxth	r2, r3
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031aa:	b2da      	uxtb	r2, r3
 80031ac:	8979      	ldrh	r1, [r7, #10]
 80031ae:	2300      	movs	r3, #0
 80031b0:	9300      	str	r3, [sp, #0]
 80031b2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80031b6:	68f8      	ldr	r0, [r7, #12]
 80031b8:	f000 fc52 	bl	8003a60 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031c0:	b29b      	uxth	r3, r3
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d19e      	bne.n	8003104 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80031c6:	697a      	ldr	r2, [r7, #20]
 80031c8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80031ca:	68f8      	ldr	r0, [r7, #12]
 80031cc:	f000 faa2 	bl	8003714 <I2C_WaitOnSTOPFlagUntilTimeout>
 80031d0:	4603      	mov	r3, r0
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d001      	beq.n	80031da <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80031d6:	2301      	movs	r3, #1
 80031d8:	e01a      	b.n	8003210 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	2220      	movs	r2, #32
 80031e0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	6859      	ldr	r1, [r3, #4]
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	681a      	ldr	r2, [r3, #0]
 80031ec:	4b0a      	ldr	r3, [pc, #40]	; (8003218 <HAL_I2C_Mem_Write+0x224>)
 80031ee:	400b      	ands	r3, r1
 80031f0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	2220      	movs	r2, #32
 80031f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	2200      	movs	r2, #0
 80031fe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	2200      	movs	r2, #0
 8003206:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800320a:	2300      	movs	r3, #0
 800320c:	e000      	b.n	8003210 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800320e:	2302      	movs	r3, #2
  }
}
 8003210:	4618      	mov	r0, r3
 8003212:	3718      	adds	r7, #24
 8003214:	46bd      	mov	sp, r7
 8003216:	bd80      	pop	{r7, pc}
 8003218:	fe00e800 	.word	0xfe00e800

0800321c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800321c:	b580      	push	{r7, lr}
 800321e:	b088      	sub	sp, #32
 8003220:	af02      	add	r7, sp, #8
 8003222:	60f8      	str	r0, [r7, #12]
 8003224:	4608      	mov	r0, r1
 8003226:	4611      	mov	r1, r2
 8003228:	461a      	mov	r2, r3
 800322a:	4603      	mov	r3, r0
 800322c:	817b      	strh	r3, [r7, #10]
 800322e:	460b      	mov	r3, r1
 8003230:	813b      	strh	r3, [r7, #8]
 8003232:	4613      	mov	r3, r2
 8003234:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800323c:	b2db      	uxtb	r3, r3
 800323e:	2b20      	cmp	r3, #32
 8003240:	f040 80fd 	bne.w	800343e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8003244:	6a3b      	ldr	r3, [r7, #32]
 8003246:	2b00      	cmp	r3, #0
 8003248:	d002      	beq.n	8003250 <HAL_I2C_Mem_Read+0x34>
 800324a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800324c:	2b00      	cmp	r3, #0
 800324e:	d105      	bne.n	800325c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003256:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003258:	2301      	movs	r3, #1
 800325a:	e0f1      	b.n	8003440 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003262:	2b01      	cmp	r3, #1
 8003264:	d101      	bne.n	800326a <HAL_I2C_Mem_Read+0x4e>
 8003266:	2302      	movs	r3, #2
 8003268:	e0ea      	b.n	8003440 <HAL_I2C_Mem_Read+0x224>
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	2201      	movs	r2, #1
 800326e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003272:	f7ff f957 	bl	8002524 <HAL_GetTick>
 8003276:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003278:	697b      	ldr	r3, [r7, #20]
 800327a:	9300      	str	r3, [sp, #0]
 800327c:	2319      	movs	r3, #25
 800327e:	2201      	movs	r2, #1
 8003280:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003284:	68f8      	ldr	r0, [r7, #12]
 8003286:	f000 f9af 	bl	80035e8 <I2C_WaitOnFlagUntilTimeout>
 800328a:	4603      	mov	r3, r0
 800328c:	2b00      	cmp	r3, #0
 800328e:	d001      	beq.n	8003294 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8003290:	2301      	movs	r3, #1
 8003292:	e0d5      	b.n	8003440 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	2222      	movs	r2, #34	; 0x22
 8003298:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	2240      	movs	r2, #64	; 0x40
 80032a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	2200      	movs	r2, #0
 80032a8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	6a3a      	ldr	r2, [r7, #32]
 80032ae:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80032b4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	2200      	movs	r2, #0
 80032ba:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80032bc:	88f8      	ldrh	r0, [r7, #6]
 80032be:	893a      	ldrh	r2, [r7, #8]
 80032c0:	8979      	ldrh	r1, [r7, #10]
 80032c2:	697b      	ldr	r3, [r7, #20]
 80032c4:	9301      	str	r3, [sp, #4]
 80032c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032c8:	9300      	str	r3, [sp, #0]
 80032ca:	4603      	mov	r3, r0
 80032cc:	68f8      	ldr	r0, [r7, #12]
 80032ce:	f000 f913 	bl	80034f8 <I2C_RequestMemoryRead>
 80032d2:	4603      	mov	r3, r0
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d005      	beq.n	80032e4 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	2200      	movs	r2, #0
 80032dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80032e0:	2301      	movs	r3, #1
 80032e2:	e0ad      	b.n	8003440 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032e8:	b29b      	uxth	r3, r3
 80032ea:	2bff      	cmp	r3, #255	; 0xff
 80032ec:	d90e      	bls.n	800330c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	22ff      	movs	r2, #255	; 0xff
 80032f2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032f8:	b2da      	uxtb	r2, r3
 80032fa:	8979      	ldrh	r1, [r7, #10]
 80032fc:	4b52      	ldr	r3, [pc, #328]	; (8003448 <HAL_I2C_Mem_Read+0x22c>)
 80032fe:	9300      	str	r3, [sp, #0]
 8003300:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003304:	68f8      	ldr	r0, [r7, #12]
 8003306:	f000 fbab 	bl	8003a60 <I2C_TransferConfig>
 800330a:	e00f      	b.n	800332c <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003310:	b29a      	uxth	r2, r3
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800331a:	b2da      	uxtb	r2, r3
 800331c:	8979      	ldrh	r1, [r7, #10]
 800331e:	4b4a      	ldr	r3, [pc, #296]	; (8003448 <HAL_I2C_Mem_Read+0x22c>)
 8003320:	9300      	str	r3, [sp, #0]
 8003322:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003326:	68f8      	ldr	r0, [r7, #12]
 8003328:	f000 fb9a 	bl	8003a60 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800332c:	697b      	ldr	r3, [r7, #20]
 800332e:	9300      	str	r3, [sp, #0]
 8003330:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003332:	2200      	movs	r2, #0
 8003334:	2104      	movs	r1, #4
 8003336:	68f8      	ldr	r0, [r7, #12]
 8003338:	f000 f956 	bl	80035e8 <I2C_WaitOnFlagUntilTimeout>
 800333c:	4603      	mov	r3, r0
 800333e:	2b00      	cmp	r3, #0
 8003340:	d001      	beq.n	8003346 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8003342:	2301      	movs	r3, #1
 8003344:	e07c      	b.n	8003440 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003350:	b2d2      	uxtb	r2, r2
 8003352:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003358:	1c5a      	adds	r2, r3, #1
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003362:	3b01      	subs	r3, #1
 8003364:	b29a      	uxth	r2, r3
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800336e:	b29b      	uxth	r3, r3
 8003370:	3b01      	subs	r3, #1
 8003372:	b29a      	uxth	r2, r3
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800337c:	b29b      	uxth	r3, r3
 800337e:	2b00      	cmp	r3, #0
 8003380:	d034      	beq.n	80033ec <HAL_I2C_Mem_Read+0x1d0>
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003386:	2b00      	cmp	r3, #0
 8003388:	d130      	bne.n	80033ec <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800338a:	697b      	ldr	r3, [r7, #20]
 800338c:	9300      	str	r3, [sp, #0]
 800338e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003390:	2200      	movs	r2, #0
 8003392:	2180      	movs	r1, #128	; 0x80
 8003394:	68f8      	ldr	r0, [r7, #12]
 8003396:	f000 f927 	bl	80035e8 <I2C_WaitOnFlagUntilTimeout>
 800339a:	4603      	mov	r3, r0
 800339c:	2b00      	cmp	r3, #0
 800339e:	d001      	beq.n	80033a4 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80033a0:	2301      	movs	r3, #1
 80033a2:	e04d      	b.n	8003440 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033a8:	b29b      	uxth	r3, r3
 80033aa:	2bff      	cmp	r3, #255	; 0xff
 80033ac:	d90e      	bls.n	80033cc <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	22ff      	movs	r2, #255	; 0xff
 80033b2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033b8:	b2da      	uxtb	r2, r3
 80033ba:	8979      	ldrh	r1, [r7, #10]
 80033bc:	2300      	movs	r3, #0
 80033be:	9300      	str	r3, [sp, #0]
 80033c0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80033c4:	68f8      	ldr	r0, [r7, #12]
 80033c6:	f000 fb4b 	bl	8003a60 <I2C_TransferConfig>
 80033ca:	e00f      	b.n	80033ec <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033d0:	b29a      	uxth	r2, r3
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033da:	b2da      	uxtb	r2, r3
 80033dc:	8979      	ldrh	r1, [r7, #10]
 80033de:	2300      	movs	r3, #0
 80033e0:	9300      	str	r3, [sp, #0]
 80033e2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80033e6:	68f8      	ldr	r0, [r7, #12]
 80033e8:	f000 fb3a 	bl	8003a60 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033f0:	b29b      	uxth	r3, r3
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d19a      	bne.n	800332c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80033f6:	697a      	ldr	r2, [r7, #20]
 80033f8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80033fa:	68f8      	ldr	r0, [r7, #12]
 80033fc:	f000 f98a 	bl	8003714 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003400:	4603      	mov	r3, r0
 8003402:	2b00      	cmp	r3, #0
 8003404:	d001      	beq.n	800340a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8003406:	2301      	movs	r3, #1
 8003408:	e01a      	b.n	8003440 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	2220      	movs	r2, #32
 8003410:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	6859      	ldr	r1, [r3, #4]
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	681a      	ldr	r2, [r3, #0]
 800341c:	4b0b      	ldr	r3, [pc, #44]	; (800344c <HAL_I2C_Mem_Read+0x230>)
 800341e:	400b      	ands	r3, r1
 8003420:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	2220      	movs	r2, #32
 8003426:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	2200      	movs	r2, #0
 800342e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	2200      	movs	r2, #0
 8003436:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800343a:	2300      	movs	r3, #0
 800343c:	e000      	b.n	8003440 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800343e:	2302      	movs	r3, #2
  }
}
 8003440:	4618      	mov	r0, r3
 8003442:	3718      	adds	r7, #24
 8003444:	46bd      	mov	sp, r7
 8003446:	bd80      	pop	{r7, pc}
 8003448:	80002400 	.word	0x80002400
 800344c:	fe00e800 	.word	0xfe00e800

08003450 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8003450:	b580      	push	{r7, lr}
 8003452:	b086      	sub	sp, #24
 8003454:	af02      	add	r7, sp, #8
 8003456:	60f8      	str	r0, [r7, #12]
 8003458:	4608      	mov	r0, r1
 800345a:	4611      	mov	r1, r2
 800345c:	461a      	mov	r2, r3
 800345e:	4603      	mov	r3, r0
 8003460:	817b      	strh	r3, [r7, #10]
 8003462:	460b      	mov	r3, r1
 8003464:	813b      	strh	r3, [r7, #8]
 8003466:	4613      	mov	r3, r2
 8003468:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800346a:	88fb      	ldrh	r3, [r7, #6]
 800346c:	b2da      	uxtb	r2, r3
 800346e:	8979      	ldrh	r1, [r7, #10]
 8003470:	4b20      	ldr	r3, [pc, #128]	; (80034f4 <I2C_RequestMemoryWrite+0xa4>)
 8003472:	9300      	str	r3, [sp, #0]
 8003474:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003478:	68f8      	ldr	r0, [r7, #12]
 800347a:	f000 faf1 	bl	8003a60 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800347e:	69fa      	ldr	r2, [r7, #28]
 8003480:	69b9      	ldr	r1, [r7, #24]
 8003482:	68f8      	ldr	r0, [r7, #12]
 8003484:	f000 f8ff 	bl	8003686 <I2C_WaitOnTXISFlagUntilTimeout>
 8003488:	4603      	mov	r3, r0
 800348a:	2b00      	cmp	r3, #0
 800348c:	d001      	beq.n	8003492 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800348e:	2301      	movs	r3, #1
 8003490:	e02c      	b.n	80034ec <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003492:	88fb      	ldrh	r3, [r7, #6]
 8003494:	2b01      	cmp	r3, #1
 8003496:	d105      	bne.n	80034a4 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003498:	893b      	ldrh	r3, [r7, #8]
 800349a:	b2da      	uxtb	r2, r3
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	629a      	str	r2, [r3, #40]	; 0x28
 80034a2:	e015      	b.n	80034d0 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80034a4:	893b      	ldrh	r3, [r7, #8]
 80034a6:	0a1b      	lsrs	r3, r3, #8
 80034a8:	b29b      	uxth	r3, r3
 80034aa:	b2da      	uxtb	r2, r3
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80034b2:	69fa      	ldr	r2, [r7, #28]
 80034b4:	69b9      	ldr	r1, [r7, #24]
 80034b6:	68f8      	ldr	r0, [r7, #12]
 80034b8:	f000 f8e5 	bl	8003686 <I2C_WaitOnTXISFlagUntilTimeout>
 80034bc:	4603      	mov	r3, r0
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d001      	beq.n	80034c6 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80034c2:	2301      	movs	r3, #1
 80034c4:	e012      	b.n	80034ec <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80034c6:	893b      	ldrh	r3, [r7, #8]
 80034c8:	b2da      	uxtb	r2, r3
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80034d0:	69fb      	ldr	r3, [r7, #28]
 80034d2:	9300      	str	r3, [sp, #0]
 80034d4:	69bb      	ldr	r3, [r7, #24]
 80034d6:	2200      	movs	r2, #0
 80034d8:	2180      	movs	r1, #128	; 0x80
 80034da:	68f8      	ldr	r0, [r7, #12]
 80034dc:	f000 f884 	bl	80035e8 <I2C_WaitOnFlagUntilTimeout>
 80034e0:	4603      	mov	r3, r0
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d001      	beq.n	80034ea <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80034e6:	2301      	movs	r3, #1
 80034e8:	e000      	b.n	80034ec <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80034ea:	2300      	movs	r3, #0
}
 80034ec:	4618      	mov	r0, r3
 80034ee:	3710      	adds	r7, #16
 80034f0:	46bd      	mov	sp, r7
 80034f2:	bd80      	pop	{r7, pc}
 80034f4:	80002000 	.word	0x80002000

080034f8 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	b086      	sub	sp, #24
 80034fc:	af02      	add	r7, sp, #8
 80034fe:	60f8      	str	r0, [r7, #12]
 8003500:	4608      	mov	r0, r1
 8003502:	4611      	mov	r1, r2
 8003504:	461a      	mov	r2, r3
 8003506:	4603      	mov	r3, r0
 8003508:	817b      	strh	r3, [r7, #10]
 800350a:	460b      	mov	r3, r1
 800350c:	813b      	strh	r3, [r7, #8]
 800350e:	4613      	mov	r3, r2
 8003510:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8003512:	88fb      	ldrh	r3, [r7, #6]
 8003514:	b2da      	uxtb	r2, r3
 8003516:	8979      	ldrh	r1, [r7, #10]
 8003518:	4b20      	ldr	r3, [pc, #128]	; (800359c <I2C_RequestMemoryRead+0xa4>)
 800351a:	9300      	str	r3, [sp, #0]
 800351c:	2300      	movs	r3, #0
 800351e:	68f8      	ldr	r0, [r7, #12]
 8003520:	f000 fa9e 	bl	8003a60 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003524:	69fa      	ldr	r2, [r7, #28]
 8003526:	69b9      	ldr	r1, [r7, #24]
 8003528:	68f8      	ldr	r0, [r7, #12]
 800352a:	f000 f8ac 	bl	8003686 <I2C_WaitOnTXISFlagUntilTimeout>
 800352e:	4603      	mov	r3, r0
 8003530:	2b00      	cmp	r3, #0
 8003532:	d001      	beq.n	8003538 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8003534:	2301      	movs	r3, #1
 8003536:	e02c      	b.n	8003592 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003538:	88fb      	ldrh	r3, [r7, #6]
 800353a:	2b01      	cmp	r3, #1
 800353c:	d105      	bne.n	800354a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800353e:	893b      	ldrh	r3, [r7, #8]
 8003540:	b2da      	uxtb	r2, r3
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	629a      	str	r2, [r3, #40]	; 0x28
 8003548:	e015      	b.n	8003576 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800354a:	893b      	ldrh	r3, [r7, #8]
 800354c:	0a1b      	lsrs	r3, r3, #8
 800354e:	b29b      	uxth	r3, r3
 8003550:	b2da      	uxtb	r2, r3
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003558:	69fa      	ldr	r2, [r7, #28]
 800355a:	69b9      	ldr	r1, [r7, #24]
 800355c:	68f8      	ldr	r0, [r7, #12]
 800355e:	f000 f892 	bl	8003686 <I2C_WaitOnTXISFlagUntilTimeout>
 8003562:	4603      	mov	r3, r0
 8003564:	2b00      	cmp	r3, #0
 8003566:	d001      	beq.n	800356c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8003568:	2301      	movs	r3, #1
 800356a:	e012      	b.n	8003592 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800356c:	893b      	ldrh	r3, [r7, #8]
 800356e:	b2da      	uxtb	r2, r3
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8003576:	69fb      	ldr	r3, [r7, #28]
 8003578:	9300      	str	r3, [sp, #0]
 800357a:	69bb      	ldr	r3, [r7, #24]
 800357c:	2200      	movs	r2, #0
 800357e:	2140      	movs	r1, #64	; 0x40
 8003580:	68f8      	ldr	r0, [r7, #12]
 8003582:	f000 f831 	bl	80035e8 <I2C_WaitOnFlagUntilTimeout>
 8003586:	4603      	mov	r3, r0
 8003588:	2b00      	cmp	r3, #0
 800358a:	d001      	beq.n	8003590 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800358c:	2301      	movs	r3, #1
 800358e:	e000      	b.n	8003592 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8003590:	2300      	movs	r3, #0
}
 8003592:	4618      	mov	r0, r3
 8003594:	3710      	adds	r7, #16
 8003596:	46bd      	mov	sp, r7
 8003598:	bd80      	pop	{r7, pc}
 800359a:	bf00      	nop
 800359c:	80002000 	.word	0x80002000

080035a0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80035a0:	b480      	push	{r7}
 80035a2:	b083      	sub	sp, #12
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	699b      	ldr	r3, [r3, #24]
 80035ae:	f003 0302 	and.w	r3, r3, #2
 80035b2:	2b02      	cmp	r3, #2
 80035b4:	d103      	bne.n	80035be <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	2200      	movs	r2, #0
 80035bc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	699b      	ldr	r3, [r3, #24]
 80035c4:	f003 0301 	and.w	r3, r3, #1
 80035c8:	2b01      	cmp	r3, #1
 80035ca:	d007      	beq.n	80035dc <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	699a      	ldr	r2, [r3, #24]
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f042 0201 	orr.w	r2, r2, #1
 80035da:	619a      	str	r2, [r3, #24]
  }
}
 80035dc:	bf00      	nop
 80035de:	370c      	adds	r7, #12
 80035e0:	46bd      	mov	sp, r7
 80035e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e6:	4770      	bx	lr

080035e8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	b084      	sub	sp, #16
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	60f8      	str	r0, [r7, #12]
 80035f0:	60b9      	str	r1, [r7, #8]
 80035f2:	603b      	str	r3, [r7, #0]
 80035f4:	4613      	mov	r3, r2
 80035f6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80035f8:	e031      	b.n	800365e <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035fa:	683b      	ldr	r3, [r7, #0]
 80035fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003600:	d02d      	beq.n	800365e <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003602:	f7fe ff8f 	bl	8002524 <HAL_GetTick>
 8003606:	4602      	mov	r2, r0
 8003608:	69bb      	ldr	r3, [r7, #24]
 800360a:	1ad3      	subs	r3, r2, r3
 800360c:	683a      	ldr	r2, [r7, #0]
 800360e:	429a      	cmp	r2, r3
 8003610:	d302      	bcc.n	8003618 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003612:	683b      	ldr	r3, [r7, #0]
 8003614:	2b00      	cmp	r3, #0
 8003616:	d122      	bne.n	800365e <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	699a      	ldr	r2, [r3, #24]
 800361e:	68bb      	ldr	r3, [r7, #8]
 8003620:	4013      	ands	r3, r2
 8003622:	68ba      	ldr	r2, [r7, #8]
 8003624:	429a      	cmp	r2, r3
 8003626:	bf0c      	ite	eq
 8003628:	2301      	moveq	r3, #1
 800362a:	2300      	movne	r3, #0
 800362c:	b2db      	uxtb	r3, r3
 800362e:	461a      	mov	r2, r3
 8003630:	79fb      	ldrb	r3, [r7, #7]
 8003632:	429a      	cmp	r2, r3
 8003634:	d113      	bne.n	800365e <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800363a:	f043 0220 	orr.w	r2, r3, #32
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	2220      	movs	r2, #32
 8003646:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	2200      	movs	r2, #0
 800364e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	2200      	movs	r2, #0
 8003656:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 800365a:	2301      	movs	r3, #1
 800365c:	e00f      	b.n	800367e <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	699a      	ldr	r2, [r3, #24]
 8003664:	68bb      	ldr	r3, [r7, #8]
 8003666:	4013      	ands	r3, r2
 8003668:	68ba      	ldr	r2, [r7, #8]
 800366a:	429a      	cmp	r2, r3
 800366c:	bf0c      	ite	eq
 800366e:	2301      	moveq	r3, #1
 8003670:	2300      	movne	r3, #0
 8003672:	b2db      	uxtb	r3, r3
 8003674:	461a      	mov	r2, r3
 8003676:	79fb      	ldrb	r3, [r7, #7]
 8003678:	429a      	cmp	r2, r3
 800367a:	d0be      	beq.n	80035fa <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800367c:	2300      	movs	r3, #0
}
 800367e:	4618      	mov	r0, r3
 8003680:	3710      	adds	r7, #16
 8003682:	46bd      	mov	sp, r7
 8003684:	bd80      	pop	{r7, pc}

08003686 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003686:	b580      	push	{r7, lr}
 8003688:	b084      	sub	sp, #16
 800368a:	af00      	add	r7, sp, #0
 800368c:	60f8      	str	r0, [r7, #12]
 800368e:	60b9      	str	r1, [r7, #8]
 8003690:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003692:	e033      	b.n	80036fc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003694:	687a      	ldr	r2, [r7, #4]
 8003696:	68b9      	ldr	r1, [r7, #8]
 8003698:	68f8      	ldr	r0, [r7, #12]
 800369a:	f000 f901 	bl	80038a0 <I2C_IsErrorOccurred>
 800369e:	4603      	mov	r3, r0
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d001      	beq.n	80036a8 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80036a4:	2301      	movs	r3, #1
 80036a6:	e031      	b.n	800370c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036a8:	68bb      	ldr	r3, [r7, #8]
 80036aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036ae:	d025      	beq.n	80036fc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036b0:	f7fe ff38 	bl	8002524 <HAL_GetTick>
 80036b4:	4602      	mov	r2, r0
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	1ad3      	subs	r3, r2, r3
 80036ba:	68ba      	ldr	r2, [r7, #8]
 80036bc:	429a      	cmp	r2, r3
 80036be:	d302      	bcc.n	80036c6 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80036c0:	68bb      	ldr	r3, [r7, #8]
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d11a      	bne.n	80036fc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	699b      	ldr	r3, [r3, #24]
 80036cc:	f003 0302 	and.w	r3, r3, #2
 80036d0:	2b02      	cmp	r3, #2
 80036d2:	d013      	beq.n	80036fc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036d8:	f043 0220 	orr.w	r2, r3, #32
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	2220      	movs	r2, #32
 80036e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	2200      	movs	r2, #0
 80036ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	2200      	movs	r2, #0
 80036f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80036f8:	2301      	movs	r3, #1
 80036fa:	e007      	b.n	800370c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	699b      	ldr	r3, [r3, #24]
 8003702:	f003 0302 	and.w	r3, r3, #2
 8003706:	2b02      	cmp	r3, #2
 8003708:	d1c4      	bne.n	8003694 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800370a:	2300      	movs	r3, #0
}
 800370c:	4618      	mov	r0, r3
 800370e:	3710      	adds	r7, #16
 8003710:	46bd      	mov	sp, r7
 8003712:	bd80      	pop	{r7, pc}

08003714 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003714:	b580      	push	{r7, lr}
 8003716:	b084      	sub	sp, #16
 8003718:	af00      	add	r7, sp, #0
 800371a:	60f8      	str	r0, [r7, #12]
 800371c:	60b9      	str	r1, [r7, #8]
 800371e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003720:	e02f      	b.n	8003782 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003722:	687a      	ldr	r2, [r7, #4]
 8003724:	68b9      	ldr	r1, [r7, #8]
 8003726:	68f8      	ldr	r0, [r7, #12]
 8003728:	f000 f8ba 	bl	80038a0 <I2C_IsErrorOccurred>
 800372c:	4603      	mov	r3, r0
 800372e:	2b00      	cmp	r3, #0
 8003730:	d001      	beq.n	8003736 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003732:	2301      	movs	r3, #1
 8003734:	e02d      	b.n	8003792 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003736:	f7fe fef5 	bl	8002524 <HAL_GetTick>
 800373a:	4602      	mov	r2, r0
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	1ad3      	subs	r3, r2, r3
 8003740:	68ba      	ldr	r2, [r7, #8]
 8003742:	429a      	cmp	r2, r3
 8003744:	d302      	bcc.n	800374c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003746:	68bb      	ldr	r3, [r7, #8]
 8003748:	2b00      	cmp	r3, #0
 800374a:	d11a      	bne.n	8003782 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	699b      	ldr	r3, [r3, #24]
 8003752:	f003 0320 	and.w	r3, r3, #32
 8003756:	2b20      	cmp	r3, #32
 8003758:	d013      	beq.n	8003782 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800375e:	f043 0220 	orr.w	r2, r3, #32
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	2220      	movs	r2, #32
 800376a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	2200      	movs	r2, #0
 8003772:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	2200      	movs	r2, #0
 800377a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800377e:	2301      	movs	r3, #1
 8003780:	e007      	b.n	8003792 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	699b      	ldr	r3, [r3, #24]
 8003788:	f003 0320 	and.w	r3, r3, #32
 800378c:	2b20      	cmp	r3, #32
 800378e:	d1c8      	bne.n	8003722 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003790:	2300      	movs	r3, #0
}
 8003792:	4618      	mov	r0, r3
 8003794:	3710      	adds	r7, #16
 8003796:	46bd      	mov	sp, r7
 8003798:	bd80      	pop	{r7, pc}
	...

0800379c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800379c:	b580      	push	{r7, lr}
 800379e:	b084      	sub	sp, #16
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	60f8      	str	r0, [r7, #12]
 80037a4:	60b9      	str	r1, [r7, #8]
 80037a6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80037a8:	e06b      	b.n	8003882 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80037aa:	687a      	ldr	r2, [r7, #4]
 80037ac:	68b9      	ldr	r1, [r7, #8]
 80037ae:	68f8      	ldr	r0, [r7, #12]
 80037b0:	f000 f876 	bl	80038a0 <I2C_IsErrorOccurred>
 80037b4:	4603      	mov	r3, r0
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d001      	beq.n	80037be <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80037ba:	2301      	movs	r3, #1
 80037bc:	e069      	b.n	8003892 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	699b      	ldr	r3, [r3, #24]
 80037c4:	f003 0320 	and.w	r3, r3, #32
 80037c8:	2b20      	cmp	r3, #32
 80037ca:	d138      	bne.n	800383e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	699b      	ldr	r3, [r3, #24]
 80037d2:	f003 0304 	and.w	r3, r3, #4
 80037d6:	2b04      	cmp	r3, #4
 80037d8:	d105      	bne.n	80037e6 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d001      	beq.n	80037e6 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 80037e2:	2300      	movs	r3, #0
 80037e4:	e055      	b.n	8003892 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	699b      	ldr	r3, [r3, #24]
 80037ec:	f003 0310 	and.w	r3, r3, #16
 80037f0:	2b10      	cmp	r3, #16
 80037f2:	d107      	bne.n	8003804 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	2210      	movs	r2, #16
 80037fa:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	2204      	movs	r2, #4
 8003800:	645a      	str	r2, [r3, #68]	; 0x44
 8003802:	e002      	b.n	800380a <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	2200      	movs	r2, #0
 8003808:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	2220      	movs	r2, #32
 8003810:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	6859      	ldr	r1, [r3, #4]
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	681a      	ldr	r2, [r3, #0]
 800381c:	4b1f      	ldr	r3, [pc, #124]	; (800389c <I2C_WaitOnRXNEFlagUntilTimeout+0x100>)
 800381e:	400b      	ands	r3, r1
 8003820:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	2220      	movs	r2, #32
 8003826:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	2200      	movs	r2, #0
 800382e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	2200      	movs	r2, #0
 8003836:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800383a:	2301      	movs	r3, #1
 800383c:	e029      	b.n	8003892 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800383e:	f7fe fe71 	bl	8002524 <HAL_GetTick>
 8003842:	4602      	mov	r2, r0
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	1ad3      	subs	r3, r2, r3
 8003848:	68ba      	ldr	r2, [r7, #8]
 800384a:	429a      	cmp	r2, r3
 800384c:	d302      	bcc.n	8003854 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 800384e:	68bb      	ldr	r3, [r7, #8]
 8003850:	2b00      	cmp	r3, #0
 8003852:	d116      	bne.n	8003882 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	699b      	ldr	r3, [r3, #24]
 800385a:	f003 0304 	and.w	r3, r3, #4
 800385e:	2b04      	cmp	r3, #4
 8003860:	d00f      	beq.n	8003882 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003866:	f043 0220 	orr.w	r2, r3, #32
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	2220      	movs	r2, #32
 8003872:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	2200      	movs	r2, #0
 800387a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800387e:	2301      	movs	r3, #1
 8003880:	e007      	b.n	8003892 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	699b      	ldr	r3, [r3, #24]
 8003888:	f003 0304 	and.w	r3, r3, #4
 800388c:	2b04      	cmp	r3, #4
 800388e:	d18c      	bne.n	80037aa <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003890:	2300      	movs	r3, #0
}
 8003892:	4618      	mov	r0, r3
 8003894:	3710      	adds	r7, #16
 8003896:	46bd      	mov	sp, r7
 8003898:	bd80      	pop	{r7, pc}
 800389a:	bf00      	nop
 800389c:	fe00e800 	.word	0xfe00e800

080038a0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b08a      	sub	sp, #40	; 0x28
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	60f8      	str	r0, [r7, #12]
 80038a8:	60b9      	str	r1, [r7, #8]
 80038aa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80038ac:	2300      	movs	r3, #0
 80038ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	699b      	ldr	r3, [r3, #24]
 80038b8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80038ba:	2300      	movs	r3, #0
 80038bc:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80038c2:	69bb      	ldr	r3, [r7, #24]
 80038c4:	f003 0310 	and.w	r3, r3, #16
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d068      	beq.n	800399e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	2210      	movs	r2, #16
 80038d2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80038d4:	e049      	b.n	800396a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80038d6:	68bb      	ldr	r3, [r7, #8]
 80038d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038dc:	d045      	beq.n	800396a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80038de:	f7fe fe21 	bl	8002524 <HAL_GetTick>
 80038e2:	4602      	mov	r2, r0
 80038e4:	69fb      	ldr	r3, [r7, #28]
 80038e6:	1ad3      	subs	r3, r2, r3
 80038e8:	68ba      	ldr	r2, [r7, #8]
 80038ea:	429a      	cmp	r2, r3
 80038ec:	d302      	bcc.n	80038f4 <I2C_IsErrorOccurred+0x54>
 80038ee:	68bb      	ldr	r3, [r7, #8]
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d13a      	bne.n	800396a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	685b      	ldr	r3, [r3, #4]
 80038fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80038fe:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003906:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	699b      	ldr	r3, [r3, #24]
 800390e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003912:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003916:	d121      	bne.n	800395c <I2C_IsErrorOccurred+0xbc>
 8003918:	697b      	ldr	r3, [r7, #20]
 800391a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800391e:	d01d      	beq.n	800395c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8003920:	7cfb      	ldrb	r3, [r7, #19]
 8003922:	2b20      	cmp	r3, #32
 8003924:	d01a      	beq.n	800395c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	685a      	ldr	r2, [r3, #4]
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003934:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003936:	f7fe fdf5 	bl	8002524 <HAL_GetTick>
 800393a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800393c:	e00e      	b.n	800395c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800393e:	f7fe fdf1 	bl	8002524 <HAL_GetTick>
 8003942:	4602      	mov	r2, r0
 8003944:	69fb      	ldr	r3, [r7, #28]
 8003946:	1ad3      	subs	r3, r2, r3
 8003948:	2b19      	cmp	r3, #25
 800394a:	d907      	bls.n	800395c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800394c:	6a3b      	ldr	r3, [r7, #32]
 800394e:	f043 0320 	orr.w	r3, r3, #32
 8003952:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003954:	2301      	movs	r3, #1
 8003956:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 800395a:	e006      	b.n	800396a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	699b      	ldr	r3, [r3, #24]
 8003962:	f003 0320 	and.w	r3, r3, #32
 8003966:	2b20      	cmp	r3, #32
 8003968:	d1e9      	bne.n	800393e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	699b      	ldr	r3, [r3, #24]
 8003970:	f003 0320 	and.w	r3, r3, #32
 8003974:	2b20      	cmp	r3, #32
 8003976:	d003      	beq.n	8003980 <I2C_IsErrorOccurred+0xe0>
 8003978:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800397c:	2b00      	cmp	r3, #0
 800397e:	d0aa      	beq.n	80038d6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003980:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003984:	2b00      	cmp	r3, #0
 8003986:	d103      	bne.n	8003990 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	2220      	movs	r2, #32
 800398e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003990:	6a3b      	ldr	r3, [r7, #32]
 8003992:	f043 0304 	orr.w	r3, r3, #4
 8003996:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003998:	2301      	movs	r3, #1
 800399a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	699b      	ldr	r3, [r3, #24]
 80039a4:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80039a6:	69bb      	ldr	r3, [r7, #24]
 80039a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d00b      	beq.n	80039c8 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80039b0:	6a3b      	ldr	r3, [r7, #32]
 80039b2:	f043 0301 	orr.w	r3, r3, #1
 80039b6:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80039c0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80039c2:	2301      	movs	r3, #1
 80039c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80039c8:	69bb      	ldr	r3, [r7, #24]
 80039ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d00b      	beq.n	80039ea <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80039d2:	6a3b      	ldr	r3, [r7, #32]
 80039d4:	f043 0308 	orr.w	r3, r3, #8
 80039d8:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80039e2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80039e4:	2301      	movs	r3, #1
 80039e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80039ea:	69bb      	ldr	r3, [r7, #24]
 80039ec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d00b      	beq.n	8003a0c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80039f4:	6a3b      	ldr	r3, [r7, #32]
 80039f6:	f043 0302 	orr.w	r3, r3, #2
 80039fa:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003a04:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003a06:	2301      	movs	r3, #1
 8003a08:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8003a0c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d01c      	beq.n	8003a4e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003a14:	68f8      	ldr	r0, [r7, #12]
 8003a16:	f7ff fdc3 	bl	80035a0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	6859      	ldr	r1, [r3, #4]
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	681a      	ldr	r2, [r3, #0]
 8003a24:	4b0d      	ldr	r3, [pc, #52]	; (8003a5c <I2C_IsErrorOccurred+0x1bc>)
 8003a26:	400b      	ands	r3, r1
 8003a28:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003a2e:	6a3b      	ldr	r3, [r7, #32]
 8003a30:	431a      	orrs	r2, r3
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	2220      	movs	r2, #32
 8003a3a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	2200      	movs	r2, #0
 8003a42:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	2200      	movs	r2, #0
 8003a4a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8003a4e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8003a52:	4618      	mov	r0, r3
 8003a54:	3728      	adds	r7, #40	; 0x28
 8003a56:	46bd      	mov	sp, r7
 8003a58:	bd80      	pop	{r7, pc}
 8003a5a:	bf00      	nop
 8003a5c:	fe00e800 	.word	0xfe00e800

08003a60 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003a60:	b480      	push	{r7}
 8003a62:	b087      	sub	sp, #28
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	60f8      	str	r0, [r7, #12]
 8003a68:	607b      	str	r3, [r7, #4]
 8003a6a:	460b      	mov	r3, r1
 8003a6c:	817b      	strh	r3, [r7, #10]
 8003a6e:	4613      	mov	r3, r2
 8003a70:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003a72:	897b      	ldrh	r3, [r7, #10]
 8003a74:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003a78:	7a7b      	ldrb	r3, [r7, #9]
 8003a7a:	041b      	lsls	r3, r3, #16
 8003a7c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003a80:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003a86:	6a3b      	ldr	r3, [r7, #32]
 8003a88:	4313      	orrs	r3, r2
 8003a8a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003a8e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	685a      	ldr	r2, [r3, #4]
 8003a96:	6a3b      	ldr	r3, [r7, #32]
 8003a98:	0d5b      	lsrs	r3, r3, #21
 8003a9a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8003a9e:	4b08      	ldr	r3, [pc, #32]	; (8003ac0 <I2C_TransferConfig+0x60>)
 8003aa0:	430b      	orrs	r3, r1
 8003aa2:	43db      	mvns	r3, r3
 8003aa4:	ea02 0103 	and.w	r1, r2, r3
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	697a      	ldr	r2, [r7, #20]
 8003aae:	430a      	orrs	r2, r1
 8003ab0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003ab2:	bf00      	nop
 8003ab4:	371c      	adds	r7, #28
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003abc:	4770      	bx	lr
 8003abe:	bf00      	nop
 8003ac0:	03ff63ff 	.word	0x03ff63ff

08003ac4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003ac4:	b480      	push	{r7}
 8003ac6:	b083      	sub	sp, #12
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]
 8003acc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ad4:	b2db      	uxtb	r3, r3
 8003ad6:	2b20      	cmp	r3, #32
 8003ad8:	d138      	bne.n	8003b4c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003ae0:	2b01      	cmp	r3, #1
 8003ae2:	d101      	bne.n	8003ae8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003ae4:	2302      	movs	r3, #2
 8003ae6:	e032      	b.n	8003b4e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2201      	movs	r2, #1
 8003aec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2224      	movs	r2, #36	; 0x24
 8003af4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	681a      	ldr	r2, [r3, #0]
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f022 0201 	bic.w	r2, r2, #1
 8003b06:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	681a      	ldr	r2, [r3, #0]
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003b16:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	6819      	ldr	r1, [r3, #0]
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	683a      	ldr	r2, [r7, #0]
 8003b24:	430a      	orrs	r2, r1
 8003b26:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	681a      	ldr	r2, [r3, #0]
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f042 0201 	orr.w	r2, r2, #1
 8003b36:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2220      	movs	r2, #32
 8003b3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2200      	movs	r2, #0
 8003b44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003b48:	2300      	movs	r3, #0
 8003b4a:	e000      	b.n	8003b4e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003b4c:	2302      	movs	r3, #2
  }
}
 8003b4e:	4618      	mov	r0, r3
 8003b50:	370c      	adds	r7, #12
 8003b52:	46bd      	mov	sp, r7
 8003b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b58:	4770      	bx	lr

08003b5a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003b5a:	b480      	push	{r7}
 8003b5c:	b085      	sub	sp, #20
 8003b5e:	af00      	add	r7, sp, #0
 8003b60:	6078      	str	r0, [r7, #4]
 8003b62:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003b6a:	b2db      	uxtb	r3, r3
 8003b6c:	2b20      	cmp	r3, #32
 8003b6e:	d139      	bne.n	8003be4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003b76:	2b01      	cmp	r3, #1
 8003b78:	d101      	bne.n	8003b7e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003b7a:	2302      	movs	r3, #2
 8003b7c:	e033      	b.n	8003be6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	2201      	movs	r2, #1
 8003b82:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	2224      	movs	r2, #36	; 0x24
 8003b8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	681a      	ldr	r2, [r3, #0]
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f022 0201 	bic.w	r2, r2, #1
 8003b9c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003bac:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003bae:	683b      	ldr	r3, [r7, #0]
 8003bb0:	021b      	lsls	r3, r3, #8
 8003bb2:	68fa      	ldr	r2, [r7, #12]
 8003bb4:	4313      	orrs	r3, r2
 8003bb6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	68fa      	ldr	r2, [r7, #12]
 8003bbe:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	681a      	ldr	r2, [r3, #0]
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f042 0201 	orr.w	r2, r2, #1
 8003bce:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2220      	movs	r2, #32
 8003bd4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2200      	movs	r2, #0
 8003bdc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003be0:	2300      	movs	r3, #0
 8003be2:	e000      	b.n	8003be6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003be4:	2302      	movs	r3, #2
  }
}
 8003be6:	4618      	mov	r0, r3
 8003be8:	3714      	adds	r7, #20
 8003bea:	46bd      	mov	sp, r7
 8003bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf0:	4770      	bx	lr
	...

08003bf4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8003bfa:	af00      	add	r7, sp, #0
 8003bfc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c00:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003c04:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003c06:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c0a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d102      	bne.n	8003c1a <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8003c14:	2301      	movs	r3, #1
 8003c16:	f001 b823 	b.w	8004c60 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003c1a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c1e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f003 0301 	and.w	r3, r3, #1
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	f000 817d 	beq.w	8003f2a <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003c30:	4bbc      	ldr	r3, [pc, #752]	; (8003f24 <HAL_RCC_OscConfig+0x330>)
 8003c32:	685b      	ldr	r3, [r3, #4]
 8003c34:	f003 030c 	and.w	r3, r3, #12
 8003c38:	2b04      	cmp	r3, #4
 8003c3a:	d00c      	beq.n	8003c56 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003c3c:	4bb9      	ldr	r3, [pc, #740]	; (8003f24 <HAL_RCC_OscConfig+0x330>)
 8003c3e:	685b      	ldr	r3, [r3, #4]
 8003c40:	f003 030c 	and.w	r3, r3, #12
 8003c44:	2b08      	cmp	r3, #8
 8003c46:	d15c      	bne.n	8003d02 <HAL_RCC_OscConfig+0x10e>
 8003c48:	4bb6      	ldr	r3, [pc, #728]	; (8003f24 <HAL_RCC_OscConfig+0x330>)
 8003c4a:	685b      	ldr	r3, [r3, #4]
 8003c4c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c54:	d155      	bne.n	8003d02 <HAL_RCC_OscConfig+0x10e>
 8003c56:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003c5a:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c5e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8003c62:	fa93 f3a3 	rbit	r3, r3
 8003c66:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003c6a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c6e:	fab3 f383 	clz	r3, r3
 8003c72:	b2db      	uxtb	r3, r3
 8003c74:	095b      	lsrs	r3, r3, #5
 8003c76:	b2db      	uxtb	r3, r3
 8003c78:	f043 0301 	orr.w	r3, r3, #1
 8003c7c:	b2db      	uxtb	r3, r3
 8003c7e:	2b01      	cmp	r3, #1
 8003c80:	d102      	bne.n	8003c88 <HAL_RCC_OscConfig+0x94>
 8003c82:	4ba8      	ldr	r3, [pc, #672]	; (8003f24 <HAL_RCC_OscConfig+0x330>)
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	e015      	b.n	8003cb4 <HAL_RCC_OscConfig+0xc0>
 8003c88:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003c8c:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c90:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8003c94:	fa93 f3a3 	rbit	r3, r3
 8003c98:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8003c9c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003ca0:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8003ca4:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8003ca8:	fa93 f3a3 	rbit	r3, r3
 8003cac:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8003cb0:	4b9c      	ldr	r3, [pc, #624]	; (8003f24 <HAL_RCC_OscConfig+0x330>)
 8003cb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cb4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003cb8:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8003cbc:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8003cc0:	fa92 f2a2 	rbit	r2, r2
 8003cc4:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8003cc8:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8003ccc:	fab2 f282 	clz	r2, r2
 8003cd0:	b2d2      	uxtb	r2, r2
 8003cd2:	f042 0220 	orr.w	r2, r2, #32
 8003cd6:	b2d2      	uxtb	r2, r2
 8003cd8:	f002 021f 	and.w	r2, r2, #31
 8003cdc:	2101      	movs	r1, #1
 8003cde:	fa01 f202 	lsl.w	r2, r1, r2
 8003ce2:	4013      	ands	r3, r2
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	f000 811f 	beq.w	8003f28 <HAL_RCC_OscConfig+0x334>
 8003cea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003cee:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	685b      	ldr	r3, [r3, #4]
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	f040 8116 	bne.w	8003f28 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8003cfc:	2301      	movs	r3, #1
 8003cfe:	f000 bfaf 	b.w	8004c60 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d02:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d06:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	685b      	ldr	r3, [r3, #4]
 8003d0e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d12:	d106      	bne.n	8003d22 <HAL_RCC_OscConfig+0x12e>
 8003d14:	4b83      	ldr	r3, [pc, #524]	; (8003f24 <HAL_RCC_OscConfig+0x330>)
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	4a82      	ldr	r2, [pc, #520]	; (8003f24 <HAL_RCC_OscConfig+0x330>)
 8003d1a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d1e:	6013      	str	r3, [r2, #0]
 8003d20:	e036      	b.n	8003d90 <HAL_RCC_OscConfig+0x19c>
 8003d22:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d26:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	685b      	ldr	r3, [r3, #4]
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d10c      	bne.n	8003d4c <HAL_RCC_OscConfig+0x158>
 8003d32:	4b7c      	ldr	r3, [pc, #496]	; (8003f24 <HAL_RCC_OscConfig+0x330>)
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	4a7b      	ldr	r2, [pc, #492]	; (8003f24 <HAL_RCC_OscConfig+0x330>)
 8003d38:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d3c:	6013      	str	r3, [r2, #0]
 8003d3e:	4b79      	ldr	r3, [pc, #484]	; (8003f24 <HAL_RCC_OscConfig+0x330>)
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	4a78      	ldr	r2, [pc, #480]	; (8003f24 <HAL_RCC_OscConfig+0x330>)
 8003d44:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003d48:	6013      	str	r3, [r2, #0]
 8003d4a:	e021      	b.n	8003d90 <HAL_RCC_OscConfig+0x19c>
 8003d4c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d50:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	685b      	ldr	r3, [r3, #4]
 8003d58:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003d5c:	d10c      	bne.n	8003d78 <HAL_RCC_OscConfig+0x184>
 8003d5e:	4b71      	ldr	r3, [pc, #452]	; (8003f24 <HAL_RCC_OscConfig+0x330>)
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	4a70      	ldr	r2, [pc, #448]	; (8003f24 <HAL_RCC_OscConfig+0x330>)
 8003d64:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003d68:	6013      	str	r3, [r2, #0]
 8003d6a:	4b6e      	ldr	r3, [pc, #440]	; (8003f24 <HAL_RCC_OscConfig+0x330>)
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	4a6d      	ldr	r2, [pc, #436]	; (8003f24 <HAL_RCC_OscConfig+0x330>)
 8003d70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d74:	6013      	str	r3, [r2, #0]
 8003d76:	e00b      	b.n	8003d90 <HAL_RCC_OscConfig+0x19c>
 8003d78:	4b6a      	ldr	r3, [pc, #424]	; (8003f24 <HAL_RCC_OscConfig+0x330>)
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	4a69      	ldr	r2, [pc, #420]	; (8003f24 <HAL_RCC_OscConfig+0x330>)
 8003d7e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d82:	6013      	str	r3, [r2, #0]
 8003d84:	4b67      	ldr	r3, [pc, #412]	; (8003f24 <HAL_RCC_OscConfig+0x330>)
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	4a66      	ldr	r2, [pc, #408]	; (8003f24 <HAL_RCC_OscConfig+0x330>)
 8003d8a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003d8e:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003d90:	4b64      	ldr	r3, [pc, #400]	; (8003f24 <HAL_RCC_OscConfig+0x330>)
 8003d92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d94:	f023 020f 	bic.w	r2, r3, #15
 8003d98:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d9c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	689b      	ldr	r3, [r3, #8]
 8003da4:	495f      	ldr	r1, [pc, #380]	; (8003f24 <HAL_RCC_OscConfig+0x330>)
 8003da6:	4313      	orrs	r3, r2
 8003da8:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003daa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003dae:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	685b      	ldr	r3, [r3, #4]
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d059      	beq.n	8003e6e <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dba:	f7fe fbb3 	bl	8002524 <HAL_GetTick>
 8003dbe:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003dc2:	e00a      	b.n	8003dda <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003dc4:	f7fe fbae 	bl	8002524 <HAL_GetTick>
 8003dc8:	4602      	mov	r2, r0
 8003dca:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003dce:	1ad3      	subs	r3, r2, r3
 8003dd0:	2b64      	cmp	r3, #100	; 0x64
 8003dd2:	d902      	bls.n	8003dda <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8003dd4:	2303      	movs	r3, #3
 8003dd6:	f000 bf43 	b.w	8004c60 <HAL_RCC_OscConfig+0x106c>
 8003dda:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003dde:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003de2:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8003de6:	fa93 f3a3 	rbit	r3, r3
 8003dea:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8003dee:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003df2:	fab3 f383 	clz	r3, r3
 8003df6:	b2db      	uxtb	r3, r3
 8003df8:	095b      	lsrs	r3, r3, #5
 8003dfa:	b2db      	uxtb	r3, r3
 8003dfc:	f043 0301 	orr.w	r3, r3, #1
 8003e00:	b2db      	uxtb	r3, r3
 8003e02:	2b01      	cmp	r3, #1
 8003e04:	d102      	bne.n	8003e0c <HAL_RCC_OscConfig+0x218>
 8003e06:	4b47      	ldr	r3, [pc, #284]	; (8003f24 <HAL_RCC_OscConfig+0x330>)
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	e015      	b.n	8003e38 <HAL_RCC_OscConfig+0x244>
 8003e0c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003e10:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e14:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8003e18:	fa93 f3a3 	rbit	r3, r3
 8003e1c:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8003e20:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003e24:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8003e28:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8003e2c:	fa93 f3a3 	rbit	r3, r3
 8003e30:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8003e34:	4b3b      	ldr	r3, [pc, #236]	; (8003f24 <HAL_RCC_OscConfig+0x330>)
 8003e36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e38:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003e3c:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8003e40:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8003e44:	fa92 f2a2 	rbit	r2, r2
 8003e48:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8003e4c:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8003e50:	fab2 f282 	clz	r2, r2
 8003e54:	b2d2      	uxtb	r2, r2
 8003e56:	f042 0220 	orr.w	r2, r2, #32
 8003e5a:	b2d2      	uxtb	r2, r2
 8003e5c:	f002 021f 	and.w	r2, r2, #31
 8003e60:	2101      	movs	r1, #1
 8003e62:	fa01 f202 	lsl.w	r2, r1, r2
 8003e66:	4013      	ands	r3, r2
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d0ab      	beq.n	8003dc4 <HAL_RCC_OscConfig+0x1d0>
 8003e6c:	e05d      	b.n	8003f2a <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e6e:	f7fe fb59 	bl	8002524 <HAL_GetTick>
 8003e72:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e76:	e00a      	b.n	8003e8e <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003e78:	f7fe fb54 	bl	8002524 <HAL_GetTick>
 8003e7c:	4602      	mov	r2, r0
 8003e7e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003e82:	1ad3      	subs	r3, r2, r3
 8003e84:	2b64      	cmp	r3, #100	; 0x64
 8003e86:	d902      	bls.n	8003e8e <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8003e88:	2303      	movs	r3, #3
 8003e8a:	f000 bee9 	b.w	8004c60 <HAL_RCC_OscConfig+0x106c>
 8003e8e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003e92:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e96:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8003e9a:	fa93 f3a3 	rbit	r3, r3
 8003e9e:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8003ea2:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ea6:	fab3 f383 	clz	r3, r3
 8003eaa:	b2db      	uxtb	r3, r3
 8003eac:	095b      	lsrs	r3, r3, #5
 8003eae:	b2db      	uxtb	r3, r3
 8003eb0:	f043 0301 	orr.w	r3, r3, #1
 8003eb4:	b2db      	uxtb	r3, r3
 8003eb6:	2b01      	cmp	r3, #1
 8003eb8:	d102      	bne.n	8003ec0 <HAL_RCC_OscConfig+0x2cc>
 8003eba:	4b1a      	ldr	r3, [pc, #104]	; (8003f24 <HAL_RCC_OscConfig+0x330>)
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	e015      	b.n	8003eec <HAL_RCC_OscConfig+0x2f8>
 8003ec0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003ec4:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ec8:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8003ecc:	fa93 f3a3 	rbit	r3, r3
 8003ed0:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8003ed4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003ed8:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8003edc:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8003ee0:	fa93 f3a3 	rbit	r3, r3
 8003ee4:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8003ee8:	4b0e      	ldr	r3, [pc, #56]	; (8003f24 <HAL_RCC_OscConfig+0x330>)
 8003eea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eec:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003ef0:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8003ef4:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8003ef8:	fa92 f2a2 	rbit	r2, r2
 8003efc:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8003f00:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8003f04:	fab2 f282 	clz	r2, r2
 8003f08:	b2d2      	uxtb	r2, r2
 8003f0a:	f042 0220 	orr.w	r2, r2, #32
 8003f0e:	b2d2      	uxtb	r2, r2
 8003f10:	f002 021f 	and.w	r2, r2, #31
 8003f14:	2101      	movs	r1, #1
 8003f16:	fa01 f202 	lsl.w	r2, r1, r2
 8003f1a:	4013      	ands	r3, r2
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d1ab      	bne.n	8003e78 <HAL_RCC_OscConfig+0x284>
 8003f20:	e003      	b.n	8003f2a <HAL_RCC_OscConfig+0x336>
 8003f22:	bf00      	nop
 8003f24:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f28:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003f2a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f2e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f003 0302 	and.w	r3, r3, #2
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	f000 817d 	beq.w	800423a <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003f40:	4ba6      	ldr	r3, [pc, #664]	; (80041dc <HAL_RCC_OscConfig+0x5e8>)
 8003f42:	685b      	ldr	r3, [r3, #4]
 8003f44:	f003 030c 	and.w	r3, r3, #12
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d00b      	beq.n	8003f64 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003f4c:	4ba3      	ldr	r3, [pc, #652]	; (80041dc <HAL_RCC_OscConfig+0x5e8>)
 8003f4e:	685b      	ldr	r3, [r3, #4]
 8003f50:	f003 030c 	and.w	r3, r3, #12
 8003f54:	2b08      	cmp	r3, #8
 8003f56:	d172      	bne.n	800403e <HAL_RCC_OscConfig+0x44a>
 8003f58:	4ba0      	ldr	r3, [pc, #640]	; (80041dc <HAL_RCC_OscConfig+0x5e8>)
 8003f5a:	685b      	ldr	r3, [r3, #4]
 8003f5c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d16c      	bne.n	800403e <HAL_RCC_OscConfig+0x44a>
 8003f64:	2302      	movs	r3, #2
 8003f66:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f6a:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8003f6e:	fa93 f3a3 	rbit	r3, r3
 8003f72:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8003f76:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f7a:	fab3 f383 	clz	r3, r3
 8003f7e:	b2db      	uxtb	r3, r3
 8003f80:	095b      	lsrs	r3, r3, #5
 8003f82:	b2db      	uxtb	r3, r3
 8003f84:	f043 0301 	orr.w	r3, r3, #1
 8003f88:	b2db      	uxtb	r3, r3
 8003f8a:	2b01      	cmp	r3, #1
 8003f8c:	d102      	bne.n	8003f94 <HAL_RCC_OscConfig+0x3a0>
 8003f8e:	4b93      	ldr	r3, [pc, #588]	; (80041dc <HAL_RCC_OscConfig+0x5e8>)
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	e013      	b.n	8003fbc <HAL_RCC_OscConfig+0x3c8>
 8003f94:	2302      	movs	r3, #2
 8003f96:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f9a:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8003f9e:	fa93 f3a3 	rbit	r3, r3
 8003fa2:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8003fa6:	2302      	movs	r3, #2
 8003fa8:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8003fac:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003fb0:	fa93 f3a3 	rbit	r3, r3
 8003fb4:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8003fb8:	4b88      	ldr	r3, [pc, #544]	; (80041dc <HAL_RCC_OscConfig+0x5e8>)
 8003fba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fbc:	2202      	movs	r2, #2
 8003fbe:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8003fc2:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8003fc6:	fa92 f2a2 	rbit	r2, r2
 8003fca:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8003fce:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8003fd2:	fab2 f282 	clz	r2, r2
 8003fd6:	b2d2      	uxtb	r2, r2
 8003fd8:	f042 0220 	orr.w	r2, r2, #32
 8003fdc:	b2d2      	uxtb	r2, r2
 8003fde:	f002 021f 	and.w	r2, r2, #31
 8003fe2:	2101      	movs	r1, #1
 8003fe4:	fa01 f202 	lsl.w	r2, r1, r2
 8003fe8:	4013      	ands	r3, r2
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d00a      	beq.n	8004004 <HAL_RCC_OscConfig+0x410>
 8003fee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ff2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	691b      	ldr	r3, [r3, #16]
 8003ffa:	2b01      	cmp	r3, #1
 8003ffc:	d002      	beq.n	8004004 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8003ffe:	2301      	movs	r3, #1
 8004000:	f000 be2e 	b.w	8004c60 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004004:	4b75      	ldr	r3, [pc, #468]	; (80041dc <HAL_RCC_OscConfig+0x5e8>)
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800400c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004010:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	695b      	ldr	r3, [r3, #20]
 8004018:	21f8      	movs	r1, #248	; 0xf8
 800401a:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800401e:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8004022:	fa91 f1a1 	rbit	r1, r1
 8004026:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 800402a:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 800402e:	fab1 f181 	clz	r1, r1
 8004032:	b2c9      	uxtb	r1, r1
 8004034:	408b      	lsls	r3, r1
 8004036:	4969      	ldr	r1, [pc, #420]	; (80041dc <HAL_RCC_OscConfig+0x5e8>)
 8004038:	4313      	orrs	r3, r2
 800403a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800403c:	e0fd      	b.n	800423a <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800403e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004042:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	691b      	ldr	r3, [r3, #16]
 800404a:	2b00      	cmp	r3, #0
 800404c:	f000 8088 	beq.w	8004160 <HAL_RCC_OscConfig+0x56c>
 8004050:	2301      	movs	r3, #1
 8004052:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004056:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 800405a:	fa93 f3a3 	rbit	r3, r3
 800405e:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8004062:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004066:	fab3 f383 	clz	r3, r3
 800406a:	b2db      	uxtb	r3, r3
 800406c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004070:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004074:	009b      	lsls	r3, r3, #2
 8004076:	461a      	mov	r2, r3
 8004078:	2301      	movs	r3, #1
 800407a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800407c:	f7fe fa52 	bl	8002524 <HAL_GetTick>
 8004080:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004084:	e00a      	b.n	800409c <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004086:	f7fe fa4d 	bl	8002524 <HAL_GetTick>
 800408a:	4602      	mov	r2, r0
 800408c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004090:	1ad3      	subs	r3, r2, r3
 8004092:	2b02      	cmp	r3, #2
 8004094:	d902      	bls.n	800409c <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8004096:	2303      	movs	r3, #3
 8004098:	f000 bde2 	b.w	8004c60 <HAL_RCC_OscConfig+0x106c>
 800409c:	2302      	movs	r3, #2
 800409e:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040a2:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80040a6:	fa93 f3a3 	rbit	r3, r3
 80040aa:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 80040ae:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040b2:	fab3 f383 	clz	r3, r3
 80040b6:	b2db      	uxtb	r3, r3
 80040b8:	095b      	lsrs	r3, r3, #5
 80040ba:	b2db      	uxtb	r3, r3
 80040bc:	f043 0301 	orr.w	r3, r3, #1
 80040c0:	b2db      	uxtb	r3, r3
 80040c2:	2b01      	cmp	r3, #1
 80040c4:	d102      	bne.n	80040cc <HAL_RCC_OscConfig+0x4d8>
 80040c6:	4b45      	ldr	r3, [pc, #276]	; (80041dc <HAL_RCC_OscConfig+0x5e8>)
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	e013      	b.n	80040f4 <HAL_RCC_OscConfig+0x500>
 80040cc:	2302      	movs	r3, #2
 80040ce:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040d2:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80040d6:	fa93 f3a3 	rbit	r3, r3
 80040da:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80040de:	2302      	movs	r3, #2
 80040e0:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80040e4:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80040e8:	fa93 f3a3 	rbit	r3, r3
 80040ec:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 80040f0:	4b3a      	ldr	r3, [pc, #232]	; (80041dc <HAL_RCC_OscConfig+0x5e8>)
 80040f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040f4:	2202      	movs	r2, #2
 80040f6:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 80040fa:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80040fe:	fa92 f2a2 	rbit	r2, r2
 8004102:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8004106:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 800410a:	fab2 f282 	clz	r2, r2
 800410e:	b2d2      	uxtb	r2, r2
 8004110:	f042 0220 	orr.w	r2, r2, #32
 8004114:	b2d2      	uxtb	r2, r2
 8004116:	f002 021f 	and.w	r2, r2, #31
 800411a:	2101      	movs	r1, #1
 800411c:	fa01 f202 	lsl.w	r2, r1, r2
 8004120:	4013      	ands	r3, r2
 8004122:	2b00      	cmp	r3, #0
 8004124:	d0af      	beq.n	8004086 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004126:	4b2d      	ldr	r3, [pc, #180]	; (80041dc <HAL_RCC_OscConfig+0x5e8>)
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800412e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004132:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	695b      	ldr	r3, [r3, #20]
 800413a:	21f8      	movs	r1, #248	; 0xf8
 800413c:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004140:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8004144:	fa91 f1a1 	rbit	r1, r1
 8004148:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 800414c:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8004150:	fab1 f181 	clz	r1, r1
 8004154:	b2c9      	uxtb	r1, r1
 8004156:	408b      	lsls	r3, r1
 8004158:	4920      	ldr	r1, [pc, #128]	; (80041dc <HAL_RCC_OscConfig+0x5e8>)
 800415a:	4313      	orrs	r3, r2
 800415c:	600b      	str	r3, [r1, #0]
 800415e:	e06c      	b.n	800423a <HAL_RCC_OscConfig+0x646>
 8004160:	2301      	movs	r3, #1
 8004162:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004166:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800416a:	fa93 f3a3 	rbit	r3, r3
 800416e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8004172:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004176:	fab3 f383 	clz	r3, r3
 800417a:	b2db      	uxtb	r3, r3
 800417c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004180:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004184:	009b      	lsls	r3, r3, #2
 8004186:	461a      	mov	r2, r3
 8004188:	2300      	movs	r3, #0
 800418a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800418c:	f7fe f9ca 	bl	8002524 <HAL_GetTick>
 8004190:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004194:	e00a      	b.n	80041ac <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004196:	f7fe f9c5 	bl	8002524 <HAL_GetTick>
 800419a:	4602      	mov	r2, r0
 800419c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80041a0:	1ad3      	subs	r3, r2, r3
 80041a2:	2b02      	cmp	r3, #2
 80041a4:	d902      	bls.n	80041ac <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 80041a6:	2303      	movs	r3, #3
 80041a8:	f000 bd5a 	b.w	8004c60 <HAL_RCC_OscConfig+0x106c>
 80041ac:	2302      	movs	r3, #2
 80041ae:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041b2:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80041b6:	fa93 f3a3 	rbit	r3, r3
 80041ba:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 80041be:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80041c2:	fab3 f383 	clz	r3, r3
 80041c6:	b2db      	uxtb	r3, r3
 80041c8:	095b      	lsrs	r3, r3, #5
 80041ca:	b2db      	uxtb	r3, r3
 80041cc:	f043 0301 	orr.w	r3, r3, #1
 80041d0:	b2db      	uxtb	r3, r3
 80041d2:	2b01      	cmp	r3, #1
 80041d4:	d104      	bne.n	80041e0 <HAL_RCC_OscConfig+0x5ec>
 80041d6:	4b01      	ldr	r3, [pc, #4]	; (80041dc <HAL_RCC_OscConfig+0x5e8>)
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	e015      	b.n	8004208 <HAL_RCC_OscConfig+0x614>
 80041dc:	40021000 	.word	0x40021000
 80041e0:	2302      	movs	r3, #2
 80041e2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041e6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80041ea:	fa93 f3a3 	rbit	r3, r3
 80041ee:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80041f2:	2302      	movs	r3, #2
 80041f4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80041f8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80041fc:	fa93 f3a3 	rbit	r3, r3
 8004200:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8004204:	4bc8      	ldr	r3, [pc, #800]	; (8004528 <HAL_RCC_OscConfig+0x934>)
 8004206:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004208:	2202      	movs	r2, #2
 800420a:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 800420e:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8004212:	fa92 f2a2 	rbit	r2, r2
 8004216:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 800421a:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800421e:	fab2 f282 	clz	r2, r2
 8004222:	b2d2      	uxtb	r2, r2
 8004224:	f042 0220 	orr.w	r2, r2, #32
 8004228:	b2d2      	uxtb	r2, r2
 800422a:	f002 021f 	and.w	r2, r2, #31
 800422e:	2101      	movs	r1, #1
 8004230:	fa01 f202 	lsl.w	r2, r1, r2
 8004234:	4013      	ands	r3, r2
 8004236:	2b00      	cmp	r3, #0
 8004238:	d1ad      	bne.n	8004196 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800423a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800423e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f003 0308 	and.w	r3, r3, #8
 800424a:	2b00      	cmp	r3, #0
 800424c:	f000 8110 	beq.w	8004470 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004250:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004254:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	699b      	ldr	r3, [r3, #24]
 800425c:	2b00      	cmp	r3, #0
 800425e:	d079      	beq.n	8004354 <HAL_RCC_OscConfig+0x760>
 8004260:	2301      	movs	r3, #1
 8004262:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004266:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800426a:	fa93 f3a3 	rbit	r3, r3
 800426e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8004272:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004276:	fab3 f383 	clz	r3, r3
 800427a:	b2db      	uxtb	r3, r3
 800427c:	461a      	mov	r2, r3
 800427e:	4bab      	ldr	r3, [pc, #684]	; (800452c <HAL_RCC_OscConfig+0x938>)
 8004280:	4413      	add	r3, r2
 8004282:	009b      	lsls	r3, r3, #2
 8004284:	461a      	mov	r2, r3
 8004286:	2301      	movs	r3, #1
 8004288:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800428a:	f7fe f94b 	bl	8002524 <HAL_GetTick>
 800428e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004292:	e00a      	b.n	80042aa <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004294:	f7fe f946 	bl	8002524 <HAL_GetTick>
 8004298:	4602      	mov	r2, r0
 800429a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800429e:	1ad3      	subs	r3, r2, r3
 80042a0:	2b02      	cmp	r3, #2
 80042a2:	d902      	bls.n	80042aa <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 80042a4:	2303      	movs	r3, #3
 80042a6:	f000 bcdb 	b.w	8004c60 <HAL_RCC_OscConfig+0x106c>
 80042aa:	2302      	movs	r3, #2
 80042ac:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042b0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80042b4:	fa93 f3a3 	rbit	r3, r3
 80042b8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80042bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80042c0:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80042c4:	2202      	movs	r2, #2
 80042c6:	601a      	str	r2, [r3, #0]
 80042c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80042cc:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	fa93 f2a3 	rbit	r2, r3
 80042d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80042da:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80042de:	601a      	str	r2, [r3, #0]
 80042e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80042e4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80042e8:	2202      	movs	r2, #2
 80042ea:	601a      	str	r2, [r3, #0]
 80042ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80042f0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	fa93 f2a3 	rbit	r2, r3
 80042fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80042fe:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004302:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004304:	4b88      	ldr	r3, [pc, #544]	; (8004528 <HAL_RCC_OscConfig+0x934>)
 8004306:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004308:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800430c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8004310:	2102      	movs	r1, #2
 8004312:	6019      	str	r1, [r3, #0]
 8004314:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004318:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	fa93 f1a3 	rbit	r1, r3
 8004322:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004326:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800432a:	6019      	str	r1, [r3, #0]
  return result;
 800432c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004330:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	fab3 f383 	clz	r3, r3
 800433a:	b2db      	uxtb	r3, r3
 800433c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004340:	b2db      	uxtb	r3, r3
 8004342:	f003 031f 	and.w	r3, r3, #31
 8004346:	2101      	movs	r1, #1
 8004348:	fa01 f303 	lsl.w	r3, r1, r3
 800434c:	4013      	ands	r3, r2
 800434e:	2b00      	cmp	r3, #0
 8004350:	d0a0      	beq.n	8004294 <HAL_RCC_OscConfig+0x6a0>
 8004352:	e08d      	b.n	8004470 <HAL_RCC_OscConfig+0x87c>
 8004354:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004358:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800435c:	2201      	movs	r2, #1
 800435e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004360:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004364:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	fa93 f2a3 	rbit	r2, r3
 800436e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004372:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004376:	601a      	str	r2, [r3, #0]
  return result;
 8004378:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800437c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004380:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004382:	fab3 f383 	clz	r3, r3
 8004386:	b2db      	uxtb	r3, r3
 8004388:	461a      	mov	r2, r3
 800438a:	4b68      	ldr	r3, [pc, #416]	; (800452c <HAL_RCC_OscConfig+0x938>)
 800438c:	4413      	add	r3, r2
 800438e:	009b      	lsls	r3, r3, #2
 8004390:	461a      	mov	r2, r3
 8004392:	2300      	movs	r3, #0
 8004394:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004396:	f7fe f8c5 	bl	8002524 <HAL_GetTick>
 800439a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800439e:	e00a      	b.n	80043b6 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80043a0:	f7fe f8c0 	bl	8002524 <HAL_GetTick>
 80043a4:	4602      	mov	r2, r0
 80043a6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80043aa:	1ad3      	subs	r3, r2, r3
 80043ac:	2b02      	cmp	r3, #2
 80043ae:	d902      	bls.n	80043b6 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 80043b0:	2303      	movs	r3, #3
 80043b2:	f000 bc55 	b.w	8004c60 <HAL_RCC_OscConfig+0x106c>
 80043b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80043ba:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80043be:	2202      	movs	r2, #2
 80043c0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80043c6:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	fa93 f2a3 	rbit	r2, r3
 80043d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80043d4:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80043d8:	601a      	str	r2, [r3, #0]
 80043da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80043de:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80043e2:	2202      	movs	r2, #2
 80043e4:	601a      	str	r2, [r3, #0]
 80043e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80043ea:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	fa93 f2a3 	rbit	r2, r3
 80043f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80043f8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80043fc:	601a      	str	r2, [r3, #0]
 80043fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004402:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004406:	2202      	movs	r2, #2
 8004408:	601a      	str	r2, [r3, #0]
 800440a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800440e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	fa93 f2a3 	rbit	r2, r3
 8004418:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800441c:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8004420:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004422:	4b41      	ldr	r3, [pc, #260]	; (8004528 <HAL_RCC_OscConfig+0x934>)
 8004424:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004426:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800442a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800442e:	2102      	movs	r1, #2
 8004430:	6019      	str	r1, [r3, #0]
 8004432:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004436:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	fa93 f1a3 	rbit	r1, r3
 8004440:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004444:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8004448:	6019      	str	r1, [r3, #0]
  return result;
 800444a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800444e:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	fab3 f383 	clz	r3, r3
 8004458:	b2db      	uxtb	r3, r3
 800445a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800445e:	b2db      	uxtb	r3, r3
 8004460:	f003 031f 	and.w	r3, r3, #31
 8004464:	2101      	movs	r1, #1
 8004466:	fa01 f303 	lsl.w	r3, r1, r3
 800446a:	4013      	ands	r3, r2
 800446c:	2b00      	cmp	r3, #0
 800446e:	d197      	bne.n	80043a0 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004470:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004474:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f003 0304 	and.w	r3, r3, #4
 8004480:	2b00      	cmp	r3, #0
 8004482:	f000 81a1 	beq.w	80047c8 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004486:	2300      	movs	r3, #0
 8004488:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800448c:	4b26      	ldr	r3, [pc, #152]	; (8004528 <HAL_RCC_OscConfig+0x934>)
 800448e:	69db      	ldr	r3, [r3, #28]
 8004490:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004494:	2b00      	cmp	r3, #0
 8004496:	d116      	bne.n	80044c6 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004498:	4b23      	ldr	r3, [pc, #140]	; (8004528 <HAL_RCC_OscConfig+0x934>)
 800449a:	69db      	ldr	r3, [r3, #28]
 800449c:	4a22      	ldr	r2, [pc, #136]	; (8004528 <HAL_RCC_OscConfig+0x934>)
 800449e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80044a2:	61d3      	str	r3, [r2, #28]
 80044a4:	4b20      	ldr	r3, [pc, #128]	; (8004528 <HAL_RCC_OscConfig+0x934>)
 80044a6:	69db      	ldr	r3, [r3, #28]
 80044a8:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80044ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80044b0:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80044b4:	601a      	str	r2, [r3, #0]
 80044b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80044ba:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80044be:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80044c0:	2301      	movs	r3, #1
 80044c2:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044c6:	4b1a      	ldr	r3, [pc, #104]	; (8004530 <HAL_RCC_OscConfig+0x93c>)
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d11a      	bne.n	8004508 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80044d2:	4b17      	ldr	r3, [pc, #92]	; (8004530 <HAL_RCC_OscConfig+0x93c>)
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	4a16      	ldr	r2, [pc, #88]	; (8004530 <HAL_RCC_OscConfig+0x93c>)
 80044d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80044dc:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80044de:	f7fe f821 	bl	8002524 <HAL_GetTick>
 80044e2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044e6:	e009      	b.n	80044fc <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80044e8:	f7fe f81c 	bl	8002524 <HAL_GetTick>
 80044ec:	4602      	mov	r2, r0
 80044ee:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80044f2:	1ad3      	subs	r3, r2, r3
 80044f4:	2b64      	cmp	r3, #100	; 0x64
 80044f6:	d901      	bls.n	80044fc <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 80044f8:	2303      	movs	r3, #3
 80044fa:	e3b1      	b.n	8004c60 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044fc:	4b0c      	ldr	r3, [pc, #48]	; (8004530 <HAL_RCC_OscConfig+0x93c>)
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004504:	2b00      	cmp	r3, #0
 8004506:	d0ef      	beq.n	80044e8 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004508:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800450c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	68db      	ldr	r3, [r3, #12]
 8004514:	2b01      	cmp	r3, #1
 8004516:	d10d      	bne.n	8004534 <HAL_RCC_OscConfig+0x940>
 8004518:	4b03      	ldr	r3, [pc, #12]	; (8004528 <HAL_RCC_OscConfig+0x934>)
 800451a:	6a1b      	ldr	r3, [r3, #32]
 800451c:	4a02      	ldr	r2, [pc, #8]	; (8004528 <HAL_RCC_OscConfig+0x934>)
 800451e:	f043 0301 	orr.w	r3, r3, #1
 8004522:	6213      	str	r3, [r2, #32]
 8004524:	e03c      	b.n	80045a0 <HAL_RCC_OscConfig+0x9ac>
 8004526:	bf00      	nop
 8004528:	40021000 	.word	0x40021000
 800452c:	10908120 	.word	0x10908120
 8004530:	40007000 	.word	0x40007000
 8004534:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004538:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	68db      	ldr	r3, [r3, #12]
 8004540:	2b00      	cmp	r3, #0
 8004542:	d10c      	bne.n	800455e <HAL_RCC_OscConfig+0x96a>
 8004544:	4bc1      	ldr	r3, [pc, #772]	; (800484c <HAL_RCC_OscConfig+0xc58>)
 8004546:	6a1b      	ldr	r3, [r3, #32]
 8004548:	4ac0      	ldr	r2, [pc, #768]	; (800484c <HAL_RCC_OscConfig+0xc58>)
 800454a:	f023 0301 	bic.w	r3, r3, #1
 800454e:	6213      	str	r3, [r2, #32]
 8004550:	4bbe      	ldr	r3, [pc, #760]	; (800484c <HAL_RCC_OscConfig+0xc58>)
 8004552:	6a1b      	ldr	r3, [r3, #32]
 8004554:	4abd      	ldr	r2, [pc, #756]	; (800484c <HAL_RCC_OscConfig+0xc58>)
 8004556:	f023 0304 	bic.w	r3, r3, #4
 800455a:	6213      	str	r3, [r2, #32]
 800455c:	e020      	b.n	80045a0 <HAL_RCC_OscConfig+0x9ac>
 800455e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004562:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	68db      	ldr	r3, [r3, #12]
 800456a:	2b05      	cmp	r3, #5
 800456c:	d10c      	bne.n	8004588 <HAL_RCC_OscConfig+0x994>
 800456e:	4bb7      	ldr	r3, [pc, #732]	; (800484c <HAL_RCC_OscConfig+0xc58>)
 8004570:	6a1b      	ldr	r3, [r3, #32]
 8004572:	4ab6      	ldr	r2, [pc, #728]	; (800484c <HAL_RCC_OscConfig+0xc58>)
 8004574:	f043 0304 	orr.w	r3, r3, #4
 8004578:	6213      	str	r3, [r2, #32]
 800457a:	4bb4      	ldr	r3, [pc, #720]	; (800484c <HAL_RCC_OscConfig+0xc58>)
 800457c:	6a1b      	ldr	r3, [r3, #32]
 800457e:	4ab3      	ldr	r2, [pc, #716]	; (800484c <HAL_RCC_OscConfig+0xc58>)
 8004580:	f043 0301 	orr.w	r3, r3, #1
 8004584:	6213      	str	r3, [r2, #32]
 8004586:	e00b      	b.n	80045a0 <HAL_RCC_OscConfig+0x9ac>
 8004588:	4bb0      	ldr	r3, [pc, #704]	; (800484c <HAL_RCC_OscConfig+0xc58>)
 800458a:	6a1b      	ldr	r3, [r3, #32]
 800458c:	4aaf      	ldr	r2, [pc, #700]	; (800484c <HAL_RCC_OscConfig+0xc58>)
 800458e:	f023 0301 	bic.w	r3, r3, #1
 8004592:	6213      	str	r3, [r2, #32]
 8004594:	4bad      	ldr	r3, [pc, #692]	; (800484c <HAL_RCC_OscConfig+0xc58>)
 8004596:	6a1b      	ldr	r3, [r3, #32]
 8004598:	4aac      	ldr	r2, [pc, #688]	; (800484c <HAL_RCC_OscConfig+0xc58>)
 800459a:	f023 0304 	bic.w	r3, r3, #4
 800459e:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80045a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80045a4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	68db      	ldr	r3, [r3, #12]
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	f000 8081 	beq.w	80046b4 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80045b2:	f7fd ffb7 	bl	8002524 <HAL_GetTick>
 80045b6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045ba:	e00b      	b.n	80045d4 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80045bc:	f7fd ffb2 	bl	8002524 <HAL_GetTick>
 80045c0:	4602      	mov	r2, r0
 80045c2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80045c6:	1ad3      	subs	r3, r2, r3
 80045c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80045cc:	4293      	cmp	r3, r2
 80045ce:	d901      	bls.n	80045d4 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 80045d0:	2303      	movs	r3, #3
 80045d2:	e345      	b.n	8004c60 <HAL_RCC_OscConfig+0x106c>
 80045d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80045d8:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80045dc:	2202      	movs	r2, #2
 80045de:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80045e4:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	fa93 f2a3 	rbit	r2, r3
 80045ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80045f2:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80045f6:	601a      	str	r2, [r3, #0]
 80045f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80045fc:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8004600:	2202      	movs	r2, #2
 8004602:	601a      	str	r2, [r3, #0]
 8004604:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004608:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	fa93 f2a3 	rbit	r2, r3
 8004612:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004616:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800461a:	601a      	str	r2, [r3, #0]
  return result;
 800461c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004620:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8004624:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004626:	fab3 f383 	clz	r3, r3
 800462a:	b2db      	uxtb	r3, r3
 800462c:	095b      	lsrs	r3, r3, #5
 800462e:	b2db      	uxtb	r3, r3
 8004630:	f043 0302 	orr.w	r3, r3, #2
 8004634:	b2db      	uxtb	r3, r3
 8004636:	2b02      	cmp	r3, #2
 8004638:	d102      	bne.n	8004640 <HAL_RCC_OscConfig+0xa4c>
 800463a:	4b84      	ldr	r3, [pc, #528]	; (800484c <HAL_RCC_OscConfig+0xc58>)
 800463c:	6a1b      	ldr	r3, [r3, #32]
 800463e:	e013      	b.n	8004668 <HAL_RCC_OscConfig+0xa74>
 8004640:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004644:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8004648:	2202      	movs	r2, #2
 800464a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800464c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004650:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	fa93 f2a3 	rbit	r2, r3
 800465a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800465e:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8004662:	601a      	str	r2, [r3, #0]
 8004664:	4b79      	ldr	r3, [pc, #484]	; (800484c <HAL_RCC_OscConfig+0xc58>)
 8004666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004668:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800466c:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8004670:	2102      	movs	r1, #2
 8004672:	6011      	str	r1, [r2, #0]
 8004674:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004678:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 800467c:	6812      	ldr	r2, [r2, #0]
 800467e:	fa92 f1a2 	rbit	r1, r2
 8004682:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004686:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800468a:	6011      	str	r1, [r2, #0]
  return result;
 800468c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004690:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8004694:	6812      	ldr	r2, [r2, #0]
 8004696:	fab2 f282 	clz	r2, r2
 800469a:	b2d2      	uxtb	r2, r2
 800469c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80046a0:	b2d2      	uxtb	r2, r2
 80046a2:	f002 021f 	and.w	r2, r2, #31
 80046a6:	2101      	movs	r1, #1
 80046a8:	fa01 f202 	lsl.w	r2, r1, r2
 80046ac:	4013      	ands	r3, r2
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d084      	beq.n	80045bc <HAL_RCC_OscConfig+0x9c8>
 80046b2:	e07f      	b.n	80047b4 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80046b4:	f7fd ff36 	bl	8002524 <HAL_GetTick>
 80046b8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80046bc:	e00b      	b.n	80046d6 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80046be:	f7fd ff31 	bl	8002524 <HAL_GetTick>
 80046c2:	4602      	mov	r2, r0
 80046c4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80046c8:	1ad3      	subs	r3, r2, r3
 80046ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80046ce:	4293      	cmp	r3, r2
 80046d0:	d901      	bls.n	80046d6 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 80046d2:	2303      	movs	r3, #3
 80046d4:	e2c4      	b.n	8004c60 <HAL_RCC_OscConfig+0x106c>
 80046d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80046da:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80046de:	2202      	movs	r2, #2
 80046e0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80046e6:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	fa93 f2a3 	rbit	r2, r3
 80046f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80046f4:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80046f8:	601a      	str	r2, [r3, #0]
 80046fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80046fe:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8004702:	2202      	movs	r2, #2
 8004704:	601a      	str	r2, [r3, #0]
 8004706:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800470a:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	fa93 f2a3 	rbit	r2, r3
 8004714:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004718:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800471c:	601a      	str	r2, [r3, #0]
  return result;
 800471e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004722:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8004726:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004728:	fab3 f383 	clz	r3, r3
 800472c:	b2db      	uxtb	r3, r3
 800472e:	095b      	lsrs	r3, r3, #5
 8004730:	b2db      	uxtb	r3, r3
 8004732:	f043 0302 	orr.w	r3, r3, #2
 8004736:	b2db      	uxtb	r3, r3
 8004738:	2b02      	cmp	r3, #2
 800473a:	d102      	bne.n	8004742 <HAL_RCC_OscConfig+0xb4e>
 800473c:	4b43      	ldr	r3, [pc, #268]	; (800484c <HAL_RCC_OscConfig+0xc58>)
 800473e:	6a1b      	ldr	r3, [r3, #32]
 8004740:	e013      	b.n	800476a <HAL_RCC_OscConfig+0xb76>
 8004742:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004746:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800474a:	2202      	movs	r2, #2
 800474c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800474e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004752:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	fa93 f2a3 	rbit	r2, r3
 800475c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004760:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8004764:	601a      	str	r2, [r3, #0]
 8004766:	4b39      	ldr	r3, [pc, #228]	; (800484c <HAL_RCC_OscConfig+0xc58>)
 8004768:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800476a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800476e:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8004772:	2102      	movs	r1, #2
 8004774:	6011      	str	r1, [r2, #0]
 8004776:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800477a:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 800477e:	6812      	ldr	r2, [r2, #0]
 8004780:	fa92 f1a2 	rbit	r1, r2
 8004784:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004788:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 800478c:	6011      	str	r1, [r2, #0]
  return result;
 800478e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004792:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8004796:	6812      	ldr	r2, [r2, #0]
 8004798:	fab2 f282 	clz	r2, r2
 800479c:	b2d2      	uxtb	r2, r2
 800479e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80047a2:	b2d2      	uxtb	r2, r2
 80047a4:	f002 021f 	and.w	r2, r2, #31
 80047a8:	2101      	movs	r1, #1
 80047aa:	fa01 f202 	lsl.w	r2, r1, r2
 80047ae:	4013      	ands	r3, r2
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d184      	bne.n	80046be <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80047b4:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 80047b8:	2b01      	cmp	r3, #1
 80047ba:	d105      	bne.n	80047c8 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80047bc:	4b23      	ldr	r3, [pc, #140]	; (800484c <HAL_RCC_OscConfig+0xc58>)
 80047be:	69db      	ldr	r3, [r3, #28]
 80047c0:	4a22      	ldr	r2, [pc, #136]	; (800484c <HAL_RCC_OscConfig+0xc58>)
 80047c2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80047c6:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80047c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80047cc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	69db      	ldr	r3, [r3, #28]
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	f000 8242 	beq.w	8004c5e <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80047da:	4b1c      	ldr	r3, [pc, #112]	; (800484c <HAL_RCC_OscConfig+0xc58>)
 80047dc:	685b      	ldr	r3, [r3, #4]
 80047de:	f003 030c 	and.w	r3, r3, #12
 80047e2:	2b08      	cmp	r3, #8
 80047e4:	f000 8213 	beq.w	8004c0e <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80047e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80047ec:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	69db      	ldr	r3, [r3, #28]
 80047f4:	2b02      	cmp	r3, #2
 80047f6:	f040 8162 	bne.w	8004abe <HAL_RCC_OscConfig+0xeca>
 80047fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80047fe:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8004802:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004806:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004808:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800480c:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	fa93 f2a3 	rbit	r2, r3
 8004816:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800481a:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800481e:	601a      	str	r2, [r3, #0]
  return result;
 8004820:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004824:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8004828:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800482a:	fab3 f383 	clz	r3, r3
 800482e:	b2db      	uxtb	r3, r3
 8004830:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004834:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004838:	009b      	lsls	r3, r3, #2
 800483a:	461a      	mov	r2, r3
 800483c:	2300      	movs	r3, #0
 800483e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004840:	f7fd fe70 	bl	8002524 <HAL_GetTick>
 8004844:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004848:	e00c      	b.n	8004864 <HAL_RCC_OscConfig+0xc70>
 800484a:	bf00      	nop
 800484c:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004850:	f7fd fe68 	bl	8002524 <HAL_GetTick>
 8004854:	4602      	mov	r2, r0
 8004856:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800485a:	1ad3      	subs	r3, r2, r3
 800485c:	2b02      	cmp	r3, #2
 800485e:	d901      	bls.n	8004864 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8004860:	2303      	movs	r3, #3
 8004862:	e1fd      	b.n	8004c60 <HAL_RCC_OscConfig+0x106c>
 8004864:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004868:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800486c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004870:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004872:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004876:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	fa93 f2a3 	rbit	r2, r3
 8004880:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004884:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8004888:	601a      	str	r2, [r3, #0]
  return result;
 800488a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800488e:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8004892:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004894:	fab3 f383 	clz	r3, r3
 8004898:	b2db      	uxtb	r3, r3
 800489a:	095b      	lsrs	r3, r3, #5
 800489c:	b2db      	uxtb	r3, r3
 800489e:	f043 0301 	orr.w	r3, r3, #1
 80048a2:	b2db      	uxtb	r3, r3
 80048a4:	2b01      	cmp	r3, #1
 80048a6:	d102      	bne.n	80048ae <HAL_RCC_OscConfig+0xcba>
 80048a8:	4bb0      	ldr	r3, [pc, #704]	; (8004b6c <HAL_RCC_OscConfig+0xf78>)
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	e027      	b.n	80048fe <HAL_RCC_OscConfig+0xd0a>
 80048ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80048b2:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80048b6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80048ba:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80048c0:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	fa93 f2a3 	rbit	r2, r3
 80048ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80048ce:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80048d2:	601a      	str	r2, [r3, #0]
 80048d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80048d8:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80048dc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80048e0:	601a      	str	r2, [r3, #0]
 80048e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80048e6:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	fa93 f2a3 	rbit	r2, r3
 80048f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80048f4:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80048f8:	601a      	str	r2, [r3, #0]
 80048fa:	4b9c      	ldr	r3, [pc, #624]	; (8004b6c <HAL_RCC_OscConfig+0xf78>)
 80048fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048fe:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004902:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8004906:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800490a:	6011      	str	r1, [r2, #0]
 800490c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004910:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8004914:	6812      	ldr	r2, [r2, #0]
 8004916:	fa92 f1a2 	rbit	r1, r2
 800491a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800491e:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8004922:	6011      	str	r1, [r2, #0]
  return result;
 8004924:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004928:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 800492c:	6812      	ldr	r2, [r2, #0]
 800492e:	fab2 f282 	clz	r2, r2
 8004932:	b2d2      	uxtb	r2, r2
 8004934:	f042 0220 	orr.w	r2, r2, #32
 8004938:	b2d2      	uxtb	r2, r2
 800493a:	f002 021f 	and.w	r2, r2, #31
 800493e:	2101      	movs	r1, #1
 8004940:	fa01 f202 	lsl.w	r2, r1, r2
 8004944:	4013      	ands	r3, r2
 8004946:	2b00      	cmp	r3, #0
 8004948:	d182      	bne.n	8004850 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800494a:	4b88      	ldr	r3, [pc, #544]	; (8004b6c <HAL_RCC_OscConfig+0xf78>)
 800494c:	685b      	ldr	r3, [r3, #4]
 800494e:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004952:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004956:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800495e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004962:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	6a1b      	ldr	r3, [r3, #32]
 800496a:	430b      	orrs	r3, r1
 800496c:	497f      	ldr	r1, [pc, #508]	; (8004b6c <HAL_RCC_OscConfig+0xf78>)
 800496e:	4313      	orrs	r3, r2
 8004970:	604b      	str	r3, [r1, #4]
 8004972:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004976:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 800497a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800497e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004980:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004984:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	fa93 f2a3 	rbit	r2, r3
 800498e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004992:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8004996:	601a      	str	r2, [r3, #0]
  return result;
 8004998:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800499c:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80049a0:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80049a2:	fab3 f383 	clz	r3, r3
 80049a6:	b2db      	uxtb	r3, r3
 80049a8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80049ac:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80049b0:	009b      	lsls	r3, r3, #2
 80049b2:	461a      	mov	r2, r3
 80049b4:	2301      	movs	r3, #1
 80049b6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049b8:	f7fd fdb4 	bl	8002524 <HAL_GetTick>
 80049bc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80049c0:	e009      	b.n	80049d6 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80049c2:	f7fd fdaf 	bl	8002524 <HAL_GetTick>
 80049c6:	4602      	mov	r2, r0
 80049c8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80049cc:	1ad3      	subs	r3, r2, r3
 80049ce:	2b02      	cmp	r3, #2
 80049d0:	d901      	bls.n	80049d6 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 80049d2:	2303      	movs	r3, #3
 80049d4:	e144      	b.n	8004c60 <HAL_RCC_OscConfig+0x106c>
 80049d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80049da:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80049de:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80049e2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80049e8:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	fa93 f2a3 	rbit	r2, r3
 80049f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80049f6:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80049fa:	601a      	str	r2, [r3, #0]
  return result;
 80049fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a00:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8004a04:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004a06:	fab3 f383 	clz	r3, r3
 8004a0a:	b2db      	uxtb	r3, r3
 8004a0c:	095b      	lsrs	r3, r3, #5
 8004a0e:	b2db      	uxtb	r3, r3
 8004a10:	f043 0301 	orr.w	r3, r3, #1
 8004a14:	b2db      	uxtb	r3, r3
 8004a16:	2b01      	cmp	r3, #1
 8004a18:	d102      	bne.n	8004a20 <HAL_RCC_OscConfig+0xe2c>
 8004a1a:	4b54      	ldr	r3, [pc, #336]	; (8004b6c <HAL_RCC_OscConfig+0xf78>)
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	e027      	b.n	8004a70 <HAL_RCC_OscConfig+0xe7c>
 8004a20:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a24:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8004a28:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004a2c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a2e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a32:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	fa93 f2a3 	rbit	r2, r3
 8004a3c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a40:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8004a44:	601a      	str	r2, [r3, #0]
 8004a46:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a4a:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8004a4e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004a52:	601a      	str	r2, [r3, #0]
 8004a54:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a58:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	fa93 f2a3 	rbit	r2, r3
 8004a62:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a66:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8004a6a:	601a      	str	r2, [r3, #0]
 8004a6c:	4b3f      	ldr	r3, [pc, #252]	; (8004b6c <HAL_RCC_OscConfig+0xf78>)
 8004a6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a70:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004a74:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8004a78:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004a7c:	6011      	str	r1, [r2, #0]
 8004a7e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004a82:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8004a86:	6812      	ldr	r2, [r2, #0]
 8004a88:	fa92 f1a2 	rbit	r1, r2
 8004a8c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004a90:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8004a94:	6011      	str	r1, [r2, #0]
  return result;
 8004a96:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004a9a:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8004a9e:	6812      	ldr	r2, [r2, #0]
 8004aa0:	fab2 f282 	clz	r2, r2
 8004aa4:	b2d2      	uxtb	r2, r2
 8004aa6:	f042 0220 	orr.w	r2, r2, #32
 8004aaa:	b2d2      	uxtb	r2, r2
 8004aac:	f002 021f 	and.w	r2, r2, #31
 8004ab0:	2101      	movs	r1, #1
 8004ab2:	fa01 f202 	lsl.w	r2, r1, r2
 8004ab6:	4013      	ands	r3, r2
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d082      	beq.n	80049c2 <HAL_RCC_OscConfig+0xdce>
 8004abc:	e0cf      	b.n	8004c5e <HAL_RCC_OscConfig+0x106a>
 8004abe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ac2:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8004ac6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004aca:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004acc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ad0:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	fa93 f2a3 	rbit	r2, r3
 8004ada:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ade:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8004ae2:	601a      	str	r2, [r3, #0]
  return result;
 8004ae4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ae8:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8004aec:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004aee:	fab3 f383 	clz	r3, r3
 8004af2:	b2db      	uxtb	r3, r3
 8004af4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004af8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004afc:	009b      	lsls	r3, r3, #2
 8004afe:	461a      	mov	r2, r3
 8004b00:	2300      	movs	r3, #0
 8004b02:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b04:	f7fd fd0e 	bl	8002524 <HAL_GetTick>
 8004b08:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004b0c:	e009      	b.n	8004b22 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004b0e:	f7fd fd09 	bl	8002524 <HAL_GetTick>
 8004b12:	4602      	mov	r2, r0
 8004b14:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004b18:	1ad3      	subs	r3, r2, r3
 8004b1a:	2b02      	cmp	r3, #2
 8004b1c:	d901      	bls.n	8004b22 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8004b1e:	2303      	movs	r3, #3
 8004b20:	e09e      	b.n	8004c60 <HAL_RCC_OscConfig+0x106c>
 8004b22:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b26:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8004b2a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004b2e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b30:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b34:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	fa93 f2a3 	rbit	r2, r3
 8004b3e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b42:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8004b46:	601a      	str	r2, [r3, #0]
  return result;
 8004b48:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b4c:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8004b50:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004b52:	fab3 f383 	clz	r3, r3
 8004b56:	b2db      	uxtb	r3, r3
 8004b58:	095b      	lsrs	r3, r3, #5
 8004b5a:	b2db      	uxtb	r3, r3
 8004b5c:	f043 0301 	orr.w	r3, r3, #1
 8004b60:	b2db      	uxtb	r3, r3
 8004b62:	2b01      	cmp	r3, #1
 8004b64:	d104      	bne.n	8004b70 <HAL_RCC_OscConfig+0xf7c>
 8004b66:	4b01      	ldr	r3, [pc, #4]	; (8004b6c <HAL_RCC_OscConfig+0xf78>)
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	e029      	b.n	8004bc0 <HAL_RCC_OscConfig+0xfcc>
 8004b6c:	40021000 	.word	0x40021000
 8004b70:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b74:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8004b78:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004b7c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b7e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b82:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	fa93 f2a3 	rbit	r2, r3
 8004b8c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b90:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8004b94:	601a      	str	r2, [r3, #0]
 8004b96:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b9a:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8004b9e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004ba2:	601a      	str	r2, [r3, #0]
 8004ba4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ba8:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	fa93 f2a3 	rbit	r2, r3
 8004bb2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004bb6:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8004bba:	601a      	str	r2, [r3, #0]
 8004bbc:	4b2b      	ldr	r3, [pc, #172]	; (8004c6c <HAL_RCC_OscConfig+0x1078>)
 8004bbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bc0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004bc4:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8004bc8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004bcc:	6011      	str	r1, [r2, #0]
 8004bce:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004bd2:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8004bd6:	6812      	ldr	r2, [r2, #0]
 8004bd8:	fa92 f1a2 	rbit	r1, r2
 8004bdc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004be0:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8004be4:	6011      	str	r1, [r2, #0]
  return result;
 8004be6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004bea:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8004bee:	6812      	ldr	r2, [r2, #0]
 8004bf0:	fab2 f282 	clz	r2, r2
 8004bf4:	b2d2      	uxtb	r2, r2
 8004bf6:	f042 0220 	orr.w	r2, r2, #32
 8004bfa:	b2d2      	uxtb	r2, r2
 8004bfc:	f002 021f 	and.w	r2, r2, #31
 8004c00:	2101      	movs	r1, #1
 8004c02:	fa01 f202 	lsl.w	r2, r1, r2
 8004c06:	4013      	ands	r3, r2
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d180      	bne.n	8004b0e <HAL_RCC_OscConfig+0xf1a>
 8004c0c:	e027      	b.n	8004c5e <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004c0e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004c12:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	69db      	ldr	r3, [r3, #28]
 8004c1a:	2b01      	cmp	r3, #1
 8004c1c:	d101      	bne.n	8004c22 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8004c1e:	2301      	movs	r3, #1
 8004c20:	e01e      	b.n	8004c60 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004c22:	4b12      	ldr	r3, [pc, #72]	; (8004c6c <HAL_RCC_OscConfig+0x1078>)
 8004c24:	685b      	ldr	r3, [r3, #4]
 8004c26:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004c2a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8004c2e:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004c32:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004c36:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	6a1b      	ldr	r3, [r3, #32]
 8004c3e:	429a      	cmp	r2, r3
 8004c40:	d10b      	bne.n	8004c5a <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8004c42:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8004c46:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004c4a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004c4e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004c56:	429a      	cmp	r2, r3
 8004c58:	d001      	beq.n	8004c5e <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8004c5a:	2301      	movs	r3, #1
 8004c5c:	e000      	b.n	8004c60 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8004c5e:	2300      	movs	r3, #0
}
 8004c60:	4618      	mov	r0, r3
 8004c62:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8004c66:	46bd      	mov	sp, r7
 8004c68:	bd80      	pop	{r7, pc}
 8004c6a:	bf00      	nop
 8004c6c:	40021000 	.word	0x40021000

08004c70 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004c70:	b580      	push	{r7, lr}
 8004c72:	b09e      	sub	sp, #120	; 0x78
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	6078      	str	r0, [r7, #4]
 8004c78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8004c7a:	2300      	movs	r3, #0
 8004c7c:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d101      	bne.n	8004c88 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004c84:	2301      	movs	r3, #1
 8004c86:	e162      	b.n	8004f4e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004c88:	4b90      	ldr	r3, [pc, #576]	; (8004ecc <HAL_RCC_ClockConfig+0x25c>)
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f003 0307 	and.w	r3, r3, #7
 8004c90:	683a      	ldr	r2, [r7, #0]
 8004c92:	429a      	cmp	r2, r3
 8004c94:	d910      	bls.n	8004cb8 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c96:	4b8d      	ldr	r3, [pc, #564]	; (8004ecc <HAL_RCC_ClockConfig+0x25c>)
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f023 0207 	bic.w	r2, r3, #7
 8004c9e:	498b      	ldr	r1, [pc, #556]	; (8004ecc <HAL_RCC_ClockConfig+0x25c>)
 8004ca0:	683b      	ldr	r3, [r7, #0]
 8004ca2:	4313      	orrs	r3, r2
 8004ca4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ca6:	4b89      	ldr	r3, [pc, #548]	; (8004ecc <HAL_RCC_ClockConfig+0x25c>)
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	f003 0307 	and.w	r3, r3, #7
 8004cae:	683a      	ldr	r2, [r7, #0]
 8004cb0:	429a      	cmp	r2, r3
 8004cb2:	d001      	beq.n	8004cb8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004cb4:	2301      	movs	r3, #1
 8004cb6:	e14a      	b.n	8004f4e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f003 0302 	and.w	r3, r3, #2
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d008      	beq.n	8004cd6 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004cc4:	4b82      	ldr	r3, [pc, #520]	; (8004ed0 <HAL_RCC_ClockConfig+0x260>)
 8004cc6:	685b      	ldr	r3, [r3, #4]
 8004cc8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	689b      	ldr	r3, [r3, #8]
 8004cd0:	497f      	ldr	r1, [pc, #508]	; (8004ed0 <HAL_RCC_ClockConfig+0x260>)
 8004cd2:	4313      	orrs	r3, r2
 8004cd4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f003 0301 	and.w	r3, r3, #1
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	f000 80dc 	beq.w	8004e9c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	685b      	ldr	r3, [r3, #4]
 8004ce8:	2b01      	cmp	r3, #1
 8004cea:	d13c      	bne.n	8004d66 <HAL_RCC_ClockConfig+0xf6>
 8004cec:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004cf0:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cf2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004cf4:	fa93 f3a3 	rbit	r3, r3
 8004cf8:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8004cfa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004cfc:	fab3 f383 	clz	r3, r3
 8004d00:	b2db      	uxtb	r3, r3
 8004d02:	095b      	lsrs	r3, r3, #5
 8004d04:	b2db      	uxtb	r3, r3
 8004d06:	f043 0301 	orr.w	r3, r3, #1
 8004d0a:	b2db      	uxtb	r3, r3
 8004d0c:	2b01      	cmp	r3, #1
 8004d0e:	d102      	bne.n	8004d16 <HAL_RCC_ClockConfig+0xa6>
 8004d10:	4b6f      	ldr	r3, [pc, #444]	; (8004ed0 <HAL_RCC_ClockConfig+0x260>)
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	e00f      	b.n	8004d36 <HAL_RCC_ClockConfig+0xc6>
 8004d16:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004d1a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d1c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004d1e:	fa93 f3a3 	rbit	r3, r3
 8004d22:	667b      	str	r3, [r7, #100]	; 0x64
 8004d24:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004d28:	663b      	str	r3, [r7, #96]	; 0x60
 8004d2a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004d2c:	fa93 f3a3 	rbit	r3, r3
 8004d30:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004d32:	4b67      	ldr	r3, [pc, #412]	; (8004ed0 <HAL_RCC_ClockConfig+0x260>)
 8004d34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d36:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004d3a:	65ba      	str	r2, [r7, #88]	; 0x58
 8004d3c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004d3e:	fa92 f2a2 	rbit	r2, r2
 8004d42:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8004d44:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004d46:	fab2 f282 	clz	r2, r2
 8004d4a:	b2d2      	uxtb	r2, r2
 8004d4c:	f042 0220 	orr.w	r2, r2, #32
 8004d50:	b2d2      	uxtb	r2, r2
 8004d52:	f002 021f 	and.w	r2, r2, #31
 8004d56:	2101      	movs	r1, #1
 8004d58:	fa01 f202 	lsl.w	r2, r1, r2
 8004d5c:	4013      	ands	r3, r2
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d17b      	bne.n	8004e5a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004d62:	2301      	movs	r3, #1
 8004d64:	e0f3      	b.n	8004f4e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	685b      	ldr	r3, [r3, #4]
 8004d6a:	2b02      	cmp	r3, #2
 8004d6c:	d13c      	bne.n	8004de8 <HAL_RCC_ClockConfig+0x178>
 8004d6e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004d72:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d74:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004d76:	fa93 f3a3 	rbit	r3, r3
 8004d7a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8004d7c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d7e:	fab3 f383 	clz	r3, r3
 8004d82:	b2db      	uxtb	r3, r3
 8004d84:	095b      	lsrs	r3, r3, #5
 8004d86:	b2db      	uxtb	r3, r3
 8004d88:	f043 0301 	orr.w	r3, r3, #1
 8004d8c:	b2db      	uxtb	r3, r3
 8004d8e:	2b01      	cmp	r3, #1
 8004d90:	d102      	bne.n	8004d98 <HAL_RCC_ClockConfig+0x128>
 8004d92:	4b4f      	ldr	r3, [pc, #316]	; (8004ed0 <HAL_RCC_ClockConfig+0x260>)
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	e00f      	b.n	8004db8 <HAL_RCC_ClockConfig+0x148>
 8004d98:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004d9c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d9e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004da0:	fa93 f3a3 	rbit	r3, r3
 8004da4:	647b      	str	r3, [r7, #68]	; 0x44
 8004da6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004daa:	643b      	str	r3, [r7, #64]	; 0x40
 8004dac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004dae:	fa93 f3a3 	rbit	r3, r3
 8004db2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004db4:	4b46      	ldr	r3, [pc, #280]	; (8004ed0 <HAL_RCC_ClockConfig+0x260>)
 8004db6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004db8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004dbc:	63ba      	str	r2, [r7, #56]	; 0x38
 8004dbe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004dc0:	fa92 f2a2 	rbit	r2, r2
 8004dc4:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8004dc6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004dc8:	fab2 f282 	clz	r2, r2
 8004dcc:	b2d2      	uxtb	r2, r2
 8004dce:	f042 0220 	orr.w	r2, r2, #32
 8004dd2:	b2d2      	uxtb	r2, r2
 8004dd4:	f002 021f 	and.w	r2, r2, #31
 8004dd8:	2101      	movs	r1, #1
 8004dda:	fa01 f202 	lsl.w	r2, r1, r2
 8004dde:	4013      	ands	r3, r2
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d13a      	bne.n	8004e5a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004de4:	2301      	movs	r3, #1
 8004de6:	e0b2      	b.n	8004f4e <HAL_RCC_ClockConfig+0x2de>
 8004de8:	2302      	movs	r3, #2
 8004dea:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004dec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dee:	fa93 f3a3 	rbit	r3, r3
 8004df2:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8004df4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004df6:	fab3 f383 	clz	r3, r3
 8004dfa:	b2db      	uxtb	r3, r3
 8004dfc:	095b      	lsrs	r3, r3, #5
 8004dfe:	b2db      	uxtb	r3, r3
 8004e00:	f043 0301 	orr.w	r3, r3, #1
 8004e04:	b2db      	uxtb	r3, r3
 8004e06:	2b01      	cmp	r3, #1
 8004e08:	d102      	bne.n	8004e10 <HAL_RCC_ClockConfig+0x1a0>
 8004e0a:	4b31      	ldr	r3, [pc, #196]	; (8004ed0 <HAL_RCC_ClockConfig+0x260>)
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	e00d      	b.n	8004e2c <HAL_RCC_ClockConfig+0x1bc>
 8004e10:	2302      	movs	r3, #2
 8004e12:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e16:	fa93 f3a3 	rbit	r3, r3
 8004e1a:	627b      	str	r3, [r7, #36]	; 0x24
 8004e1c:	2302      	movs	r3, #2
 8004e1e:	623b      	str	r3, [r7, #32]
 8004e20:	6a3b      	ldr	r3, [r7, #32]
 8004e22:	fa93 f3a3 	rbit	r3, r3
 8004e26:	61fb      	str	r3, [r7, #28]
 8004e28:	4b29      	ldr	r3, [pc, #164]	; (8004ed0 <HAL_RCC_ClockConfig+0x260>)
 8004e2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e2c:	2202      	movs	r2, #2
 8004e2e:	61ba      	str	r2, [r7, #24]
 8004e30:	69ba      	ldr	r2, [r7, #24]
 8004e32:	fa92 f2a2 	rbit	r2, r2
 8004e36:	617a      	str	r2, [r7, #20]
  return result;
 8004e38:	697a      	ldr	r2, [r7, #20]
 8004e3a:	fab2 f282 	clz	r2, r2
 8004e3e:	b2d2      	uxtb	r2, r2
 8004e40:	f042 0220 	orr.w	r2, r2, #32
 8004e44:	b2d2      	uxtb	r2, r2
 8004e46:	f002 021f 	and.w	r2, r2, #31
 8004e4a:	2101      	movs	r1, #1
 8004e4c:	fa01 f202 	lsl.w	r2, r1, r2
 8004e50:	4013      	ands	r3, r2
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d101      	bne.n	8004e5a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004e56:	2301      	movs	r3, #1
 8004e58:	e079      	b.n	8004f4e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004e5a:	4b1d      	ldr	r3, [pc, #116]	; (8004ed0 <HAL_RCC_ClockConfig+0x260>)
 8004e5c:	685b      	ldr	r3, [r3, #4]
 8004e5e:	f023 0203 	bic.w	r2, r3, #3
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	685b      	ldr	r3, [r3, #4]
 8004e66:	491a      	ldr	r1, [pc, #104]	; (8004ed0 <HAL_RCC_ClockConfig+0x260>)
 8004e68:	4313      	orrs	r3, r2
 8004e6a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004e6c:	f7fd fb5a 	bl	8002524 <HAL_GetTick>
 8004e70:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e72:	e00a      	b.n	8004e8a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004e74:	f7fd fb56 	bl	8002524 <HAL_GetTick>
 8004e78:	4602      	mov	r2, r0
 8004e7a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004e7c:	1ad3      	subs	r3, r2, r3
 8004e7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e82:	4293      	cmp	r3, r2
 8004e84:	d901      	bls.n	8004e8a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8004e86:	2303      	movs	r3, #3
 8004e88:	e061      	b.n	8004f4e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e8a:	4b11      	ldr	r3, [pc, #68]	; (8004ed0 <HAL_RCC_ClockConfig+0x260>)
 8004e8c:	685b      	ldr	r3, [r3, #4]
 8004e8e:	f003 020c 	and.w	r2, r3, #12
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	685b      	ldr	r3, [r3, #4]
 8004e96:	009b      	lsls	r3, r3, #2
 8004e98:	429a      	cmp	r2, r3
 8004e9a:	d1eb      	bne.n	8004e74 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004e9c:	4b0b      	ldr	r3, [pc, #44]	; (8004ecc <HAL_RCC_ClockConfig+0x25c>)
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f003 0307 	and.w	r3, r3, #7
 8004ea4:	683a      	ldr	r2, [r7, #0]
 8004ea6:	429a      	cmp	r2, r3
 8004ea8:	d214      	bcs.n	8004ed4 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004eaa:	4b08      	ldr	r3, [pc, #32]	; (8004ecc <HAL_RCC_ClockConfig+0x25c>)
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	f023 0207 	bic.w	r2, r3, #7
 8004eb2:	4906      	ldr	r1, [pc, #24]	; (8004ecc <HAL_RCC_ClockConfig+0x25c>)
 8004eb4:	683b      	ldr	r3, [r7, #0]
 8004eb6:	4313      	orrs	r3, r2
 8004eb8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004eba:	4b04      	ldr	r3, [pc, #16]	; (8004ecc <HAL_RCC_ClockConfig+0x25c>)
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	f003 0307 	and.w	r3, r3, #7
 8004ec2:	683a      	ldr	r2, [r7, #0]
 8004ec4:	429a      	cmp	r2, r3
 8004ec6:	d005      	beq.n	8004ed4 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8004ec8:	2301      	movs	r3, #1
 8004eca:	e040      	b.n	8004f4e <HAL_RCC_ClockConfig+0x2de>
 8004ecc:	40022000 	.word	0x40022000
 8004ed0:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f003 0304 	and.w	r3, r3, #4
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d008      	beq.n	8004ef2 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004ee0:	4b1d      	ldr	r3, [pc, #116]	; (8004f58 <HAL_RCC_ClockConfig+0x2e8>)
 8004ee2:	685b      	ldr	r3, [r3, #4]
 8004ee4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	68db      	ldr	r3, [r3, #12]
 8004eec:	491a      	ldr	r1, [pc, #104]	; (8004f58 <HAL_RCC_ClockConfig+0x2e8>)
 8004eee:	4313      	orrs	r3, r2
 8004ef0:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	f003 0308 	and.w	r3, r3, #8
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d009      	beq.n	8004f12 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004efe:	4b16      	ldr	r3, [pc, #88]	; (8004f58 <HAL_RCC_ClockConfig+0x2e8>)
 8004f00:	685b      	ldr	r3, [r3, #4]
 8004f02:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	691b      	ldr	r3, [r3, #16]
 8004f0a:	00db      	lsls	r3, r3, #3
 8004f0c:	4912      	ldr	r1, [pc, #72]	; (8004f58 <HAL_RCC_ClockConfig+0x2e8>)
 8004f0e:	4313      	orrs	r3, r2
 8004f10:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8004f12:	f000 f829 	bl	8004f68 <HAL_RCC_GetSysClockFreq>
 8004f16:	4601      	mov	r1, r0
 8004f18:	4b0f      	ldr	r3, [pc, #60]	; (8004f58 <HAL_RCC_ClockConfig+0x2e8>)
 8004f1a:	685b      	ldr	r3, [r3, #4]
 8004f1c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004f20:	22f0      	movs	r2, #240	; 0xf0
 8004f22:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f24:	693a      	ldr	r2, [r7, #16]
 8004f26:	fa92 f2a2 	rbit	r2, r2
 8004f2a:	60fa      	str	r2, [r7, #12]
  return result;
 8004f2c:	68fa      	ldr	r2, [r7, #12]
 8004f2e:	fab2 f282 	clz	r2, r2
 8004f32:	b2d2      	uxtb	r2, r2
 8004f34:	40d3      	lsrs	r3, r2
 8004f36:	4a09      	ldr	r2, [pc, #36]	; (8004f5c <HAL_RCC_ClockConfig+0x2ec>)
 8004f38:	5cd3      	ldrb	r3, [r2, r3]
 8004f3a:	fa21 f303 	lsr.w	r3, r1, r3
 8004f3e:	4a08      	ldr	r2, [pc, #32]	; (8004f60 <HAL_RCC_ClockConfig+0x2f0>)
 8004f40:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8004f42:	4b08      	ldr	r3, [pc, #32]	; (8004f64 <HAL_RCC_ClockConfig+0x2f4>)
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	4618      	mov	r0, r3
 8004f48:	f7fd faa8 	bl	800249c <HAL_InitTick>
  
  return HAL_OK;
 8004f4c:	2300      	movs	r3, #0
}
 8004f4e:	4618      	mov	r0, r3
 8004f50:	3778      	adds	r7, #120	; 0x78
 8004f52:	46bd      	mov	sp, r7
 8004f54:	bd80      	pop	{r7, pc}
 8004f56:	bf00      	nop
 8004f58:	40021000 	.word	0x40021000
 8004f5c:	08008b0c 	.word	0x08008b0c
 8004f60:	20002780 	.word	0x20002780
 8004f64:	20002784 	.word	0x20002784

08004f68 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004f68:	b480      	push	{r7}
 8004f6a:	b08b      	sub	sp, #44	; 0x2c
 8004f6c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004f6e:	2300      	movs	r3, #0
 8004f70:	61fb      	str	r3, [r7, #28]
 8004f72:	2300      	movs	r3, #0
 8004f74:	61bb      	str	r3, [r7, #24]
 8004f76:	2300      	movs	r3, #0
 8004f78:	627b      	str	r3, [r7, #36]	; 0x24
 8004f7a:	2300      	movs	r3, #0
 8004f7c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004f7e:	2300      	movs	r3, #0
 8004f80:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8004f82:	4b29      	ldr	r3, [pc, #164]	; (8005028 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004f84:	685b      	ldr	r3, [r3, #4]
 8004f86:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004f88:	69fb      	ldr	r3, [r7, #28]
 8004f8a:	f003 030c 	and.w	r3, r3, #12
 8004f8e:	2b04      	cmp	r3, #4
 8004f90:	d002      	beq.n	8004f98 <HAL_RCC_GetSysClockFreq+0x30>
 8004f92:	2b08      	cmp	r3, #8
 8004f94:	d003      	beq.n	8004f9e <HAL_RCC_GetSysClockFreq+0x36>
 8004f96:	e03c      	b.n	8005012 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004f98:	4b24      	ldr	r3, [pc, #144]	; (800502c <HAL_RCC_GetSysClockFreq+0xc4>)
 8004f9a:	623b      	str	r3, [r7, #32]
      break;
 8004f9c:	e03c      	b.n	8005018 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8004f9e:	69fb      	ldr	r3, [r7, #28]
 8004fa0:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8004fa4:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8004fa8:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004faa:	68ba      	ldr	r2, [r7, #8]
 8004fac:	fa92 f2a2 	rbit	r2, r2
 8004fb0:	607a      	str	r2, [r7, #4]
  return result;
 8004fb2:	687a      	ldr	r2, [r7, #4]
 8004fb4:	fab2 f282 	clz	r2, r2
 8004fb8:	b2d2      	uxtb	r2, r2
 8004fba:	40d3      	lsrs	r3, r2
 8004fbc:	4a1c      	ldr	r2, [pc, #112]	; (8005030 <HAL_RCC_GetSysClockFreq+0xc8>)
 8004fbe:	5cd3      	ldrb	r3, [r2, r3]
 8004fc0:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8004fc2:	4b19      	ldr	r3, [pc, #100]	; (8005028 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004fc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fc6:	f003 030f 	and.w	r3, r3, #15
 8004fca:	220f      	movs	r2, #15
 8004fcc:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004fce:	693a      	ldr	r2, [r7, #16]
 8004fd0:	fa92 f2a2 	rbit	r2, r2
 8004fd4:	60fa      	str	r2, [r7, #12]
  return result;
 8004fd6:	68fa      	ldr	r2, [r7, #12]
 8004fd8:	fab2 f282 	clz	r2, r2
 8004fdc:	b2d2      	uxtb	r2, r2
 8004fde:	40d3      	lsrs	r3, r2
 8004fe0:	4a14      	ldr	r2, [pc, #80]	; (8005034 <HAL_RCC_GetSysClockFreq+0xcc>)
 8004fe2:	5cd3      	ldrb	r3, [r2, r3]
 8004fe4:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8004fe6:	69fb      	ldr	r3, [r7, #28]
 8004fe8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d008      	beq.n	8005002 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004ff0:	4a0e      	ldr	r2, [pc, #56]	; (800502c <HAL_RCC_GetSysClockFreq+0xc4>)
 8004ff2:	69bb      	ldr	r3, [r7, #24]
 8004ff4:	fbb2 f2f3 	udiv	r2, r2, r3
 8004ff8:	697b      	ldr	r3, [r7, #20]
 8004ffa:	fb02 f303 	mul.w	r3, r2, r3
 8004ffe:	627b      	str	r3, [r7, #36]	; 0x24
 8005000:	e004      	b.n	800500c <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8005002:	697b      	ldr	r3, [r7, #20]
 8005004:	4a0c      	ldr	r2, [pc, #48]	; (8005038 <HAL_RCC_GetSysClockFreq+0xd0>)
 8005006:	fb02 f303 	mul.w	r3, r2, r3
 800500a:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 800500c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800500e:	623b      	str	r3, [r7, #32]
      break;
 8005010:	e002      	b.n	8005018 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005012:	4b06      	ldr	r3, [pc, #24]	; (800502c <HAL_RCC_GetSysClockFreq+0xc4>)
 8005014:	623b      	str	r3, [r7, #32]
      break;
 8005016:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005018:	6a3b      	ldr	r3, [r7, #32]
}
 800501a:	4618      	mov	r0, r3
 800501c:	372c      	adds	r7, #44	; 0x2c
 800501e:	46bd      	mov	sp, r7
 8005020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005024:	4770      	bx	lr
 8005026:	bf00      	nop
 8005028:	40021000 	.word	0x40021000
 800502c:	007a1200 	.word	0x007a1200
 8005030:	08008b24 	.word	0x08008b24
 8005034:	08008b34 	.word	0x08008b34
 8005038:	003d0900 	.word	0x003d0900

0800503c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800503c:	b480      	push	{r7}
 800503e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005040:	4b03      	ldr	r3, [pc, #12]	; (8005050 <HAL_RCC_GetHCLKFreq+0x14>)
 8005042:	681b      	ldr	r3, [r3, #0]
}
 8005044:	4618      	mov	r0, r3
 8005046:	46bd      	mov	sp, r7
 8005048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504c:	4770      	bx	lr
 800504e:	bf00      	nop
 8005050:	20002780 	.word	0x20002780

08005054 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005054:	b580      	push	{r7, lr}
 8005056:	b082      	sub	sp, #8
 8005058:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800505a:	f7ff ffef 	bl	800503c <HAL_RCC_GetHCLKFreq>
 800505e:	4601      	mov	r1, r0
 8005060:	4b0b      	ldr	r3, [pc, #44]	; (8005090 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8005062:	685b      	ldr	r3, [r3, #4]
 8005064:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005068:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800506c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800506e:	687a      	ldr	r2, [r7, #4]
 8005070:	fa92 f2a2 	rbit	r2, r2
 8005074:	603a      	str	r2, [r7, #0]
  return result;
 8005076:	683a      	ldr	r2, [r7, #0]
 8005078:	fab2 f282 	clz	r2, r2
 800507c:	b2d2      	uxtb	r2, r2
 800507e:	40d3      	lsrs	r3, r2
 8005080:	4a04      	ldr	r2, [pc, #16]	; (8005094 <HAL_RCC_GetPCLK1Freq+0x40>)
 8005082:	5cd3      	ldrb	r3, [r2, r3]
 8005084:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8005088:	4618      	mov	r0, r3
 800508a:	3708      	adds	r7, #8
 800508c:	46bd      	mov	sp, r7
 800508e:	bd80      	pop	{r7, pc}
 8005090:	40021000 	.word	0x40021000
 8005094:	08008b1c 	.word	0x08008b1c

08005098 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005098:	b580      	push	{r7, lr}
 800509a:	b082      	sub	sp, #8
 800509c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800509e:	f7ff ffcd 	bl	800503c <HAL_RCC_GetHCLKFreq>
 80050a2:	4601      	mov	r1, r0
 80050a4:	4b0b      	ldr	r3, [pc, #44]	; (80050d4 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80050a6:	685b      	ldr	r3, [r3, #4]
 80050a8:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80050ac:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80050b0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050b2:	687a      	ldr	r2, [r7, #4]
 80050b4:	fa92 f2a2 	rbit	r2, r2
 80050b8:	603a      	str	r2, [r7, #0]
  return result;
 80050ba:	683a      	ldr	r2, [r7, #0]
 80050bc:	fab2 f282 	clz	r2, r2
 80050c0:	b2d2      	uxtb	r2, r2
 80050c2:	40d3      	lsrs	r3, r2
 80050c4:	4a04      	ldr	r2, [pc, #16]	; (80050d8 <HAL_RCC_GetPCLK2Freq+0x40>)
 80050c6:	5cd3      	ldrb	r3, [r2, r3]
 80050c8:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80050cc:	4618      	mov	r0, r3
 80050ce:	3708      	adds	r7, #8
 80050d0:	46bd      	mov	sp, r7
 80050d2:	bd80      	pop	{r7, pc}
 80050d4:	40021000 	.word	0x40021000
 80050d8:	08008b1c 	.word	0x08008b1c

080050dc <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80050dc:	b580      	push	{r7, lr}
 80050de:	b092      	sub	sp, #72	; 0x48
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80050e4:	2300      	movs	r3, #0
 80050e6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80050e8:	2300      	movs	r3, #0
 80050ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80050ec:	2300      	movs	r3, #0
 80050ee:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	f000 80d4 	beq.w	80052a8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005100:	4b4e      	ldr	r3, [pc, #312]	; (800523c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005102:	69db      	ldr	r3, [r3, #28]
 8005104:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005108:	2b00      	cmp	r3, #0
 800510a:	d10e      	bne.n	800512a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800510c:	4b4b      	ldr	r3, [pc, #300]	; (800523c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800510e:	69db      	ldr	r3, [r3, #28]
 8005110:	4a4a      	ldr	r2, [pc, #296]	; (800523c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005112:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005116:	61d3      	str	r3, [r2, #28]
 8005118:	4b48      	ldr	r3, [pc, #288]	; (800523c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800511a:	69db      	ldr	r3, [r3, #28]
 800511c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005120:	60bb      	str	r3, [r7, #8]
 8005122:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005124:	2301      	movs	r3, #1
 8005126:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800512a:	4b45      	ldr	r3, [pc, #276]	; (8005240 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005132:	2b00      	cmp	r3, #0
 8005134:	d118      	bne.n	8005168 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005136:	4b42      	ldr	r3, [pc, #264]	; (8005240 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	4a41      	ldr	r2, [pc, #260]	; (8005240 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800513c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005140:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005142:	f7fd f9ef 	bl	8002524 <HAL_GetTick>
 8005146:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005148:	e008      	b.n	800515c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800514a:	f7fd f9eb 	bl	8002524 <HAL_GetTick>
 800514e:	4602      	mov	r2, r0
 8005150:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005152:	1ad3      	subs	r3, r2, r3
 8005154:	2b64      	cmp	r3, #100	; 0x64
 8005156:	d901      	bls.n	800515c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8005158:	2303      	movs	r3, #3
 800515a:	e13c      	b.n	80053d6 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800515c:	4b38      	ldr	r3, [pc, #224]	; (8005240 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005164:	2b00      	cmp	r3, #0
 8005166:	d0f0      	beq.n	800514a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005168:	4b34      	ldr	r3, [pc, #208]	; (800523c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800516a:	6a1b      	ldr	r3, [r3, #32]
 800516c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005170:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005172:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005174:	2b00      	cmp	r3, #0
 8005176:	f000 8084 	beq.w	8005282 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	685b      	ldr	r3, [r3, #4]
 800517e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005182:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005184:	429a      	cmp	r2, r3
 8005186:	d07c      	beq.n	8005282 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005188:	4b2c      	ldr	r3, [pc, #176]	; (800523c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800518a:	6a1b      	ldr	r3, [r3, #32]
 800518c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005190:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005192:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005196:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005198:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800519a:	fa93 f3a3 	rbit	r3, r3
 800519e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80051a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80051a2:	fab3 f383 	clz	r3, r3
 80051a6:	b2db      	uxtb	r3, r3
 80051a8:	461a      	mov	r2, r3
 80051aa:	4b26      	ldr	r3, [pc, #152]	; (8005244 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80051ac:	4413      	add	r3, r2
 80051ae:	009b      	lsls	r3, r3, #2
 80051b0:	461a      	mov	r2, r3
 80051b2:	2301      	movs	r3, #1
 80051b4:	6013      	str	r3, [r2, #0]
 80051b6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80051ba:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051be:	fa93 f3a3 	rbit	r3, r3
 80051c2:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80051c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80051c6:	fab3 f383 	clz	r3, r3
 80051ca:	b2db      	uxtb	r3, r3
 80051cc:	461a      	mov	r2, r3
 80051ce:	4b1d      	ldr	r3, [pc, #116]	; (8005244 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80051d0:	4413      	add	r3, r2
 80051d2:	009b      	lsls	r3, r3, #2
 80051d4:	461a      	mov	r2, r3
 80051d6:	2300      	movs	r3, #0
 80051d8:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80051da:	4a18      	ldr	r2, [pc, #96]	; (800523c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80051dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80051de:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80051e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80051e2:	f003 0301 	and.w	r3, r3, #1
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d04b      	beq.n	8005282 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051ea:	f7fd f99b 	bl	8002524 <HAL_GetTick>
 80051ee:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80051f0:	e00a      	b.n	8005208 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80051f2:	f7fd f997 	bl	8002524 <HAL_GetTick>
 80051f6:	4602      	mov	r2, r0
 80051f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80051fa:	1ad3      	subs	r3, r2, r3
 80051fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8005200:	4293      	cmp	r3, r2
 8005202:	d901      	bls.n	8005208 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8005204:	2303      	movs	r3, #3
 8005206:	e0e6      	b.n	80053d6 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
 8005208:	2302      	movs	r3, #2
 800520a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800520c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800520e:	fa93 f3a3 	rbit	r3, r3
 8005212:	627b      	str	r3, [r7, #36]	; 0x24
 8005214:	2302      	movs	r3, #2
 8005216:	623b      	str	r3, [r7, #32]
 8005218:	6a3b      	ldr	r3, [r7, #32]
 800521a:	fa93 f3a3 	rbit	r3, r3
 800521e:	61fb      	str	r3, [r7, #28]
  return result;
 8005220:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005222:	fab3 f383 	clz	r3, r3
 8005226:	b2db      	uxtb	r3, r3
 8005228:	095b      	lsrs	r3, r3, #5
 800522a:	b2db      	uxtb	r3, r3
 800522c:	f043 0302 	orr.w	r3, r3, #2
 8005230:	b2db      	uxtb	r3, r3
 8005232:	2b02      	cmp	r3, #2
 8005234:	d108      	bne.n	8005248 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8005236:	4b01      	ldr	r3, [pc, #4]	; (800523c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005238:	6a1b      	ldr	r3, [r3, #32]
 800523a:	e00d      	b.n	8005258 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 800523c:	40021000 	.word	0x40021000
 8005240:	40007000 	.word	0x40007000
 8005244:	10908100 	.word	0x10908100
 8005248:	2302      	movs	r3, #2
 800524a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800524c:	69bb      	ldr	r3, [r7, #24]
 800524e:	fa93 f3a3 	rbit	r3, r3
 8005252:	617b      	str	r3, [r7, #20]
 8005254:	4b62      	ldr	r3, [pc, #392]	; (80053e0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005256:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005258:	2202      	movs	r2, #2
 800525a:	613a      	str	r2, [r7, #16]
 800525c:	693a      	ldr	r2, [r7, #16]
 800525e:	fa92 f2a2 	rbit	r2, r2
 8005262:	60fa      	str	r2, [r7, #12]
  return result;
 8005264:	68fa      	ldr	r2, [r7, #12]
 8005266:	fab2 f282 	clz	r2, r2
 800526a:	b2d2      	uxtb	r2, r2
 800526c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005270:	b2d2      	uxtb	r2, r2
 8005272:	f002 021f 	and.w	r2, r2, #31
 8005276:	2101      	movs	r1, #1
 8005278:	fa01 f202 	lsl.w	r2, r1, r2
 800527c:	4013      	ands	r3, r2
 800527e:	2b00      	cmp	r3, #0
 8005280:	d0b7      	beq.n	80051f2 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8005282:	4b57      	ldr	r3, [pc, #348]	; (80053e0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005284:	6a1b      	ldr	r3, [r3, #32]
 8005286:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	685b      	ldr	r3, [r3, #4]
 800528e:	4954      	ldr	r1, [pc, #336]	; (80053e0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005290:	4313      	orrs	r3, r2
 8005292:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005294:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8005298:	2b01      	cmp	r3, #1
 800529a:	d105      	bne.n	80052a8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800529c:	4b50      	ldr	r3, [pc, #320]	; (80053e0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800529e:	69db      	ldr	r3, [r3, #28]
 80052a0:	4a4f      	ldr	r2, [pc, #316]	; (80053e0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80052a2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80052a6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	f003 0301 	and.w	r3, r3, #1
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d008      	beq.n	80052c6 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80052b4:	4b4a      	ldr	r3, [pc, #296]	; (80053e0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80052b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052b8:	f023 0203 	bic.w	r2, r3, #3
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	689b      	ldr	r3, [r3, #8]
 80052c0:	4947      	ldr	r1, [pc, #284]	; (80053e0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80052c2:	4313      	orrs	r3, r2
 80052c4:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	f003 0320 	and.w	r3, r3, #32
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d008      	beq.n	80052e4 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80052d2:	4b43      	ldr	r3, [pc, #268]	; (80053e0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80052d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052d6:	f023 0210 	bic.w	r2, r3, #16
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	68db      	ldr	r3, [r3, #12]
 80052de:	4940      	ldr	r1, [pc, #256]	; (80053e0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80052e0:	4313      	orrs	r3, r2
 80052e2:	630b      	str	r3, [r1, #48]	; 0x30
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d008      	beq.n	8005302 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80052f0:	4b3b      	ldr	r3, [pc, #236]	; (80053e0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80052f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052f4:	f023 0220 	bic.w	r2, r3, #32
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	691b      	ldr	r3, [r3, #16]
 80052fc:	4938      	ldr	r1, [pc, #224]	; (80053e0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80052fe:	4313      	orrs	r3, r2
 8005300:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800530a:	2b00      	cmp	r3, #0
 800530c:	d008      	beq.n	8005320 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800530e:	4b34      	ldr	r3, [pc, #208]	; (80053e0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005312:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	695b      	ldr	r3, [r3, #20]
 800531a:	4931      	ldr	r1, [pc, #196]	; (80053e0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800531c:	4313      	orrs	r3, r2
 800531e:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005328:	2b00      	cmp	r3, #0
 800532a:	d008      	beq.n	800533e <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800532c:	4b2c      	ldr	r3, [pc, #176]	; (80053e0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800532e:	685b      	ldr	r3, [r3, #4]
 8005330:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	69db      	ldr	r3, [r3, #28]
 8005338:	4929      	ldr	r1, [pc, #164]	; (80053e0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800533a:	4313      	orrs	r3, r2
 800533c:	604b      	str	r3, [r1, #4]
       /* STM32F301x8 || STM32F302x8 || STM32F318xx    */
  
#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
      
  /*------------------------------ ADC1 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC1) == RCC_PERIPHCLK_ADC1)
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005346:	2b00      	cmp	r3, #0
 8005348:	d008      	beq.n	800535c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC1PLLCLK_DIV(PeriphClkInit->Adc1ClockSelection));
    
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC1_CONFIG(PeriphClkInit->Adc1ClockSelection);
 800534a:	4b25      	ldr	r3, [pc, #148]	; (80053e0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800534c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800534e:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	699b      	ldr	r3, [r3, #24]
 8005356:	4922      	ldr	r1, [pc, #136]	; (80053e0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005358:	4313      	orrs	r3, r2
 800535a:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005364:	2b00      	cmp	r3, #0
 8005366:	d008      	beq.n	800537a <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8005368:	4b1d      	ldr	r3, [pc, #116]	; (80053e0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800536a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800536c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	6a1b      	ldr	r3, [r3, #32]
 8005374:	491a      	ldr	r1, [pc, #104]	; (80053e0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005376:	4313      	orrs	r3, r2
 8005378:	630b      	str	r3, [r1, #48]	; 0x30
       /* STM32F303xC || STM32F358xx    */

#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM15 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005382:	2b00      	cmp	r3, #0
 8005384:	d008      	beq.n	8005398 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8005386:	4b16      	ldr	r3, [pc, #88]	; (80053e0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800538a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005392:	4913      	ldr	r1, [pc, #76]	; (80053e0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005394:	4313      	orrs	r3, r2
 8005396:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d008      	beq.n	80053b6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the TIM16 clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 80053a4:	4b0e      	ldr	r3, [pc, #56]	; (80053e0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80053a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053a8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053b0:	490b      	ldr	r1, [pc, #44]	; (80053e0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80053b2:	4313      	orrs	r3, r2
 80053b4:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d008      	beq.n	80053d4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the TIM17 clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 80053c2:	4b07      	ldr	r3, [pc, #28]	; (80053e0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80053c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053c6:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053ce:	4904      	ldr	r1, [pc, #16]	; (80053e0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80053d0:	4313      	orrs	r3, r2
 80053d2:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80053d4:	2300      	movs	r3, #0
}
 80053d6:	4618      	mov	r0, r3
 80053d8:	3748      	adds	r7, #72	; 0x48
 80053da:	46bd      	mov	sp, r7
 80053dc:	bd80      	pop	{r7, pc}
 80053de:	bf00      	nop
 80053e0:	40021000 	.word	0x40021000

080053e4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80053e4:	b580      	push	{r7, lr}
 80053e6:	b084      	sub	sp, #16
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d101      	bne.n	80053f6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80053f2:	2301      	movs	r3, #1
 80053f4:	e09d      	b.n	8005532 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d108      	bne.n	8005410 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	685b      	ldr	r3, [r3, #4]
 8005402:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005406:	d009      	beq.n	800541c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	2200      	movs	r2, #0
 800540c:	61da      	str	r2, [r3, #28]
 800540e:	e005      	b.n	800541c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	2200      	movs	r2, #0
 8005414:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	2200      	movs	r2, #0
 800541a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	2200      	movs	r2, #0
 8005420:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005428:	b2db      	uxtb	r3, r3
 800542a:	2b00      	cmp	r3, #0
 800542c:	d106      	bne.n	800543c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	2200      	movs	r2, #0
 8005432:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005436:	6878      	ldr	r0, [r7, #4]
 8005438:	f7fc fe06 	bl	8002048 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	2202      	movs	r2, #2
 8005440:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	681a      	ldr	r2, [r3, #0]
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005452:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	68db      	ldr	r3, [r3, #12]
 8005458:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800545c:	d902      	bls.n	8005464 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800545e:	2300      	movs	r3, #0
 8005460:	60fb      	str	r3, [r7, #12]
 8005462:	e002      	b.n	800546a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005464:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005468:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	68db      	ldr	r3, [r3, #12]
 800546e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8005472:	d007      	beq.n	8005484 <HAL_SPI_Init+0xa0>
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	68db      	ldr	r3, [r3, #12]
 8005478:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800547c:	d002      	beq.n	8005484 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	2200      	movs	r2, #0
 8005482:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	685b      	ldr	r3, [r3, #4]
 8005488:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	689b      	ldr	r3, [r3, #8]
 8005490:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005494:	431a      	orrs	r2, r3
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	691b      	ldr	r3, [r3, #16]
 800549a:	f003 0302 	and.w	r3, r3, #2
 800549e:	431a      	orrs	r2, r3
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	695b      	ldr	r3, [r3, #20]
 80054a4:	f003 0301 	and.w	r3, r3, #1
 80054a8:	431a      	orrs	r2, r3
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	699b      	ldr	r3, [r3, #24]
 80054ae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80054b2:	431a      	orrs	r2, r3
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	69db      	ldr	r3, [r3, #28]
 80054b8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80054bc:	431a      	orrs	r2, r3
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	6a1b      	ldr	r3, [r3, #32]
 80054c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054c6:	ea42 0103 	orr.w	r1, r2, r3
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054ce:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	430a      	orrs	r2, r1
 80054d8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	699b      	ldr	r3, [r3, #24]
 80054de:	0c1b      	lsrs	r3, r3, #16
 80054e0:	f003 0204 	and.w	r2, r3, #4
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054e8:	f003 0310 	and.w	r3, r3, #16
 80054ec:	431a      	orrs	r2, r3
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054f2:	f003 0308 	and.w	r3, r3, #8
 80054f6:	431a      	orrs	r2, r3
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	68db      	ldr	r3, [r3, #12]
 80054fc:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005500:	ea42 0103 	orr.w	r1, r2, r3
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	430a      	orrs	r2, r1
 8005510:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	69da      	ldr	r2, [r3, #28]
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005520:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	2200      	movs	r2, #0
 8005526:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	2201      	movs	r2, #1
 800552c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005530:	2300      	movs	r3, #0
}
 8005532:	4618      	mov	r0, r3
 8005534:	3710      	adds	r7, #16
 8005536:	46bd      	mov	sp, r7
 8005538:	bd80      	pop	{r7, pc}

0800553a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800553a:	b580      	push	{r7, lr}
 800553c:	b088      	sub	sp, #32
 800553e:	af00      	add	r7, sp, #0
 8005540:	60f8      	str	r0, [r7, #12]
 8005542:	60b9      	str	r1, [r7, #8]
 8005544:	603b      	str	r3, [r7, #0]
 8005546:	4613      	mov	r3, r2
 8005548:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800554a:	2300      	movs	r3, #0
 800554c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005554:	2b01      	cmp	r3, #1
 8005556:	d101      	bne.n	800555c <HAL_SPI_Transmit+0x22>
 8005558:	2302      	movs	r3, #2
 800555a:	e15f      	b.n	800581c <HAL_SPI_Transmit+0x2e2>
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	2201      	movs	r2, #1
 8005560:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005564:	f7fc ffde 	bl	8002524 <HAL_GetTick>
 8005568:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800556a:	88fb      	ldrh	r3, [r7, #6]
 800556c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005574:	b2db      	uxtb	r3, r3
 8005576:	2b01      	cmp	r3, #1
 8005578:	d002      	beq.n	8005580 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800557a:	2302      	movs	r3, #2
 800557c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800557e:	e148      	b.n	8005812 <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 8005580:	68bb      	ldr	r3, [r7, #8]
 8005582:	2b00      	cmp	r3, #0
 8005584:	d002      	beq.n	800558c <HAL_SPI_Transmit+0x52>
 8005586:	88fb      	ldrh	r3, [r7, #6]
 8005588:	2b00      	cmp	r3, #0
 800558a:	d102      	bne.n	8005592 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800558c:	2301      	movs	r3, #1
 800558e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005590:	e13f      	b.n	8005812 <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	2203      	movs	r2, #3
 8005596:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	2200      	movs	r2, #0
 800559e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	68ba      	ldr	r2, [r7, #8]
 80055a4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	88fa      	ldrh	r2, [r7, #6]
 80055aa:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	88fa      	ldrh	r2, [r7, #6]
 80055b0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	2200      	movs	r2, #0
 80055b6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	2200      	movs	r2, #0
 80055bc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	2200      	movs	r2, #0
 80055c4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	2200      	movs	r2, #0
 80055cc:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	2200      	movs	r2, #0
 80055d2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	689b      	ldr	r3, [r3, #8]
 80055d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80055dc:	d10f      	bne.n	80055fe <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	681a      	ldr	r2, [r3, #0]
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80055ec:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	681a      	ldr	r2, [r3, #0]
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80055fc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005608:	2b40      	cmp	r3, #64	; 0x40
 800560a:	d007      	beq.n	800561c <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	681a      	ldr	r2, [r3, #0]
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800561a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	68db      	ldr	r3, [r3, #12]
 8005620:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005624:	d94f      	bls.n	80056c6 <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	685b      	ldr	r3, [r3, #4]
 800562a:	2b00      	cmp	r3, #0
 800562c:	d002      	beq.n	8005634 <HAL_SPI_Transmit+0xfa>
 800562e:	8afb      	ldrh	r3, [r7, #22]
 8005630:	2b01      	cmp	r3, #1
 8005632:	d142      	bne.n	80056ba <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005638:	881a      	ldrh	r2, [r3, #0]
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005644:	1c9a      	adds	r2, r3, #2
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800564e:	b29b      	uxth	r3, r3
 8005650:	3b01      	subs	r3, #1
 8005652:	b29a      	uxth	r2, r3
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005658:	e02f      	b.n	80056ba <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	689b      	ldr	r3, [r3, #8]
 8005660:	f003 0302 	and.w	r3, r3, #2
 8005664:	2b02      	cmp	r3, #2
 8005666:	d112      	bne.n	800568e <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800566c:	881a      	ldrh	r2, [r3, #0]
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005678:	1c9a      	adds	r2, r3, #2
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005682:	b29b      	uxth	r3, r3
 8005684:	3b01      	subs	r3, #1
 8005686:	b29a      	uxth	r2, r3
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800568c:	e015      	b.n	80056ba <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800568e:	f7fc ff49 	bl	8002524 <HAL_GetTick>
 8005692:	4602      	mov	r2, r0
 8005694:	69bb      	ldr	r3, [r7, #24]
 8005696:	1ad3      	subs	r3, r2, r3
 8005698:	683a      	ldr	r2, [r7, #0]
 800569a:	429a      	cmp	r2, r3
 800569c:	d803      	bhi.n	80056a6 <HAL_SPI_Transmit+0x16c>
 800569e:	683b      	ldr	r3, [r7, #0]
 80056a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056a4:	d102      	bne.n	80056ac <HAL_SPI_Transmit+0x172>
 80056a6:	683b      	ldr	r3, [r7, #0]
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d106      	bne.n	80056ba <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 80056ac:	2303      	movs	r3, #3
 80056ae:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	2201      	movs	r2, #1
 80056b4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 80056b8:	e0ab      	b.n	8005812 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80056be:	b29b      	uxth	r3, r3
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d1ca      	bne.n	800565a <HAL_SPI_Transmit+0x120>
 80056c4:	e080      	b.n	80057c8 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	685b      	ldr	r3, [r3, #4]
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d002      	beq.n	80056d4 <HAL_SPI_Transmit+0x19a>
 80056ce:	8afb      	ldrh	r3, [r7, #22]
 80056d0:	2b01      	cmp	r3, #1
 80056d2:	d174      	bne.n	80057be <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80056d8:	b29b      	uxth	r3, r3
 80056da:	2b01      	cmp	r3, #1
 80056dc:	d912      	bls.n	8005704 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056e2:	881a      	ldrh	r2, [r3, #0]
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056ee:	1c9a      	adds	r2, r3, #2
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80056f8:	b29b      	uxth	r3, r3
 80056fa:	3b02      	subs	r3, #2
 80056fc:	b29a      	uxth	r2, r3
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005702:	e05c      	b.n	80057be <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	330c      	adds	r3, #12
 800570e:	7812      	ldrb	r2, [r2, #0]
 8005710:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005716:	1c5a      	adds	r2, r3, #1
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005720:	b29b      	uxth	r3, r3
 8005722:	3b01      	subs	r3, #1
 8005724:	b29a      	uxth	r2, r3
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800572a:	e048      	b.n	80057be <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	689b      	ldr	r3, [r3, #8]
 8005732:	f003 0302 	and.w	r3, r3, #2
 8005736:	2b02      	cmp	r3, #2
 8005738:	d12b      	bne.n	8005792 <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800573e:	b29b      	uxth	r3, r3
 8005740:	2b01      	cmp	r3, #1
 8005742:	d912      	bls.n	800576a <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005748:	881a      	ldrh	r2, [r3, #0]
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005754:	1c9a      	adds	r2, r3, #2
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800575e:	b29b      	uxth	r3, r3
 8005760:	3b02      	subs	r3, #2
 8005762:	b29a      	uxth	r2, r3
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005768:	e029      	b.n	80057be <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	330c      	adds	r3, #12
 8005774:	7812      	ldrb	r2, [r2, #0]
 8005776:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800577c:	1c5a      	adds	r2, r3, #1
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005786:	b29b      	uxth	r3, r3
 8005788:	3b01      	subs	r3, #1
 800578a:	b29a      	uxth	r2, r3
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005790:	e015      	b.n	80057be <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005792:	f7fc fec7 	bl	8002524 <HAL_GetTick>
 8005796:	4602      	mov	r2, r0
 8005798:	69bb      	ldr	r3, [r7, #24]
 800579a:	1ad3      	subs	r3, r2, r3
 800579c:	683a      	ldr	r2, [r7, #0]
 800579e:	429a      	cmp	r2, r3
 80057a0:	d803      	bhi.n	80057aa <HAL_SPI_Transmit+0x270>
 80057a2:	683b      	ldr	r3, [r7, #0]
 80057a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057a8:	d102      	bne.n	80057b0 <HAL_SPI_Transmit+0x276>
 80057aa:	683b      	ldr	r3, [r7, #0]
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d106      	bne.n	80057be <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 80057b0:	2303      	movs	r3, #3
 80057b2:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	2201      	movs	r2, #1
 80057b8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 80057bc:	e029      	b.n	8005812 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80057c2:	b29b      	uxth	r3, r3
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d1b1      	bne.n	800572c <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80057c8:	69ba      	ldr	r2, [r7, #24]
 80057ca:	6839      	ldr	r1, [r7, #0]
 80057cc:	68f8      	ldr	r0, [r7, #12]
 80057ce:	f000 f947 	bl	8005a60 <SPI_EndRxTxTransaction>
 80057d2:	4603      	mov	r3, r0
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d002      	beq.n	80057de <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	2220      	movs	r2, #32
 80057dc:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	689b      	ldr	r3, [r3, #8]
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d10a      	bne.n	80057fc <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80057e6:	2300      	movs	r3, #0
 80057e8:	613b      	str	r3, [r7, #16]
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	68db      	ldr	r3, [r3, #12]
 80057f0:	613b      	str	r3, [r7, #16]
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	689b      	ldr	r3, [r3, #8]
 80057f8:	613b      	str	r3, [r7, #16]
 80057fa:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005800:	2b00      	cmp	r3, #0
 8005802:	d002      	beq.n	800580a <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8005804:	2301      	movs	r3, #1
 8005806:	77fb      	strb	r3, [r7, #31]
 8005808:	e003      	b.n	8005812 <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	2201      	movs	r2, #1
 800580e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	2200      	movs	r2, #0
 8005816:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800581a:	7ffb      	ldrb	r3, [r7, #31]
}
 800581c:	4618      	mov	r0, r3
 800581e:	3720      	adds	r7, #32
 8005820:	46bd      	mov	sp, r7
 8005822:	bd80      	pop	{r7, pc}

08005824 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005824:	b580      	push	{r7, lr}
 8005826:	b088      	sub	sp, #32
 8005828:	af00      	add	r7, sp, #0
 800582a:	60f8      	str	r0, [r7, #12]
 800582c:	60b9      	str	r1, [r7, #8]
 800582e:	603b      	str	r3, [r7, #0]
 8005830:	4613      	mov	r3, r2
 8005832:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005834:	f7fc fe76 	bl	8002524 <HAL_GetTick>
 8005838:	4602      	mov	r2, r0
 800583a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800583c:	1a9b      	subs	r3, r3, r2
 800583e:	683a      	ldr	r2, [r7, #0]
 8005840:	4413      	add	r3, r2
 8005842:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005844:	f7fc fe6e 	bl	8002524 <HAL_GetTick>
 8005848:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800584a:	4b39      	ldr	r3, [pc, #228]	; (8005930 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	015b      	lsls	r3, r3, #5
 8005850:	0d1b      	lsrs	r3, r3, #20
 8005852:	69fa      	ldr	r2, [r7, #28]
 8005854:	fb02 f303 	mul.w	r3, r2, r3
 8005858:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800585a:	e054      	b.n	8005906 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800585c:	683b      	ldr	r3, [r7, #0]
 800585e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005862:	d050      	beq.n	8005906 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005864:	f7fc fe5e 	bl	8002524 <HAL_GetTick>
 8005868:	4602      	mov	r2, r0
 800586a:	69bb      	ldr	r3, [r7, #24]
 800586c:	1ad3      	subs	r3, r2, r3
 800586e:	69fa      	ldr	r2, [r7, #28]
 8005870:	429a      	cmp	r2, r3
 8005872:	d902      	bls.n	800587a <SPI_WaitFlagStateUntilTimeout+0x56>
 8005874:	69fb      	ldr	r3, [r7, #28]
 8005876:	2b00      	cmp	r3, #0
 8005878:	d13d      	bne.n	80058f6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	685a      	ldr	r2, [r3, #4]
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005888:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	685b      	ldr	r3, [r3, #4]
 800588e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005892:	d111      	bne.n	80058b8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	689b      	ldr	r3, [r3, #8]
 8005898:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800589c:	d004      	beq.n	80058a8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	689b      	ldr	r3, [r3, #8]
 80058a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80058a6:	d107      	bne.n	80058b8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	681a      	ldr	r2, [r3, #0]
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80058b6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058bc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80058c0:	d10f      	bne.n	80058e2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	681a      	ldr	r2, [r3, #0]
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80058d0:	601a      	str	r2, [r3, #0]
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	681a      	ldr	r2, [r3, #0]
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80058e0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	2201      	movs	r2, #1
 80058e6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	2200      	movs	r2, #0
 80058ee:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80058f2:	2303      	movs	r3, #3
 80058f4:	e017      	b.n	8005926 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80058f6:	697b      	ldr	r3, [r7, #20]
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d101      	bne.n	8005900 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80058fc:	2300      	movs	r3, #0
 80058fe:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005900:	697b      	ldr	r3, [r7, #20]
 8005902:	3b01      	subs	r3, #1
 8005904:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	689a      	ldr	r2, [r3, #8]
 800590c:	68bb      	ldr	r3, [r7, #8]
 800590e:	4013      	ands	r3, r2
 8005910:	68ba      	ldr	r2, [r7, #8]
 8005912:	429a      	cmp	r2, r3
 8005914:	bf0c      	ite	eq
 8005916:	2301      	moveq	r3, #1
 8005918:	2300      	movne	r3, #0
 800591a:	b2db      	uxtb	r3, r3
 800591c:	461a      	mov	r2, r3
 800591e:	79fb      	ldrb	r3, [r7, #7]
 8005920:	429a      	cmp	r2, r3
 8005922:	d19b      	bne.n	800585c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005924:	2300      	movs	r3, #0
}
 8005926:	4618      	mov	r0, r3
 8005928:	3720      	adds	r7, #32
 800592a:	46bd      	mov	sp, r7
 800592c:	bd80      	pop	{r7, pc}
 800592e:	bf00      	nop
 8005930:	20002780 	.word	0x20002780

08005934 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005934:	b580      	push	{r7, lr}
 8005936:	b08a      	sub	sp, #40	; 0x28
 8005938:	af00      	add	r7, sp, #0
 800593a:	60f8      	str	r0, [r7, #12]
 800593c:	60b9      	str	r1, [r7, #8]
 800593e:	607a      	str	r2, [r7, #4]
 8005940:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8005942:	2300      	movs	r3, #0
 8005944:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8005946:	f7fc fded 	bl	8002524 <HAL_GetTick>
 800594a:	4602      	mov	r2, r0
 800594c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800594e:	1a9b      	subs	r3, r3, r2
 8005950:	683a      	ldr	r2, [r7, #0]
 8005952:	4413      	add	r3, r2
 8005954:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8005956:	f7fc fde5 	bl	8002524 <HAL_GetTick>
 800595a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	330c      	adds	r3, #12
 8005962:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005964:	4b3d      	ldr	r3, [pc, #244]	; (8005a5c <SPI_WaitFifoStateUntilTimeout+0x128>)
 8005966:	681a      	ldr	r2, [r3, #0]
 8005968:	4613      	mov	r3, r2
 800596a:	009b      	lsls	r3, r3, #2
 800596c:	4413      	add	r3, r2
 800596e:	00da      	lsls	r2, r3, #3
 8005970:	1ad3      	subs	r3, r2, r3
 8005972:	0d1b      	lsrs	r3, r3, #20
 8005974:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005976:	fb02 f303 	mul.w	r3, r2, r3
 800597a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800597c:	e060      	b.n	8005a40 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800597e:	68bb      	ldr	r3, [r7, #8]
 8005980:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005984:	d107      	bne.n	8005996 <SPI_WaitFifoStateUntilTimeout+0x62>
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	2b00      	cmp	r3, #0
 800598a:	d104      	bne.n	8005996 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800598c:	69fb      	ldr	r3, [r7, #28]
 800598e:	781b      	ldrb	r3, [r3, #0]
 8005990:	b2db      	uxtb	r3, r3
 8005992:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8005994:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8005996:	683b      	ldr	r3, [r7, #0]
 8005998:	f1b3 3fff 	cmp.w	r3, #4294967295
 800599c:	d050      	beq.n	8005a40 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800599e:	f7fc fdc1 	bl	8002524 <HAL_GetTick>
 80059a2:	4602      	mov	r2, r0
 80059a4:	6a3b      	ldr	r3, [r7, #32]
 80059a6:	1ad3      	subs	r3, r2, r3
 80059a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80059aa:	429a      	cmp	r2, r3
 80059ac:	d902      	bls.n	80059b4 <SPI_WaitFifoStateUntilTimeout+0x80>
 80059ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d13d      	bne.n	8005a30 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	685a      	ldr	r2, [r3, #4]
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80059c2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	685b      	ldr	r3, [r3, #4]
 80059c8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80059cc:	d111      	bne.n	80059f2 <SPI_WaitFifoStateUntilTimeout+0xbe>
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	689b      	ldr	r3, [r3, #8]
 80059d2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80059d6:	d004      	beq.n	80059e2 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	689b      	ldr	r3, [r3, #8]
 80059dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80059e0:	d107      	bne.n	80059f2 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	681a      	ldr	r2, [r3, #0]
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80059f0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80059fa:	d10f      	bne.n	8005a1c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	681a      	ldr	r2, [r3, #0]
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005a0a:	601a      	str	r2, [r3, #0]
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	681a      	ldr	r2, [r3, #0]
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005a1a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	2201      	movs	r2, #1
 8005a20:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	2200      	movs	r2, #0
 8005a28:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005a2c:	2303      	movs	r3, #3
 8005a2e:	e010      	b.n	8005a52 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005a30:	69bb      	ldr	r3, [r7, #24]
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d101      	bne.n	8005a3a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8005a36:	2300      	movs	r3, #0
 8005a38:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8005a3a:	69bb      	ldr	r3, [r7, #24]
 8005a3c:	3b01      	subs	r3, #1
 8005a3e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	689a      	ldr	r2, [r3, #8]
 8005a46:	68bb      	ldr	r3, [r7, #8]
 8005a48:	4013      	ands	r3, r2
 8005a4a:	687a      	ldr	r2, [r7, #4]
 8005a4c:	429a      	cmp	r2, r3
 8005a4e:	d196      	bne.n	800597e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8005a50:	2300      	movs	r3, #0
}
 8005a52:	4618      	mov	r0, r3
 8005a54:	3728      	adds	r7, #40	; 0x28
 8005a56:	46bd      	mov	sp, r7
 8005a58:	bd80      	pop	{r7, pc}
 8005a5a:	bf00      	nop
 8005a5c:	20002780 	.word	0x20002780

08005a60 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005a60:	b580      	push	{r7, lr}
 8005a62:	b086      	sub	sp, #24
 8005a64:	af02      	add	r7, sp, #8
 8005a66:	60f8      	str	r0, [r7, #12]
 8005a68:	60b9      	str	r1, [r7, #8]
 8005a6a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	9300      	str	r3, [sp, #0]
 8005a70:	68bb      	ldr	r3, [r7, #8]
 8005a72:	2200      	movs	r2, #0
 8005a74:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8005a78:	68f8      	ldr	r0, [r7, #12]
 8005a7a:	f7ff ff5b 	bl	8005934 <SPI_WaitFifoStateUntilTimeout>
 8005a7e:	4603      	mov	r3, r0
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d007      	beq.n	8005a94 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a88:	f043 0220 	orr.w	r2, r3, #32
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005a90:	2303      	movs	r3, #3
 8005a92:	e027      	b.n	8005ae4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	9300      	str	r3, [sp, #0]
 8005a98:	68bb      	ldr	r3, [r7, #8]
 8005a9a:	2200      	movs	r2, #0
 8005a9c:	2180      	movs	r1, #128	; 0x80
 8005a9e:	68f8      	ldr	r0, [r7, #12]
 8005aa0:	f7ff fec0 	bl	8005824 <SPI_WaitFlagStateUntilTimeout>
 8005aa4:	4603      	mov	r3, r0
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d007      	beq.n	8005aba <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005aae:	f043 0220 	orr.w	r2, r3, #32
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005ab6:	2303      	movs	r3, #3
 8005ab8:	e014      	b.n	8005ae4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	9300      	str	r3, [sp, #0]
 8005abe:	68bb      	ldr	r3, [r7, #8]
 8005ac0:	2200      	movs	r2, #0
 8005ac2:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8005ac6:	68f8      	ldr	r0, [r7, #12]
 8005ac8:	f7ff ff34 	bl	8005934 <SPI_WaitFifoStateUntilTimeout>
 8005acc:	4603      	mov	r3, r0
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d007      	beq.n	8005ae2 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ad6:	f043 0220 	orr.w	r2, r3, #32
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005ade:	2303      	movs	r3, #3
 8005ae0:	e000      	b.n	8005ae4 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8005ae2:	2300      	movs	r3, #0
}
 8005ae4:	4618      	mov	r0, r3
 8005ae6:	3710      	adds	r7, #16
 8005ae8:	46bd      	mov	sp, r7
 8005aea:	bd80      	pop	{r7, pc}

08005aec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005aec:	b580      	push	{r7, lr}
 8005aee:	b082      	sub	sp, #8
 8005af0:	af00      	add	r7, sp, #0
 8005af2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d101      	bne.n	8005afe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005afa:	2301      	movs	r3, #1
 8005afc:	e049      	b.n	8005b92 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b04:	b2db      	uxtb	r3, r3
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d106      	bne.n	8005b18 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	2200      	movs	r2, #0
 8005b0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005b12:	6878      	ldr	r0, [r7, #4]
 8005b14:	f7fc fb1a 	bl	800214c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	2202      	movs	r2, #2
 8005b1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681a      	ldr	r2, [r3, #0]
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	3304      	adds	r3, #4
 8005b28:	4619      	mov	r1, r3
 8005b2a:	4610      	mov	r0, r2
 8005b2c:	f000 fc52 	bl	80063d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	2201      	movs	r2, #1
 8005b34:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	2201      	movs	r2, #1
 8005b3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	2201      	movs	r2, #1
 8005b44:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	2201      	movs	r2, #1
 8005b4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	2201      	movs	r2, #1
 8005b54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	2201      	movs	r2, #1
 8005b5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	2201      	movs	r2, #1
 8005b64:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	2201      	movs	r2, #1
 8005b6c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	2201      	movs	r2, #1
 8005b74:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	2201      	movs	r2, #1
 8005b7c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	2201      	movs	r2, #1
 8005b84:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	2201      	movs	r2, #1
 8005b8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005b90:	2300      	movs	r3, #0
}
 8005b92:	4618      	mov	r0, r3
 8005b94:	3708      	adds	r7, #8
 8005b96:	46bd      	mov	sp, r7
 8005b98:	bd80      	pop	{r7, pc}
	...

08005b9c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005b9c:	b480      	push	{r7}
 8005b9e:	b085      	sub	sp, #20
 8005ba0:	af00      	add	r7, sp, #0
 8005ba2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005baa:	b2db      	uxtb	r3, r3
 8005bac:	2b01      	cmp	r3, #1
 8005bae:	d001      	beq.n	8005bb4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005bb0:	2301      	movs	r3, #1
 8005bb2:	e033      	b.n	8005c1c <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	2202      	movs	r2, #2
 8005bb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	4a19      	ldr	r2, [pc, #100]	; (8005c28 <HAL_TIM_Base_Start+0x8c>)
 8005bc2:	4293      	cmp	r3, r2
 8005bc4:	d009      	beq.n	8005bda <HAL_TIM_Base_Start+0x3e>
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005bce:	d004      	beq.n	8005bda <HAL_TIM_Base_Start+0x3e>
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	4a15      	ldr	r2, [pc, #84]	; (8005c2c <HAL_TIM_Base_Start+0x90>)
 8005bd6:	4293      	cmp	r3, r2
 8005bd8:	d115      	bne.n	8005c06 <HAL_TIM_Base_Start+0x6a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	689a      	ldr	r2, [r3, #8]
 8005be0:	4b13      	ldr	r3, [pc, #76]	; (8005c30 <HAL_TIM_Base_Start+0x94>)
 8005be2:	4013      	ands	r3, r2
 8005be4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	2b06      	cmp	r3, #6
 8005bea:	d015      	beq.n	8005c18 <HAL_TIM_Base_Start+0x7c>
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005bf2:	d011      	beq.n	8005c18 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	681a      	ldr	r2, [r3, #0]
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	f042 0201 	orr.w	r2, r2, #1
 8005c02:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c04:	e008      	b.n	8005c18 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	681a      	ldr	r2, [r3, #0]
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	f042 0201 	orr.w	r2, r2, #1
 8005c14:	601a      	str	r2, [r3, #0]
 8005c16:	e000      	b.n	8005c1a <HAL_TIM_Base_Start+0x7e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c18:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005c1a:	2300      	movs	r3, #0
}
 8005c1c:	4618      	mov	r0, r3
 8005c1e:	3714      	adds	r7, #20
 8005c20:	46bd      	mov	sp, r7
 8005c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c26:	4770      	bx	lr
 8005c28:	40012c00 	.word	0x40012c00
 8005c2c:	40014000 	.word	0x40014000
 8005c30:	00010007 	.word	0x00010007

08005c34 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8005c34:	b480      	push	{r7}
 8005c36:	b083      	sub	sp, #12
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	6a1a      	ldr	r2, [r3, #32]
 8005c42:	f241 1311 	movw	r3, #4369	; 0x1111
 8005c46:	4013      	ands	r3, r2
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d10f      	bne.n	8005c6c <HAL_TIM_Base_Stop+0x38>
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	6a1a      	ldr	r2, [r3, #32]
 8005c52:	f240 4344 	movw	r3, #1092	; 0x444
 8005c56:	4013      	ands	r3, r2
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d107      	bne.n	8005c6c <HAL_TIM_Base_Stop+0x38>
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	681a      	ldr	r2, [r3, #0]
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	f022 0201 	bic.w	r2, r2, #1
 8005c6a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	2201      	movs	r2, #1
 8005c70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8005c74:	2300      	movs	r3, #0
}
 8005c76:	4618      	mov	r0, r3
 8005c78:	370c      	adds	r7, #12
 8005c7a:	46bd      	mov	sp, r7
 8005c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c80:	4770      	bx	lr

08005c82 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005c82:	b580      	push	{r7, lr}
 8005c84:	b082      	sub	sp, #8
 8005c86:	af00      	add	r7, sp, #0
 8005c88:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d101      	bne.n	8005c94 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005c90:	2301      	movs	r3, #1
 8005c92:	e049      	b.n	8005d28 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c9a:	b2db      	uxtb	r3, r3
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d106      	bne.n	8005cae <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	2200      	movs	r2, #0
 8005ca4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005ca8:	6878      	ldr	r0, [r7, #4]
 8005caa:	f7fc fa2f 	bl	800210c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	2202      	movs	r2, #2
 8005cb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681a      	ldr	r2, [r3, #0]
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	3304      	adds	r3, #4
 8005cbe:	4619      	mov	r1, r3
 8005cc0:	4610      	mov	r0, r2
 8005cc2:	f000 fb87 	bl	80063d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	2201      	movs	r2, #1
 8005cca:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	2201      	movs	r2, #1
 8005cd2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	2201      	movs	r2, #1
 8005cda:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	2201      	movs	r2, #1
 8005ce2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	2201      	movs	r2, #1
 8005cea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	2201      	movs	r2, #1
 8005cf2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	2201      	movs	r2, #1
 8005cfa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	2201      	movs	r2, #1
 8005d02:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	2201      	movs	r2, #1
 8005d0a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	2201      	movs	r2, #1
 8005d12:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	2201      	movs	r2, #1
 8005d1a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	2201      	movs	r2, #1
 8005d22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005d26:	2300      	movs	r3, #0
}
 8005d28:	4618      	mov	r0, r3
 8005d2a:	3708      	adds	r7, #8
 8005d2c:	46bd      	mov	sp, r7
 8005d2e:	bd80      	pop	{r7, pc}

08005d30 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005d30:	b580      	push	{r7, lr}
 8005d32:	b084      	sub	sp, #16
 8005d34:	af00      	add	r7, sp, #0
 8005d36:	6078      	str	r0, [r7, #4]
 8005d38:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005d3a:	683b      	ldr	r3, [r7, #0]
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d109      	bne.n	8005d54 <HAL_TIM_PWM_Start+0x24>
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005d46:	b2db      	uxtb	r3, r3
 8005d48:	2b01      	cmp	r3, #1
 8005d4a:	bf14      	ite	ne
 8005d4c:	2301      	movne	r3, #1
 8005d4e:	2300      	moveq	r3, #0
 8005d50:	b2db      	uxtb	r3, r3
 8005d52:	e03c      	b.n	8005dce <HAL_TIM_PWM_Start+0x9e>
 8005d54:	683b      	ldr	r3, [r7, #0]
 8005d56:	2b04      	cmp	r3, #4
 8005d58:	d109      	bne.n	8005d6e <HAL_TIM_PWM_Start+0x3e>
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005d60:	b2db      	uxtb	r3, r3
 8005d62:	2b01      	cmp	r3, #1
 8005d64:	bf14      	ite	ne
 8005d66:	2301      	movne	r3, #1
 8005d68:	2300      	moveq	r3, #0
 8005d6a:	b2db      	uxtb	r3, r3
 8005d6c:	e02f      	b.n	8005dce <HAL_TIM_PWM_Start+0x9e>
 8005d6e:	683b      	ldr	r3, [r7, #0]
 8005d70:	2b08      	cmp	r3, #8
 8005d72:	d109      	bne.n	8005d88 <HAL_TIM_PWM_Start+0x58>
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005d7a:	b2db      	uxtb	r3, r3
 8005d7c:	2b01      	cmp	r3, #1
 8005d7e:	bf14      	ite	ne
 8005d80:	2301      	movne	r3, #1
 8005d82:	2300      	moveq	r3, #0
 8005d84:	b2db      	uxtb	r3, r3
 8005d86:	e022      	b.n	8005dce <HAL_TIM_PWM_Start+0x9e>
 8005d88:	683b      	ldr	r3, [r7, #0]
 8005d8a:	2b0c      	cmp	r3, #12
 8005d8c:	d109      	bne.n	8005da2 <HAL_TIM_PWM_Start+0x72>
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005d94:	b2db      	uxtb	r3, r3
 8005d96:	2b01      	cmp	r3, #1
 8005d98:	bf14      	ite	ne
 8005d9a:	2301      	movne	r3, #1
 8005d9c:	2300      	moveq	r3, #0
 8005d9e:	b2db      	uxtb	r3, r3
 8005da0:	e015      	b.n	8005dce <HAL_TIM_PWM_Start+0x9e>
 8005da2:	683b      	ldr	r3, [r7, #0]
 8005da4:	2b10      	cmp	r3, #16
 8005da6:	d109      	bne.n	8005dbc <HAL_TIM_PWM_Start+0x8c>
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005dae:	b2db      	uxtb	r3, r3
 8005db0:	2b01      	cmp	r3, #1
 8005db2:	bf14      	ite	ne
 8005db4:	2301      	movne	r3, #1
 8005db6:	2300      	moveq	r3, #0
 8005db8:	b2db      	uxtb	r3, r3
 8005dba:	e008      	b.n	8005dce <HAL_TIM_PWM_Start+0x9e>
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005dc2:	b2db      	uxtb	r3, r3
 8005dc4:	2b01      	cmp	r3, #1
 8005dc6:	bf14      	ite	ne
 8005dc8:	2301      	movne	r3, #1
 8005dca:	2300      	moveq	r3, #0
 8005dcc:	b2db      	uxtb	r3, r3
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d001      	beq.n	8005dd6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8005dd2:	2301      	movs	r3, #1
 8005dd4:	e083      	b.n	8005ede <HAL_TIM_PWM_Start+0x1ae>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005dd6:	683b      	ldr	r3, [r7, #0]
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d104      	bne.n	8005de6 <HAL_TIM_PWM_Start+0xb6>
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	2202      	movs	r2, #2
 8005de0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005de4:	e023      	b.n	8005e2e <HAL_TIM_PWM_Start+0xfe>
 8005de6:	683b      	ldr	r3, [r7, #0]
 8005de8:	2b04      	cmp	r3, #4
 8005dea:	d104      	bne.n	8005df6 <HAL_TIM_PWM_Start+0xc6>
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	2202      	movs	r2, #2
 8005df0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005df4:	e01b      	b.n	8005e2e <HAL_TIM_PWM_Start+0xfe>
 8005df6:	683b      	ldr	r3, [r7, #0]
 8005df8:	2b08      	cmp	r3, #8
 8005dfa:	d104      	bne.n	8005e06 <HAL_TIM_PWM_Start+0xd6>
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	2202      	movs	r2, #2
 8005e00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005e04:	e013      	b.n	8005e2e <HAL_TIM_PWM_Start+0xfe>
 8005e06:	683b      	ldr	r3, [r7, #0]
 8005e08:	2b0c      	cmp	r3, #12
 8005e0a:	d104      	bne.n	8005e16 <HAL_TIM_PWM_Start+0xe6>
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	2202      	movs	r2, #2
 8005e10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005e14:	e00b      	b.n	8005e2e <HAL_TIM_PWM_Start+0xfe>
 8005e16:	683b      	ldr	r3, [r7, #0]
 8005e18:	2b10      	cmp	r3, #16
 8005e1a:	d104      	bne.n	8005e26 <HAL_TIM_PWM_Start+0xf6>
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	2202      	movs	r2, #2
 8005e20:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005e24:	e003      	b.n	8005e2e <HAL_TIM_PWM_Start+0xfe>
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	2202      	movs	r2, #2
 8005e2a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	2201      	movs	r2, #1
 8005e34:	6839      	ldr	r1, [r7, #0]
 8005e36:	4618      	mov	r0, r3
 8005e38:	f000 fe7a 	bl	8006b30 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	4a29      	ldr	r2, [pc, #164]	; (8005ee8 <HAL_TIM_PWM_Start+0x1b8>)
 8005e42:	4293      	cmp	r3, r2
 8005e44:	d00e      	beq.n	8005e64 <HAL_TIM_PWM_Start+0x134>
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	4a28      	ldr	r2, [pc, #160]	; (8005eec <HAL_TIM_PWM_Start+0x1bc>)
 8005e4c:	4293      	cmp	r3, r2
 8005e4e:	d009      	beq.n	8005e64 <HAL_TIM_PWM_Start+0x134>
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	4a26      	ldr	r2, [pc, #152]	; (8005ef0 <HAL_TIM_PWM_Start+0x1c0>)
 8005e56:	4293      	cmp	r3, r2
 8005e58:	d004      	beq.n	8005e64 <HAL_TIM_PWM_Start+0x134>
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	4a25      	ldr	r2, [pc, #148]	; (8005ef4 <HAL_TIM_PWM_Start+0x1c4>)
 8005e60:	4293      	cmp	r3, r2
 8005e62:	d101      	bne.n	8005e68 <HAL_TIM_PWM_Start+0x138>
 8005e64:	2301      	movs	r3, #1
 8005e66:	e000      	b.n	8005e6a <HAL_TIM_PWM_Start+0x13a>
 8005e68:	2300      	movs	r3, #0
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d007      	beq.n	8005e7e <HAL_TIM_PWM_Start+0x14e>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005e7c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	4a19      	ldr	r2, [pc, #100]	; (8005ee8 <HAL_TIM_PWM_Start+0x1b8>)
 8005e84:	4293      	cmp	r3, r2
 8005e86:	d009      	beq.n	8005e9c <HAL_TIM_PWM_Start+0x16c>
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e90:	d004      	beq.n	8005e9c <HAL_TIM_PWM_Start+0x16c>
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	4a15      	ldr	r2, [pc, #84]	; (8005eec <HAL_TIM_PWM_Start+0x1bc>)
 8005e98:	4293      	cmp	r3, r2
 8005e9a:	d115      	bne.n	8005ec8 <HAL_TIM_PWM_Start+0x198>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	689a      	ldr	r2, [r3, #8]
 8005ea2:	4b15      	ldr	r3, [pc, #84]	; (8005ef8 <HAL_TIM_PWM_Start+0x1c8>)
 8005ea4:	4013      	ands	r3, r2
 8005ea6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	2b06      	cmp	r3, #6
 8005eac:	d015      	beq.n	8005eda <HAL_TIM_PWM_Start+0x1aa>
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005eb4:	d011      	beq.n	8005eda <HAL_TIM_PWM_Start+0x1aa>
    {
      __HAL_TIM_ENABLE(htim);
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	681a      	ldr	r2, [r3, #0]
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	f042 0201 	orr.w	r2, r2, #1
 8005ec4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ec6:	e008      	b.n	8005eda <HAL_TIM_PWM_Start+0x1aa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	681a      	ldr	r2, [r3, #0]
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	f042 0201 	orr.w	r2, r2, #1
 8005ed6:	601a      	str	r2, [r3, #0]
 8005ed8:	e000      	b.n	8005edc <HAL_TIM_PWM_Start+0x1ac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005eda:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005edc:	2300      	movs	r3, #0
}
 8005ede:	4618      	mov	r0, r3
 8005ee0:	3710      	adds	r7, #16
 8005ee2:	46bd      	mov	sp, r7
 8005ee4:	bd80      	pop	{r7, pc}
 8005ee6:	bf00      	nop
 8005ee8:	40012c00 	.word	0x40012c00
 8005eec:	40014000 	.word	0x40014000
 8005ef0:	40014400 	.word	0x40014400
 8005ef4:	40014800 	.word	0x40014800
 8005ef8:	00010007 	.word	0x00010007

08005efc <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005efc:	b580      	push	{r7, lr}
 8005efe:	b082      	sub	sp, #8
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	6078      	str	r0, [r7, #4]
 8005f04:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	2200      	movs	r2, #0
 8005f0c:	6839      	ldr	r1, [r7, #0]
 8005f0e:	4618      	mov	r0, r3
 8005f10:	f000 fe0e 	bl	8006b30 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	4a3b      	ldr	r2, [pc, #236]	; (8006008 <HAL_TIM_PWM_Stop+0x10c>)
 8005f1a:	4293      	cmp	r3, r2
 8005f1c:	d00e      	beq.n	8005f3c <HAL_TIM_PWM_Stop+0x40>
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	4a3a      	ldr	r2, [pc, #232]	; (800600c <HAL_TIM_PWM_Stop+0x110>)
 8005f24:	4293      	cmp	r3, r2
 8005f26:	d009      	beq.n	8005f3c <HAL_TIM_PWM_Stop+0x40>
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	4a38      	ldr	r2, [pc, #224]	; (8006010 <HAL_TIM_PWM_Stop+0x114>)
 8005f2e:	4293      	cmp	r3, r2
 8005f30:	d004      	beq.n	8005f3c <HAL_TIM_PWM_Stop+0x40>
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	4a37      	ldr	r2, [pc, #220]	; (8006014 <HAL_TIM_PWM_Stop+0x118>)
 8005f38:	4293      	cmp	r3, r2
 8005f3a:	d101      	bne.n	8005f40 <HAL_TIM_PWM_Stop+0x44>
 8005f3c:	2301      	movs	r3, #1
 8005f3e:	e000      	b.n	8005f42 <HAL_TIM_PWM_Stop+0x46>
 8005f40:	2300      	movs	r3, #0
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d017      	beq.n	8005f76 <HAL_TIM_PWM_Stop+0x7a>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	6a1a      	ldr	r2, [r3, #32]
 8005f4c:	f241 1311 	movw	r3, #4369	; 0x1111
 8005f50:	4013      	ands	r3, r2
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d10f      	bne.n	8005f76 <HAL_TIM_PWM_Stop+0x7a>
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	6a1a      	ldr	r2, [r3, #32]
 8005f5c:	f240 4344 	movw	r3, #1092	; 0x444
 8005f60:	4013      	ands	r3, r2
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d107      	bne.n	8005f76 <HAL_TIM_PWM_Stop+0x7a>
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005f74:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	6a1a      	ldr	r2, [r3, #32]
 8005f7c:	f241 1311 	movw	r3, #4369	; 0x1111
 8005f80:	4013      	ands	r3, r2
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d10f      	bne.n	8005fa6 <HAL_TIM_PWM_Stop+0xaa>
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	6a1a      	ldr	r2, [r3, #32]
 8005f8c:	f240 4344 	movw	r3, #1092	; 0x444
 8005f90:	4013      	ands	r3, r2
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d107      	bne.n	8005fa6 <HAL_TIM_PWM_Stop+0xaa>
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	681a      	ldr	r2, [r3, #0]
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	f022 0201 	bic.w	r2, r2, #1
 8005fa4:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005fa6:	683b      	ldr	r3, [r7, #0]
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d104      	bne.n	8005fb6 <HAL_TIM_PWM_Stop+0xba>
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	2201      	movs	r2, #1
 8005fb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005fb4:	e023      	b.n	8005ffe <HAL_TIM_PWM_Stop+0x102>
 8005fb6:	683b      	ldr	r3, [r7, #0]
 8005fb8:	2b04      	cmp	r3, #4
 8005fba:	d104      	bne.n	8005fc6 <HAL_TIM_PWM_Stop+0xca>
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	2201      	movs	r2, #1
 8005fc0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005fc4:	e01b      	b.n	8005ffe <HAL_TIM_PWM_Stop+0x102>
 8005fc6:	683b      	ldr	r3, [r7, #0]
 8005fc8:	2b08      	cmp	r3, #8
 8005fca:	d104      	bne.n	8005fd6 <HAL_TIM_PWM_Stop+0xda>
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	2201      	movs	r2, #1
 8005fd0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005fd4:	e013      	b.n	8005ffe <HAL_TIM_PWM_Stop+0x102>
 8005fd6:	683b      	ldr	r3, [r7, #0]
 8005fd8:	2b0c      	cmp	r3, #12
 8005fda:	d104      	bne.n	8005fe6 <HAL_TIM_PWM_Stop+0xea>
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	2201      	movs	r2, #1
 8005fe0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005fe4:	e00b      	b.n	8005ffe <HAL_TIM_PWM_Stop+0x102>
 8005fe6:	683b      	ldr	r3, [r7, #0]
 8005fe8:	2b10      	cmp	r3, #16
 8005fea:	d104      	bne.n	8005ff6 <HAL_TIM_PWM_Stop+0xfa>
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	2201      	movs	r2, #1
 8005ff0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005ff4:	e003      	b.n	8005ffe <HAL_TIM_PWM_Stop+0x102>
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	2201      	movs	r2, #1
 8005ffa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 8005ffe:	2300      	movs	r3, #0
}
 8006000:	4618      	mov	r0, r3
 8006002:	3708      	adds	r7, #8
 8006004:	46bd      	mov	sp, r7
 8006006:	bd80      	pop	{r7, pc}
 8006008:	40012c00 	.word	0x40012c00
 800600c:	40014000 	.word	0x40014000
 8006010:	40014400 	.word	0x40014400
 8006014:	40014800 	.word	0x40014800

08006018 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006018:	b580      	push	{r7, lr}
 800601a:	b086      	sub	sp, #24
 800601c:	af00      	add	r7, sp, #0
 800601e:	60f8      	str	r0, [r7, #12]
 8006020:	60b9      	str	r1, [r7, #8]
 8006022:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006024:	2300      	movs	r3, #0
 8006026:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800602e:	2b01      	cmp	r3, #1
 8006030:	d101      	bne.n	8006036 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006032:	2302      	movs	r3, #2
 8006034:	e0ff      	b.n	8006236 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	2201      	movs	r2, #1
 800603a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	2b14      	cmp	r3, #20
 8006042:	f200 80f0 	bhi.w	8006226 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8006046:	a201      	add	r2, pc, #4	; (adr r2, 800604c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006048:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800604c:	080060a1 	.word	0x080060a1
 8006050:	08006227 	.word	0x08006227
 8006054:	08006227 	.word	0x08006227
 8006058:	08006227 	.word	0x08006227
 800605c:	080060e1 	.word	0x080060e1
 8006060:	08006227 	.word	0x08006227
 8006064:	08006227 	.word	0x08006227
 8006068:	08006227 	.word	0x08006227
 800606c:	08006123 	.word	0x08006123
 8006070:	08006227 	.word	0x08006227
 8006074:	08006227 	.word	0x08006227
 8006078:	08006227 	.word	0x08006227
 800607c:	08006163 	.word	0x08006163
 8006080:	08006227 	.word	0x08006227
 8006084:	08006227 	.word	0x08006227
 8006088:	08006227 	.word	0x08006227
 800608c:	080061a5 	.word	0x080061a5
 8006090:	08006227 	.word	0x08006227
 8006094:	08006227 	.word	0x08006227
 8006098:	08006227 	.word	0x08006227
 800609c:	080061e5 	.word	0x080061e5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	68b9      	ldr	r1, [r7, #8]
 80060a6:	4618      	mov	r0, r3
 80060a8:	f000 fa02 	bl	80064b0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	699a      	ldr	r2, [r3, #24]
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	f042 0208 	orr.w	r2, r2, #8
 80060ba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	699a      	ldr	r2, [r3, #24]
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	f022 0204 	bic.w	r2, r2, #4
 80060ca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	6999      	ldr	r1, [r3, #24]
 80060d2:	68bb      	ldr	r3, [r7, #8]
 80060d4:	691a      	ldr	r2, [r3, #16]
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	430a      	orrs	r2, r1
 80060dc:	619a      	str	r2, [r3, #24]
      break;
 80060de:	e0a5      	b.n	800622c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	68b9      	ldr	r1, [r7, #8]
 80060e6:	4618      	mov	r0, r3
 80060e8:	f000 fa68 	bl	80065bc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	699a      	ldr	r2, [r3, #24]
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80060fa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	699a      	ldr	r2, [r3, #24]
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800610a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	6999      	ldr	r1, [r3, #24]
 8006112:	68bb      	ldr	r3, [r7, #8]
 8006114:	691b      	ldr	r3, [r3, #16]
 8006116:	021a      	lsls	r2, r3, #8
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	430a      	orrs	r2, r1
 800611e:	619a      	str	r2, [r3, #24]
      break;
 8006120:	e084      	b.n	800622c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	68b9      	ldr	r1, [r7, #8]
 8006128:	4618      	mov	r0, r3
 800612a:	f000 fac7 	bl	80066bc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	69da      	ldr	r2, [r3, #28]
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	f042 0208 	orr.w	r2, r2, #8
 800613c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	69da      	ldr	r2, [r3, #28]
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	f022 0204 	bic.w	r2, r2, #4
 800614c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	69d9      	ldr	r1, [r3, #28]
 8006154:	68bb      	ldr	r3, [r7, #8]
 8006156:	691a      	ldr	r2, [r3, #16]
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	430a      	orrs	r2, r1
 800615e:	61da      	str	r2, [r3, #28]
      break;
 8006160:	e064      	b.n	800622c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	68b9      	ldr	r1, [r7, #8]
 8006168:	4618      	mov	r0, r3
 800616a:	f000 fb25 	bl	80067b8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	69da      	ldr	r2, [r3, #28]
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800617c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	69da      	ldr	r2, [r3, #28]
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800618c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	69d9      	ldr	r1, [r3, #28]
 8006194:	68bb      	ldr	r3, [r7, #8]
 8006196:	691b      	ldr	r3, [r3, #16]
 8006198:	021a      	lsls	r2, r3, #8
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	430a      	orrs	r2, r1
 80061a0:	61da      	str	r2, [r3, #28]
      break;
 80061a2:	e043      	b.n	800622c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	68b9      	ldr	r1, [r7, #8]
 80061aa:	4618      	mov	r0, r3
 80061ac:	f000 fb68 	bl	8006880 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	f042 0208 	orr.w	r2, r2, #8
 80061be:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	f022 0204 	bic.w	r2, r2, #4
 80061ce:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80061d6:	68bb      	ldr	r3, [r7, #8]
 80061d8:	691a      	ldr	r2, [r3, #16]
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	430a      	orrs	r2, r1
 80061e0:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80061e2:	e023      	b.n	800622c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	68b9      	ldr	r1, [r7, #8]
 80061ea:	4618      	mov	r0, r3
 80061ec:	f000 fba6 	bl	800693c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80061fe:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800620e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006216:	68bb      	ldr	r3, [r7, #8]
 8006218:	691b      	ldr	r3, [r3, #16]
 800621a:	021a      	lsls	r2, r3, #8
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	430a      	orrs	r2, r1
 8006222:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006224:	e002      	b.n	800622c <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8006226:	2301      	movs	r3, #1
 8006228:	75fb      	strb	r3, [r7, #23]
      break;
 800622a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	2200      	movs	r2, #0
 8006230:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006234:	7dfb      	ldrb	r3, [r7, #23]
}
 8006236:	4618      	mov	r0, r3
 8006238:	3718      	adds	r7, #24
 800623a:	46bd      	mov	sp, r7
 800623c:	bd80      	pop	{r7, pc}
 800623e:	bf00      	nop

08006240 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006240:	b580      	push	{r7, lr}
 8006242:	b084      	sub	sp, #16
 8006244:	af00      	add	r7, sp, #0
 8006246:	6078      	str	r0, [r7, #4]
 8006248:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800624a:	2300      	movs	r3, #0
 800624c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006254:	2b01      	cmp	r3, #1
 8006256:	d101      	bne.n	800625c <HAL_TIM_ConfigClockSource+0x1c>
 8006258:	2302      	movs	r3, #2
 800625a:	e0b6      	b.n	80063ca <HAL_TIM_ConfigClockSource+0x18a>
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	2201      	movs	r2, #1
 8006260:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	2202      	movs	r2, #2
 8006268:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	689b      	ldr	r3, [r3, #8]
 8006272:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006274:	68bb      	ldr	r3, [r7, #8]
 8006276:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800627a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800627e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006280:	68bb      	ldr	r3, [r7, #8]
 8006282:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006286:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	68ba      	ldr	r2, [r7, #8]
 800628e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006290:	683b      	ldr	r3, [r7, #0]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006298:	d03e      	beq.n	8006318 <HAL_TIM_ConfigClockSource+0xd8>
 800629a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800629e:	f200 8087 	bhi.w	80063b0 <HAL_TIM_ConfigClockSource+0x170>
 80062a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80062a6:	f000 8086 	beq.w	80063b6 <HAL_TIM_ConfigClockSource+0x176>
 80062aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80062ae:	d87f      	bhi.n	80063b0 <HAL_TIM_ConfigClockSource+0x170>
 80062b0:	2b70      	cmp	r3, #112	; 0x70
 80062b2:	d01a      	beq.n	80062ea <HAL_TIM_ConfigClockSource+0xaa>
 80062b4:	2b70      	cmp	r3, #112	; 0x70
 80062b6:	d87b      	bhi.n	80063b0 <HAL_TIM_ConfigClockSource+0x170>
 80062b8:	2b60      	cmp	r3, #96	; 0x60
 80062ba:	d050      	beq.n	800635e <HAL_TIM_ConfigClockSource+0x11e>
 80062bc:	2b60      	cmp	r3, #96	; 0x60
 80062be:	d877      	bhi.n	80063b0 <HAL_TIM_ConfigClockSource+0x170>
 80062c0:	2b50      	cmp	r3, #80	; 0x50
 80062c2:	d03c      	beq.n	800633e <HAL_TIM_ConfigClockSource+0xfe>
 80062c4:	2b50      	cmp	r3, #80	; 0x50
 80062c6:	d873      	bhi.n	80063b0 <HAL_TIM_ConfigClockSource+0x170>
 80062c8:	2b40      	cmp	r3, #64	; 0x40
 80062ca:	d058      	beq.n	800637e <HAL_TIM_ConfigClockSource+0x13e>
 80062cc:	2b40      	cmp	r3, #64	; 0x40
 80062ce:	d86f      	bhi.n	80063b0 <HAL_TIM_ConfigClockSource+0x170>
 80062d0:	2b30      	cmp	r3, #48	; 0x30
 80062d2:	d064      	beq.n	800639e <HAL_TIM_ConfigClockSource+0x15e>
 80062d4:	2b30      	cmp	r3, #48	; 0x30
 80062d6:	d86b      	bhi.n	80063b0 <HAL_TIM_ConfigClockSource+0x170>
 80062d8:	2b20      	cmp	r3, #32
 80062da:	d060      	beq.n	800639e <HAL_TIM_ConfigClockSource+0x15e>
 80062dc:	2b20      	cmp	r3, #32
 80062de:	d867      	bhi.n	80063b0 <HAL_TIM_ConfigClockSource+0x170>
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d05c      	beq.n	800639e <HAL_TIM_ConfigClockSource+0x15e>
 80062e4:	2b10      	cmp	r3, #16
 80062e6:	d05a      	beq.n	800639e <HAL_TIM_ConfigClockSource+0x15e>
 80062e8:	e062      	b.n	80063b0 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	6818      	ldr	r0, [r3, #0]
 80062ee:	683b      	ldr	r3, [r7, #0]
 80062f0:	6899      	ldr	r1, [r3, #8]
 80062f2:	683b      	ldr	r3, [r7, #0]
 80062f4:	685a      	ldr	r2, [r3, #4]
 80062f6:	683b      	ldr	r3, [r7, #0]
 80062f8:	68db      	ldr	r3, [r3, #12]
 80062fa:	f000 fbf9 	bl	8006af0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	689b      	ldr	r3, [r3, #8]
 8006304:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006306:	68bb      	ldr	r3, [r7, #8]
 8006308:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800630c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	68ba      	ldr	r2, [r7, #8]
 8006314:	609a      	str	r2, [r3, #8]
      break;
 8006316:	e04f      	b.n	80063b8 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	6818      	ldr	r0, [r3, #0]
 800631c:	683b      	ldr	r3, [r7, #0]
 800631e:	6899      	ldr	r1, [r3, #8]
 8006320:	683b      	ldr	r3, [r7, #0]
 8006322:	685a      	ldr	r2, [r3, #4]
 8006324:	683b      	ldr	r3, [r7, #0]
 8006326:	68db      	ldr	r3, [r3, #12]
 8006328:	f000 fbe2 	bl	8006af0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	689a      	ldr	r2, [r3, #8]
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800633a:	609a      	str	r2, [r3, #8]
      break;
 800633c:	e03c      	b.n	80063b8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	6818      	ldr	r0, [r3, #0]
 8006342:	683b      	ldr	r3, [r7, #0]
 8006344:	6859      	ldr	r1, [r3, #4]
 8006346:	683b      	ldr	r3, [r7, #0]
 8006348:	68db      	ldr	r3, [r3, #12]
 800634a:	461a      	mov	r2, r3
 800634c:	f000 fb56 	bl	80069fc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	2150      	movs	r1, #80	; 0x50
 8006356:	4618      	mov	r0, r3
 8006358:	f000 fbaf 	bl	8006aba <TIM_ITRx_SetConfig>
      break;
 800635c:	e02c      	b.n	80063b8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	6818      	ldr	r0, [r3, #0]
 8006362:	683b      	ldr	r3, [r7, #0]
 8006364:	6859      	ldr	r1, [r3, #4]
 8006366:	683b      	ldr	r3, [r7, #0]
 8006368:	68db      	ldr	r3, [r3, #12]
 800636a:	461a      	mov	r2, r3
 800636c:	f000 fb75 	bl	8006a5a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	2160      	movs	r1, #96	; 0x60
 8006376:	4618      	mov	r0, r3
 8006378:	f000 fb9f 	bl	8006aba <TIM_ITRx_SetConfig>
      break;
 800637c:	e01c      	b.n	80063b8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	6818      	ldr	r0, [r3, #0]
 8006382:	683b      	ldr	r3, [r7, #0]
 8006384:	6859      	ldr	r1, [r3, #4]
 8006386:	683b      	ldr	r3, [r7, #0]
 8006388:	68db      	ldr	r3, [r3, #12]
 800638a:	461a      	mov	r2, r3
 800638c:	f000 fb36 	bl	80069fc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	2140      	movs	r1, #64	; 0x40
 8006396:	4618      	mov	r0, r3
 8006398:	f000 fb8f 	bl	8006aba <TIM_ITRx_SetConfig>
      break;
 800639c:	e00c      	b.n	80063b8 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681a      	ldr	r2, [r3, #0]
 80063a2:	683b      	ldr	r3, [r7, #0]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	4619      	mov	r1, r3
 80063a8:	4610      	mov	r0, r2
 80063aa:	f000 fb86 	bl	8006aba <TIM_ITRx_SetConfig>
      break;
 80063ae:	e003      	b.n	80063b8 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80063b0:	2301      	movs	r3, #1
 80063b2:	73fb      	strb	r3, [r7, #15]
      break;
 80063b4:	e000      	b.n	80063b8 <HAL_TIM_ConfigClockSource+0x178>
      break;
 80063b6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	2201      	movs	r2, #1
 80063bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	2200      	movs	r2, #0
 80063c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80063c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80063ca:	4618      	mov	r0, r3
 80063cc:	3710      	adds	r7, #16
 80063ce:	46bd      	mov	sp, r7
 80063d0:	bd80      	pop	{r7, pc}
	...

080063d4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80063d4:	b480      	push	{r7}
 80063d6:	b085      	sub	sp, #20
 80063d8:	af00      	add	r7, sp, #0
 80063da:	6078      	str	r0, [r7, #4]
 80063dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	4a2e      	ldr	r2, [pc, #184]	; (80064a0 <TIM_Base_SetConfig+0xcc>)
 80063e8:	4293      	cmp	r3, r2
 80063ea:	d003      	beq.n	80063f4 <TIM_Base_SetConfig+0x20>
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80063f2:	d108      	bne.n	8006406 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063fa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80063fc:	683b      	ldr	r3, [r7, #0]
 80063fe:	685b      	ldr	r3, [r3, #4]
 8006400:	68fa      	ldr	r2, [r7, #12]
 8006402:	4313      	orrs	r3, r2
 8006404:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	4a25      	ldr	r2, [pc, #148]	; (80064a0 <TIM_Base_SetConfig+0xcc>)
 800640a:	4293      	cmp	r3, r2
 800640c:	d00f      	beq.n	800642e <TIM_Base_SetConfig+0x5a>
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006414:	d00b      	beq.n	800642e <TIM_Base_SetConfig+0x5a>
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	4a22      	ldr	r2, [pc, #136]	; (80064a4 <TIM_Base_SetConfig+0xd0>)
 800641a:	4293      	cmp	r3, r2
 800641c:	d007      	beq.n	800642e <TIM_Base_SetConfig+0x5a>
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	4a21      	ldr	r2, [pc, #132]	; (80064a8 <TIM_Base_SetConfig+0xd4>)
 8006422:	4293      	cmp	r3, r2
 8006424:	d003      	beq.n	800642e <TIM_Base_SetConfig+0x5a>
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	4a20      	ldr	r2, [pc, #128]	; (80064ac <TIM_Base_SetConfig+0xd8>)
 800642a:	4293      	cmp	r3, r2
 800642c:	d108      	bne.n	8006440 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006434:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006436:	683b      	ldr	r3, [r7, #0]
 8006438:	68db      	ldr	r3, [r3, #12]
 800643a:	68fa      	ldr	r2, [r7, #12]
 800643c:	4313      	orrs	r3, r2
 800643e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006446:	683b      	ldr	r3, [r7, #0]
 8006448:	695b      	ldr	r3, [r3, #20]
 800644a:	4313      	orrs	r3, r2
 800644c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	68fa      	ldr	r2, [r7, #12]
 8006452:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006454:	683b      	ldr	r3, [r7, #0]
 8006456:	689a      	ldr	r2, [r3, #8]
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800645c:	683b      	ldr	r3, [r7, #0]
 800645e:	681a      	ldr	r2, [r3, #0]
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	4a0e      	ldr	r2, [pc, #56]	; (80064a0 <TIM_Base_SetConfig+0xcc>)
 8006468:	4293      	cmp	r3, r2
 800646a:	d00b      	beq.n	8006484 <TIM_Base_SetConfig+0xb0>
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	4a0d      	ldr	r2, [pc, #52]	; (80064a4 <TIM_Base_SetConfig+0xd0>)
 8006470:	4293      	cmp	r3, r2
 8006472:	d007      	beq.n	8006484 <TIM_Base_SetConfig+0xb0>
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	4a0c      	ldr	r2, [pc, #48]	; (80064a8 <TIM_Base_SetConfig+0xd4>)
 8006478:	4293      	cmp	r3, r2
 800647a:	d003      	beq.n	8006484 <TIM_Base_SetConfig+0xb0>
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	4a0b      	ldr	r2, [pc, #44]	; (80064ac <TIM_Base_SetConfig+0xd8>)
 8006480:	4293      	cmp	r3, r2
 8006482:	d103      	bne.n	800648c <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006484:	683b      	ldr	r3, [r7, #0]
 8006486:	691a      	ldr	r2, [r3, #16]
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	2201      	movs	r2, #1
 8006490:	615a      	str	r2, [r3, #20]
}
 8006492:	bf00      	nop
 8006494:	3714      	adds	r7, #20
 8006496:	46bd      	mov	sp, r7
 8006498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800649c:	4770      	bx	lr
 800649e:	bf00      	nop
 80064a0:	40012c00 	.word	0x40012c00
 80064a4:	40014000 	.word	0x40014000
 80064a8:	40014400 	.word	0x40014400
 80064ac:	40014800 	.word	0x40014800

080064b0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80064b0:	b480      	push	{r7}
 80064b2:	b087      	sub	sp, #28
 80064b4:	af00      	add	r7, sp, #0
 80064b6:	6078      	str	r0, [r7, #4]
 80064b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	6a1b      	ldr	r3, [r3, #32]
 80064be:	f023 0201 	bic.w	r2, r3, #1
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	6a1b      	ldr	r3, [r3, #32]
 80064ca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	685b      	ldr	r3, [r3, #4]
 80064d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	699b      	ldr	r3, [r3, #24]
 80064d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80064de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	f023 0303 	bic.w	r3, r3, #3
 80064ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80064ec:	683b      	ldr	r3, [r7, #0]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	68fa      	ldr	r2, [r7, #12]
 80064f2:	4313      	orrs	r3, r2
 80064f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80064f6:	697b      	ldr	r3, [r7, #20]
 80064f8:	f023 0302 	bic.w	r3, r3, #2
 80064fc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80064fe:	683b      	ldr	r3, [r7, #0]
 8006500:	689b      	ldr	r3, [r3, #8]
 8006502:	697a      	ldr	r2, [r7, #20]
 8006504:	4313      	orrs	r3, r2
 8006506:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	4a28      	ldr	r2, [pc, #160]	; (80065ac <TIM_OC1_SetConfig+0xfc>)
 800650c:	4293      	cmp	r3, r2
 800650e:	d00b      	beq.n	8006528 <TIM_OC1_SetConfig+0x78>
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	4a27      	ldr	r2, [pc, #156]	; (80065b0 <TIM_OC1_SetConfig+0x100>)
 8006514:	4293      	cmp	r3, r2
 8006516:	d007      	beq.n	8006528 <TIM_OC1_SetConfig+0x78>
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	4a26      	ldr	r2, [pc, #152]	; (80065b4 <TIM_OC1_SetConfig+0x104>)
 800651c:	4293      	cmp	r3, r2
 800651e:	d003      	beq.n	8006528 <TIM_OC1_SetConfig+0x78>
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	4a25      	ldr	r2, [pc, #148]	; (80065b8 <TIM_OC1_SetConfig+0x108>)
 8006524:	4293      	cmp	r3, r2
 8006526:	d10c      	bne.n	8006542 <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006528:	697b      	ldr	r3, [r7, #20]
 800652a:	f023 0308 	bic.w	r3, r3, #8
 800652e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006530:	683b      	ldr	r3, [r7, #0]
 8006532:	68db      	ldr	r3, [r3, #12]
 8006534:	697a      	ldr	r2, [r7, #20]
 8006536:	4313      	orrs	r3, r2
 8006538:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800653a:	697b      	ldr	r3, [r7, #20]
 800653c:	f023 0304 	bic.w	r3, r3, #4
 8006540:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	4a19      	ldr	r2, [pc, #100]	; (80065ac <TIM_OC1_SetConfig+0xfc>)
 8006546:	4293      	cmp	r3, r2
 8006548:	d00b      	beq.n	8006562 <TIM_OC1_SetConfig+0xb2>
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	4a18      	ldr	r2, [pc, #96]	; (80065b0 <TIM_OC1_SetConfig+0x100>)
 800654e:	4293      	cmp	r3, r2
 8006550:	d007      	beq.n	8006562 <TIM_OC1_SetConfig+0xb2>
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	4a17      	ldr	r2, [pc, #92]	; (80065b4 <TIM_OC1_SetConfig+0x104>)
 8006556:	4293      	cmp	r3, r2
 8006558:	d003      	beq.n	8006562 <TIM_OC1_SetConfig+0xb2>
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	4a16      	ldr	r2, [pc, #88]	; (80065b8 <TIM_OC1_SetConfig+0x108>)
 800655e:	4293      	cmp	r3, r2
 8006560:	d111      	bne.n	8006586 <TIM_OC1_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006562:	693b      	ldr	r3, [r7, #16]
 8006564:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006568:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800656a:	693b      	ldr	r3, [r7, #16]
 800656c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006570:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006572:	683b      	ldr	r3, [r7, #0]
 8006574:	695b      	ldr	r3, [r3, #20]
 8006576:	693a      	ldr	r2, [r7, #16]
 8006578:	4313      	orrs	r3, r2
 800657a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800657c:	683b      	ldr	r3, [r7, #0]
 800657e:	699b      	ldr	r3, [r3, #24]
 8006580:	693a      	ldr	r2, [r7, #16]
 8006582:	4313      	orrs	r3, r2
 8006584:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	693a      	ldr	r2, [r7, #16]
 800658a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	68fa      	ldr	r2, [r7, #12]
 8006590:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006592:	683b      	ldr	r3, [r7, #0]
 8006594:	685a      	ldr	r2, [r3, #4]
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	697a      	ldr	r2, [r7, #20]
 800659e:	621a      	str	r2, [r3, #32]
}
 80065a0:	bf00      	nop
 80065a2:	371c      	adds	r7, #28
 80065a4:	46bd      	mov	sp, r7
 80065a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065aa:	4770      	bx	lr
 80065ac:	40012c00 	.word	0x40012c00
 80065b0:	40014000 	.word	0x40014000
 80065b4:	40014400 	.word	0x40014400
 80065b8:	40014800 	.word	0x40014800

080065bc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80065bc:	b480      	push	{r7}
 80065be:	b087      	sub	sp, #28
 80065c0:	af00      	add	r7, sp, #0
 80065c2:	6078      	str	r0, [r7, #4]
 80065c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	6a1b      	ldr	r3, [r3, #32]
 80065ca:	f023 0210 	bic.w	r2, r3, #16
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	6a1b      	ldr	r3, [r3, #32]
 80065d6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	685b      	ldr	r3, [r3, #4]
 80065dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	699b      	ldr	r3, [r3, #24]
 80065e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80065ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80065ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80065f6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80065f8:	683b      	ldr	r3, [r7, #0]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	021b      	lsls	r3, r3, #8
 80065fe:	68fa      	ldr	r2, [r7, #12]
 8006600:	4313      	orrs	r3, r2
 8006602:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006604:	697b      	ldr	r3, [r7, #20]
 8006606:	f023 0320 	bic.w	r3, r3, #32
 800660a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800660c:	683b      	ldr	r3, [r7, #0]
 800660e:	689b      	ldr	r3, [r3, #8]
 8006610:	011b      	lsls	r3, r3, #4
 8006612:	697a      	ldr	r2, [r7, #20]
 8006614:	4313      	orrs	r3, r2
 8006616:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	4a24      	ldr	r2, [pc, #144]	; (80066ac <TIM_OC2_SetConfig+0xf0>)
 800661c:	4293      	cmp	r3, r2
 800661e:	d10d      	bne.n	800663c <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006620:	697b      	ldr	r3, [r7, #20]
 8006622:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006626:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006628:	683b      	ldr	r3, [r7, #0]
 800662a:	68db      	ldr	r3, [r3, #12]
 800662c:	011b      	lsls	r3, r3, #4
 800662e:	697a      	ldr	r2, [r7, #20]
 8006630:	4313      	orrs	r3, r2
 8006632:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006634:	697b      	ldr	r3, [r7, #20]
 8006636:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800663a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	4a1b      	ldr	r2, [pc, #108]	; (80066ac <TIM_OC2_SetConfig+0xf0>)
 8006640:	4293      	cmp	r3, r2
 8006642:	d00b      	beq.n	800665c <TIM_OC2_SetConfig+0xa0>
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	4a1a      	ldr	r2, [pc, #104]	; (80066b0 <TIM_OC2_SetConfig+0xf4>)
 8006648:	4293      	cmp	r3, r2
 800664a:	d007      	beq.n	800665c <TIM_OC2_SetConfig+0xa0>
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	4a19      	ldr	r2, [pc, #100]	; (80066b4 <TIM_OC2_SetConfig+0xf8>)
 8006650:	4293      	cmp	r3, r2
 8006652:	d003      	beq.n	800665c <TIM_OC2_SetConfig+0xa0>
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	4a18      	ldr	r2, [pc, #96]	; (80066b8 <TIM_OC2_SetConfig+0xfc>)
 8006658:	4293      	cmp	r3, r2
 800665a:	d113      	bne.n	8006684 <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800665c:	693b      	ldr	r3, [r7, #16]
 800665e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006662:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006664:	693b      	ldr	r3, [r7, #16]
 8006666:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800666a:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800666c:	683b      	ldr	r3, [r7, #0]
 800666e:	695b      	ldr	r3, [r3, #20]
 8006670:	009b      	lsls	r3, r3, #2
 8006672:	693a      	ldr	r2, [r7, #16]
 8006674:	4313      	orrs	r3, r2
 8006676:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006678:	683b      	ldr	r3, [r7, #0]
 800667a:	699b      	ldr	r3, [r3, #24]
 800667c:	009b      	lsls	r3, r3, #2
 800667e:	693a      	ldr	r2, [r7, #16]
 8006680:	4313      	orrs	r3, r2
 8006682:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	693a      	ldr	r2, [r7, #16]
 8006688:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	68fa      	ldr	r2, [r7, #12]
 800668e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006690:	683b      	ldr	r3, [r7, #0]
 8006692:	685a      	ldr	r2, [r3, #4]
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	697a      	ldr	r2, [r7, #20]
 800669c:	621a      	str	r2, [r3, #32]
}
 800669e:	bf00      	nop
 80066a0:	371c      	adds	r7, #28
 80066a2:	46bd      	mov	sp, r7
 80066a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a8:	4770      	bx	lr
 80066aa:	bf00      	nop
 80066ac:	40012c00 	.word	0x40012c00
 80066b0:	40014000 	.word	0x40014000
 80066b4:	40014400 	.word	0x40014400
 80066b8:	40014800 	.word	0x40014800

080066bc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80066bc:	b480      	push	{r7}
 80066be:	b087      	sub	sp, #28
 80066c0:	af00      	add	r7, sp, #0
 80066c2:	6078      	str	r0, [r7, #4]
 80066c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	6a1b      	ldr	r3, [r3, #32]
 80066ca:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	6a1b      	ldr	r3, [r3, #32]
 80066d6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	685b      	ldr	r3, [r3, #4]
 80066dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	69db      	ldr	r3, [r3, #28]
 80066e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80066ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	f023 0303 	bic.w	r3, r3, #3
 80066f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80066f8:	683b      	ldr	r3, [r7, #0]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	68fa      	ldr	r2, [r7, #12]
 80066fe:	4313      	orrs	r3, r2
 8006700:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006702:	697b      	ldr	r3, [r7, #20]
 8006704:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006708:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800670a:	683b      	ldr	r3, [r7, #0]
 800670c:	689b      	ldr	r3, [r3, #8]
 800670e:	021b      	lsls	r3, r3, #8
 8006710:	697a      	ldr	r2, [r7, #20]
 8006712:	4313      	orrs	r3, r2
 8006714:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	4a23      	ldr	r2, [pc, #140]	; (80067a8 <TIM_OC3_SetConfig+0xec>)
 800671a:	4293      	cmp	r3, r2
 800671c:	d10d      	bne.n	800673a <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800671e:	697b      	ldr	r3, [r7, #20]
 8006720:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006724:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006726:	683b      	ldr	r3, [r7, #0]
 8006728:	68db      	ldr	r3, [r3, #12]
 800672a:	021b      	lsls	r3, r3, #8
 800672c:	697a      	ldr	r2, [r7, #20]
 800672e:	4313      	orrs	r3, r2
 8006730:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006732:	697b      	ldr	r3, [r7, #20]
 8006734:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006738:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	4a1a      	ldr	r2, [pc, #104]	; (80067a8 <TIM_OC3_SetConfig+0xec>)
 800673e:	4293      	cmp	r3, r2
 8006740:	d00b      	beq.n	800675a <TIM_OC3_SetConfig+0x9e>
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	4a19      	ldr	r2, [pc, #100]	; (80067ac <TIM_OC3_SetConfig+0xf0>)
 8006746:	4293      	cmp	r3, r2
 8006748:	d007      	beq.n	800675a <TIM_OC3_SetConfig+0x9e>
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	4a18      	ldr	r2, [pc, #96]	; (80067b0 <TIM_OC3_SetConfig+0xf4>)
 800674e:	4293      	cmp	r3, r2
 8006750:	d003      	beq.n	800675a <TIM_OC3_SetConfig+0x9e>
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	4a17      	ldr	r2, [pc, #92]	; (80067b4 <TIM_OC3_SetConfig+0xf8>)
 8006756:	4293      	cmp	r3, r2
 8006758:	d113      	bne.n	8006782 <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800675a:	693b      	ldr	r3, [r7, #16]
 800675c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006760:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006762:	693b      	ldr	r3, [r7, #16]
 8006764:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006768:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800676a:	683b      	ldr	r3, [r7, #0]
 800676c:	695b      	ldr	r3, [r3, #20]
 800676e:	011b      	lsls	r3, r3, #4
 8006770:	693a      	ldr	r2, [r7, #16]
 8006772:	4313      	orrs	r3, r2
 8006774:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006776:	683b      	ldr	r3, [r7, #0]
 8006778:	699b      	ldr	r3, [r3, #24]
 800677a:	011b      	lsls	r3, r3, #4
 800677c:	693a      	ldr	r2, [r7, #16]
 800677e:	4313      	orrs	r3, r2
 8006780:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	693a      	ldr	r2, [r7, #16]
 8006786:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	68fa      	ldr	r2, [r7, #12]
 800678c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800678e:	683b      	ldr	r3, [r7, #0]
 8006790:	685a      	ldr	r2, [r3, #4]
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	697a      	ldr	r2, [r7, #20]
 800679a:	621a      	str	r2, [r3, #32]
}
 800679c:	bf00      	nop
 800679e:	371c      	adds	r7, #28
 80067a0:	46bd      	mov	sp, r7
 80067a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a6:	4770      	bx	lr
 80067a8:	40012c00 	.word	0x40012c00
 80067ac:	40014000 	.word	0x40014000
 80067b0:	40014400 	.word	0x40014400
 80067b4:	40014800 	.word	0x40014800

080067b8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80067b8:	b480      	push	{r7}
 80067ba:	b087      	sub	sp, #28
 80067bc:	af00      	add	r7, sp, #0
 80067be:	6078      	str	r0, [r7, #4]
 80067c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	6a1b      	ldr	r3, [r3, #32]
 80067c6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	6a1b      	ldr	r3, [r3, #32]
 80067d2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	685b      	ldr	r3, [r3, #4]
 80067d8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	69db      	ldr	r3, [r3, #28]
 80067de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80067e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80067ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80067f2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80067f4:	683b      	ldr	r3, [r7, #0]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	021b      	lsls	r3, r3, #8
 80067fa:	68fa      	ldr	r2, [r7, #12]
 80067fc:	4313      	orrs	r3, r2
 80067fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006800:	693b      	ldr	r3, [r7, #16]
 8006802:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006806:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006808:	683b      	ldr	r3, [r7, #0]
 800680a:	689b      	ldr	r3, [r3, #8]
 800680c:	031b      	lsls	r3, r3, #12
 800680e:	693a      	ldr	r2, [r7, #16]
 8006810:	4313      	orrs	r3, r2
 8006812:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	4a16      	ldr	r2, [pc, #88]	; (8006870 <TIM_OC4_SetConfig+0xb8>)
 8006818:	4293      	cmp	r3, r2
 800681a:	d00b      	beq.n	8006834 <TIM_OC4_SetConfig+0x7c>
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	4a15      	ldr	r2, [pc, #84]	; (8006874 <TIM_OC4_SetConfig+0xbc>)
 8006820:	4293      	cmp	r3, r2
 8006822:	d007      	beq.n	8006834 <TIM_OC4_SetConfig+0x7c>
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	4a14      	ldr	r2, [pc, #80]	; (8006878 <TIM_OC4_SetConfig+0xc0>)
 8006828:	4293      	cmp	r3, r2
 800682a:	d003      	beq.n	8006834 <TIM_OC4_SetConfig+0x7c>
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	4a13      	ldr	r2, [pc, #76]	; (800687c <TIM_OC4_SetConfig+0xc4>)
 8006830:	4293      	cmp	r3, r2
 8006832:	d109      	bne.n	8006848 <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006834:	697b      	ldr	r3, [r7, #20]
 8006836:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800683a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800683c:	683b      	ldr	r3, [r7, #0]
 800683e:	695b      	ldr	r3, [r3, #20]
 8006840:	019b      	lsls	r3, r3, #6
 8006842:	697a      	ldr	r2, [r7, #20]
 8006844:	4313      	orrs	r3, r2
 8006846:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	697a      	ldr	r2, [r7, #20]
 800684c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	68fa      	ldr	r2, [r7, #12]
 8006852:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006854:	683b      	ldr	r3, [r7, #0]
 8006856:	685a      	ldr	r2, [r3, #4]
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	693a      	ldr	r2, [r7, #16]
 8006860:	621a      	str	r2, [r3, #32]
}
 8006862:	bf00      	nop
 8006864:	371c      	adds	r7, #28
 8006866:	46bd      	mov	sp, r7
 8006868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800686c:	4770      	bx	lr
 800686e:	bf00      	nop
 8006870:	40012c00 	.word	0x40012c00
 8006874:	40014000 	.word	0x40014000
 8006878:	40014400 	.word	0x40014400
 800687c:	40014800 	.word	0x40014800

08006880 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006880:	b480      	push	{r7}
 8006882:	b087      	sub	sp, #28
 8006884:	af00      	add	r7, sp, #0
 8006886:	6078      	str	r0, [r7, #4]
 8006888:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	6a1b      	ldr	r3, [r3, #32]
 800688e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	6a1b      	ldr	r3, [r3, #32]
 800689a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	685b      	ldr	r3, [r3, #4]
 80068a0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80068ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80068b4:	683b      	ldr	r3, [r7, #0]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	68fa      	ldr	r2, [r7, #12]
 80068ba:	4313      	orrs	r3, r2
 80068bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80068be:	693b      	ldr	r3, [r7, #16]
 80068c0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80068c4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80068c6:	683b      	ldr	r3, [r7, #0]
 80068c8:	689b      	ldr	r3, [r3, #8]
 80068ca:	041b      	lsls	r3, r3, #16
 80068cc:	693a      	ldr	r2, [r7, #16]
 80068ce:	4313      	orrs	r3, r2
 80068d0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	4a15      	ldr	r2, [pc, #84]	; (800692c <TIM_OC5_SetConfig+0xac>)
 80068d6:	4293      	cmp	r3, r2
 80068d8:	d00b      	beq.n	80068f2 <TIM_OC5_SetConfig+0x72>
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	4a14      	ldr	r2, [pc, #80]	; (8006930 <TIM_OC5_SetConfig+0xb0>)
 80068de:	4293      	cmp	r3, r2
 80068e0:	d007      	beq.n	80068f2 <TIM_OC5_SetConfig+0x72>
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	4a13      	ldr	r2, [pc, #76]	; (8006934 <TIM_OC5_SetConfig+0xb4>)
 80068e6:	4293      	cmp	r3, r2
 80068e8:	d003      	beq.n	80068f2 <TIM_OC5_SetConfig+0x72>
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	4a12      	ldr	r2, [pc, #72]	; (8006938 <TIM_OC5_SetConfig+0xb8>)
 80068ee:	4293      	cmp	r3, r2
 80068f0:	d109      	bne.n	8006906 <TIM_OC5_SetConfig+0x86>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80068f2:	697b      	ldr	r3, [r7, #20]
 80068f4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80068f8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80068fa:	683b      	ldr	r3, [r7, #0]
 80068fc:	695b      	ldr	r3, [r3, #20]
 80068fe:	021b      	lsls	r3, r3, #8
 8006900:	697a      	ldr	r2, [r7, #20]
 8006902:	4313      	orrs	r3, r2
 8006904:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	697a      	ldr	r2, [r7, #20]
 800690a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	68fa      	ldr	r2, [r7, #12]
 8006910:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006912:	683b      	ldr	r3, [r7, #0]
 8006914:	685a      	ldr	r2, [r3, #4]
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	693a      	ldr	r2, [r7, #16]
 800691e:	621a      	str	r2, [r3, #32]
}
 8006920:	bf00      	nop
 8006922:	371c      	adds	r7, #28
 8006924:	46bd      	mov	sp, r7
 8006926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800692a:	4770      	bx	lr
 800692c:	40012c00 	.word	0x40012c00
 8006930:	40014000 	.word	0x40014000
 8006934:	40014400 	.word	0x40014400
 8006938:	40014800 	.word	0x40014800

0800693c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800693c:	b480      	push	{r7}
 800693e:	b087      	sub	sp, #28
 8006940:	af00      	add	r7, sp, #0
 8006942:	6078      	str	r0, [r7, #4]
 8006944:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	6a1b      	ldr	r3, [r3, #32]
 800694a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	6a1b      	ldr	r3, [r3, #32]
 8006956:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	685b      	ldr	r3, [r3, #4]
 800695c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006962:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800696a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800696e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006970:	683b      	ldr	r3, [r7, #0]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	021b      	lsls	r3, r3, #8
 8006976:	68fa      	ldr	r2, [r7, #12]
 8006978:	4313      	orrs	r3, r2
 800697a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800697c:	693b      	ldr	r3, [r7, #16]
 800697e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006982:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006984:	683b      	ldr	r3, [r7, #0]
 8006986:	689b      	ldr	r3, [r3, #8]
 8006988:	051b      	lsls	r3, r3, #20
 800698a:	693a      	ldr	r2, [r7, #16]
 800698c:	4313      	orrs	r3, r2
 800698e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	4a16      	ldr	r2, [pc, #88]	; (80069ec <TIM_OC6_SetConfig+0xb0>)
 8006994:	4293      	cmp	r3, r2
 8006996:	d00b      	beq.n	80069b0 <TIM_OC6_SetConfig+0x74>
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	4a15      	ldr	r2, [pc, #84]	; (80069f0 <TIM_OC6_SetConfig+0xb4>)
 800699c:	4293      	cmp	r3, r2
 800699e:	d007      	beq.n	80069b0 <TIM_OC6_SetConfig+0x74>
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	4a14      	ldr	r2, [pc, #80]	; (80069f4 <TIM_OC6_SetConfig+0xb8>)
 80069a4:	4293      	cmp	r3, r2
 80069a6:	d003      	beq.n	80069b0 <TIM_OC6_SetConfig+0x74>
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	4a13      	ldr	r2, [pc, #76]	; (80069f8 <TIM_OC6_SetConfig+0xbc>)
 80069ac:	4293      	cmp	r3, r2
 80069ae:	d109      	bne.n	80069c4 <TIM_OC6_SetConfig+0x88>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80069b0:	697b      	ldr	r3, [r7, #20]
 80069b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80069b6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80069b8:	683b      	ldr	r3, [r7, #0]
 80069ba:	695b      	ldr	r3, [r3, #20]
 80069bc:	029b      	lsls	r3, r3, #10
 80069be:	697a      	ldr	r2, [r7, #20]
 80069c0:	4313      	orrs	r3, r2
 80069c2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	697a      	ldr	r2, [r7, #20]
 80069c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	68fa      	ldr	r2, [r7, #12]
 80069ce:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80069d0:	683b      	ldr	r3, [r7, #0]
 80069d2:	685a      	ldr	r2, [r3, #4]
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	693a      	ldr	r2, [r7, #16]
 80069dc:	621a      	str	r2, [r3, #32]
}
 80069de:	bf00      	nop
 80069e0:	371c      	adds	r7, #28
 80069e2:	46bd      	mov	sp, r7
 80069e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e8:	4770      	bx	lr
 80069ea:	bf00      	nop
 80069ec:	40012c00 	.word	0x40012c00
 80069f0:	40014000 	.word	0x40014000
 80069f4:	40014400 	.word	0x40014400
 80069f8:	40014800 	.word	0x40014800

080069fc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80069fc:	b480      	push	{r7}
 80069fe:	b087      	sub	sp, #28
 8006a00:	af00      	add	r7, sp, #0
 8006a02:	60f8      	str	r0, [r7, #12]
 8006a04:	60b9      	str	r1, [r7, #8]
 8006a06:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	6a1b      	ldr	r3, [r3, #32]
 8006a0c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	6a1b      	ldr	r3, [r3, #32]
 8006a12:	f023 0201 	bic.w	r2, r3, #1
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	699b      	ldr	r3, [r3, #24]
 8006a1e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006a20:	693b      	ldr	r3, [r7, #16]
 8006a22:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006a26:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	011b      	lsls	r3, r3, #4
 8006a2c:	693a      	ldr	r2, [r7, #16]
 8006a2e:	4313      	orrs	r3, r2
 8006a30:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006a32:	697b      	ldr	r3, [r7, #20]
 8006a34:	f023 030a 	bic.w	r3, r3, #10
 8006a38:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006a3a:	697a      	ldr	r2, [r7, #20]
 8006a3c:	68bb      	ldr	r3, [r7, #8]
 8006a3e:	4313      	orrs	r3, r2
 8006a40:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	693a      	ldr	r2, [r7, #16]
 8006a46:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	697a      	ldr	r2, [r7, #20]
 8006a4c:	621a      	str	r2, [r3, #32]
}
 8006a4e:	bf00      	nop
 8006a50:	371c      	adds	r7, #28
 8006a52:	46bd      	mov	sp, r7
 8006a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a58:	4770      	bx	lr

08006a5a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006a5a:	b480      	push	{r7}
 8006a5c:	b087      	sub	sp, #28
 8006a5e:	af00      	add	r7, sp, #0
 8006a60:	60f8      	str	r0, [r7, #12]
 8006a62:	60b9      	str	r1, [r7, #8]
 8006a64:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	6a1b      	ldr	r3, [r3, #32]
 8006a6a:	f023 0210 	bic.w	r2, r3, #16
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	699b      	ldr	r3, [r3, #24]
 8006a76:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	6a1b      	ldr	r3, [r3, #32]
 8006a7c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006a7e:	697b      	ldr	r3, [r7, #20]
 8006a80:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006a84:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	031b      	lsls	r3, r3, #12
 8006a8a:	697a      	ldr	r2, [r7, #20]
 8006a8c:	4313      	orrs	r3, r2
 8006a8e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006a90:	693b      	ldr	r3, [r7, #16]
 8006a92:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006a96:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006a98:	68bb      	ldr	r3, [r7, #8]
 8006a9a:	011b      	lsls	r3, r3, #4
 8006a9c:	693a      	ldr	r2, [r7, #16]
 8006a9e:	4313      	orrs	r3, r2
 8006aa0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	697a      	ldr	r2, [r7, #20]
 8006aa6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	693a      	ldr	r2, [r7, #16]
 8006aac:	621a      	str	r2, [r3, #32]
}
 8006aae:	bf00      	nop
 8006ab0:	371c      	adds	r7, #28
 8006ab2:	46bd      	mov	sp, r7
 8006ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab8:	4770      	bx	lr

08006aba <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006aba:	b480      	push	{r7}
 8006abc:	b085      	sub	sp, #20
 8006abe:	af00      	add	r7, sp, #0
 8006ac0:	6078      	str	r0, [r7, #4]
 8006ac2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	689b      	ldr	r3, [r3, #8]
 8006ac8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ad0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006ad2:	683a      	ldr	r2, [r7, #0]
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	4313      	orrs	r3, r2
 8006ad8:	f043 0307 	orr.w	r3, r3, #7
 8006adc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	68fa      	ldr	r2, [r7, #12]
 8006ae2:	609a      	str	r2, [r3, #8]
}
 8006ae4:	bf00      	nop
 8006ae6:	3714      	adds	r7, #20
 8006ae8:	46bd      	mov	sp, r7
 8006aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aee:	4770      	bx	lr

08006af0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006af0:	b480      	push	{r7}
 8006af2:	b087      	sub	sp, #28
 8006af4:	af00      	add	r7, sp, #0
 8006af6:	60f8      	str	r0, [r7, #12]
 8006af8:	60b9      	str	r1, [r7, #8]
 8006afa:	607a      	str	r2, [r7, #4]
 8006afc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	689b      	ldr	r3, [r3, #8]
 8006b02:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006b04:	697b      	ldr	r3, [r7, #20]
 8006b06:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006b0a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006b0c:	683b      	ldr	r3, [r7, #0]
 8006b0e:	021a      	lsls	r2, r3, #8
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	431a      	orrs	r2, r3
 8006b14:	68bb      	ldr	r3, [r7, #8]
 8006b16:	4313      	orrs	r3, r2
 8006b18:	697a      	ldr	r2, [r7, #20]
 8006b1a:	4313      	orrs	r3, r2
 8006b1c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	697a      	ldr	r2, [r7, #20]
 8006b22:	609a      	str	r2, [r3, #8]
}
 8006b24:	bf00      	nop
 8006b26:	371c      	adds	r7, #28
 8006b28:	46bd      	mov	sp, r7
 8006b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b2e:	4770      	bx	lr

08006b30 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006b30:	b480      	push	{r7}
 8006b32:	b087      	sub	sp, #28
 8006b34:	af00      	add	r7, sp, #0
 8006b36:	60f8      	str	r0, [r7, #12]
 8006b38:	60b9      	str	r1, [r7, #8]
 8006b3a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006b3c:	68bb      	ldr	r3, [r7, #8]
 8006b3e:	f003 031f 	and.w	r3, r3, #31
 8006b42:	2201      	movs	r2, #1
 8006b44:	fa02 f303 	lsl.w	r3, r2, r3
 8006b48:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	6a1a      	ldr	r2, [r3, #32]
 8006b4e:	697b      	ldr	r3, [r7, #20]
 8006b50:	43db      	mvns	r3, r3
 8006b52:	401a      	ands	r2, r3
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	6a1a      	ldr	r2, [r3, #32]
 8006b5c:	68bb      	ldr	r3, [r7, #8]
 8006b5e:	f003 031f 	and.w	r3, r3, #31
 8006b62:	6879      	ldr	r1, [r7, #4]
 8006b64:	fa01 f303 	lsl.w	r3, r1, r3
 8006b68:	431a      	orrs	r2, r3
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	621a      	str	r2, [r3, #32]
}
 8006b6e:	bf00      	nop
 8006b70:	371c      	adds	r7, #28
 8006b72:	46bd      	mov	sp, r7
 8006b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b78:	4770      	bx	lr
	...

08006b7c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006b7c:	b480      	push	{r7}
 8006b7e:	b085      	sub	sp, #20
 8006b80:	af00      	add	r7, sp, #0
 8006b82:	6078      	str	r0, [r7, #4]
 8006b84:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006b8c:	2b01      	cmp	r3, #1
 8006b8e:	d101      	bne.n	8006b94 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006b90:	2302      	movs	r3, #2
 8006b92:	e04f      	b.n	8006c34 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	2201      	movs	r2, #1
 8006b98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	2202      	movs	r2, #2
 8006ba0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	685b      	ldr	r3, [r3, #4]
 8006baa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	689b      	ldr	r3, [r3, #8]
 8006bb2:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	4a21      	ldr	r2, [pc, #132]	; (8006c40 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8006bba:	4293      	cmp	r3, r2
 8006bbc:	d108      	bne.n	8006bd0 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006bc4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006bc6:	683b      	ldr	r3, [r7, #0]
 8006bc8:	685b      	ldr	r3, [r3, #4]
 8006bca:	68fa      	ldr	r2, [r7, #12]
 8006bcc:	4313      	orrs	r3, r2
 8006bce:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006bd6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006bd8:	683b      	ldr	r3, [r7, #0]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	68fa      	ldr	r2, [r7, #12]
 8006bde:	4313      	orrs	r3, r2
 8006be0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	68fa      	ldr	r2, [r7, #12]
 8006be8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	4a14      	ldr	r2, [pc, #80]	; (8006c40 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8006bf0:	4293      	cmp	r3, r2
 8006bf2:	d009      	beq.n	8006c08 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006bfc:	d004      	beq.n	8006c08 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	4a10      	ldr	r2, [pc, #64]	; (8006c44 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006c04:	4293      	cmp	r3, r2
 8006c06:	d10c      	bne.n	8006c22 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006c08:	68bb      	ldr	r3, [r7, #8]
 8006c0a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006c0e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006c10:	683b      	ldr	r3, [r7, #0]
 8006c12:	689b      	ldr	r3, [r3, #8]
 8006c14:	68ba      	ldr	r2, [r7, #8]
 8006c16:	4313      	orrs	r3, r2
 8006c18:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	68ba      	ldr	r2, [r7, #8]
 8006c20:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	2201      	movs	r2, #1
 8006c26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	2200      	movs	r2, #0
 8006c2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006c32:	2300      	movs	r3, #0
}
 8006c34:	4618      	mov	r0, r3
 8006c36:	3714      	adds	r7, #20
 8006c38:	46bd      	mov	sp, r7
 8006c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c3e:	4770      	bx	lr
 8006c40:	40012c00 	.word	0x40012c00
 8006c44:	40014000 	.word	0x40014000

08006c48 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006c48:	b480      	push	{r7}
 8006c4a:	b085      	sub	sp, #20
 8006c4c:	af00      	add	r7, sp, #0
 8006c4e:	6078      	str	r0, [r7, #4]
 8006c50:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006c52:	2300      	movs	r3, #0
 8006c54:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006c5c:	2b01      	cmp	r3, #1
 8006c5e:	d101      	bne.n	8006c64 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006c60:	2302      	movs	r3, #2
 8006c62:	e060      	b.n	8006d26 <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	2201      	movs	r2, #1
 8006c68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006c72:	683b      	ldr	r3, [r7, #0]
 8006c74:	68db      	ldr	r3, [r3, #12]
 8006c76:	4313      	orrs	r3, r2
 8006c78:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006c80:	683b      	ldr	r3, [r7, #0]
 8006c82:	689b      	ldr	r3, [r3, #8]
 8006c84:	4313      	orrs	r3, r2
 8006c86:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006c8e:	683b      	ldr	r3, [r7, #0]
 8006c90:	685b      	ldr	r3, [r3, #4]
 8006c92:	4313      	orrs	r3, r2
 8006c94:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006c9c:	683b      	ldr	r3, [r7, #0]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	4313      	orrs	r3, r2
 8006ca2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006caa:	683b      	ldr	r3, [r7, #0]
 8006cac:	691b      	ldr	r3, [r3, #16]
 8006cae:	4313      	orrs	r3, r2
 8006cb0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006cb8:	683b      	ldr	r3, [r7, #0]
 8006cba:	695b      	ldr	r3, [r3, #20]
 8006cbc:	4313      	orrs	r3, r2
 8006cbe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006cc6:	683b      	ldr	r3, [r7, #0]
 8006cc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cca:	4313      	orrs	r3, r2
 8006ccc:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8006cd4:	683b      	ldr	r3, [r7, #0]
 8006cd6:	699b      	ldr	r3, [r3, #24]
 8006cd8:	041b      	lsls	r3, r3, #16
 8006cda:	4313      	orrs	r3, r2
 8006cdc:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	4a14      	ldr	r2, [pc, #80]	; (8006d34 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8006ce4:	4293      	cmp	r3, r2
 8006ce6:	d115      	bne.n	8006d14 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8006cee:	683b      	ldr	r3, [r7, #0]
 8006cf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cf2:	051b      	lsls	r3, r3, #20
 8006cf4:	4313      	orrs	r3, r2
 8006cf6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006cfe:	683b      	ldr	r3, [r7, #0]
 8006d00:	69db      	ldr	r3, [r3, #28]
 8006d02:	4313      	orrs	r3, r2
 8006d04:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8006d0c:	683b      	ldr	r3, [r7, #0]
 8006d0e:	6a1b      	ldr	r3, [r3, #32]
 8006d10:	4313      	orrs	r3, r2
 8006d12:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	68fa      	ldr	r2, [r7, #12]
 8006d1a:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	2200      	movs	r2, #0
 8006d20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006d24:	2300      	movs	r3, #0
}
 8006d26:	4618      	mov	r0, r3
 8006d28:	3714      	adds	r7, #20
 8006d2a:	46bd      	mov	sp, r7
 8006d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d30:	4770      	bx	lr
 8006d32:	bf00      	nop
 8006d34:	40012c00 	.word	0x40012c00

08006d38 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006d38:	b580      	push	{r7, lr}
 8006d3a:	b082      	sub	sp, #8
 8006d3c:	af00      	add	r7, sp, #0
 8006d3e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d101      	bne.n	8006d4a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006d46:	2301      	movs	r3, #1
 8006d48:	e040      	b.n	8006dcc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d106      	bne.n	8006d60 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	2200      	movs	r2, #0
 8006d56:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006d5a:	6878      	ldr	r0, [r7, #4]
 8006d5c:	f7fb fa4e 	bl	80021fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	2224      	movs	r2, #36	; 0x24
 8006d64:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	681a      	ldr	r2, [r3, #0]
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	f022 0201 	bic.w	r2, r2, #1
 8006d74:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006d76:	6878      	ldr	r0, [r7, #4]
 8006d78:	f000 f8b6 	bl	8006ee8 <UART_SetConfig>
 8006d7c:	4603      	mov	r3, r0
 8006d7e:	2b01      	cmp	r3, #1
 8006d80:	d101      	bne.n	8006d86 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8006d82:	2301      	movs	r3, #1
 8006d84:	e022      	b.n	8006dcc <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d002      	beq.n	8006d94 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006d8e:	6878      	ldr	r0, [r7, #4]
 8006d90:	f000 f9e0 	bl	8007154 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	685a      	ldr	r2, [r3, #4]
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006da2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	689a      	ldr	r2, [r3, #8]
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006db2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	681a      	ldr	r2, [r3, #0]
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	f042 0201 	orr.w	r2, r2, #1
 8006dc2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006dc4:	6878      	ldr	r0, [r7, #4]
 8006dc6:	f000 fa67 	bl	8007298 <UART_CheckIdleState>
 8006dca:	4603      	mov	r3, r0
}
 8006dcc:	4618      	mov	r0, r3
 8006dce:	3708      	adds	r7, #8
 8006dd0:	46bd      	mov	sp, r7
 8006dd2:	bd80      	pop	{r7, pc}

08006dd4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006dd4:	b580      	push	{r7, lr}
 8006dd6:	b08a      	sub	sp, #40	; 0x28
 8006dd8:	af02      	add	r7, sp, #8
 8006dda:	60f8      	str	r0, [r7, #12]
 8006ddc:	60b9      	str	r1, [r7, #8]
 8006dde:	603b      	str	r3, [r7, #0]
 8006de0:	4613      	mov	r3, r2
 8006de2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006de8:	2b20      	cmp	r3, #32
 8006dea:	d178      	bne.n	8006ede <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006dec:	68bb      	ldr	r3, [r7, #8]
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d002      	beq.n	8006df8 <HAL_UART_Transmit+0x24>
 8006df2:	88fb      	ldrh	r3, [r7, #6]
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d101      	bne.n	8006dfc <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8006df8:	2301      	movs	r3, #1
 8006dfa:	e071      	b.n	8006ee0 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	2200      	movs	r2, #0
 8006e00:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	2221      	movs	r2, #33	; 0x21
 8006e08:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006e0a:	f7fb fb8b 	bl	8002524 <HAL_GetTick>
 8006e0e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	88fa      	ldrh	r2, [r7, #6]
 8006e14:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	88fa      	ldrh	r2, [r7, #6]
 8006e1c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	689b      	ldr	r3, [r3, #8]
 8006e24:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e28:	d108      	bne.n	8006e3c <HAL_UART_Transmit+0x68>
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	691b      	ldr	r3, [r3, #16]
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d104      	bne.n	8006e3c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8006e32:	2300      	movs	r3, #0
 8006e34:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006e36:	68bb      	ldr	r3, [r7, #8]
 8006e38:	61bb      	str	r3, [r7, #24]
 8006e3a:	e003      	b.n	8006e44 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8006e3c:	68bb      	ldr	r3, [r7, #8]
 8006e3e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006e40:	2300      	movs	r3, #0
 8006e42:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006e44:	e030      	b.n	8006ea8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006e46:	683b      	ldr	r3, [r7, #0]
 8006e48:	9300      	str	r3, [sp, #0]
 8006e4a:	697b      	ldr	r3, [r7, #20]
 8006e4c:	2200      	movs	r2, #0
 8006e4e:	2180      	movs	r1, #128	; 0x80
 8006e50:	68f8      	ldr	r0, [r7, #12]
 8006e52:	f000 fac9 	bl	80073e8 <UART_WaitOnFlagUntilTimeout>
 8006e56:	4603      	mov	r3, r0
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d004      	beq.n	8006e66 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	2220      	movs	r2, #32
 8006e60:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8006e62:	2303      	movs	r3, #3
 8006e64:	e03c      	b.n	8006ee0 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8006e66:	69fb      	ldr	r3, [r7, #28]
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d10b      	bne.n	8006e84 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006e6c:	69bb      	ldr	r3, [r7, #24]
 8006e6e:	881a      	ldrh	r2, [r3, #0]
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006e78:	b292      	uxth	r2, r2
 8006e7a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006e7c:	69bb      	ldr	r3, [r7, #24]
 8006e7e:	3302      	adds	r3, #2
 8006e80:	61bb      	str	r3, [r7, #24]
 8006e82:	e008      	b.n	8006e96 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006e84:	69fb      	ldr	r3, [r7, #28]
 8006e86:	781a      	ldrb	r2, [r3, #0]
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	b292      	uxth	r2, r2
 8006e8e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006e90:	69fb      	ldr	r3, [r7, #28]
 8006e92:	3301      	adds	r3, #1
 8006e94:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006e9c:	b29b      	uxth	r3, r3
 8006e9e:	3b01      	subs	r3, #1
 8006ea0:	b29a      	uxth	r2, r3
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006eae:	b29b      	uxth	r3, r3
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d1c8      	bne.n	8006e46 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006eb4:	683b      	ldr	r3, [r7, #0]
 8006eb6:	9300      	str	r3, [sp, #0]
 8006eb8:	697b      	ldr	r3, [r7, #20]
 8006eba:	2200      	movs	r2, #0
 8006ebc:	2140      	movs	r1, #64	; 0x40
 8006ebe:	68f8      	ldr	r0, [r7, #12]
 8006ec0:	f000 fa92 	bl	80073e8 <UART_WaitOnFlagUntilTimeout>
 8006ec4:	4603      	mov	r3, r0
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d004      	beq.n	8006ed4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	2220      	movs	r2, #32
 8006ece:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8006ed0:	2303      	movs	r3, #3
 8006ed2:	e005      	b.n	8006ee0 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	2220      	movs	r2, #32
 8006ed8:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8006eda:	2300      	movs	r3, #0
 8006edc:	e000      	b.n	8006ee0 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8006ede:	2302      	movs	r3, #2
  }
}
 8006ee0:	4618      	mov	r0, r3
 8006ee2:	3720      	adds	r7, #32
 8006ee4:	46bd      	mov	sp, r7
 8006ee6:	bd80      	pop	{r7, pc}

08006ee8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006ee8:	b580      	push	{r7, lr}
 8006eea:	b088      	sub	sp, #32
 8006eec:	af00      	add	r7, sp, #0
 8006eee:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006ef0:	2300      	movs	r3, #0
 8006ef2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	689a      	ldr	r2, [r3, #8]
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	691b      	ldr	r3, [r3, #16]
 8006efc:	431a      	orrs	r2, r3
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	695b      	ldr	r3, [r3, #20]
 8006f02:	431a      	orrs	r2, r3
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	69db      	ldr	r3, [r3, #28]
 8006f08:	4313      	orrs	r3, r2
 8006f0a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	681a      	ldr	r2, [r3, #0]
 8006f12:	4b8a      	ldr	r3, [pc, #552]	; (800713c <UART_SetConfig+0x254>)
 8006f14:	4013      	ands	r3, r2
 8006f16:	687a      	ldr	r2, [r7, #4]
 8006f18:	6812      	ldr	r2, [r2, #0]
 8006f1a:	6979      	ldr	r1, [r7, #20]
 8006f1c:	430b      	orrs	r3, r1
 8006f1e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	685b      	ldr	r3, [r3, #4]
 8006f26:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	68da      	ldr	r2, [r3, #12]
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	430a      	orrs	r2, r1
 8006f34:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	699b      	ldr	r3, [r3, #24]
 8006f3a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	6a1b      	ldr	r3, [r3, #32]
 8006f40:	697a      	ldr	r2, [r7, #20]
 8006f42:	4313      	orrs	r3, r2
 8006f44:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	689b      	ldr	r3, [r3, #8]
 8006f4c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	697a      	ldr	r2, [r7, #20]
 8006f56:	430a      	orrs	r2, r1
 8006f58:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	4a78      	ldr	r2, [pc, #480]	; (8007140 <UART_SetConfig+0x258>)
 8006f60:	4293      	cmp	r3, r2
 8006f62:	d120      	bne.n	8006fa6 <UART_SetConfig+0xbe>
 8006f64:	4b77      	ldr	r3, [pc, #476]	; (8007144 <UART_SetConfig+0x25c>)
 8006f66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f68:	f003 0303 	and.w	r3, r3, #3
 8006f6c:	2b03      	cmp	r3, #3
 8006f6e:	d817      	bhi.n	8006fa0 <UART_SetConfig+0xb8>
 8006f70:	a201      	add	r2, pc, #4	; (adr r2, 8006f78 <UART_SetConfig+0x90>)
 8006f72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f76:	bf00      	nop
 8006f78:	08006f89 	.word	0x08006f89
 8006f7c:	08006f95 	.word	0x08006f95
 8006f80:	08006f9b 	.word	0x08006f9b
 8006f84:	08006f8f 	.word	0x08006f8f
 8006f88:	2300      	movs	r3, #0
 8006f8a:	77fb      	strb	r3, [r7, #31]
 8006f8c:	e01d      	b.n	8006fca <UART_SetConfig+0xe2>
 8006f8e:	2302      	movs	r3, #2
 8006f90:	77fb      	strb	r3, [r7, #31]
 8006f92:	e01a      	b.n	8006fca <UART_SetConfig+0xe2>
 8006f94:	2304      	movs	r3, #4
 8006f96:	77fb      	strb	r3, [r7, #31]
 8006f98:	e017      	b.n	8006fca <UART_SetConfig+0xe2>
 8006f9a:	2308      	movs	r3, #8
 8006f9c:	77fb      	strb	r3, [r7, #31]
 8006f9e:	e014      	b.n	8006fca <UART_SetConfig+0xe2>
 8006fa0:	2310      	movs	r3, #16
 8006fa2:	77fb      	strb	r3, [r7, #31]
 8006fa4:	e011      	b.n	8006fca <UART_SetConfig+0xe2>
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	4a67      	ldr	r2, [pc, #412]	; (8007148 <UART_SetConfig+0x260>)
 8006fac:	4293      	cmp	r3, r2
 8006fae:	d102      	bne.n	8006fb6 <UART_SetConfig+0xce>
 8006fb0:	2300      	movs	r3, #0
 8006fb2:	77fb      	strb	r3, [r7, #31]
 8006fb4:	e009      	b.n	8006fca <UART_SetConfig+0xe2>
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	4a64      	ldr	r2, [pc, #400]	; (800714c <UART_SetConfig+0x264>)
 8006fbc:	4293      	cmp	r3, r2
 8006fbe:	d102      	bne.n	8006fc6 <UART_SetConfig+0xde>
 8006fc0:	2300      	movs	r3, #0
 8006fc2:	77fb      	strb	r3, [r7, #31]
 8006fc4:	e001      	b.n	8006fca <UART_SetConfig+0xe2>
 8006fc6:	2310      	movs	r3, #16
 8006fc8:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	69db      	ldr	r3, [r3, #28]
 8006fce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006fd2:	d15a      	bne.n	800708a <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 8006fd4:	7ffb      	ldrb	r3, [r7, #31]
 8006fd6:	2b08      	cmp	r3, #8
 8006fd8:	d827      	bhi.n	800702a <UART_SetConfig+0x142>
 8006fda:	a201      	add	r2, pc, #4	; (adr r2, 8006fe0 <UART_SetConfig+0xf8>)
 8006fdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fe0:	08007005 	.word	0x08007005
 8006fe4:	0800700d 	.word	0x0800700d
 8006fe8:	08007015 	.word	0x08007015
 8006fec:	0800702b 	.word	0x0800702b
 8006ff0:	0800701b 	.word	0x0800701b
 8006ff4:	0800702b 	.word	0x0800702b
 8006ff8:	0800702b 	.word	0x0800702b
 8006ffc:	0800702b 	.word	0x0800702b
 8007000:	08007023 	.word	0x08007023
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007004:	f7fe f826 	bl	8005054 <HAL_RCC_GetPCLK1Freq>
 8007008:	61b8      	str	r0, [r7, #24]
        break;
 800700a:	e013      	b.n	8007034 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800700c:	f7fe f844 	bl	8005098 <HAL_RCC_GetPCLK2Freq>
 8007010:	61b8      	str	r0, [r7, #24]
        break;
 8007012:	e00f      	b.n	8007034 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007014:	4b4e      	ldr	r3, [pc, #312]	; (8007150 <UART_SetConfig+0x268>)
 8007016:	61bb      	str	r3, [r7, #24]
        break;
 8007018:	e00c      	b.n	8007034 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800701a:	f7fd ffa5 	bl	8004f68 <HAL_RCC_GetSysClockFreq>
 800701e:	61b8      	str	r0, [r7, #24]
        break;
 8007020:	e008      	b.n	8007034 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007022:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007026:	61bb      	str	r3, [r7, #24]
        break;
 8007028:	e004      	b.n	8007034 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 800702a:	2300      	movs	r3, #0
 800702c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800702e:	2301      	movs	r3, #1
 8007030:	77bb      	strb	r3, [r7, #30]
        break;
 8007032:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007034:	69bb      	ldr	r3, [r7, #24]
 8007036:	2b00      	cmp	r3, #0
 8007038:	d074      	beq.n	8007124 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800703a:	69bb      	ldr	r3, [r7, #24]
 800703c:	005a      	lsls	r2, r3, #1
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	685b      	ldr	r3, [r3, #4]
 8007042:	085b      	lsrs	r3, r3, #1
 8007044:	441a      	add	r2, r3
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	685b      	ldr	r3, [r3, #4]
 800704a:	fbb2 f3f3 	udiv	r3, r2, r3
 800704e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007050:	693b      	ldr	r3, [r7, #16]
 8007052:	2b0f      	cmp	r3, #15
 8007054:	d916      	bls.n	8007084 <UART_SetConfig+0x19c>
 8007056:	693b      	ldr	r3, [r7, #16]
 8007058:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800705c:	d212      	bcs.n	8007084 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800705e:	693b      	ldr	r3, [r7, #16]
 8007060:	b29b      	uxth	r3, r3
 8007062:	f023 030f 	bic.w	r3, r3, #15
 8007066:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007068:	693b      	ldr	r3, [r7, #16]
 800706a:	085b      	lsrs	r3, r3, #1
 800706c:	b29b      	uxth	r3, r3
 800706e:	f003 0307 	and.w	r3, r3, #7
 8007072:	b29a      	uxth	r2, r3
 8007074:	89fb      	ldrh	r3, [r7, #14]
 8007076:	4313      	orrs	r3, r2
 8007078:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	89fa      	ldrh	r2, [r7, #14]
 8007080:	60da      	str	r2, [r3, #12]
 8007082:	e04f      	b.n	8007124 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8007084:	2301      	movs	r3, #1
 8007086:	77bb      	strb	r3, [r7, #30]
 8007088:	e04c      	b.n	8007124 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800708a:	7ffb      	ldrb	r3, [r7, #31]
 800708c:	2b08      	cmp	r3, #8
 800708e:	d828      	bhi.n	80070e2 <UART_SetConfig+0x1fa>
 8007090:	a201      	add	r2, pc, #4	; (adr r2, 8007098 <UART_SetConfig+0x1b0>)
 8007092:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007096:	bf00      	nop
 8007098:	080070bd 	.word	0x080070bd
 800709c:	080070c5 	.word	0x080070c5
 80070a0:	080070cd 	.word	0x080070cd
 80070a4:	080070e3 	.word	0x080070e3
 80070a8:	080070d3 	.word	0x080070d3
 80070ac:	080070e3 	.word	0x080070e3
 80070b0:	080070e3 	.word	0x080070e3
 80070b4:	080070e3 	.word	0x080070e3
 80070b8:	080070db 	.word	0x080070db
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80070bc:	f7fd ffca 	bl	8005054 <HAL_RCC_GetPCLK1Freq>
 80070c0:	61b8      	str	r0, [r7, #24]
        break;
 80070c2:	e013      	b.n	80070ec <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80070c4:	f7fd ffe8 	bl	8005098 <HAL_RCC_GetPCLK2Freq>
 80070c8:	61b8      	str	r0, [r7, #24]
        break;
 80070ca:	e00f      	b.n	80070ec <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80070cc:	4b20      	ldr	r3, [pc, #128]	; (8007150 <UART_SetConfig+0x268>)
 80070ce:	61bb      	str	r3, [r7, #24]
        break;
 80070d0:	e00c      	b.n	80070ec <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80070d2:	f7fd ff49 	bl	8004f68 <HAL_RCC_GetSysClockFreq>
 80070d6:	61b8      	str	r0, [r7, #24]
        break;
 80070d8:	e008      	b.n	80070ec <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80070da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80070de:	61bb      	str	r3, [r7, #24]
        break;
 80070e0:	e004      	b.n	80070ec <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 80070e2:	2300      	movs	r3, #0
 80070e4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80070e6:	2301      	movs	r3, #1
 80070e8:	77bb      	strb	r3, [r7, #30]
        break;
 80070ea:	bf00      	nop
    }

    if (pclk != 0U)
 80070ec:	69bb      	ldr	r3, [r7, #24]
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d018      	beq.n	8007124 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	685b      	ldr	r3, [r3, #4]
 80070f6:	085a      	lsrs	r2, r3, #1
 80070f8:	69bb      	ldr	r3, [r7, #24]
 80070fa:	441a      	add	r2, r3
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	685b      	ldr	r3, [r3, #4]
 8007100:	fbb2 f3f3 	udiv	r3, r2, r3
 8007104:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007106:	693b      	ldr	r3, [r7, #16]
 8007108:	2b0f      	cmp	r3, #15
 800710a:	d909      	bls.n	8007120 <UART_SetConfig+0x238>
 800710c:	693b      	ldr	r3, [r7, #16]
 800710e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007112:	d205      	bcs.n	8007120 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007114:	693b      	ldr	r3, [r7, #16]
 8007116:	b29a      	uxth	r2, r3
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	60da      	str	r2, [r3, #12]
 800711e:	e001      	b.n	8007124 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8007120:	2301      	movs	r3, #1
 8007122:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	2200      	movs	r2, #0
 8007128:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	2200      	movs	r2, #0
 800712e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8007130:	7fbb      	ldrb	r3, [r7, #30]
}
 8007132:	4618      	mov	r0, r3
 8007134:	3720      	adds	r7, #32
 8007136:	46bd      	mov	sp, r7
 8007138:	bd80      	pop	{r7, pc}
 800713a:	bf00      	nop
 800713c:	efff69f3 	.word	0xefff69f3
 8007140:	40013800 	.word	0x40013800
 8007144:	40021000 	.word	0x40021000
 8007148:	40004400 	.word	0x40004400
 800714c:	40004800 	.word	0x40004800
 8007150:	007a1200 	.word	0x007a1200

08007154 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007154:	b480      	push	{r7}
 8007156:	b083      	sub	sp, #12
 8007158:	af00      	add	r7, sp, #0
 800715a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007160:	f003 0301 	and.w	r3, r3, #1
 8007164:	2b00      	cmp	r3, #0
 8007166:	d00a      	beq.n	800717e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	685b      	ldr	r3, [r3, #4]
 800716e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	430a      	orrs	r2, r1
 800717c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007182:	f003 0302 	and.w	r3, r3, #2
 8007186:	2b00      	cmp	r3, #0
 8007188:	d00a      	beq.n	80071a0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	685b      	ldr	r3, [r3, #4]
 8007190:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	430a      	orrs	r2, r1
 800719e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071a4:	f003 0304 	and.w	r3, r3, #4
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d00a      	beq.n	80071c2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	685b      	ldr	r3, [r3, #4]
 80071b2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	430a      	orrs	r2, r1
 80071c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071c6:	f003 0308 	and.w	r3, r3, #8
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d00a      	beq.n	80071e4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	685b      	ldr	r3, [r3, #4]
 80071d4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	430a      	orrs	r2, r1
 80071e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071e8:	f003 0310 	and.w	r3, r3, #16
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d00a      	beq.n	8007206 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	689b      	ldr	r3, [r3, #8]
 80071f6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	430a      	orrs	r2, r1
 8007204:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800720a:	f003 0320 	and.w	r3, r3, #32
 800720e:	2b00      	cmp	r3, #0
 8007210:	d00a      	beq.n	8007228 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	689b      	ldr	r3, [r3, #8]
 8007218:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	430a      	orrs	r2, r1
 8007226:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800722c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007230:	2b00      	cmp	r3, #0
 8007232:	d01a      	beq.n	800726a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	685b      	ldr	r3, [r3, #4]
 800723a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	430a      	orrs	r2, r1
 8007248:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800724e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007252:	d10a      	bne.n	800726a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	685b      	ldr	r3, [r3, #4]
 800725a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	430a      	orrs	r2, r1
 8007268:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800726e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007272:	2b00      	cmp	r3, #0
 8007274:	d00a      	beq.n	800728c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	685b      	ldr	r3, [r3, #4]
 800727c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	430a      	orrs	r2, r1
 800728a:	605a      	str	r2, [r3, #4]
  }
}
 800728c:	bf00      	nop
 800728e:	370c      	adds	r7, #12
 8007290:	46bd      	mov	sp, r7
 8007292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007296:	4770      	bx	lr

08007298 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007298:	b580      	push	{r7, lr}
 800729a:	b098      	sub	sp, #96	; 0x60
 800729c:	af02      	add	r7, sp, #8
 800729e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	2200      	movs	r2, #0
 80072a4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80072a8:	f7fb f93c 	bl	8002524 <HAL_GetTick>
 80072ac:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	f003 0308 	and.w	r3, r3, #8
 80072b8:	2b08      	cmp	r3, #8
 80072ba:	d12e      	bne.n	800731a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80072bc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80072c0:	9300      	str	r3, [sp, #0]
 80072c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80072c4:	2200      	movs	r2, #0
 80072c6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80072ca:	6878      	ldr	r0, [r7, #4]
 80072cc:	f000 f88c 	bl	80073e8 <UART_WaitOnFlagUntilTimeout>
 80072d0:	4603      	mov	r3, r0
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d021      	beq.n	800731a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072de:	e853 3f00 	ldrex	r3, [r3]
 80072e2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80072e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80072e6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80072ea:	653b      	str	r3, [r7, #80]	; 0x50
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	461a      	mov	r2, r3
 80072f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80072f4:	647b      	str	r3, [r7, #68]	; 0x44
 80072f6:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072f8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80072fa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80072fc:	e841 2300 	strex	r3, r2, [r1]
 8007300:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007302:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007304:	2b00      	cmp	r3, #0
 8007306:	d1e6      	bne.n	80072d6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	2220      	movs	r2, #32
 800730c:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	2200      	movs	r2, #0
 8007312:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007316:	2303      	movs	r3, #3
 8007318:	e062      	b.n	80073e0 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	f003 0304 	and.w	r3, r3, #4
 8007324:	2b04      	cmp	r3, #4
 8007326:	d149      	bne.n	80073bc <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007328:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800732c:	9300      	str	r3, [sp, #0]
 800732e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007330:	2200      	movs	r2, #0
 8007332:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007336:	6878      	ldr	r0, [r7, #4]
 8007338:	f000 f856 	bl	80073e8 <UART_WaitOnFlagUntilTimeout>
 800733c:	4603      	mov	r3, r0
 800733e:	2b00      	cmp	r3, #0
 8007340:	d03c      	beq.n	80073bc <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800734a:	e853 3f00 	ldrex	r3, [r3]
 800734e:	623b      	str	r3, [r7, #32]
   return(result);
 8007350:	6a3b      	ldr	r3, [r7, #32]
 8007352:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007356:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	461a      	mov	r2, r3
 800735e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007360:	633b      	str	r3, [r7, #48]	; 0x30
 8007362:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007364:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007366:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007368:	e841 2300 	strex	r3, r2, [r1]
 800736c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800736e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007370:	2b00      	cmp	r3, #0
 8007372:	d1e6      	bne.n	8007342 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	3308      	adds	r3, #8
 800737a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800737c:	693b      	ldr	r3, [r7, #16]
 800737e:	e853 3f00 	ldrex	r3, [r3]
 8007382:	60fb      	str	r3, [r7, #12]
   return(result);
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	f023 0301 	bic.w	r3, r3, #1
 800738a:	64bb      	str	r3, [r7, #72]	; 0x48
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	3308      	adds	r3, #8
 8007392:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007394:	61fa      	str	r2, [r7, #28]
 8007396:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007398:	69b9      	ldr	r1, [r7, #24]
 800739a:	69fa      	ldr	r2, [r7, #28]
 800739c:	e841 2300 	strex	r3, r2, [r1]
 80073a0:	617b      	str	r3, [r7, #20]
   return(result);
 80073a2:	697b      	ldr	r3, [r7, #20]
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d1e5      	bne.n	8007374 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	2220      	movs	r2, #32
 80073ac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	2200      	movs	r2, #0
 80073b4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80073b8:	2303      	movs	r3, #3
 80073ba:	e011      	b.n	80073e0 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	2220      	movs	r2, #32
 80073c0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	2220      	movs	r2, #32
 80073c6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	2200      	movs	r2, #0
 80073ce:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	2200      	movs	r2, #0
 80073d4:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	2200      	movs	r2, #0
 80073da:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80073de:	2300      	movs	r3, #0
}
 80073e0:	4618      	mov	r0, r3
 80073e2:	3758      	adds	r7, #88	; 0x58
 80073e4:	46bd      	mov	sp, r7
 80073e6:	bd80      	pop	{r7, pc}

080073e8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80073e8:	b580      	push	{r7, lr}
 80073ea:	b084      	sub	sp, #16
 80073ec:	af00      	add	r7, sp, #0
 80073ee:	60f8      	str	r0, [r7, #12]
 80073f0:	60b9      	str	r1, [r7, #8]
 80073f2:	603b      	str	r3, [r7, #0]
 80073f4:	4613      	mov	r3, r2
 80073f6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80073f8:	e049      	b.n	800748e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80073fa:	69bb      	ldr	r3, [r7, #24]
 80073fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007400:	d045      	beq.n	800748e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007402:	f7fb f88f 	bl	8002524 <HAL_GetTick>
 8007406:	4602      	mov	r2, r0
 8007408:	683b      	ldr	r3, [r7, #0]
 800740a:	1ad3      	subs	r3, r2, r3
 800740c:	69ba      	ldr	r2, [r7, #24]
 800740e:	429a      	cmp	r2, r3
 8007410:	d302      	bcc.n	8007418 <UART_WaitOnFlagUntilTimeout+0x30>
 8007412:	69bb      	ldr	r3, [r7, #24]
 8007414:	2b00      	cmp	r3, #0
 8007416:	d101      	bne.n	800741c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007418:	2303      	movs	r3, #3
 800741a:	e048      	b.n	80074ae <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	f003 0304 	and.w	r3, r3, #4
 8007426:	2b00      	cmp	r3, #0
 8007428:	d031      	beq.n	800748e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	69db      	ldr	r3, [r3, #28]
 8007430:	f003 0308 	and.w	r3, r3, #8
 8007434:	2b08      	cmp	r3, #8
 8007436:	d110      	bne.n	800745a <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	2208      	movs	r2, #8
 800743e:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8007440:	68f8      	ldr	r0, [r7, #12]
 8007442:	f000 f838 	bl	80074b6 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	2208      	movs	r2, #8
 800744a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	2200      	movs	r2, #0
 8007452:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 8007456:	2301      	movs	r3, #1
 8007458:	e029      	b.n	80074ae <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	69db      	ldr	r3, [r3, #28]
 8007460:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007464:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007468:	d111      	bne.n	800748e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007472:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007474:	68f8      	ldr	r0, [r7, #12]
 8007476:	f000 f81e 	bl	80074b6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	2220      	movs	r2, #32
 800747e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	2200      	movs	r2, #0
 8007486:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800748a:	2303      	movs	r3, #3
 800748c:	e00f      	b.n	80074ae <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	69da      	ldr	r2, [r3, #28]
 8007494:	68bb      	ldr	r3, [r7, #8]
 8007496:	4013      	ands	r3, r2
 8007498:	68ba      	ldr	r2, [r7, #8]
 800749a:	429a      	cmp	r2, r3
 800749c:	bf0c      	ite	eq
 800749e:	2301      	moveq	r3, #1
 80074a0:	2300      	movne	r3, #0
 80074a2:	b2db      	uxtb	r3, r3
 80074a4:	461a      	mov	r2, r3
 80074a6:	79fb      	ldrb	r3, [r7, #7]
 80074a8:	429a      	cmp	r2, r3
 80074aa:	d0a6      	beq.n	80073fa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80074ac:	2300      	movs	r3, #0
}
 80074ae:	4618      	mov	r0, r3
 80074b0:	3710      	adds	r7, #16
 80074b2:	46bd      	mov	sp, r7
 80074b4:	bd80      	pop	{r7, pc}

080074b6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80074b6:	b480      	push	{r7}
 80074b8:	b095      	sub	sp, #84	; 0x54
 80074ba:	af00      	add	r7, sp, #0
 80074bc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80074c6:	e853 3f00 	ldrex	r3, [r3]
 80074ca:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80074cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074ce:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80074d2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	461a      	mov	r2, r3
 80074da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80074dc:	643b      	str	r3, [r7, #64]	; 0x40
 80074de:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074e0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80074e2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80074e4:	e841 2300 	strex	r3, r2, [r1]
 80074e8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80074ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d1e6      	bne.n	80074be <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	3308      	adds	r3, #8
 80074f6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074f8:	6a3b      	ldr	r3, [r7, #32]
 80074fa:	e853 3f00 	ldrex	r3, [r3]
 80074fe:	61fb      	str	r3, [r7, #28]
   return(result);
 8007500:	69fb      	ldr	r3, [r7, #28]
 8007502:	f023 0301 	bic.w	r3, r3, #1
 8007506:	64bb      	str	r3, [r7, #72]	; 0x48
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	3308      	adds	r3, #8
 800750e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007510:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007512:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007514:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007516:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007518:	e841 2300 	strex	r3, r2, [r1]
 800751c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800751e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007520:	2b00      	cmp	r3, #0
 8007522:	d1e5      	bne.n	80074f0 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007528:	2b01      	cmp	r3, #1
 800752a:	d118      	bne.n	800755e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	e853 3f00 	ldrex	r3, [r3]
 8007538:	60bb      	str	r3, [r7, #8]
   return(result);
 800753a:	68bb      	ldr	r3, [r7, #8]
 800753c:	f023 0310 	bic.w	r3, r3, #16
 8007540:	647b      	str	r3, [r7, #68]	; 0x44
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	461a      	mov	r2, r3
 8007548:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800754a:	61bb      	str	r3, [r7, #24]
 800754c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800754e:	6979      	ldr	r1, [r7, #20]
 8007550:	69ba      	ldr	r2, [r7, #24]
 8007552:	e841 2300 	strex	r3, r2, [r1]
 8007556:	613b      	str	r3, [r7, #16]
   return(result);
 8007558:	693b      	ldr	r3, [r7, #16]
 800755a:	2b00      	cmp	r3, #0
 800755c:	d1e6      	bne.n	800752c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	2220      	movs	r2, #32
 8007562:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	2200      	movs	r2, #0
 800756a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	2200      	movs	r2, #0
 8007570:	669a      	str	r2, [r3, #104]	; 0x68
}
 8007572:	bf00      	nop
 8007574:	3754      	adds	r7, #84	; 0x54
 8007576:	46bd      	mov	sp, r7
 8007578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800757c:	4770      	bx	lr
	...

08007580 <__errno>:
 8007580:	4b01      	ldr	r3, [pc, #4]	; (8007588 <__errno+0x8>)
 8007582:	6818      	ldr	r0, [r3, #0]
 8007584:	4770      	bx	lr
 8007586:	bf00      	nop
 8007588:	2000278c 	.word	0x2000278c

0800758c <__libc_init_array>:
 800758c:	b570      	push	{r4, r5, r6, lr}
 800758e:	4d0d      	ldr	r5, [pc, #52]	; (80075c4 <__libc_init_array+0x38>)
 8007590:	4c0d      	ldr	r4, [pc, #52]	; (80075c8 <__libc_init_array+0x3c>)
 8007592:	1b64      	subs	r4, r4, r5
 8007594:	10a4      	asrs	r4, r4, #2
 8007596:	2600      	movs	r6, #0
 8007598:	42a6      	cmp	r6, r4
 800759a:	d109      	bne.n	80075b0 <__libc_init_array+0x24>
 800759c:	4d0b      	ldr	r5, [pc, #44]	; (80075cc <__libc_init_array+0x40>)
 800759e:	4c0c      	ldr	r4, [pc, #48]	; (80075d0 <__libc_init_array+0x44>)
 80075a0:	f001 f824 	bl	80085ec <_init>
 80075a4:	1b64      	subs	r4, r4, r5
 80075a6:	10a4      	asrs	r4, r4, #2
 80075a8:	2600      	movs	r6, #0
 80075aa:	42a6      	cmp	r6, r4
 80075ac:	d105      	bne.n	80075ba <__libc_init_array+0x2e>
 80075ae:	bd70      	pop	{r4, r5, r6, pc}
 80075b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80075b4:	4798      	blx	r3
 80075b6:	3601      	adds	r6, #1
 80075b8:	e7ee      	b.n	8007598 <__libc_init_array+0xc>
 80075ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80075be:	4798      	blx	r3
 80075c0:	3601      	adds	r6, #1
 80075c2:	e7f2      	b.n	80075aa <__libc_init_array+0x1e>
 80075c4:	08008bdc 	.word	0x08008bdc
 80075c8:	08008bdc 	.word	0x08008bdc
 80075cc:	08008bdc 	.word	0x08008bdc
 80075d0:	08008be0 	.word	0x08008be0

080075d4 <memset>:
 80075d4:	4402      	add	r2, r0
 80075d6:	4603      	mov	r3, r0
 80075d8:	4293      	cmp	r3, r2
 80075da:	d100      	bne.n	80075de <memset+0xa>
 80075dc:	4770      	bx	lr
 80075de:	f803 1b01 	strb.w	r1, [r3], #1
 80075e2:	e7f9      	b.n	80075d8 <memset+0x4>

080075e4 <iprintf>:
 80075e4:	b40f      	push	{r0, r1, r2, r3}
 80075e6:	4b0a      	ldr	r3, [pc, #40]	; (8007610 <iprintf+0x2c>)
 80075e8:	b513      	push	{r0, r1, r4, lr}
 80075ea:	681c      	ldr	r4, [r3, #0]
 80075ec:	b124      	cbz	r4, 80075f8 <iprintf+0x14>
 80075ee:	69a3      	ldr	r3, [r4, #24]
 80075f0:	b913      	cbnz	r3, 80075f8 <iprintf+0x14>
 80075f2:	4620      	mov	r0, r4
 80075f4:	f000 fa5e 	bl	8007ab4 <__sinit>
 80075f8:	ab05      	add	r3, sp, #20
 80075fa:	9a04      	ldr	r2, [sp, #16]
 80075fc:	68a1      	ldr	r1, [r4, #8]
 80075fe:	9301      	str	r3, [sp, #4]
 8007600:	4620      	mov	r0, r4
 8007602:	f000 fc67 	bl	8007ed4 <_vfiprintf_r>
 8007606:	b002      	add	sp, #8
 8007608:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800760c:	b004      	add	sp, #16
 800760e:	4770      	bx	lr
 8007610:	2000278c 	.word	0x2000278c

08007614 <_puts_r>:
 8007614:	b570      	push	{r4, r5, r6, lr}
 8007616:	460e      	mov	r6, r1
 8007618:	4605      	mov	r5, r0
 800761a:	b118      	cbz	r0, 8007624 <_puts_r+0x10>
 800761c:	6983      	ldr	r3, [r0, #24]
 800761e:	b90b      	cbnz	r3, 8007624 <_puts_r+0x10>
 8007620:	f000 fa48 	bl	8007ab4 <__sinit>
 8007624:	69ab      	ldr	r3, [r5, #24]
 8007626:	68ac      	ldr	r4, [r5, #8]
 8007628:	b913      	cbnz	r3, 8007630 <_puts_r+0x1c>
 800762a:	4628      	mov	r0, r5
 800762c:	f000 fa42 	bl	8007ab4 <__sinit>
 8007630:	4b2c      	ldr	r3, [pc, #176]	; (80076e4 <_puts_r+0xd0>)
 8007632:	429c      	cmp	r4, r3
 8007634:	d120      	bne.n	8007678 <_puts_r+0x64>
 8007636:	686c      	ldr	r4, [r5, #4]
 8007638:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800763a:	07db      	lsls	r3, r3, #31
 800763c:	d405      	bmi.n	800764a <_puts_r+0x36>
 800763e:	89a3      	ldrh	r3, [r4, #12]
 8007640:	0598      	lsls	r0, r3, #22
 8007642:	d402      	bmi.n	800764a <_puts_r+0x36>
 8007644:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007646:	f000 fad3 	bl	8007bf0 <__retarget_lock_acquire_recursive>
 800764a:	89a3      	ldrh	r3, [r4, #12]
 800764c:	0719      	lsls	r1, r3, #28
 800764e:	d51d      	bpl.n	800768c <_puts_r+0x78>
 8007650:	6923      	ldr	r3, [r4, #16]
 8007652:	b1db      	cbz	r3, 800768c <_puts_r+0x78>
 8007654:	3e01      	subs	r6, #1
 8007656:	68a3      	ldr	r3, [r4, #8]
 8007658:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800765c:	3b01      	subs	r3, #1
 800765e:	60a3      	str	r3, [r4, #8]
 8007660:	bb39      	cbnz	r1, 80076b2 <_puts_r+0x9e>
 8007662:	2b00      	cmp	r3, #0
 8007664:	da38      	bge.n	80076d8 <_puts_r+0xc4>
 8007666:	4622      	mov	r2, r4
 8007668:	210a      	movs	r1, #10
 800766a:	4628      	mov	r0, r5
 800766c:	f000 f848 	bl	8007700 <__swbuf_r>
 8007670:	3001      	adds	r0, #1
 8007672:	d011      	beq.n	8007698 <_puts_r+0x84>
 8007674:	250a      	movs	r5, #10
 8007676:	e011      	b.n	800769c <_puts_r+0x88>
 8007678:	4b1b      	ldr	r3, [pc, #108]	; (80076e8 <_puts_r+0xd4>)
 800767a:	429c      	cmp	r4, r3
 800767c:	d101      	bne.n	8007682 <_puts_r+0x6e>
 800767e:	68ac      	ldr	r4, [r5, #8]
 8007680:	e7da      	b.n	8007638 <_puts_r+0x24>
 8007682:	4b1a      	ldr	r3, [pc, #104]	; (80076ec <_puts_r+0xd8>)
 8007684:	429c      	cmp	r4, r3
 8007686:	bf08      	it	eq
 8007688:	68ec      	ldreq	r4, [r5, #12]
 800768a:	e7d5      	b.n	8007638 <_puts_r+0x24>
 800768c:	4621      	mov	r1, r4
 800768e:	4628      	mov	r0, r5
 8007690:	f000 f888 	bl	80077a4 <__swsetup_r>
 8007694:	2800      	cmp	r0, #0
 8007696:	d0dd      	beq.n	8007654 <_puts_r+0x40>
 8007698:	f04f 35ff 	mov.w	r5, #4294967295
 800769c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800769e:	07da      	lsls	r2, r3, #31
 80076a0:	d405      	bmi.n	80076ae <_puts_r+0x9a>
 80076a2:	89a3      	ldrh	r3, [r4, #12]
 80076a4:	059b      	lsls	r3, r3, #22
 80076a6:	d402      	bmi.n	80076ae <_puts_r+0x9a>
 80076a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80076aa:	f000 faa2 	bl	8007bf2 <__retarget_lock_release_recursive>
 80076ae:	4628      	mov	r0, r5
 80076b0:	bd70      	pop	{r4, r5, r6, pc}
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	da04      	bge.n	80076c0 <_puts_r+0xac>
 80076b6:	69a2      	ldr	r2, [r4, #24]
 80076b8:	429a      	cmp	r2, r3
 80076ba:	dc06      	bgt.n	80076ca <_puts_r+0xb6>
 80076bc:	290a      	cmp	r1, #10
 80076be:	d004      	beq.n	80076ca <_puts_r+0xb6>
 80076c0:	6823      	ldr	r3, [r4, #0]
 80076c2:	1c5a      	adds	r2, r3, #1
 80076c4:	6022      	str	r2, [r4, #0]
 80076c6:	7019      	strb	r1, [r3, #0]
 80076c8:	e7c5      	b.n	8007656 <_puts_r+0x42>
 80076ca:	4622      	mov	r2, r4
 80076cc:	4628      	mov	r0, r5
 80076ce:	f000 f817 	bl	8007700 <__swbuf_r>
 80076d2:	3001      	adds	r0, #1
 80076d4:	d1bf      	bne.n	8007656 <_puts_r+0x42>
 80076d6:	e7df      	b.n	8007698 <_puts_r+0x84>
 80076d8:	6823      	ldr	r3, [r4, #0]
 80076da:	250a      	movs	r5, #10
 80076dc:	1c5a      	adds	r2, r3, #1
 80076de:	6022      	str	r2, [r4, #0]
 80076e0:	701d      	strb	r5, [r3, #0]
 80076e2:	e7db      	b.n	800769c <_puts_r+0x88>
 80076e4:	08008b68 	.word	0x08008b68
 80076e8:	08008b88 	.word	0x08008b88
 80076ec:	08008b48 	.word	0x08008b48

080076f0 <puts>:
 80076f0:	4b02      	ldr	r3, [pc, #8]	; (80076fc <puts+0xc>)
 80076f2:	4601      	mov	r1, r0
 80076f4:	6818      	ldr	r0, [r3, #0]
 80076f6:	f7ff bf8d 	b.w	8007614 <_puts_r>
 80076fa:	bf00      	nop
 80076fc:	2000278c 	.word	0x2000278c

08007700 <__swbuf_r>:
 8007700:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007702:	460e      	mov	r6, r1
 8007704:	4614      	mov	r4, r2
 8007706:	4605      	mov	r5, r0
 8007708:	b118      	cbz	r0, 8007712 <__swbuf_r+0x12>
 800770a:	6983      	ldr	r3, [r0, #24]
 800770c:	b90b      	cbnz	r3, 8007712 <__swbuf_r+0x12>
 800770e:	f000 f9d1 	bl	8007ab4 <__sinit>
 8007712:	4b21      	ldr	r3, [pc, #132]	; (8007798 <__swbuf_r+0x98>)
 8007714:	429c      	cmp	r4, r3
 8007716:	d12b      	bne.n	8007770 <__swbuf_r+0x70>
 8007718:	686c      	ldr	r4, [r5, #4]
 800771a:	69a3      	ldr	r3, [r4, #24]
 800771c:	60a3      	str	r3, [r4, #8]
 800771e:	89a3      	ldrh	r3, [r4, #12]
 8007720:	071a      	lsls	r2, r3, #28
 8007722:	d52f      	bpl.n	8007784 <__swbuf_r+0x84>
 8007724:	6923      	ldr	r3, [r4, #16]
 8007726:	b36b      	cbz	r3, 8007784 <__swbuf_r+0x84>
 8007728:	6923      	ldr	r3, [r4, #16]
 800772a:	6820      	ldr	r0, [r4, #0]
 800772c:	1ac0      	subs	r0, r0, r3
 800772e:	6963      	ldr	r3, [r4, #20]
 8007730:	b2f6      	uxtb	r6, r6
 8007732:	4283      	cmp	r3, r0
 8007734:	4637      	mov	r7, r6
 8007736:	dc04      	bgt.n	8007742 <__swbuf_r+0x42>
 8007738:	4621      	mov	r1, r4
 800773a:	4628      	mov	r0, r5
 800773c:	f000 f926 	bl	800798c <_fflush_r>
 8007740:	bb30      	cbnz	r0, 8007790 <__swbuf_r+0x90>
 8007742:	68a3      	ldr	r3, [r4, #8]
 8007744:	3b01      	subs	r3, #1
 8007746:	60a3      	str	r3, [r4, #8]
 8007748:	6823      	ldr	r3, [r4, #0]
 800774a:	1c5a      	adds	r2, r3, #1
 800774c:	6022      	str	r2, [r4, #0]
 800774e:	701e      	strb	r6, [r3, #0]
 8007750:	6963      	ldr	r3, [r4, #20]
 8007752:	3001      	adds	r0, #1
 8007754:	4283      	cmp	r3, r0
 8007756:	d004      	beq.n	8007762 <__swbuf_r+0x62>
 8007758:	89a3      	ldrh	r3, [r4, #12]
 800775a:	07db      	lsls	r3, r3, #31
 800775c:	d506      	bpl.n	800776c <__swbuf_r+0x6c>
 800775e:	2e0a      	cmp	r6, #10
 8007760:	d104      	bne.n	800776c <__swbuf_r+0x6c>
 8007762:	4621      	mov	r1, r4
 8007764:	4628      	mov	r0, r5
 8007766:	f000 f911 	bl	800798c <_fflush_r>
 800776a:	b988      	cbnz	r0, 8007790 <__swbuf_r+0x90>
 800776c:	4638      	mov	r0, r7
 800776e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007770:	4b0a      	ldr	r3, [pc, #40]	; (800779c <__swbuf_r+0x9c>)
 8007772:	429c      	cmp	r4, r3
 8007774:	d101      	bne.n	800777a <__swbuf_r+0x7a>
 8007776:	68ac      	ldr	r4, [r5, #8]
 8007778:	e7cf      	b.n	800771a <__swbuf_r+0x1a>
 800777a:	4b09      	ldr	r3, [pc, #36]	; (80077a0 <__swbuf_r+0xa0>)
 800777c:	429c      	cmp	r4, r3
 800777e:	bf08      	it	eq
 8007780:	68ec      	ldreq	r4, [r5, #12]
 8007782:	e7ca      	b.n	800771a <__swbuf_r+0x1a>
 8007784:	4621      	mov	r1, r4
 8007786:	4628      	mov	r0, r5
 8007788:	f000 f80c 	bl	80077a4 <__swsetup_r>
 800778c:	2800      	cmp	r0, #0
 800778e:	d0cb      	beq.n	8007728 <__swbuf_r+0x28>
 8007790:	f04f 37ff 	mov.w	r7, #4294967295
 8007794:	e7ea      	b.n	800776c <__swbuf_r+0x6c>
 8007796:	bf00      	nop
 8007798:	08008b68 	.word	0x08008b68
 800779c:	08008b88 	.word	0x08008b88
 80077a0:	08008b48 	.word	0x08008b48

080077a4 <__swsetup_r>:
 80077a4:	4b32      	ldr	r3, [pc, #200]	; (8007870 <__swsetup_r+0xcc>)
 80077a6:	b570      	push	{r4, r5, r6, lr}
 80077a8:	681d      	ldr	r5, [r3, #0]
 80077aa:	4606      	mov	r6, r0
 80077ac:	460c      	mov	r4, r1
 80077ae:	b125      	cbz	r5, 80077ba <__swsetup_r+0x16>
 80077b0:	69ab      	ldr	r3, [r5, #24]
 80077b2:	b913      	cbnz	r3, 80077ba <__swsetup_r+0x16>
 80077b4:	4628      	mov	r0, r5
 80077b6:	f000 f97d 	bl	8007ab4 <__sinit>
 80077ba:	4b2e      	ldr	r3, [pc, #184]	; (8007874 <__swsetup_r+0xd0>)
 80077bc:	429c      	cmp	r4, r3
 80077be:	d10f      	bne.n	80077e0 <__swsetup_r+0x3c>
 80077c0:	686c      	ldr	r4, [r5, #4]
 80077c2:	89a3      	ldrh	r3, [r4, #12]
 80077c4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80077c8:	0719      	lsls	r1, r3, #28
 80077ca:	d42c      	bmi.n	8007826 <__swsetup_r+0x82>
 80077cc:	06dd      	lsls	r5, r3, #27
 80077ce:	d411      	bmi.n	80077f4 <__swsetup_r+0x50>
 80077d0:	2309      	movs	r3, #9
 80077d2:	6033      	str	r3, [r6, #0]
 80077d4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80077d8:	81a3      	strh	r3, [r4, #12]
 80077da:	f04f 30ff 	mov.w	r0, #4294967295
 80077de:	e03e      	b.n	800785e <__swsetup_r+0xba>
 80077e0:	4b25      	ldr	r3, [pc, #148]	; (8007878 <__swsetup_r+0xd4>)
 80077e2:	429c      	cmp	r4, r3
 80077e4:	d101      	bne.n	80077ea <__swsetup_r+0x46>
 80077e6:	68ac      	ldr	r4, [r5, #8]
 80077e8:	e7eb      	b.n	80077c2 <__swsetup_r+0x1e>
 80077ea:	4b24      	ldr	r3, [pc, #144]	; (800787c <__swsetup_r+0xd8>)
 80077ec:	429c      	cmp	r4, r3
 80077ee:	bf08      	it	eq
 80077f0:	68ec      	ldreq	r4, [r5, #12]
 80077f2:	e7e6      	b.n	80077c2 <__swsetup_r+0x1e>
 80077f4:	0758      	lsls	r0, r3, #29
 80077f6:	d512      	bpl.n	800781e <__swsetup_r+0x7a>
 80077f8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80077fa:	b141      	cbz	r1, 800780e <__swsetup_r+0x6a>
 80077fc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007800:	4299      	cmp	r1, r3
 8007802:	d002      	beq.n	800780a <__swsetup_r+0x66>
 8007804:	4630      	mov	r0, r6
 8007806:	f000 fa5b 	bl	8007cc0 <_free_r>
 800780a:	2300      	movs	r3, #0
 800780c:	6363      	str	r3, [r4, #52]	; 0x34
 800780e:	89a3      	ldrh	r3, [r4, #12]
 8007810:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007814:	81a3      	strh	r3, [r4, #12]
 8007816:	2300      	movs	r3, #0
 8007818:	6063      	str	r3, [r4, #4]
 800781a:	6923      	ldr	r3, [r4, #16]
 800781c:	6023      	str	r3, [r4, #0]
 800781e:	89a3      	ldrh	r3, [r4, #12]
 8007820:	f043 0308 	orr.w	r3, r3, #8
 8007824:	81a3      	strh	r3, [r4, #12]
 8007826:	6923      	ldr	r3, [r4, #16]
 8007828:	b94b      	cbnz	r3, 800783e <__swsetup_r+0x9a>
 800782a:	89a3      	ldrh	r3, [r4, #12]
 800782c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007830:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007834:	d003      	beq.n	800783e <__swsetup_r+0x9a>
 8007836:	4621      	mov	r1, r4
 8007838:	4630      	mov	r0, r6
 800783a:	f000 fa01 	bl	8007c40 <__smakebuf_r>
 800783e:	89a0      	ldrh	r0, [r4, #12]
 8007840:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007844:	f010 0301 	ands.w	r3, r0, #1
 8007848:	d00a      	beq.n	8007860 <__swsetup_r+0xbc>
 800784a:	2300      	movs	r3, #0
 800784c:	60a3      	str	r3, [r4, #8]
 800784e:	6963      	ldr	r3, [r4, #20]
 8007850:	425b      	negs	r3, r3
 8007852:	61a3      	str	r3, [r4, #24]
 8007854:	6923      	ldr	r3, [r4, #16]
 8007856:	b943      	cbnz	r3, 800786a <__swsetup_r+0xc6>
 8007858:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800785c:	d1ba      	bne.n	80077d4 <__swsetup_r+0x30>
 800785e:	bd70      	pop	{r4, r5, r6, pc}
 8007860:	0781      	lsls	r1, r0, #30
 8007862:	bf58      	it	pl
 8007864:	6963      	ldrpl	r3, [r4, #20]
 8007866:	60a3      	str	r3, [r4, #8]
 8007868:	e7f4      	b.n	8007854 <__swsetup_r+0xb0>
 800786a:	2000      	movs	r0, #0
 800786c:	e7f7      	b.n	800785e <__swsetup_r+0xba>
 800786e:	bf00      	nop
 8007870:	2000278c 	.word	0x2000278c
 8007874:	08008b68 	.word	0x08008b68
 8007878:	08008b88 	.word	0x08008b88
 800787c:	08008b48 	.word	0x08008b48

08007880 <__sflush_r>:
 8007880:	898a      	ldrh	r2, [r1, #12]
 8007882:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007886:	4605      	mov	r5, r0
 8007888:	0710      	lsls	r0, r2, #28
 800788a:	460c      	mov	r4, r1
 800788c:	d458      	bmi.n	8007940 <__sflush_r+0xc0>
 800788e:	684b      	ldr	r3, [r1, #4]
 8007890:	2b00      	cmp	r3, #0
 8007892:	dc05      	bgt.n	80078a0 <__sflush_r+0x20>
 8007894:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007896:	2b00      	cmp	r3, #0
 8007898:	dc02      	bgt.n	80078a0 <__sflush_r+0x20>
 800789a:	2000      	movs	r0, #0
 800789c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80078a0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80078a2:	2e00      	cmp	r6, #0
 80078a4:	d0f9      	beq.n	800789a <__sflush_r+0x1a>
 80078a6:	2300      	movs	r3, #0
 80078a8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80078ac:	682f      	ldr	r7, [r5, #0]
 80078ae:	602b      	str	r3, [r5, #0]
 80078b0:	d032      	beq.n	8007918 <__sflush_r+0x98>
 80078b2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80078b4:	89a3      	ldrh	r3, [r4, #12]
 80078b6:	075a      	lsls	r2, r3, #29
 80078b8:	d505      	bpl.n	80078c6 <__sflush_r+0x46>
 80078ba:	6863      	ldr	r3, [r4, #4]
 80078bc:	1ac0      	subs	r0, r0, r3
 80078be:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80078c0:	b10b      	cbz	r3, 80078c6 <__sflush_r+0x46>
 80078c2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80078c4:	1ac0      	subs	r0, r0, r3
 80078c6:	2300      	movs	r3, #0
 80078c8:	4602      	mov	r2, r0
 80078ca:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80078cc:	6a21      	ldr	r1, [r4, #32]
 80078ce:	4628      	mov	r0, r5
 80078d0:	47b0      	blx	r6
 80078d2:	1c43      	adds	r3, r0, #1
 80078d4:	89a3      	ldrh	r3, [r4, #12]
 80078d6:	d106      	bne.n	80078e6 <__sflush_r+0x66>
 80078d8:	6829      	ldr	r1, [r5, #0]
 80078da:	291d      	cmp	r1, #29
 80078dc:	d82c      	bhi.n	8007938 <__sflush_r+0xb8>
 80078de:	4a2a      	ldr	r2, [pc, #168]	; (8007988 <__sflush_r+0x108>)
 80078e0:	40ca      	lsrs	r2, r1
 80078e2:	07d6      	lsls	r6, r2, #31
 80078e4:	d528      	bpl.n	8007938 <__sflush_r+0xb8>
 80078e6:	2200      	movs	r2, #0
 80078e8:	6062      	str	r2, [r4, #4]
 80078ea:	04d9      	lsls	r1, r3, #19
 80078ec:	6922      	ldr	r2, [r4, #16]
 80078ee:	6022      	str	r2, [r4, #0]
 80078f0:	d504      	bpl.n	80078fc <__sflush_r+0x7c>
 80078f2:	1c42      	adds	r2, r0, #1
 80078f4:	d101      	bne.n	80078fa <__sflush_r+0x7a>
 80078f6:	682b      	ldr	r3, [r5, #0]
 80078f8:	b903      	cbnz	r3, 80078fc <__sflush_r+0x7c>
 80078fa:	6560      	str	r0, [r4, #84]	; 0x54
 80078fc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80078fe:	602f      	str	r7, [r5, #0]
 8007900:	2900      	cmp	r1, #0
 8007902:	d0ca      	beq.n	800789a <__sflush_r+0x1a>
 8007904:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007908:	4299      	cmp	r1, r3
 800790a:	d002      	beq.n	8007912 <__sflush_r+0x92>
 800790c:	4628      	mov	r0, r5
 800790e:	f000 f9d7 	bl	8007cc0 <_free_r>
 8007912:	2000      	movs	r0, #0
 8007914:	6360      	str	r0, [r4, #52]	; 0x34
 8007916:	e7c1      	b.n	800789c <__sflush_r+0x1c>
 8007918:	6a21      	ldr	r1, [r4, #32]
 800791a:	2301      	movs	r3, #1
 800791c:	4628      	mov	r0, r5
 800791e:	47b0      	blx	r6
 8007920:	1c41      	adds	r1, r0, #1
 8007922:	d1c7      	bne.n	80078b4 <__sflush_r+0x34>
 8007924:	682b      	ldr	r3, [r5, #0]
 8007926:	2b00      	cmp	r3, #0
 8007928:	d0c4      	beq.n	80078b4 <__sflush_r+0x34>
 800792a:	2b1d      	cmp	r3, #29
 800792c:	d001      	beq.n	8007932 <__sflush_r+0xb2>
 800792e:	2b16      	cmp	r3, #22
 8007930:	d101      	bne.n	8007936 <__sflush_r+0xb6>
 8007932:	602f      	str	r7, [r5, #0]
 8007934:	e7b1      	b.n	800789a <__sflush_r+0x1a>
 8007936:	89a3      	ldrh	r3, [r4, #12]
 8007938:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800793c:	81a3      	strh	r3, [r4, #12]
 800793e:	e7ad      	b.n	800789c <__sflush_r+0x1c>
 8007940:	690f      	ldr	r7, [r1, #16]
 8007942:	2f00      	cmp	r7, #0
 8007944:	d0a9      	beq.n	800789a <__sflush_r+0x1a>
 8007946:	0793      	lsls	r3, r2, #30
 8007948:	680e      	ldr	r6, [r1, #0]
 800794a:	bf08      	it	eq
 800794c:	694b      	ldreq	r3, [r1, #20]
 800794e:	600f      	str	r7, [r1, #0]
 8007950:	bf18      	it	ne
 8007952:	2300      	movne	r3, #0
 8007954:	eba6 0807 	sub.w	r8, r6, r7
 8007958:	608b      	str	r3, [r1, #8]
 800795a:	f1b8 0f00 	cmp.w	r8, #0
 800795e:	dd9c      	ble.n	800789a <__sflush_r+0x1a>
 8007960:	6a21      	ldr	r1, [r4, #32]
 8007962:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007964:	4643      	mov	r3, r8
 8007966:	463a      	mov	r2, r7
 8007968:	4628      	mov	r0, r5
 800796a:	47b0      	blx	r6
 800796c:	2800      	cmp	r0, #0
 800796e:	dc06      	bgt.n	800797e <__sflush_r+0xfe>
 8007970:	89a3      	ldrh	r3, [r4, #12]
 8007972:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007976:	81a3      	strh	r3, [r4, #12]
 8007978:	f04f 30ff 	mov.w	r0, #4294967295
 800797c:	e78e      	b.n	800789c <__sflush_r+0x1c>
 800797e:	4407      	add	r7, r0
 8007980:	eba8 0800 	sub.w	r8, r8, r0
 8007984:	e7e9      	b.n	800795a <__sflush_r+0xda>
 8007986:	bf00      	nop
 8007988:	20400001 	.word	0x20400001

0800798c <_fflush_r>:
 800798c:	b538      	push	{r3, r4, r5, lr}
 800798e:	690b      	ldr	r3, [r1, #16]
 8007990:	4605      	mov	r5, r0
 8007992:	460c      	mov	r4, r1
 8007994:	b913      	cbnz	r3, 800799c <_fflush_r+0x10>
 8007996:	2500      	movs	r5, #0
 8007998:	4628      	mov	r0, r5
 800799a:	bd38      	pop	{r3, r4, r5, pc}
 800799c:	b118      	cbz	r0, 80079a6 <_fflush_r+0x1a>
 800799e:	6983      	ldr	r3, [r0, #24]
 80079a0:	b90b      	cbnz	r3, 80079a6 <_fflush_r+0x1a>
 80079a2:	f000 f887 	bl	8007ab4 <__sinit>
 80079a6:	4b14      	ldr	r3, [pc, #80]	; (80079f8 <_fflush_r+0x6c>)
 80079a8:	429c      	cmp	r4, r3
 80079aa:	d11b      	bne.n	80079e4 <_fflush_r+0x58>
 80079ac:	686c      	ldr	r4, [r5, #4]
 80079ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d0ef      	beq.n	8007996 <_fflush_r+0xa>
 80079b6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80079b8:	07d0      	lsls	r0, r2, #31
 80079ba:	d404      	bmi.n	80079c6 <_fflush_r+0x3a>
 80079bc:	0599      	lsls	r1, r3, #22
 80079be:	d402      	bmi.n	80079c6 <_fflush_r+0x3a>
 80079c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80079c2:	f000 f915 	bl	8007bf0 <__retarget_lock_acquire_recursive>
 80079c6:	4628      	mov	r0, r5
 80079c8:	4621      	mov	r1, r4
 80079ca:	f7ff ff59 	bl	8007880 <__sflush_r>
 80079ce:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80079d0:	07da      	lsls	r2, r3, #31
 80079d2:	4605      	mov	r5, r0
 80079d4:	d4e0      	bmi.n	8007998 <_fflush_r+0xc>
 80079d6:	89a3      	ldrh	r3, [r4, #12]
 80079d8:	059b      	lsls	r3, r3, #22
 80079da:	d4dd      	bmi.n	8007998 <_fflush_r+0xc>
 80079dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80079de:	f000 f908 	bl	8007bf2 <__retarget_lock_release_recursive>
 80079e2:	e7d9      	b.n	8007998 <_fflush_r+0xc>
 80079e4:	4b05      	ldr	r3, [pc, #20]	; (80079fc <_fflush_r+0x70>)
 80079e6:	429c      	cmp	r4, r3
 80079e8:	d101      	bne.n	80079ee <_fflush_r+0x62>
 80079ea:	68ac      	ldr	r4, [r5, #8]
 80079ec:	e7df      	b.n	80079ae <_fflush_r+0x22>
 80079ee:	4b04      	ldr	r3, [pc, #16]	; (8007a00 <_fflush_r+0x74>)
 80079f0:	429c      	cmp	r4, r3
 80079f2:	bf08      	it	eq
 80079f4:	68ec      	ldreq	r4, [r5, #12]
 80079f6:	e7da      	b.n	80079ae <_fflush_r+0x22>
 80079f8:	08008b68 	.word	0x08008b68
 80079fc:	08008b88 	.word	0x08008b88
 8007a00:	08008b48 	.word	0x08008b48

08007a04 <std>:
 8007a04:	2300      	movs	r3, #0
 8007a06:	b510      	push	{r4, lr}
 8007a08:	4604      	mov	r4, r0
 8007a0a:	e9c0 3300 	strd	r3, r3, [r0]
 8007a0e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007a12:	6083      	str	r3, [r0, #8]
 8007a14:	8181      	strh	r1, [r0, #12]
 8007a16:	6643      	str	r3, [r0, #100]	; 0x64
 8007a18:	81c2      	strh	r2, [r0, #14]
 8007a1a:	6183      	str	r3, [r0, #24]
 8007a1c:	4619      	mov	r1, r3
 8007a1e:	2208      	movs	r2, #8
 8007a20:	305c      	adds	r0, #92	; 0x5c
 8007a22:	f7ff fdd7 	bl	80075d4 <memset>
 8007a26:	4b05      	ldr	r3, [pc, #20]	; (8007a3c <std+0x38>)
 8007a28:	6263      	str	r3, [r4, #36]	; 0x24
 8007a2a:	4b05      	ldr	r3, [pc, #20]	; (8007a40 <std+0x3c>)
 8007a2c:	62a3      	str	r3, [r4, #40]	; 0x28
 8007a2e:	4b05      	ldr	r3, [pc, #20]	; (8007a44 <std+0x40>)
 8007a30:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007a32:	4b05      	ldr	r3, [pc, #20]	; (8007a48 <std+0x44>)
 8007a34:	6224      	str	r4, [r4, #32]
 8007a36:	6323      	str	r3, [r4, #48]	; 0x30
 8007a38:	bd10      	pop	{r4, pc}
 8007a3a:	bf00      	nop
 8007a3c:	0800847d 	.word	0x0800847d
 8007a40:	0800849f 	.word	0x0800849f
 8007a44:	080084d7 	.word	0x080084d7
 8007a48:	080084fb 	.word	0x080084fb

08007a4c <_cleanup_r>:
 8007a4c:	4901      	ldr	r1, [pc, #4]	; (8007a54 <_cleanup_r+0x8>)
 8007a4e:	f000 b8af 	b.w	8007bb0 <_fwalk_reent>
 8007a52:	bf00      	nop
 8007a54:	0800798d 	.word	0x0800798d

08007a58 <__sfmoreglue>:
 8007a58:	b570      	push	{r4, r5, r6, lr}
 8007a5a:	2268      	movs	r2, #104	; 0x68
 8007a5c:	1e4d      	subs	r5, r1, #1
 8007a5e:	4355      	muls	r5, r2
 8007a60:	460e      	mov	r6, r1
 8007a62:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007a66:	f000 f997 	bl	8007d98 <_malloc_r>
 8007a6a:	4604      	mov	r4, r0
 8007a6c:	b140      	cbz	r0, 8007a80 <__sfmoreglue+0x28>
 8007a6e:	2100      	movs	r1, #0
 8007a70:	e9c0 1600 	strd	r1, r6, [r0]
 8007a74:	300c      	adds	r0, #12
 8007a76:	60a0      	str	r0, [r4, #8]
 8007a78:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007a7c:	f7ff fdaa 	bl	80075d4 <memset>
 8007a80:	4620      	mov	r0, r4
 8007a82:	bd70      	pop	{r4, r5, r6, pc}

08007a84 <__sfp_lock_acquire>:
 8007a84:	4801      	ldr	r0, [pc, #4]	; (8007a8c <__sfp_lock_acquire+0x8>)
 8007a86:	f000 b8b3 	b.w	8007bf0 <__retarget_lock_acquire_recursive>
 8007a8a:	bf00      	nop
 8007a8c:	20002ded 	.word	0x20002ded

08007a90 <__sfp_lock_release>:
 8007a90:	4801      	ldr	r0, [pc, #4]	; (8007a98 <__sfp_lock_release+0x8>)
 8007a92:	f000 b8ae 	b.w	8007bf2 <__retarget_lock_release_recursive>
 8007a96:	bf00      	nop
 8007a98:	20002ded 	.word	0x20002ded

08007a9c <__sinit_lock_acquire>:
 8007a9c:	4801      	ldr	r0, [pc, #4]	; (8007aa4 <__sinit_lock_acquire+0x8>)
 8007a9e:	f000 b8a7 	b.w	8007bf0 <__retarget_lock_acquire_recursive>
 8007aa2:	bf00      	nop
 8007aa4:	20002dee 	.word	0x20002dee

08007aa8 <__sinit_lock_release>:
 8007aa8:	4801      	ldr	r0, [pc, #4]	; (8007ab0 <__sinit_lock_release+0x8>)
 8007aaa:	f000 b8a2 	b.w	8007bf2 <__retarget_lock_release_recursive>
 8007aae:	bf00      	nop
 8007ab0:	20002dee 	.word	0x20002dee

08007ab4 <__sinit>:
 8007ab4:	b510      	push	{r4, lr}
 8007ab6:	4604      	mov	r4, r0
 8007ab8:	f7ff fff0 	bl	8007a9c <__sinit_lock_acquire>
 8007abc:	69a3      	ldr	r3, [r4, #24]
 8007abe:	b11b      	cbz	r3, 8007ac8 <__sinit+0x14>
 8007ac0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007ac4:	f7ff bff0 	b.w	8007aa8 <__sinit_lock_release>
 8007ac8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007acc:	6523      	str	r3, [r4, #80]	; 0x50
 8007ace:	4b13      	ldr	r3, [pc, #76]	; (8007b1c <__sinit+0x68>)
 8007ad0:	4a13      	ldr	r2, [pc, #76]	; (8007b20 <__sinit+0x6c>)
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	62a2      	str	r2, [r4, #40]	; 0x28
 8007ad6:	42a3      	cmp	r3, r4
 8007ad8:	bf04      	itt	eq
 8007ada:	2301      	moveq	r3, #1
 8007adc:	61a3      	streq	r3, [r4, #24]
 8007ade:	4620      	mov	r0, r4
 8007ae0:	f000 f820 	bl	8007b24 <__sfp>
 8007ae4:	6060      	str	r0, [r4, #4]
 8007ae6:	4620      	mov	r0, r4
 8007ae8:	f000 f81c 	bl	8007b24 <__sfp>
 8007aec:	60a0      	str	r0, [r4, #8]
 8007aee:	4620      	mov	r0, r4
 8007af0:	f000 f818 	bl	8007b24 <__sfp>
 8007af4:	2200      	movs	r2, #0
 8007af6:	60e0      	str	r0, [r4, #12]
 8007af8:	2104      	movs	r1, #4
 8007afa:	6860      	ldr	r0, [r4, #4]
 8007afc:	f7ff ff82 	bl	8007a04 <std>
 8007b00:	68a0      	ldr	r0, [r4, #8]
 8007b02:	2201      	movs	r2, #1
 8007b04:	2109      	movs	r1, #9
 8007b06:	f7ff ff7d 	bl	8007a04 <std>
 8007b0a:	68e0      	ldr	r0, [r4, #12]
 8007b0c:	2202      	movs	r2, #2
 8007b0e:	2112      	movs	r1, #18
 8007b10:	f7ff ff78 	bl	8007a04 <std>
 8007b14:	2301      	movs	r3, #1
 8007b16:	61a3      	str	r3, [r4, #24]
 8007b18:	e7d2      	b.n	8007ac0 <__sinit+0xc>
 8007b1a:	bf00      	nop
 8007b1c:	08008b44 	.word	0x08008b44
 8007b20:	08007a4d 	.word	0x08007a4d

08007b24 <__sfp>:
 8007b24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b26:	4607      	mov	r7, r0
 8007b28:	f7ff ffac 	bl	8007a84 <__sfp_lock_acquire>
 8007b2c:	4b1e      	ldr	r3, [pc, #120]	; (8007ba8 <__sfp+0x84>)
 8007b2e:	681e      	ldr	r6, [r3, #0]
 8007b30:	69b3      	ldr	r3, [r6, #24]
 8007b32:	b913      	cbnz	r3, 8007b3a <__sfp+0x16>
 8007b34:	4630      	mov	r0, r6
 8007b36:	f7ff ffbd 	bl	8007ab4 <__sinit>
 8007b3a:	3648      	adds	r6, #72	; 0x48
 8007b3c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007b40:	3b01      	subs	r3, #1
 8007b42:	d503      	bpl.n	8007b4c <__sfp+0x28>
 8007b44:	6833      	ldr	r3, [r6, #0]
 8007b46:	b30b      	cbz	r3, 8007b8c <__sfp+0x68>
 8007b48:	6836      	ldr	r6, [r6, #0]
 8007b4a:	e7f7      	b.n	8007b3c <__sfp+0x18>
 8007b4c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007b50:	b9d5      	cbnz	r5, 8007b88 <__sfp+0x64>
 8007b52:	4b16      	ldr	r3, [pc, #88]	; (8007bac <__sfp+0x88>)
 8007b54:	60e3      	str	r3, [r4, #12]
 8007b56:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007b5a:	6665      	str	r5, [r4, #100]	; 0x64
 8007b5c:	f000 f847 	bl	8007bee <__retarget_lock_init_recursive>
 8007b60:	f7ff ff96 	bl	8007a90 <__sfp_lock_release>
 8007b64:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007b68:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007b6c:	6025      	str	r5, [r4, #0]
 8007b6e:	61a5      	str	r5, [r4, #24]
 8007b70:	2208      	movs	r2, #8
 8007b72:	4629      	mov	r1, r5
 8007b74:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007b78:	f7ff fd2c 	bl	80075d4 <memset>
 8007b7c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007b80:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007b84:	4620      	mov	r0, r4
 8007b86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007b88:	3468      	adds	r4, #104	; 0x68
 8007b8a:	e7d9      	b.n	8007b40 <__sfp+0x1c>
 8007b8c:	2104      	movs	r1, #4
 8007b8e:	4638      	mov	r0, r7
 8007b90:	f7ff ff62 	bl	8007a58 <__sfmoreglue>
 8007b94:	4604      	mov	r4, r0
 8007b96:	6030      	str	r0, [r6, #0]
 8007b98:	2800      	cmp	r0, #0
 8007b9a:	d1d5      	bne.n	8007b48 <__sfp+0x24>
 8007b9c:	f7ff ff78 	bl	8007a90 <__sfp_lock_release>
 8007ba0:	230c      	movs	r3, #12
 8007ba2:	603b      	str	r3, [r7, #0]
 8007ba4:	e7ee      	b.n	8007b84 <__sfp+0x60>
 8007ba6:	bf00      	nop
 8007ba8:	08008b44 	.word	0x08008b44
 8007bac:	ffff0001 	.word	0xffff0001

08007bb0 <_fwalk_reent>:
 8007bb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007bb4:	4606      	mov	r6, r0
 8007bb6:	4688      	mov	r8, r1
 8007bb8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007bbc:	2700      	movs	r7, #0
 8007bbe:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007bc2:	f1b9 0901 	subs.w	r9, r9, #1
 8007bc6:	d505      	bpl.n	8007bd4 <_fwalk_reent+0x24>
 8007bc8:	6824      	ldr	r4, [r4, #0]
 8007bca:	2c00      	cmp	r4, #0
 8007bcc:	d1f7      	bne.n	8007bbe <_fwalk_reent+0xe>
 8007bce:	4638      	mov	r0, r7
 8007bd0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007bd4:	89ab      	ldrh	r3, [r5, #12]
 8007bd6:	2b01      	cmp	r3, #1
 8007bd8:	d907      	bls.n	8007bea <_fwalk_reent+0x3a>
 8007bda:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007bde:	3301      	adds	r3, #1
 8007be0:	d003      	beq.n	8007bea <_fwalk_reent+0x3a>
 8007be2:	4629      	mov	r1, r5
 8007be4:	4630      	mov	r0, r6
 8007be6:	47c0      	blx	r8
 8007be8:	4307      	orrs	r7, r0
 8007bea:	3568      	adds	r5, #104	; 0x68
 8007bec:	e7e9      	b.n	8007bc2 <_fwalk_reent+0x12>

08007bee <__retarget_lock_init_recursive>:
 8007bee:	4770      	bx	lr

08007bf0 <__retarget_lock_acquire_recursive>:
 8007bf0:	4770      	bx	lr

08007bf2 <__retarget_lock_release_recursive>:
 8007bf2:	4770      	bx	lr

08007bf4 <__swhatbuf_r>:
 8007bf4:	b570      	push	{r4, r5, r6, lr}
 8007bf6:	460e      	mov	r6, r1
 8007bf8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007bfc:	2900      	cmp	r1, #0
 8007bfe:	b096      	sub	sp, #88	; 0x58
 8007c00:	4614      	mov	r4, r2
 8007c02:	461d      	mov	r5, r3
 8007c04:	da08      	bge.n	8007c18 <__swhatbuf_r+0x24>
 8007c06:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8007c0a:	2200      	movs	r2, #0
 8007c0c:	602a      	str	r2, [r5, #0]
 8007c0e:	061a      	lsls	r2, r3, #24
 8007c10:	d410      	bmi.n	8007c34 <__swhatbuf_r+0x40>
 8007c12:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007c16:	e00e      	b.n	8007c36 <__swhatbuf_r+0x42>
 8007c18:	466a      	mov	r2, sp
 8007c1a:	f000 fc95 	bl	8008548 <_fstat_r>
 8007c1e:	2800      	cmp	r0, #0
 8007c20:	dbf1      	blt.n	8007c06 <__swhatbuf_r+0x12>
 8007c22:	9a01      	ldr	r2, [sp, #4]
 8007c24:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007c28:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007c2c:	425a      	negs	r2, r3
 8007c2e:	415a      	adcs	r2, r3
 8007c30:	602a      	str	r2, [r5, #0]
 8007c32:	e7ee      	b.n	8007c12 <__swhatbuf_r+0x1e>
 8007c34:	2340      	movs	r3, #64	; 0x40
 8007c36:	2000      	movs	r0, #0
 8007c38:	6023      	str	r3, [r4, #0]
 8007c3a:	b016      	add	sp, #88	; 0x58
 8007c3c:	bd70      	pop	{r4, r5, r6, pc}
	...

08007c40 <__smakebuf_r>:
 8007c40:	898b      	ldrh	r3, [r1, #12]
 8007c42:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007c44:	079d      	lsls	r5, r3, #30
 8007c46:	4606      	mov	r6, r0
 8007c48:	460c      	mov	r4, r1
 8007c4a:	d507      	bpl.n	8007c5c <__smakebuf_r+0x1c>
 8007c4c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007c50:	6023      	str	r3, [r4, #0]
 8007c52:	6123      	str	r3, [r4, #16]
 8007c54:	2301      	movs	r3, #1
 8007c56:	6163      	str	r3, [r4, #20]
 8007c58:	b002      	add	sp, #8
 8007c5a:	bd70      	pop	{r4, r5, r6, pc}
 8007c5c:	ab01      	add	r3, sp, #4
 8007c5e:	466a      	mov	r2, sp
 8007c60:	f7ff ffc8 	bl	8007bf4 <__swhatbuf_r>
 8007c64:	9900      	ldr	r1, [sp, #0]
 8007c66:	4605      	mov	r5, r0
 8007c68:	4630      	mov	r0, r6
 8007c6a:	f000 f895 	bl	8007d98 <_malloc_r>
 8007c6e:	b948      	cbnz	r0, 8007c84 <__smakebuf_r+0x44>
 8007c70:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007c74:	059a      	lsls	r2, r3, #22
 8007c76:	d4ef      	bmi.n	8007c58 <__smakebuf_r+0x18>
 8007c78:	f023 0303 	bic.w	r3, r3, #3
 8007c7c:	f043 0302 	orr.w	r3, r3, #2
 8007c80:	81a3      	strh	r3, [r4, #12]
 8007c82:	e7e3      	b.n	8007c4c <__smakebuf_r+0xc>
 8007c84:	4b0d      	ldr	r3, [pc, #52]	; (8007cbc <__smakebuf_r+0x7c>)
 8007c86:	62b3      	str	r3, [r6, #40]	; 0x28
 8007c88:	89a3      	ldrh	r3, [r4, #12]
 8007c8a:	6020      	str	r0, [r4, #0]
 8007c8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007c90:	81a3      	strh	r3, [r4, #12]
 8007c92:	9b00      	ldr	r3, [sp, #0]
 8007c94:	6163      	str	r3, [r4, #20]
 8007c96:	9b01      	ldr	r3, [sp, #4]
 8007c98:	6120      	str	r0, [r4, #16]
 8007c9a:	b15b      	cbz	r3, 8007cb4 <__smakebuf_r+0x74>
 8007c9c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007ca0:	4630      	mov	r0, r6
 8007ca2:	f000 fc63 	bl	800856c <_isatty_r>
 8007ca6:	b128      	cbz	r0, 8007cb4 <__smakebuf_r+0x74>
 8007ca8:	89a3      	ldrh	r3, [r4, #12]
 8007caa:	f023 0303 	bic.w	r3, r3, #3
 8007cae:	f043 0301 	orr.w	r3, r3, #1
 8007cb2:	81a3      	strh	r3, [r4, #12]
 8007cb4:	89a0      	ldrh	r0, [r4, #12]
 8007cb6:	4305      	orrs	r5, r0
 8007cb8:	81a5      	strh	r5, [r4, #12]
 8007cba:	e7cd      	b.n	8007c58 <__smakebuf_r+0x18>
 8007cbc:	08007a4d 	.word	0x08007a4d

08007cc0 <_free_r>:
 8007cc0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007cc2:	2900      	cmp	r1, #0
 8007cc4:	d044      	beq.n	8007d50 <_free_r+0x90>
 8007cc6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007cca:	9001      	str	r0, [sp, #4]
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	f1a1 0404 	sub.w	r4, r1, #4
 8007cd2:	bfb8      	it	lt
 8007cd4:	18e4      	addlt	r4, r4, r3
 8007cd6:	f000 fc6b 	bl	80085b0 <__malloc_lock>
 8007cda:	4a1e      	ldr	r2, [pc, #120]	; (8007d54 <_free_r+0x94>)
 8007cdc:	9801      	ldr	r0, [sp, #4]
 8007cde:	6813      	ldr	r3, [r2, #0]
 8007ce0:	b933      	cbnz	r3, 8007cf0 <_free_r+0x30>
 8007ce2:	6063      	str	r3, [r4, #4]
 8007ce4:	6014      	str	r4, [r2, #0]
 8007ce6:	b003      	add	sp, #12
 8007ce8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007cec:	f000 bc66 	b.w	80085bc <__malloc_unlock>
 8007cf0:	42a3      	cmp	r3, r4
 8007cf2:	d908      	bls.n	8007d06 <_free_r+0x46>
 8007cf4:	6825      	ldr	r5, [r4, #0]
 8007cf6:	1961      	adds	r1, r4, r5
 8007cf8:	428b      	cmp	r3, r1
 8007cfa:	bf01      	itttt	eq
 8007cfc:	6819      	ldreq	r1, [r3, #0]
 8007cfe:	685b      	ldreq	r3, [r3, #4]
 8007d00:	1949      	addeq	r1, r1, r5
 8007d02:	6021      	streq	r1, [r4, #0]
 8007d04:	e7ed      	b.n	8007ce2 <_free_r+0x22>
 8007d06:	461a      	mov	r2, r3
 8007d08:	685b      	ldr	r3, [r3, #4]
 8007d0a:	b10b      	cbz	r3, 8007d10 <_free_r+0x50>
 8007d0c:	42a3      	cmp	r3, r4
 8007d0e:	d9fa      	bls.n	8007d06 <_free_r+0x46>
 8007d10:	6811      	ldr	r1, [r2, #0]
 8007d12:	1855      	adds	r5, r2, r1
 8007d14:	42a5      	cmp	r5, r4
 8007d16:	d10b      	bne.n	8007d30 <_free_r+0x70>
 8007d18:	6824      	ldr	r4, [r4, #0]
 8007d1a:	4421      	add	r1, r4
 8007d1c:	1854      	adds	r4, r2, r1
 8007d1e:	42a3      	cmp	r3, r4
 8007d20:	6011      	str	r1, [r2, #0]
 8007d22:	d1e0      	bne.n	8007ce6 <_free_r+0x26>
 8007d24:	681c      	ldr	r4, [r3, #0]
 8007d26:	685b      	ldr	r3, [r3, #4]
 8007d28:	6053      	str	r3, [r2, #4]
 8007d2a:	4421      	add	r1, r4
 8007d2c:	6011      	str	r1, [r2, #0]
 8007d2e:	e7da      	b.n	8007ce6 <_free_r+0x26>
 8007d30:	d902      	bls.n	8007d38 <_free_r+0x78>
 8007d32:	230c      	movs	r3, #12
 8007d34:	6003      	str	r3, [r0, #0]
 8007d36:	e7d6      	b.n	8007ce6 <_free_r+0x26>
 8007d38:	6825      	ldr	r5, [r4, #0]
 8007d3a:	1961      	adds	r1, r4, r5
 8007d3c:	428b      	cmp	r3, r1
 8007d3e:	bf04      	itt	eq
 8007d40:	6819      	ldreq	r1, [r3, #0]
 8007d42:	685b      	ldreq	r3, [r3, #4]
 8007d44:	6063      	str	r3, [r4, #4]
 8007d46:	bf04      	itt	eq
 8007d48:	1949      	addeq	r1, r1, r5
 8007d4a:	6021      	streq	r1, [r4, #0]
 8007d4c:	6054      	str	r4, [r2, #4]
 8007d4e:	e7ca      	b.n	8007ce6 <_free_r+0x26>
 8007d50:	b003      	add	sp, #12
 8007d52:	bd30      	pop	{r4, r5, pc}
 8007d54:	20002df0 	.word	0x20002df0

08007d58 <sbrk_aligned>:
 8007d58:	b570      	push	{r4, r5, r6, lr}
 8007d5a:	4e0e      	ldr	r6, [pc, #56]	; (8007d94 <sbrk_aligned+0x3c>)
 8007d5c:	460c      	mov	r4, r1
 8007d5e:	6831      	ldr	r1, [r6, #0]
 8007d60:	4605      	mov	r5, r0
 8007d62:	b911      	cbnz	r1, 8007d6a <sbrk_aligned+0x12>
 8007d64:	f000 fb7a 	bl	800845c <_sbrk_r>
 8007d68:	6030      	str	r0, [r6, #0]
 8007d6a:	4621      	mov	r1, r4
 8007d6c:	4628      	mov	r0, r5
 8007d6e:	f000 fb75 	bl	800845c <_sbrk_r>
 8007d72:	1c43      	adds	r3, r0, #1
 8007d74:	d00a      	beq.n	8007d8c <sbrk_aligned+0x34>
 8007d76:	1cc4      	adds	r4, r0, #3
 8007d78:	f024 0403 	bic.w	r4, r4, #3
 8007d7c:	42a0      	cmp	r0, r4
 8007d7e:	d007      	beq.n	8007d90 <sbrk_aligned+0x38>
 8007d80:	1a21      	subs	r1, r4, r0
 8007d82:	4628      	mov	r0, r5
 8007d84:	f000 fb6a 	bl	800845c <_sbrk_r>
 8007d88:	3001      	adds	r0, #1
 8007d8a:	d101      	bne.n	8007d90 <sbrk_aligned+0x38>
 8007d8c:	f04f 34ff 	mov.w	r4, #4294967295
 8007d90:	4620      	mov	r0, r4
 8007d92:	bd70      	pop	{r4, r5, r6, pc}
 8007d94:	20002df4 	.word	0x20002df4

08007d98 <_malloc_r>:
 8007d98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007d9c:	1ccd      	adds	r5, r1, #3
 8007d9e:	f025 0503 	bic.w	r5, r5, #3
 8007da2:	3508      	adds	r5, #8
 8007da4:	2d0c      	cmp	r5, #12
 8007da6:	bf38      	it	cc
 8007da8:	250c      	movcc	r5, #12
 8007daa:	2d00      	cmp	r5, #0
 8007dac:	4607      	mov	r7, r0
 8007dae:	db01      	blt.n	8007db4 <_malloc_r+0x1c>
 8007db0:	42a9      	cmp	r1, r5
 8007db2:	d905      	bls.n	8007dc0 <_malloc_r+0x28>
 8007db4:	230c      	movs	r3, #12
 8007db6:	603b      	str	r3, [r7, #0]
 8007db8:	2600      	movs	r6, #0
 8007dba:	4630      	mov	r0, r6
 8007dbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007dc0:	4e2e      	ldr	r6, [pc, #184]	; (8007e7c <_malloc_r+0xe4>)
 8007dc2:	f000 fbf5 	bl	80085b0 <__malloc_lock>
 8007dc6:	6833      	ldr	r3, [r6, #0]
 8007dc8:	461c      	mov	r4, r3
 8007dca:	bb34      	cbnz	r4, 8007e1a <_malloc_r+0x82>
 8007dcc:	4629      	mov	r1, r5
 8007dce:	4638      	mov	r0, r7
 8007dd0:	f7ff ffc2 	bl	8007d58 <sbrk_aligned>
 8007dd4:	1c43      	adds	r3, r0, #1
 8007dd6:	4604      	mov	r4, r0
 8007dd8:	d14d      	bne.n	8007e76 <_malloc_r+0xde>
 8007dda:	6834      	ldr	r4, [r6, #0]
 8007ddc:	4626      	mov	r6, r4
 8007dde:	2e00      	cmp	r6, #0
 8007de0:	d140      	bne.n	8007e64 <_malloc_r+0xcc>
 8007de2:	6823      	ldr	r3, [r4, #0]
 8007de4:	4631      	mov	r1, r6
 8007de6:	4638      	mov	r0, r7
 8007de8:	eb04 0803 	add.w	r8, r4, r3
 8007dec:	f000 fb36 	bl	800845c <_sbrk_r>
 8007df0:	4580      	cmp	r8, r0
 8007df2:	d13a      	bne.n	8007e6a <_malloc_r+0xd2>
 8007df4:	6821      	ldr	r1, [r4, #0]
 8007df6:	3503      	adds	r5, #3
 8007df8:	1a6d      	subs	r5, r5, r1
 8007dfa:	f025 0503 	bic.w	r5, r5, #3
 8007dfe:	3508      	adds	r5, #8
 8007e00:	2d0c      	cmp	r5, #12
 8007e02:	bf38      	it	cc
 8007e04:	250c      	movcc	r5, #12
 8007e06:	4629      	mov	r1, r5
 8007e08:	4638      	mov	r0, r7
 8007e0a:	f7ff ffa5 	bl	8007d58 <sbrk_aligned>
 8007e0e:	3001      	adds	r0, #1
 8007e10:	d02b      	beq.n	8007e6a <_malloc_r+0xd2>
 8007e12:	6823      	ldr	r3, [r4, #0]
 8007e14:	442b      	add	r3, r5
 8007e16:	6023      	str	r3, [r4, #0]
 8007e18:	e00e      	b.n	8007e38 <_malloc_r+0xa0>
 8007e1a:	6822      	ldr	r2, [r4, #0]
 8007e1c:	1b52      	subs	r2, r2, r5
 8007e1e:	d41e      	bmi.n	8007e5e <_malloc_r+0xc6>
 8007e20:	2a0b      	cmp	r2, #11
 8007e22:	d916      	bls.n	8007e52 <_malloc_r+0xba>
 8007e24:	1961      	adds	r1, r4, r5
 8007e26:	42a3      	cmp	r3, r4
 8007e28:	6025      	str	r5, [r4, #0]
 8007e2a:	bf18      	it	ne
 8007e2c:	6059      	strne	r1, [r3, #4]
 8007e2e:	6863      	ldr	r3, [r4, #4]
 8007e30:	bf08      	it	eq
 8007e32:	6031      	streq	r1, [r6, #0]
 8007e34:	5162      	str	r2, [r4, r5]
 8007e36:	604b      	str	r3, [r1, #4]
 8007e38:	4638      	mov	r0, r7
 8007e3a:	f104 060b 	add.w	r6, r4, #11
 8007e3e:	f000 fbbd 	bl	80085bc <__malloc_unlock>
 8007e42:	f026 0607 	bic.w	r6, r6, #7
 8007e46:	1d23      	adds	r3, r4, #4
 8007e48:	1af2      	subs	r2, r6, r3
 8007e4a:	d0b6      	beq.n	8007dba <_malloc_r+0x22>
 8007e4c:	1b9b      	subs	r3, r3, r6
 8007e4e:	50a3      	str	r3, [r4, r2]
 8007e50:	e7b3      	b.n	8007dba <_malloc_r+0x22>
 8007e52:	6862      	ldr	r2, [r4, #4]
 8007e54:	42a3      	cmp	r3, r4
 8007e56:	bf0c      	ite	eq
 8007e58:	6032      	streq	r2, [r6, #0]
 8007e5a:	605a      	strne	r2, [r3, #4]
 8007e5c:	e7ec      	b.n	8007e38 <_malloc_r+0xa0>
 8007e5e:	4623      	mov	r3, r4
 8007e60:	6864      	ldr	r4, [r4, #4]
 8007e62:	e7b2      	b.n	8007dca <_malloc_r+0x32>
 8007e64:	4634      	mov	r4, r6
 8007e66:	6876      	ldr	r6, [r6, #4]
 8007e68:	e7b9      	b.n	8007dde <_malloc_r+0x46>
 8007e6a:	230c      	movs	r3, #12
 8007e6c:	603b      	str	r3, [r7, #0]
 8007e6e:	4638      	mov	r0, r7
 8007e70:	f000 fba4 	bl	80085bc <__malloc_unlock>
 8007e74:	e7a1      	b.n	8007dba <_malloc_r+0x22>
 8007e76:	6025      	str	r5, [r4, #0]
 8007e78:	e7de      	b.n	8007e38 <_malloc_r+0xa0>
 8007e7a:	bf00      	nop
 8007e7c:	20002df0 	.word	0x20002df0

08007e80 <__sfputc_r>:
 8007e80:	6893      	ldr	r3, [r2, #8]
 8007e82:	3b01      	subs	r3, #1
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	b410      	push	{r4}
 8007e88:	6093      	str	r3, [r2, #8]
 8007e8a:	da08      	bge.n	8007e9e <__sfputc_r+0x1e>
 8007e8c:	6994      	ldr	r4, [r2, #24]
 8007e8e:	42a3      	cmp	r3, r4
 8007e90:	db01      	blt.n	8007e96 <__sfputc_r+0x16>
 8007e92:	290a      	cmp	r1, #10
 8007e94:	d103      	bne.n	8007e9e <__sfputc_r+0x1e>
 8007e96:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007e9a:	f7ff bc31 	b.w	8007700 <__swbuf_r>
 8007e9e:	6813      	ldr	r3, [r2, #0]
 8007ea0:	1c58      	adds	r0, r3, #1
 8007ea2:	6010      	str	r0, [r2, #0]
 8007ea4:	7019      	strb	r1, [r3, #0]
 8007ea6:	4608      	mov	r0, r1
 8007ea8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007eac:	4770      	bx	lr

08007eae <__sfputs_r>:
 8007eae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007eb0:	4606      	mov	r6, r0
 8007eb2:	460f      	mov	r7, r1
 8007eb4:	4614      	mov	r4, r2
 8007eb6:	18d5      	adds	r5, r2, r3
 8007eb8:	42ac      	cmp	r4, r5
 8007eba:	d101      	bne.n	8007ec0 <__sfputs_r+0x12>
 8007ebc:	2000      	movs	r0, #0
 8007ebe:	e007      	b.n	8007ed0 <__sfputs_r+0x22>
 8007ec0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007ec4:	463a      	mov	r2, r7
 8007ec6:	4630      	mov	r0, r6
 8007ec8:	f7ff ffda 	bl	8007e80 <__sfputc_r>
 8007ecc:	1c43      	adds	r3, r0, #1
 8007ece:	d1f3      	bne.n	8007eb8 <__sfputs_r+0xa>
 8007ed0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007ed4 <_vfiprintf_r>:
 8007ed4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ed8:	460d      	mov	r5, r1
 8007eda:	b09d      	sub	sp, #116	; 0x74
 8007edc:	4614      	mov	r4, r2
 8007ede:	4698      	mov	r8, r3
 8007ee0:	4606      	mov	r6, r0
 8007ee2:	b118      	cbz	r0, 8007eec <_vfiprintf_r+0x18>
 8007ee4:	6983      	ldr	r3, [r0, #24]
 8007ee6:	b90b      	cbnz	r3, 8007eec <_vfiprintf_r+0x18>
 8007ee8:	f7ff fde4 	bl	8007ab4 <__sinit>
 8007eec:	4b89      	ldr	r3, [pc, #548]	; (8008114 <_vfiprintf_r+0x240>)
 8007eee:	429d      	cmp	r5, r3
 8007ef0:	d11b      	bne.n	8007f2a <_vfiprintf_r+0x56>
 8007ef2:	6875      	ldr	r5, [r6, #4]
 8007ef4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007ef6:	07d9      	lsls	r1, r3, #31
 8007ef8:	d405      	bmi.n	8007f06 <_vfiprintf_r+0x32>
 8007efa:	89ab      	ldrh	r3, [r5, #12]
 8007efc:	059a      	lsls	r2, r3, #22
 8007efe:	d402      	bmi.n	8007f06 <_vfiprintf_r+0x32>
 8007f00:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007f02:	f7ff fe75 	bl	8007bf0 <__retarget_lock_acquire_recursive>
 8007f06:	89ab      	ldrh	r3, [r5, #12]
 8007f08:	071b      	lsls	r3, r3, #28
 8007f0a:	d501      	bpl.n	8007f10 <_vfiprintf_r+0x3c>
 8007f0c:	692b      	ldr	r3, [r5, #16]
 8007f0e:	b9eb      	cbnz	r3, 8007f4c <_vfiprintf_r+0x78>
 8007f10:	4629      	mov	r1, r5
 8007f12:	4630      	mov	r0, r6
 8007f14:	f7ff fc46 	bl	80077a4 <__swsetup_r>
 8007f18:	b1c0      	cbz	r0, 8007f4c <_vfiprintf_r+0x78>
 8007f1a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007f1c:	07dc      	lsls	r4, r3, #31
 8007f1e:	d50e      	bpl.n	8007f3e <_vfiprintf_r+0x6a>
 8007f20:	f04f 30ff 	mov.w	r0, #4294967295
 8007f24:	b01d      	add	sp, #116	; 0x74
 8007f26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f2a:	4b7b      	ldr	r3, [pc, #492]	; (8008118 <_vfiprintf_r+0x244>)
 8007f2c:	429d      	cmp	r5, r3
 8007f2e:	d101      	bne.n	8007f34 <_vfiprintf_r+0x60>
 8007f30:	68b5      	ldr	r5, [r6, #8]
 8007f32:	e7df      	b.n	8007ef4 <_vfiprintf_r+0x20>
 8007f34:	4b79      	ldr	r3, [pc, #484]	; (800811c <_vfiprintf_r+0x248>)
 8007f36:	429d      	cmp	r5, r3
 8007f38:	bf08      	it	eq
 8007f3a:	68f5      	ldreq	r5, [r6, #12]
 8007f3c:	e7da      	b.n	8007ef4 <_vfiprintf_r+0x20>
 8007f3e:	89ab      	ldrh	r3, [r5, #12]
 8007f40:	0598      	lsls	r0, r3, #22
 8007f42:	d4ed      	bmi.n	8007f20 <_vfiprintf_r+0x4c>
 8007f44:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007f46:	f7ff fe54 	bl	8007bf2 <__retarget_lock_release_recursive>
 8007f4a:	e7e9      	b.n	8007f20 <_vfiprintf_r+0x4c>
 8007f4c:	2300      	movs	r3, #0
 8007f4e:	9309      	str	r3, [sp, #36]	; 0x24
 8007f50:	2320      	movs	r3, #32
 8007f52:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007f56:	f8cd 800c 	str.w	r8, [sp, #12]
 8007f5a:	2330      	movs	r3, #48	; 0x30
 8007f5c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008120 <_vfiprintf_r+0x24c>
 8007f60:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007f64:	f04f 0901 	mov.w	r9, #1
 8007f68:	4623      	mov	r3, r4
 8007f6a:	469a      	mov	sl, r3
 8007f6c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007f70:	b10a      	cbz	r2, 8007f76 <_vfiprintf_r+0xa2>
 8007f72:	2a25      	cmp	r2, #37	; 0x25
 8007f74:	d1f9      	bne.n	8007f6a <_vfiprintf_r+0x96>
 8007f76:	ebba 0b04 	subs.w	fp, sl, r4
 8007f7a:	d00b      	beq.n	8007f94 <_vfiprintf_r+0xc0>
 8007f7c:	465b      	mov	r3, fp
 8007f7e:	4622      	mov	r2, r4
 8007f80:	4629      	mov	r1, r5
 8007f82:	4630      	mov	r0, r6
 8007f84:	f7ff ff93 	bl	8007eae <__sfputs_r>
 8007f88:	3001      	adds	r0, #1
 8007f8a:	f000 80aa 	beq.w	80080e2 <_vfiprintf_r+0x20e>
 8007f8e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007f90:	445a      	add	r2, fp
 8007f92:	9209      	str	r2, [sp, #36]	; 0x24
 8007f94:	f89a 3000 	ldrb.w	r3, [sl]
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	f000 80a2 	beq.w	80080e2 <_vfiprintf_r+0x20e>
 8007f9e:	2300      	movs	r3, #0
 8007fa0:	f04f 32ff 	mov.w	r2, #4294967295
 8007fa4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007fa8:	f10a 0a01 	add.w	sl, sl, #1
 8007fac:	9304      	str	r3, [sp, #16]
 8007fae:	9307      	str	r3, [sp, #28]
 8007fb0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007fb4:	931a      	str	r3, [sp, #104]	; 0x68
 8007fb6:	4654      	mov	r4, sl
 8007fb8:	2205      	movs	r2, #5
 8007fba:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007fbe:	4858      	ldr	r0, [pc, #352]	; (8008120 <_vfiprintf_r+0x24c>)
 8007fc0:	f7f8 f906 	bl	80001d0 <memchr>
 8007fc4:	9a04      	ldr	r2, [sp, #16]
 8007fc6:	b9d8      	cbnz	r0, 8008000 <_vfiprintf_r+0x12c>
 8007fc8:	06d1      	lsls	r1, r2, #27
 8007fca:	bf44      	itt	mi
 8007fcc:	2320      	movmi	r3, #32
 8007fce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007fd2:	0713      	lsls	r3, r2, #28
 8007fd4:	bf44      	itt	mi
 8007fd6:	232b      	movmi	r3, #43	; 0x2b
 8007fd8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007fdc:	f89a 3000 	ldrb.w	r3, [sl]
 8007fe0:	2b2a      	cmp	r3, #42	; 0x2a
 8007fe2:	d015      	beq.n	8008010 <_vfiprintf_r+0x13c>
 8007fe4:	9a07      	ldr	r2, [sp, #28]
 8007fe6:	4654      	mov	r4, sl
 8007fe8:	2000      	movs	r0, #0
 8007fea:	f04f 0c0a 	mov.w	ip, #10
 8007fee:	4621      	mov	r1, r4
 8007ff0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007ff4:	3b30      	subs	r3, #48	; 0x30
 8007ff6:	2b09      	cmp	r3, #9
 8007ff8:	d94e      	bls.n	8008098 <_vfiprintf_r+0x1c4>
 8007ffa:	b1b0      	cbz	r0, 800802a <_vfiprintf_r+0x156>
 8007ffc:	9207      	str	r2, [sp, #28]
 8007ffe:	e014      	b.n	800802a <_vfiprintf_r+0x156>
 8008000:	eba0 0308 	sub.w	r3, r0, r8
 8008004:	fa09 f303 	lsl.w	r3, r9, r3
 8008008:	4313      	orrs	r3, r2
 800800a:	9304      	str	r3, [sp, #16]
 800800c:	46a2      	mov	sl, r4
 800800e:	e7d2      	b.n	8007fb6 <_vfiprintf_r+0xe2>
 8008010:	9b03      	ldr	r3, [sp, #12]
 8008012:	1d19      	adds	r1, r3, #4
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	9103      	str	r1, [sp, #12]
 8008018:	2b00      	cmp	r3, #0
 800801a:	bfbb      	ittet	lt
 800801c:	425b      	neglt	r3, r3
 800801e:	f042 0202 	orrlt.w	r2, r2, #2
 8008022:	9307      	strge	r3, [sp, #28]
 8008024:	9307      	strlt	r3, [sp, #28]
 8008026:	bfb8      	it	lt
 8008028:	9204      	strlt	r2, [sp, #16]
 800802a:	7823      	ldrb	r3, [r4, #0]
 800802c:	2b2e      	cmp	r3, #46	; 0x2e
 800802e:	d10c      	bne.n	800804a <_vfiprintf_r+0x176>
 8008030:	7863      	ldrb	r3, [r4, #1]
 8008032:	2b2a      	cmp	r3, #42	; 0x2a
 8008034:	d135      	bne.n	80080a2 <_vfiprintf_r+0x1ce>
 8008036:	9b03      	ldr	r3, [sp, #12]
 8008038:	1d1a      	adds	r2, r3, #4
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	9203      	str	r2, [sp, #12]
 800803e:	2b00      	cmp	r3, #0
 8008040:	bfb8      	it	lt
 8008042:	f04f 33ff 	movlt.w	r3, #4294967295
 8008046:	3402      	adds	r4, #2
 8008048:	9305      	str	r3, [sp, #20]
 800804a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008130 <_vfiprintf_r+0x25c>
 800804e:	7821      	ldrb	r1, [r4, #0]
 8008050:	2203      	movs	r2, #3
 8008052:	4650      	mov	r0, sl
 8008054:	f7f8 f8bc 	bl	80001d0 <memchr>
 8008058:	b140      	cbz	r0, 800806c <_vfiprintf_r+0x198>
 800805a:	2340      	movs	r3, #64	; 0x40
 800805c:	eba0 000a 	sub.w	r0, r0, sl
 8008060:	fa03 f000 	lsl.w	r0, r3, r0
 8008064:	9b04      	ldr	r3, [sp, #16]
 8008066:	4303      	orrs	r3, r0
 8008068:	3401      	adds	r4, #1
 800806a:	9304      	str	r3, [sp, #16]
 800806c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008070:	482c      	ldr	r0, [pc, #176]	; (8008124 <_vfiprintf_r+0x250>)
 8008072:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008076:	2206      	movs	r2, #6
 8008078:	f7f8 f8aa 	bl	80001d0 <memchr>
 800807c:	2800      	cmp	r0, #0
 800807e:	d03f      	beq.n	8008100 <_vfiprintf_r+0x22c>
 8008080:	4b29      	ldr	r3, [pc, #164]	; (8008128 <_vfiprintf_r+0x254>)
 8008082:	bb1b      	cbnz	r3, 80080cc <_vfiprintf_r+0x1f8>
 8008084:	9b03      	ldr	r3, [sp, #12]
 8008086:	3307      	adds	r3, #7
 8008088:	f023 0307 	bic.w	r3, r3, #7
 800808c:	3308      	adds	r3, #8
 800808e:	9303      	str	r3, [sp, #12]
 8008090:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008092:	443b      	add	r3, r7
 8008094:	9309      	str	r3, [sp, #36]	; 0x24
 8008096:	e767      	b.n	8007f68 <_vfiprintf_r+0x94>
 8008098:	fb0c 3202 	mla	r2, ip, r2, r3
 800809c:	460c      	mov	r4, r1
 800809e:	2001      	movs	r0, #1
 80080a0:	e7a5      	b.n	8007fee <_vfiprintf_r+0x11a>
 80080a2:	2300      	movs	r3, #0
 80080a4:	3401      	adds	r4, #1
 80080a6:	9305      	str	r3, [sp, #20]
 80080a8:	4619      	mov	r1, r3
 80080aa:	f04f 0c0a 	mov.w	ip, #10
 80080ae:	4620      	mov	r0, r4
 80080b0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80080b4:	3a30      	subs	r2, #48	; 0x30
 80080b6:	2a09      	cmp	r2, #9
 80080b8:	d903      	bls.n	80080c2 <_vfiprintf_r+0x1ee>
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d0c5      	beq.n	800804a <_vfiprintf_r+0x176>
 80080be:	9105      	str	r1, [sp, #20]
 80080c0:	e7c3      	b.n	800804a <_vfiprintf_r+0x176>
 80080c2:	fb0c 2101 	mla	r1, ip, r1, r2
 80080c6:	4604      	mov	r4, r0
 80080c8:	2301      	movs	r3, #1
 80080ca:	e7f0      	b.n	80080ae <_vfiprintf_r+0x1da>
 80080cc:	ab03      	add	r3, sp, #12
 80080ce:	9300      	str	r3, [sp, #0]
 80080d0:	462a      	mov	r2, r5
 80080d2:	4b16      	ldr	r3, [pc, #88]	; (800812c <_vfiprintf_r+0x258>)
 80080d4:	a904      	add	r1, sp, #16
 80080d6:	4630      	mov	r0, r6
 80080d8:	f3af 8000 	nop.w
 80080dc:	4607      	mov	r7, r0
 80080de:	1c78      	adds	r0, r7, #1
 80080e0:	d1d6      	bne.n	8008090 <_vfiprintf_r+0x1bc>
 80080e2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80080e4:	07d9      	lsls	r1, r3, #31
 80080e6:	d405      	bmi.n	80080f4 <_vfiprintf_r+0x220>
 80080e8:	89ab      	ldrh	r3, [r5, #12]
 80080ea:	059a      	lsls	r2, r3, #22
 80080ec:	d402      	bmi.n	80080f4 <_vfiprintf_r+0x220>
 80080ee:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80080f0:	f7ff fd7f 	bl	8007bf2 <__retarget_lock_release_recursive>
 80080f4:	89ab      	ldrh	r3, [r5, #12]
 80080f6:	065b      	lsls	r3, r3, #25
 80080f8:	f53f af12 	bmi.w	8007f20 <_vfiprintf_r+0x4c>
 80080fc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80080fe:	e711      	b.n	8007f24 <_vfiprintf_r+0x50>
 8008100:	ab03      	add	r3, sp, #12
 8008102:	9300      	str	r3, [sp, #0]
 8008104:	462a      	mov	r2, r5
 8008106:	4b09      	ldr	r3, [pc, #36]	; (800812c <_vfiprintf_r+0x258>)
 8008108:	a904      	add	r1, sp, #16
 800810a:	4630      	mov	r0, r6
 800810c:	f000 f880 	bl	8008210 <_printf_i>
 8008110:	e7e4      	b.n	80080dc <_vfiprintf_r+0x208>
 8008112:	bf00      	nop
 8008114:	08008b68 	.word	0x08008b68
 8008118:	08008b88 	.word	0x08008b88
 800811c:	08008b48 	.word	0x08008b48
 8008120:	08008ba8 	.word	0x08008ba8
 8008124:	08008bb2 	.word	0x08008bb2
 8008128:	00000000 	.word	0x00000000
 800812c:	08007eaf 	.word	0x08007eaf
 8008130:	08008bae 	.word	0x08008bae

08008134 <_printf_common>:
 8008134:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008138:	4616      	mov	r6, r2
 800813a:	4699      	mov	r9, r3
 800813c:	688a      	ldr	r2, [r1, #8]
 800813e:	690b      	ldr	r3, [r1, #16]
 8008140:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008144:	4293      	cmp	r3, r2
 8008146:	bfb8      	it	lt
 8008148:	4613      	movlt	r3, r2
 800814a:	6033      	str	r3, [r6, #0]
 800814c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008150:	4607      	mov	r7, r0
 8008152:	460c      	mov	r4, r1
 8008154:	b10a      	cbz	r2, 800815a <_printf_common+0x26>
 8008156:	3301      	adds	r3, #1
 8008158:	6033      	str	r3, [r6, #0]
 800815a:	6823      	ldr	r3, [r4, #0]
 800815c:	0699      	lsls	r1, r3, #26
 800815e:	bf42      	ittt	mi
 8008160:	6833      	ldrmi	r3, [r6, #0]
 8008162:	3302      	addmi	r3, #2
 8008164:	6033      	strmi	r3, [r6, #0]
 8008166:	6825      	ldr	r5, [r4, #0]
 8008168:	f015 0506 	ands.w	r5, r5, #6
 800816c:	d106      	bne.n	800817c <_printf_common+0x48>
 800816e:	f104 0a19 	add.w	sl, r4, #25
 8008172:	68e3      	ldr	r3, [r4, #12]
 8008174:	6832      	ldr	r2, [r6, #0]
 8008176:	1a9b      	subs	r3, r3, r2
 8008178:	42ab      	cmp	r3, r5
 800817a:	dc26      	bgt.n	80081ca <_printf_common+0x96>
 800817c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008180:	1e13      	subs	r3, r2, #0
 8008182:	6822      	ldr	r2, [r4, #0]
 8008184:	bf18      	it	ne
 8008186:	2301      	movne	r3, #1
 8008188:	0692      	lsls	r2, r2, #26
 800818a:	d42b      	bmi.n	80081e4 <_printf_common+0xb0>
 800818c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008190:	4649      	mov	r1, r9
 8008192:	4638      	mov	r0, r7
 8008194:	47c0      	blx	r8
 8008196:	3001      	adds	r0, #1
 8008198:	d01e      	beq.n	80081d8 <_printf_common+0xa4>
 800819a:	6823      	ldr	r3, [r4, #0]
 800819c:	68e5      	ldr	r5, [r4, #12]
 800819e:	6832      	ldr	r2, [r6, #0]
 80081a0:	f003 0306 	and.w	r3, r3, #6
 80081a4:	2b04      	cmp	r3, #4
 80081a6:	bf08      	it	eq
 80081a8:	1aad      	subeq	r5, r5, r2
 80081aa:	68a3      	ldr	r3, [r4, #8]
 80081ac:	6922      	ldr	r2, [r4, #16]
 80081ae:	bf0c      	ite	eq
 80081b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80081b4:	2500      	movne	r5, #0
 80081b6:	4293      	cmp	r3, r2
 80081b8:	bfc4      	itt	gt
 80081ba:	1a9b      	subgt	r3, r3, r2
 80081bc:	18ed      	addgt	r5, r5, r3
 80081be:	2600      	movs	r6, #0
 80081c0:	341a      	adds	r4, #26
 80081c2:	42b5      	cmp	r5, r6
 80081c4:	d11a      	bne.n	80081fc <_printf_common+0xc8>
 80081c6:	2000      	movs	r0, #0
 80081c8:	e008      	b.n	80081dc <_printf_common+0xa8>
 80081ca:	2301      	movs	r3, #1
 80081cc:	4652      	mov	r2, sl
 80081ce:	4649      	mov	r1, r9
 80081d0:	4638      	mov	r0, r7
 80081d2:	47c0      	blx	r8
 80081d4:	3001      	adds	r0, #1
 80081d6:	d103      	bne.n	80081e0 <_printf_common+0xac>
 80081d8:	f04f 30ff 	mov.w	r0, #4294967295
 80081dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80081e0:	3501      	adds	r5, #1
 80081e2:	e7c6      	b.n	8008172 <_printf_common+0x3e>
 80081e4:	18e1      	adds	r1, r4, r3
 80081e6:	1c5a      	adds	r2, r3, #1
 80081e8:	2030      	movs	r0, #48	; 0x30
 80081ea:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80081ee:	4422      	add	r2, r4
 80081f0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80081f4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80081f8:	3302      	adds	r3, #2
 80081fa:	e7c7      	b.n	800818c <_printf_common+0x58>
 80081fc:	2301      	movs	r3, #1
 80081fe:	4622      	mov	r2, r4
 8008200:	4649      	mov	r1, r9
 8008202:	4638      	mov	r0, r7
 8008204:	47c0      	blx	r8
 8008206:	3001      	adds	r0, #1
 8008208:	d0e6      	beq.n	80081d8 <_printf_common+0xa4>
 800820a:	3601      	adds	r6, #1
 800820c:	e7d9      	b.n	80081c2 <_printf_common+0x8e>
	...

08008210 <_printf_i>:
 8008210:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008214:	7e0f      	ldrb	r7, [r1, #24]
 8008216:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008218:	2f78      	cmp	r7, #120	; 0x78
 800821a:	4691      	mov	r9, r2
 800821c:	4680      	mov	r8, r0
 800821e:	460c      	mov	r4, r1
 8008220:	469a      	mov	sl, r3
 8008222:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008226:	d807      	bhi.n	8008238 <_printf_i+0x28>
 8008228:	2f62      	cmp	r7, #98	; 0x62
 800822a:	d80a      	bhi.n	8008242 <_printf_i+0x32>
 800822c:	2f00      	cmp	r7, #0
 800822e:	f000 80d8 	beq.w	80083e2 <_printf_i+0x1d2>
 8008232:	2f58      	cmp	r7, #88	; 0x58
 8008234:	f000 80a3 	beq.w	800837e <_printf_i+0x16e>
 8008238:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800823c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008240:	e03a      	b.n	80082b8 <_printf_i+0xa8>
 8008242:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008246:	2b15      	cmp	r3, #21
 8008248:	d8f6      	bhi.n	8008238 <_printf_i+0x28>
 800824a:	a101      	add	r1, pc, #4	; (adr r1, 8008250 <_printf_i+0x40>)
 800824c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008250:	080082a9 	.word	0x080082a9
 8008254:	080082bd 	.word	0x080082bd
 8008258:	08008239 	.word	0x08008239
 800825c:	08008239 	.word	0x08008239
 8008260:	08008239 	.word	0x08008239
 8008264:	08008239 	.word	0x08008239
 8008268:	080082bd 	.word	0x080082bd
 800826c:	08008239 	.word	0x08008239
 8008270:	08008239 	.word	0x08008239
 8008274:	08008239 	.word	0x08008239
 8008278:	08008239 	.word	0x08008239
 800827c:	080083c9 	.word	0x080083c9
 8008280:	080082ed 	.word	0x080082ed
 8008284:	080083ab 	.word	0x080083ab
 8008288:	08008239 	.word	0x08008239
 800828c:	08008239 	.word	0x08008239
 8008290:	080083eb 	.word	0x080083eb
 8008294:	08008239 	.word	0x08008239
 8008298:	080082ed 	.word	0x080082ed
 800829c:	08008239 	.word	0x08008239
 80082a0:	08008239 	.word	0x08008239
 80082a4:	080083b3 	.word	0x080083b3
 80082a8:	682b      	ldr	r3, [r5, #0]
 80082aa:	1d1a      	adds	r2, r3, #4
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	602a      	str	r2, [r5, #0]
 80082b0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80082b4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80082b8:	2301      	movs	r3, #1
 80082ba:	e0a3      	b.n	8008404 <_printf_i+0x1f4>
 80082bc:	6820      	ldr	r0, [r4, #0]
 80082be:	6829      	ldr	r1, [r5, #0]
 80082c0:	0606      	lsls	r6, r0, #24
 80082c2:	f101 0304 	add.w	r3, r1, #4
 80082c6:	d50a      	bpl.n	80082de <_printf_i+0xce>
 80082c8:	680e      	ldr	r6, [r1, #0]
 80082ca:	602b      	str	r3, [r5, #0]
 80082cc:	2e00      	cmp	r6, #0
 80082ce:	da03      	bge.n	80082d8 <_printf_i+0xc8>
 80082d0:	232d      	movs	r3, #45	; 0x2d
 80082d2:	4276      	negs	r6, r6
 80082d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80082d8:	485e      	ldr	r0, [pc, #376]	; (8008454 <_printf_i+0x244>)
 80082da:	230a      	movs	r3, #10
 80082dc:	e019      	b.n	8008312 <_printf_i+0x102>
 80082de:	680e      	ldr	r6, [r1, #0]
 80082e0:	602b      	str	r3, [r5, #0]
 80082e2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80082e6:	bf18      	it	ne
 80082e8:	b236      	sxthne	r6, r6
 80082ea:	e7ef      	b.n	80082cc <_printf_i+0xbc>
 80082ec:	682b      	ldr	r3, [r5, #0]
 80082ee:	6820      	ldr	r0, [r4, #0]
 80082f0:	1d19      	adds	r1, r3, #4
 80082f2:	6029      	str	r1, [r5, #0]
 80082f4:	0601      	lsls	r1, r0, #24
 80082f6:	d501      	bpl.n	80082fc <_printf_i+0xec>
 80082f8:	681e      	ldr	r6, [r3, #0]
 80082fa:	e002      	b.n	8008302 <_printf_i+0xf2>
 80082fc:	0646      	lsls	r6, r0, #25
 80082fe:	d5fb      	bpl.n	80082f8 <_printf_i+0xe8>
 8008300:	881e      	ldrh	r6, [r3, #0]
 8008302:	4854      	ldr	r0, [pc, #336]	; (8008454 <_printf_i+0x244>)
 8008304:	2f6f      	cmp	r7, #111	; 0x6f
 8008306:	bf0c      	ite	eq
 8008308:	2308      	moveq	r3, #8
 800830a:	230a      	movne	r3, #10
 800830c:	2100      	movs	r1, #0
 800830e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008312:	6865      	ldr	r5, [r4, #4]
 8008314:	60a5      	str	r5, [r4, #8]
 8008316:	2d00      	cmp	r5, #0
 8008318:	bfa2      	ittt	ge
 800831a:	6821      	ldrge	r1, [r4, #0]
 800831c:	f021 0104 	bicge.w	r1, r1, #4
 8008320:	6021      	strge	r1, [r4, #0]
 8008322:	b90e      	cbnz	r6, 8008328 <_printf_i+0x118>
 8008324:	2d00      	cmp	r5, #0
 8008326:	d04d      	beq.n	80083c4 <_printf_i+0x1b4>
 8008328:	4615      	mov	r5, r2
 800832a:	fbb6 f1f3 	udiv	r1, r6, r3
 800832e:	fb03 6711 	mls	r7, r3, r1, r6
 8008332:	5dc7      	ldrb	r7, [r0, r7]
 8008334:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008338:	4637      	mov	r7, r6
 800833a:	42bb      	cmp	r3, r7
 800833c:	460e      	mov	r6, r1
 800833e:	d9f4      	bls.n	800832a <_printf_i+0x11a>
 8008340:	2b08      	cmp	r3, #8
 8008342:	d10b      	bne.n	800835c <_printf_i+0x14c>
 8008344:	6823      	ldr	r3, [r4, #0]
 8008346:	07de      	lsls	r6, r3, #31
 8008348:	d508      	bpl.n	800835c <_printf_i+0x14c>
 800834a:	6923      	ldr	r3, [r4, #16]
 800834c:	6861      	ldr	r1, [r4, #4]
 800834e:	4299      	cmp	r1, r3
 8008350:	bfde      	ittt	le
 8008352:	2330      	movle	r3, #48	; 0x30
 8008354:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008358:	f105 35ff 	addle.w	r5, r5, #4294967295
 800835c:	1b52      	subs	r2, r2, r5
 800835e:	6122      	str	r2, [r4, #16]
 8008360:	f8cd a000 	str.w	sl, [sp]
 8008364:	464b      	mov	r3, r9
 8008366:	aa03      	add	r2, sp, #12
 8008368:	4621      	mov	r1, r4
 800836a:	4640      	mov	r0, r8
 800836c:	f7ff fee2 	bl	8008134 <_printf_common>
 8008370:	3001      	adds	r0, #1
 8008372:	d14c      	bne.n	800840e <_printf_i+0x1fe>
 8008374:	f04f 30ff 	mov.w	r0, #4294967295
 8008378:	b004      	add	sp, #16
 800837a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800837e:	4835      	ldr	r0, [pc, #212]	; (8008454 <_printf_i+0x244>)
 8008380:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008384:	6829      	ldr	r1, [r5, #0]
 8008386:	6823      	ldr	r3, [r4, #0]
 8008388:	f851 6b04 	ldr.w	r6, [r1], #4
 800838c:	6029      	str	r1, [r5, #0]
 800838e:	061d      	lsls	r5, r3, #24
 8008390:	d514      	bpl.n	80083bc <_printf_i+0x1ac>
 8008392:	07df      	lsls	r7, r3, #31
 8008394:	bf44      	itt	mi
 8008396:	f043 0320 	orrmi.w	r3, r3, #32
 800839a:	6023      	strmi	r3, [r4, #0]
 800839c:	b91e      	cbnz	r6, 80083a6 <_printf_i+0x196>
 800839e:	6823      	ldr	r3, [r4, #0]
 80083a0:	f023 0320 	bic.w	r3, r3, #32
 80083a4:	6023      	str	r3, [r4, #0]
 80083a6:	2310      	movs	r3, #16
 80083a8:	e7b0      	b.n	800830c <_printf_i+0xfc>
 80083aa:	6823      	ldr	r3, [r4, #0]
 80083ac:	f043 0320 	orr.w	r3, r3, #32
 80083b0:	6023      	str	r3, [r4, #0]
 80083b2:	2378      	movs	r3, #120	; 0x78
 80083b4:	4828      	ldr	r0, [pc, #160]	; (8008458 <_printf_i+0x248>)
 80083b6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80083ba:	e7e3      	b.n	8008384 <_printf_i+0x174>
 80083bc:	0659      	lsls	r1, r3, #25
 80083be:	bf48      	it	mi
 80083c0:	b2b6      	uxthmi	r6, r6
 80083c2:	e7e6      	b.n	8008392 <_printf_i+0x182>
 80083c4:	4615      	mov	r5, r2
 80083c6:	e7bb      	b.n	8008340 <_printf_i+0x130>
 80083c8:	682b      	ldr	r3, [r5, #0]
 80083ca:	6826      	ldr	r6, [r4, #0]
 80083cc:	6961      	ldr	r1, [r4, #20]
 80083ce:	1d18      	adds	r0, r3, #4
 80083d0:	6028      	str	r0, [r5, #0]
 80083d2:	0635      	lsls	r5, r6, #24
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	d501      	bpl.n	80083dc <_printf_i+0x1cc>
 80083d8:	6019      	str	r1, [r3, #0]
 80083da:	e002      	b.n	80083e2 <_printf_i+0x1d2>
 80083dc:	0670      	lsls	r0, r6, #25
 80083de:	d5fb      	bpl.n	80083d8 <_printf_i+0x1c8>
 80083e0:	8019      	strh	r1, [r3, #0]
 80083e2:	2300      	movs	r3, #0
 80083e4:	6123      	str	r3, [r4, #16]
 80083e6:	4615      	mov	r5, r2
 80083e8:	e7ba      	b.n	8008360 <_printf_i+0x150>
 80083ea:	682b      	ldr	r3, [r5, #0]
 80083ec:	1d1a      	adds	r2, r3, #4
 80083ee:	602a      	str	r2, [r5, #0]
 80083f0:	681d      	ldr	r5, [r3, #0]
 80083f2:	6862      	ldr	r2, [r4, #4]
 80083f4:	2100      	movs	r1, #0
 80083f6:	4628      	mov	r0, r5
 80083f8:	f7f7 feea 	bl	80001d0 <memchr>
 80083fc:	b108      	cbz	r0, 8008402 <_printf_i+0x1f2>
 80083fe:	1b40      	subs	r0, r0, r5
 8008400:	6060      	str	r0, [r4, #4]
 8008402:	6863      	ldr	r3, [r4, #4]
 8008404:	6123      	str	r3, [r4, #16]
 8008406:	2300      	movs	r3, #0
 8008408:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800840c:	e7a8      	b.n	8008360 <_printf_i+0x150>
 800840e:	6923      	ldr	r3, [r4, #16]
 8008410:	462a      	mov	r2, r5
 8008412:	4649      	mov	r1, r9
 8008414:	4640      	mov	r0, r8
 8008416:	47d0      	blx	sl
 8008418:	3001      	adds	r0, #1
 800841a:	d0ab      	beq.n	8008374 <_printf_i+0x164>
 800841c:	6823      	ldr	r3, [r4, #0]
 800841e:	079b      	lsls	r3, r3, #30
 8008420:	d413      	bmi.n	800844a <_printf_i+0x23a>
 8008422:	68e0      	ldr	r0, [r4, #12]
 8008424:	9b03      	ldr	r3, [sp, #12]
 8008426:	4298      	cmp	r0, r3
 8008428:	bfb8      	it	lt
 800842a:	4618      	movlt	r0, r3
 800842c:	e7a4      	b.n	8008378 <_printf_i+0x168>
 800842e:	2301      	movs	r3, #1
 8008430:	4632      	mov	r2, r6
 8008432:	4649      	mov	r1, r9
 8008434:	4640      	mov	r0, r8
 8008436:	47d0      	blx	sl
 8008438:	3001      	adds	r0, #1
 800843a:	d09b      	beq.n	8008374 <_printf_i+0x164>
 800843c:	3501      	adds	r5, #1
 800843e:	68e3      	ldr	r3, [r4, #12]
 8008440:	9903      	ldr	r1, [sp, #12]
 8008442:	1a5b      	subs	r3, r3, r1
 8008444:	42ab      	cmp	r3, r5
 8008446:	dcf2      	bgt.n	800842e <_printf_i+0x21e>
 8008448:	e7eb      	b.n	8008422 <_printf_i+0x212>
 800844a:	2500      	movs	r5, #0
 800844c:	f104 0619 	add.w	r6, r4, #25
 8008450:	e7f5      	b.n	800843e <_printf_i+0x22e>
 8008452:	bf00      	nop
 8008454:	08008bb9 	.word	0x08008bb9
 8008458:	08008bca 	.word	0x08008bca

0800845c <_sbrk_r>:
 800845c:	b538      	push	{r3, r4, r5, lr}
 800845e:	4d06      	ldr	r5, [pc, #24]	; (8008478 <_sbrk_r+0x1c>)
 8008460:	2300      	movs	r3, #0
 8008462:	4604      	mov	r4, r0
 8008464:	4608      	mov	r0, r1
 8008466:	602b      	str	r3, [r5, #0]
 8008468:	f7f9 ff90 	bl	800238c <_sbrk>
 800846c:	1c43      	adds	r3, r0, #1
 800846e:	d102      	bne.n	8008476 <_sbrk_r+0x1a>
 8008470:	682b      	ldr	r3, [r5, #0]
 8008472:	b103      	cbz	r3, 8008476 <_sbrk_r+0x1a>
 8008474:	6023      	str	r3, [r4, #0]
 8008476:	bd38      	pop	{r3, r4, r5, pc}
 8008478:	20002df8 	.word	0x20002df8

0800847c <__sread>:
 800847c:	b510      	push	{r4, lr}
 800847e:	460c      	mov	r4, r1
 8008480:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008484:	f000 f8a0 	bl	80085c8 <_read_r>
 8008488:	2800      	cmp	r0, #0
 800848a:	bfab      	itete	ge
 800848c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800848e:	89a3      	ldrhlt	r3, [r4, #12]
 8008490:	181b      	addge	r3, r3, r0
 8008492:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008496:	bfac      	ite	ge
 8008498:	6563      	strge	r3, [r4, #84]	; 0x54
 800849a:	81a3      	strhlt	r3, [r4, #12]
 800849c:	bd10      	pop	{r4, pc}

0800849e <__swrite>:
 800849e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80084a2:	461f      	mov	r7, r3
 80084a4:	898b      	ldrh	r3, [r1, #12]
 80084a6:	05db      	lsls	r3, r3, #23
 80084a8:	4605      	mov	r5, r0
 80084aa:	460c      	mov	r4, r1
 80084ac:	4616      	mov	r6, r2
 80084ae:	d505      	bpl.n	80084bc <__swrite+0x1e>
 80084b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80084b4:	2302      	movs	r3, #2
 80084b6:	2200      	movs	r2, #0
 80084b8:	f000 f868 	bl	800858c <_lseek_r>
 80084bc:	89a3      	ldrh	r3, [r4, #12]
 80084be:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80084c2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80084c6:	81a3      	strh	r3, [r4, #12]
 80084c8:	4632      	mov	r2, r6
 80084ca:	463b      	mov	r3, r7
 80084cc:	4628      	mov	r0, r5
 80084ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80084d2:	f000 b817 	b.w	8008504 <_write_r>

080084d6 <__sseek>:
 80084d6:	b510      	push	{r4, lr}
 80084d8:	460c      	mov	r4, r1
 80084da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80084de:	f000 f855 	bl	800858c <_lseek_r>
 80084e2:	1c43      	adds	r3, r0, #1
 80084e4:	89a3      	ldrh	r3, [r4, #12]
 80084e6:	bf15      	itete	ne
 80084e8:	6560      	strne	r0, [r4, #84]	; 0x54
 80084ea:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80084ee:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80084f2:	81a3      	strheq	r3, [r4, #12]
 80084f4:	bf18      	it	ne
 80084f6:	81a3      	strhne	r3, [r4, #12]
 80084f8:	bd10      	pop	{r4, pc}

080084fa <__sclose>:
 80084fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80084fe:	f000 b813 	b.w	8008528 <_close_r>
	...

08008504 <_write_r>:
 8008504:	b538      	push	{r3, r4, r5, lr}
 8008506:	4d07      	ldr	r5, [pc, #28]	; (8008524 <_write_r+0x20>)
 8008508:	4604      	mov	r4, r0
 800850a:	4608      	mov	r0, r1
 800850c:	4611      	mov	r1, r2
 800850e:	2200      	movs	r2, #0
 8008510:	602a      	str	r2, [r5, #0]
 8008512:	461a      	mov	r2, r3
 8008514:	f7f9 fa4e 	bl	80019b4 <_write>
 8008518:	1c43      	adds	r3, r0, #1
 800851a:	d102      	bne.n	8008522 <_write_r+0x1e>
 800851c:	682b      	ldr	r3, [r5, #0]
 800851e:	b103      	cbz	r3, 8008522 <_write_r+0x1e>
 8008520:	6023      	str	r3, [r4, #0]
 8008522:	bd38      	pop	{r3, r4, r5, pc}
 8008524:	20002df8 	.word	0x20002df8

08008528 <_close_r>:
 8008528:	b538      	push	{r3, r4, r5, lr}
 800852a:	4d06      	ldr	r5, [pc, #24]	; (8008544 <_close_r+0x1c>)
 800852c:	2300      	movs	r3, #0
 800852e:	4604      	mov	r4, r0
 8008530:	4608      	mov	r0, r1
 8008532:	602b      	str	r3, [r5, #0]
 8008534:	f7f9 fef6 	bl	8002324 <_close>
 8008538:	1c43      	adds	r3, r0, #1
 800853a:	d102      	bne.n	8008542 <_close_r+0x1a>
 800853c:	682b      	ldr	r3, [r5, #0]
 800853e:	b103      	cbz	r3, 8008542 <_close_r+0x1a>
 8008540:	6023      	str	r3, [r4, #0]
 8008542:	bd38      	pop	{r3, r4, r5, pc}
 8008544:	20002df8 	.word	0x20002df8

08008548 <_fstat_r>:
 8008548:	b538      	push	{r3, r4, r5, lr}
 800854a:	4d07      	ldr	r5, [pc, #28]	; (8008568 <_fstat_r+0x20>)
 800854c:	2300      	movs	r3, #0
 800854e:	4604      	mov	r4, r0
 8008550:	4608      	mov	r0, r1
 8008552:	4611      	mov	r1, r2
 8008554:	602b      	str	r3, [r5, #0]
 8008556:	f7f9 fef1 	bl	800233c <_fstat>
 800855a:	1c43      	adds	r3, r0, #1
 800855c:	d102      	bne.n	8008564 <_fstat_r+0x1c>
 800855e:	682b      	ldr	r3, [r5, #0]
 8008560:	b103      	cbz	r3, 8008564 <_fstat_r+0x1c>
 8008562:	6023      	str	r3, [r4, #0]
 8008564:	bd38      	pop	{r3, r4, r5, pc}
 8008566:	bf00      	nop
 8008568:	20002df8 	.word	0x20002df8

0800856c <_isatty_r>:
 800856c:	b538      	push	{r3, r4, r5, lr}
 800856e:	4d06      	ldr	r5, [pc, #24]	; (8008588 <_isatty_r+0x1c>)
 8008570:	2300      	movs	r3, #0
 8008572:	4604      	mov	r4, r0
 8008574:	4608      	mov	r0, r1
 8008576:	602b      	str	r3, [r5, #0]
 8008578:	f7f9 fef0 	bl	800235c <_isatty>
 800857c:	1c43      	adds	r3, r0, #1
 800857e:	d102      	bne.n	8008586 <_isatty_r+0x1a>
 8008580:	682b      	ldr	r3, [r5, #0]
 8008582:	b103      	cbz	r3, 8008586 <_isatty_r+0x1a>
 8008584:	6023      	str	r3, [r4, #0]
 8008586:	bd38      	pop	{r3, r4, r5, pc}
 8008588:	20002df8 	.word	0x20002df8

0800858c <_lseek_r>:
 800858c:	b538      	push	{r3, r4, r5, lr}
 800858e:	4d07      	ldr	r5, [pc, #28]	; (80085ac <_lseek_r+0x20>)
 8008590:	4604      	mov	r4, r0
 8008592:	4608      	mov	r0, r1
 8008594:	4611      	mov	r1, r2
 8008596:	2200      	movs	r2, #0
 8008598:	602a      	str	r2, [r5, #0]
 800859a:	461a      	mov	r2, r3
 800859c:	f7f9 fee9 	bl	8002372 <_lseek>
 80085a0:	1c43      	adds	r3, r0, #1
 80085a2:	d102      	bne.n	80085aa <_lseek_r+0x1e>
 80085a4:	682b      	ldr	r3, [r5, #0]
 80085a6:	b103      	cbz	r3, 80085aa <_lseek_r+0x1e>
 80085a8:	6023      	str	r3, [r4, #0]
 80085aa:	bd38      	pop	{r3, r4, r5, pc}
 80085ac:	20002df8 	.word	0x20002df8

080085b0 <__malloc_lock>:
 80085b0:	4801      	ldr	r0, [pc, #4]	; (80085b8 <__malloc_lock+0x8>)
 80085b2:	f7ff bb1d 	b.w	8007bf0 <__retarget_lock_acquire_recursive>
 80085b6:	bf00      	nop
 80085b8:	20002dec 	.word	0x20002dec

080085bc <__malloc_unlock>:
 80085bc:	4801      	ldr	r0, [pc, #4]	; (80085c4 <__malloc_unlock+0x8>)
 80085be:	f7ff bb18 	b.w	8007bf2 <__retarget_lock_release_recursive>
 80085c2:	bf00      	nop
 80085c4:	20002dec 	.word	0x20002dec

080085c8 <_read_r>:
 80085c8:	b538      	push	{r3, r4, r5, lr}
 80085ca:	4d07      	ldr	r5, [pc, #28]	; (80085e8 <_read_r+0x20>)
 80085cc:	4604      	mov	r4, r0
 80085ce:	4608      	mov	r0, r1
 80085d0:	4611      	mov	r1, r2
 80085d2:	2200      	movs	r2, #0
 80085d4:	602a      	str	r2, [r5, #0]
 80085d6:	461a      	mov	r2, r3
 80085d8:	f7f9 fe87 	bl	80022ea <_read>
 80085dc:	1c43      	adds	r3, r0, #1
 80085de:	d102      	bne.n	80085e6 <_read_r+0x1e>
 80085e0:	682b      	ldr	r3, [r5, #0]
 80085e2:	b103      	cbz	r3, 80085e6 <_read_r+0x1e>
 80085e4:	6023      	str	r3, [r4, #0]
 80085e6:	bd38      	pop	{r3, r4, r5, pc}
 80085e8:	20002df8 	.word	0x20002df8

080085ec <_init>:
 80085ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085ee:	bf00      	nop
 80085f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80085f2:	bc08      	pop	{r3}
 80085f4:	469e      	mov	lr, r3
 80085f6:	4770      	bx	lr

080085f8 <_fini>:
 80085f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085fa:	bf00      	nop
 80085fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80085fe:	bc08      	pop	{r3}
 8008600:	469e      	mov	lr, r3
 8008602:	4770      	bx	lr
