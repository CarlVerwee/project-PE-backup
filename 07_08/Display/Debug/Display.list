
Display.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007f80  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000524  08008150  08008150  00018150  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008674  08008674  00024f00  2**0
                  CONTENTS
  4 .ARM          00000008  08008674  08008674  00018674  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800867c  0800867c  00024f00  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800867c  0800867c  0001867c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008680  08008680  00018680  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00004f00  20000000  08008684  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005fc  20004f00  0800d584  00024f00  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200054fc  0800d584  000254fc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00024f00  2**0
                  CONTENTS, READONLY
 12 .debug_info   000166ce  00000000  00000000  00024f30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002baa  00000000  00000000  0003b5fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001348  00000000  00000000  0003e1a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001238  00000000  00000000  0003f4f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000283b1  00000000  00000000  00040728  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000181b3  00000000  00000000  00068ad9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f5d5a  00000000  00000000  00080c8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001769e6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005984  00000000  00000000  00176a38  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20004f00 	.word	0x20004f00
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08008138 	.word	0x08008138

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20004f04 	.word	0x20004f04
 800020c:	08008138 	.word	0x08008138

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b974 	b.w	80005b0 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468e      	mov	lr, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14d      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4694      	mov	ip, r2
 80002f2:	d969      	bls.n	80003c8 <__udivmoddi4+0xe8>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b152      	cbz	r2, 8000310 <__udivmoddi4+0x30>
 80002fa:	fa01 f302 	lsl.w	r3, r1, r2
 80002fe:	f1c2 0120 	rsb	r1, r2, #32
 8000302:	fa20 f101 	lsr.w	r1, r0, r1
 8000306:	fa0c fc02 	lsl.w	ip, ip, r2
 800030a:	ea41 0e03 	orr.w	lr, r1, r3
 800030e:	4094      	lsls	r4, r2
 8000310:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000314:	0c21      	lsrs	r1, r4, #16
 8000316:	fbbe f6f8 	udiv	r6, lr, r8
 800031a:	fa1f f78c 	uxth.w	r7, ip
 800031e:	fb08 e316 	mls	r3, r8, r6, lr
 8000322:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000326:	fb06 f107 	mul.w	r1, r6, r7
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f106 30ff 	add.w	r0, r6, #4294967295
 8000336:	f080 811f 	bcs.w	8000578 <__udivmoddi4+0x298>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 811c 	bls.w	8000578 <__udivmoddi4+0x298>
 8000340:	3e02      	subs	r6, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a5b      	subs	r3, r3, r1
 8000346:	b2a4      	uxth	r4, r4
 8000348:	fbb3 f0f8 	udiv	r0, r3, r8
 800034c:	fb08 3310 	mls	r3, r8, r0, r3
 8000350:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000354:	fb00 f707 	mul.w	r7, r0, r7
 8000358:	42a7      	cmp	r7, r4
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x92>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f100 33ff 	add.w	r3, r0, #4294967295
 8000364:	f080 810a 	bcs.w	800057c <__udivmoddi4+0x29c>
 8000368:	42a7      	cmp	r7, r4
 800036a:	f240 8107 	bls.w	800057c <__udivmoddi4+0x29c>
 800036e:	4464      	add	r4, ip
 8000370:	3802      	subs	r0, #2
 8000372:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000376:	1be4      	subs	r4, r4, r7
 8000378:	2600      	movs	r6, #0
 800037a:	b11d      	cbz	r5, 8000384 <__udivmoddi4+0xa4>
 800037c:	40d4      	lsrs	r4, r2
 800037e:	2300      	movs	r3, #0
 8000380:	e9c5 4300 	strd	r4, r3, [r5]
 8000384:	4631      	mov	r1, r6
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d909      	bls.n	80003a2 <__udivmoddi4+0xc2>
 800038e:	2d00      	cmp	r5, #0
 8000390:	f000 80ef 	beq.w	8000572 <__udivmoddi4+0x292>
 8000394:	2600      	movs	r6, #0
 8000396:	e9c5 0100 	strd	r0, r1, [r5]
 800039a:	4630      	mov	r0, r6
 800039c:	4631      	mov	r1, r6
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	fab3 f683 	clz	r6, r3
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d14a      	bne.n	8000440 <__udivmoddi4+0x160>
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d302      	bcc.n	80003b4 <__udivmoddi4+0xd4>
 80003ae:	4282      	cmp	r2, r0
 80003b0:	f200 80f9 	bhi.w	80005a6 <__udivmoddi4+0x2c6>
 80003b4:	1a84      	subs	r4, r0, r2
 80003b6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ba:	2001      	movs	r0, #1
 80003bc:	469e      	mov	lr, r3
 80003be:	2d00      	cmp	r5, #0
 80003c0:	d0e0      	beq.n	8000384 <__udivmoddi4+0xa4>
 80003c2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003c6:	e7dd      	b.n	8000384 <__udivmoddi4+0xa4>
 80003c8:	b902      	cbnz	r2, 80003cc <__udivmoddi4+0xec>
 80003ca:	deff      	udf	#255	; 0xff
 80003cc:	fab2 f282 	clz	r2, r2
 80003d0:	2a00      	cmp	r2, #0
 80003d2:	f040 8092 	bne.w	80004fa <__udivmoddi4+0x21a>
 80003d6:	eba1 010c 	sub.w	r1, r1, ip
 80003da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003de:	fa1f fe8c 	uxth.w	lr, ip
 80003e2:	2601      	movs	r6, #1
 80003e4:	0c20      	lsrs	r0, r4, #16
 80003e6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ea:	fb07 1113 	mls	r1, r7, r3, r1
 80003ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f2:	fb0e f003 	mul.w	r0, lr, r3
 80003f6:	4288      	cmp	r0, r1
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x12c>
 80003fa:	eb1c 0101 	adds.w	r1, ip, r1
 80003fe:	f103 38ff 	add.w	r8, r3, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x12a>
 8000404:	4288      	cmp	r0, r1
 8000406:	f200 80cb 	bhi.w	80005a0 <__udivmoddi4+0x2c0>
 800040a:	4643      	mov	r3, r8
 800040c:	1a09      	subs	r1, r1, r0
 800040e:	b2a4      	uxth	r4, r4
 8000410:	fbb1 f0f7 	udiv	r0, r1, r7
 8000414:	fb07 1110 	mls	r1, r7, r0, r1
 8000418:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800041c:	fb0e fe00 	mul.w	lr, lr, r0
 8000420:	45a6      	cmp	lr, r4
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x156>
 8000424:	eb1c 0404 	adds.w	r4, ip, r4
 8000428:	f100 31ff 	add.w	r1, r0, #4294967295
 800042c:	d202      	bcs.n	8000434 <__udivmoddi4+0x154>
 800042e:	45a6      	cmp	lr, r4
 8000430:	f200 80bb 	bhi.w	80005aa <__udivmoddi4+0x2ca>
 8000434:	4608      	mov	r0, r1
 8000436:	eba4 040e 	sub.w	r4, r4, lr
 800043a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800043e:	e79c      	b.n	800037a <__udivmoddi4+0x9a>
 8000440:	f1c6 0720 	rsb	r7, r6, #32
 8000444:	40b3      	lsls	r3, r6
 8000446:	fa22 fc07 	lsr.w	ip, r2, r7
 800044a:	ea4c 0c03 	orr.w	ip, ip, r3
 800044e:	fa20 f407 	lsr.w	r4, r0, r7
 8000452:	fa01 f306 	lsl.w	r3, r1, r6
 8000456:	431c      	orrs	r4, r3
 8000458:	40f9      	lsrs	r1, r7
 800045a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800045e:	fa00 f306 	lsl.w	r3, r0, r6
 8000462:	fbb1 f8f9 	udiv	r8, r1, r9
 8000466:	0c20      	lsrs	r0, r4, #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fb09 1118 	mls	r1, r9, r8, r1
 8000470:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000474:	fb08 f00e 	mul.w	r0, r8, lr
 8000478:	4288      	cmp	r0, r1
 800047a:	fa02 f206 	lsl.w	r2, r2, r6
 800047e:	d90b      	bls.n	8000498 <__udivmoddi4+0x1b8>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f108 3aff 	add.w	sl, r8, #4294967295
 8000488:	f080 8088 	bcs.w	800059c <__udivmoddi4+0x2bc>
 800048c:	4288      	cmp	r0, r1
 800048e:	f240 8085 	bls.w	800059c <__udivmoddi4+0x2bc>
 8000492:	f1a8 0802 	sub.w	r8, r8, #2
 8000496:	4461      	add	r1, ip
 8000498:	1a09      	subs	r1, r1, r0
 800049a:	b2a4      	uxth	r4, r4
 800049c:	fbb1 f0f9 	udiv	r0, r1, r9
 80004a0:	fb09 1110 	mls	r1, r9, r0, r1
 80004a4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ac:	458e      	cmp	lr, r1
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x1e2>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004b8:	d26c      	bcs.n	8000594 <__udivmoddi4+0x2b4>
 80004ba:	458e      	cmp	lr, r1
 80004bc:	d96a      	bls.n	8000594 <__udivmoddi4+0x2b4>
 80004be:	3802      	subs	r0, #2
 80004c0:	4461      	add	r1, ip
 80004c2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004c6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ca:	eba1 010e 	sub.w	r1, r1, lr
 80004ce:	42a1      	cmp	r1, r4
 80004d0:	46c8      	mov	r8, r9
 80004d2:	46a6      	mov	lr, r4
 80004d4:	d356      	bcc.n	8000584 <__udivmoddi4+0x2a4>
 80004d6:	d053      	beq.n	8000580 <__udivmoddi4+0x2a0>
 80004d8:	b15d      	cbz	r5, 80004f2 <__udivmoddi4+0x212>
 80004da:	ebb3 0208 	subs.w	r2, r3, r8
 80004de:	eb61 010e 	sbc.w	r1, r1, lr
 80004e2:	fa01 f707 	lsl.w	r7, r1, r7
 80004e6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ea:	40f1      	lsrs	r1, r6
 80004ec:	431f      	orrs	r7, r3
 80004ee:	e9c5 7100 	strd	r7, r1, [r5]
 80004f2:	2600      	movs	r6, #0
 80004f4:	4631      	mov	r1, r6
 80004f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004fa:	f1c2 0320 	rsb	r3, r2, #32
 80004fe:	40d8      	lsrs	r0, r3
 8000500:	fa0c fc02 	lsl.w	ip, ip, r2
 8000504:	fa21 f303 	lsr.w	r3, r1, r3
 8000508:	4091      	lsls	r1, r2
 800050a:	4301      	orrs	r1, r0
 800050c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000510:	fa1f fe8c 	uxth.w	lr, ip
 8000514:	fbb3 f0f7 	udiv	r0, r3, r7
 8000518:	fb07 3610 	mls	r6, r7, r0, r3
 800051c:	0c0b      	lsrs	r3, r1, #16
 800051e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000522:	fb00 f60e 	mul.w	r6, r0, lr
 8000526:	429e      	cmp	r6, r3
 8000528:	fa04 f402 	lsl.w	r4, r4, r2
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x260>
 800052e:	eb1c 0303 	adds.w	r3, ip, r3
 8000532:	f100 38ff 	add.w	r8, r0, #4294967295
 8000536:	d22f      	bcs.n	8000598 <__udivmoddi4+0x2b8>
 8000538:	429e      	cmp	r6, r3
 800053a:	d92d      	bls.n	8000598 <__udivmoddi4+0x2b8>
 800053c:	3802      	subs	r0, #2
 800053e:	4463      	add	r3, ip
 8000540:	1b9b      	subs	r3, r3, r6
 8000542:	b289      	uxth	r1, r1
 8000544:	fbb3 f6f7 	udiv	r6, r3, r7
 8000548:	fb07 3316 	mls	r3, r7, r6, r3
 800054c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000550:	fb06 f30e 	mul.w	r3, r6, lr
 8000554:	428b      	cmp	r3, r1
 8000556:	d908      	bls.n	800056a <__udivmoddi4+0x28a>
 8000558:	eb1c 0101 	adds.w	r1, ip, r1
 800055c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000560:	d216      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000562:	428b      	cmp	r3, r1
 8000564:	d914      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000566:	3e02      	subs	r6, #2
 8000568:	4461      	add	r1, ip
 800056a:	1ac9      	subs	r1, r1, r3
 800056c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000570:	e738      	b.n	80003e4 <__udivmoddi4+0x104>
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e705      	b.n	8000384 <__udivmoddi4+0xa4>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e3      	b.n	8000344 <__udivmoddi4+0x64>
 800057c:	4618      	mov	r0, r3
 800057e:	e6f8      	b.n	8000372 <__udivmoddi4+0x92>
 8000580:	454b      	cmp	r3, r9
 8000582:	d2a9      	bcs.n	80004d8 <__udivmoddi4+0x1f8>
 8000584:	ebb9 0802 	subs.w	r8, r9, r2
 8000588:	eb64 0e0c 	sbc.w	lr, r4, ip
 800058c:	3801      	subs	r0, #1
 800058e:	e7a3      	b.n	80004d8 <__udivmoddi4+0x1f8>
 8000590:	4646      	mov	r6, r8
 8000592:	e7ea      	b.n	800056a <__udivmoddi4+0x28a>
 8000594:	4620      	mov	r0, r4
 8000596:	e794      	b.n	80004c2 <__udivmoddi4+0x1e2>
 8000598:	4640      	mov	r0, r8
 800059a:	e7d1      	b.n	8000540 <__udivmoddi4+0x260>
 800059c:	46d0      	mov	r8, sl
 800059e:	e77b      	b.n	8000498 <__udivmoddi4+0x1b8>
 80005a0:	3b02      	subs	r3, #2
 80005a2:	4461      	add	r1, ip
 80005a4:	e732      	b.n	800040c <__udivmoddi4+0x12c>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e709      	b.n	80003be <__udivmoddi4+0xde>
 80005aa:	4464      	add	r4, ip
 80005ac:	3802      	subs	r0, #2
 80005ae:	e742      	b.n	8000436 <__udivmoddi4+0x156>

080005b0 <__aeabi_idiv0>:
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop

080005b4 <Starting>:
extern uint16_t geheugen[10000]; // {8, 4, 4, 6, 6, 8,...}
extern uint16_t geheugenplaatsen;
extern uint16_t lengte_signaal[48]; //{1, 2, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0, 0};

void Starting()
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	af00      	add	r7, sp, #0
	  printf("\r\n-----------------------------------------------------------------------\r\n");
 80005b8:	480e      	ldr	r0, [pc, #56]	; (80005f4 <Starting+0x40>)
 80005ba:	f006 fe3f 	bl	800723c <puts>
	  printf("  ######  ########    ###    ########  ######## #### ##    ##  ######\r\n");
 80005be:	480e      	ldr	r0, [pc, #56]	; (80005f8 <Starting+0x44>)
 80005c0:	f006 fe3c 	bl	800723c <puts>
	  printf(" ##    ##    ##      ## ##   ##     ##    ##     ##  ###   ## ##    ##\r\n");
 80005c4:	480d      	ldr	r0, [pc, #52]	; (80005fc <Starting+0x48>)
 80005c6:	f006 fe39 	bl	800723c <puts>
	  printf(" ##          ##     ##   ##  ##     ##    ##     ##  ####  ## ## \r\n");
 80005ca:	480d      	ldr	r0, [pc, #52]	; (8000600 <Starting+0x4c>)
 80005cc:	f006 fe36 	bl	800723c <puts>
	  printf("  ######     ##    ##     ## ########     ##     ##  ## ## ## ##   #### \r\n");
 80005d0:	480c      	ldr	r0, [pc, #48]	; (8000604 <Starting+0x50>)
 80005d2:	f006 fe33 	bl	800723c <puts>
	  printf("       ##    ##    ######### ##   ##      ##     ##  ##  #### ##    ##\r\n");
 80005d6:	480c      	ldr	r0, [pc, #48]	; (8000608 <Starting+0x54>)
 80005d8:	f006 fe30 	bl	800723c <puts>
	  printf(" ##    ##    ##    ##     ## ##    ##     ##     ##  ##   ### ##    ##  \r\n");
 80005dc:	480b      	ldr	r0, [pc, #44]	; (800060c <Starting+0x58>)
 80005de:	f006 fe2d 	bl	800723c <puts>
	  printf("  ######     ##    ##     ## ##     ##    ##    #### ##    ##  ######\r\n");
 80005e2:	480b      	ldr	r0, [pc, #44]	; (8000610 <Starting+0x5c>)
 80005e4:	f006 fe2a 	bl	800723c <puts>
	  printf("-----------------------------------------------------------------------\r\n\r\n");
 80005e8:	480a      	ldr	r0, [pc, #40]	; (8000614 <Starting+0x60>)
 80005ea:	f006 fe27 	bl	800723c <puts>
}
 80005ee:	bf00      	nop
 80005f0:	bd80      	pop	{r7, pc}
 80005f2:	bf00      	nop
 80005f4:	08008150 	.word	0x08008150
 80005f8:	0800819c 	.word	0x0800819c
 80005fc:	080081e4 	.word	0x080081e4
 8000600:	0800822c 	.word	0x0800822c
 8000604:	08008270 	.word	0x08008270
 8000608:	080082bc 	.word	0x080082bc
 800060c:	08008304 	.word	0x08008304
 8000610:	08008350 	.word	0x08008350
 8000614:	08008398 	.word	0x08008398

08000618 <All_Carl_Inits>:
void All_Carl_Inits()
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b082      	sub	sp, #8
 800061c:	af00      	add	r7, sp, #0
	if(UartScreen == 1)
 800061e:	4b12      	ldr	r3, [pc, #72]	; (8000668 <All_Carl_Inits+0x50>)
 8000620:	781b      	ldrb	r3, [r3, #0]
 8000622:	2b01      	cmp	r3, #1
 8000624:	d101      	bne.n	800062a <All_Carl_Inits+0x12>
	{
	Starting();
 8000626:	f7ff ffc5 	bl	80005b4 <Starting>
	}
	InitTouch();
 800062a:	f001 f857 	bl	80016dc <InitTouch>
	DisplayBegin();
 800062e:	f000 f951 	bl	80008d4 <DisplayBegin>
	IR_Carrier_OFF();
 8000632:	f000 ffe1 	bl	80015f8 <IR_Carrier_OFF>
	//logo();
	mainscreen();
 8000636:	f000 ff45 	bl	80014c4 <mainscreen>
//	WriteToGeheugen(3, 12);
//	DeleteFromGeheugen(3, 11);
//	DeleteFromGeheugen(1, 1);
	//Wat zit er eigenlijk in mijn geheugen?
	for(uint8_t i = 1; i <= 4; i++)
 800063a:	2301      	movs	r3, #1
 800063c:	71fb      	strb	r3, [r7, #7]
 800063e:	e00b      	b.n	8000658 <All_Carl_Inits+0x40>
	{
		uint16_t *tijd;
		for(uint8_t j = 1; j <= 12; j ++)
 8000640:	2301      	movs	r3, #1
 8000642:	71bb      	strb	r3, [r7, #6]
 8000644:	e002      	b.n	800064c <All_Carl_Inits+0x34>
 8000646:	79bb      	ldrb	r3, [r7, #6]
 8000648:	3301      	adds	r3, #1
 800064a:	71bb      	strb	r3, [r7, #6]
 800064c:	79bb      	ldrb	r3, [r7, #6]
 800064e:	2b0c      	cmp	r3, #12
 8000650:	d9f9      	bls.n	8000646 <All_Carl_Inits+0x2e>
	for(uint8_t i = 1; i <= 4; i++)
 8000652:	79fb      	ldrb	r3, [r7, #7]
 8000654:	3301      	adds	r3, #1
 8000656:	71fb      	strb	r3, [r7, #7]
 8000658:	79fb      	ldrb	r3, [r7, #7]
 800065a:	2b04      	cmp	r3, #4
 800065c:	d9f0      	bls.n	8000640 <All_Carl_Inits+0x28>
		{
			//tijd = TakefromGeheugen(i, j);
		}
	}
}
 800065e:	bf00      	nop
 8000660:	bf00      	nop
 8000662:	3708      	adds	r7, #8
 8000664:	46bd      	mov	sp, r7
 8000666:	bd80      	pop	{r7, pc}
 8000668:	20000000 	.word	0x20000000

0800066c <TakefromGeheugen>:
	printf("geheugenplaatsen = %d geheugen = %d\n\r", geheugenplaatsen, controle);
	}
}
*/
void TakefromGeheugen(uint8_t *dev, uint8_t *kn, uint16_t *DataFromGeheugen, uint8_t *controle)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b088      	sub	sp, #32
 8000670:	af00      	add	r7, sp, #0
 8000672:	60f8      	str	r0, [r7, #12]
 8000674:	60b9      	str	r1, [r7, #8]
 8000676:	607a      	str	r2, [r7, #4]
 8000678:	603b      	str	r3, [r7, #0]
		uint8_t device = *dev;
 800067a:	68fb      	ldr	r3, [r7, #12]
 800067c:	781b      	ldrb	r3, [r3, #0]
 800067e:	75fb      	strb	r3, [r7, #23]
		uint8_t knop = *kn;
 8000680:	68bb      	ldr	r3, [r7, #8]
 8000682:	781b      	ldrb	r3, [r3, #0]
 8000684:	75bb      	strb	r3, [r7, #22]
		uint16_t plaatservoor = 0;
 8000686:	2300      	movs	r3, #0
 8000688:	83fb      	strh	r3, [r7, #30]
		uint8_t berekening = ((device-1) * 12) + knop-1 ;
 800068a:	7dfb      	ldrb	r3, [r7, #23]
 800068c:	461a      	mov	r2, r3
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	4413      	add	r3, r2
 8000692:	009b      	lsls	r3, r3, #2
 8000694:	b2da      	uxtb	r2, r3
 8000696:	7dbb      	ldrb	r3, [r7, #22]
 8000698:	4413      	add	r3, r2
 800069a:	b2db      	uxtb	r3, r3
 800069c:	3b0d      	subs	r3, #13
 800069e:	757b      	strb	r3, [r7, #21]
		if(lengte_signaal[berekening] == 0)
 80006a0:	7d7b      	ldrb	r3, [r7, #21]
 80006a2:	4a2c      	ldr	r2, [pc, #176]	; (8000754 <TakefromGeheugen+0xe8>)
 80006a4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d109      	bne.n	80006c0 <TakefromGeheugen+0x54>
		{
			printf("device: %d knop: %d is niet ingesteld!\r\n", device, knop);
 80006ac:	7dfb      	ldrb	r3, [r7, #23]
 80006ae:	7dba      	ldrb	r2, [r7, #22]
 80006b0:	4619      	mov	r1, r3
 80006b2:	4829      	ldr	r0, [pc, #164]	; (8000758 <TakefromGeheugen+0xec>)
 80006b4:	f006 fd3c 	bl	8007130 <iprintf>
			*controle=0;
 80006b8:	683b      	ldr	r3, [r7, #0]
 80006ba:	2200      	movs	r2, #0
 80006bc:	701a      	strb	r2, [r3, #0]
				printf("%d ", DataFromGeheugen[index]);
				index++;
			}
			printf("\r\n");
		}
}
 80006be:	e044      	b.n	800074a <TakefromGeheugen+0xde>
			*controle=1;
 80006c0:	683b      	ldr	r3, [r7, #0]
 80006c2:	2201      	movs	r2, #1
 80006c4:	701a      	strb	r2, [r3, #0]
			for(uint8_t i = 0; i < berekening; i++)
 80006c6:	2300      	movs	r3, #0
 80006c8:	777b      	strb	r3, [r7, #29]
 80006ca:	e009      	b.n	80006e0 <TakefromGeheugen+0x74>
				plaatservoor += lengte_signaal[i];
 80006cc:	7f7b      	ldrb	r3, [r7, #29]
 80006ce:	4a21      	ldr	r2, [pc, #132]	; (8000754 <TakefromGeheugen+0xe8>)
 80006d0:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80006d4:	8bfb      	ldrh	r3, [r7, #30]
 80006d6:	4413      	add	r3, r2
 80006d8:	83fb      	strh	r3, [r7, #30]
			for(uint8_t i = 0; i < berekening; i++)
 80006da:	7f7b      	ldrb	r3, [r7, #29]
 80006dc:	3301      	adds	r3, #1
 80006de:	777b      	strb	r3, [r7, #29]
 80006e0:	7f7a      	ldrb	r2, [r7, #29]
 80006e2:	7d7b      	ldrb	r3, [r7, #21]
 80006e4:	429a      	cmp	r2, r3
 80006e6:	d3f1      	bcc.n	80006cc <TakefromGeheugen+0x60>
			uint16_t plaatserna = plaatservoor + lengte_signaal[berekening];
 80006e8:	7d7b      	ldrb	r3, [r7, #21]
 80006ea:	4a1a      	ldr	r2, [pc, #104]	; (8000754 <TakefromGeheugen+0xe8>)
 80006ec:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80006f0:	8bfb      	ldrh	r3, [r7, #30]
 80006f2:	4413      	add	r3, r2
 80006f4:	827b      	strh	r3, [r7, #18]
			printf("device: %d knop: %d = ", device, knop);
 80006f6:	7dfb      	ldrb	r3, [r7, #23]
 80006f8:	7dba      	ldrb	r2, [r7, #22]
 80006fa:	4619      	mov	r1, r3
 80006fc:	4817      	ldr	r0, [pc, #92]	; (800075c <TakefromGeheugen+0xf0>)
 80006fe:	f006 fd17 	bl	8007130 <iprintf>
			uint16_t index = 0;
 8000702:	2300      	movs	r3, #0
 8000704:	837b      	strh	r3, [r7, #26]
			for(uint16_t i = plaatservoor; i < plaatserna; i++)
 8000706:	8bfb      	ldrh	r3, [r7, #30]
 8000708:	833b      	strh	r3, [r7, #24]
 800070a:	e017      	b.n	800073c <TakefromGeheugen+0xd0>
				DataFromGeheugen[index] = geheugen[i];
 800070c:	8b3a      	ldrh	r2, [r7, #24]
 800070e:	8b7b      	ldrh	r3, [r7, #26]
 8000710:	005b      	lsls	r3, r3, #1
 8000712:	6879      	ldr	r1, [r7, #4]
 8000714:	440b      	add	r3, r1
 8000716:	4912      	ldr	r1, [pc, #72]	; (8000760 <TakefromGeheugen+0xf4>)
 8000718:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 800071c:	801a      	strh	r2, [r3, #0]
				printf("%d ", DataFromGeheugen[index]);
 800071e:	8b7b      	ldrh	r3, [r7, #26]
 8000720:	005b      	lsls	r3, r3, #1
 8000722:	687a      	ldr	r2, [r7, #4]
 8000724:	4413      	add	r3, r2
 8000726:	881b      	ldrh	r3, [r3, #0]
 8000728:	4619      	mov	r1, r3
 800072a:	480e      	ldr	r0, [pc, #56]	; (8000764 <TakefromGeheugen+0xf8>)
 800072c:	f006 fd00 	bl	8007130 <iprintf>
				index++;
 8000730:	8b7b      	ldrh	r3, [r7, #26]
 8000732:	3301      	adds	r3, #1
 8000734:	837b      	strh	r3, [r7, #26]
			for(uint16_t i = plaatservoor; i < plaatserna; i++)
 8000736:	8b3b      	ldrh	r3, [r7, #24]
 8000738:	3301      	adds	r3, #1
 800073a:	833b      	strh	r3, [r7, #24]
 800073c:	8b3a      	ldrh	r2, [r7, #24]
 800073e:	8a7b      	ldrh	r3, [r7, #18]
 8000740:	429a      	cmp	r2, r3
 8000742:	d3e3      	bcc.n	800070c <TakefromGeheugen+0xa0>
			printf("\r\n");
 8000744:	4808      	ldr	r0, [pc, #32]	; (8000768 <TakefromGeheugen+0xfc>)
 8000746:	f006 fd79 	bl	800723c <puts>
}
 800074a:	bf00      	nop
 800074c:	3720      	adds	r7, #32
 800074e:	46bd      	mov	sp, r7
 8000750:	bd80      	pop	{r7, pc}
 8000752:	bf00      	nop
 8000754:	20004e30 	.word	0x20004e30
 8000758:	080083e4 	.word	0x080083e4
 800075c:	08008410 	.word	0x08008410
 8000760:	2000000c 	.word	0x2000000c
 8000764:	08008428 	.word	0x08008428
 8000768:	0800842c 	.word	0x0800842c

0800076c <whilelus>:
uint8_t button = 0;
uint8_t OldButton = 0;
uint8_t aanraak = 0;
uint16_t Xvalue = 160;
uint16_t Yvalue = 363;
void whilelus(){
 800076c:	b580      	push	{r7, lr}
 800076e:	b082      	sub	sp, #8
 8000770:	af02      	add	r7, sp, #8


	Touch(&aanraak, &Xvalue, &Yvalue);
 8000772:	4a2c      	ldr	r2, [pc, #176]	; (8000824 <whilelus+0xb8>)
 8000774:	492c      	ldr	r1, [pc, #176]	; (8000828 <whilelus+0xbc>)
 8000776:	482d      	ldr	r0, [pc, #180]	; (800082c <whilelus+0xc0>)
 8000778:	f000 ffdc 	bl	8001734 <Touch>
	ReadDevice(&device, &Xvalue, &Yvalue);
 800077c:	4a29      	ldr	r2, [pc, #164]	; (8000824 <whilelus+0xb8>)
 800077e:	492a      	ldr	r1, [pc, #168]	; (8000828 <whilelus+0xbc>)
 8000780:	482b      	ldr	r0, [pc, #172]	; (8000830 <whilelus+0xc4>)
 8000782:	f001 f859 	bl	8001838 <ReadDevice>
	if(device != OldDevice)
 8000786:	4b2a      	ldr	r3, [pc, #168]	; (8000830 <whilelus+0xc4>)
 8000788:	781a      	ldrb	r2, [r3, #0]
 800078a:	4b2a      	ldr	r3, [pc, #168]	; (8000834 <whilelus+0xc8>)
 800078c:	781b      	ldrb	r3, [r3, #0]
 800078e:	429a      	cmp	r2, r3
 8000790:	d00d      	beq.n	80007ae <whilelus+0x42>
	{
		OldDevice=device;
 8000792:	4b27      	ldr	r3, [pc, #156]	; (8000830 <whilelus+0xc4>)
 8000794:	781a      	ldrb	r2, [r3, #0]
 8000796:	4b27      	ldr	r3, [pc, #156]	; (8000834 <whilelus+0xc8>)
 8000798:	701a      	strb	r2, [r3, #0]
		DevicePressed(&device);
 800079a:	4825      	ldr	r0, [pc, #148]	; (8000830 <whilelus+0xc4>)
 800079c:	f000 fb5e 	bl	8000e5c <DevicePressed>
		Xvalue = 160; Yvalue = 363; //randomwaarde waar geen knop op staat
 80007a0:	4b21      	ldr	r3, [pc, #132]	; (8000828 <whilelus+0xbc>)
 80007a2:	22a0      	movs	r2, #160	; 0xa0
 80007a4:	801a      	strh	r2, [r3, #0]
 80007a6:	4b1f      	ldr	r3, [pc, #124]	; (8000824 <whilelus+0xb8>)
 80007a8:	f240 126b 	movw	r2, #363	; 0x16b
 80007ac:	801a      	strh	r2, [r3, #0]
	}
	if(device != 0)
 80007ae:	4b20      	ldr	r3, [pc, #128]	; (8000830 <whilelus+0xc4>)
 80007b0:	781b      	ldrb	r3, [r3, #0]
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d01e      	beq.n	80007f4 <whilelus+0x88>
	{
		ReadButton(&button, &Xvalue, &Yvalue);
 80007b6:	4a1b      	ldr	r2, [pc, #108]	; (8000824 <whilelus+0xb8>)
 80007b8:	491b      	ldr	r1, [pc, #108]	; (8000828 <whilelus+0xbc>)
 80007ba:	481f      	ldr	r0, [pc, #124]	; (8000838 <whilelus+0xcc>)
 80007bc:	f001 f896 	bl	80018ec <ReadButton>
		if(button != 0 && aanraak != 0)
 80007c0:	4b1d      	ldr	r3, [pc, #116]	; (8000838 <whilelus+0xcc>)
 80007c2:	781b      	ldrb	r3, [r3, #0]
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d015      	beq.n	80007f4 <whilelus+0x88>
 80007c8:	4b18      	ldr	r3, [pc, #96]	; (800082c <whilelus+0xc0>)
 80007ca:	781b      	ldrb	r3, [r3, #0]
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d011      	beq.n	80007f4 <whilelus+0x88>
		{
		buttonPressed(&device, &button, &aanraak, &Xvalue, &Yvalue);
 80007d0:	4b14      	ldr	r3, [pc, #80]	; (8000824 <whilelus+0xb8>)
 80007d2:	9300      	str	r3, [sp, #0]
 80007d4:	4b14      	ldr	r3, [pc, #80]	; (8000828 <whilelus+0xbc>)
 80007d6:	4a15      	ldr	r2, [pc, #84]	; (800082c <whilelus+0xc0>)
 80007d8:	4917      	ldr	r1, [pc, #92]	; (8000838 <whilelus+0xcc>)
 80007da:	4815      	ldr	r0, [pc, #84]	; (8000830 <whilelus+0xc4>)
 80007dc:	f000 fc7a 	bl	80010d4 <buttonPressed>
		button=0;
 80007e0:	4b15      	ldr	r3, [pc, #84]	; (8000838 <whilelus+0xcc>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	701a      	strb	r2, [r3, #0]
		Xvalue = 160; Yvalue = 363; //randomwaarde waar geen knop op staat
 80007e6:	4b10      	ldr	r3, [pc, #64]	; (8000828 <whilelus+0xbc>)
 80007e8:	22a0      	movs	r2, #160	; 0xa0
 80007ea:	801a      	strh	r2, [r3, #0]
 80007ec:	4b0d      	ldr	r3, [pc, #52]	; (8000824 <whilelus+0xb8>)
 80007ee:	f240 126b 	movw	r2, #363	; 0x16b
 80007f2:	801a      	strh	r2, [r3, #0]
	}




printf("device:%d button: %d   aanraak %d\r\n", device, button, aanraak);
 80007f4:	4b0e      	ldr	r3, [pc, #56]	; (8000830 <whilelus+0xc4>)
 80007f6:	781b      	ldrb	r3, [r3, #0]
 80007f8:	4619      	mov	r1, r3
 80007fa:	4b0f      	ldr	r3, [pc, #60]	; (8000838 <whilelus+0xcc>)
 80007fc:	781b      	ldrb	r3, [r3, #0]
 80007fe:	461a      	mov	r2, r3
 8000800:	4b0a      	ldr	r3, [pc, #40]	; (800082c <whilelus+0xc0>)
 8000802:	781b      	ldrb	r3, [r3, #0]
 8000804:	480d      	ldr	r0, [pc, #52]	; (800083c <whilelus+0xd0>)
 8000806:	f006 fc93 	bl	8007130 <iprintf>
printf("X:%d Y:%d ", Xvalue, Yvalue);
 800080a:	4b07      	ldr	r3, [pc, #28]	; (8000828 <whilelus+0xbc>)
 800080c:	881b      	ldrh	r3, [r3, #0]
 800080e:	4619      	mov	r1, r3
 8000810:	4b04      	ldr	r3, [pc, #16]	; (8000824 <whilelus+0xb8>)
 8000812:	881b      	ldrh	r3, [r3, #0]
 8000814:	461a      	mov	r2, r3
 8000816:	480a      	ldr	r0, [pc, #40]	; (8000840 <whilelus+0xd4>)
 8000818:	f006 fc8a 	bl	8007130 <iprintf>
}
 800081c:	bf00      	nop
 800081e:	46bd      	mov	sp, r7
 8000820:	bd80      	pop	{r7, pc}
 8000822:	bf00      	nop
 8000824:	20000004 	.word	0x20000004
 8000828:	20000002 	.word	0x20000002
 800082c:	20004f1f 	.word	0x20004f1f
 8000830:	20004f1c 	.word	0x20004f1c
 8000834:	20004f1d 	.word	0x20004f1d
 8000838:	20004f1e 	.word	0x20004f1e
 800083c:	08008430 	.word	0x08008430
 8000840:	08008454 	.word	0x08008454

08000844 <CS_HIGH>:
#define ILI9488_GREENYELLOW 	0xAFE5      /* 173, 255,  47 */
#define ILI9488_PINK        			0xF81F

/* Some Easy Functions */ 
void CS_HIGH() //High = The chip is not selected and not accessible pg23
{HAL_GPIO_WritePin(CS_Port, CS_Pin, 1);}
 8000844:	b580      	push	{r7, lr}
 8000846:	af00      	add	r7, sp, #0
 8000848:	2201      	movs	r2, #1
 800084a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800084e:	4802      	ldr	r0, [pc, #8]	; (8000858 <CS_HIGH+0x14>)
 8000850:	f002 f9ce 	bl	8002bf0 <HAL_GPIO_WritePin>
 8000854:	bf00      	nop
 8000856:	bd80      	pop	{r7, pc}
 8000858:	40021400 	.word	0x40021400

0800085c <CS_LOW>:
void CS_LOW()  //Low = The chip is selected and accessible pg23
{HAL_GPIO_WritePin(CS_Port, CS_Pin, 0);}
 800085c:	b580      	push	{r7, lr}
 800085e:	af00      	add	r7, sp, #0
 8000860:	2200      	movs	r2, #0
 8000862:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000866:	4802      	ldr	r0, [pc, #8]	; (8000870 <CS_LOW+0x14>)
 8000868:	f002 f9c2 	bl	8002bf0 <HAL_GPIO_WritePin>
 800086c:	bf00      	nop
 800086e:	bd80      	pop	{r7, pc}
 8000870:	40021400 	.word	0x40021400

08000874 <DC_HIGH>:
void DC_HIGH() //High = Parameter pg23
{HAL_GPIO_WritePin(DC_Port, DC_Pin, 1);}
 8000874:	b580      	push	{r7, lr}
 8000876:	af00      	add	r7, sp, #0
 8000878:	2201      	movs	r2, #1
 800087a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800087e:	4802      	ldr	r0, [pc, #8]	; (8000888 <DC_HIGH+0x14>)
 8000880:	f002 f9b6 	bl	8002bf0 <HAL_GPIO_WritePin>
 8000884:	bf00      	nop
 8000886:	bd80      	pop	{r7, pc}
 8000888:	40021400 	.word	0x40021400

0800088c <DC_LOW>:
void DC_LOW()  //Low = command pg23
{HAL_GPIO_WritePin(DC_Port, DC_Pin, 0);}
 800088c:	b580      	push	{r7, lr}
 800088e:	af00      	add	r7, sp, #0
 8000890:	2200      	movs	r2, #0
 8000892:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000896:	4802      	ldr	r0, [pc, #8]	; (80008a0 <DC_LOW+0x14>)
 8000898:	f002 f9aa 	bl	8002bf0 <HAL_GPIO_WritePin>
 800089c:	bf00      	nop
 800089e:	bd80      	pop	{r7, pc}
 80008a0:	40021400 	.word	0x40021400

080008a4 <RST_HIGH>:
void RST_HIGH() 
{HAL_GPIO_WritePin(RST_Port, RST_Pin, 1);}
 80008a4:	b580      	push	{r7, lr}
 80008a6:	af00      	add	r7, sp, #0
 80008a8:	2201      	movs	r2, #1
 80008aa:	f44f 7100 	mov.w	r1, #512	; 0x200
 80008ae:	4802      	ldr	r0, [pc, #8]	; (80008b8 <RST_HIGH+0x14>)
 80008b0:	f002 f99e 	bl	8002bf0 <HAL_GPIO_WritePin>
 80008b4:	bf00      	nop
 80008b6:	bd80      	pop	{r7, pc}
 80008b8:	40021400 	.word	0x40021400

080008bc <RST_LOW>:
void RST_LOW() //initialize with a low input pg23
{HAL_GPIO_WritePin(RST_Port, RST_Pin, 0);}
 80008bc:	b580      	push	{r7, lr}
 80008be:	af00      	add	r7, sp, #0
 80008c0:	2200      	movs	r2, #0
 80008c2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80008c6:	4802      	ldr	r0, [pc, #8]	; (80008d0 <RST_LOW+0x14>)
 80008c8:	f002 f992 	bl	8002bf0 <HAL_GPIO_WritePin>
 80008cc:	bf00      	nop
 80008ce:	bd80      	pop	{r7, pc}
 80008d0:	40021400 	.word	0x40021400

080008d4 <DisplayBegin>:

//#define TIM_1us htim2

void DisplayBegin(void)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	af00      	add	r7, sp, #0
	RST_LOW(); //initialize with a low input pg23
 80008d8:	f7ff fff0 	bl	80008bc <RST_LOW>
	HAL_Delay(500);
 80008dc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80008e0:	f001 fea4 	bl	800262c <HAL_Delay>
	RST_HIGH();
 80008e4:	f7ff ffde 	bl	80008a4 <RST_HIGH>
	HAL_Delay(500);
 80008e8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80008ec:	f001 fe9e 	bl	800262c <HAL_Delay>
	writecommand(0xE0);
 80008f0:	20e0      	movs	r0, #224	; 0xe0
 80008f2:	f000 f8bf 	bl	8000a74 <writecommand>
	writedata(0x00);
 80008f6:	2000      	movs	r0, #0
 80008f8:	f000 f8d8 	bl	8000aac <writedata>
	writedata(0x03);
 80008fc:	2003      	movs	r0, #3
 80008fe:	f000 f8d5 	bl	8000aac <writedata>
	writedata(0x09);
 8000902:	2009      	movs	r0, #9
 8000904:	f000 f8d2 	bl	8000aac <writedata>
	writedata(0x08);
 8000908:	2008      	movs	r0, #8
 800090a:	f000 f8cf 	bl	8000aac <writedata>
	writedata(0x16);
 800090e:	2016      	movs	r0, #22
 8000910:	f000 f8cc 	bl	8000aac <writedata>
	writedata(0x0A);
 8000914:	200a      	movs	r0, #10
 8000916:	f000 f8c9 	bl	8000aac <writedata>
	writedata(0x3F);
 800091a:	203f      	movs	r0, #63	; 0x3f
 800091c:	f000 f8c6 	bl	8000aac <writedata>
	writedata(0x78);
 8000920:	2078      	movs	r0, #120	; 0x78
 8000922:	f000 f8c3 	bl	8000aac <writedata>
	writedata(0x4C);
 8000926:	204c      	movs	r0, #76	; 0x4c
 8000928:	f000 f8c0 	bl	8000aac <writedata>
	writedata(0x09);
 800092c:	2009      	movs	r0, #9
 800092e:	f000 f8bd 	bl	8000aac <writedata>
	writedata(0x0A);
 8000932:	200a      	movs	r0, #10
 8000934:	f000 f8ba 	bl	8000aac <writedata>
	writedata(0x08);
 8000938:	2008      	movs	r0, #8
 800093a:	f000 f8b7 	bl	8000aac <writedata>
	writedata(0x16);
 800093e:	2016      	movs	r0, #22
 8000940:	f000 f8b4 	bl	8000aac <writedata>
	writedata(0x1A);
 8000944:	201a      	movs	r0, #26
 8000946:	f000 f8b1 	bl	8000aac <writedata>
	writedata(0x0F);
 800094a:	200f      	movs	r0, #15
 800094c:	f000 f8ae 	bl	8000aac <writedata>

	writecommand(0XE1);
 8000950:	20e1      	movs	r0, #225	; 0xe1
 8000952:	f000 f88f 	bl	8000a74 <writecommand>
	writedata(0x00);
 8000956:	2000      	movs	r0, #0
 8000958:	f000 f8a8 	bl	8000aac <writedata>
	writedata(0x16);
 800095c:	2016      	movs	r0, #22
 800095e:	f000 f8a5 	bl	8000aac <writedata>
	writedata(0x19);
 8000962:	2019      	movs	r0, #25
 8000964:	f000 f8a2 	bl	8000aac <writedata>
	writedata(0x03);
 8000968:	2003      	movs	r0, #3
 800096a:	f000 f89f 	bl	8000aac <writedata>
	writedata(0x0F);
 800096e:	200f      	movs	r0, #15
 8000970:	f000 f89c 	bl	8000aac <writedata>
	writedata(0x05);
 8000974:	2005      	movs	r0, #5
 8000976:	f000 f899 	bl	8000aac <writedata>
	writedata(0x32);
 800097a:	2032      	movs	r0, #50	; 0x32
 800097c:	f000 f896 	bl	8000aac <writedata>
	writedata(0x45);
 8000980:	2045      	movs	r0, #69	; 0x45
 8000982:	f000 f893 	bl	8000aac <writedata>
	writedata(0x46);
 8000986:	2046      	movs	r0, #70	; 0x46
 8000988:	f000 f890 	bl	8000aac <writedata>
	writedata(0x04);
 800098c:	2004      	movs	r0, #4
 800098e:	f000 f88d 	bl	8000aac <writedata>
	writedata(0x0E);
 8000992:	200e      	movs	r0, #14
 8000994:	f000 f88a 	bl	8000aac <writedata>
	writedata(0x0D);
 8000998:	200d      	movs	r0, #13
 800099a:	f000 f887 	bl	8000aac <writedata>
	writedata(0x35);
 800099e:	2035      	movs	r0, #53	; 0x35
 80009a0:	f000 f884 	bl	8000aac <writedata>
	writedata(0x37);
 80009a4:	2037      	movs	r0, #55	; 0x37
 80009a6:	f000 f881 	bl	8000aac <writedata>
	writedata(0x0F);
 80009aa:	200f      	movs	r0, #15
 80009ac:	f000 f87e 	bl	8000aac <writedata>

	writecommand(0XC0);      //Power Control 1 (pg 237)
 80009b0:	20c0      	movs	r0, #192	; 0xc0
 80009b2:	f000 f85f 	bl	8000a74 <writecommand>
							
	writedata(0x17);    //Vreg1out =  5V zie pg 237
 80009b6:	2017      	movs	r0, #23
 80009b8:	f000 f878 	bl	8000aac <writedata>
	writedata(0x15);    //Verg2out = -4.87V zie pg 237
 80009bc:	2015      	movs	r0, #21
 80009be:	f000 f875 	bl	8000aac <writedata>
							//	Input voltage from the set-up circuit (-6 to -4.5V).
							
							//Op de DFR0669 staat een LevelShifter, zodat het op 5V werkt.
							

	writecommand(0xC1);      //Power Control 2 (pg 239)
 80009c2:	20c1      	movs	r0, #193	; 0xc1
 80009c4:	f000 f856 	bl	8000a74 <writecommand>
	writedata(0x41);    //VGH,VGL
 80009c8:	2041      	movs	r0, #65	; 0x41
 80009ca:	f000 f86f 	bl	8000aac <writedata>
						// = 3'h1 = 001
						// 0100 0XXX 
						// 0100 0001 = 41h  (65 decimaal)
						

	writecommand(0xC5);      //VCOM control pg243
 80009ce:	20c5      	movs	r0, #197	; 0xc5
 80009d0:	f000 f850 	bl	8000a74 <writecommand>
	writedata(0x00);		 //1e parameter standaard 00h
 80009d4:	2000      	movs	r0, #0
 80009d6:	f000 f869 	bl	8000aac <writedata>
	writedata(0x12);    	 //VCOM = -1.71    |VCOM| x 2 = VREG = 3.42V
 80009da:	2012      	movs	r0, #18
 80009dc:	f000 f866 	bl	8000aac <writedata>
	writedata(0x80);		// ? 
 80009e0:	2080      	movs	r0, #128	; 0x80
 80009e2:	f000 f863 	bl	8000aac <writedata>

	writecommand(0x36);      //Memory Access pg192
 80009e6:	2036      	movs	r0, #54	; 0x36
 80009e8:	f000 f844 	bl	8000a74 <writecommand>
	writedata(0x48);		//MY = 0				//in vb 0x48
 80009ec:	2048      	movs	r0, #72	; 0x48
 80009ee:	f000 f85d 	bl	8000aac <writedata>
							//ML = 0
							//BGR = 0
							//MH = 0
							//=0h

	writecommand(0x3A);		// Interface Pixel Format (RGB 565 standaard 3Ah pg123
 80009f2:	203a      	movs	r0, #58	; 0x3a
 80009f4:	f000 f83e 	bl	8000a74 <writecommand>
	writedata(0x66); 	  	//pg 200 --> 16bits/pixel = 55 (decimal = 85)
 80009f8:	2066      	movs	r0, #102	; 0x66
 80009fa:	f000 f857 	bl	8000aac <writedata>
							//55 = 0101 0101

	writecommand(0XB0);      // Interface Mode Control pg219
 80009fe:	20b0      	movs	r0, #176	; 0xb0
 8000a00:	f000 f838 	bl	8000a74 <writecommand>
	writedata(0x80);     			 //SDO NOT USE
 8000a04:	2080      	movs	r0, #128	; 0x80
 8000a06:	f000 f851 	bl	8000aac <writedata>
									//1000 0000
									//High enable for RGB interface,
									//data fetched at the rising time,
									//and low level sync clock
									
	writecommand(0xB1);      //Frame rate pg 221
 8000a0a:	20b1      	movs	r0, #177	; 0xb1
 8000a0c:	f000 f832 	bl	8000a74 <writecommand>
	writedata(0xA0);    //60Hz      NOG UITREKENEN
 8000a10:	20a0      	movs	r0, #160	; 0xa0
 8000a12:	f000 f84b 	bl	8000aac <writedata>

	writecommand(0xB4);      //Display Inversion Control  pg 225
 8000a16:	20b4      	movs	r0, #180	; 0xb4
 8000a18:	f000 f82c 	bl	8000a74 <writecommand>
	writedata(0x02);    //2-dot inversion (standard)
 8000a1c:	2002      	movs	r0, #2
 8000a1e:	f000 f845 	bl	8000aac <writedata>

	writecommand(0XB6); //Display Function Control  RGB/MCU Interface Control pg228
 8000a22:	20b6      	movs	r0, #182	; 0xb6
 8000a24:	f000 f826 	bl	8000a74 <writecommand>

	writedata(0x02);    //MCU // 1e parameter standard    question Bypass= Memory or Shift register? 
 8000a28:	2002      	movs	r0, #2
 8000a2a:	f000 f83f 	bl	8000aac <writedata>
	writedata(0x02);    //Source,Gate scan direction so frames at 84ms
 8000a2e:	2002      	movs	r0, #2
 8000a30:	f000 f83c 	bl	8000aac <writedata>

	writecommand(0XE9);      // Set Image Function pg271 
 8000a34:	20e9      	movs	r0, #233	; 0xe9
 8000a36:	f000 f81d 	bl	8000a74 <writecommand>
	writedata(0x00);    // Disable 24 bit data
 8000a3a:	2000      	movs	r0, #0
 8000a3c:	f000 f836 	bl	8000aac <writedata>

	writecommand(0xF7);      // Adjust Control   pg 276
 8000a40:	20f7      	movs	r0, #247	; 0xf7
 8000a42:	f000 f817 	bl	8000a74 <writecommand>
	writedata(0xA9);  //standard 1e parameter
 8000a46:	20a9      	movs	r0, #169	; 0xa9
 8000a48:	f000 f830 	bl	8000aac <writedata>
	writedata(0x51);  //standard 2e parameter
 8000a4c:	2051      	movs	r0, #81	; 0x51
 8000a4e:	f000 f82d 	bl	8000aac <writedata>
	writedata(0x2C);  //standard 3e parameter
 8000a52:	202c      	movs	r0, #44	; 0x2c
 8000a54:	f000 f82a 	bl	8000aac <writedata>
	writedata(0x82);    // D7 stream, loose   //standard 4e parameter
 8000a58:	2082      	movs	r0, #130	; 0x82
 8000a5a:	f000 f827 	bl	8000aac <writedata>

	writecommand(Display_ExitSleep);    //Exit Sleep
 8000a5e:	2011      	movs	r0, #17
 8000a60:	f000 f808 	bl	8000a74 <writecommand>

	HAL_Delay(120);
 8000a64:	2078      	movs	r0, #120	; 0x78
 8000a66:	f001 fde1 	bl	800262c <HAL_Delay>

	writecommand(Display_On);    //Display on
 8000a6a:	2029      	movs	r0, #41	; 0x29
 8000a6c:	f000 f802 	bl	8000a74 <writecommand>


	
}
 8000a70:	bf00      	nop
 8000a72:	bd80      	pop	{r7, pc}

08000a74 <writecommand>:

void writecommand(uint8_t cmdo)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b084      	sub	sp, #16
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	71fb      	strb	r3, [r7, #7]
	uint8_t commando = cmdo;
 8000a7e:	79fb      	ldrb	r3, [r7, #7]
 8000a80:	73fb      	strb	r3, [r7, #15]
	DC_LOW(); //Low = command pg23
 8000a82:	f7ff ff03 	bl	800088c <DC_LOW>
	CS_LOW(); //The chip is selected and accessible pg23
 8000a86:	f7ff fee9 	bl	800085c <CS_LOW>
	HAL_SPI_Transmit(&mySPI, &commando, 1, HAL_MAX_DELAY); //Size = bytes
 8000a8a:	f107 010f 	add.w	r1, r7, #15
 8000a8e:	f04f 33ff 	mov.w	r3, #4294967295
 8000a92:	2201      	movs	r2, #1
 8000a94:	4804      	ldr	r0, [pc, #16]	; (8000aa8 <writecommand+0x34>)
 8000a96:	f004 fa62 	bl	8004f5e <HAL_SPI_Transmit>
	CS_HIGH(); //The chip is not selected and not accessible pg23
 8000a9a:	f7ff fed3 	bl	8000844 <CS_HIGH>
	


}
 8000a9e:	bf00      	nop
 8000aa0:	3710      	adds	r7, #16
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bd80      	pop	{r7, pc}
 8000aa6:	bf00      	nop
 8000aa8:	20005360 	.word	0x20005360

08000aac <writedata>:
void writedata(uint8_t dta )
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b084      	sub	sp, #16
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	71fb      	strb	r3, [r7, #7]
	uint8_t data = dta;
 8000ab6:	79fb      	ldrb	r3, [r7, #7]
 8000ab8:	73fb      	strb	r3, [r7, #15]
	DC_HIGH(); //High = Parameter pg23
 8000aba:	f7ff fedb 	bl	8000874 <DC_HIGH>
	CS_LOW(); //The chip is selected and accessible pg23
 8000abe:	f7ff fecd 	bl	800085c <CS_LOW>
	HAL_SPI_Transmit(&mySPI, &data, 1, HAL_MAX_DELAY); //Size = bytes
 8000ac2:	f107 010f 	add.w	r1, r7, #15
 8000ac6:	f04f 33ff 	mov.w	r3, #4294967295
 8000aca:	2201      	movs	r2, #1
 8000acc:	4804      	ldr	r0, [pc, #16]	; (8000ae0 <writedata+0x34>)
 8000ace:	f004 fa46 	bl	8004f5e <HAL_SPI_Transmit>
	CS_HIGH(); //The chip is not selected and not accessible pg23
 8000ad2:	f7ff feb7 	bl	8000844 <CS_HIGH>
	//als ik het scherm uitschakel, krijg ik ook geen errors
	//wel leuk om optimistisch te zijn, maar dit doet niks
	//uint8_t StateSpiHulp = HAL_SPI_GetState(&hspi2);
	//uint8_t ErrorSpiHulp = HAL_SPI_GetError(&hspi2);
	//printf("    data: 0x %x Spi_State:%d Error: %d\r\n", dta, StateSpiHulp, ErrorSpiHulp);
}
 8000ad6:	bf00      	nop
 8000ad8:	3710      	adds	r7, #16
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bd80      	pop	{r7, pc}
 8000ade:	bf00      	nop
 8000ae0:	20005360 	.word	0x20005360

08000ae4 <setAddrWindow>:
void setAddrWindow(uint16_t x0,uint16_t y0,uint16_t x1,uint16_t y1)
{
 8000ae4:	b590      	push	{r4, r7, lr}
 8000ae6:	b083      	sub	sp, #12
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	4604      	mov	r4, r0
 8000aec:	4608      	mov	r0, r1
 8000aee:	4611      	mov	r1, r2
 8000af0:	461a      	mov	r2, r3
 8000af2:	4623      	mov	r3, r4
 8000af4:	80fb      	strh	r3, [r7, #6]
 8000af6:	4603      	mov	r3, r0
 8000af8:	80bb      	strh	r3, [r7, #4]
 8000afa:	460b      	mov	r3, r1
 8000afc:	807b      	strh	r3, [r7, #2]
 8000afe:	4613      	mov	r3, r2
 8000b00:	803b      	strh	r3, [r7, #0]
	//pg 175 -> Column Address Set = 2Ah
	writecommand(0x2A);
 8000b02:	202a      	movs	r0, #42	; 0x2a
 8000b04:	f7ff ffb6 	bl	8000a74 <writecommand>
	
	writedata(x0 >> 8); //?
 8000b08:	88fb      	ldrh	r3, [r7, #6]
 8000b0a:	0a1b      	lsrs	r3, r3, #8
 8000b0c:	b29b      	uxth	r3, r3
 8000b0e:	b2db      	uxtb	r3, r3
 8000b10:	4618      	mov	r0, r3
 8000b12:	f7ff ffcb 	bl	8000aac <writedata>
	writedata(x0 & 0xFF);     // XSTART ?
 8000b16:	88fb      	ldrh	r3, [r7, #6]
 8000b18:	b2db      	uxtb	r3, r3
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	f7ff ffc6 	bl	8000aac <writedata>
	writedata(x1 >> 8); //?
 8000b20:	887b      	ldrh	r3, [r7, #2]
 8000b22:	0a1b      	lsrs	r3, r3, #8
 8000b24:	b29b      	uxth	r3, r3
 8000b26:	b2db      	uxtb	r3, r3
 8000b28:	4618      	mov	r0, r3
 8000b2a:	f7ff ffbf 	bl	8000aac <writedata>
	writedata(x1 & 0xFF);     // XEND //?
 8000b2e:	887b      	ldrh	r3, [r7, #2]
 8000b30:	b2db      	uxtb	r3, r3
 8000b32:	4618      	mov	r0, r3
 8000b34:	f7ff ffba 	bl	8000aac <writedata>
	
	//pg 177 -> Page Address Set = 2Bh = Row Address Set 
	writecommand(0x2B); // Row addr set
 8000b38:	202b      	movs	r0, #43	; 0x2b
 8000b3a:	f7ff ff9b 	bl	8000a74 <writecommand>
	writedata(y0 >> 8); //?
 8000b3e:	88bb      	ldrh	r3, [r7, #4]
 8000b40:	0a1b      	lsrs	r3, r3, #8
 8000b42:	b29b      	uxth	r3, r3
 8000b44:	b2db      	uxtb	r3, r3
 8000b46:	4618      	mov	r0, r3
 8000b48:	f7ff ffb0 	bl	8000aac <writedata>
	writedata(y0 & 0xff);     // YSTART   ?
 8000b4c:	88bb      	ldrh	r3, [r7, #4]
 8000b4e:	b2db      	uxtb	r3, r3
 8000b50:	4618      	mov	r0, r3
 8000b52:	f7ff ffab 	bl	8000aac <writedata>
	writedata(y1 >> 8); // ?
 8000b56:	883b      	ldrh	r3, [r7, #0]
 8000b58:	0a1b      	lsrs	r3, r3, #8
 8000b5a:	b29b      	uxth	r3, r3
 8000b5c:	b2db      	uxtb	r3, r3
 8000b5e:	4618      	mov	r0, r3
 8000b60:	f7ff ffa4 	bl	8000aac <writedata>
	writedata(y1 & 0xff);     // YEND //?
 8000b64:	883b      	ldrh	r3, [r7, #0]
 8000b66:	b2db      	uxtb	r3, r3
 8000b68:	4618      	mov	r0, r3
 8000b6a:	f7ff ff9f 	bl	8000aac <writedata>
	writecommand(Display_Write_To_RAM);
 8000b6e:	202c      	movs	r0, #44	; 0x2c
 8000b70:	f7ff ff80 	bl	8000a74 <writecommand>
	
}
 8000b74:	bf00      	nop
 8000b76:	370c      	adds	r7, #12
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	bd90      	pop	{r4, r7, pc}

08000b7c <drawPixel>:
void drawPixel(uint16_t x, uint16_t y, uint16_t color)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b082      	sub	sp, #8
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	4603      	mov	r3, r0
 8000b84:	80fb      	strh	r3, [r7, #6]
 8000b86:	460b      	mov	r3, r1
 8000b88:	80bb      	strh	r3, [r7, #4]
 8000b8a:	4613      	mov	r3, r2
 8000b8c:	807b      	strh	r3, [r7, #2]
	setAddrWindow(x, y, x + 1, y + 1);
 8000b8e:	88fb      	ldrh	r3, [r7, #6]
 8000b90:	3301      	adds	r3, #1
 8000b92:	b29a      	uxth	r2, r3
 8000b94:	88bb      	ldrh	r3, [r7, #4]
 8000b96:	3301      	adds	r3, #1
 8000b98:	b29b      	uxth	r3, r3
 8000b9a:	88b9      	ldrh	r1, [r7, #4]
 8000b9c:	88f8      	ldrh	r0, [r7, #6]
 8000b9e:	f7ff ffa1 	bl	8000ae4 <setAddrWindow>
	DC_HIGH();
 8000ba2:	f7ff fe67 	bl	8000874 <DC_HIGH>
	CS_LOW();
 8000ba6:	f7ff fe59 	bl	800085c <CS_LOW>
	write16BitColor(color);
 8000baa:	887b      	ldrh	r3, [r7, #2]
 8000bac:	4618      	mov	r0, r3
 8000bae:	f000 f8c5 	bl	8000d3c <write16BitColor>
	CS_HIGH();
 8000bb2:	f7ff fe47 	bl	8000844 <CS_HIGH>
}
 8000bb6:	bf00      	nop
 8000bb8:	3708      	adds	r7, #8
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bd80      	pop	{r7, pc}

08000bbe <DrawRectangle>:
void DrawRectangle(uint16_t x, uint16_t y, uint16_t h, uint16_t w, uint16_t color, uint16_t contentcolor, uint8_t border)
{
 8000bbe:	b590      	push	{r4, r7, lr}
 8000bc0:	b089      	sub	sp, #36	; 0x24
 8000bc2:	af02      	add	r7, sp, #8
 8000bc4:	4604      	mov	r4, r0
 8000bc6:	4608      	mov	r0, r1
 8000bc8:	4611      	mov	r1, r2
 8000bca:	461a      	mov	r2, r3
 8000bcc:	4623      	mov	r3, r4
 8000bce:	80fb      	strh	r3, [r7, #6]
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	80bb      	strh	r3, [r7, #4]
 8000bd4:	460b      	mov	r3, r1
 8000bd6:	807b      	strh	r3, [r7, #2]
 8000bd8:	4613      	mov	r3, r2
 8000bda:	803b      	strh	r3, [r7, #0]

	//lijntje horizontaal 1
	for(uint8_t j = 0; j <= border; j++)
 8000bdc:	2300      	movs	r3, #0
 8000bde:	75fb      	strb	r3, [r7, #23]
 8000be0:	e018      	b.n	8000c14 <DrawRectangle+0x56>
	{
		for(uint16_t i = x; i <= (x+w); i++)
 8000be2:	88fb      	ldrh	r3, [r7, #6]
 8000be4:	82bb      	strh	r3, [r7, #20]
 8000be6:	e00c      	b.n	8000c02 <DrawRectangle+0x44>
		{
			drawPixel(i, y+j, color);
 8000be8:	7dfb      	ldrb	r3, [r7, #23]
 8000bea:	b29a      	uxth	r2, r3
 8000bec:	88bb      	ldrh	r3, [r7, #4]
 8000bee:	4413      	add	r3, r2
 8000bf0:	b299      	uxth	r1, r3
 8000bf2:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8000bf4:	8abb      	ldrh	r3, [r7, #20]
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	f7ff ffc0 	bl	8000b7c <drawPixel>
		for(uint16_t i = x; i <= (x+w); i++)
 8000bfc:	8abb      	ldrh	r3, [r7, #20]
 8000bfe:	3301      	adds	r3, #1
 8000c00:	82bb      	strh	r3, [r7, #20]
 8000c02:	8aba      	ldrh	r2, [r7, #20]
 8000c04:	88f9      	ldrh	r1, [r7, #6]
 8000c06:	883b      	ldrh	r3, [r7, #0]
 8000c08:	440b      	add	r3, r1
 8000c0a:	429a      	cmp	r2, r3
 8000c0c:	ddec      	ble.n	8000be8 <DrawRectangle+0x2a>
	for(uint8_t j = 0; j <= border; j++)
 8000c0e:	7dfb      	ldrb	r3, [r7, #23]
 8000c10:	3301      	adds	r3, #1
 8000c12:	75fb      	strb	r3, [r7, #23]
 8000c14:	7dfa      	ldrb	r2, [r7, #23]
 8000c16:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8000c1a:	429a      	cmp	r2, r3
 8000c1c:	d9e1      	bls.n	8000be2 <DrawRectangle+0x24>
		}
	}

//lijntje verticaal 1
for(uint8_t j = 0; j <= border; j++)
 8000c1e:	2300      	movs	r3, #0
 8000c20:	74fb      	strb	r3, [r7, #19]
 8000c22:	e018      	b.n	8000c56 <DrawRectangle+0x98>
{
	for(uint16_t i = y; i <= (y+h); i++)
 8000c24:	88bb      	ldrh	r3, [r7, #4]
 8000c26:	823b      	strh	r3, [r7, #16]
 8000c28:	e00c      	b.n	8000c44 <DrawRectangle+0x86>
	{
		drawPixel(x+j, i, color);
 8000c2a:	7cfb      	ldrb	r3, [r7, #19]
 8000c2c:	b29a      	uxth	r2, r3
 8000c2e:	88fb      	ldrh	r3, [r7, #6]
 8000c30:	4413      	add	r3, r2
 8000c32:	b29b      	uxth	r3, r3
 8000c34:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8000c36:	8a39      	ldrh	r1, [r7, #16]
 8000c38:	4618      	mov	r0, r3
 8000c3a:	f7ff ff9f 	bl	8000b7c <drawPixel>
	for(uint16_t i = y; i <= (y+h); i++)
 8000c3e:	8a3b      	ldrh	r3, [r7, #16]
 8000c40:	3301      	adds	r3, #1
 8000c42:	823b      	strh	r3, [r7, #16]
 8000c44:	8a3a      	ldrh	r2, [r7, #16]
 8000c46:	88b9      	ldrh	r1, [r7, #4]
 8000c48:	887b      	ldrh	r3, [r7, #2]
 8000c4a:	440b      	add	r3, r1
 8000c4c:	429a      	cmp	r2, r3
 8000c4e:	ddec      	ble.n	8000c2a <DrawRectangle+0x6c>
for(uint8_t j = 0; j <= border; j++)
 8000c50:	7cfb      	ldrb	r3, [r7, #19]
 8000c52:	3301      	adds	r3, #1
 8000c54:	74fb      	strb	r3, [r7, #19]
 8000c56:	7cfa      	ldrb	r2, [r7, #19]
 8000c58:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8000c5c:	429a      	cmp	r2, r3
 8000c5e:	d9e1      	bls.n	8000c24 <DrawRectangle+0x66>
	}
}
//lijntje verticaal 2
for(uint8_t j = 0; j <= border; j++)
 8000c60:	2300      	movs	r3, #0
 8000c62:	73fb      	strb	r3, [r7, #15]
 8000c64:	e01b      	b.n	8000c9e <DrawRectangle+0xe0>
{
	for(uint16_t i = y; i <= (y+h); i++)
 8000c66:	88bb      	ldrh	r3, [r7, #4]
 8000c68:	81bb      	strh	r3, [r7, #12]
 8000c6a:	e00f      	b.n	8000c8c <DrawRectangle+0xce>
	{
		drawPixel((x+w)-j, i, color);
 8000c6c:	88fa      	ldrh	r2, [r7, #6]
 8000c6e:	883b      	ldrh	r3, [r7, #0]
 8000c70:	4413      	add	r3, r2
 8000c72:	b29a      	uxth	r2, r3
 8000c74:	7bfb      	ldrb	r3, [r7, #15]
 8000c76:	b29b      	uxth	r3, r3
 8000c78:	1ad3      	subs	r3, r2, r3
 8000c7a:	b29b      	uxth	r3, r3
 8000c7c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8000c7e:	89b9      	ldrh	r1, [r7, #12]
 8000c80:	4618      	mov	r0, r3
 8000c82:	f7ff ff7b 	bl	8000b7c <drawPixel>
	for(uint16_t i = y; i <= (y+h); i++)
 8000c86:	89bb      	ldrh	r3, [r7, #12]
 8000c88:	3301      	adds	r3, #1
 8000c8a:	81bb      	strh	r3, [r7, #12]
 8000c8c:	89ba      	ldrh	r2, [r7, #12]
 8000c8e:	88b9      	ldrh	r1, [r7, #4]
 8000c90:	887b      	ldrh	r3, [r7, #2]
 8000c92:	440b      	add	r3, r1
 8000c94:	429a      	cmp	r2, r3
 8000c96:	dde9      	ble.n	8000c6c <DrawRectangle+0xae>
for(uint8_t j = 0; j <= border; j++)
 8000c98:	7bfb      	ldrb	r3, [r7, #15]
 8000c9a:	3301      	adds	r3, #1
 8000c9c:	73fb      	strb	r3, [r7, #15]
 8000c9e:	7bfa      	ldrb	r2, [r7, #15]
 8000ca0:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8000ca4:	429a      	cmp	r2, r3
 8000ca6:	d9de      	bls.n	8000c66 <DrawRectangle+0xa8>
	}
}

//lijntje horizontaal 2
for(uint8_t j = 0; j <= border; j++)
 8000ca8:	2300      	movs	r3, #0
 8000caa:	72fb      	strb	r3, [r7, #11]
 8000cac:	e01b      	b.n	8000ce6 <DrawRectangle+0x128>
{
	for(uint16_t i = x; i <= (x+w); i++)
 8000cae:	88fb      	ldrh	r3, [r7, #6]
 8000cb0:	813b      	strh	r3, [r7, #8]
 8000cb2:	e00f      	b.n	8000cd4 <DrawRectangle+0x116>
	{
		drawPixel(i, (y+h)-j, color);
 8000cb4:	88ba      	ldrh	r2, [r7, #4]
 8000cb6:	887b      	ldrh	r3, [r7, #2]
 8000cb8:	4413      	add	r3, r2
 8000cba:	b29a      	uxth	r2, r3
 8000cbc:	7afb      	ldrb	r3, [r7, #11]
 8000cbe:	b29b      	uxth	r3, r3
 8000cc0:	1ad3      	subs	r3, r2, r3
 8000cc2:	b299      	uxth	r1, r3
 8000cc4:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8000cc6:	893b      	ldrh	r3, [r7, #8]
 8000cc8:	4618      	mov	r0, r3
 8000cca:	f7ff ff57 	bl	8000b7c <drawPixel>
	for(uint16_t i = x; i <= (x+w); i++)
 8000cce:	893b      	ldrh	r3, [r7, #8]
 8000cd0:	3301      	adds	r3, #1
 8000cd2:	813b      	strh	r3, [r7, #8]
 8000cd4:	893a      	ldrh	r2, [r7, #8]
 8000cd6:	88f9      	ldrh	r1, [r7, #6]
 8000cd8:	883b      	ldrh	r3, [r7, #0]
 8000cda:	440b      	add	r3, r1
 8000cdc:	429a      	cmp	r2, r3
 8000cde:	dde9      	ble.n	8000cb4 <DrawRectangle+0xf6>
for(uint8_t j = 0; j <= border; j++)
 8000ce0:	7afb      	ldrb	r3, [r7, #11]
 8000ce2:	3301      	adds	r3, #1
 8000ce4:	72fb      	strb	r3, [r7, #11]
 8000ce6:	7afa      	ldrb	r2, [r7, #11]
 8000ce8:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8000cec:	429a      	cmp	r2, r3
 8000cee:	d9de      	bls.n	8000cae <DrawRectangle+0xf0>
	}
}
//contentcolor
fillRect(x+border, y+border, w-(border*2), h-(border*2), contentcolor);
 8000cf0:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8000cf4:	b29a      	uxth	r2, r3
 8000cf6:	88fb      	ldrh	r3, [r7, #6]
 8000cf8:	4413      	add	r3, r2
 8000cfa:	b298      	uxth	r0, r3
 8000cfc:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8000d00:	b29a      	uxth	r2, r3
 8000d02:	88bb      	ldrh	r3, [r7, #4]
 8000d04:	4413      	add	r3, r2
 8000d06:	b299      	uxth	r1, r3
 8000d08:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8000d0c:	b29b      	uxth	r3, r3
 8000d0e:	005b      	lsls	r3, r3, #1
 8000d10:	b29b      	uxth	r3, r3
 8000d12:	883a      	ldrh	r2, [r7, #0]
 8000d14:	1ad3      	subs	r3, r2, r3
 8000d16:	b29c      	uxth	r4, r3
 8000d18:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8000d1c:	b29b      	uxth	r3, r3
 8000d1e:	005b      	lsls	r3, r3, #1
 8000d20:	b29b      	uxth	r3, r3
 8000d22:	887a      	ldrh	r2, [r7, #2]
 8000d24:	1ad3      	subs	r3, r2, r3
 8000d26:	b29a      	uxth	r2, r3
 8000d28:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8000d2a:	9300      	str	r3, [sp, #0]
 8000d2c:	4613      	mov	r3, r2
 8000d2e:	4622      	mov	r2, r4
 8000d30:	f000 f82c 	bl	8000d8c <fillRect>



}
 8000d34:	bf00      	nop
 8000d36:	371c      	adds	r7, #28
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	bd90      	pop	{r4, r7, pc}

08000d3c <write16BitColor>:
void DrawVolumebuttonDown()
{

}

void write16BitColor(uint16_t color){
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b084      	sub	sp, #16
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	4603      	mov	r3, r0
 8000d44:	80fb      	strh	r3, [r7, #6]
	//565  = rrrr rggg gggb bbbb
	//F800 = 1111 1000 0000 0000 //11 nullekes
	//07E0 = 0000 0111 1110 0000 //5 nulleks
	//001F = 0000 0000 0001 1111
	 uint8_t r = (color >> 8) & 0Xf8; //& 0xF800) >> 11;
 8000d46:	88fb      	ldrh	r3, [r7, #6]
 8000d48:	0a1b      	lsrs	r3, r3, #8
 8000d4a:	b29b      	uxth	r3, r3
 8000d4c:	b2db      	uxtb	r3, r3
 8000d4e:	f023 0307 	bic.w	r3, r3, #7
 8000d52:	73fb      	strb	r3, [r7, #15]
	 uint8_t g = (color >> 3) & 0Xfc; //& 0x07E0) >> 5;
 8000d54:	88fb      	ldrh	r3, [r7, #6]
 8000d56:	08db      	lsrs	r3, r3, #3
 8000d58:	b29b      	uxth	r3, r3
 8000d5a:	b2db      	uxtb	r3, r3
 8000d5c:	f023 0303 	bic.w	r3, r3, #3
 8000d60:	73bb      	strb	r3, [r7, #14]
	 uint8_t b = (color <<3); //& 0x001F;
 8000d62:	88fb      	ldrh	r3, [r7, #6]
 8000d64:	b2db      	uxtb	r3, r3
 8000d66:	00db      	lsls	r3, r3, #3
 8000d68:	737b      	strb	r3, [r7, #13]
	 //2^6 = 64  (0 tot 63)
	 //2^5 = 32 (0 tot 31)
	  //r = (r * 255) / 31;
	  //g = (g * 255) / 63;
	  //b = (b * 255) / 31;
	 writedata(r);
 8000d6a:	7bfb      	ldrb	r3, [r7, #15]
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	f7ff fe9d 	bl	8000aac <writedata>
	 writedata(g);
 8000d72:	7bbb      	ldrb	r3, [r7, #14]
 8000d74:	4618      	mov	r0, r3
 8000d76:	f7ff fe99 	bl	8000aac <writedata>
	 writedata(b);
 8000d7a:	7b7b      	ldrb	r3, [r7, #13]
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	f7ff fe95 	bl	8000aac <writedata>
	  //HAL_SPI_Transmit(&mySPI, &r, 1, HAL_MAX_DELAY); //Size = bytes
	  //HAL_SPI_Transmit(&mySPI, &g, 1, HAL_MAX_DELAY); //Size = bytes
	  //HAL_SPI_Transmit(&mySPI, &b, 1, HAL_MAX_DELAY); //Size = bytes
}
 8000d82:	bf00      	nop
 8000d84:	3710      	adds	r7, #16
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bd80      	pop	{r7, pc}
	...

08000d8c <fillRect>:



}
void fillRect(uint16_t x, uint16_t y , uint16_t w , uint16_t h, uint16_t color)
{
 8000d8c:	b590      	push	{r4, r7, lr}
 8000d8e:	b083      	sub	sp, #12
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	4604      	mov	r4, r0
 8000d94:	4608      	mov	r0, r1
 8000d96:	4611      	mov	r1, r2
 8000d98:	461a      	mov	r2, r3
 8000d9a:	4623      	mov	r3, r4
 8000d9c:	80fb      	strh	r3, [r7, #6]
 8000d9e:	4603      	mov	r3, r0
 8000da0:	80bb      	strh	r3, [r7, #4]
 8000da2:	460b      	mov	r3, r1
 8000da4:	807b      	strh	r3, [r7, #2]
 8000da6:	4613      	mov	r3, r2
 8000da8:	803b      	strh	r3, [r7, #0]
	if ((x >= Display_width) || (y >= Display_height))
 8000daa:	4b2a      	ldr	r3, [pc, #168]	; (8000e54 <fillRect+0xc8>)
 8000dac:	881b      	ldrh	r3, [r3, #0]
 8000dae:	88fa      	ldrh	r2, [r7, #6]
 8000db0:	429a      	cmp	r2, r3
 8000db2:	d24a      	bcs.n	8000e4a <fillRect+0xbe>
 8000db4:	4b28      	ldr	r3, [pc, #160]	; (8000e58 <fillRect+0xcc>)
 8000db6:	881b      	ldrh	r3, [r3, #0]
 8000db8:	88ba      	ldrh	r2, [r7, #4]
 8000dba:	429a      	cmp	r2, r3
 8000dbc:	d245      	bcs.n	8000e4a <fillRect+0xbe>
		return;
	if ((x + w - 1) >= Display_width)
 8000dbe:	88fa      	ldrh	r2, [r7, #6]
 8000dc0:	887b      	ldrh	r3, [r7, #2]
 8000dc2:	4413      	add	r3, r2
 8000dc4:	4a23      	ldr	r2, [pc, #140]	; (8000e54 <fillRect+0xc8>)
 8000dc6:	8812      	ldrh	r2, [r2, #0]
 8000dc8:	4293      	cmp	r3, r2
 8000dca:	dd04      	ble.n	8000dd6 <fillRect+0x4a>
		w = Display_width - x;
 8000dcc:	4b21      	ldr	r3, [pc, #132]	; (8000e54 <fillRect+0xc8>)
 8000dce:	881a      	ldrh	r2, [r3, #0]
 8000dd0:	88fb      	ldrh	r3, [r7, #6]
 8000dd2:	1ad3      	subs	r3, r2, r3
 8000dd4:	807b      	strh	r3, [r7, #2]
	if ((y + h - 1) >= Display_height)
 8000dd6:	88ba      	ldrh	r2, [r7, #4]
 8000dd8:	883b      	ldrh	r3, [r7, #0]
 8000dda:	4413      	add	r3, r2
 8000ddc:	4a1e      	ldr	r2, [pc, #120]	; (8000e58 <fillRect+0xcc>)
 8000dde:	8812      	ldrh	r2, [r2, #0]
 8000de0:	4293      	cmp	r3, r2
 8000de2:	dd04      	ble.n	8000dee <fillRect+0x62>
		h = Display_height - y;
 8000de4:	4b1c      	ldr	r3, [pc, #112]	; (8000e58 <fillRect+0xcc>)
 8000de6:	881a      	ldrh	r2, [r3, #0]
 8000de8:	88bb      	ldrh	r3, [r7, #4]
 8000dea:	1ad3      	subs	r3, r2, r3
 8000dec:	803b      	strh	r3, [r7, #0]

	setAddrWindow(x, y, x + w - 1, y + h - 1);
 8000dee:	88fa      	ldrh	r2, [r7, #6]
 8000df0:	887b      	ldrh	r3, [r7, #2]
 8000df2:	4413      	add	r3, r2
 8000df4:	b29b      	uxth	r3, r3
 8000df6:	3b01      	subs	r3, #1
 8000df8:	b29c      	uxth	r4, r3
 8000dfa:	88ba      	ldrh	r2, [r7, #4]
 8000dfc:	883b      	ldrh	r3, [r7, #0]
 8000dfe:	4413      	add	r3, r2
 8000e00:	b29b      	uxth	r3, r3
 8000e02:	3b01      	subs	r3, #1
 8000e04:	b29b      	uxth	r3, r3
 8000e06:	88b9      	ldrh	r1, [r7, #4]
 8000e08:	88f8      	ldrh	r0, [r7, #6]
 8000e0a:	4622      	mov	r2, r4
 8000e0c:	f7ff fe6a 	bl	8000ae4 <setAddrWindow>

	DC_HIGH();
 8000e10:	f7ff fd30 	bl	8000874 <DC_HIGH>
	CS_LOW();
 8000e14:	f7ff fd22 	bl	800085c <CS_LOW>

	for (y = h; y > 0; y--) {
 8000e18:	883b      	ldrh	r3, [r7, #0]
 8000e1a:	80bb      	strh	r3, [r7, #4]
 8000e1c:	e00f      	b.n	8000e3e <fillRect+0xb2>
		for (x = w; x > 0; x--) {
 8000e1e:	887b      	ldrh	r3, [r7, #2]
 8000e20:	80fb      	strh	r3, [r7, #6]
 8000e22:	e006      	b.n	8000e32 <fillRect+0xa6>

			write16BitColor(color);
 8000e24:	8b3b      	ldrh	r3, [r7, #24]
 8000e26:	4618      	mov	r0, r3
 8000e28:	f7ff ff88 	bl	8000d3c <write16BitColor>
		for (x = w; x > 0; x--) {
 8000e2c:	88fb      	ldrh	r3, [r7, #6]
 8000e2e:	3b01      	subs	r3, #1
 8000e30:	80fb      	strh	r3, [r7, #6]
 8000e32:	88fb      	ldrh	r3, [r7, #6]
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d1f5      	bne.n	8000e24 <fillRect+0x98>
	for (y = h; y > 0; y--) {
 8000e38:	88bb      	ldrh	r3, [r7, #4]
 8000e3a:	3b01      	subs	r3, #1
 8000e3c:	80bb      	strh	r3, [r7, #4]
 8000e3e:	88bb      	ldrh	r3, [r7, #4]
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d1ec      	bne.n	8000e1e <fillRect+0x92>
		}
	}

	CS_HIGH();
 8000e44:	f7ff fcfe 	bl	8000844 <CS_HIGH>
 8000e48:	e000      	b.n	8000e4c <fillRect+0xc0>
		return;
 8000e4a:	bf00      	nop



}
 8000e4c:	370c      	adds	r7, #12
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bd90      	pop	{r4, r7, pc}
 8000e52:	bf00      	nop
 8000e54:	20000006 	.word	0x20000006
 8000e58:	20000008 	.word	0x20000008

08000e5c <DevicePressed>:


void DevicePressed(uint8_t *apparaat)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b088      	sub	sp, #32
 8000e60:	af04      	add	r7, sp, #16
 8000e62:	6078      	str	r0, [r7, #4]
	uint16_t color;
	uint16_t contentcolor;
	uint8_t device = *apparaat;
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	781b      	ldrb	r3, [r3, #0]
 8000e68:	72bb      	strb	r3, [r7, #10]
	switch(device)
 8000e6a:	7abb      	ldrb	r3, [r7, #10]
 8000e6c:	3b01      	subs	r3, #1
 8000e6e:	2b03      	cmp	r3, #3
 8000e70:	d819      	bhi.n	8000ea6 <DevicePressed+0x4a>
 8000e72:	a201      	add	r2, pc, #4	; (adr r2, 8000e78 <DevicePressed+0x1c>)
 8000e74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e78:	08000e89 	.word	0x08000e89
 8000e7c:	08000e8f 	.word	0x08000e8f
 8000e80:	08000e97 	.word	0x08000e97
 8000e84:	08000e9f 	.word	0x08000e9f
	{
	case 1:
		color = ILI9488_BLUE;
 8000e88:	231f      	movs	r3, #31
 8000e8a:	81fb      	strh	r3, [r7, #14]
		break;
 8000e8c:	e00c      	b.n	8000ea8 <DevicePressed+0x4c>
	case 2:
		color = ILI9488_YELLOW;
 8000e8e:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8000e92:	81fb      	strh	r3, [r7, #14]
		break;
 8000e94:	e008      	b.n	8000ea8 <DevicePressed+0x4c>
	case 3:
		color = ILI9488_GREEN;
 8000e96:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8000e9a:	81fb      	strh	r3, [r7, #14]
		break;
 8000e9c:	e004      	b.n	8000ea8 <DevicePressed+0x4c>
	case 4:
		color = ILI9488_WHITE;
 8000e9e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000ea2:	81fb      	strh	r3, [r7, #14]
		break;
 8000ea4:	e000      	b.n	8000ea8 <DevicePressed+0x4c>
	default:
		break;
 8000ea6:	bf00      	nop
	}
	for(uint8_t knop = 1; knop <= 14; knop++)
 8000ea8:	2301      	movs	r3, #1
 8000eaa:	72fb      	strb	r3, [r7, #11]
 8000eac:	e107      	b.n	80010be <DevicePressed+0x262>
	{
		if(knop <= 12)
 8000eae:	7afb      	ldrb	r3, [r7, #11]
 8000eb0:	2b0c      	cmp	r3, #12
 8000eb2:	d81d      	bhi.n	8000ef0 <DevicePressed+0x94>
		{
			uint8_t berekening = ((device-1) * 12) + knop-1 ;
 8000eb4:	7abb      	ldrb	r3, [r7, #10]
 8000eb6:	461a      	mov	r2, r3
 8000eb8:	0052      	lsls	r2, r2, #1
 8000eba:	4413      	add	r3, r2
 8000ebc:	009b      	lsls	r3, r3, #2
 8000ebe:	b2da      	uxtb	r2, r3
 8000ec0:	7afb      	ldrb	r3, [r7, #11]
 8000ec2:	4413      	add	r3, r2
 8000ec4:	b2db      	uxtb	r3, r3
 8000ec6:	3b0d      	subs	r3, #13
 8000ec8:	727b      	strb	r3, [r7, #9]
			if(lengte_signaal[berekening] != 0)
 8000eca:	7a7b      	ldrb	r3, [r7, #9]
 8000ecc:	4a80      	ldr	r2, [pc, #512]	; (80010d0 <DevicePressed+0x274>)
 8000ece:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d00a      	beq.n	8000eec <DevicePressed+0x90>
			{
				if(knop == 1)
 8000ed6:	7afb      	ldrb	r3, [r7, #11]
 8000ed8:	2b01      	cmp	r3, #1
 8000eda:	d103      	bne.n	8000ee4 <DevicePressed+0x88>
				{
					contentcolor = ILI9488_RED;
 8000edc:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8000ee0:	81bb      	strh	r3, [r7, #12]
 8000ee2:	e005      	b.n	8000ef0 <DevicePressed+0x94>
				}
				else
				{
					contentcolor = ILI9488_DARKGREY;
 8000ee4:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8000ee8:	81bb      	strh	r3, [r7, #12]
 8000eea:	e001      	b.n	8000ef0 <DevicePressed+0x94>
				}

			}
			else
			{
			contentcolor = ILI9488_BLACK;
 8000eec:	2300      	movs	r3, #0
 8000eee:	81bb      	strh	r3, [r7, #12]
			}
		}
		switch(knop)
 8000ef0:	7afb      	ldrb	r3, [r7, #11]
 8000ef2:	3b01      	subs	r3, #1
 8000ef4:	2b0d      	cmp	r3, #13
 8000ef6:	f200 80de 	bhi.w	80010b6 <DevicePressed+0x25a>
 8000efa:	a201      	add	r2, pc, #4	; (adr r2, 8000f00 <DevicePressed+0xa4>)
 8000efc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f00:	08000f39 	.word	0x08000f39
 8000f04:	08000f53 	.word	0x08000f53
 8000f08:	08000f6d 	.word	0x08000f6d
 8000f0c:	08000f87 	.word	0x08000f87
 8000f10:	08000fa1 	.word	0x08000fa1
 8000f14:	08000fbb 	.word	0x08000fbb
 8000f18:	08000fd5 	.word	0x08000fd5
 8000f1c:	08000fef 	.word	0x08000fef
 8000f20:	0800100b 	.word	0x0800100b
 8000f24:	08001027 	.word	0x08001027
 8000f28:	08001043 	.word	0x08001043
 8000f2c:	0800105f 	.word	0x0800105f
 8000f30:	0800107b 	.word	0x0800107b
 8000f34:	08001099 	.word	0x08001099
		{
		case 1:
			//Power
			DrawRectangle(23, 50, 75, 75, color, contentcolor, 5);
 8000f38:	2305      	movs	r3, #5
 8000f3a:	9302      	str	r3, [sp, #8]
 8000f3c:	89bb      	ldrh	r3, [r7, #12]
 8000f3e:	9301      	str	r3, [sp, #4]
 8000f40:	89fb      	ldrh	r3, [r7, #14]
 8000f42:	9300      	str	r3, [sp, #0]
 8000f44:	234b      	movs	r3, #75	; 0x4b
 8000f46:	224b      	movs	r2, #75	; 0x4b
 8000f48:	2132      	movs	r1, #50	; 0x32
 8000f4a:	2017      	movs	r0, #23
 8000f4c:	f7ff fe37 	bl	8000bbe <DrawRectangle>
			break;
 8000f50:	e0b2      	b.n	80010b8 <DevicePressed+0x25c>
		case 2:
			//Src
			DrawRectangle(219, 50, 75, 75, color, contentcolor, 5);
 8000f52:	2305      	movs	r3, #5
 8000f54:	9302      	str	r3, [sp, #8]
 8000f56:	89bb      	ldrh	r3, [r7, #12]
 8000f58:	9301      	str	r3, [sp, #4]
 8000f5a:	89fb      	ldrh	r3, [r7, #14]
 8000f5c:	9300      	str	r3, [sp, #0]
 8000f5e:	234b      	movs	r3, #75	; 0x4b
 8000f60:	224b      	movs	r2, #75	; 0x4b
 8000f62:	2132      	movs	r1, #50	; 0x32
 8000f64:	20db      	movs	r0, #219	; 0xdb
 8000f66:	f7ff fe2a 	bl	8000bbe <DrawRectangle>
			break;
 8000f6a:	e0a5      	b.n	80010b8 <DevicePressed+0x25c>
		case 3:
			//^
			DrawRectangle(121, 80, 75, 75, color, contentcolor, 5);
 8000f6c:	2305      	movs	r3, #5
 8000f6e:	9302      	str	r3, [sp, #8]
 8000f70:	89bb      	ldrh	r3, [r7, #12]
 8000f72:	9301      	str	r3, [sp, #4]
 8000f74:	89fb      	ldrh	r3, [r7, #14]
 8000f76:	9300      	str	r3, [sp, #0]
 8000f78:	234b      	movs	r3, #75	; 0x4b
 8000f7a:	224b      	movs	r2, #75	; 0x4b
 8000f7c:	2150      	movs	r1, #80	; 0x50
 8000f7e:	2079      	movs	r0, #121	; 0x79
 8000f80:	f7ff fe1d 	bl	8000bbe <DrawRectangle>
			break;
 8000f84:	e098      	b.n	80010b8 <DevicePressed+0x25c>
		case 4:
			//<
			DrawRectangle(23, 165, 75, 75, color, contentcolor, 5);
 8000f86:	2305      	movs	r3, #5
 8000f88:	9302      	str	r3, [sp, #8]
 8000f8a:	89bb      	ldrh	r3, [r7, #12]
 8000f8c:	9301      	str	r3, [sp, #4]
 8000f8e:	89fb      	ldrh	r3, [r7, #14]
 8000f90:	9300      	str	r3, [sp, #0]
 8000f92:	234b      	movs	r3, #75	; 0x4b
 8000f94:	224b      	movs	r2, #75	; 0x4b
 8000f96:	21a5      	movs	r1, #165	; 0xa5
 8000f98:	2017      	movs	r0, #23
 8000f9a:	f7ff fe10 	bl	8000bbe <DrawRectangle>
			break;
 8000f9e:	e08b      	b.n	80010b8 <DevicePressed+0x25c>
		case 5:
			//OK
			DrawRectangle(121, 165, 75, 75, color, contentcolor, 5);
 8000fa0:	2305      	movs	r3, #5
 8000fa2:	9302      	str	r3, [sp, #8]
 8000fa4:	89bb      	ldrh	r3, [r7, #12]
 8000fa6:	9301      	str	r3, [sp, #4]
 8000fa8:	89fb      	ldrh	r3, [r7, #14]
 8000faa:	9300      	str	r3, [sp, #0]
 8000fac:	234b      	movs	r3, #75	; 0x4b
 8000fae:	224b      	movs	r2, #75	; 0x4b
 8000fb0:	21a5      	movs	r1, #165	; 0xa5
 8000fb2:	2079      	movs	r0, #121	; 0x79
 8000fb4:	f7ff fe03 	bl	8000bbe <DrawRectangle>
			break;
 8000fb8:	e07e      	b.n	80010b8 <DevicePressed+0x25c>
		case 6:
			//>
			DrawRectangle(219, 165, 75, 75, color, contentcolor, 5);
 8000fba:	2305      	movs	r3, #5
 8000fbc:	9302      	str	r3, [sp, #8]
 8000fbe:	89bb      	ldrh	r3, [r7, #12]
 8000fc0:	9301      	str	r3, [sp, #4]
 8000fc2:	89fb      	ldrh	r3, [r7, #14]
 8000fc4:	9300      	str	r3, [sp, #0]
 8000fc6:	234b      	movs	r3, #75	; 0x4b
 8000fc8:	224b      	movs	r2, #75	; 0x4b
 8000fca:	21a5      	movs	r1, #165	; 0xa5
 8000fcc:	20db      	movs	r0, #219	; 0xdb
 8000fce:	f7ff fdf6 	bl	8000bbe <DrawRectangle>
			break;
 8000fd2:	e071      	b.n	80010b8 <DevicePressed+0x25c>
		case 7:
			//V
			DrawRectangle(121, 250, 75, 75, color, contentcolor, 5);
 8000fd4:	2305      	movs	r3, #5
 8000fd6:	9302      	str	r3, [sp, #8]
 8000fd8:	89bb      	ldrh	r3, [r7, #12]
 8000fda:	9301      	str	r3, [sp, #4]
 8000fdc:	89fb      	ldrh	r3, [r7, #14]
 8000fde:	9300      	str	r3, [sp, #0]
 8000fe0:	234b      	movs	r3, #75	; 0x4b
 8000fe2:	224b      	movs	r2, #75	; 0x4b
 8000fe4:	21fa      	movs	r1, #250	; 0xfa
 8000fe6:	2079      	movs	r0, #121	; 0x79
 8000fe8:	f7ff fde9 	bl	8000bbe <DrawRectangle>
			break;
 8000fec:	e064      	b.n	80010b8 <DevicePressed+0x25c>
		case 8:
			//volume up
				DrawRectangle(23, 298, 75, 75, color, contentcolor, 5);
 8000fee:	2305      	movs	r3, #5
 8000ff0:	9302      	str	r3, [sp, #8]
 8000ff2:	89bb      	ldrh	r3, [r7, #12]
 8000ff4:	9301      	str	r3, [sp, #4]
 8000ff6:	89fb      	ldrh	r3, [r7, #14]
 8000ff8:	9300      	str	r3, [sp, #0]
 8000ffa:	234b      	movs	r3, #75	; 0x4b
 8000ffc:	224b      	movs	r2, #75	; 0x4b
 8000ffe:	f44f 7195 	mov.w	r1, #298	; 0x12a
 8001002:	2017      	movs	r0, #23
 8001004:	f7ff fddb 	bl	8000bbe <DrawRectangle>
			break;
 8001008:	e056      	b.n	80010b8 <DevicePressed+0x25c>
		case 9:
			//volume down
				DrawRectangle(23, 393, 75, 75, color, contentcolor, 5);
 800100a:	2305      	movs	r3, #5
 800100c:	9302      	str	r3, [sp, #8]
 800100e:	89bb      	ldrh	r3, [r7, #12]
 8001010:	9301      	str	r3, [sp, #4]
 8001012:	89fb      	ldrh	r3, [r7, #14]
 8001014:	9300      	str	r3, [sp, #0]
 8001016:	234b      	movs	r3, #75	; 0x4b
 8001018:	224b      	movs	r2, #75	; 0x4b
 800101a:	f240 1189 	movw	r1, #393	; 0x189
 800101e:	2017      	movs	r0, #23
 8001020:	f7ff fdcd 	bl	8000bbe <DrawRectangle>
			break;
 8001024:	e048      	b.n	80010b8 <DevicePressed+0x25c>
		case 10:
			//mute
				DrawRectangle(121, 393, 75, 75, color, contentcolor, 5);
 8001026:	2305      	movs	r3, #5
 8001028:	9302      	str	r3, [sp, #8]
 800102a:	89bb      	ldrh	r3, [r7, #12]
 800102c:	9301      	str	r3, [sp, #4]
 800102e:	89fb      	ldrh	r3, [r7, #14]
 8001030:	9300      	str	r3, [sp, #0]
 8001032:	234b      	movs	r3, #75	; 0x4b
 8001034:	224b      	movs	r2, #75	; 0x4b
 8001036:	f240 1189 	movw	r1, #393	; 0x189
 800103a:	2079      	movs	r0, #121	; 0x79
 800103c:	f7ff fdbf 	bl	8000bbe <DrawRectangle>
			break;
 8001040:	e03a      	b.n	80010b8 <DevicePressed+0x25c>
		case 11:
			//channel up
				DrawRectangle(219, 298, 75, 75, color, contentcolor, 5);
 8001042:	2305      	movs	r3, #5
 8001044:	9302      	str	r3, [sp, #8]
 8001046:	89bb      	ldrh	r3, [r7, #12]
 8001048:	9301      	str	r3, [sp, #4]
 800104a:	89fb      	ldrh	r3, [r7, #14]
 800104c:	9300      	str	r3, [sp, #0]
 800104e:	234b      	movs	r3, #75	; 0x4b
 8001050:	224b      	movs	r2, #75	; 0x4b
 8001052:	f44f 7195 	mov.w	r1, #298	; 0x12a
 8001056:	20db      	movs	r0, #219	; 0xdb
 8001058:	f7ff fdb1 	bl	8000bbe <DrawRectangle>
			break;
 800105c:	e02c      	b.n	80010b8 <DevicePressed+0x25c>
		case 12:
			//channel down
				DrawRectangle(219, 393, 75, 75, color, contentcolor, 5);
 800105e:	2305      	movs	r3, #5
 8001060:	9302      	str	r3, [sp, #8]
 8001062:	89bb      	ldrh	r3, [r7, #12]
 8001064:	9301      	str	r3, [sp, #4]
 8001066:	89fb      	ldrh	r3, [r7, #14]
 8001068:	9300      	str	r3, [sp, #0]
 800106a:	234b      	movs	r3, #75	; 0x4b
 800106c:	224b      	movs	r2, #75	; 0x4b
 800106e:	f240 1189 	movw	r1, #393	; 0x189
 8001072:	20db      	movs	r0, #219	; 0xdb
 8001074:	f7ff fda3 	bl	8000bbe <DrawRectangle>
			break;
 8001078:	e01e      	b.n	80010b8 <DevicePressed+0x25c>
		case 13:
			//Add
				DrawRectangle(23, 245, 48, 75, ILI9488_GREENYELLOW, ILI9488_GREENYELLOW, 0);
 800107a:	2300      	movs	r3, #0
 800107c:	9302      	str	r3, [sp, #8]
 800107e:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8001082:	9301      	str	r3, [sp, #4]
 8001084:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8001088:	9300      	str	r3, [sp, #0]
 800108a:	234b      	movs	r3, #75	; 0x4b
 800108c:	2230      	movs	r2, #48	; 0x30
 800108e:	21f5      	movs	r1, #245	; 0xf5
 8001090:	2017      	movs	r0, #23
 8001092:	f7ff fd94 	bl	8000bbe <DrawRectangle>
			break;
 8001096:	e00f      	b.n	80010b8 <DevicePressed+0x25c>
		case 14:
			//Delete
					DrawRectangle(219, 245, 48, 75, ILI9488_RED, ILI9488_RED, 0);
 8001098:	2300      	movs	r3, #0
 800109a:	9302      	str	r3, [sp, #8]
 800109c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80010a0:	9301      	str	r3, [sp, #4]
 80010a2:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80010a6:	9300      	str	r3, [sp, #0]
 80010a8:	234b      	movs	r3, #75	; 0x4b
 80010aa:	2230      	movs	r2, #48	; 0x30
 80010ac:	21f5      	movs	r1, #245	; 0xf5
 80010ae:	20db      	movs	r0, #219	; 0xdb
 80010b0:	f7ff fd85 	bl	8000bbe <DrawRectangle>
			break;
 80010b4:	e000      	b.n	80010b8 <DevicePressed+0x25c>
		default:
			break;
 80010b6:	bf00      	nop
	for(uint8_t knop = 1; knop <= 14; knop++)
 80010b8:	7afb      	ldrb	r3, [r7, #11]
 80010ba:	3301      	adds	r3, #1
 80010bc:	72fb      	strb	r3, [r7, #11]
 80010be:	7afb      	ldrb	r3, [r7, #11]
 80010c0:	2b0e      	cmp	r3, #14
 80010c2:	f67f aef4 	bls.w	8000eae <DevicePressed+0x52>





}
 80010c6:	bf00      	nop
 80010c8:	bf00      	nop
 80010ca:	3710      	adds	r7, #16
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bd80      	pop	{r7, pc}
 80010d0:	20004e30 	.word	0x20004e30

080010d4 <buttonPressed>:
void buttonPressed(uint8_t *dev, uint8_t *knop, uint8_t *Sensingtouch, uint16_t *X_w, uint16_t *Y_w)
{
 80010d4:	b590      	push	{r4, r7, lr}
 80010d6:	f2ad 4d0c 	subw	sp, sp, #1036	; 0x40c
 80010da:	af00      	add	r7, sp, #0
 80010dc:	f507 6481 	add.w	r4, r7, #1032	; 0x408
 80010e0:	f5a4 747f 	sub.w	r4, r4, #1020	; 0x3fc
 80010e4:	6020      	str	r0, [r4, #0]
 80010e6:	f507 6081 	add.w	r0, r7, #1032	; 0x408
 80010ea:	f5a0 6080 	sub.w	r0, r0, #1024	; 0x400
 80010ee:	6001      	str	r1, [r0, #0]
 80010f0:	f507 6181 	add.w	r1, r7, #1032	; 0x408
 80010f4:	f2a1 4104 	subw	r1, r1, #1028	; 0x404
 80010f8:	600a      	str	r2, [r1, #0]
 80010fa:	f507 6281 	add.w	r2, r7, #1032	; 0x408
 80010fe:	f5a2 6281 	sub.w	r2, r2, #1032	; 0x408
 8001102:	6013      	str	r3, [r2, #0]
uint8_t device = *dev;
 8001104:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 8001108:	f5a3 737f 	sub.w	r3, r3, #1020	; 0x3fc
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	781b      	ldrb	r3, [r3, #0]
 8001110:	f887 3401 	strb.w	r3, [r7, #1025]	; 0x401
uint8_t button = *knop;
 8001114:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 8001118:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	781b      	ldrb	r3, [r3, #0]
 8001120:	f887 3400 	strb.w	r3, [r7, #1024]	; 0x400
uint8_t aanraak = *Sensingtouch;
 8001124:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 8001128:	f2a3 4304 	subw	r3, r3, #1028	; 0x404
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	781b      	ldrb	r3, [r3, #0]
 8001130:	f887 33ff 	strb.w	r3, [r7, #1023]	; 0x3ff
uint16_t X_waarde = *X_w;
 8001134:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 8001138:	f5a3 6381 	sub.w	r3, r3, #1032	; 0x408
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	881b      	ldrh	r3, [r3, #0]
 8001140:	f8a7 33fc 	strh.w	r3, [r7, #1020]	; 0x3fc
uint16_t Y_waarde = *Y_w;
 8001144:	f8d7 3418 	ldr.w	r3, [r7, #1048]	; 0x418
 8001148:	881b      	ldrh	r3, [r3, #0]
 800114a:	f8a7 33fa 	strh.w	r3, [r7, #1018]	; 0x3fa

uint8_t controle = 0;
 800114e:	2300      	movs	r3, #0
 8001150:	f887 33f9 	strb.w	r3, [r7, #1017]	; 0x3f9
	 if(button >= 13) //Is de knop een ADD/Delete button?
 8001154:	f897 3400 	ldrb.w	r3, [r7, #1024]	; 0x400
 8001158:	2b0c      	cmp	r3, #12
 800115a:	d97a      	bls.n	8001252 <buttonPressed+0x17e>
	 {
		 switch(button)
 800115c:	f897 3400 	ldrb.w	r3, [r7, #1024]	; 0x400
 8001160:	2b0d      	cmp	r3, #13
 8001162:	d002      	beq.n	800116a <buttonPressed+0x96>
 8001164:	2b0e      	cmp	r3, #14
 8001166:	d03a      	beq.n	80011de <buttonPressed+0x10a>
			 	 ColorToSelectedbutton(&button, 0xF800);
			 	 printf("button %d \r\n", button);
			 	 IR_Read();
			 break;
		 default:
			 break;
 8001168:	e0cc      	b.n	8001304 <buttonPressed+0x230>
			 button = 0;
 800116a:	2300      	movs	r3, #0
 800116c:	f887 3400 	strb.w	r3, [r7, #1024]	; 0x400
			 X_waarde = 160; Y_waarde = 363;
 8001170:	23a0      	movs	r3, #160	; 0xa0
 8001172:	f8a7 33fc 	strh.w	r3, [r7, #1020]	; 0x3fc
 8001176:	f240 136b 	movw	r3, #363	; 0x16b
 800117a:	f8a7 33fa 	strh.w	r3, [r7, #1018]	; 0x3fa
			 while(button == 0)
 800117e:	e01a      	b.n	80011b6 <buttonPressed+0xe2>
				 Touch(&aanraak, &X_waarde, &Y_waarde);
 8001180:	f207 32fa 	addw	r2, r7, #1018	; 0x3fa
 8001184:	f507 717f 	add.w	r1, r7, #1020	; 0x3fc
 8001188:	f207 33ff 	addw	r3, r7, #1023	; 0x3ff
 800118c:	4618      	mov	r0, r3
 800118e:	f000 fad1 	bl	8001734 <Touch>
				 ReadButton(&button, &X_waarde, &Y_waarde);
 8001192:	f207 32fa 	addw	r2, r7, #1018	; 0x3fa
 8001196:	f507 717f 	add.w	r1, r7, #1020	; 0x3fc
 800119a:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 800119e:	4618      	mov	r0, r3
 80011a0:	f000 fba4 	bl	80018ec <ReadButton>
				 ReadDevice(&device, &X_waarde, &Y_waarde);
 80011a4:	f207 32fa 	addw	r2, r7, #1018	; 0x3fa
 80011a8:	f507 717f 	add.w	r1, r7, #1020	; 0x3fc
 80011ac:	f207 4301 	addw	r3, r7, #1025	; 0x401
 80011b0:	4618      	mov	r0, r3
 80011b2:	f000 fb41 	bl	8001838 <ReadDevice>
			 while(button == 0)
 80011b6:	f897 3400 	ldrb.w	r3, [r7, #1024]	; 0x400
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d0e0      	beq.n	8001180 <buttonPressed+0xac>
			 ColorToSelectedbutton(&button, 0x07E0);
 80011be:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 80011c2:	f44f 61fc 	mov.w	r1, #2016	; 0x7e0
 80011c6:	4618      	mov	r0, r3
 80011c8:	f000 f8ac 	bl	8001324 <ColorToSelectedbutton>
			 printf("button %d \r\n", button);
 80011cc:	f897 3400 	ldrb.w	r3, [r7, #1024]	; 0x400
 80011d0:	4619      	mov	r1, r3
 80011d2:	484f      	ldr	r0, [pc, #316]	; (8001310 <buttonPressed+0x23c>)
 80011d4:	f005 ffac 	bl	8007130 <iprintf>
			 	 IR_Read();
 80011d8:	f000 fa18 	bl	800160c <IR_Read>
			 break;
 80011dc:	e092      	b.n	8001304 <buttonPressed+0x230>
			 button = 0;
 80011de:	2300      	movs	r3, #0
 80011e0:	f887 3400 	strb.w	r3, [r7, #1024]	; 0x400
			 X_waarde = 160; Y_waarde = 363;
 80011e4:	23a0      	movs	r3, #160	; 0xa0
 80011e6:	f8a7 33fc 	strh.w	r3, [r7, #1020]	; 0x3fc
 80011ea:	f240 136b 	movw	r3, #363	; 0x16b
 80011ee:	f8a7 33fa 	strh.w	r3, [r7, #1018]	; 0x3fa
			 while(button == 0)
 80011f2:	e01a      	b.n	800122a <buttonPressed+0x156>
				 Touch(&aanraak, &X_waarde, &Y_waarde);
 80011f4:	f207 32fa 	addw	r2, r7, #1018	; 0x3fa
 80011f8:	f507 717f 	add.w	r1, r7, #1020	; 0x3fc
 80011fc:	f207 33ff 	addw	r3, r7, #1023	; 0x3ff
 8001200:	4618      	mov	r0, r3
 8001202:	f000 fa97 	bl	8001734 <Touch>
				 ReadButton(&button, &X_waarde, &Y_waarde);
 8001206:	f207 32fa 	addw	r2, r7, #1018	; 0x3fa
 800120a:	f507 717f 	add.w	r1, r7, #1020	; 0x3fc
 800120e:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 8001212:	4618      	mov	r0, r3
 8001214:	f000 fb6a 	bl	80018ec <ReadButton>
				 ReadDevice(&device, &X_waarde, &Y_waarde);
 8001218:	f207 32fa 	addw	r2, r7, #1018	; 0x3fa
 800121c:	f507 717f 	add.w	r1, r7, #1020	; 0x3fc
 8001220:	f207 4301 	addw	r3, r7, #1025	; 0x401
 8001224:	4618      	mov	r0, r3
 8001226:	f000 fb07 	bl	8001838 <ReadDevice>
			 while(button == 0)
 800122a:	f897 3400 	ldrb.w	r3, [r7, #1024]	; 0x400
 800122e:	2b00      	cmp	r3, #0
 8001230:	d0e0      	beq.n	80011f4 <buttonPressed+0x120>
			 	 ColorToSelectedbutton(&button, 0xF800);
 8001232:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 8001236:	f44f 4178 	mov.w	r1, #63488	; 0xf800
 800123a:	4618      	mov	r0, r3
 800123c:	f000 f872 	bl	8001324 <ColorToSelectedbutton>
			 	 printf("button %d \r\n", button);
 8001240:	f897 3400 	ldrb.w	r3, [r7, #1024]	; 0x400
 8001244:	4619      	mov	r1, r3
 8001246:	4832      	ldr	r0, [pc, #200]	; (8001310 <buttonPressed+0x23c>)
 8001248:	f005 ff72 	bl	8007130 <iprintf>
			 	 IR_Read();
 800124c:	f000 f9de 	bl	800160c <IR_Read>
			 break;
 8001250:	e058      	b.n	8001304 <buttonPressed+0x230>
	 }
	 else
	 {
		 //Heeft ingeduwde knop tijdswaarden? Ja dan is controle = 1
		 uint16_t tijd_geheugen[500];
		 TakefromGeheugen(&device, &button, &tijd_geheugen, &controle);
 8001252:	f207 33f9 	addw	r3, r7, #1017	; 0x3f9
 8001256:	f107 0210 	add.w	r2, r7, #16
 800125a:	f507 6180 	add.w	r1, r7, #1024	; 0x400
 800125e:	f207 4001 	addw	r0, r7, #1025	; 0x401
 8001262:	f7ff fa03 	bl	800066c <TakefromGeheugen>
		 if(controle == 0)
 8001266:	f897 33f9 	ldrb.w	r3, [r7, #1017]	; 0x3f9
 800126a:	2b00      	cmp	r3, #0
 800126c:	d103      	bne.n	8001276 <buttonPressed+0x1a2>
		 {
			 printf("knop is niet ingesteld\r\n");
 800126e:	4829      	ldr	r0, [pc, #164]	; (8001314 <buttonPressed+0x240>)
 8001270:	f005 ffe4 	bl	800723c <puts>

		 }


	 }
}
 8001274:	e046      	b.n	8001304 <buttonPressed+0x230>
			 uint8_t berekening = ((device-1) * 12) + button-1 ;
 8001276:	f897 3401 	ldrb.w	r3, [r7, #1025]	; 0x401
 800127a:	461a      	mov	r2, r3
 800127c:	0052      	lsls	r2, r2, #1
 800127e:	4413      	add	r3, r2
 8001280:	009b      	lsls	r3, r3, #2
 8001282:	b2da      	uxtb	r2, r3
 8001284:	f897 3400 	ldrb.w	r3, [r7, #1024]	; 0x400
 8001288:	4413      	add	r3, r2
 800128a:	b2db      	uxtb	r3, r3
 800128c:	3b0d      	subs	r3, #13
 800128e:	f887 3405 	strb.w	r3, [r7, #1029]	; 0x405
			 	 	 uint16_t lensignaal = lengte_signaal[berekening];
 8001292:	f897 3405 	ldrb.w	r3, [r7, #1029]	; 0x405
 8001296:	4a20      	ldr	r2, [pc, #128]	; (8001318 <buttonPressed+0x244>)
 8001298:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800129c:	f8a7 3402 	strh.w	r3, [r7, #1026]	; 0x402
			 	 	 printf("berekening is %d lengte is %d\r\n", berekening, lensignaal);
 80012a0:	f897 3405 	ldrb.w	r3, [r7, #1029]	; 0x405
 80012a4:	f8b7 2402 	ldrh.w	r2, [r7, #1026]	; 0x402
 80012a8:	4619      	mov	r1, r3
 80012aa:	481c      	ldr	r0, [pc, #112]	; (800131c <buttonPressed+0x248>)
 80012ac:	f005 ff40 	bl	8007130 <iprintf>
					 for(uint16_t i = 0; i <= lengte_signaal[berekening]; i ++)
 80012b0:	2300      	movs	r3, #0
 80012b2:	f8a7 3406 	strh.w	r3, [r7, #1030]	; 0x406
 80012b6:	e013      	b.n	80012e0 <buttonPressed+0x20c>
					 printf("ik werk %d  controle= %d\r\n ", tijd_geheugen[i], controle);
 80012b8:	f8b7 2406 	ldrh.w	r2, [r7, #1030]	; 0x406
 80012bc:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 80012c0:	f5a3 737e 	sub.w	r3, r3, #1016	; 0x3f8
 80012c4:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80012c8:	4619      	mov	r1, r3
 80012ca:	f897 33f9 	ldrb.w	r3, [r7, #1017]	; 0x3f9
 80012ce:	461a      	mov	r2, r3
 80012d0:	4813      	ldr	r0, [pc, #76]	; (8001320 <buttonPressed+0x24c>)
 80012d2:	f005 ff2d 	bl	8007130 <iprintf>
					 for(uint16_t i = 0; i <= lengte_signaal[berekening]; i ++)
 80012d6:	f8b7 3406 	ldrh.w	r3, [r7, #1030]	; 0x406
 80012da:	3301      	adds	r3, #1
 80012dc:	f8a7 3406 	strh.w	r3, [r7, #1030]	; 0x406
 80012e0:	f897 3405 	ldrb.w	r3, [r7, #1029]	; 0x405
 80012e4:	4a0c      	ldr	r2, [pc, #48]	; (8001318 <buttonPressed+0x244>)
 80012e6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80012ea:	f8b7 2406 	ldrh.w	r2, [r7, #1030]	; 0x406
 80012ee:	429a      	cmp	r2, r3
 80012f0:	d9e2      	bls.n	80012b8 <buttonPressed+0x1e4>
					 IR_sent(&tijd_geheugen, lensignaal);
 80012f2:	f8b7 2402 	ldrh.w	r2, [r7, #1026]	; 0x402
 80012f6:	f107 0310 	add.w	r3, r7, #16
 80012fa:	4611      	mov	r1, r2
 80012fc:	4618      	mov	r0, r3
 80012fe:	f000 f991 	bl	8001624 <IR_sent>
}
 8001302:	e7ff      	b.n	8001304 <buttonPressed+0x230>
 8001304:	bf00      	nop
 8001306:	f207 470c 	addw	r7, r7, #1036	; 0x40c
 800130a:	46bd      	mov	sp, r7
 800130c:	bd90      	pop	{r4, r7, pc}
 800130e:	bf00      	nop
 8001310:	08008460 	.word	0x08008460
 8001314:	08008470 	.word	0x08008470
 8001318:	20004e30 	.word	0x20004e30
 800131c:	08008488 	.word	0x08008488
 8001320:	080084a8 	.word	0x080084a8

08001324 <ColorToSelectedbutton>:
void ColorToSelectedbutton(uint8_t *button, uint16_t color)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b088      	sub	sp, #32
 8001328:	af04      	add	r7, sp, #16
 800132a:	6078      	str	r0, [r7, #4]
 800132c:	460b      	mov	r3, r1
 800132e:	807b      	strh	r3, [r7, #2]
	uint8_t knop = *button;
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	781b      	ldrb	r3, [r3, #0]
 8001334:	73fb      	strb	r3, [r7, #15]
	switch(knop)
 8001336:	7bfb      	ldrb	r3, [r7, #15]
 8001338:	3b01      	subs	r3, #1
 800133a:	2b0b      	cmp	r3, #11
 800133c:	f200 80bd 	bhi.w	80014ba <ColorToSelectedbutton+0x196>
 8001340:	a201      	add	r2, pc, #4	; (adr r2, 8001348 <ColorToSelectedbutton+0x24>)
 8001342:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001346:	bf00      	nop
 8001348:	08001379 	.word	0x08001379
 800134c:	08001393 	.word	0x08001393
 8001350:	080013ad 	.word	0x080013ad
 8001354:	080013c7 	.word	0x080013c7
 8001358:	080013e1 	.word	0x080013e1
 800135c:	080013fb 	.word	0x080013fb
 8001360:	08001415 	.word	0x08001415
 8001364:	0800142f 	.word	0x0800142f
 8001368:	0800144b 	.word	0x0800144b
 800136c:	08001467 	.word	0x08001467
 8001370:	08001483 	.word	0x08001483
 8001374:	0800149f 	.word	0x0800149f
			{
			case 1:
				//Power
				DrawRectangle(23, 50, 75, 75, ILI9488_BLACK, color, 5);
 8001378:	2305      	movs	r3, #5
 800137a:	9302      	str	r3, [sp, #8]
 800137c:	887b      	ldrh	r3, [r7, #2]
 800137e:	9301      	str	r3, [sp, #4]
 8001380:	2300      	movs	r3, #0
 8001382:	9300      	str	r3, [sp, #0]
 8001384:	234b      	movs	r3, #75	; 0x4b
 8001386:	224b      	movs	r2, #75	; 0x4b
 8001388:	2132      	movs	r1, #50	; 0x32
 800138a:	2017      	movs	r0, #23
 800138c:	f7ff fc17 	bl	8000bbe <DrawRectangle>
				break;
 8001390:	e094      	b.n	80014bc <ColorToSelectedbutton+0x198>
			case 2:
				//Src
				DrawRectangle(219, 50, 75, 75, ILI9488_BLACK, color, 5);
 8001392:	2305      	movs	r3, #5
 8001394:	9302      	str	r3, [sp, #8]
 8001396:	887b      	ldrh	r3, [r7, #2]
 8001398:	9301      	str	r3, [sp, #4]
 800139a:	2300      	movs	r3, #0
 800139c:	9300      	str	r3, [sp, #0]
 800139e:	234b      	movs	r3, #75	; 0x4b
 80013a0:	224b      	movs	r2, #75	; 0x4b
 80013a2:	2132      	movs	r1, #50	; 0x32
 80013a4:	20db      	movs	r0, #219	; 0xdb
 80013a6:	f7ff fc0a 	bl	8000bbe <DrawRectangle>
				break;
 80013aa:	e087      	b.n	80014bc <ColorToSelectedbutton+0x198>
			case 3:
				//^
				DrawRectangle(121, 80, 75, 75, ILI9488_BLACK, color, 5);
 80013ac:	2305      	movs	r3, #5
 80013ae:	9302      	str	r3, [sp, #8]
 80013b0:	887b      	ldrh	r3, [r7, #2]
 80013b2:	9301      	str	r3, [sp, #4]
 80013b4:	2300      	movs	r3, #0
 80013b6:	9300      	str	r3, [sp, #0]
 80013b8:	234b      	movs	r3, #75	; 0x4b
 80013ba:	224b      	movs	r2, #75	; 0x4b
 80013bc:	2150      	movs	r1, #80	; 0x50
 80013be:	2079      	movs	r0, #121	; 0x79
 80013c0:	f7ff fbfd 	bl	8000bbe <DrawRectangle>
				break;
 80013c4:	e07a      	b.n	80014bc <ColorToSelectedbutton+0x198>
			case 4:
				//<
				DrawRectangle(23, 165, 75, 75, ILI9488_BLACK, color, 5);
 80013c6:	2305      	movs	r3, #5
 80013c8:	9302      	str	r3, [sp, #8]
 80013ca:	887b      	ldrh	r3, [r7, #2]
 80013cc:	9301      	str	r3, [sp, #4]
 80013ce:	2300      	movs	r3, #0
 80013d0:	9300      	str	r3, [sp, #0]
 80013d2:	234b      	movs	r3, #75	; 0x4b
 80013d4:	224b      	movs	r2, #75	; 0x4b
 80013d6:	21a5      	movs	r1, #165	; 0xa5
 80013d8:	2017      	movs	r0, #23
 80013da:	f7ff fbf0 	bl	8000bbe <DrawRectangle>
				break;
 80013de:	e06d      	b.n	80014bc <ColorToSelectedbutton+0x198>
			case 5:
				//OK
				DrawRectangle(121, 165, 75, 75, ILI9488_BLACK, color, 5);
 80013e0:	2305      	movs	r3, #5
 80013e2:	9302      	str	r3, [sp, #8]
 80013e4:	887b      	ldrh	r3, [r7, #2]
 80013e6:	9301      	str	r3, [sp, #4]
 80013e8:	2300      	movs	r3, #0
 80013ea:	9300      	str	r3, [sp, #0]
 80013ec:	234b      	movs	r3, #75	; 0x4b
 80013ee:	224b      	movs	r2, #75	; 0x4b
 80013f0:	21a5      	movs	r1, #165	; 0xa5
 80013f2:	2079      	movs	r0, #121	; 0x79
 80013f4:	f7ff fbe3 	bl	8000bbe <DrawRectangle>
				break;
 80013f8:	e060      	b.n	80014bc <ColorToSelectedbutton+0x198>
			case 6:
				//>
				DrawRectangle(219, 165, 75, 75, ILI9488_BLACK, color, 5);
 80013fa:	2305      	movs	r3, #5
 80013fc:	9302      	str	r3, [sp, #8]
 80013fe:	887b      	ldrh	r3, [r7, #2]
 8001400:	9301      	str	r3, [sp, #4]
 8001402:	2300      	movs	r3, #0
 8001404:	9300      	str	r3, [sp, #0]
 8001406:	234b      	movs	r3, #75	; 0x4b
 8001408:	224b      	movs	r2, #75	; 0x4b
 800140a:	21a5      	movs	r1, #165	; 0xa5
 800140c:	20db      	movs	r0, #219	; 0xdb
 800140e:	f7ff fbd6 	bl	8000bbe <DrawRectangle>
				break;
 8001412:	e053      	b.n	80014bc <ColorToSelectedbutton+0x198>
			case 7:
				//V
				DrawRectangle(121, 250, 75, 75, ILI9488_BLACK, color, 5);
 8001414:	2305      	movs	r3, #5
 8001416:	9302      	str	r3, [sp, #8]
 8001418:	887b      	ldrh	r3, [r7, #2]
 800141a:	9301      	str	r3, [sp, #4]
 800141c:	2300      	movs	r3, #0
 800141e:	9300      	str	r3, [sp, #0]
 8001420:	234b      	movs	r3, #75	; 0x4b
 8001422:	224b      	movs	r2, #75	; 0x4b
 8001424:	21fa      	movs	r1, #250	; 0xfa
 8001426:	2079      	movs	r0, #121	; 0x79
 8001428:	f7ff fbc9 	bl	8000bbe <DrawRectangle>
				break;
 800142c:	e046      	b.n	80014bc <ColorToSelectedbutton+0x198>
			case 8:
				//volume up
					DrawRectangle(23, 298, 75, 75, ILI9488_BLACK, color, 5);
 800142e:	2305      	movs	r3, #5
 8001430:	9302      	str	r3, [sp, #8]
 8001432:	887b      	ldrh	r3, [r7, #2]
 8001434:	9301      	str	r3, [sp, #4]
 8001436:	2300      	movs	r3, #0
 8001438:	9300      	str	r3, [sp, #0]
 800143a:	234b      	movs	r3, #75	; 0x4b
 800143c:	224b      	movs	r2, #75	; 0x4b
 800143e:	f44f 7195 	mov.w	r1, #298	; 0x12a
 8001442:	2017      	movs	r0, #23
 8001444:	f7ff fbbb 	bl	8000bbe <DrawRectangle>
				break;
 8001448:	e038      	b.n	80014bc <ColorToSelectedbutton+0x198>
			case 9:
				//volume down
					DrawRectangle(23, 393, 75, 75, ILI9488_BLACK, color, 5);
 800144a:	2305      	movs	r3, #5
 800144c:	9302      	str	r3, [sp, #8]
 800144e:	887b      	ldrh	r3, [r7, #2]
 8001450:	9301      	str	r3, [sp, #4]
 8001452:	2300      	movs	r3, #0
 8001454:	9300      	str	r3, [sp, #0]
 8001456:	234b      	movs	r3, #75	; 0x4b
 8001458:	224b      	movs	r2, #75	; 0x4b
 800145a:	f240 1189 	movw	r1, #393	; 0x189
 800145e:	2017      	movs	r0, #23
 8001460:	f7ff fbad 	bl	8000bbe <DrawRectangle>
				break;
 8001464:	e02a      	b.n	80014bc <ColorToSelectedbutton+0x198>
			case 10:
				//mute
					DrawRectangle(121, 393, 75, 75, ILI9488_BLACK, color, 5);
 8001466:	2305      	movs	r3, #5
 8001468:	9302      	str	r3, [sp, #8]
 800146a:	887b      	ldrh	r3, [r7, #2]
 800146c:	9301      	str	r3, [sp, #4]
 800146e:	2300      	movs	r3, #0
 8001470:	9300      	str	r3, [sp, #0]
 8001472:	234b      	movs	r3, #75	; 0x4b
 8001474:	224b      	movs	r2, #75	; 0x4b
 8001476:	f240 1189 	movw	r1, #393	; 0x189
 800147a:	2079      	movs	r0, #121	; 0x79
 800147c:	f7ff fb9f 	bl	8000bbe <DrawRectangle>
				break;
 8001480:	e01c      	b.n	80014bc <ColorToSelectedbutton+0x198>
			case 11:
				//channel up
					DrawRectangle(219, 298, 75, 75, ILI9488_BLACK, color, 5);
 8001482:	2305      	movs	r3, #5
 8001484:	9302      	str	r3, [sp, #8]
 8001486:	887b      	ldrh	r3, [r7, #2]
 8001488:	9301      	str	r3, [sp, #4]
 800148a:	2300      	movs	r3, #0
 800148c:	9300      	str	r3, [sp, #0]
 800148e:	234b      	movs	r3, #75	; 0x4b
 8001490:	224b      	movs	r2, #75	; 0x4b
 8001492:	f44f 7195 	mov.w	r1, #298	; 0x12a
 8001496:	20db      	movs	r0, #219	; 0xdb
 8001498:	f7ff fb91 	bl	8000bbe <DrawRectangle>
				break;
 800149c:	e00e      	b.n	80014bc <ColorToSelectedbutton+0x198>
			case 12:
				//channel down
					DrawRectangle(219, 393, 75, 75, ILI9488_BLACK, color, 5);
 800149e:	2305      	movs	r3, #5
 80014a0:	9302      	str	r3, [sp, #8]
 80014a2:	887b      	ldrh	r3, [r7, #2]
 80014a4:	9301      	str	r3, [sp, #4]
 80014a6:	2300      	movs	r3, #0
 80014a8:	9300      	str	r3, [sp, #0]
 80014aa:	234b      	movs	r3, #75	; 0x4b
 80014ac:	224b      	movs	r2, #75	; 0x4b
 80014ae:	f240 1189 	movw	r1, #393	; 0x189
 80014b2:	20db      	movs	r0, #219	; 0xdb
 80014b4:	f7ff fb83 	bl	8000bbe <DrawRectangle>
				break;
 80014b8:	e000      	b.n	80014bc <ColorToSelectedbutton+0x198>
			default:
				break;
 80014ba:	bf00      	nop
			}
}
 80014bc:	bf00      	nop
 80014be:	3710      	adds	r7, #16
 80014c0:	46bd      	mov	sp, r7
 80014c2:	bd80      	pop	{r7, pc}

080014c4 <mainscreen>:
void mainscreen()
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b084      	sub	sp, #16
 80014c8:	af04      	add	r7, sp, #16
	if(UartScreen == 1)
 80014ca:	4b28      	ldr	r3, [pc, #160]	; (800156c <mainscreen+0xa8>)
 80014cc:	781b      	ldrb	r3, [r3, #0]
 80014ce:	2b01      	cmp	r3, #1
 80014d0:	d102      	bne.n	80014d8 <mainscreen+0x14>
		{
		printf("Even geduld...\r\n");
 80014d2:	4827      	ldr	r0, [pc, #156]	; (8001570 <mainscreen+0xac>)
 80014d4:	f005 feb2 	bl	800723c <puts>
		}
	fillRect(0, 0, 320, 480, 0x0000);
 80014d8:	2300      	movs	r3, #0
 80014da:	9300      	str	r3, [sp, #0]
 80014dc:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80014e0:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80014e4:	2100      	movs	r1, #0
 80014e6:	2000      	movs	r0, #0
 80014e8:	f7ff fc50 	bl	8000d8c <fillRect>
	//DrawImage(0, 0, POWERBUTTON_DATA_X_PIXEL, POWERBUTTON_DATA_Y_PIXEL, POWERBUTTON_DATA);
	//DrawRectangle(x, y, h, w, color, contentcolor, border)
	DrawRectangle(0, 0, 40, 79, ILI9488_BLUE, ILI9488_BLUE, 0);
 80014ec:	2300      	movs	r3, #0
 80014ee:	9302      	str	r3, [sp, #8]
 80014f0:	231f      	movs	r3, #31
 80014f2:	9301      	str	r3, [sp, #4]
 80014f4:	231f      	movs	r3, #31
 80014f6:	9300      	str	r3, [sp, #0]
 80014f8:	234f      	movs	r3, #79	; 0x4f
 80014fa:	2228      	movs	r2, #40	; 0x28
 80014fc:	2100      	movs	r1, #0
 80014fe:	2000      	movs	r0, #0
 8001500:	f7ff fb5d 	bl	8000bbe <DrawRectangle>
	DrawRectangle(80, 0, 40, 79, ILI9488_YELLOW, ILI9488_YELLOW, 0);
 8001504:	2300      	movs	r3, #0
 8001506:	9302      	str	r3, [sp, #8]
 8001508:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800150c:	9301      	str	r3, [sp, #4]
 800150e:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001512:	9300      	str	r3, [sp, #0]
 8001514:	234f      	movs	r3, #79	; 0x4f
 8001516:	2228      	movs	r2, #40	; 0x28
 8001518:	2100      	movs	r1, #0
 800151a:	2050      	movs	r0, #80	; 0x50
 800151c:	f7ff fb4f 	bl	8000bbe <DrawRectangle>
	DrawRectangle(160, 0, 40, 79, ILI9488_GREEN, ILI9488_GREEN, 0);
 8001520:	2300      	movs	r3, #0
 8001522:	9302      	str	r3, [sp, #8]
 8001524:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8001528:	9301      	str	r3, [sp, #4]
 800152a:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800152e:	9300      	str	r3, [sp, #0]
 8001530:	234f      	movs	r3, #79	; 0x4f
 8001532:	2228      	movs	r2, #40	; 0x28
 8001534:	2100      	movs	r1, #0
 8001536:	20a0      	movs	r0, #160	; 0xa0
 8001538:	f7ff fb41 	bl	8000bbe <DrawRectangle>
	DrawRectangle(240, 0, 40, 79, ILI9488_WHITE, ILI9488_WHITE, 0);
 800153c:	2300      	movs	r3, #0
 800153e:	9302      	str	r3, [sp, #8]
 8001540:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001544:	9301      	str	r3, [sp, #4]
 8001546:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800154a:	9300      	str	r3, [sp, #0]
 800154c:	234f      	movs	r3, #79	; 0x4f
 800154e:	2228      	movs	r2, #40	; 0x28
 8001550:	2100      	movs	r1, #0
 8001552:	20f0      	movs	r0, #240	; 0xf0
 8001554:	f7ff fb33 	bl	8000bbe <DrawRectangle>

	if(UartScreen == 1)
 8001558:	4b04      	ldr	r3, [pc, #16]	; (800156c <mainscreen+0xa8>)
 800155a:	781b      	ldrb	r3, [r3, #0]
 800155c:	2b01      	cmp	r3, #1
 800155e:	d102      	bne.n	8001566 <mainscreen+0xa2>
	{
	printf("MainScreen ingeladen\r\n");
 8001560:	4804      	ldr	r0, [pc, #16]	; (8001574 <mainscreen+0xb0>)
 8001562:	f005 fe6b 	bl	800723c <puts>
	}
}
 8001566:	bf00      	nop
 8001568:	46bd      	mov	sp, r7
 800156a:	bd80      	pop	{r7, pc}
 800156c:	20000000 	.word	0x20000000
 8001570:	080084c4 	.word	0x080084c4
 8001574:	080084d4 	.word	0x080084d4

08001578 <Interrupt_flank>:
uint16_t lengte_signaal[48] = {0,1,0,2};
uint16_t tijd[500];
uint8_t commando = 0;

void Interrupt_flank()
{
 8001578:	b580      	push	{r7, lr}
 800157a:	af00      	add	r7, sp, #0

	if(IR_READ_flag == 1)
 800157c:	4b13      	ldr	r3, [pc, #76]	; (80015cc <Interrupt_flank+0x54>)
 800157e:	781b      	ldrb	r3, [r3, #0]
 8001580:	2b01      	cmp	r3, #1
 8001582:	d11e      	bne.n	80015c2 <Interrupt_flank+0x4a>
	{
		HAL_TIM_Base_Stop(&TIM_1us); //timer stoppen
 8001584:	4812      	ldr	r0, [pc, #72]	; (80015d0 <Interrupt_flank+0x58>)
 8001586:	f004 f8a9 	bl	80056dc <HAL_TIM_Base_Stop>
		//timer in het begin is steeds nul maar deze hebben we niet nodig

		tijd[pulsecounter] = TIM_1us.Instance -> CNT; //timer opslaan
 800158a:	4b11      	ldr	r3, [pc, #68]	; (80015d0 <Interrupt_flank+0x58>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001590:	4b10      	ldr	r3, [pc, #64]	; (80015d4 <Interrupt_flank+0x5c>)
 8001592:	881b      	ldrh	r3, [r3, #0]
 8001594:	461a      	mov	r2, r3
 8001596:	b289      	uxth	r1, r1
 8001598:	4b0f      	ldr	r3, [pc, #60]	; (80015d8 <Interrupt_flank+0x60>)
 800159a:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		lengte = pulsecounter;
 800159e:	4b0d      	ldr	r3, [pc, #52]	; (80015d4 <Interrupt_flank+0x5c>)
 80015a0:	881a      	ldrh	r2, [r3, #0]
 80015a2:	4b0e      	ldr	r3, [pc, #56]	; (80015dc <Interrupt_flank+0x64>)
 80015a4:	801a      	strh	r2, [r3, #0]
		pulsecounter++;
 80015a6:	4b0b      	ldr	r3, [pc, #44]	; (80015d4 <Interrupt_flank+0x5c>)
 80015a8:	881b      	ldrh	r3, [r3, #0]
 80015aa:	3301      	adds	r3, #1
 80015ac:	b29a      	uxth	r2, r3
 80015ae:	4b09      	ldr	r3, [pc, #36]	; (80015d4 <Interrupt_flank+0x5c>)
 80015b0:	801a      	strh	r2, [r3, #0]
		TIM_1us.Instance -> CNT = 0;
 80015b2:	4b07      	ldr	r3, [pc, #28]	; (80015d0 <Interrupt_flank+0x58>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	2200      	movs	r2, #0
 80015b8:	625a      	str	r2, [r3, #36]	; 0x24
		HAL_TIM_Base_Start(&TIM_1us);
 80015ba:	4805      	ldr	r0, [pc, #20]	; (80015d0 <Interrupt_flank+0x58>)
 80015bc:	f004 f81e 	bl	80055fc <HAL_TIM_Base_Start>
	else
	{
		printf("ik kan niet werken, aangezien ik uit sta\r\n");
	}

}
 80015c0:	e002      	b.n	80015c8 <Interrupt_flank+0x50>
		printf("ik kan niet werken, aangezien ik uit sta\r\n");
 80015c2:	4807      	ldr	r0, [pc, #28]	; (80015e0 <Interrupt_flank+0x68>)
 80015c4:	f005 fe3a 	bl	800723c <puts>
}
 80015c8:	bf00      	nop
 80015ca:	bd80      	pop	{r7, pc}
 80015cc:	20004f20 	.word	0x20004f20
 80015d0:	200053c4 	.word	0x200053c4
 80015d4:	20004e2c 	.word	0x20004e2c
 80015d8:	20004f24 	.word	0x20004f24
 80015dc:	20004f22 	.word	0x20004f22
 80015e0:	080084ec 	.word	0x080084ec

080015e4 <IR_Carrier_ON>:
void IR_Carrier_ON()
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&TIM_PWM_CARRIER, TIM_PWM_CARRIER_CHANNEL);
 80015e8:	2104      	movs	r1, #4
 80015ea:	4802      	ldr	r0, [pc, #8]	; (80015f4 <IR_Carrier_ON+0x10>)
 80015ec:	f004 f8f4 	bl	80057d8 <HAL_TIM_PWM_Start>
}
 80015f0:	bf00      	nop
 80015f2:	bd80      	pop	{r7, pc}
 80015f4:	20005410 	.word	0x20005410

080015f8 <IR_Carrier_OFF>:
void IR_Carrier_OFF()
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Stop(&TIM_PWM_CARRIER, TIM_PWM_CARRIER_CHANNEL);
 80015fc:	2104      	movs	r1, #4
 80015fe:	4802      	ldr	r0, [pc, #8]	; (8001608 <IR_Carrier_OFF+0x10>)
 8001600:	f004 f9e4 	bl	80059cc <HAL_TIM_PWM_Stop>
}
 8001604:	bf00      	nop
 8001606:	bd80      	pop	{r7, pc}
 8001608:	20005410 	.word	0x20005410

0800160c <IR_Read>:
void IR_Read()
{
 800160c:	b480      	push	{r7}
 800160e:	af00      	add	r7, sp, #0
	IR_READ_flag = 1 ;
 8001610:	4b03      	ldr	r3, [pc, #12]	; (8001620 <IR_Read+0x14>)
 8001612:	2201      	movs	r2, #1
 8001614:	701a      	strb	r2, [r3, #0]
}
 8001616:	bf00      	nop
 8001618:	46bd      	mov	sp, r7
 800161a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161e:	4770      	bx	lr
 8001620:	20004f20 	.word	0x20004f20

08001624 <IR_sent>:
}
*/


void IR_sent(uint16_t *tijd, uint16_t lengte_sig)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b084      	sub	sp, #16
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
 800162c:	460b      	mov	r3, r1
 800162e:	807b      	strh	r3, [r7, #2]
	printf("lengte in IR_sent is %d en eerste tijdswaarden is %d\r\n", lengte_sig, tijd[0]);
 8001630:	8879      	ldrh	r1, [r7, #2]
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	881b      	ldrh	r3, [r3, #0]
 8001636:	461a      	mov	r2, r3
 8001638:	4825      	ldr	r0, [pc, #148]	; (80016d0 <IR_sent+0xac>)
 800163a:	f005 fd79 	bl	8007130 <iprintf>
   IR_READ_flag = 0; //er kan niks meer ingelezen worden
 800163e:	4b25      	ldr	r3, [pc, #148]	; (80016d4 <IR_sent+0xb0>)
 8001640:	2200      	movs	r2, #0
 8001642:	701a      	strb	r2, [r3, #0]
   for(uint8_t i = 0; i <= lengte_sig; i++)
 8001644:	2300      	movs	r3, #0
 8001646:	73fb      	strb	r3, [r7, #15]
 8001648:	e037      	b.n	80016ba <IR_sent+0x96>
   {

	   if((i%2)==0)
 800164a:	7bfb      	ldrb	r3, [r7, #15]
 800164c:	f003 0301 	and.w	r3, r3, #1
 8001650:	b2db      	uxtb	r3, r3
 8001652:	2b00      	cmp	r3, #0
 8001654:	d117      	bne.n	8001686 <IR_sent+0x62>
	   {
		   HAL_TIM_Base_Stop(&TIM_1us);
 8001656:	4820      	ldr	r0, [pc, #128]	; (80016d8 <IR_sent+0xb4>)
 8001658:	f004 f840 	bl	80056dc <HAL_TIM_Base_Stop>
		   TIM_1us.Instance->CNT = 0;
 800165c:	4b1e      	ldr	r3, [pc, #120]	; (80016d8 <IR_sent+0xb4>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	2200      	movs	r2, #0
 8001662:	625a      	str	r2, [r3, #36]	; 0x24
		   HAL_TIM_Base_Start(&TIM_1us);
 8001664:	481c      	ldr	r0, [pc, #112]	; (80016d8 <IR_sent+0xb4>)
 8001666:	f003 ffc9 	bl	80055fc <HAL_TIM_Base_Start>
		   IR_Carrier_ON();
 800166a:	f7ff ffbb 	bl	80015e4 <IR_Carrier_ON>
		   while((TIM_1us.Instance->CNT) <= tijd[i]){}
 800166e:	bf00      	nop
 8001670:	4b19      	ldr	r3, [pc, #100]	; (80016d8 <IR_sent+0xb4>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001676:	7bfa      	ldrb	r2, [r7, #15]
 8001678:	0052      	lsls	r2, r2, #1
 800167a:	6879      	ldr	r1, [r7, #4]
 800167c:	440a      	add	r2, r1
 800167e:	8812      	ldrh	r2, [r2, #0]
 8001680:	4293      	cmp	r3, r2
 8001682:	d9f5      	bls.n	8001670 <IR_sent+0x4c>
 8001684:	e016      	b.n	80016b4 <IR_sent+0x90>
	   }
	   else
	   {
		   HAL_TIM_Base_Stop(&TIM_1us);
 8001686:	4814      	ldr	r0, [pc, #80]	; (80016d8 <IR_sent+0xb4>)
 8001688:	f004 f828 	bl	80056dc <HAL_TIM_Base_Stop>
		   TIM_1us.Instance->CNT = 0;
 800168c:	4b12      	ldr	r3, [pc, #72]	; (80016d8 <IR_sent+0xb4>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	2200      	movs	r2, #0
 8001692:	625a      	str	r2, [r3, #36]	; 0x24
		   HAL_TIM_Base_Start(&TIM_1us);
 8001694:	4810      	ldr	r0, [pc, #64]	; (80016d8 <IR_sent+0xb4>)
 8001696:	f003 ffb1 	bl	80055fc <HAL_TIM_Base_Start>
		   IR_Carrier_OFF();
 800169a:	f7ff ffad 	bl	80015f8 <IR_Carrier_OFF>
		   while((TIM_1us.Instance->CNT) <= tijd[i]){}
 800169e:	bf00      	nop
 80016a0:	4b0d      	ldr	r3, [pc, #52]	; (80016d8 <IR_sent+0xb4>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016a6:	7bfa      	ldrb	r2, [r7, #15]
 80016a8:	0052      	lsls	r2, r2, #1
 80016aa:	6879      	ldr	r1, [r7, #4]
 80016ac:	440a      	add	r2, r1
 80016ae:	8812      	ldrh	r2, [r2, #0]
 80016b0:	4293      	cmp	r3, r2
 80016b2:	d9f5      	bls.n	80016a0 <IR_sent+0x7c>
   for(uint8_t i = 0; i <= lengte_sig; i++)
 80016b4:	7bfb      	ldrb	r3, [r7, #15]
 80016b6:	3301      	adds	r3, #1
 80016b8:	73fb      	strb	r3, [r7, #15]
 80016ba:	7bfb      	ldrb	r3, [r7, #15]
 80016bc:	b29b      	uxth	r3, r3
 80016be:	887a      	ldrh	r2, [r7, #2]
 80016c0:	429a      	cmp	r2, r3
 80016c2:	d2c2      	bcs.n	800164a <IR_sent+0x26>

	   }
   }
   IR_Carrier_OFF();
 80016c4:	f7ff ff98 	bl	80015f8 <IR_Carrier_OFF>
}
 80016c8:	bf00      	nop
 80016ca:	3710      	adds	r7, #16
 80016cc:	46bd      	mov	sp, r7
 80016ce:	bd80      	pop	{r7, pc}
 80016d0:	08008518 	.word	0x08008518
 80016d4:	20004f20 	.word	0x20004f20
 80016d8:	200053c4 	.word	0x200053c4

080016dc <InitTouch>:
#define Tim_Backlight htim10



void InitTouch()
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b088      	sub	sp, #32
 80016e0:	af02      	add	r7, sp, #8
	uint16_t device_address_write = 0xBA;
 80016e2:	23ba      	movs	r3, #186	; 0xba
 80016e4:	82fb      	strh	r3, [r7, #22]
	uint16_t device_address_read = 0xBB;
 80016e6:	23bb      	movs	r3, #187	; 0xbb
 80016e8:	82bb      	strh	r3, [r7, #20]
	uint8_t dataWrite[] = {0x81,0x40};
 80016ea:	f244 0381 	movw	r3, #16513	; 0x4081
 80016ee:	823b      	strh	r3, [r7, #16]
	uint8_t ontvangen[11];
	HAL_I2C_Master_Transmit(&hi2c1, device_address_write, 0, 0 , HAL_MAX_DELAY); //new
 80016f0:	8af9      	ldrh	r1, [r7, #22]
 80016f2:	f04f 33ff 	mov.w	r3, #4294967295
 80016f6:	9300      	str	r3, [sp, #0]
 80016f8:	2300      	movs	r3, #0
 80016fa:	2200      	movs	r2, #0
 80016fc:	480c      	ldr	r0, [pc, #48]	; (8001730 <InitTouch+0x54>)
 80016fe:	f001 fb45 	bl	8002d8c <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Transmit(&hi2c1, device_address_write, dataWrite, 2 , HAL_MAX_DELAY);
 8001702:	f107 0210 	add.w	r2, r7, #16
 8001706:	8af9      	ldrh	r1, [r7, #22]
 8001708:	f04f 33ff 	mov.w	r3, #4294967295
 800170c:	9300      	str	r3, [sp, #0]
 800170e:	2302      	movs	r3, #2
 8001710:	4807      	ldr	r0, [pc, #28]	; (8001730 <InitTouch+0x54>)
 8001712:	f001 fb3b 	bl	8002d8c <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1, device_address_read, ontvangen, 11, HAL_MAX_DELAY); //
 8001716:	1d3a      	adds	r2, r7, #4
 8001718:	8ab9      	ldrh	r1, [r7, #20]
 800171a:	f04f 33ff 	mov.w	r3, #4294967295
 800171e:	9300      	str	r3, [sp, #0]
 8001720:	230b      	movs	r3, #11
 8001722:	4803      	ldr	r0, [pc, #12]	; (8001730 <InitTouch+0x54>)
 8001724:	f001 fc26 	bl	8002f74 <HAL_I2C_Master_Receive>
}
 8001728:	bf00      	nop
 800172a:	3718      	adds	r7, #24
 800172c:	46bd      	mov	sp, r7
 800172e:	bd80      	pop	{r7, pc}
 8001730:	2000530c 	.word	0x2000530c

08001734 <Touch>:
void Touch(uint8_t *Sensingtouch, uint16_t *X_waarde, uint16_t *Y_waarde)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b08e      	sub	sp, #56	; 0x38
 8001738:	af04      	add	r7, sp, #16
 800173a:	60f8      	str	r0, [r7, #12]
 800173c:	60b9      	str	r1, [r7, #8]
 800173e:	607a      	str	r2, [r7, #4]
	uint16_t device_address_write = 0xBA;
 8001740:	23ba      	movs	r3, #186	; 0xba
 8001742:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint16_t device_address_read = 0xBB;
 8001744:	23bb      	movs	r3, #187	; 0xbb
 8001746:	84bb      	strh	r3, [r7, #36]	; 0x24
	uint8_t nulladdress = 0x00;
 8001748:	2300      	movs	r3, #0
 800174a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23





		HAL_Delay(5);
 800174e:	2005      	movs	r0, #5
 8001750:	f000 ff6c 	bl	800262c <HAL_Delay>
		HAL_I2C_Mem_Read(&myI2C, device_address_read, 0x814E, 2, buffer1, 1, HAL_MAX_DELAY);
 8001754:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 8001756:	f04f 33ff 	mov.w	r3, #4294967295
 800175a:	9302      	str	r3, [sp, #8]
 800175c:	2301      	movs	r3, #1
 800175e:	9301      	str	r3, [sp, #4]
 8001760:	f107 0314 	add.w	r3, r7, #20
 8001764:	9300      	str	r3, [sp, #0]
 8001766:	2302      	movs	r3, #2
 8001768:	f248 124e 	movw	r2, #33102	; 0x814e
 800176c:	482e      	ldr	r0, [pc, #184]	; (8001828 <Touch+0xf4>)
 800176e:	f001 fe0b 	bl	8003388 <HAL_I2C_Mem_Read>
		if(buffer1[0] != 0x00)
 8001772:	7d3b      	ldrb	r3, [r7, #20]
 8001774:	2b00      	cmp	r3, #0
 8001776:	d04d      	beq.n	8001814 <Touch+0xe0>
		{
			*Sensingtouch = 1;
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	2201      	movs	r2, #1
 800177c:	701a      	strb	r2, [r3, #0]
			HAL_I2C_Mem_Read(&myI2C, device_address_read, 0x814F, 2, buffer, 12, HAL_MAX_DELAY);
 800177e:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 8001780:	f04f 33ff 	mov.w	r3, #4294967295
 8001784:	9302      	str	r3, [sp, #8]
 8001786:	230c      	movs	r3, #12
 8001788:	9301      	str	r3, [sp, #4]
 800178a:	f107 0314 	add.w	r3, r7, #20
 800178e:	9300      	str	r3, [sp, #0]
 8001790:	2302      	movs	r3, #2
 8001792:	f248 124f 	movw	r2, #33103	; 0x814f
 8001796:	4824      	ldr	r0, [pc, #144]	; (8001828 <Touch+0xf4>)
 8001798:	f001 fdf6 	bl	8003388 <HAL_I2C_Mem_Read>
			if(buffer[4] == 1) //als buffer[3] het midden overschrijdt, dan gaat hij van 255 terug naar 0, en wordt buffer[4] op 1 gezet.
 800179c:	7e3b      	ldrb	r3, [r7, #24]
 800179e:	2b01      	cmp	r3, #1
 80017a0:	d106      	bne.n	80017b0 <Touch+0x7c>
			{
				*Y_waarde = 0xFF + buffer[3];
 80017a2:	7dfb      	ldrb	r3, [r7, #23]
 80017a4:	b29b      	uxth	r3, r3
 80017a6:	33ff      	adds	r3, #255	; 0xff
 80017a8:	b29a      	uxth	r2, r3
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	801a      	strh	r2, [r3, #0]
 80017ae:	e003      	b.n	80017b8 <Touch+0x84>
			}
			else
			{
				*Y_waarde = buffer[3];
 80017b0:	7dfb      	ldrb	r3, [r7, #23]
 80017b2:	b29a      	uxth	r2, r3
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	801a      	strh	r2, [r3, #0]
			}
			if(buffer[2] == 1)
 80017b8:	7dbb      	ldrb	r3, [r7, #22]
 80017ba:	2b01      	cmp	r3, #1
 80017bc:	d106      	bne.n	80017cc <Touch+0x98>
			{
				*X_waarde = 0xFF + buffer[1];
 80017be:	7d7b      	ldrb	r3, [r7, #21]
 80017c0:	b29b      	uxth	r3, r3
 80017c2:	33ff      	adds	r3, #255	; 0xff
 80017c4:	b29a      	uxth	r2, r3
 80017c6:	68bb      	ldr	r3, [r7, #8]
 80017c8:	801a      	strh	r2, [r3, #0]
 80017ca:	e003      	b.n	80017d4 <Touch+0xa0>
			}
			else
			{
				*X_waarde = buffer[1];
 80017cc:	7d7b      	ldrb	r3, [r7, #21]
 80017ce:	b29a      	uxth	r2, r3
 80017d0:	68bb      	ldr	r3, [r7, #8]
 80017d2:	801a      	strh	r2, [r3, #0]
			}
						if(UartScreen == 1)
 80017d4:	4b15      	ldr	r3, [pc, #84]	; (800182c <Touch+0xf8>)
 80017d6:	781b      	ldrb	r3, [r3, #0]
 80017d8:	2b01      	cmp	r3, #1
 80017da:	d10b      	bne.n	80017f4 <Touch+0xc0>
							{
						printf("X= %d\r\n", *X_waarde);
 80017dc:	68bb      	ldr	r3, [r7, #8]
 80017de:	881b      	ldrh	r3, [r3, #0]
 80017e0:	4619      	mov	r1, r3
 80017e2:	4813      	ldr	r0, [pc, #76]	; (8001830 <Touch+0xfc>)
 80017e4:	f005 fca4 	bl	8007130 <iprintf>
						printf("Y= %d\r\n", *Y_waarde);
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	881b      	ldrh	r3, [r3, #0]
 80017ec:	4619      	mov	r1, r3
 80017ee:	4811      	ldr	r0, [pc, #68]	; (8001834 <Touch+0x100>)
 80017f0:	f005 fc9e 	bl	8007130 <iprintf>
							}

			HAL_I2C_Mem_Write(&myI2C, device_address_write, 0x814E, 2, &nulladdress, 1, HAL_MAX_DELAY); //de flag uitzetten
 80017f4:	8cf9      	ldrh	r1, [r7, #38]	; 0x26
 80017f6:	f04f 33ff 	mov.w	r3, #4294967295
 80017fa:	9302      	str	r3, [sp, #8]
 80017fc:	2301      	movs	r3, #1
 80017fe:	9301      	str	r3, [sp, #4]
 8001800:	f107 0323 	add.w	r3, r7, #35	; 0x23
 8001804:	9300      	str	r3, [sp, #0]
 8001806:	2302      	movs	r3, #2
 8001808:	f248 124e 	movw	r2, #33102	; 0x814e
 800180c:	4806      	ldr	r0, [pc, #24]	; (8001828 <Touch+0xf4>)
 800180e:	f001 fca7 	bl	8003160 <HAL_I2C_Mem_Write>
 8001812:	e002      	b.n	800181a <Touch+0xe6>
		}
		else
		{
			*Sensingtouch = 0;
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	2200      	movs	r2, #0
 8001818:	701a      	strb	r2, [r3, #0]
		}
		HAL_Delay(100);
 800181a:	2064      	movs	r0, #100	; 0x64
 800181c:	f000 ff06 	bl	800262c <HAL_Delay>
		}
 8001820:	bf00      	nop
 8001822:	3728      	adds	r7, #40	; 0x28
 8001824:	46bd      	mov	sp, r7
 8001826:	bd80      	pop	{r7, pc}
 8001828:	2000530c 	.word	0x2000530c
 800182c:	20000000 	.word	0x20000000
 8001830:	08008550 	.word	0x08008550
 8001834:	08008558 	.word	0x08008558

08001838 <ReadDevice>:

void ReadDevice(uint8_t *device, uint16_t *X_w, uint16_t *Y_w)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b08a      	sub	sp, #40	; 0x28
 800183c:	af00      	add	r7, sp, #0
 800183e:	60f8      	str	r0, [r7, #12]
 8001840:	60b9      	str	r1, [r7, #8]
 8001842:	607a      	str	r2, [r7, #4]
	uint16_t X_waarde = *X_w;
 8001844:	68bb      	ldr	r3, [r7, #8]
 8001846:	881b      	ldrh	r3, [r3, #0]
 8001848:	84bb      	strh	r3, [r7, #36]	; 0x24
	uint16_t Y_waarde = *Y_w;
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	881b      	ldrh	r3, [r3, #0]
 800184e:	847b      	strh	r3, [r7, #34]	; 0x22
	const uint16_t X_waarde_knoppen[] = {0,80,160,240};
 8001850:	4a24      	ldr	r2, [pc, #144]	; (80018e4 <ReadDevice+0xac>)
 8001852:	f107 0318 	add.w	r3, r7, #24
 8001856:	e892 0003 	ldmia.w	r2, {r0, r1}
 800185a:	e883 0003 	stmia.w	r3, {r0, r1}
	const uint16_t Y_waarde_knoppen[] = {0,40};
 800185e:	2300      	movs	r3, #0
 8001860:	82bb      	strh	r3, [r7, #20]
 8001862:	2328      	movs	r3, #40	; 0x28
 8001864:	82fb      	strh	r3, [r7, #22]
	uint8_t apparaat = 0; //if device = 0 , dan is er geen device geselecteerd
 8001866:	2300      	movs	r3, #0
 8001868:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21

		for(uint8_t i = 1; i<= 4; i++)
 800186c:	2301      	movs	r3, #1
 800186e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001872:	e02d      	b.n	80018d0 <ReadDevice+0x98>
		{
		if((X_waarde >= X_waarde_knoppen[i-1])&&(X_waarde <=X_waarde_knoppen[i-1]+79)&&(Y_waarde >= Y_waarde_knoppen[0])&&(Y_waarde <=Y_waarde_knoppen[1]))
 8001874:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001878:	3b01      	subs	r3, #1
 800187a:	005b      	lsls	r3, r3, #1
 800187c:	3328      	adds	r3, #40	; 0x28
 800187e:	443b      	add	r3, r7
 8001880:	f833 3c10 	ldrh.w	r3, [r3, #-16]
 8001884:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001886:	429a      	cmp	r2, r3
 8001888:	d31d      	bcc.n	80018c6 <ReadDevice+0x8e>
 800188a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800188c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001890:	3b01      	subs	r3, #1
 8001892:	005b      	lsls	r3, r3, #1
 8001894:	3328      	adds	r3, #40	; 0x28
 8001896:	443b      	add	r3, r7
 8001898:	f833 3c10 	ldrh.w	r3, [r3, #-16]
 800189c:	334f      	adds	r3, #79	; 0x4f
 800189e:	429a      	cmp	r2, r3
 80018a0:	dc11      	bgt.n	80018c6 <ReadDevice+0x8e>
 80018a2:	8abb      	ldrh	r3, [r7, #20]
 80018a4:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80018a6:	429a      	cmp	r2, r3
 80018a8:	d30d      	bcc.n	80018c6 <ReadDevice+0x8e>
 80018aa:	8afb      	ldrh	r3, [r7, #22]
 80018ac:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80018ae:	429a      	cmp	r2, r3
 80018b0:	d809      	bhi.n	80018c6 <ReadDevice+0x8e>
		{
			*device = i;
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80018b8:	701a      	strb	r2, [r3, #0]
			printf("device %d\r\n", i);
 80018ba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80018be:	4619      	mov	r1, r3
 80018c0:	4809      	ldr	r0, [pc, #36]	; (80018e8 <ReadDevice+0xb0>)
 80018c2:	f005 fc35 	bl	8007130 <iprintf>
		for(uint8_t i = 1; i<= 4; i++)
 80018c6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80018ca:	3301      	adds	r3, #1
 80018cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80018d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80018d4:	2b04      	cmp	r3, #4
 80018d6:	d9cd      	bls.n	8001874 <ReadDevice+0x3c>

		}
		}


}
 80018d8:	bf00      	nop
 80018da:	bf00      	nop
 80018dc:	3728      	adds	r7, #40	; 0x28
 80018de:	46bd      	mov	sp, r7
 80018e0:	bd80      	pop	{r7, pc}
 80018e2:	bf00      	nop
 80018e4:	0800856c 	.word	0x0800856c
 80018e8:	08008560 	.word	0x08008560

080018ec <ReadButton>:
void ReadButton(uint8_t *button, uint16_t *X_w, uint16_t *Y_w){
 80018ec:	b5b0      	push	{r4, r5, r7, lr}
 80018ee:	b094      	sub	sp, #80	; 0x50
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	60f8      	str	r0, [r7, #12]
 80018f4:	60b9      	str	r1, [r7, #8]
 80018f6:	607a      	str	r2, [r7, #4]
	uint16_t X_waarde = *X_w;
 80018f8:	68bb      	ldr	r3, [r7, #8]
 80018fa:	881b      	ldrh	r3, [r3, #0]
 80018fc:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
	uint16_t Y_waarde = *Y_w;
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	881b      	ldrh	r3, [r3, #0]
 8001904:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
	const uint16_t X_waarde_knoppen[] = {23,219,121,23,121,219,121,23,23,121,219,219,23,219};
 8001908:	4b51      	ldr	r3, [pc, #324]	; (8001a50 <ReadButton+0x164>)
 800190a:	f107 042c 	add.w	r4, r7, #44	; 0x2c
 800190e:	461d      	mov	r5, r3
 8001910:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001912:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001914:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001918:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	const uint16_t Y_waarde_knoppen[] = {50,50,90,175,175,175,260,298,393,393,298,393,245,245};
 800191c:	4b4d      	ldr	r3, [pc, #308]	; (8001a54 <ReadButton+0x168>)
 800191e:	f107 0410 	add.w	r4, r7, #16
 8001922:	461d      	mov	r5, r3
 8001924:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001926:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001928:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800192c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	 * knop13: Add
	 * knop14: Delete
	 */


		for(uint8_t i = 1; i<= 14; i++)
 8001930:	2301      	movs	r3, #1
 8001932:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8001936:	e081      	b.n	8001a3c <ReadButton+0x150>
		{
			if(i <= 12)
 8001938:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800193c:	2b0c      	cmp	r3, #12
 800193e:	d83c      	bhi.n	80019ba <ReadButton+0xce>
			{
				//hier lees ik mijn touch uit
				if((X_waarde >= X_waarde_knoppen[i-1])&&(X_waarde <=X_waarde_knoppen[i-1]+75)&&(Y_waarde >= Y_waarde_knoppen[i-1])&&(Y_waarde <=Y_waarde_knoppen[i-1]+75))
 8001940:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001944:	3b01      	subs	r3, #1
 8001946:	005b      	lsls	r3, r3, #1
 8001948:	3350      	adds	r3, #80	; 0x50
 800194a:	443b      	add	r3, r7
 800194c:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 8001950:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 8001954:	429a      	cmp	r2, r3
 8001956:	d36c      	bcc.n	8001a32 <ReadButton+0x146>
 8001958:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 800195c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001960:	3b01      	subs	r3, #1
 8001962:	005b      	lsls	r3, r3, #1
 8001964:	3350      	adds	r3, #80	; 0x50
 8001966:	443b      	add	r3, r7
 8001968:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 800196c:	334b      	adds	r3, #75	; 0x4b
 800196e:	429a      	cmp	r2, r3
 8001970:	dc5f      	bgt.n	8001a32 <ReadButton+0x146>
 8001972:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001976:	3b01      	subs	r3, #1
 8001978:	005b      	lsls	r3, r3, #1
 800197a:	3350      	adds	r3, #80	; 0x50
 800197c:	443b      	add	r3, r7
 800197e:	f833 3c40 	ldrh.w	r3, [r3, #-64]
 8001982:	f8b7 204a 	ldrh.w	r2, [r7, #74]	; 0x4a
 8001986:	429a      	cmp	r2, r3
 8001988:	d353      	bcc.n	8001a32 <ReadButton+0x146>
 800198a:	f8b7 204a 	ldrh.w	r2, [r7, #74]	; 0x4a
 800198e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001992:	3b01      	subs	r3, #1
 8001994:	005b      	lsls	r3, r3, #1
 8001996:	3350      	adds	r3, #80	; 0x50
 8001998:	443b      	add	r3, r7
 800199a:	f833 3c40 	ldrh.w	r3, [r3, #-64]
 800199e:	334b      	adds	r3, #75	; 0x4b
 80019a0:	429a      	cmp	r2, r3
 80019a2:	dc46      	bgt.n	8001a32 <ReadButton+0x146>
				{

					*button = i;
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 80019aa:	701a      	strb	r2, [r3, #0]
					printf("geduwd op button %d\r\n", i);
 80019ac:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80019b0:	4619      	mov	r1, r3
 80019b2:	4829      	ldr	r0, [pc, #164]	; (8001a58 <ReadButton+0x16c>)
 80019b4:	f005 fbbc 	bl	8007130 <iprintf>
 80019b8:	e03b      	b.n	8001a32 <ReadButton+0x146>
				}
			}
			else
			{
				if((X_waarde >= X_waarde_knoppen[i-1])&&(X_waarde <=X_waarde_knoppen[i-1]+75)&&(Y_waarde >= Y_waarde_knoppen[i-1])&&(Y_waarde <=Y_waarde_knoppen[i-1]+48))
 80019ba:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80019be:	3b01      	subs	r3, #1
 80019c0:	005b      	lsls	r3, r3, #1
 80019c2:	3350      	adds	r3, #80	; 0x50
 80019c4:	443b      	add	r3, r7
 80019c6:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 80019ca:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 80019ce:	429a      	cmp	r2, r3
 80019d0:	d32f      	bcc.n	8001a32 <ReadButton+0x146>
 80019d2:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 80019d6:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80019da:	3b01      	subs	r3, #1
 80019dc:	005b      	lsls	r3, r3, #1
 80019de:	3350      	adds	r3, #80	; 0x50
 80019e0:	443b      	add	r3, r7
 80019e2:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 80019e6:	334b      	adds	r3, #75	; 0x4b
 80019e8:	429a      	cmp	r2, r3
 80019ea:	dc22      	bgt.n	8001a32 <ReadButton+0x146>
 80019ec:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80019f0:	3b01      	subs	r3, #1
 80019f2:	005b      	lsls	r3, r3, #1
 80019f4:	3350      	adds	r3, #80	; 0x50
 80019f6:	443b      	add	r3, r7
 80019f8:	f833 3c40 	ldrh.w	r3, [r3, #-64]
 80019fc:	f8b7 204a 	ldrh.w	r2, [r7, #74]	; 0x4a
 8001a00:	429a      	cmp	r2, r3
 8001a02:	d316      	bcc.n	8001a32 <ReadButton+0x146>
 8001a04:	f8b7 204a 	ldrh.w	r2, [r7, #74]	; 0x4a
 8001a08:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001a0c:	3b01      	subs	r3, #1
 8001a0e:	005b      	lsls	r3, r3, #1
 8001a10:	3350      	adds	r3, #80	; 0x50
 8001a12:	443b      	add	r3, r7
 8001a14:	f833 3c40 	ldrh.w	r3, [r3, #-64]
 8001a18:	3330      	adds	r3, #48	; 0x30
 8001a1a:	429a      	cmp	r2, r3
 8001a1c:	dc09      	bgt.n	8001a32 <ReadButton+0x146>
				{

				*button = i;
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 8001a24:	701a      	strb	r2, [r3, #0]
				printf("geduwd op button %d\r\n", i);
 8001a26:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001a2a:	4619      	mov	r1, r3
 8001a2c:	480a      	ldr	r0, [pc, #40]	; (8001a58 <ReadButton+0x16c>)
 8001a2e:	f005 fb7f 	bl	8007130 <iprintf>
		for(uint8_t i = 1; i<= 14; i++)
 8001a32:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001a36:	3301      	adds	r3, #1
 8001a38:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8001a3c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001a40:	2b0e      	cmp	r3, #14
 8001a42:	f67f af79 	bls.w	8001938 <ReadButton+0x4c>
				}
			}
		}

}
 8001a46:	bf00      	nop
 8001a48:	bf00      	nop
 8001a4a:	3750      	adds	r7, #80	; 0x50
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	bdb0      	pop	{r4, r5, r7, pc}
 8001a50:	0800858c 	.word	0x0800858c
 8001a54:	080085a8 	.word	0x080085a8
 8001a58:	08008574 	.word	0x08008574

08001a5c <_write>:
/* USER CODE BEGIN 0 */
#include <errno.h>
#include <sys/stat.h>
#include <sys/times.h>
#include <sys/unistd.h>
int _write(int file, char *ptr, int len) {
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b086      	sub	sp, #24
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	60f8      	str	r0, [r7, #12]
 8001a64:	60b9      	str	r1, [r7, #8]
 8001a66:	607a      	str	r2, [r7, #4]
    HAL_StatusTypeDef xStatus;
    switch (file) {
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	2b01      	cmp	r3, #1
 8001a6c:	d003      	beq.n	8001a76 <_write+0x1a>
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	2b02      	cmp	r3, #2
 8001a72:	d015      	beq.n	8001aa0 <_write+0x44>
 8001a74:	e029      	b.n	8001aca <_write+0x6e>
    case STDOUT_FILENO: /*stdout*/
		xStatus = HAL_UART_Transmit(&huart1, (uint8_t*)ptr, len, HAL_MAX_DELAY);
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	b29a      	uxth	r2, r3
 8001a7a:	f04f 33ff 	mov.w	r3, #4294967295
 8001a7e:	68b9      	ldr	r1, [r7, #8]
 8001a80:	481a      	ldr	r0, [pc, #104]	; (8001aec <_write+0x90>)
 8001a82:	f004 fe9b 	bl	80067bc <HAL_UART_Transmit>
 8001a86:	4603      	mov	r3, r0
 8001a88:	75fb      	strb	r3, [r7, #23]
		if (xStatus != HAL_OK) {
 8001a8a:	7dfb      	ldrb	r3, [r7, #23]
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d024      	beq.n	8001ada <_write+0x7e>
			errno = EIO;
 8001a90:	f005 fb1c 	bl	80070cc <__errno>
 8001a94:	4603      	mov	r3, r0
 8001a96:	2205      	movs	r2, #5
 8001a98:	601a      	str	r2, [r3, #0]
			return -1;
 8001a9a:	f04f 33ff 	mov.w	r3, #4294967295
 8001a9e:	e020      	b.n	8001ae2 <_write+0x86>
		}
        break;
    case STDERR_FILENO: /* stderr */
		xStatus = HAL_UART_Transmit(&huart1, (uint8_t*)ptr, len, HAL_MAX_DELAY);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	b29a      	uxth	r2, r3
 8001aa4:	f04f 33ff 	mov.w	r3, #4294967295
 8001aa8:	68b9      	ldr	r1, [r7, #8]
 8001aaa:	4810      	ldr	r0, [pc, #64]	; (8001aec <_write+0x90>)
 8001aac:	f004 fe86 	bl	80067bc <HAL_UART_Transmit>
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	75fb      	strb	r3, [r7, #23]
		if (xStatus != HAL_OK) {
 8001ab4:	7dfb      	ldrb	r3, [r7, #23]
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d011      	beq.n	8001ade <_write+0x82>
			errno = EIO;
 8001aba:	f005 fb07 	bl	80070cc <__errno>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	2205      	movs	r2, #5
 8001ac2:	601a      	str	r2, [r3, #0]
			return -1;
 8001ac4:	f04f 33ff 	mov.w	r3, #4294967295
 8001ac8:	e00b      	b.n	8001ae2 <_write+0x86>
		}
        break;
    default:
        errno = EBADF;
 8001aca:	f005 faff 	bl	80070cc <__errno>
 8001ace:	4603      	mov	r3, r0
 8001ad0:	2209      	movs	r2, #9
 8001ad2:	601a      	str	r2, [r3, #0]
        return -1;
 8001ad4:	f04f 33ff 	mov.w	r3, #4294967295
 8001ad8:	e003      	b.n	8001ae2 <_write+0x86>
        break;
 8001ada:	bf00      	nop
 8001adc:	e000      	b.n	8001ae0 <_write+0x84>
        break;
 8001ade:	bf00      	nop
    }
    return len;
 8001ae0:	687b      	ldr	r3, [r7, #4]
}
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	3718      	adds	r7, #24
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bd80      	pop	{r7, pc}
 8001aea:	bf00      	nop
 8001aec:	2000545c 	.word	0x2000545c

08001af0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001af4:	f000 fd3d 	bl	8002572 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001af8:	f000 f812 	bl	8001b20 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001afc:	f000 f9ce 	bl	8001e9c <MX_GPIO_Init>
  MX_SPI2_Init();
 8001b00:	f000 f8b6 	bl	8001c70 <MX_SPI2_Init>
  MX_USART1_UART_Init();
 8001b04:	f000 f99a 	bl	8001e3c <MX_USART1_UART_Init>
  MX_I2C1_Init();
 8001b08:	f000 f872 	bl	8001bf0 <MX_I2C1_Init>
  MX_TIM3_Init();
 8001b0c:	f000 f93c 	bl	8001d88 <MX_TIM3_Init>
  MX_TIM2_Init();
 8001b10:	f000 f8ec 	bl	8001cec <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  All_Carl_Inits();
 8001b14:	f7fe fd80 	bl	8000618 <All_Carl_Inits>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  whilelus();
 8001b18:	f7fe fe28 	bl	800076c <whilelus>
 8001b1c:	e7fc      	b.n	8001b18 <main+0x28>
	...

08001b20 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b094      	sub	sp, #80	; 0x50
 8001b24:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b26:	f107 0320 	add.w	r3, r7, #32
 8001b2a:	2230      	movs	r2, #48	; 0x30
 8001b2c:	2100      	movs	r1, #0
 8001b2e:	4618      	mov	r0, r3
 8001b30:	f005 faf6 	bl	8007120 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b34:	f107 030c 	add.w	r3, r7, #12
 8001b38:	2200      	movs	r2, #0
 8001b3a:	601a      	str	r2, [r3, #0]
 8001b3c:	605a      	str	r2, [r3, #4]
 8001b3e:	609a      	str	r2, [r3, #8]
 8001b40:	60da      	str	r2, [r3, #12]
 8001b42:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b44:	4b28      	ldr	r3, [pc, #160]	; (8001be8 <SystemClock_Config+0xc8>)
 8001b46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b48:	4a27      	ldr	r2, [pc, #156]	; (8001be8 <SystemClock_Config+0xc8>)
 8001b4a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b4e:	6413      	str	r3, [r2, #64]	; 0x40
 8001b50:	4b25      	ldr	r3, [pc, #148]	; (8001be8 <SystemClock_Config+0xc8>)
 8001b52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b58:	60bb      	str	r3, [r7, #8]
 8001b5a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001b5c:	4b23      	ldr	r3, [pc, #140]	; (8001bec <SystemClock_Config+0xcc>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001b64:	4a21      	ldr	r2, [pc, #132]	; (8001bec <SystemClock_Config+0xcc>)
 8001b66:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b6a:	6013      	str	r3, [r2, #0]
 8001b6c:	4b1f      	ldr	r3, [pc, #124]	; (8001bec <SystemClock_Config+0xcc>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001b74:	607b      	str	r3, [r7, #4]
 8001b76:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001b78:	2302      	movs	r3, #2
 8001b7a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001b7c:	2301      	movs	r3, #1
 8001b7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001b80:	2310      	movs	r3, #16
 8001b82:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b84:	2302      	movs	r3, #2
 8001b86:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001b88:	2300      	movs	r3, #0
 8001b8a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001b8c:	2308      	movs	r3, #8
 8001b8e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 64;
 8001b90:	2340      	movs	r3, #64	; 0x40
 8001b92:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001b94:	2302      	movs	r3, #2
 8001b96:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001b98:	2302      	movs	r3, #2
 8001b9a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b9c:	f107 0320 	add.w	r3, r7, #32
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	f002 f8b7 	bl	8003d14 <HAL_RCC_OscConfig>
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d001      	beq.n	8001bb0 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8001bac:	f000 fa08 	bl	8001fc0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001bb0:	230f      	movs	r3, #15
 8001bb2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001bb4:	2302      	movs	r3, #2
 8001bb6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001bb8:	2300      	movs	r3, #0
 8001bba:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001bbc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001bc0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001bc2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001bc6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001bc8:	f107 030c 	add.w	r3, r7, #12
 8001bcc:	2102      	movs	r1, #2
 8001bce:	4618      	mov	r0, r3
 8001bd0:	f002 fb44 	bl	800425c <HAL_RCC_ClockConfig>
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d001      	beq.n	8001bde <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8001bda:	f000 f9f1 	bl	8001fc0 <Error_Handler>
  }
}
 8001bde:	bf00      	nop
 8001be0:	3750      	adds	r7, #80	; 0x50
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bd80      	pop	{r7, pc}
 8001be6:	bf00      	nop
 8001be8:	40023800 	.word	0x40023800
 8001bec:	40007000 	.word	0x40007000

08001bf0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001bf4:	4b1b      	ldr	r3, [pc, #108]	; (8001c64 <MX_I2C1_Init+0x74>)
 8001bf6:	4a1c      	ldr	r2, [pc, #112]	; (8001c68 <MX_I2C1_Init+0x78>)
 8001bf8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 8001bfa:	4b1a      	ldr	r3, [pc, #104]	; (8001c64 <MX_I2C1_Init+0x74>)
 8001bfc:	4a1b      	ldr	r2, [pc, #108]	; (8001c6c <MX_I2C1_Init+0x7c>)
 8001bfe:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001c00:	4b18      	ldr	r3, [pc, #96]	; (8001c64 <MX_I2C1_Init+0x74>)
 8001c02:	2200      	movs	r2, #0
 8001c04:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001c06:	4b17      	ldr	r3, [pc, #92]	; (8001c64 <MX_I2C1_Init+0x74>)
 8001c08:	2201      	movs	r2, #1
 8001c0a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001c0c:	4b15      	ldr	r3, [pc, #84]	; (8001c64 <MX_I2C1_Init+0x74>)
 8001c0e:	2200      	movs	r2, #0
 8001c10:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001c12:	4b14      	ldr	r3, [pc, #80]	; (8001c64 <MX_I2C1_Init+0x74>)
 8001c14:	2200      	movs	r2, #0
 8001c16:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001c18:	4b12      	ldr	r3, [pc, #72]	; (8001c64 <MX_I2C1_Init+0x74>)
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001c1e:	4b11      	ldr	r3, [pc, #68]	; (8001c64 <MX_I2C1_Init+0x74>)
 8001c20:	2200      	movs	r2, #0
 8001c22:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001c24:	4b0f      	ldr	r3, [pc, #60]	; (8001c64 <MX_I2C1_Init+0x74>)
 8001c26:	2200      	movs	r2, #0
 8001c28:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001c2a:	480e      	ldr	r0, [pc, #56]	; (8001c64 <MX_I2C1_Init+0x74>)
 8001c2c:	f001 f81e 	bl	8002c6c <HAL_I2C_Init>
 8001c30:	4603      	mov	r3, r0
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d001      	beq.n	8001c3a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001c36:	f000 f9c3 	bl	8001fc0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001c3a:	2100      	movs	r1, #0
 8001c3c:	4809      	ldr	r0, [pc, #36]	; (8001c64 <MX_I2C1_Init+0x74>)
 8001c3e:	f001 ffd1 	bl	8003be4 <HAL_I2CEx_ConfigAnalogFilter>
 8001c42:	4603      	mov	r3, r0
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d001      	beq.n	8001c4c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001c48:	f000 f9ba 	bl	8001fc0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001c4c:	2100      	movs	r1, #0
 8001c4e:	4805      	ldr	r0, [pc, #20]	; (8001c64 <MX_I2C1_Init+0x74>)
 8001c50:	f002 f813 	bl	8003c7a <HAL_I2CEx_ConfigDigitalFilter>
 8001c54:	4603      	mov	r3, r0
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d001      	beq.n	8001c5e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001c5a:	f000 f9b1 	bl	8001fc0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001c5e:	bf00      	nop
 8001c60:	bd80      	pop	{r7, pc}
 8001c62:	bf00      	nop
 8001c64:	2000530c 	.word	0x2000530c
 8001c68:	40005400 	.word	0x40005400
 8001c6c:	00707cbb 	.word	0x00707cbb

08001c70 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001c74:	4b1b      	ldr	r3, [pc, #108]	; (8001ce4 <MX_SPI2_Init+0x74>)
 8001c76:	4a1c      	ldr	r2, [pc, #112]	; (8001ce8 <MX_SPI2_Init+0x78>)
 8001c78:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001c7a:	4b1a      	ldr	r3, [pc, #104]	; (8001ce4 <MX_SPI2_Init+0x74>)
 8001c7c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001c80:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001c82:	4b18      	ldr	r3, [pc, #96]	; (8001ce4 <MX_SPI2_Init+0x74>)
 8001c84:	2200      	movs	r2, #0
 8001c86:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001c88:	4b16      	ldr	r3, [pc, #88]	; (8001ce4 <MX_SPI2_Init+0x74>)
 8001c8a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001c8e:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001c90:	4b14      	ldr	r3, [pc, #80]	; (8001ce4 <MX_SPI2_Init+0x74>)
 8001c92:	2200      	movs	r2, #0
 8001c94:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001c96:	4b13      	ldr	r3, [pc, #76]	; (8001ce4 <MX_SPI2_Init+0x74>)
 8001c98:	2200      	movs	r2, #0
 8001c9a:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001c9c:	4b11      	ldr	r3, [pc, #68]	; (8001ce4 <MX_SPI2_Init+0x74>)
 8001c9e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ca2:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001ca4:	4b0f      	ldr	r3, [pc, #60]	; (8001ce4 <MX_SPI2_Init+0x74>)
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001caa:	4b0e      	ldr	r3, [pc, #56]	; (8001ce4 <MX_SPI2_Init+0x74>)
 8001cac:	2200      	movs	r2, #0
 8001cae:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001cb0:	4b0c      	ldr	r3, [pc, #48]	; (8001ce4 <MX_SPI2_Init+0x74>)
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001cb6:	4b0b      	ldr	r3, [pc, #44]	; (8001ce4 <MX_SPI2_Init+0x74>)
 8001cb8:	2200      	movs	r2, #0
 8001cba:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8001cbc:	4b09      	ldr	r3, [pc, #36]	; (8001ce4 <MX_SPI2_Init+0x74>)
 8001cbe:	2207      	movs	r2, #7
 8001cc0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001cc2:	4b08      	ldr	r3, [pc, #32]	; (8001ce4 <MX_SPI2_Init+0x74>)
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001cc8:	4b06      	ldr	r3, [pc, #24]	; (8001ce4 <MX_SPI2_Init+0x74>)
 8001cca:	2208      	movs	r2, #8
 8001ccc:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001cce:	4805      	ldr	r0, [pc, #20]	; (8001ce4 <MX_SPI2_Init+0x74>)
 8001cd0:	f003 f89a 	bl	8004e08 <HAL_SPI_Init>
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d001      	beq.n	8001cde <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8001cda:	f000 f971 	bl	8001fc0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001cde:	bf00      	nop
 8001ce0:	bd80      	pop	{r7, pc}
 8001ce2:	bf00      	nop
 8001ce4:	20005360 	.word	0x20005360
 8001ce8:	40003800 	.word	0x40003800

08001cec <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b088      	sub	sp, #32
 8001cf0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001cf2:	f107 0310 	add.w	r3, r7, #16
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	601a      	str	r2, [r3, #0]
 8001cfa:	605a      	str	r2, [r3, #4]
 8001cfc:	609a      	str	r2, [r3, #8]
 8001cfe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d00:	1d3b      	adds	r3, r7, #4
 8001d02:	2200      	movs	r2, #0
 8001d04:	601a      	str	r2, [r3, #0]
 8001d06:	605a      	str	r2, [r3, #4]
 8001d08:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001d0a:	4b1e      	ldr	r3, [pc, #120]	; (8001d84 <MX_TIM2_Init+0x98>)
 8001d0c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001d10:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 64-1;
 8001d12:	4b1c      	ldr	r3, [pc, #112]	; (8001d84 <MX_TIM2_Init+0x98>)
 8001d14:	223f      	movs	r2, #63	; 0x3f
 8001d16:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d18:	4b1a      	ldr	r3, [pc, #104]	; (8001d84 <MX_TIM2_Init+0x98>)
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001d1e:	4b19      	ldr	r3, [pc, #100]	; (8001d84 <MX_TIM2_Init+0x98>)
 8001d20:	f04f 32ff 	mov.w	r2, #4294967295
 8001d24:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d26:	4b17      	ldr	r3, [pc, #92]	; (8001d84 <MX_TIM2_Init+0x98>)
 8001d28:	2200      	movs	r2, #0
 8001d2a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001d2c:	4b15      	ldr	r3, [pc, #84]	; (8001d84 <MX_TIM2_Init+0x98>)
 8001d2e:	2280      	movs	r2, #128	; 0x80
 8001d30:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001d32:	4814      	ldr	r0, [pc, #80]	; (8001d84 <MX_TIM2_Init+0x98>)
 8001d34:	f003 fc0a 	bl	800554c <HAL_TIM_Base_Init>
 8001d38:	4603      	mov	r3, r0
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d001      	beq.n	8001d42 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001d3e:	f000 f93f 	bl	8001fc0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d42:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d46:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001d48:	f107 0310 	add.w	r3, r7, #16
 8001d4c:	4619      	mov	r1, r3
 8001d4e:	480d      	ldr	r0, [pc, #52]	; (8001d84 <MX_TIM2_Init+0x98>)
 8001d50:	f003 ffd0 	bl	8005cf4 <HAL_TIM_ConfigClockSource>
 8001d54:	4603      	mov	r3, r0
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d001      	beq.n	8001d5e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001d5a:	f000 f931 	bl	8001fc0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d5e:	2300      	movs	r3, #0
 8001d60:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d62:	2300      	movs	r3, #0
 8001d64:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001d66:	1d3b      	adds	r3, r7, #4
 8001d68:	4619      	mov	r1, r3
 8001d6a:	4806      	ldr	r0, [pc, #24]	; (8001d84 <MX_TIM2_Init+0x98>)
 8001d6c:	f004 fc4a 	bl	8006604 <HAL_TIMEx_MasterConfigSynchronization>
 8001d70:	4603      	mov	r3, r0
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d001      	beq.n	8001d7a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001d76:	f000 f923 	bl	8001fc0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001d7a:	bf00      	nop
 8001d7c:	3720      	adds	r7, #32
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bd80      	pop	{r7, pc}
 8001d82:	bf00      	nop
 8001d84:	200053c4 	.word	0x200053c4

08001d88 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b08a      	sub	sp, #40	; 0x28
 8001d8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d8e:	f107 031c 	add.w	r3, r7, #28
 8001d92:	2200      	movs	r2, #0
 8001d94:	601a      	str	r2, [r3, #0]
 8001d96:	605a      	str	r2, [r3, #4]
 8001d98:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001d9a:	463b      	mov	r3, r7
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	601a      	str	r2, [r3, #0]
 8001da0:	605a      	str	r2, [r3, #4]
 8001da2:	609a      	str	r2, [r3, #8]
 8001da4:	60da      	str	r2, [r3, #12]
 8001da6:	611a      	str	r2, [r3, #16]
 8001da8:	615a      	str	r2, [r3, #20]
 8001daa:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001dac:	4b21      	ldr	r3, [pc, #132]	; (8001e34 <MX_TIM3_Init+0xac>)
 8001dae:	4a22      	ldr	r2, [pc, #136]	; (8001e38 <MX_TIM3_Init+0xb0>)
 8001db0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 4-1;
 8001db2:	4b20      	ldr	r3, [pc, #128]	; (8001e34 <MX_TIM3_Init+0xac>)
 8001db4:	2203      	movs	r2, #3
 8001db6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001db8:	4b1e      	ldr	r3, [pc, #120]	; (8001e34 <MX_TIM3_Init+0xac>)
 8001dba:	2200      	movs	r2, #0
 8001dbc:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 422-1;
 8001dbe:	4b1d      	ldr	r3, [pc, #116]	; (8001e34 <MX_TIM3_Init+0xac>)
 8001dc0:	f240 12a5 	movw	r2, #421	; 0x1a5
 8001dc4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001dc6:	4b1b      	ldr	r3, [pc, #108]	; (8001e34 <MX_TIM3_Init+0xac>)
 8001dc8:	2200      	movs	r2, #0
 8001dca:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001dcc:	4b19      	ldr	r3, [pc, #100]	; (8001e34 <MX_TIM3_Init+0xac>)
 8001dce:	2280      	movs	r2, #128	; 0x80
 8001dd0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001dd2:	4818      	ldr	r0, [pc, #96]	; (8001e34 <MX_TIM3_Init+0xac>)
 8001dd4:	f003 fca9 	bl	800572a <HAL_TIM_PWM_Init>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d001      	beq.n	8001de2 <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8001dde:	f000 f8ef 	bl	8001fc0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001de2:	2300      	movs	r3, #0
 8001de4:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001de6:	2300      	movs	r3, #0
 8001de8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001dea:	f107 031c 	add.w	r3, r7, #28
 8001dee:	4619      	mov	r1, r3
 8001df0:	4810      	ldr	r0, [pc, #64]	; (8001e34 <MX_TIM3_Init+0xac>)
 8001df2:	f004 fc07 	bl	8006604 <HAL_TIMEx_MasterConfigSynchronization>
 8001df6:	4603      	mov	r3, r0
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d001      	beq.n	8001e00 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8001dfc:	f000 f8e0 	bl	8001fc0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001e00:	2360      	movs	r3, #96	; 0x60
 8001e02:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 211-1;
 8001e04:	23d2      	movs	r3, #210	; 0xd2
 8001e06:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001e08:	2300      	movs	r3, #0
 8001e0a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001e10:	463b      	mov	r3, r7
 8001e12:	2204      	movs	r2, #4
 8001e14:	4619      	mov	r1, r3
 8001e16:	4807      	ldr	r0, [pc, #28]	; (8001e34 <MX_TIM3_Init+0xac>)
 8001e18:	f003 fe58 	bl	8005acc <HAL_TIM_PWM_ConfigChannel>
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d001      	beq.n	8001e26 <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8001e22:	f000 f8cd 	bl	8001fc0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001e26:	4803      	ldr	r0, [pc, #12]	; (8001e34 <MX_TIM3_Init+0xac>)
 8001e28:	f000 f9f4 	bl	8002214 <HAL_TIM_MspPostInit>

}
 8001e2c:	bf00      	nop
 8001e2e:	3728      	adds	r7, #40	; 0x28
 8001e30:	46bd      	mov	sp, r7
 8001e32:	bd80      	pop	{r7, pc}
 8001e34:	20005410 	.word	0x20005410
 8001e38:	40000400 	.word	0x40000400

08001e3c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001e40:	4b14      	ldr	r3, [pc, #80]	; (8001e94 <MX_USART1_UART_Init+0x58>)
 8001e42:	4a15      	ldr	r2, [pc, #84]	; (8001e98 <MX_USART1_UART_Init+0x5c>)
 8001e44:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001e46:	4b13      	ldr	r3, [pc, #76]	; (8001e94 <MX_USART1_UART_Init+0x58>)
 8001e48:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001e4c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001e4e:	4b11      	ldr	r3, [pc, #68]	; (8001e94 <MX_USART1_UART_Init+0x58>)
 8001e50:	2200      	movs	r2, #0
 8001e52:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001e54:	4b0f      	ldr	r3, [pc, #60]	; (8001e94 <MX_USART1_UART_Init+0x58>)
 8001e56:	2200      	movs	r2, #0
 8001e58:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001e5a:	4b0e      	ldr	r3, [pc, #56]	; (8001e94 <MX_USART1_UART_Init+0x58>)
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001e60:	4b0c      	ldr	r3, [pc, #48]	; (8001e94 <MX_USART1_UART_Init+0x58>)
 8001e62:	220c      	movs	r2, #12
 8001e64:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e66:	4b0b      	ldr	r3, [pc, #44]	; (8001e94 <MX_USART1_UART_Init+0x58>)
 8001e68:	2200      	movs	r2, #0
 8001e6a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e6c:	4b09      	ldr	r3, [pc, #36]	; (8001e94 <MX_USART1_UART_Init+0x58>)
 8001e6e:	2200      	movs	r2, #0
 8001e70:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001e72:	4b08      	ldr	r3, [pc, #32]	; (8001e94 <MX_USART1_UART_Init+0x58>)
 8001e74:	2200      	movs	r2, #0
 8001e76:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001e78:	4b06      	ldr	r3, [pc, #24]	; (8001e94 <MX_USART1_UART_Init+0x58>)
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001e7e:	4805      	ldr	r0, [pc, #20]	; (8001e94 <MX_USART1_UART_Init+0x58>)
 8001e80:	f004 fc4e 	bl	8006720 <HAL_UART_Init>
 8001e84:	4603      	mov	r3, r0
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d001      	beq.n	8001e8e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001e8a:	f000 f899 	bl	8001fc0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001e8e:	bf00      	nop
 8001e90:	bd80      	pop	{r7, pc}
 8001e92:	bf00      	nop
 8001e94:	2000545c 	.word	0x2000545c
 8001e98:	40011000 	.word	0x40011000

08001e9c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b08a      	sub	sp, #40	; 0x28
 8001ea0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ea2:	f107 0314 	add.w	r3, r7, #20
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	601a      	str	r2, [r3, #0]
 8001eaa:	605a      	str	r2, [r3, #4]
 8001eac:	609a      	str	r2, [r3, #8]
 8001eae:	60da      	str	r2, [r3, #12]
 8001eb0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001eb2:	4b40      	ldr	r3, [pc, #256]	; (8001fb4 <MX_GPIO_Init+0x118>)
 8001eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eb6:	4a3f      	ldr	r2, [pc, #252]	; (8001fb4 <MX_GPIO_Init+0x118>)
 8001eb8:	f043 0302 	orr.w	r3, r3, #2
 8001ebc:	6313      	str	r3, [r2, #48]	; 0x30
 8001ebe:	4b3d      	ldr	r3, [pc, #244]	; (8001fb4 <MX_GPIO_Init+0x118>)
 8001ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ec2:	f003 0302 	and.w	r3, r3, #2
 8001ec6:	613b      	str	r3, [r7, #16]
 8001ec8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8001eca:	4b3a      	ldr	r3, [pc, #232]	; (8001fb4 <MX_GPIO_Init+0x118>)
 8001ecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ece:	4a39      	ldr	r2, [pc, #228]	; (8001fb4 <MX_GPIO_Init+0x118>)
 8001ed0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ed4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ed6:	4b37      	ldr	r3, [pc, #220]	; (8001fb4 <MX_GPIO_Init+0x118>)
 8001ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ede:	60fb      	str	r3, [r7, #12]
 8001ee0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ee2:	4b34      	ldr	r3, [pc, #208]	; (8001fb4 <MX_GPIO_Init+0x118>)
 8001ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ee6:	4a33      	ldr	r2, [pc, #204]	; (8001fb4 <MX_GPIO_Init+0x118>)
 8001ee8:	f043 0301 	orr.w	r3, r3, #1
 8001eec:	6313      	str	r3, [r2, #48]	; 0x30
 8001eee:	4b31      	ldr	r3, [pc, #196]	; (8001fb4 <MX_GPIO_Init+0x118>)
 8001ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ef2:	f003 0301 	and.w	r3, r3, #1
 8001ef6:	60bb      	str	r3, [r7, #8]
 8001ef8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001efa:	4b2e      	ldr	r3, [pc, #184]	; (8001fb4 <MX_GPIO_Init+0x118>)
 8001efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001efe:	4a2d      	ldr	r2, [pc, #180]	; (8001fb4 <MX_GPIO_Init+0x118>)
 8001f00:	f043 0304 	orr.w	r3, r3, #4
 8001f04:	6313      	str	r3, [r2, #48]	; 0x30
 8001f06:	4b2b      	ldr	r3, [pc, #172]	; (8001fb4 <MX_GPIO_Init+0x118>)
 8001f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f0a:	f003 0304 	and.w	r3, r3, #4
 8001f0e:	607b      	str	r3, [r7, #4]
 8001f10:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001f12:	4b28      	ldr	r3, [pc, #160]	; (8001fb4 <MX_GPIO_Init+0x118>)
 8001f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f16:	4a27      	ldr	r2, [pc, #156]	; (8001fb4 <MX_GPIO_Init+0x118>)
 8001f18:	f043 0320 	orr.w	r3, r3, #32
 8001f1c:	6313      	str	r3, [r2, #48]	; 0x30
 8001f1e:	4b25      	ldr	r3, [pc, #148]	; (8001fb4 <MX_GPIO_Init+0x118>)
 8001f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f22:	f003 0320 	and.w	r3, r3, #32
 8001f26:	603b      	str	r3, [r7, #0]
 8001f28:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DISPLAY_CS_GPIO_Port, DISPLAY_CS_Pin, GPIO_PIN_SET);
 8001f2a:	2201      	movs	r2, #1
 8001f2c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001f30:	4821      	ldr	r0, [pc, #132]	; (8001fb8 <MX_GPIO_Init+0x11c>)
 8001f32:	f000 fe5d 	bl	8002bf0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, DISPLAY_RESET_Pin|DISPLAY_DC_Pin, GPIO_PIN_RESET);
 8001f36:	2200      	movs	r2, #0
 8001f38:	f44f 7140 	mov.w	r1, #768	; 0x300
 8001f3c:	481e      	ldr	r0, [pc, #120]	; (8001fb8 <MX_GPIO_Init+0x11c>)
 8001f3e:	f000 fe57 	bl	8002bf0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PF6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001f42:	2340      	movs	r3, #64	; 0x40
 8001f44:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f46:	2302      	movs	r3, #2
 8001f48:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 8001f52:	2303      	movs	r3, #3
 8001f54:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001f56:	f107 0314 	add.w	r3, r7, #20
 8001f5a:	4619      	mov	r1, r3
 8001f5c:	4816      	ldr	r0, [pc, #88]	; (8001fb8 <MX_GPIO_Init+0x11c>)
 8001f5e:	f000 fc9b 	bl	8002898 <HAL_GPIO_Init>

  /*Configure GPIO pins : DISPLAY_CS_Pin DISPLAY_RESET_Pin DISPLAY_DC_Pin */
  GPIO_InitStruct.Pin = DISPLAY_CS_Pin|DISPLAY_RESET_Pin|DISPLAY_DC_Pin;
 8001f62:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8001f66:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f68:	2301      	movs	r3, #1
 8001f6a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f70:	2303      	movs	r3, #3
 8001f72:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001f74:	f107 0314 	add.w	r3, r7, #20
 8001f78:	4619      	mov	r1, r3
 8001f7a:	480f      	ldr	r0, [pc, #60]	; (8001fb8 <MX_GPIO_Init+0x11c>)
 8001f7c:	f000 fc8c 	bl	8002898 <HAL_GPIO_Init>

  /*Configure GPIO pin : IRread_Pin */
  GPIO_InitStruct.Pin = IRread_Pin;
 8001f80:	2301      	movs	r3, #1
 8001f82:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001f84:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001f88:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(IRread_GPIO_Port, &GPIO_InitStruct);
 8001f8e:	f107 0314 	add.w	r3, r7, #20
 8001f92:	4619      	mov	r1, r3
 8001f94:	4809      	ldr	r0, [pc, #36]	; (8001fbc <MX_GPIO_Init+0x120>)
 8001f96:	f000 fc7f 	bl	8002898 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	2100      	movs	r1, #0
 8001f9e:	2006      	movs	r0, #6
 8001fa0:	f000 fc43 	bl	800282a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001fa4:	2006      	movs	r0, #6
 8001fa6:	f000 fc5c 	bl	8002862 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001faa:	bf00      	nop
 8001fac:	3728      	adds	r7, #40	; 0x28
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bd80      	pop	{r7, pc}
 8001fb2:	bf00      	nop
 8001fb4:	40023800 	.word	0x40023800
 8001fb8:	40021400 	.word	0x40021400
 8001fbc:	40020000 	.word	0x40020000

08001fc0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001fc4:	b672      	cpsid	i
}
 8001fc6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001fc8:	e7fe      	b.n	8001fc8 <Error_Handler+0x8>
	...

08001fcc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	b083      	sub	sp, #12
 8001fd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001fd2:	4b0f      	ldr	r3, [pc, #60]	; (8002010 <HAL_MspInit+0x44>)
 8001fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fd6:	4a0e      	ldr	r2, [pc, #56]	; (8002010 <HAL_MspInit+0x44>)
 8001fd8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fdc:	6413      	str	r3, [r2, #64]	; 0x40
 8001fde:	4b0c      	ldr	r3, [pc, #48]	; (8002010 <HAL_MspInit+0x44>)
 8001fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fe2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fe6:	607b      	str	r3, [r7, #4]
 8001fe8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fea:	4b09      	ldr	r3, [pc, #36]	; (8002010 <HAL_MspInit+0x44>)
 8001fec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fee:	4a08      	ldr	r2, [pc, #32]	; (8002010 <HAL_MspInit+0x44>)
 8001ff0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ff4:	6453      	str	r3, [r2, #68]	; 0x44
 8001ff6:	4b06      	ldr	r3, [pc, #24]	; (8002010 <HAL_MspInit+0x44>)
 8001ff8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ffa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ffe:	603b      	str	r3, [r7, #0]
 8002000:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002002:	bf00      	nop
 8002004:	370c      	adds	r7, #12
 8002006:	46bd      	mov	sp, r7
 8002008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200c:	4770      	bx	lr
 800200e:	bf00      	nop
 8002010:	40023800 	.word	0x40023800

08002014 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b0aa      	sub	sp, #168	; 0xa8
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800201c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002020:	2200      	movs	r2, #0
 8002022:	601a      	str	r2, [r3, #0]
 8002024:	605a      	str	r2, [r3, #4]
 8002026:	609a      	str	r2, [r3, #8]
 8002028:	60da      	str	r2, [r3, #12]
 800202a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800202c:	f107 0310 	add.w	r3, r7, #16
 8002030:	2284      	movs	r2, #132	; 0x84
 8002032:	2100      	movs	r1, #0
 8002034:	4618      	mov	r0, r3
 8002036:	f005 f873 	bl	8007120 <memset>
  if(hi2c->Instance==I2C1)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	4a22      	ldr	r2, [pc, #136]	; (80020c8 <HAL_I2C_MspInit+0xb4>)
 8002040:	4293      	cmp	r3, r2
 8002042:	d13c      	bne.n	80020be <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002044:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002048:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800204a:	2300      	movs	r3, #0
 800204c:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800204e:	f107 0310 	add.w	r3, r7, #16
 8002052:	4618      	mov	r0, r3
 8002054:	f002 fae8 	bl	8004628 <HAL_RCCEx_PeriphCLKConfig>
 8002058:	4603      	mov	r3, r0
 800205a:	2b00      	cmp	r3, #0
 800205c:	d001      	beq.n	8002062 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800205e:	f7ff ffaf 	bl	8001fc0 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002062:	4b1a      	ldr	r3, [pc, #104]	; (80020cc <HAL_I2C_MspInit+0xb8>)
 8002064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002066:	4a19      	ldr	r2, [pc, #100]	; (80020cc <HAL_I2C_MspInit+0xb8>)
 8002068:	f043 0302 	orr.w	r3, r3, #2
 800206c:	6313      	str	r3, [r2, #48]	; 0x30
 800206e:	4b17      	ldr	r3, [pc, #92]	; (80020cc <HAL_I2C_MspInit+0xb8>)
 8002070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002072:	f003 0302 	and.w	r3, r3, #2
 8002076:	60fb      	str	r3, [r7, #12]
 8002078:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800207a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800207e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002082:	2312      	movs	r3, #18
 8002084:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002088:	2300      	movs	r3, #0
 800208a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800208e:	2303      	movs	r3, #3
 8002090:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002094:	2304      	movs	r3, #4
 8002096:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800209a:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800209e:	4619      	mov	r1, r3
 80020a0:	480b      	ldr	r0, [pc, #44]	; (80020d0 <HAL_I2C_MspInit+0xbc>)
 80020a2:	f000 fbf9 	bl	8002898 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80020a6:	4b09      	ldr	r3, [pc, #36]	; (80020cc <HAL_I2C_MspInit+0xb8>)
 80020a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020aa:	4a08      	ldr	r2, [pc, #32]	; (80020cc <HAL_I2C_MspInit+0xb8>)
 80020ac:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80020b0:	6413      	str	r3, [r2, #64]	; 0x40
 80020b2:	4b06      	ldr	r3, [pc, #24]	; (80020cc <HAL_I2C_MspInit+0xb8>)
 80020b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020b6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020ba:	60bb      	str	r3, [r7, #8]
 80020bc:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80020be:	bf00      	nop
 80020c0:	37a8      	adds	r7, #168	; 0xa8
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bd80      	pop	{r7, pc}
 80020c6:	bf00      	nop
 80020c8:	40005400 	.word	0x40005400
 80020cc:	40023800 	.word	0x40023800
 80020d0:	40020400 	.word	0x40020400

080020d4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b08a      	sub	sp, #40	; 0x28
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020dc:	f107 0314 	add.w	r3, r7, #20
 80020e0:	2200      	movs	r2, #0
 80020e2:	601a      	str	r2, [r3, #0]
 80020e4:	605a      	str	r2, [r3, #4]
 80020e6:	609a      	str	r2, [r3, #8]
 80020e8:	60da      	str	r2, [r3, #12]
 80020ea:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	4a25      	ldr	r2, [pc, #148]	; (8002188 <HAL_SPI_MspInit+0xb4>)
 80020f2:	4293      	cmp	r3, r2
 80020f4:	d144      	bne.n	8002180 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80020f6:	4b25      	ldr	r3, [pc, #148]	; (800218c <HAL_SPI_MspInit+0xb8>)
 80020f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020fa:	4a24      	ldr	r2, [pc, #144]	; (800218c <HAL_SPI_MspInit+0xb8>)
 80020fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002100:	6413      	str	r3, [r2, #64]	; 0x40
 8002102:	4b22      	ldr	r3, [pc, #136]	; (800218c <HAL_SPI_MspInit+0xb8>)
 8002104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002106:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800210a:	613b      	str	r3, [r7, #16]
 800210c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOI_CLK_ENABLE();
 800210e:	4b1f      	ldr	r3, [pc, #124]	; (800218c <HAL_SPI_MspInit+0xb8>)
 8002110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002112:	4a1e      	ldr	r2, [pc, #120]	; (800218c <HAL_SPI_MspInit+0xb8>)
 8002114:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002118:	6313      	str	r3, [r2, #48]	; 0x30
 800211a:	4b1c      	ldr	r3, [pc, #112]	; (800218c <HAL_SPI_MspInit+0xb8>)
 800211c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800211e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002122:	60fb      	str	r3, [r7, #12]
 8002124:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002126:	4b19      	ldr	r3, [pc, #100]	; (800218c <HAL_SPI_MspInit+0xb8>)
 8002128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800212a:	4a18      	ldr	r2, [pc, #96]	; (800218c <HAL_SPI_MspInit+0xb8>)
 800212c:	f043 0302 	orr.w	r3, r3, #2
 8002130:	6313      	str	r3, [r2, #48]	; 0x30
 8002132:	4b16      	ldr	r3, [pc, #88]	; (800218c <HAL_SPI_MspInit+0xb8>)
 8002134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002136:	f003 0302 	and.w	r3, r3, #2
 800213a:	60bb      	str	r3, [r7, #8]
 800213c:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PI1     ------> SPI2_SCK
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800213e:	2302      	movs	r3, #2
 8002140:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002142:	2302      	movs	r3, #2
 8002144:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002146:	2300      	movs	r3, #0
 8002148:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800214a:	2303      	movs	r3, #3
 800214c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800214e:	2305      	movs	r3, #5
 8002150:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8002152:	f107 0314 	add.w	r3, r7, #20
 8002156:	4619      	mov	r1, r3
 8002158:	480d      	ldr	r0, [pc, #52]	; (8002190 <HAL_SPI_MspInit+0xbc>)
 800215a:	f000 fb9d 	bl	8002898 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800215e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002162:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002164:	2302      	movs	r3, #2
 8002166:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002168:	2300      	movs	r3, #0
 800216a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800216c:	2303      	movs	r3, #3
 800216e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002170:	2305      	movs	r3, #5
 8002172:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002174:	f107 0314 	add.w	r3, r7, #20
 8002178:	4619      	mov	r1, r3
 800217a:	4806      	ldr	r0, [pc, #24]	; (8002194 <HAL_SPI_MspInit+0xc0>)
 800217c:	f000 fb8c 	bl	8002898 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002180:	bf00      	nop
 8002182:	3728      	adds	r7, #40	; 0x28
 8002184:	46bd      	mov	sp, r7
 8002186:	bd80      	pop	{r7, pc}
 8002188:	40003800 	.word	0x40003800
 800218c:	40023800 	.word	0x40023800
 8002190:	40022000 	.word	0x40022000
 8002194:	40020400 	.word	0x40020400

08002198 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002198:	b480      	push	{r7}
 800219a:	b085      	sub	sp, #20
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021a8:	d10b      	bne.n	80021c2 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80021aa:	4b09      	ldr	r3, [pc, #36]	; (80021d0 <HAL_TIM_Base_MspInit+0x38>)
 80021ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ae:	4a08      	ldr	r2, [pc, #32]	; (80021d0 <HAL_TIM_Base_MspInit+0x38>)
 80021b0:	f043 0301 	orr.w	r3, r3, #1
 80021b4:	6413      	str	r3, [r2, #64]	; 0x40
 80021b6:	4b06      	ldr	r3, [pc, #24]	; (80021d0 <HAL_TIM_Base_MspInit+0x38>)
 80021b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ba:	f003 0301 	and.w	r3, r3, #1
 80021be:	60fb      	str	r3, [r7, #12]
 80021c0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80021c2:	bf00      	nop
 80021c4:	3714      	adds	r7, #20
 80021c6:	46bd      	mov	sp, r7
 80021c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021cc:	4770      	bx	lr
 80021ce:	bf00      	nop
 80021d0:	40023800 	.word	0x40023800

080021d4 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80021d4:	b480      	push	{r7}
 80021d6:	b085      	sub	sp, #20
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	4a0a      	ldr	r2, [pc, #40]	; (800220c <HAL_TIM_PWM_MspInit+0x38>)
 80021e2:	4293      	cmp	r3, r2
 80021e4:	d10b      	bne.n	80021fe <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80021e6:	4b0a      	ldr	r3, [pc, #40]	; (8002210 <HAL_TIM_PWM_MspInit+0x3c>)
 80021e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ea:	4a09      	ldr	r2, [pc, #36]	; (8002210 <HAL_TIM_PWM_MspInit+0x3c>)
 80021ec:	f043 0302 	orr.w	r3, r3, #2
 80021f0:	6413      	str	r3, [r2, #64]	; 0x40
 80021f2:	4b07      	ldr	r3, [pc, #28]	; (8002210 <HAL_TIM_PWM_MspInit+0x3c>)
 80021f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021f6:	f003 0302 	and.w	r3, r3, #2
 80021fa:	60fb      	str	r3, [r7, #12]
 80021fc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80021fe:	bf00      	nop
 8002200:	3714      	adds	r7, #20
 8002202:	46bd      	mov	sp, r7
 8002204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002208:	4770      	bx	lr
 800220a:	bf00      	nop
 800220c:	40000400 	.word	0x40000400
 8002210:	40023800 	.word	0x40023800

08002214 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b088      	sub	sp, #32
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800221c:	f107 030c 	add.w	r3, r7, #12
 8002220:	2200      	movs	r2, #0
 8002222:	601a      	str	r2, [r3, #0]
 8002224:	605a      	str	r2, [r3, #4]
 8002226:	609a      	str	r2, [r3, #8]
 8002228:	60da      	str	r2, [r3, #12]
 800222a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	4a11      	ldr	r2, [pc, #68]	; (8002278 <HAL_TIM_MspPostInit+0x64>)
 8002232:	4293      	cmp	r3, r2
 8002234:	d11b      	bne.n	800226e <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002236:	4b11      	ldr	r3, [pc, #68]	; (800227c <HAL_TIM_MspPostInit+0x68>)
 8002238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800223a:	4a10      	ldr	r2, [pc, #64]	; (800227c <HAL_TIM_MspPostInit+0x68>)
 800223c:	f043 0304 	orr.w	r3, r3, #4
 8002240:	6313      	str	r3, [r2, #48]	; 0x30
 8002242:	4b0e      	ldr	r3, [pc, #56]	; (800227c <HAL_TIM_MspPostInit+0x68>)
 8002244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002246:	f003 0304 	and.w	r3, r3, #4
 800224a:	60bb      	str	r3, [r7, #8]
 800224c:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800224e:	2380      	movs	r3, #128	; 0x80
 8002250:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002252:	2302      	movs	r3, #2
 8002254:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002256:	2300      	movs	r3, #0
 8002258:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800225a:	2300      	movs	r3, #0
 800225c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800225e:	2302      	movs	r3, #2
 8002260:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002262:	f107 030c 	add.w	r3, r7, #12
 8002266:	4619      	mov	r1, r3
 8002268:	4805      	ldr	r0, [pc, #20]	; (8002280 <HAL_TIM_MspPostInit+0x6c>)
 800226a:	f000 fb15 	bl	8002898 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800226e:	bf00      	nop
 8002270:	3720      	adds	r7, #32
 8002272:	46bd      	mov	sp, r7
 8002274:	bd80      	pop	{r7, pc}
 8002276:	bf00      	nop
 8002278:	40000400 	.word	0x40000400
 800227c:	40023800 	.word	0x40023800
 8002280:	40020800 	.word	0x40020800

08002284 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b0ac      	sub	sp, #176	; 0xb0
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800228c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002290:	2200      	movs	r2, #0
 8002292:	601a      	str	r2, [r3, #0]
 8002294:	605a      	str	r2, [r3, #4]
 8002296:	609a      	str	r2, [r3, #8]
 8002298:	60da      	str	r2, [r3, #12]
 800229a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800229c:	f107 0318 	add.w	r3, r7, #24
 80022a0:	2284      	movs	r2, #132	; 0x84
 80022a2:	2100      	movs	r1, #0
 80022a4:	4618      	mov	r0, r3
 80022a6:	f004 ff3b 	bl	8007120 <memset>
  if(huart->Instance==USART1)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	4a32      	ldr	r2, [pc, #200]	; (8002378 <HAL_UART_MspInit+0xf4>)
 80022b0:	4293      	cmp	r3, r2
 80022b2:	d15c      	bne.n	800236e <HAL_UART_MspInit+0xea>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80022b4:	2340      	movs	r3, #64	; 0x40
 80022b6:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80022b8:	2300      	movs	r3, #0
 80022ba:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80022bc:	f107 0318 	add.w	r3, r7, #24
 80022c0:	4618      	mov	r0, r3
 80022c2:	f002 f9b1 	bl	8004628 <HAL_RCCEx_PeriphCLKConfig>
 80022c6:	4603      	mov	r3, r0
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d001      	beq.n	80022d0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80022cc:	f7ff fe78 	bl	8001fc0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80022d0:	4b2a      	ldr	r3, [pc, #168]	; (800237c <HAL_UART_MspInit+0xf8>)
 80022d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022d4:	4a29      	ldr	r2, [pc, #164]	; (800237c <HAL_UART_MspInit+0xf8>)
 80022d6:	f043 0310 	orr.w	r3, r3, #16
 80022da:	6453      	str	r3, [r2, #68]	; 0x44
 80022dc:	4b27      	ldr	r3, [pc, #156]	; (800237c <HAL_UART_MspInit+0xf8>)
 80022de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022e0:	f003 0310 	and.w	r3, r3, #16
 80022e4:	617b      	str	r3, [r7, #20]
 80022e6:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022e8:	4b24      	ldr	r3, [pc, #144]	; (800237c <HAL_UART_MspInit+0xf8>)
 80022ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ec:	4a23      	ldr	r2, [pc, #140]	; (800237c <HAL_UART_MspInit+0xf8>)
 80022ee:	f043 0302 	orr.w	r3, r3, #2
 80022f2:	6313      	str	r3, [r2, #48]	; 0x30
 80022f4:	4b21      	ldr	r3, [pc, #132]	; (800237c <HAL_UART_MspInit+0xf8>)
 80022f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022f8:	f003 0302 	and.w	r3, r3, #2
 80022fc:	613b      	str	r3, [r7, #16]
 80022fe:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002300:	4b1e      	ldr	r3, [pc, #120]	; (800237c <HAL_UART_MspInit+0xf8>)
 8002302:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002304:	4a1d      	ldr	r2, [pc, #116]	; (800237c <HAL_UART_MspInit+0xf8>)
 8002306:	f043 0301 	orr.w	r3, r3, #1
 800230a:	6313      	str	r3, [r2, #48]	; 0x30
 800230c:	4b1b      	ldr	r3, [pc, #108]	; (800237c <HAL_UART_MspInit+0xf8>)
 800230e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002310:	f003 0301 	and.w	r3, r3, #1
 8002314:	60fb      	str	r3, [r7, #12]
 8002316:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002318:	2380      	movs	r3, #128	; 0x80
 800231a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800231e:	2302      	movs	r3, #2
 8002320:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002324:	2300      	movs	r3, #0
 8002326:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800232a:	2303      	movs	r3, #3
 800232c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002330:	2307      	movs	r3, #7
 8002332:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002336:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800233a:	4619      	mov	r1, r3
 800233c:	4810      	ldr	r0, [pc, #64]	; (8002380 <HAL_UART_MspInit+0xfc>)
 800233e:	f000 faab 	bl	8002898 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002342:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002346:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800234a:	2302      	movs	r3, #2
 800234c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002350:	2300      	movs	r3, #0
 8002352:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002356:	2303      	movs	r3, #3
 8002358:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800235c:	2307      	movs	r3, #7
 800235e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002362:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002366:	4619      	mov	r1, r3
 8002368:	4806      	ldr	r0, [pc, #24]	; (8002384 <HAL_UART_MspInit+0x100>)
 800236a:	f000 fa95 	bl	8002898 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800236e:	bf00      	nop
 8002370:	37b0      	adds	r7, #176	; 0xb0
 8002372:	46bd      	mov	sp, r7
 8002374:	bd80      	pop	{r7, pc}
 8002376:	bf00      	nop
 8002378:	40011000 	.word	0x40011000
 800237c:	40023800 	.word	0x40023800
 8002380:	40020400 	.word	0x40020400
 8002384:	40020000 	.word	0x40020000

08002388 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002388:	b480      	push	{r7}
 800238a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800238c:	e7fe      	b.n	800238c <NMI_Handler+0x4>

0800238e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800238e:	b480      	push	{r7}
 8002390:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002392:	e7fe      	b.n	8002392 <HardFault_Handler+0x4>

08002394 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002394:	b480      	push	{r7}
 8002396:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002398:	e7fe      	b.n	8002398 <MemManage_Handler+0x4>

0800239a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800239a:	b480      	push	{r7}
 800239c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800239e:	e7fe      	b.n	800239e <BusFault_Handler+0x4>

080023a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80023a0:	b480      	push	{r7}
 80023a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80023a4:	e7fe      	b.n	80023a4 <UsageFault_Handler+0x4>

080023a6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80023a6:	b480      	push	{r7}
 80023a8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80023aa:	bf00      	nop
 80023ac:	46bd      	mov	sp, r7
 80023ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b2:	4770      	bx	lr

080023b4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80023b4:	b480      	push	{r7}
 80023b6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80023b8:	bf00      	nop
 80023ba:	46bd      	mov	sp, r7
 80023bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c0:	4770      	bx	lr

080023c2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80023c2:	b480      	push	{r7}
 80023c4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80023c6:	bf00      	nop
 80023c8:	46bd      	mov	sp, r7
 80023ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ce:	4770      	bx	lr

080023d0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80023d4:	f000 f90a 	bl	80025ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80023d8:	bf00      	nop
 80023da:	bd80      	pop	{r7, pc}

080023dc <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

	Interrupt_flank();
 80023e0:	f7ff f8ca 	bl	8001578 <Interrupt_flank>
  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(IRread_Pin);
 80023e4:	2001      	movs	r0, #1
 80023e6:	f000 fc1d 	bl	8002c24 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80023ea:	bf00      	nop
 80023ec:	bd80      	pop	{r7, pc}

080023ee <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80023ee:	b580      	push	{r7, lr}
 80023f0:	b086      	sub	sp, #24
 80023f2:	af00      	add	r7, sp, #0
 80023f4:	60f8      	str	r0, [r7, #12]
 80023f6:	60b9      	str	r1, [r7, #8]
 80023f8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023fa:	2300      	movs	r3, #0
 80023fc:	617b      	str	r3, [r7, #20]
 80023fe:	e00a      	b.n	8002416 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002400:	f3af 8000 	nop.w
 8002404:	4601      	mov	r1, r0
 8002406:	68bb      	ldr	r3, [r7, #8]
 8002408:	1c5a      	adds	r2, r3, #1
 800240a:	60ba      	str	r2, [r7, #8]
 800240c:	b2ca      	uxtb	r2, r1
 800240e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002410:	697b      	ldr	r3, [r7, #20]
 8002412:	3301      	adds	r3, #1
 8002414:	617b      	str	r3, [r7, #20]
 8002416:	697a      	ldr	r2, [r7, #20]
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	429a      	cmp	r2, r3
 800241c:	dbf0      	blt.n	8002400 <_read+0x12>
  }

  return len;
 800241e:	687b      	ldr	r3, [r7, #4]
}
 8002420:	4618      	mov	r0, r3
 8002422:	3718      	adds	r7, #24
 8002424:	46bd      	mov	sp, r7
 8002426:	bd80      	pop	{r7, pc}

08002428 <_close>:
  }
  return len;
}

int _close(int file)
{
 8002428:	b480      	push	{r7}
 800242a:	b083      	sub	sp, #12
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002430:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002434:	4618      	mov	r0, r3
 8002436:	370c      	adds	r7, #12
 8002438:	46bd      	mov	sp, r7
 800243a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243e:	4770      	bx	lr

08002440 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002440:	b480      	push	{r7}
 8002442:	b083      	sub	sp, #12
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
 8002448:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002450:	605a      	str	r2, [r3, #4]
  return 0;
 8002452:	2300      	movs	r3, #0
}
 8002454:	4618      	mov	r0, r3
 8002456:	370c      	adds	r7, #12
 8002458:	46bd      	mov	sp, r7
 800245a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245e:	4770      	bx	lr

08002460 <_isatty>:

int _isatty(int file)
{
 8002460:	b480      	push	{r7}
 8002462:	b083      	sub	sp, #12
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002468:	2301      	movs	r3, #1
}
 800246a:	4618      	mov	r0, r3
 800246c:	370c      	adds	r7, #12
 800246e:	46bd      	mov	sp, r7
 8002470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002474:	4770      	bx	lr

08002476 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002476:	b480      	push	{r7}
 8002478:	b085      	sub	sp, #20
 800247a:	af00      	add	r7, sp, #0
 800247c:	60f8      	str	r0, [r7, #12]
 800247e:	60b9      	str	r1, [r7, #8]
 8002480:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002482:	2300      	movs	r3, #0
}
 8002484:	4618      	mov	r0, r3
 8002486:	3714      	adds	r7, #20
 8002488:	46bd      	mov	sp, r7
 800248a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248e:	4770      	bx	lr

08002490 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b086      	sub	sp, #24
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002498:	4a14      	ldr	r2, [pc, #80]	; (80024ec <_sbrk+0x5c>)
 800249a:	4b15      	ldr	r3, [pc, #84]	; (80024f0 <_sbrk+0x60>)
 800249c:	1ad3      	subs	r3, r2, r3
 800249e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80024a0:	697b      	ldr	r3, [r7, #20]
 80024a2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80024a4:	4b13      	ldr	r3, [pc, #76]	; (80024f4 <_sbrk+0x64>)
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d102      	bne.n	80024b2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80024ac:	4b11      	ldr	r3, [pc, #68]	; (80024f4 <_sbrk+0x64>)
 80024ae:	4a12      	ldr	r2, [pc, #72]	; (80024f8 <_sbrk+0x68>)
 80024b0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80024b2:	4b10      	ldr	r3, [pc, #64]	; (80024f4 <_sbrk+0x64>)
 80024b4:	681a      	ldr	r2, [r3, #0]
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	4413      	add	r3, r2
 80024ba:	693a      	ldr	r2, [r7, #16]
 80024bc:	429a      	cmp	r2, r3
 80024be:	d207      	bcs.n	80024d0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80024c0:	f004 fe04 	bl	80070cc <__errno>
 80024c4:	4603      	mov	r3, r0
 80024c6:	220c      	movs	r2, #12
 80024c8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80024ca:	f04f 33ff 	mov.w	r3, #4294967295
 80024ce:	e009      	b.n	80024e4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80024d0:	4b08      	ldr	r3, [pc, #32]	; (80024f4 <_sbrk+0x64>)
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80024d6:	4b07      	ldr	r3, [pc, #28]	; (80024f4 <_sbrk+0x64>)
 80024d8:	681a      	ldr	r2, [r3, #0]
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	4413      	add	r3, r2
 80024de:	4a05      	ldr	r2, [pc, #20]	; (80024f4 <_sbrk+0x64>)
 80024e0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80024e2:	68fb      	ldr	r3, [r7, #12]
}
 80024e4:	4618      	mov	r0, r3
 80024e6:	3718      	adds	r7, #24
 80024e8:	46bd      	mov	sp, r7
 80024ea:	bd80      	pop	{r7, pc}
 80024ec:	20050000 	.word	0x20050000
 80024f0:	00000400 	.word	0x00000400
 80024f4:	200054e4 	.word	0x200054e4
 80024f8:	20005500 	.word	0x20005500

080024fc <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80024fc:	b480      	push	{r7}
 80024fe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002500:	4b06      	ldr	r3, [pc, #24]	; (800251c <SystemInit+0x20>)
 8002502:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002506:	4a05      	ldr	r2, [pc, #20]	; (800251c <SystemInit+0x20>)
 8002508:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800250c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002510:	bf00      	nop
 8002512:	46bd      	mov	sp, r7
 8002514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002518:	4770      	bx	lr
 800251a:	bf00      	nop
 800251c:	e000ed00 	.word	0xe000ed00

08002520 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002520:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002558 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002524:	480d      	ldr	r0, [pc, #52]	; (800255c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002526:	490e      	ldr	r1, [pc, #56]	; (8002560 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002528:	4a0e      	ldr	r2, [pc, #56]	; (8002564 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800252a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800252c:	e002      	b.n	8002534 <LoopCopyDataInit>

0800252e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800252e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002530:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002532:	3304      	adds	r3, #4

08002534 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002534:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002536:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002538:	d3f9      	bcc.n	800252e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800253a:	4a0b      	ldr	r2, [pc, #44]	; (8002568 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800253c:	4c0b      	ldr	r4, [pc, #44]	; (800256c <LoopFillZerobss+0x26>)
  movs r3, #0
 800253e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002540:	e001      	b.n	8002546 <LoopFillZerobss>

08002542 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002542:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002544:	3204      	adds	r2, #4

08002546 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002546:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002548:	d3fb      	bcc.n	8002542 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800254a:	f7ff ffd7 	bl	80024fc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800254e:	f004 fdc3 	bl	80070d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002552:	f7ff facd 	bl	8001af0 <main>
  bx  lr    
 8002556:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002558:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 800255c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002560:	20004f00 	.word	0x20004f00
  ldr r2, =_sidata
 8002564:	08008684 	.word	0x08008684
  ldr r2, =_sbss
 8002568:	20004f00 	.word	0x20004f00
  ldr r4, =_ebss
 800256c:	200054fc 	.word	0x200054fc

08002570 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002570:	e7fe      	b.n	8002570 <ADC_IRQHandler>

08002572 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002572:	b580      	push	{r7, lr}
 8002574:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002576:	2003      	movs	r0, #3
 8002578:	f000 f94c 	bl	8002814 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800257c:	2000      	movs	r0, #0
 800257e:	f000 f805 	bl	800258c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002582:	f7ff fd23 	bl	8001fcc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002586:	2300      	movs	r3, #0
}
 8002588:	4618      	mov	r0, r3
 800258a:	bd80      	pop	{r7, pc}

0800258c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b082      	sub	sp, #8
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002594:	4b12      	ldr	r3, [pc, #72]	; (80025e0 <HAL_InitTick+0x54>)
 8002596:	681a      	ldr	r2, [r3, #0]
 8002598:	4b12      	ldr	r3, [pc, #72]	; (80025e4 <HAL_InitTick+0x58>)
 800259a:	781b      	ldrb	r3, [r3, #0]
 800259c:	4619      	mov	r1, r3
 800259e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80025a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80025a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80025aa:	4618      	mov	r0, r3
 80025ac:	f000 f967 	bl	800287e <HAL_SYSTICK_Config>
 80025b0:	4603      	mov	r3, r0
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d001      	beq.n	80025ba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80025b6:	2301      	movs	r3, #1
 80025b8:	e00e      	b.n	80025d8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	2b0f      	cmp	r3, #15
 80025be:	d80a      	bhi.n	80025d6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80025c0:	2200      	movs	r2, #0
 80025c2:	6879      	ldr	r1, [r7, #4]
 80025c4:	f04f 30ff 	mov.w	r0, #4294967295
 80025c8:	f000 f92f 	bl	800282a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80025cc:	4a06      	ldr	r2, [pc, #24]	; (80025e8 <HAL_InitTick+0x5c>)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80025d2:	2300      	movs	r3, #0
 80025d4:	e000      	b.n	80025d8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80025d6:	2301      	movs	r3, #1
}
 80025d8:	4618      	mov	r0, r3
 80025da:	3708      	adds	r7, #8
 80025dc:	46bd      	mov	sp, r7
 80025de:	bd80      	pop	{r7, pc}
 80025e0:	20004e90 	.word	0x20004e90
 80025e4:	20004e98 	.word	0x20004e98
 80025e8:	20004e94 	.word	0x20004e94

080025ec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80025ec:	b480      	push	{r7}
 80025ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80025f0:	4b06      	ldr	r3, [pc, #24]	; (800260c <HAL_IncTick+0x20>)
 80025f2:	781b      	ldrb	r3, [r3, #0]
 80025f4:	461a      	mov	r2, r3
 80025f6:	4b06      	ldr	r3, [pc, #24]	; (8002610 <HAL_IncTick+0x24>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	4413      	add	r3, r2
 80025fc:	4a04      	ldr	r2, [pc, #16]	; (8002610 <HAL_IncTick+0x24>)
 80025fe:	6013      	str	r3, [r2, #0]
}
 8002600:	bf00      	nop
 8002602:	46bd      	mov	sp, r7
 8002604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002608:	4770      	bx	lr
 800260a:	bf00      	nop
 800260c:	20004e98 	.word	0x20004e98
 8002610:	200054e8 	.word	0x200054e8

08002614 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002614:	b480      	push	{r7}
 8002616:	af00      	add	r7, sp, #0
  return uwTick;
 8002618:	4b03      	ldr	r3, [pc, #12]	; (8002628 <HAL_GetTick+0x14>)
 800261a:	681b      	ldr	r3, [r3, #0]
}
 800261c:	4618      	mov	r0, r3
 800261e:	46bd      	mov	sp, r7
 8002620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002624:	4770      	bx	lr
 8002626:	bf00      	nop
 8002628:	200054e8 	.word	0x200054e8

0800262c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b084      	sub	sp, #16
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002634:	f7ff ffee 	bl	8002614 <HAL_GetTick>
 8002638:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002644:	d005      	beq.n	8002652 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002646:	4b0a      	ldr	r3, [pc, #40]	; (8002670 <HAL_Delay+0x44>)
 8002648:	781b      	ldrb	r3, [r3, #0]
 800264a:	461a      	mov	r2, r3
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	4413      	add	r3, r2
 8002650:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002652:	bf00      	nop
 8002654:	f7ff ffde 	bl	8002614 <HAL_GetTick>
 8002658:	4602      	mov	r2, r0
 800265a:	68bb      	ldr	r3, [r7, #8]
 800265c:	1ad3      	subs	r3, r2, r3
 800265e:	68fa      	ldr	r2, [r7, #12]
 8002660:	429a      	cmp	r2, r3
 8002662:	d8f7      	bhi.n	8002654 <HAL_Delay+0x28>
  {
  }
}
 8002664:	bf00      	nop
 8002666:	bf00      	nop
 8002668:	3710      	adds	r7, #16
 800266a:	46bd      	mov	sp, r7
 800266c:	bd80      	pop	{r7, pc}
 800266e:	bf00      	nop
 8002670:	20004e98 	.word	0x20004e98

08002674 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002674:	b480      	push	{r7}
 8002676:	b085      	sub	sp, #20
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	f003 0307 	and.w	r3, r3, #7
 8002682:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002684:	4b0b      	ldr	r3, [pc, #44]	; (80026b4 <__NVIC_SetPriorityGrouping+0x40>)
 8002686:	68db      	ldr	r3, [r3, #12]
 8002688:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800268a:	68ba      	ldr	r2, [r7, #8]
 800268c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002690:	4013      	ands	r3, r2
 8002692:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002698:	68bb      	ldr	r3, [r7, #8]
 800269a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800269c:	4b06      	ldr	r3, [pc, #24]	; (80026b8 <__NVIC_SetPriorityGrouping+0x44>)
 800269e:	4313      	orrs	r3, r2
 80026a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80026a2:	4a04      	ldr	r2, [pc, #16]	; (80026b4 <__NVIC_SetPriorityGrouping+0x40>)
 80026a4:	68bb      	ldr	r3, [r7, #8]
 80026a6:	60d3      	str	r3, [r2, #12]
}
 80026a8:	bf00      	nop
 80026aa:	3714      	adds	r7, #20
 80026ac:	46bd      	mov	sp, r7
 80026ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b2:	4770      	bx	lr
 80026b4:	e000ed00 	.word	0xe000ed00
 80026b8:	05fa0000 	.word	0x05fa0000

080026bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80026bc:	b480      	push	{r7}
 80026be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80026c0:	4b04      	ldr	r3, [pc, #16]	; (80026d4 <__NVIC_GetPriorityGrouping+0x18>)
 80026c2:	68db      	ldr	r3, [r3, #12]
 80026c4:	0a1b      	lsrs	r3, r3, #8
 80026c6:	f003 0307 	and.w	r3, r3, #7
}
 80026ca:	4618      	mov	r0, r3
 80026cc:	46bd      	mov	sp, r7
 80026ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d2:	4770      	bx	lr
 80026d4:	e000ed00 	.word	0xe000ed00

080026d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026d8:	b480      	push	{r7}
 80026da:	b083      	sub	sp, #12
 80026dc:	af00      	add	r7, sp, #0
 80026de:	4603      	mov	r3, r0
 80026e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	db0b      	blt.n	8002702 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80026ea:	79fb      	ldrb	r3, [r7, #7]
 80026ec:	f003 021f 	and.w	r2, r3, #31
 80026f0:	4907      	ldr	r1, [pc, #28]	; (8002710 <__NVIC_EnableIRQ+0x38>)
 80026f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026f6:	095b      	lsrs	r3, r3, #5
 80026f8:	2001      	movs	r0, #1
 80026fa:	fa00 f202 	lsl.w	r2, r0, r2
 80026fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002702:	bf00      	nop
 8002704:	370c      	adds	r7, #12
 8002706:	46bd      	mov	sp, r7
 8002708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270c:	4770      	bx	lr
 800270e:	bf00      	nop
 8002710:	e000e100 	.word	0xe000e100

08002714 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002714:	b480      	push	{r7}
 8002716:	b083      	sub	sp, #12
 8002718:	af00      	add	r7, sp, #0
 800271a:	4603      	mov	r3, r0
 800271c:	6039      	str	r1, [r7, #0]
 800271e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002720:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002724:	2b00      	cmp	r3, #0
 8002726:	db0a      	blt.n	800273e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	b2da      	uxtb	r2, r3
 800272c:	490c      	ldr	r1, [pc, #48]	; (8002760 <__NVIC_SetPriority+0x4c>)
 800272e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002732:	0112      	lsls	r2, r2, #4
 8002734:	b2d2      	uxtb	r2, r2
 8002736:	440b      	add	r3, r1
 8002738:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800273c:	e00a      	b.n	8002754 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	b2da      	uxtb	r2, r3
 8002742:	4908      	ldr	r1, [pc, #32]	; (8002764 <__NVIC_SetPriority+0x50>)
 8002744:	79fb      	ldrb	r3, [r7, #7]
 8002746:	f003 030f 	and.w	r3, r3, #15
 800274a:	3b04      	subs	r3, #4
 800274c:	0112      	lsls	r2, r2, #4
 800274e:	b2d2      	uxtb	r2, r2
 8002750:	440b      	add	r3, r1
 8002752:	761a      	strb	r2, [r3, #24]
}
 8002754:	bf00      	nop
 8002756:	370c      	adds	r7, #12
 8002758:	46bd      	mov	sp, r7
 800275a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275e:	4770      	bx	lr
 8002760:	e000e100 	.word	0xe000e100
 8002764:	e000ed00 	.word	0xe000ed00

08002768 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002768:	b480      	push	{r7}
 800276a:	b089      	sub	sp, #36	; 0x24
 800276c:	af00      	add	r7, sp, #0
 800276e:	60f8      	str	r0, [r7, #12]
 8002770:	60b9      	str	r1, [r7, #8]
 8002772:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	f003 0307 	and.w	r3, r3, #7
 800277a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800277c:	69fb      	ldr	r3, [r7, #28]
 800277e:	f1c3 0307 	rsb	r3, r3, #7
 8002782:	2b04      	cmp	r3, #4
 8002784:	bf28      	it	cs
 8002786:	2304      	movcs	r3, #4
 8002788:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800278a:	69fb      	ldr	r3, [r7, #28]
 800278c:	3304      	adds	r3, #4
 800278e:	2b06      	cmp	r3, #6
 8002790:	d902      	bls.n	8002798 <NVIC_EncodePriority+0x30>
 8002792:	69fb      	ldr	r3, [r7, #28]
 8002794:	3b03      	subs	r3, #3
 8002796:	e000      	b.n	800279a <NVIC_EncodePriority+0x32>
 8002798:	2300      	movs	r3, #0
 800279a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800279c:	f04f 32ff 	mov.w	r2, #4294967295
 80027a0:	69bb      	ldr	r3, [r7, #24]
 80027a2:	fa02 f303 	lsl.w	r3, r2, r3
 80027a6:	43da      	mvns	r2, r3
 80027a8:	68bb      	ldr	r3, [r7, #8]
 80027aa:	401a      	ands	r2, r3
 80027ac:	697b      	ldr	r3, [r7, #20]
 80027ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80027b0:	f04f 31ff 	mov.w	r1, #4294967295
 80027b4:	697b      	ldr	r3, [r7, #20]
 80027b6:	fa01 f303 	lsl.w	r3, r1, r3
 80027ba:	43d9      	mvns	r1, r3
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027c0:	4313      	orrs	r3, r2
         );
}
 80027c2:	4618      	mov	r0, r3
 80027c4:	3724      	adds	r7, #36	; 0x24
 80027c6:	46bd      	mov	sp, r7
 80027c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027cc:	4770      	bx	lr
	...

080027d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b082      	sub	sp, #8
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	3b01      	subs	r3, #1
 80027dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80027e0:	d301      	bcc.n	80027e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80027e2:	2301      	movs	r3, #1
 80027e4:	e00f      	b.n	8002806 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80027e6:	4a0a      	ldr	r2, [pc, #40]	; (8002810 <SysTick_Config+0x40>)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	3b01      	subs	r3, #1
 80027ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80027ee:	210f      	movs	r1, #15
 80027f0:	f04f 30ff 	mov.w	r0, #4294967295
 80027f4:	f7ff ff8e 	bl	8002714 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80027f8:	4b05      	ldr	r3, [pc, #20]	; (8002810 <SysTick_Config+0x40>)
 80027fa:	2200      	movs	r2, #0
 80027fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80027fe:	4b04      	ldr	r3, [pc, #16]	; (8002810 <SysTick_Config+0x40>)
 8002800:	2207      	movs	r2, #7
 8002802:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002804:	2300      	movs	r3, #0
}
 8002806:	4618      	mov	r0, r3
 8002808:	3708      	adds	r7, #8
 800280a:	46bd      	mov	sp, r7
 800280c:	bd80      	pop	{r7, pc}
 800280e:	bf00      	nop
 8002810:	e000e010 	.word	0xe000e010

08002814 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	b082      	sub	sp, #8
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800281c:	6878      	ldr	r0, [r7, #4]
 800281e:	f7ff ff29 	bl	8002674 <__NVIC_SetPriorityGrouping>
}
 8002822:	bf00      	nop
 8002824:	3708      	adds	r7, #8
 8002826:	46bd      	mov	sp, r7
 8002828:	bd80      	pop	{r7, pc}

0800282a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800282a:	b580      	push	{r7, lr}
 800282c:	b086      	sub	sp, #24
 800282e:	af00      	add	r7, sp, #0
 8002830:	4603      	mov	r3, r0
 8002832:	60b9      	str	r1, [r7, #8]
 8002834:	607a      	str	r2, [r7, #4]
 8002836:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002838:	2300      	movs	r3, #0
 800283a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800283c:	f7ff ff3e 	bl	80026bc <__NVIC_GetPriorityGrouping>
 8002840:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002842:	687a      	ldr	r2, [r7, #4]
 8002844:	68b9      	ldr	r1, [r7, #8]
 8002846:	6978      	ldr	r0, [r7, #20]
 8002848:	f7ff ff8e 	bl	8002768 <NVIC_EncodePriority>
 800284c:	4602      	mov	r2, r0
 800284e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002852:	4611      	mov	r1, r2
 8002854:	4618      	mov	r0, r3
 8002856:	f7ff ff5d 	bl	8002714 <__NVIC_SetPriority>
}
 800285a:	bf00      	nop
 800285c:	3718      	adds	r7, #24
 800285e:	46bd      	mov	sp, r7
 8002860:	bd80      	pop	{r7, pc}

08002862 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002862:	b580      	push	{r7, lr}
 8002864:	b082      	sub	sp, #8
 8002866:	af00      	add	r7, sp, #0
 8002868:	4603      	mov	r3, r0
 800286a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800286c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002870:	4618      	mov	r0, r3
 8002872:	f7ff ff31 	bl	80026d8 <__NVIC_EnableIRQ>
}
 8002876:	bf00      	nop
 8002878:	3708      	adds	r7, #8
 800287a:	46bd      	mov	sp, r7
 800287c:	bd80      	pop	{r7, pc}

0800287e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800287e:	b580      	push	{r7, lr}
 8002880:	b082      	sub	sp, #8
 8002882:	af00      	add	r7, sp, #0
 8002884:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002886:	6878      	ldr	r0, [r7, #4]
 8002888:	f7ff ffa2 	bl	80027d0 <SysTick_Config>
 800288c:	4603      	mov	r3, r0
}
 800288e:	4618      	mov	r0, r3
 8002890:	3708      	adds	r7, #8
 8002892:	46bd      	mov	sp, r7
 8002894:	bd80      	pop	{r7, pc}
	...

08002898 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002898:	b480      	push	{r7}
 800289a:	b089      	sub	sp, #36	; 0x24
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
 80028a0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80028a2:	2300      	movs	r3, #0
 80028a4:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80028a6:	2300      	movs	r3, #0
 80028a8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80028aa:	2300      	movs	r3, #0
 80028ac:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80028ae:	2300      	movs	r3, #0
 80028b0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80028b2:	2300      	movs	r3, #0
 80028b4:	61fb      	str	r3, [r7, #28]
 80028b6:	e175      	b.n	8002ba4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80028b8:	2201      	movs	r2, #1
 80028ba:	69fb      	ldr	r3, [r7, #28]
 80028bc:	fa02 f303 	lsl.w	r3, r2, r3
 80028c0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	697a      	ldr	r2, [r7, #20]
 80028c8:	4013      	ands	r3, r2
 80028ca:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80028cc:	693a      	ldr	r2, [r7, #16]
 80028ce:	697b      	ldr	r3, [r7, #20]
 80028d0:	429a      	cmp	r2, r3
 80028d2:	f040 8164 	bne.w	8002b9e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	685b      	ldr	r3, [r3, #4]
 80028da:	f003 0303 	and.w	r3, r3, #3
 80028de:	2b01      	cmp	r3, #1
 80028e0:	d005      	beq.n	80028ee <HAL_GPIO_Init+0x56>
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	685b      	ldr	r3, [r3, #4]
 80028e6:	f003 0303 	and.w	r3, r3, #3
 80028ea:	2b02      	cmp	r3, #2
 80028ec:	d130      	bne.n	8002950 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	689b      	ldr	r3, [r3, #8]
 80028f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80028f4:	69fb      	ldr	r3, [r7, #28]
 80028f6:	005b      	lsls	r3, r3, #1
 80028f8:	2203      	movs	r2, #3
 80028fa:	fa02 f303 	lsl.w	r3, r2, r3
 80028fe:	43db      	mvns	r3, r3
 8002900:	69ba      	ldr	r2, [r7, #24]
 8002902:	4013      	ands	r3, r2
 8002904:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	68da      	ldr	r2, [r3, #12]
 800290a:	69fb      	ldr	r3, [r7, #28]
 800290c:	005b      	lsls	r3, r3, #1
 800290e:	fa02 f303 	lsl.w	r3, r2, r3
 8002912:	69ba      	ldr	r2, [r7, #24]
 8002914:	4313      	orrs	r3, r2
 8002916:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	69ba      	ldr	r2, [r7, #24]
 800291c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	685b      	ldr	r3, [r3, #4]
 8002922:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002924:	2201      	movs	r2, #1
 8002926:	69fb      	ldr	r3, [r7, #28]
 8002928:	fa02 f303 	lsl.w	r3, r2, r3
 800292c:	43db      	mvns	r3, r3
 800292e:	69ba      	ldr	r2, [r7, #24]
 8002930:	4013      	ands	r3, r2
 8002932:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002934:	683b      	ldr	r3, [r7, #0]
 8002936:	685b      	ldr	r3, [r3, #4]
 8002938:	091b      	lsrs	r3, r3, #4
 800293a:	f003 0201 	and.w	r2, r3, #1
 800293e:	69fb      	ldr	r3, [r7, #28]
 8002940:	fa02 f303 	lsl.w	r3, r2, r3
 8002944:	69ba      	ldr	r2, [r7, #24]
 8002946:	4313      	orrs	r3, r2
 8002948:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	69ba      	ldr	r2, [r7, #24]
 800294e:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	685b      	ldr	r3, [r3, #4]
 8002954:	f003 0303 	and.w	r3, r3, #3
 8002958:	2b03      	cmp	r3, #3
 800295a:	d017      	beq.n	800298c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	68db      	ldr	r3, [r3, #12]
 8002960:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002962:	69fb      	ldr	r3, [r7, #28]
 8002964:	005b      	lsls	r3, r3, #1
 8002966:	2203      	movs	r2, #3
 8002968:	fa02 f303 	lsl.w	r3, r2, r3
 800296c:	43db      	mvns	r3, r3
 800296e:	69ba      	ldr	r2, [r7, #24]
 8002970:	4013      	ands	r3, r2
 8002972:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	689a      	ldr	r2, [r3, #8]
 8002978:	69fb      	ldr	r3, [r7, #28]
 800297a:	005b      	lsls	r3, r3, #1
 800297c:	fa02 f303 	lsl.w	r3, r2, r3
 8002980:	69ba      	ldr	r2, [r7, #24]
 8002982:	4313      	orrs	r3, r2
 8002984:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	69ba      	ldr	r2, [r7, #24]
 800298a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800298c:	683b      	ldr	r3, [r7, #0]
 800298e:	685b      	ldr	r3, [r3, #4]
 8002990:	f003 0303 	and.w	r3, r3, #3
 8002994:	2b02      	cmp	r3, #2
 8002996:	d123      	bne.n	80029e0 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002998:	69fb      	ldr	r3, [r7, #28]
 800299a:	08da      	lsrs	r2, r3, #3
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	3208      	adds	r2, #8
 80029a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80029a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80029a6:	69fb      	ldr	r3, [r7, #28]
 80029a8:	f003 0307 	and.w	r3, r3, #7
 80029ac:	009b      	lsls	r3, r3, #2
 80029ae:	220f      	movs	r2, #15
 80029b0:	fa02 f303 	lsl.w	r3, r2, r3
 80029b4:	43db      	mvns	r3, r3
 80029b6:	69ba      	ldr	r2, [r7, #24]
 80029b8:	4013      	ands	r3, r2
 80029ba:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	691a      	ldr	r2, [r3, #16]
 80029c0:	69fb      	ldr	r3, [r7, #28]
 80029c2:	f003 0307 	and.w	r3, r3, #7
 80029c6:	009b      	lsls	r3, r3, #2
 80029c8:	fa02 f303 	lsl.w	r3, r2, r3
 80029cc:	69ba      	ldr	r2, [r7, #24]
 80029ce:	4313      	orrs	r3, r2
 80029d0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80029d2:	69fb      	ldr	r3, [r7, #28]
 80029d4:	08da      	lsrs	r2, r3, #3
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	3208      	adds	r2, #8
 80029da:	69b9      	ldr	r1, [r7, #24]
 80029dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80029e6:	69fb      	ldr	r3, [r7, #28]
 80029e8:	005b      	lsls	r3, r3, #1
 80029ea:	2203      	movs	r2, #3
 80029ec:	fa02 f303 	lsl.w	r3, r2, r3
 80029f0:	43db      	mvns	r3, r3
 80029f2:	69ba      	ldr	r2, [r7, #24]
 80029f4:	4013      	ands	r3, r2
 80029f6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	685b      	ldr	r3, [r3, #4]
 80029fc:	f003 0203 	and.w	r2, r3, #3
 8002a00:	69fb      	ldr	r3, [r7, #28]
 8002a02:	005b      	lsls	r3, r3, #1
 8002a04:	fa02 f303 	lsl.w	r3, r2, r3
 8002a08:	69ba      	ldr	r2, [r7, #24]
 8002a0a:	4313      	orrs	r3, r2
 8002a0c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	69ba      	ldr	r2, [r7, #24]
 8002a12:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	685b      	ldr	r3, [r3, #4]
 8002a18:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	f000 80be 	beq.w	8002b9e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a22:	4b66      	ldr	r3, [pc, #408]	; (8002bbc <HAL_GPIO_Init+0x324>)
 8002a24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a26:	4a65      	ldr	r2, [pc, #404]	; (8002bbc <HAL_GPIO_Init+0x324>)
 8002a28:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a2c:	6453      	str	r3, [r2, #68]	; 0x44
 8002a2e:	4b63      	ldr	r3, [pc, #396]	; (8002bbc <HAL_GPIO_Init+0x324>)
 8002a30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a36:	60fb      	str	r3, [r7, #12]
 8002a38:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002a3a:	4a61      	ldr	r2, [pc, #388]	; (8002bc0 <HAL_GPIO_Init+0x328>)
 8002a3c:	69fb      	ldr	r3, [r7, #28]
 8002a3e:	089b      	lsrs	r3, r3, #2
 8002a40:	3302      	adds	r3, #2
 8002a42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a46:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002a48:	69fb      	ldr	r3, [r7, #28]
 8002a4a:	f003 0303 	and.w	r3, r3, #3
 8002a4e:	009b      	lsls	r3, r3, #2
 8002a50:	220f      	movs	r2, #15
 8002a52:	fa02 f303 	lsl.w	r3, r2, r3
 8002a56:	43db      	mvns	r3, r3
 8002a58:	69ba      	ldr	r2, [r7, #24]
 8002a5a:	4013      	ands	r3, r2
 8002a5c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	4a58      	ldr	r2, [pc, #352]	; (8002bc4 <HAL_GPIO_Init+0x32c>)
 8002a62:	4293      	cmp	r3, r2
 8002a64:	d037      	beq.n	8002ad6 <HAL_GPIO_Init+0x23e>
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	4a57      	ldr	r2, [pc, #348]	; (8002bc8 <HAL_GPIO_Init+0x330>)
 8002a6a:	4293      	cmp	r3, r2
 8002a6c:	d031      	beq.n	8002ad2 <HAL_GPIO_Init+0x23a>
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	4a56      	ldr	r2, [pc, #344]	; (8002bcc <HAL_GPIO_Init+0x334>)
 8002a72:	4293      	cmp	r3, r2
 8002a74:	d02b      	beq.n	8002ace <HAL_GPIO_Init+0x236>
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	4a55      	ldr	r2, [pc, #340]	; (8002bd0 <HAL_GPIO_Init+0x338>)
 8002a7a:	4293      	cmp	r3, r2
 8002a7c:	d025      	beq.n	8002aca <HAL_GPIO_Init+0x232>
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	4a54      	ldr	r2, [pc, #336]	; (8002bd4 <HAL_GPIO_Init+0x33c>)
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d01f      	beq.n	8002ac6 <HAL_GPIO_Init+0x22e>
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	4a53      	ldr	r2, [pc, #332]	; (8002bd8 <HAL_GPIO_Init+0x340>)
 8002a8a:	4293      	cmp	r3, r2
 8002a8c:	d019      	beq.n	8002ac2 <HAL_GPIO_Init+0x22a>
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	4a52      	ldr	r2, [pc, #328]	; (8002bdc <HAL_GPIO_Init+0x344>)
 8002a92:	4293      	cmp	r3, r2
 8002a94:	d013      	beq.n	8002abe <HAL_GPIO_Init+0x226>
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	4a51      	ldr	r2, [pc, #324]	; (8002be0 <HAL_GPIO_Init+0x348>)
 8002a9a:	4293      	cmp	r3, r2
 8002a9c:	d00d      	beq.n	8002aba <HAL_GPIO_Init+0x222>
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	4a50      	ldr	r2, [pc, #320]	; (8002be4 <HAL_GPIO_Init+0x34c>)
 8002aa2:	4293      	cmp	r3, r2
 8002aa4:	d007      	beq.n	8002ab6 <HAL_GPIO_Init+0x21e>
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	4a4f      	ldr	r2, [pc, #316]	; (8002be8 <HAL_GPIO_Init+0x350>)
 8002aaa:	4293      	cmp	r3, r2
 8002aac:	d101      	bne.n	8002ab2 <HAL_GPIO_Init+0x21a>
 8002aae:	2309      	movs	r3, #9
 8002ab0:	e012      	b.n	8002ad8 <HAL_GPIO_Init+0x240>
 8002ab2:	230a      	movs	r3, #10
 8002ab4:	e010      	b.n	8002ad8 <HAL_GPIO_Init+0x240>
 8002ab6:	2308      	movs	r3, #8
 8002ab8:	e00e      	b.n	8002ad8 <HAL_GPIO_Init+0x240>
 8002aba:	2307      	movs	r3, #7
 8002abc:	e00c      	b.n	8002ad8 <HAL_GPIO_Init+0x240>
 8002abe:	2306      	movs	r3, #6
 8002ac0:	e00a      	b.n	8002ad8 <HAL_GPIO_Init+0x240>
 8002ac2:	2305      	movs	r3, #5
 8002ac4:	e008      	b.n	8002ad8 <HAL_GPIO_Init+0x240>
 8002ac6:	2304      	movs	r3, #4
 8002ac8:	e006      	b.n	8002ad8 <HAL_GPIO_Init+0x240>
 8002aca:	2303      	movs	r3, #3
 8002acc:	e004      	b.n	8002ad8 <HAL_GPIO_Init+0x240>
 8002ace:	2302      	movs	r3, #2
 8002ad0:	e002      	b.n	8002ad8 <HAL_GPIO_Init+0x240>
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	e000      	b.n	8002ad8 <HAL_GPIO_Init+0x240>
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	69fa      	ldr	r2, [r7, #28]
 8002ada:	f002 0203 	and.w	r2, r2, #3
 8002ade:	0092      	lsls	r2, r2, #2
 8002ae0:	4093      	lsls	r3, r2
 8002ae2:	69ba      	ldr	r2, [r7, #24]
 8002ae4:	4313      	orrs	r3, r2
 8002ae6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002ae8:	4935      	ldr	r1, [pc, #212]	; (8002bc0 <HAL_GPIO_Init+0x328>)
 8002aea:	69fb      	ldr	r3, [r7, #28]
 8002aec:	089b      	lsrs	r3, r3, #2
 8002aee:	3302      	adds	r3, #2
 8002af0:	69ba      	ldr	r2, [r7, #24]
 8002af2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002af6:	4b3d      	ldr	r3, [pc, #244]	; (8002bec <HAL_GPIO_Init+0x354>)
 8002af8:	689b      	ldr	r3, [r3, #8]
 8002afa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002afc:	693b      	ldr	r3, [r7, #16]
 8002afe:	43db      	mvns	r3, r3
 8002b00:	69ba      	ldr	r2, [r7, #24]
 8002b02:	4013      	ands	r3, r2
 8002b04:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002b06:	683b      	ldr	r3, [r7, #0]
 8002b08:	685b      	ldr	r3, [r3, #4]
 8002b0a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d003      	beq.n	8002b1a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002b12:	69ba      	ldr	r2, [r7, #24]
 8002b14:	693b      	ldr	r3, [r7, #16]
 8002b16:	4313      	orrs	r3, r2
 8002b18:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002b1a:	4a34      	ldr	r2, [pc, #208]	; (8002bec <HAL_GPIO_Init+0x354>)
 8002b1c:	69bb      	ldr	r3, [r7, #24]
 8002b1e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002b20:	4b32      	ldr	r3, [pc, #200]	; (8002bec <HAL_GPIO_Init+0x354>)
 8002b22:	68db      	ldr	r3, [r3, #12]
 8002b24:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b26:	693b      	ldr	r3, [r7, #16]
 8002b28:	43db      	mvns	r3, r3
 8002b2a:	69ba      	ldr	r2, [r7, #24]
 8002b2c:	4013      	ands	r3, r2
 8002b2e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	685b      	ldr	r3, [r3, #4]
 8002b34:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d003      	beq.n	8002b44 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002b3c:	69ba      	ldr	r2, [r7, #24]
 8002b3e:	693b      	ldr	r3, [r7, #16]
 8002b40:	4313      	orrs	r3, r2
 8002b42:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002b44:	4a29      	ldr	r2, [pc, #164]	; (8002bec <HAL_GPIO_Init+0x354>)
 8002b46:	69bb      	ldr	r3, [r7, #24]
 8002b48:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002b4a:	4b28      	ldr	r3, [pc, #160]	; (8002bec <HAL_GPIO_Init+0x354>)
 8002b4c:	685b      	ldr	r3, [r3, #4]
 8002b4e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b50:	693b      	ldr	r3, [r7, #16]
 8002b52:	43db      	mvns	r3, r3
 8002b54:	69ba      	ldr	r2, [r7, #24]
 8002b56:	4013      	ands	r3, r2
 8002b58:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	685b      	ldr	r3, [r3, #4]
 8002b5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d003      	beq.n	8002b6e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002b66:	69ba      	ldr	r2, [r7, #24]
 8002b68:	693b      	ldr	r3, [r7, #16]
 8002b6a:	4313      	orrs	r3, r2
 8002b6c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002b6e:	4a1f      	ldr	r2, [pc, #124]	; (8002bec <HAL_GPIO_Init+0x354>)
 8002b70:	69bb      	ldr	r3, [r7, #24]
 8002b72:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002b74:	4b1d      	ldr	r3, [pc, #116]	; (8002bec <HAL_GPIO_Init+0x354>)
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b7a:	693b      	ldr	r3, [r7, #16]
 8002b7c:	43db      	mvns	r3, r3
 8002b7e:	69ba      	ldr	r2, [r7, #24]
 8002b80:	4013      	ands	r3, r2
 8002b82:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	685b      	ldr	r3, [r3, #4]
 8002b88:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d003      	beq.n	8002b98 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002b90:	69ba      	ldr	r2, [r7, #24]
 8002b92:	693b      	ldr	r3, [r7, #16]
 8002b94:	4313      	orrs	r3, r2
 8002b96:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002b98:	4a14      	ldr	r2, [pc, #80]	; (8002bec <HAL_GPIO_Init+0x354>)
 8002b9a:	69bb      	ldr	r3, [r7, #24]
 8002b9c:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002b9e:	69fb      	ldr	r3, [r7, #28]
 8002ba0:	3301      	adds	r3, #1
 8002ba2:	61fb      	str	r3, [r7, #28]
 8002ba4:	69fb      	ldr	r3, [r7, #28]
 8002ba6:	2b0f      	cmp	r3, #15
 8002ba8:	f67f ae86 	bls.w	80028b8 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002bac:	bf00      	nop
 8002bae:	bf00      	nop
 8002bb0:	3724      	adds	r7, #36	; 0x24
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb8:	4770      	bx	lr
 8002bba:	bf00      	nop
 8002bbc:	40023800 	.word	0x40023800
 8002bc0:	40013800 	.word	0x40013800
 8002bc4:	40020000 	.word	0x40020000
 8002bc8:	40020400 	.word	0x40020400
 8002bcc:	40020800 	.word	0x40020800
 8002bd0:	40020c00 	.word	0x40020c00
 8002bd4:	40021000 	.word	0x40021000
 8002bd8:	40021400 	.word	0x40021400
 8002bdc:	40021800 	.word	0x40021800
 8002be0:	40021c00 	.word	0x40021c00
 8002be4:	40022000 	.word	0x40022000
 8002be8:	40022400 	.word	0x40022400
 8002bec:	40013c00 	.word	0x40013c00

08002bf0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002bf0:	b480      	push	{r7}
 8002bf2:	b083      	sub	sp, #12
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
 8002bf8:	460b      	mov	r3, r1
 8002bfa:	807b      	strh	r3, [r7, #2]
 8002bfc:	4613      	mov	r3, r2
 8002bfe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002c00:	787b      	ldrb	r3, [r7, #1]
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d003      	beq.n	8002c0e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002c06:	887a      	ldrh	r2, [r7, #2]
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002c0c:	e003      	b.n	8002c16 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002c0e:	887b      	ldrh	r3, [r7, #2]
 8002c10:	041a      	lsls	r2, r3, #16
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	619a      	str	r2, [r3, #24]
}
 8002c16:	bf00      	nop
 8002c18:	370c      	adds	r7, #12
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c20:	4770      	bx	lr
	...

08002c24 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b082      	sub	sp, #8
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	4603      	mov	r3, r0
 8002c2c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002c2e:	4b08      	ldr	r3, [pc, #32]	; (8002c50 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002c30:	695a      	ldr	r2, [r3, #20]
 8002c32:	88fb      	ldrh	r3, [r7, #6]
 8002c34:	4013      	ands	r3, r2
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d006      	beq.n	8002c48 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002c3a:	4a05      	ldr	r2, [pc, #20]	; (8002c50 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002c3c:	88fb      	ldrh	r3, [r7, #6]
 8002c3e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002c40:	88fb      	ldrh	r3, [r7, #6]
 8002c42:	4618      	mov	r0, r3
 8002c44:	f000 f806 	bl	8002c54 <HAL_GPIO_EXTI_Callback>
  }
}
 8002c48:	bf00      	nop
 8002c4a:	3708      	adds	r7, #8
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	bd80      	pop	{r7, pc}
 8002c50:	40013c00 	.word	0x40013c00

08002c54 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002c54:	b480      	push	{r7}
 8002c56:	b083      	sub	sp, #12
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	4603      	mov	r3, r0
 8002c5c:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);
  
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002c5e:	bf00      	nop
 8002c60:	370c      	adds	r7, #12
 8002c62:	46bd      	mov	sp, r7
 8002c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c68:	4770      	bx	lr
	...

08002c6c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b082      	sub	sp, #8
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d101      	bne.n	8002c7e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002c7a:	2301      	movs	r3, #1
 8002c7c:	e07f      	b.n	8002d7e <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c84:	b2db      	uxtb	r3, r3
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d106      	bne.n	8002c98 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002c92:	6878      	ldr	r0, [r7, #4]
 8002c94:	f7ff f9be 	bl	8002014 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2224      	movs	r2, #36	; 0x24
 8002c9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	681a      	ldr	r2, [r3, #0]
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f022 0201 	bic.w	r2, r2, #1
 8002cae:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	685a      	ldr	r2, [r3, #4]
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002cbc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	689a      	ldr	r2, [r3, #8]
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002ccc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	68db      	ldr	r3, [r3, #12]
 8002cd2:	2b01      	cmp	r3, #1
 8002cd4:	d107      	bne.n	8002ce6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	689a      	ldr	r2, [r3, #8]
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002ce2:	609a      	str	r2, [r3, #8]
 8002ce4:	e006      	b.n	8002cf4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	689a      	ldr	r2, [r3, #8]
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002cf2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	68db      	ldr	r3, [r3, #12]
 8002cf8:	2b02      	cmp	r3, #2
 8002cfa:	d104      	bne.n	8002d06 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002d04:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	6859      	ldr	r1, [r3, #4]
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681a      	ldr	r2, [r3, #0]
 8002d10:	4b1d      	ldr	r3, [pc, #116]	; (8002d88 <HAL_I2C_Init+0x11c>)
 8002d12:	430b      	orrs	r3, r1
 8002d14:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	68da      	ldr	r2, [r3, #12]
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002d24:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	691a      	ldr	r2, [r3, #16]
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	695b      	ldr	r3, [r3, #20]
 8002d2e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	699b      	ldr	r3, [r3, #24]
 8002d36:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	430a      	orrs	r2, r1
 8002d3e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	69d9      	ldr	r1, [r3, #28]
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	6a1a      	ldr	r2, [r3, #32]
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	430a      	orrs	r2, r1
 8002d4e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	681a      	ldr	r2, [r3, #0]
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f042 0201 	orr.w	r2, r2, #1
 8002d5e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2200      	movs	r2, #0
 8002d64:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	2220      	movs	r2, #32
 8002d6a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	2200      	movs	r2, #0
 8002d72:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2200      	movs	r2, #0
 8002d78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002d7c:	2300      	movs	r3, #0
}
 8002d7e:	4618      	mov	r0, r3
 8002d80:	3708      	adds	r7, #8
 8002d82:	46bd      	mov	sp, r7
 8002d84:	bd80      	pop	{r7, pc}
 8002d86:	bf00      	nop
 8002d88:	02008000 	.word	0x02008000

08002d8c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b088      	sub	sp, #32
 8002d90:	af02      	add	r7, sp, #8
 8002d92:	60f8      	str	r0, [r7, #12]
 8002d94:	607a      	str	r2, [r7, #4]
 8002d96:	461a      	mov	r2, r3
 8002d98:	460b      	mov	r3, r1
 8002d9a:	817b      	strh	r3, [r7, #10]
 8002d9c:	4613      	mov	r3, r2
 8002d9e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002da6:	b2db      	uxtb	r3, r3
 8002da8:	2b20      	cmp	r3, #32
 8002daa:	f040 80da 	bne.w	8002f62 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002db4:	2b01      	cmp	r3, #1
 8002db6:	d101      	bne.n	8002dbc <HAL_I2C_Master_Transmit+0x30>
 8002db8:	2302      	movs	r3, #2
 8002dba:	e0d3      	b.n	8002f64 <HAL_I2C_Master_Transmit+0x1d8>
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	2201      	movs	r2, #1
 8002dc0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002dc4:	f7ff fc26 	bl	8002614 <HAL_GetTick>
 8002dc8:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002dca:	697b      	ldr	r3, [r7, #20]
 8002dcc:	9300      	str	r3, [sp, #0]
 8002dce:	2319      	movs	r3, #25
 8002dd0:	2201      	movs	r2, #1
 8002dd2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002dd6:	68f8      	ldr	r0, [r7, #12]
 8002dd8:	f000 fcbc 	bl	8003754 <I2C_WaitOnFlagUntilTimeout>
 8002ddc:	4603      	mov	r3, r0
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d001      	beq.n	8002de6 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8002de2:	2301      	movs	r3, #1
 8002de4:	e0be      	b.n	8002f64 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	2221      	movs	r2, #33	; 0x21
 8002dea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	2210      	movs	r2, #16
 8002df2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	2200      	movs	r2, #0
 8002dfa:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	687a      	ldr	r2, [r7, #4]
 8002e00:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	893a      	ldrh	r2, [r7, #8]
 8002e06:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e12:	b29b      	uxth	r3, r3
 8002e14:	2bff      	cmp	r3, #255	; 0xff
 8002e16:	d90e      	bls.n	8002e36 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	22ff      	movs	r2, #255	; 0xff
 8002e1c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e22:	b2da      	uxtb	r2, r3
 8002e24:	8979      	ldrh	r1, [r7, #10]
 8002e26:	4b51      	ldr	r3, [pc, #324]	; (8002f6c <HAL_I2C_Master_Transmit+0x1e0>)
 8002e28:	9300      	str	r3, [sp, #0]
 8002e2a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002e2e:	68f8      	ldr	r0, [r7, #12]
 8002e30:	f000 fea6 	bl	8003b80 <I2C_TransferConfig>
 8002e34:	e06c      	b.n	8002f10 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e3a:	b29a      	uxth	r2, r3
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e44:	b2da      	uxtb	r2, r3
 8002e46:	8979      	ldrh	r1, [r7, #10]
 8002e48:	4b48      	ldr	r3, [pc, #288]	; (8002f6c <HAL_I2C_Master_Transmit+0x1e0>)
 8002e4a:	9300      	str	r3, [sp, #0]
 8002e4c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002e50:	68f8      	ldr	r0, [r7, #12]
 8002e52:	f000 fe95 	bl	8003b80 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8002e56:	e05b      	b.n	8002f10 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e58:	697a      	ldr	r2, [r7, #20]
 8002e5a:	6a39      	ldr	r1, [r7, #32]
 8002e5c:	68f8      	ldr	r0, [r7, #12]
 8002e5e:	f000 fcb9 	bl	80037d4 <I2C_WaitOnTXISFlagUntilTimeout>
 8002e62:	4603      	mov	r3, r0
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d001      	beq.n	8002e6c <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8002e68:	2301      	movs	r3, #1
 8002e6a:	e07b      	b.n	8002f64 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e70:	781a      	ldrb	r2, [r3, #0]
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e7c:	1c5a      	adds	r2, r3, #1
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e86:	b29b      	uxth	r3, r3
 8002e88:	3b01      	subs	r3, #1
 8002e8a:	b29a      	uxth	r2, r3
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e94:	3b01      	subs	r3, #1
 8002e96:	b29a      	uxth	r2, r3
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ea0:	b29b      	uxth	r3, r3
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d034      	beq.n	8002f10 <HAL_I2C_Master_Transmit+0x184>
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d130      	bne.n	8002f10 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002eae:	697b      	ldr	r3, [r7, #20]
 8002eb0:	9300      	str	r3, [sp, #0]
 8002eb2:	6a3b      	ldr	r3, [r7, #32]
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	2180      	movs	r1, #128	; 0x80
 8002eb8:	68f8      	ldr	r0, [r7, #12]
 8002eba:	f000 fc4b 	bl	8003754 <I2C_WaitOnFlagUntilTimeout>
 8002ebe:	4603      	mov	r3, r0
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d001      	beq.n	8002ec8 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8002ec4:	2301      	movs	r3, #1
 8002ec6:	e04d      	b.n	8002f64 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ecc:	b29b      	uxth	r3, r3
 8002ece:	2bff      	cmp	r3, #255	; 0xff
 8002ed0:	d90e      	bls.n	8002ef0 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	22ff      	movs	r2, #255	; 0xff
 8002ed6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002edc:	b2da      	uxtb	r2, r3
 8002ede:	8979      	ldrh	r1, [r7, #10]
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	9300      	str	r3, [sp, #0]
 8002ee4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002ee8:	68f8      	ldr	r0, [r7, #12]
 8002eea:	f000 fe49 	bl	8003b80 <I2C_TransferConfig>
 8002eee:	e00f      	b.n	8002f10 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ef4:	b29a      	uxth	r2, r3
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002efe:	b2da      	uxtb	r2, r3
 8002f00:	8979      	ldrh	r1, [r7, #10]
 8002f02:	2300      	movs	r3, #0
 8002f04:	9300      	str	r3, [sp, #0]
 8002f06:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002f0a:	68f8      	ldr	r0, [r7, #12]
 8002f0c:	f000 fe38 	bl	8003b80 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f14:	b29b      	uxth	r3, r3
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d19e      	bne.n	8002e58 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f1a:	697a      	ldr	r2, [r7, #20]
 8002f1c:	6a39      	ldr	r1, [r7, #32]
 8002f1e:	68f8      	ldr	r0, [r7, #12]
 8002f20:	f000 fc98 	bl	8003854 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002f24:	4603      	mov	r3, r0
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d001      	beq.n	8002f2e <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8002f2a:	2301      	movs	r3, #1
 8002f2c:	e01a      	b.n	8002f64 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	2220      	movs	r2, #32
 8002f34:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	6859      	ldr	r1, [r3, #4]
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	681a      	ldr	r2, [r3, #0]
 8002f40:	4b0b      	ldr	r3, [pc, #44]	; (8002f70 <HAL_I2C_Master_Transmit+0x1e4>)
 8002f42:	400b      	ands	r3, r1
 8002f44:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	2220      	movs	r2, #32
 8002f4a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	2200      	movs	r2, #0
 8002f52:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	2200      	movs	r2, #0
 8002f5a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002f5e:	2300      	movs	r3, #0
 8002f60:	e000      	b.n	8002f64 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8002f62:	2302      	movs	r3, #2
  }
}
 8002f64:	4618      	mov	r0, r3
 8002f66:	3718      	adds	r7, #24
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	bd80      	pop	{r7, pc}
 8002f6c:	80002000 	.word	0x80002000
 8002f70:	fe00e800 	.word	0xfe00e800

08002f74 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	b088      	sub	sp, #32
 8002f78:	af02      	add	r7, sp, #8
 8002f7a:	60f8      	str	r0, [r7, #12]
 8002f7c:	607a      	str	r2, [r7, #4]
 8002f7e:	461a      	mov	r2, r3
 8002f80:	460b      	mov	r3, r1
 8002f82:	817b      	strh	r3, [r7, #10]
 8002f84:	4613      	mov	r3, r2
 8002f86:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f8e:	b2db      	uxtb	r3, r3
 8002f90:	2b20      	cmp	r3, #32
 8002f92:	f040 80db 	bne.w	800314c <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002f9c:	2b01      	cmp	r3, #1
 8002f9e:	d101      	bne.n	8002fa4 <HAL_I2C_Master_Receive+0x30>
 8002fa0:	2302      	movs	r3, #2
 8002fa2:	e0d4      	b.n	800314e <HAL_I2C_Master_Receive+0x1da>
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	2201      	movs	r2, #1
 8002fa8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002fac:	f7ff fb32 	bl	8002614 <HAL_GetTick>
 8002fb0:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002fb2:	697b      	ldr	r3, [r7, #20]
 8002fb4:	9300      	str	r3, [sp, #0]
 8002fb6:	2319      	movs	r3, #25
 8002fb8:	2201      	movs	r2, #1
 8002fba:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002fbe:	68f8      	ldr	r0, [r7, #12]
 8002fc0:	f000 fbc8 	bl	8003754 <I2C_WaitOnFlagUntilTimeout>
 8002fc4:	4603      	mov	r3, r0
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d001      	beq.n	8002fce <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8002fca:	2301      	movs	r3, #1
 8002fcc:	e0bf      	b.n	800314e <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	2222      	movs	r2, #34	; 0x22
 8002fd2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	2210      	movs	r2, #16
 8002fda:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	687a      	ldr	r2, [r7, #4]
 8002fe8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	893a      	ldrh	r2, [r7, #8]
 8002fee:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ffa:	b29b      	uxth	r3, r3
 8002ffc:	2bff      	cmp	r3, #255	; 0xff
 8002ffe:	d90e      	bls.n	800301e <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	22ff      	movs	r2, #255	; 0xff
 8003004:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800300a:	b2da      	uxtb	r2, r3
 800300c:	8979      	ldrh	r1, [r7, #10]
 800300e:	4b52      	ldr	r3, [pc, #328]	; (8003158 <HAL_I2C_Master_Receive+0x1e4>)
 8003010:	9300      	str	r3, [sp, #0]
 8003012:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003016:	68f8      	ldr	r0, [r7, #12]
 8003018:	f000 fdb2 	bl	8003b80 <I2C_TransferConfig>
 800301c:	e06d      	b.n	80030fa <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003022:	b29a      	uxth	r2, r3
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800302c:	b2da      	uxtb	r2, r3
 800302e:	8979      	ldrh	r1, [r7, #10]
 8003030:	4b49      	ldr	r3, [pc, #292]	; (8003158 <HAL_I2C_Master_Receive+0x1e4>)
 8003032:	9300      	str	r3, [sp, #0]
 8003034:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003038:	68f8      	ldr	r0, [r7, #12]
 800303a:	f000 fda1 	bl	8003b80 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 800303e:	e05c      	b.n	80030fa <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003040:	697a      	ldr	r2, [r7, #20]
 8003042:	6a39      	ldr	r1, [r7, #32]
 8003044:	68f8      	ldr	r0, [r7, #12]
 8003046:	f000 fc41 	bl	80038cc <I2C_WaitOnRXNEFlagUntilTimeout>
 800304a:	4603      	mov	r3, r0
 800304c:	2b00      	cmp	r3, #0
 800304e:	d001      	beq.n	8003054 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8003050:	2301      	movs	r3, #1
 8003052:	e07c      	b.n	800314e <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800305e:	b2d2      	uxtb	r2, r2
 8003060:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003066:	1c5a      	adds	r2, r3, #1
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003070:	3b01      	subs	r3, #1
 8003072:	b29a      	uxth	r2, r3
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800307c:	b29b      	uxth	r3, r3
 800307e:	3b01      	subs	r3, #1
 8003080:	b29a      	uxth	r2, r3
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800308a:	b29b      	uxth	r3, r3
 800308c:	2b00      	cmp	r3, #0
 800308e:	d034      	beq.n	80030fa <HAL_I2C_Master_Receive+0x186>
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003094:	2b00      	cmp	r3, #0
 8003096:	d130      	bne.n	80030fa <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003098:	697b      	ldr	r3, [r7, #20]
 800309a:	9300      	str	r3, [sp, #0]
 800309c:	6a3b      	ldr	r3, [r7, #32]
 800309e:	2200      	movs	r2, #0
 80030a0:	2180      	movs	r1, #128	; 0x80
 80030a2:	68f8      	ldr	r0, [r7, #12]
 80030a4:	f000 fb56 	bl	8003754 <I2C_WaitOnFlagUntilTimeout>
 80030a8:	4603      	mov	r3, r0
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d001      	beq.n	80030b2 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 80030ae:	2301      	movs	r3, #1
 80030b0:	e04d      	b.n	800314e <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030b6:	b29b      	uxth	r3, r3
 80030b8:	2bff      	cmp	r3, #255	; 0xff
 80030ba:	d90e      	bls.n	80030da <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	22ff      	movs	r2, #255	; 0xff
 80030c0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030c6:	b2da      	uxtb	r2, r3
 80030c8:	8979      	ldrh	r1, [r7, #10]
 80030ca:	2300      	movs	r3, #0
 80030cc:	9300      	str	r3, [sp, #0]
 80030ce:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80030d2:	68f8      	ldr	r0, [r7, #12]
 80030d4:	f000 fd54 	bl	8003b80 <I2C_TransferConfig>
 80030d8:	e00f      	b.n	80030fa <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030de:	b29a      	uxth	r2, r3
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030e8:	b2da      	uxtb	r2, r3
 80030ea:	8979      	ldrh	r1, [r7, #10]
 80030ec:	2300      	movs	r3, #0
 80030ee:	9300      	str	r3, [sp, #0]
 80030f0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80030f4:	68f8      	ldr	r0, [r7, #12]
 80030f6:	f000 fd43 	bl	8003b80 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030fe:	b29b      	uxth	r3, r3
 8003100:	2b00      	cmp	r3, #0
 8003102:	d19d      	bne.n	8003040 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003104:	697a      	ldr	r2, [r7, #20]
 8003106:	6a39      	ldr	r1, [r7, #32]
 8003108:	68f8      	ldr	r0, [r7, #12]
 800310a:	f000 fba3 	bl	8003854 <I2C_WaitOnSTOPFlagUntilTimeout>
 800310e:	4603      	mov	r3, r0
 8003110:	2b00      	cmp	r3, #0
 8003112:	d001      	beq.n	8003118 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8003114:	2301      	movs	r3, #1
 8003116:	e01a      	b.n	800314e <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	2220      	movs	r2, #32
 800311e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	6859      	ldr	r1, [r3, #4]
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	681a      	ldr	r2, [r3, #0]
 800312a:	4b0c      	ldr	r3, [pc, #48]	; (800315c <HAL_I2C_Master_Receive+0x1e8>)
 800312c:	400b      	ands	r3, r1
 800312e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	2220      	movs	r2, #32
 8003134:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	2200      	movs	r2, #0
 800313c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	2200      	movs	r2, #0
 8003144:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003148:	2300      	movs	r3, #0
 800314a:	e000      	b.n	800314e <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 800314c:	2302      	movs	r3, #2
  }
}
 800314e:	4618      	mov	r0, r3
 8003150:	3718      	adds	r7, #24
 8003152:	46bd      	mov	sp, r7
 8003154:	bd80      	pop	{r7, pc}
 8003156:	bf00      	nop
 8003158:	80002400 	.word	0x80002400
 800315c:	fe00e800 	.word	0xfe00e800

08003160 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003160:	b580      	push	{r7, lr}
 8003162:	b088      	sub	sp, #32
 8003164:	af02      	add	r7, sp, #8
 8003166:	60f8      	str	r0, [r7, #12]
 8003168:	4608      	mov	r0, r1
 800316a:	4611      	mov	r1, r2
 800316c:	461a      	mov	r2, r3
 800316e:	4603      	mov	r3, r0
 8003170:	817b      	strh	r3, [r7, #10]
 8003172:	460b      	mov	r3, r1
 8003174:	813b      	strh	r3, [r7, #8]
 8003176:	4613      	mov	r3, r2
 8003178:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003180:	b2db      	uxtb	r3, r3
 8003182:	2b20      	cmp	r3, #32
 8003184:	f040 80f9 	bne.w	800337a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003188:	6a3b      	ldr	r3, [r7, #32]
 800318a:	2b00      	cmp	r3, #0
 800318c:	d002      	beq.n	8003194 <HAL_I2C_Mem_Write+0x34>
 800318e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003190:	2b00      	cmp	r3, #0
 8003192:	d105      	bne.n	80031a0 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	f44f 7200 	mov.w	r2, #512	; 0x200
 800319a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800319c:	2301      	movs	r3, #1
 800319e:	e0ed      	b.n	800337c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80031a6:	2b01      	cmp	r3, #1
 80031a8:	d101      	bne.n	80031ae <HAL_I2C_Mem_Write+0x4e>
 80031aa:	2302      	movs	r3, #2
 80031ac:	e0e6      	b.n	800337c <HAL_I2C_Mem_Write+0x21c>
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	2201      	movs	r2, #1
 80031b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80031b6:	f7ff fa2d 	bl	8002614 <HAL_GetTick>
 80031ba:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80031bc:	697b      	ldr	r3, [r7, #20]
 80031be:	9300      	str	r3, [sp, #0]
 80031c0:	2319      	movs	r3, #25
 80031c2:	2201      	movs	r2, #1
 80031c4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80031c8:	68f8      	ldr	r0, [r7, #12]
 80031ca:	f000 fac3 	bl	8003754 <I2C_WaitOnFlagUntilTimeout>
 80031ce:	4603      	mov	r3, r0
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d001      	beq.n	80031d8 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80031d4:	2301      	movs	r3, #1
 80031d6:	e0d1      	b.n	800337c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	2221      	movs	r2, #33	; 0x21
 80031dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	2240      	movs	r2, #64	; 0x40
 80031e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	2200      	movs	r2, #0
 80031ec:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	6a3a      	ldr	r2, [r7, #32]
 80031f2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80031f8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	2200      	movs	r2, #0
 80031fe:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003200:	88f8      	ldrh	r0, [r7, #6]
 8003202:	893a      	ldrh	r2, [r7, #8]
 8003204:	8979      	ldrh	r1, [r7, #10]
 8003206:	697b      	ldr	r3, [r7, #20]
 8003208:	9301      	str	r3, [sp, #4]
 800320a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800320c:	9300      	str	r3, [sp, #0]
 800320e:	4603      	mov	r3, r0
 8003210:	68f8      	ldr	r0, [r7, #12]
 8003212:	f000 f9d3 	bl	80035bc <I2C_RequestMemoryWrite>
 8003216:	4603      	mov	r3, r0
 8003218:	2b00      	cmp	r3, #0
 800321a:	d005      	beq.n	8003228 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	2200      	movs	r2, #0
 8003220:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003224:	2301      	movs	r3, #1
 8003226:	e0a9      	b.n	800337c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800322c:	b29b      	uxth	r3, r3
 800322e:	2bff      	cmp	r3, #255	; 0xff
 8003230:	d90e      	bls.n	8003250 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	22ff      	movs	r2, #255	; 0xff
 8003236:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800323c:	b2da      	uxtb	r2, r3
 800323e:	8979      	ldrh	r1, [r7, #10]
 8003240:	2300      	movs	r3, #0
 8003242:	9300      	str	r3, [sp, #0]
 8003244:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003248:	68f8      	ldr	r0, [r7, #12]
 800324a:	f000 fc99 	bl	8003b80 <I2C_TransferConfig>
 800324e:	e00f      	b.n	8003270 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003254:	b29a      	uxth	r2, r3
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800325e:	b2da      	uxtb	r2, r3
 8003260:	8979      	ldrh	r1, [r7, #10]
 8003262:	2300      	movs	r3, #0
 8003264:	9300      	str	r3, [sp, #0]
 8003266:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800326a:	68f8      	ldr	r0, [r7, #12]
 800326c:	f000 fc88 	bl	8003b80 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003270:	697a      	ldr	r2, [r7, #20]
 8003272:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003274:	68f8      	ldr	r0, [r7, #12]
 8003276:	f000 faad 	bl	80037d4 <I2C_WaitOnTXISFlagUntilTimeout>
 800327a:	4603      	mov	r3, r0
 800327c:	2b00      	cmp	r3, #0
 800327e:	d001      	beq.n	8003284 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8003280:	2301      	movs	r3, #1
 8003282:	e07b      	b.n	800337c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003288:	781a      	ldrb	r2, [r3, #0]
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003294:	1c5a      	adds	r2, r3, #1
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800329e:	b29b      	uxth	r3, r3
 80032a0:	3b01      	subs	r3, #1
 80032a2:	b29a      	uxth	r2, r3
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032ac:	3b01      	subs	r3, #1
 80032ae:	b29a      	uxth	r2, r3
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032b8:	b29b      	uxth	r3, r3
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d034      	beq.n	8003328 <HAL_I2C_Mem_Write+0x1c8>
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d130      	bne.n	8003328 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80032c6:	697b      	ldr	r3, [r7, #20]
 80032c8:	9300      	str	r3, [sp, #0]
 80032ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032cc:	2200      	movs	r2, #0
 80032ce:	2180      	movs	r1, #128	; 0x80
 80032d0:	68f8      	ldr	r0, [r7, #12]
 80032d2:	f000 fa3f 	bl	8003754 <I2C_WaitOnFlagUntilTimeout>
 80032d6:	4603      	mov	r3, r0
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d001      	beq.n	80032e0 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80032dc:	2301      	movs	r3, #1
 80032de:	e04d      	b.n	800337c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032e4:	b29b      	uxth	r3, r3
 80032e6:	2bff      	cmp	r3, #255	; 0xff
 80032e8:	d90e      	bls.n	8003308 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	22ff      	movs	r2, #255	; 0xff
 80032ee:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032f4:	b2da      	uxtb	r2, r3
 80032f6:	8979      	ldrh	r1, [r7, #10]
 80032f8:	2300      	movs	r3, #0
 80032fa:	9300      	str	r3, [sp, #0]
 80032fc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003300:	68f8      	ldr	r0, [r7, #12]
 8003302:	f000 fc3d 	bl	8003b80 <I2C_TransferConfig>
 8003306:	e00f      	b.n	8003328 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800330c:	b29a      	uxth	r2, r3
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003316:	b2da      	uxtb	r2, r3
 8003318:	8979      	ldrh	r1, [r7, #10]
 800331a:	2300      	movs	r3, #0
 800331c:	9300      	str	r3, [sp, #0]
 800331e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003322:	68f8      	ldr	r0, [r7, #12]
 8003324:	f000 fc2c 	bl	8003b80 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800332c:	b29b      	uxth	r3, r3
 800332e:	2b00      	cmp	r3, #0
 8003330:	d19e      	bne.n	8003270 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003332:	697a      	ldr	r2, [r7, #20]
 8003334:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003336:	68f8      	ldr	r0, [r7, #12]
 8003338:	f000 fa8c 	bl	8003854 <I2C_WaitOnSTOPFlagUntilTimeout>
 800333c:	4603      	mov	r3, r0
 800333e:	2b00      	cmp	r3, #0
 8003340:	d001      	beq.n	8003346 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8003342:	2301      	movs	r3, #1
 8003344:	e01a      	b.n	800337c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	2220      	movs	r2, #32
 800334c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	6859      	ldr	r1, [r3, #4]
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	681a      	ldr	r2, [r3, #0]
 8003358:	4b0a      	ldr	r3, [pc, #40]	; (8003384 <HAL_I2C_Mem_Write+0x224>)
 800335a:	400b      	ands	r3, r1
 800335c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	2220      	movs	r2, #32
 8003362:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	2200      	movs	r2, #0
 800336a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	2200      	movs	r2, #0
 8003372:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003376:	2300      	movs	r3, #0
 8003378:	e000      	b.n	800337c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800337a:	2302      	movs	r3, #2
  }
}
 800337c:	4618      	mov	r0, r3
 800337e:	3718      	adds	r7, #24
 8003380:	46bd      	mov	sp, r7
 8003382:	bd80      	pop	{r7, pc}
 8003384:	fe00e800 	.word	0xfe00e800

08003388 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003388:	b580      	push	{r7, lr}
 800338a:	b088      	sub	sp, #32
 800338c:	af02      	add	r7, sp, #8
 800338e:	60f8      	str	r0, [r7, #12]
 8003390:	4608      	mov	r0, r1
 8003392:	4611      	mov	r1, r2
 8003394:	461a      	mov	r2, r3
 8003396:	4603      	mov	r3, r0
 8003398:	817b      	strh	r3, [r7, #10]
 800339a:	460b      	mov	r3, r1
 800339c:	813b      	strh	r3, [r7, #8]
 800339e:	4613      	mov	r3, r2
 80033a0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80033a8:	b2db      	uxtb	r3, r3
 80033aa:	2b20      	cmp	r3, #32
 80033ac:	f040 80fd 	bne.w	80035aa <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80033b0:	6a3b      	ldr	r3, [r7, #32]
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d002      	beq.n	80033bc <HAL_I2C_Mem_Read+0x34>
 80033b6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d105      	bne.n	80033c8 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	f44f 7200 	mov.w	r2, #512	; 0x200
 80033c2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80033c4:	2301      	movs	r3, #1
 80033c6:	e0f1      	b.n	80035ac <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80033ce:	2b01      	cmp	r3, #1
 80033d0:	d101      	bne.n	80033d6 <HAL_I2C_Mem_Read+0x4e>
 80033d2:	2302      	movs	r3, #2
 80033d4:	e0ea      	b.n	80035ac <HAL_I2C_Mem_Read+0x224>
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	2201      	movs	r2, #1
 80033da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80033de:	f7ff f919 	bl	8002614 <HAL_GetTick>
 80033e2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80033e4:	697b      	ldr	r3, [r7, #20]
 80033e6:	9300      	str	r3, [sp, #0]
 80033e8:	2319      	movs	r3, #25
 80033ea:	2201      	movs	r2, #1
 80033ec:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80033f0:	68f8      	ldr	r0, [r7, #12]
 80033f2:	f000 f9af 	bl	8003754 <I2C_WaitOnFlagUntilTimeout>
 80033f6:	4603      	mov	r3, r0
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d001      	beq.n	8003400 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80033fc:	2301      	movs	r3, #1
 80033fe:	e0d5      	b.n	80035ac <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	2222      	movs	r2, #34	; 0x22
 8003404:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	2240      	movs	r2, #64	; 0x40
 800340c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	2200      	movs	r2, #0
 8003414:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	6a3a      	ldr	r2, [r7, #32]
 800341a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003420:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	2200      	movs	r2, #0
 8003426:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003428:	88f8      	ldrh	r0, [r7, #6]
 800342a:	893a      	ldrh	r2, [r7, #8]
 800342c:	8979      	ldrh	r1, [r7, #10]
 800342e:	697b      	ldr	r3, [r7, #20]
 8003430:	9301      	str	r3, [sp, #4]
 8003432:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003434:	9300      	str	r3, [sp, #0]
 8003436:	4603      	mov	r3, r0
 8003438:	68f8      	ldr	r0, [r7, #12]
 800343a:	f000 f913 	bl	8003664 <I2C_RequestMemoryRead>
 800343e:	4603      	mov	r3, r0
 8003440:	2b00      	cmp	r3, #0
 8003442:	d005      	beq.n	8003450 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	2200      	movs	r2, #0
 8003448:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800344c:	2301      	movs	r3, #1
 800344e:	e0ad      	b.n	80035ac <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003454:	b29b      	uxth	r3, r3
 8003456:	2bff      	cmp	r3, #255	; 0xff
 8003458:	d90e      	bls.n	8003478 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	22ff      	movs	r2, #255	; 0xff
 800345e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003464:	b2da      	uxtb	r2, r3
 8003466:	8979      	ldrh	r1, [r7, #10]
 8003468:	4b52      	ldr	r3, [pc, #328]	; (80035b4 <HAL_I2C_Mem_Read+0x22c>)
 800346a:	9300      	str	r3, [sp, #0]
 800346c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003470:	68f8      	ldr	r0, [r7, #12]
 8003472:	f000 fb85 	bl	8003b80 <I2C_TransferConfig>
 8003476:	e00f      	b.n	8003498 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800347c:	b29a      	uxth	r2, r3
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003486:	b2da      	uxtb	r2, r3
 8003488:	8979      	ldrh	r1, [r7, #10]
 800348a:	4b4a      	ldr	r3, [pc, #296]	; (80035b4 <HAL_I2C_Mem_Read+0x22c>)
 800348c:	9300      	str	r3, [sp, #0]
 800348e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003492:	68f8      	ldr	r0, [r7, #12]
 8003494:	f000 fb74 	bl	8003b80 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8003498:	697b      	ldr	r3, [r7, #20]
 800349a:	9300      	str	r3, [sp, #0]
 800349c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800349e:	2200      	movs	r2, #0
 80034a0:	2104      	movs	r1, #4
 80034a2:	68f8      	ldr	r0, [r7, #12]
 80034a4:	f000 f956 	bl	8003754 <I2C_WaitOnFlagUntilTimeout>
 80034a8:	4603      	mov	r3, r0
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d001      	beq.n	80034b2 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80034ae:	2301      	movs	r3, #1
 80034b0:	e07c      	b.n	80035ac <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034bc:	b2d2      	uxtb	r2, r2
 80034be:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034c4:	1c5a      	adds	r2, r3, #1
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034ce:	3b01      	subs	r3, #1
 80034d0:	b29a      	uxth	r2, r3
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034da:	b29b      	uxth	r3, r3
 80034dc:	3b01      	subs	r3, #1
 80034de:	b29a      	uxth	r2, r3
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034e8:	b29b      	uxth	r3, r3
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d034      	beq.n	8003558 <HAL_I2C_Mem_Read+0x1d0>
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d130      	bne.n	8003558 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80034f6:	697b      	ldr	r3, [r7, #20]
 80034f8:	9300      	str	r3, [sp, #0]
 80034fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034fc:	2200      	movs	r2, #0
 80034fe:	2180      	movs	r1, #128	; 0x80
 8003500:	68f8      	ldr	r0, [r7, #12]
 8003502:	f000 f927 	bl	8003754 <I2C_WaitOnFlagUntilTimeout>
 8003506:	4603      	mov	r3, r0
 8003508:	2b00      	cmp	r3, #0
 800350a:	d001      	beq.n	8003510 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800350c:	2301      	movs	r3, #1
 800350e:	e04d      	b.n	80035ac <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003514:	b29b      	uxth	r3, r3
 8003516:	2bff      	cmp	r3, #255	; 0xff
 8003518:	d90e      	bls.n	8003538 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	22ff      	movs	r2, #255	; 0xff
 800351e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003524:	b2da      	uxtb	r2, r3
 8003526:	8979      	ldrh	r1, [r7, #10]
 8003528:	2300      	movs	r3, #0
 800352a:	9300      	str	r3, [sp, #0]
 800352c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003530:	68f8      	ldr	r0, [r7, #12]
 8003532:	f000 fb25 	bl	8003b80 <I2C_TransferConfig>
 8003536:	e00f      	b.n	8003558 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800353c:	b29a      	uxth	r2, r3
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003546:	b2da      	uxtb	r2, r3
 8003548:	8979      	ldrh	r1, [r7, #10]
 800354a:	2300      	movs	r3, #0
 800354c:	9300      	str	r3, [sp, #0]
 800354e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003552:	68f8      	ldr	r0, [r7, #12]
 8003554:	f000 fb14 	bl	8003b80 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800355c:	b29b      	uxth	r3, r3
 800355e:	2b00      	cmp	r3, #0
 8003560:	d19a      	bne.n	8003498 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003562:	697a      	ldr	r2, [r7, #20]
 8003564:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003566:	68f8      	ldr	r0, [r7, #12]
 8003568:	f000 f974 	bl	8003854 <I2C_WaitOnSTOPFlagUntilTimeout>
 800356c:	4603      	mov	r3, r0
 800356e:	2b00      	cmp	r3, #0
 8003570:	d001      	beq.n	8003576 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8003572:	2301      	movs	r3, #1
 8003574:	e01a      	b.n	80035ac <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	2220      	movs	r2, #32
 800357c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	6859      	ldr	r1, [r3, #4]
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	681a      	ldr	r2, [r3, #0]
 8003588:	4b0b      	ldr	r3, [pc, #44]	; (80035b8 <HAL_I2C_Mem_Read+0x230>)
 800358a:	400b      	ands	r3, r1
 800358c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	2220      	movs	r2, #32
 8003592:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	2200      	movs	r2, #0
 800359a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	2200      	movs	r2, #0
 80035a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80035a6:	2300      	movs	r3, #0
 80035a8:	e000      	b.n	80035ac <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80035aa:	2302      	movs	r3, #2
  }
}
 80035ac:	4618      	mov	r0, r3
 80035ae:	3718      	adds	r7, #24
 80035b0:	46bd      	mov	sp, r7
 80035b2:	bd80      	pop	{r7, pc}
 80035b4:	80002400 	.word	0x80002400
 80035b8:	fe00e800 	.word	0xfe00e800

080035bc <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	b086      	sub	sp, #24
 80035c0:	af02      	add	r7, sp, #8
 80035c2:	60f8      	str	r0, [r7, #12]
 80035c4:	4608      	mov	r0, r1
 80035c6:	4611      	mov	r1, r2
 80035c8:	461a      	mov	r2, r3
 80035ca:	4603      	mov	r3, r0
 80035cc:	817b      	strh	r3, [r7, #10]
 80035ce:	460b      	mov	r3, r1
 80035d0:	813b      	strh	r3, [r7, #8]
 80035d2:	4613      	mov	r3, r2
 80035d4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80035d6:	88fb      	ldrh	r3, [r7, #6]
 80035d8:	b2da      	uxtb	r2, r3
 80035da:	8979      	ldrh	r1, [r7, #10]
 80035dc:	4b20      	ldr	r3, [pc, #128]	; (8003660 <I2C_RequestMemoryWrite+0xa4>)
 80035de:	9300      	str	r3, [sp, #0]
 80035e0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80035e4:	68f8      	ldr	r0, [r7, #12]
 80035e6:	f000 facb 	bl	8003b80 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80035ea:	69fa      	ldr	r2, [r7, #28]
 80035ec:	69b9      	ldr	r1, [r7, #24]
 80035ee:	68f8      	ldr	r0, [r7, #12]
 80035f0:	f000 f8f0 	bl	80037d4 <I2C_WaitOnTXISFlagUntilTimeout>
 80035f4:	4603      	mov	r3, r0
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d001      	beq.n	80035fe <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80035fa:	2301      	movs	r3, #1
 80035fc:	e02c      	b.n	8003658 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80035fe:	88fb      	ldrh	r3, [r7, #6]
 8003600:	2b01      	cmp	r3, #1
 8003602:	d105      	bne.n	8003610 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003604:	893b      	ldrh	r3, [r7, #8]
 8003606:	b2da      	uxtb	r2, r3
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	629a      	str	r2, [r3, #40]	; 0x28
 800360e:	e015      	b.n	800363c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003610:	893b      	ldrh	r3, [r7, #8]
 8003612:	0a1b      	lsrs	r3, r3, #8
 8003614:	b29b      	uxth	r3, r3
 8003616:	b2da      	uxtb	r2, r3
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800361e:	69fa      	ldr	r2, [r7, #28]
 8003620:	69b9      	ldr	r1, [r7, #24]
 8003622:	68f8      	ldr	r0, [r7, #12]
 8003624:	f000 f8d6 	bl	80037d4 <I2C_WaitOnTXISFlagUntilTimeout>
 8003628:	4603      	mov	r3, r0
 800362a:	2b00      	cmp	r3, #0
 800362c:	d001      	beq.n	8003632 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800362e:	2301      	movs	r3, #1
 8003630:	e012      	b.n	8003658 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003632:	893b      	ldrh	r3, [r7, #8]
 8003634:	b2da      	uxtb	r2, r3
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800363c:	69fb      	ldr	r3, [r7, #28]
 800363e:	9300      	str	r3, [sp, #0]
 8003640:	69bb      	ldr	r3, [r7, #24]
 8003642:	2200      	movs	r2, #0
 8003644:	2180      	movs	r1, #128	; 0x80
 8003646:	68f8      	ldr	r0, [r7, #12]
 8003648:	f000 f884 	bl	8003754 <I2C_WaitOnFlagUntilTimeout>
 800364c:	4603      	mov	r3, r0
 800364e:	2b00      	cmp	r3, #0
 8003650:	d001      	beq.n	8003656 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8003652:	2301      	movs	r3, #1
 8003654:	e000      	b.n	8003658 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8003656:	2300      	movs	r3, #0
}
 8003658:	4618      	mov	r0, r3
 800365a:	3710      	adds	r7, #16
 800365c:	46bd      	mov	sp, r7
 800365e:	bd80      	pop	{r7, pc}
 8003660:	80002000 	.word	0x80002000

08003664 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8003664:	b580      	push	{r7, lr}
 8003666:	b086      	sub	sp, #24
 8003668:	af02      	add	r7, sp, #8
 800366a:	60f8      	str	r0, [r7, #12]
 800366c:	4608      	mov	r0, r1
 800366e:	4611      	mov	r1, r2
 8003670:	461a      	mov	r2, r3
 8003672:	4603      	mov	r3, r0
 8003674:	817b      	strh	r3, [r7, #10]
 8003676:	460b      	mov	r3, r1
 8003678:	813b      	strh	r3, [r7, #8]
 800367a:	4613      	mov	r3, r2
 800367c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800367e:	88fb      	ldrh	r3, [r7, #6]
 8003680:	b2da      	uxtb	r2, r3
 8003682:	8979      	ldrh	r1, [r7, #10]
 8003684:	4b20      	ldr	r3, [pc, #128]	; (8003708 <I2C_RequestMemoryRead+0xa4>)
 8003686:	9300      	str	r3, [sp, #0]
 8003688:	2300      	movs	r3, #0
 800368a:	68f8      	ldr	r0, [r7, #12]
 800368c:	f000 fa78 	bl	8003b80 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003690:	69fa      	ldr	r2, [r7, #28]
 8003692:	69b9      	ldr	r1, [r7, #24]
 8003694:	68f8      	ldr	r0, [r7, #12]
 8003696:	f000 f89d 	bl	80037d4 <I2C_WaitOnTXISFlagUntilTimeout>
 800369a:	4603      	mov	r3, r0
 800369c:	2b00      	cmp	r3, #0
 800369e:	d001      	beq.n	80036a4 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80036a0:	2301      	movs	r3, #1
 80036a2:	e02c      	b.n	80036fe <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80036a4:	88fb      	ldrh	r3, [r7, #6]
 80036a6:	2b01      	cmp	r3, #1
 80036a8:	d105      	bne.n	80036b6 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80036aa:	893b      	ldrh	r3, [r7, #8]
 80036ac:	b2da      	uxtb	r2, r3
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	629a      	str	r2, [r3, #40]	; 0x28
 80036b4:	e015      	b.n	80036e2 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80036b6:	893b      	ldrh	r3, [r7, #8]
 80036b8:	0a1b      	lsrs	r3, r3, #8
 80036ba:	b29b      	uxth	r3, r3
 80036bc:	b2da      	uxtb	r2, r3
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80036c4:	69fa      	ldr	r2, [r7, #28]
 80036c6:	69b9      	ldr	r1, [r7, #24]
 80036c8:	68f8      	ldr	r0, [r7, #12]
 80036ca:	f000 f883 	bl	80037d4 <I2C_WaitOnTXISFlagUntilTimeout>
 80036ce:	4603      	mov	r3, r0
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d001      	beq.n	80036d8 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80036d4:	2301      	movs	r3, #1
 80036d6:	e012      	b.n	80036fe <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80036d8:	893b      	ldrh	r3, [r7, #8]
 80036da:	b2da      	uxtb	r2, r3
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80036e2:	69fb      	ldr	r3, [r7, #28]
 80036e4:	9300      	str	r3, [sp, #0]
 80036e6:	69bb      	ldr	r3, [r7, #24]
 80036e8:	2200      	movs	r2, #0
 80036ea:	2140      	movs	r1, #64	; 0x40
 80036ec:	68f8      	ldr	r0, [r7, #12]
 80036ee:	f000 f831 	bl	8003754 <I2C_WaitOnFlagUntilTimeout>
 80036f2:	4603      	mov	r3, r0
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d001      	beq.n	80036fc <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80036f8:	2301      	movs	r3, #1
 80036fa:	e000      	b.n	80036fe <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80036fc:	2300      	movs	r3, #0
}
 80036fe:	4618      	mov	r0, r3
 8003700:	3710      	adds	r7, #16
 8003702:	46bd      	mov	sp, r7
 8003704:	bd80      	pop	{r7, pc}
 8003706:	bf00      	nop
 8003708:	80002000 	.word	0x80002000

0800370c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800370c:	b480      	push	{r7}
 800370e:	b083      	sub	sp, #12
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	699b      	ldr	r3, [r3, #24]
 800371a:	f003 0302 	and.w	r3, r3, #2
 800371e:	2b02      	cmp	r3, #2
 8003720:	d103      	bne.n	800372a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	2200      	movs	r2, #0
 8003728:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	699b      	ldr	r3, [r3, #24]
 8003730:	f003 0301 	and.w	r3, r3, #1
 8003734:	2b01      	cmp	r3, #1
 8003736:	d007      	beq.n	8003748 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	699a      	ldr	r2, [r3, #24]
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f042 0201 	orr.w	r2, r2, #1
 8003746:	619a      	str	r2, [r3, #24]
  }
}
 8003748:	bf00      	nop
 800374a:	370c      	adds	r7, #12
 800374c:	46bd      	mov	sp, r7
 800374e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003752:	4770      	bx	lr

08003754 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003754:	b580      	push	{r7, lr}
 8003756:	b084      	sub	sp, #16
 8003758:	af00      	add	r7, sp, #0
 800375a:	60f8      	str	r0, [r7, #12]
 800375c:	60b9      	str	r1, [r7, #8]
 800375e:	603b      	str	r3, [r7, #0]
 8003760:	4613      	mov	r3, r2
 8003762:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003764:	e022      	b.n	80037ac <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003766:	683b      	ldr	r3, [r7, #0]
 8003768:	f1b3 3fff 	cmp.w	r3, #4294967295
 800376c:	d01e      	beq.n	80037ac <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800376e:	f7fe ff51 	bl	8002614 <HAL_GetTick>
 8003772:	4602      	mov	r2, r0
 8003774:	69bb      	ldr	r3, [r7, #24]
 8003776:	1ad3      	subs	r3, r2, r3
 8003778:	683a      	ldr	r2, [r7, #0]
 800377a:	429a      	cmp	r2, r3
 800377c:	d302      	bcc.n	8003784 <I2C_WaitOnFlagUntilTimeout+0x30>
 800377e:	683b      	ldr	r3, [r7, #0]
 8003780:	2b00      	cmp	r3, #0
 8003782:	d113      	bne.n	80037ac <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003788:	f043 0220 	orr.w	r2, r3, #32
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	2220      	movs	r2, #32
 8003794:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	2200      	movs	r2, #0
 800379c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	2200      	movs	r2, #0
 80037a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80037a8:	2301      	movs	r3, #1
 80037aa:	e00f      	b.n	80037cc <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	699a      	ldr	r2, [r3, #24]
 80037b2:	68bb      	ldr	r3, [r7, #8]
 80037b4:	4013      	ands	r3, r2
 80037b6:	68ba      	ldr	r2, [r7, #8]
 80037b8:	429a      	cmp	r2, r3
 80037ba:	bf0c      	ite	eq
 80037bc:	2301      	moveq	r3, #1
 80037be:	2300      	movne	r3, #0
 80037c0:	b2db      	uxtb	r3, r3
 80037c2:	461a      	mov	r2, r3
 80037c4:	79fb      	ldrb	r3, [r7, #7]
 80037c6:	429a      	cmp	r2, r3
 80037c8:	d0cd      	beq.n	8003766 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80037ca:	2300      	movs	r3, #0
}
 80037cc:	4618      	mov	r0, r3
 80037ce:	3710      	adds	r7, #16
 80037d0:	46bd      	mov	sp, r7
 80037d2:	bd80      	pop	{r7, pc}

080037d4 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b084      	sub	sp, #16
 80037d8:	af00      	add	r7, sp, #0
 80037da:	60f8      	str	r0, [r7, #12]
 80037dc:	60b9      	str	r1, [r7, #8]
 80037de:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80037e0:	e02c      	b.n	800383c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80037e2:	687a      	ldr	r2, [r7, #4]
 80037e4:	68b9      	ldr	r1, [r7, #8]
 80037e6:	68f8      	ldr	r0, [r7, #12]
 80037e8:	f000 f8ea 	bl	80039c0 <I2C_IsErrorOccurred>
 80037ec:	4603      	mov	r3, r0
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d001      	beq.n	80037f6 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80037f2:	2301      	movs	r3, #1
 80037f4:	e02a      	b.n	800384c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80037f6:	68bb      	ldr	r3, [r7, #8]
 80037f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037fc:	d01e      	beq.n	800383c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037fe:	f7fe ff09 	bl	8002614 <HAL_GetTick>
 8003802:	4602      	mov	r2, r0
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	1ad3      	subs	r3, r2, r3
 8003808:	68ba      	ldr	r2, [r7, #8]
 800380a:	429a      	cmp	r2, r3
 800380c:	d302      	bcc.n	8003814 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800380e:	68bb      	ldr	r3, [r7, #8]
 8003810:	2b00      	cmp	r3, #0
 8003812:	d113      	bne.n	800383c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003818:	f043 0220 	orr.w	r2, r3, #32
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	2220      	movs	r2, #32
 8003824:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	2200      	movs	r2, #0
 800382c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	2200      	movs	r2, #0
 8003834:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003838:	2301      	movs	r3, #1
 800383a:	e007      	b.n	800384c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	699b      	ldr	r3, [r3, #24]
 8003842:	f003 0302 	and.w	r3, r3, #2
 8003846:	2b02      	cmp	r3, #2
 8003848:	d1cb      	bne.n	80037e2 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800384a:	2300      	movs	r3, #0
}
 800384c:	4618      	mov	r0, r3
 800384e:	3710      	adds	r7, #16
 8003850:	46bd      	mov	sp, r7
 8003852:	bd80      	pop	{r7, pc}

08003854 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003854:	b580      	push	{r7, lr}
 8003856:	b084      	sub	sp, #16
 8003858:	af00      	add	r7, sp, #0
 800385a:	60f8      	str	r0, [r7, #12]
 800385c:	60b9      	str	r1, [r7, #8]
 800385e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003860:	e028      	b.n	80038b4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003862:	687a      	ldr	r2, [r7, #4]
 8003864:	68b9      	ldr	r1, [r7, #8]
 8003866:	68f8      	ldr	r0, [r7, #12]
 8003868:	f000 f8aa 	bl	80039c0 <I2C_IsErrorOccurred>
 800386c:	4603      	mov	r3, r0
 800386e:	2b00      	cmp	r3, #0
 8003870:	d001      	beq.n	8003876 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003872:	2301      	movs	r3, #1
 8003874:	e026      	b.n	80038c4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003876:	f7fe fecd 	bl	8002614 <HAL_GetTick>
 800387a:	4602      	mov	r2, r0
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	1ad3      	subs	r3, r2, r3
 8003880:	68ba      	ldr	r2, [r7, #8]
 8003882:	429a      	cmp	r2, r3
 8003884:	d302      	bcc.n	800388c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003886:	68bb      	ldr	r3, [r7, #8]
 8003888:	2b00      	cmp	r3, #0
 800388a:	d113      	bne.n	80038b4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003890:	f043 0220 	orr.w	r2, r3, #32
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	2220      	movs	r2, #32
 800389c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	2200      	movs	r2, #0
 80038a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	2200      	movs	r2, #0
 80038ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80038b0:	2301      	movs	r3, #1
 80038b2:	e007      	b.n	80038c4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	699b      	ldr	r3, [r3, #24]
 80038ba:	f003 0320 	and.w	r3, r3, #32
 80038be:	2b20      	cmp	r3, #32
 80038c0:	d1cf      	bne.n	8003862 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80038c2:	2300      	movs	r3, #0
}
 80038c4:	4618      	mov	r0, r3
 80038c6:	3710      	adds	r7, #16
 80038c8:	46bd      	mov	sp, r7
 80038ca:	bd80      	pop	{r7, pc}

080038cc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b084      	sub	sp, #16
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	60f8      	str	r0, [r7, #12]
 80038d4:	60b9      	str	r1, [r7, #8]
 80038d6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80038d8:	e064      	b.n	80039a4 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80038da:	687a      	ldr	r2, [r7, #4]
 80038dc:	68b9      	ldr	r1, [r7, #8]
 80038de:	68f8      	ldr	r0, [r7, #12]
 80038e0:	f000 f86e 	bl	80039c0 <I2C_IsErrorOccurred>
 80038e4:	4603      	mov	r3, r0
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d001      	beq.n	80038ee <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80038ea:	2301      	movs	r3, #1
 80038ec:	e062      	b.n	80039b4 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	699b      	ldr	r3, [r3, #24]
 80038f4:	f003 0320 	and.w	r3, r3, #32
 80038f8:	2b20      	cmp	r3, #32
 80038fa:	d138      	bne.n	800396e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	699b      	ldr	r3, [r3, #24]
 8003902:	f003 0304 	and.w	r3, r3, #4
 8003906:	2b04      	cmp	r3, #4
 8003908:	d105      	bne.n	8003916 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800390e:	2b00      	cmp	r3, #0
 8003910:	d001      	beq.n	8003916 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8003912:	2300      	movs	r3, #0
 8003914:	e04e      	b.n	80039b4 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	699b      	ldr	r3, [r3, #24]
 800391c:	f003 0310 	and.w	r3, r3, #16
 8003920:	2b10      	cmp	r3, #16
 8003922:	d107      	bne.n	8003934 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	2210      	movs	r2, #16
 800392a:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	2204      	movs	r2, #4
 8003930:	645a      	str	r2, [r3, #68]	; 0x44
 8003932:	e002      	b.n	800393a <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	2200      	movs	r2, #0
 8003938:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	2220      	movs	r2, #32
 8003940:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	6859      	ldr	r1, [r3, #4]
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	681a      	ldr	r2, [r3, #0]
 800394c:	4b1b      	ldr	r3, [pc, #108]	; (80039bc <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 800394e:	400b      	ands	r3, r1
 8003950:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	2220      	movs	r2, #32
 8003956:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	2200      	movs	r2, #0
 800395e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	2200      	movs	r2, #0
 8003966:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800396a:	2301      	movs	r3, #1
 800396c:	e022      	b.n	80039b4 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800396e:	f7fe fe51 	bl	8002614 <HAL_GetTick>
 8003972:	4602      	mov	r2, r0
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	1ad3      	subs	r3, r2, r3
 8003978:	68ba      	ldr	r2, [r7, #8]
 800397a:	429a      	cmp	r2, r3
 800397c:	d302      	bcc.n	8003984 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 800397e:	68bb      	ldr	r3, [r7, #8]
 8003980:	2b00      	cmp	r3, #0
 8003982:	d10f      	bne.n	80039a4 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003988:	f043 0220 	orr.w	r2, r3, #32
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	2220      	movs	r2, #32
 8003994:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	2200      	movs	r2, #0
 800399c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80039a0:	2301      	movs	r3, #1
 80039a2:	e007      	b.n	80039b4 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	699b      	ldr	r3, [r3, #24]
 80039aa:	f003 0304 	and.w	r3, r3, #4
 80039ae:	2b04      	cmp	r3, #4
 80039b0:	d193      	bne.n	80038da <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80039b2:	2300      	movs	r3, #0
}
 80039b4:	4618      	mov	r0, r3
 80039b6:	3710      	adds	r7, #16
 80039b8:	46bd      	mov	sp, r7
 80039ba:	bd80      	pop	{r7, pc}
 80039bc:	fe00e800 	.word	0xfe00e800

080039c0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80039c0:	b580      	push	{r7, lr}
 80039c2:	b08a      	sub	sp, #40	; 0x28
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	60f8      	str	r0, [r7, #12]
 80039c8:	60b9      	str	r1, [r7, #8]
 80039ca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80039cc:	2300      	movs	r3, #0
 80039ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	699b      	ldr	r3, [r3, #24]
 80039d8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80039da:	2300      	movs	r3, #0
 80039dc:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80039e2:	69bb      	ldr	r3, [r7, #24]
 80039e4:	f003 0310 	and.w	r3, r3, #16
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d068      	beq.n	8003abe <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	2210      	movs	r2, #16
 80039f2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80039f4:	e049      	b.n	8003a8a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80039f6:	68bb      	ldr	r3, [r7, #8]
 80039f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039fc:	d045      	beq.n	8003a8a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80039fe:	f7fe fe09 	bl	8002614 <HAL_GetTick>
 8003a02:	4602      	mov	r2, r0
 8003a04:	69fb      	ldr	r3, [r7, #28]
 8003a06:	1ad3      	subs	r3, r2, r3
 8003a08:	68ba      	ldr	r2, [r7, #8]
 8003a0a:	429a      	cmp	r2, r3
 8003a0c:	d302      	bcc.n	8003a14 <I2C_IsErrorOccurred+0x54>
 8003a0e:	68bb      	ldr	r3, [r7, #8]
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d13a      	bne.n	8003a8a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	685b      	ldr	r3, [r3, #4]
 8003a1a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a1e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003a26:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	699b      	ldr	r3, [r3, #24]
 8003a2e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003a32:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a36:	d121      	bne.n	8003a7c <I2C_IsErrorOccurred+0xbc>
 8003a38:	697b      	ldr	r3, [r7, #20]
 8003a3a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003a3e:	d01d      	beq.n	8003a7c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8003a40:	7cfb      	ldrb	r3, [r7, #19]
 8003a42:	2b20      	cmp	r3, #32
 8003a44:	d01a      	beq.n	8003a7c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	685a      	ldr	r2, [r3, #4]
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003a54:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003a56:	f7fe fddd 	bl	8002614 <HAL_GetTick>
 8003a5a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003a5c:	e00e      	b.n	8003a7c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003a5e:	f7fe fdd9 	bl	8002614 <HAL_GetTick>
 8003a62:	4602      	mov	r2, r0
 8003a64:	69fb      	ldr	r3, [r7, #28]
 8003a66:	1ad3      	subs	r3, r2, r3
 8003a68:	2b19      	cmp	r3, #25
 8003a6a:	d907      	bls.n	8003a7c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 8003a6c:	6a3b      	ldr	r3, [r7, #32]
 8003a6e:	f043 0320 	orr.w	r3, r3, #32
 8003a72:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003a74:	2301      	movs	r3, #1
 8003a76:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8003a7a:	e006      	b.n	8003a8a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	699b      	ldr	r3, [r3, #24]
 8003a82:	f003 0320 	and.w	r3, r3, #32
 8003a86:	2b20      	cmp	r3, #32
 8003a88:	d1e9      	bne.n	8003a5e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	699b      	ldr	r3, [r3, #24]
 8003a90:	f003 0320 	and.w	r3, r3, #32
 8003a94:	2b20      	cmp	r3, #32
 8003a96:	d003      	beq.n	8003aa0 <I2C_IsErrorOccurred+0xe0>
 8003a98:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d0aa      	beq.n	80039f6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003aa0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d103      	bne.n	8003ab0 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	2220      	movs	r2, #32
 8003aae:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003ab0:	6a3b      	ldr	r3, [r7, #32]
 8003ab2:	f043 0304 	orr.w	r3, r3, #4
 8003ab6:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003ab8:	2301      	movs	r3, #1
 8003aba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	699b      	ldr	r3, [r3, #24]
 8003ac4:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003ac6:	69bb      	ldr	r3, [r7, #24]
 8003ac8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d00b      	beq.n	8003ae8 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003ad0:	6a3b      	ldr	r3, [r7, #32]
 8003ad2:	f043 0301 	orr.w	r3, r3, #1
 8003ad6:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003ae0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003ae2:	2301      	movs	r3, #1
 8003ae4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003ae8:	69bb      	ldr	r3, [r7, #24]
 8003aea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d00b      	beq.n	8003b0a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003af2:	6a3b      	ldr	r3, [r7, #32]
 8003af4:	f043 0308 	orr.w	r3, r3, #8
 8003af8:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003b02:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003b04:	2301      	movs	r3, #1
 8003b06:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003b0a:	69bb      	ldr	r3, [r7, #24]
 8003b0c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d00b      	beq.n	8003b2c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003b14:	6a3b      	ldr	r3, [r7, #32]
 8003b16:	f043 0302 	orr.w	r3, r3, #2
 8003b1a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003b24:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003b26:	2301      	movs	r3, #1
 8003b28:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8003b2c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d01c      	beq.n	8003b6e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003b34:	68f8      	ldr	r0, [r7, #12]
 8003b36:	f7ff fde9 	bl	800370c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	6859      	ldr	r1, [r3, #4]
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	681a      	ldr	r2, [r3, #0]
 8003b44:	4b0d      	ldr	r3, [pc, #52]	; (8003b7c <I2C_IsErrorOccurred+0x1bc>)
 8003b46:	400b      	ands	r3, r1
 8003b48:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003b4e:	6a3b      	ldr	r3, [r7, #32]
 8003b50:	431a      	orrs	r2, r3
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	2220      	movs	r2, #32
 8003b5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	2200      	movs	r2, #0
 8003b62:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	2200      	movs	r2, #0
 8003b6a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8003b6e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8003b72:	4618      	mov	r0, r3
 8003b74:	3728      	adds	r7, #40	; 0x28
 8003b76:	46bd      	mov	sp, r7
 8003b78:	bd80      	pop	{r7, pc}
 8003b7a:	bf00      	nop
 8003b7c:	fe00e800 	.word	0xfe00e800

08003b80 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003b80:	b480      	push	{r7}
 8003b82:	b087      	sub	sp, #28
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	60f8      	str	r0, [r7, #12]
 8003b88:	607b      	str	r3, [r7, #4]
 8003b8a:	460b      	mov	r3, r1
 8003b8c:	817b      	strh	r3, [r7, #10]
 8003b8e:	4613      	mov	r3, r2
 8003b90:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003b92:	897b      	ldrh	r3, [r7, #10]
 8003b94:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003b98:	7a7b      	ldrb	r3, [r7, #9]
 8003b9a:	041b      	lsls	r3, r3, #16
 8003b9c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003ba0:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003ba6:	6a3b      	ldr	r3, [r7, #32]
 8003ba8:	4313      	orrs	r3, r2
 8003baa:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003bae:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	685a      	ldr	r2, [r3, #4]
 8003bb6:	6a3b      	ldr	r3, [r7, #32]
 8003bb8:	0d5b      	lsrs	r3, r3, #21
 8003bba:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8003bbe:	4b08      	ldr	r3, [pc, #32]	; (8003be0 <I2C_TransferConfig+0x60>)
 8003bc0:	430b      	orrs	r3, r1
 8003bc2:	43db      	mvns	r3, r3
 8003bc4:	ea02 0103 	and.w	r1, r2, r3
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	697a      	ldr	r2, [r7, #20]
 8003bce:	430a      	orrs	r2, r1
 8003bd0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003bd2:	bf00      	nop
 8003bd4:	371c      	adds	r7, #28
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bdc:	4770      	bx	lr
 8003bde:	bf00      	nop
 8003be0:	03ff63ff 	.word	0x03ff63ff

08003be4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003be4:	b480      	push	{r7}
 8003be6:	b083      	sub	sp, #12
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
 8003bec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003bf4:	b2db      	uxtb	r3, r3
 8003bf6:	2b20      	cmp	r3, #32
 8003bf8:	d138      	bne.n	8003c6c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003c00:	2b01      	cmp	r3, #1
 8003c02:	d101      	bne.n	8003c08 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003c04:	2302      	movs	r3, #2
 8003c06:	e032      	b.n	8003c6e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2201      	movs	r2, #1
 8003c0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2224      	movs	r2, #36	; 0x24
 8003c14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	681a      	ldr	r2, [r3, #0]
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f022 0201 	bic.w	r2, r2, #1
 8003c26:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	681a      	ldr	r2, [r3, #0]
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003c36:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	6819      	ldr	r1, [r3, #0]
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	683a      	ldr	r2, [r7, #0]
 8003c44:	430a      	orrs	r2, r1
 8003c46:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	681a      	ldr	r2, [r3, #0]
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f042 0201 	orr.w	r2, r2, #1
 8003c56:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2220      	movs	r2, #32
 8003c5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2200      	movs	r2, #0
 8003c64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003c68:	2300      	movs	r3, #0
 8003c6a:	e000      	b.n	8003c6e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003c6c:	2302      	movs	r3, #2
  }
}
 8003c6e:	4618      	mov	r0, r3
 8003c70:	370c      	adds	r7, #12
 8003c72:	46bd      	mov	sp, r7
 8003c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c78:	4770      	bx	lr

08003c7a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003c7a:	b480      	push	{r7}
 8003c7c:	b085      	sub	sp, #20
 8003c7e:	af00      	add	r7, sp, #0
 8003c80:	6078      	str	r0, [r7, #4]
 8003c82:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003c8a:	b2db      	uxtb	r3, r3
 8003c8c:	2b20      	cmp	r3, #32
 8003c8e:	d139      	bne.n	8003d04 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003c96:	2b01      	cmp	r3, #1
 8003c98:	d101      	bne.n	8003c9e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003c9a:	2302      	movs	r3, #2
 8003c9c:	e033      	b.n	8003d06 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	2201      	movs	r2, #1
 8003ca2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	2224      	movs	r2, #36	; 0x24
 8003caa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	681a      	ldr	r2, [r3, #0]
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f022 0201 	bic.w	r2, r2, #1
 8003cbc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003ccc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003cce:	683b      	ldr	r3, [r7, #0]
 8003cd0:	021b      	lsls	r3, r3, #8
 8003cd2:	68fa      	ldr	r2, [r7, #12]
 8003cd4:	4313      	orrs	r3, r2
 8003cd6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	68fa      	ldr	r2, [r7, #12]
 8003cde:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	681a      	ldr	r2, [r3, #0]
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f042 0201 	orr.w	r2, r2, #1
 8003cee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2220      	movs	r2, #32
 8003cf4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2200      	movs	r2, #0
 8003cfc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003d00:	2300      	movs	r3, #0
 8003d02:	e000      	b.n	8003d06 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003d04:	2302      	movs	r3, #2
  }
}
 8003d06:	4618      	mov	r0, r3
 8003d08:	3714      	adds	r7, #20
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d10:	4770      	bx	lr
	...

08003d14 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003d14:	b580      	push	{r7, lr}
 8003d16:	b086      	sub	sp, #24
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003d1c:	2300      	movs	r3, #0
 8003d1e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d101      	bne.n	8003d2a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003d26:	2301      	movs	r3, #1
 8003d28:	e291      	b.n	800424e <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f003 0301 	and.w	r3, r3, #1
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	f000 8087 	beq.w	8003e46 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003d38:	4b96      	ldr	r3, [pc, #600]	; (8003f94 <HAL_RCC_OscConfig+0x280>)
 8003d3a:	689b      	ldr	r3, [r3, #8]
 8003d3c:	f003 030c 	and.w	r3, r3, #12
 8003d40:	2b04      	cmp	r3, #4
 8003d42:	d00c      	beq.n	8003d5e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003d44:	4b93      	ldr	r3, [pc, #588]	; (8003f94 <HAL_RCC_OscConfig+0x280>)
 8003d46:	689b      	ldr	r3, [r3, #8]
 8003d48:	f003 030c 	and.w	r3, r3, #12
 8003d4c:	2b08      	cmp	r3, #8
 8003d4e:	d112      	bne.n	8003d76 <HAL_RCC_OscConfig+0x62>
 8003d50:	4b90      	ldr	r3, [pc, #576]	; (8003f94 <HAL_RCC_OscConfig+0x280>)
 8003d52:	685b      	ldr	r3, [r3, #4]
 8003d54:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d58:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003d5c:	d10b      	bne.n	8003d76 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d5e:	4b8d      	ldr	r3, [pc, #564]	; (8003f94 <HAL_RCC_OscConfig+0x280>)
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d06c      	beq.n	8003e44 <HAL_RCC_OscConfig+0x130>
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	685b      	ldr	r3, [r3, #4]
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d168      	bne.n	8003e44 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003d72:	2301      	movs	r3, #1
 8003d74:	e26b      	b.n	800424e <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	685b      	ldr	r3, [r3, #4]
 8003d7a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d7e:	d106      	bne.n	8003d8e <HAL_RCC_OscConfig+0x7a>
 8003d80:	4b84      	ldr	r3, [pc, #528]	; (8003f94 <HAL_RCC_OscConfig+0x280>)
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	4a83      	ldr	r2, [pc, #524]	; (8003f94 <HAL_RCC_OscConfig+0x280>)
 8003d86:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d8a:	6013      	str	r3, [r2, #0]
 8003d8c:	e02e      	b.n	8003dec <HAL_RCC_OscConfig+0xd8>
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	685b      	ldr	r3, [r3, #4]
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d10c      	bne.n	8003db0 <HAL_RCC_OscConfig+0x9c>
 8003d96:	4b7f      	ldr	r3, [pc, #508]	; (8003f94 <HAL_RCC_OscConfig+0x280>)
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	4a7e      	ldr	r2, [pc, #504]	; (8003f94 <HAL_RCC_OscConfig+0x280>)
 8003d9c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003da0:	6013      	str	r3, [r2, #0]
 8003da2:	4b7c      	ldr	r3, [pc, #496]	; (8003f94 <HAL_RCC_OscConfig+0x280>)
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	4a7b      	ldr	r2, [pc, #492]	; (8003f94 <HAL_RCC_OscConfig+0x280>)
 8003da8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003dac:	6013      	str	r3, [r2, #0]
 8003dae:	e01d      	b.n	8003dec <HAL_RCC_OscConfig+0xd8>
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	685b      	ldr	r3, [r3, #4]
 8003db4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003db8:	d10c      	bne.n	8003dd4 <HAL_RCC_OscConfig+0xc0>
 8003dba:	4b76      	ldr	r3, [pc, #472]	; (8003f94 <HAL_RCC_OscConfig+0x280>)
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	4a75      	ldr	r2, [pc, #468]	; (8003f94 <HAL_RCC_OscConfig+0x280>)
 8003dc0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003dc4:	6013      	str	r3, [r2, #0]
 8003dc6:	4b73      	ldr	r3, [pc, #460]	; (8003f94 <HAL_RCC_OscConfig+0x280>)
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	4a72      	ldr	r2, [pc, #456]	; (8003f94 <HAL_RCC_OscConfig+0x280>)
 8003dcc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003dd0:	6013      	str	r3, [r2, #0]
 8003dd2:	e00b      	b.n	8003dec <HAL_RCC_OscConfig+0xd8>
 8003dd4:	4b6f      	ldr	r3, [pc, #444]	; (8003f94 <HAL_RCC_OscConfig+0x280>)
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	4a6e      	ldr	r2, [pc, #440]	; (8003f94 <HAL_RCC_OscConfig+0x280>)
 8003dda:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003dde:	6013      	str	r3, [r2, #0]
 8003de0:	4b6c      	ldr	r3, [pc, #432]	; (8003f94 <HAL_RCC_OscConfig+0x280>)
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	4a6b      	ldr	r2, [pc, #428]	; (8003f94 <HAL_RCC_OscConfig+0x280>)
 8003de6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003dea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	685b      	ldr	r3, [r3, #4]
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d013      	beq.n	8003e1c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003df4:	f7fe fc0e 	bl	8002614 <HAL_GetTick>
 8003df8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003dfa:	e008      	b.n	8003e0e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003dfc:	f7fe fc0a 	bl	8002614 <HAL_GetTick>
 8003e00:	4602      	mov	r2, r0
 8003e02:	693b      	ldr	r3, [r7, #16]
 8003e04:	1ad3      	subs	r3, r2, r3
 8003e06:	2b64      	cmp	r3, #100	; 0x64
 8003e08:	d901      	bls.n	8003e0e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003e0a:	2303      	movs	r3, #3
 8003e0c:	e21f      	b.n	800424e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e0e:	4b61      	ldr	r3, [pc, #388]	; (8003f94 <HAL_RCC_OscConfig+0x280>)
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d0f0      	beq.n	8003dfc <HAL_RCC_OscConfig+0xe8>
 8003e1a:	e014      	b.n	8003e46 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e1c:	f7fe fbfa 	bl	8002614 <HAL_GetTick>
 8003e20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e22:	e008      	b.n	8003e36 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003e24:	f7fe fbf6 	bl	8002614 <HAL_GetTick>
 8003e28:	4602      	mov	r2, r0
 8003e2a:	693b      	ldr	r3, [r7, #16]
 8003e2c:	1ad3      	subs	r3, r2, r3
 8003e2e:	2b64      	cmp	r3, #100	; 0x64
 8003e30:	d901      	bls.n	8003e36 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003e32:	2303      	movs	r3, #3
 8003e34:	e20b      	b.n	800424e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e36:	4b57      	ldr	r3, [pc, #348]	; (8003f94 <HAL_RCC_OscConfig+0x280>)
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d1f0      	bne.n	8003e24 <HAL_RCC_OscConfig+0x110>
 8003e42:	e000      	b.n	8003e46 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e44:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f003 0302 	and.w	r3, r3, #2
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d069      	beq.n	8003f26 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003e52:	4b50      	ldr	r3, [pc, #320]	; (8003f94 <HAL_RCC_OscConfig+0x280>)
 8003e54:	689b      	ldr	r3, [r3, #8]
 8003e56:	f003 030c 	and.w	r3, r3, #12
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d00b      	beq.n	8003e76 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003e5e:	4b4d      	ldr	r3, [pc, #308]	; (8003f94 <HAL_RCC_OscConfig+0x280>)
 8003e60:	689b      	ldr	r3, [r3, #8]
 8003e62:	f003 030c 	and.w	r3, r3, #12
 8003e66:	2b08      	cmp	r3, #8
 8003e68:	d11c      	bne.n	8003ea4 <HAL_RCC_OscConfig+0x190>
 8003e6a:	4b4a      	ldr	r3, [pc, #296]	; (8003f94 <HAL_RCC_OscConfig+0x280>)
 8003e6c:	685b      	ldr	r3, [r3, #4]
 8003e6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d116      	bne.n	8003ea4 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e76:	4b47      	ldr	r3, [pc, #284]	; (8003f94 <HAL_RCC_OscConfig+0x280>)
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f003 0302 	and.w	r3, r3, #2
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d005      	beq.n	8003e8e <HAL_RCC_OscConfig+0x17a>
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	68db      	ldr	r3, [r3, #12]
 8003e86:	2b01      	cmp	r3, #1
 8003e88:	d001      	beq.n	8003e8e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003e8a:	2301      	movs	r3, #1
 8003e8c:	e1df      	b.n	800424e <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e8e:	4b41      	ldr	r3, [pc, #260]	; (8003f94 <HAL_RCC_OscConfig+0x280>)
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	691b      	ldr	r3, [r3, #16]
 8003e9a:	00db      	lsls	r3, r3, #3
 8003e9c:	493d      	ldr	r1, [pc, #244]	; (8003f94 <HAL_RCC_OscConfig+0x280>)
 8003e9e:	4313      	orrs	r3, r2
 8003ea0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ea2:	e040      	b.n	8003f26 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	68db      	ldr	r3, [r3, #12]
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d023      	beq.n	8003ef4 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003eac:	4b39      	ldr	r3, [pc, #228]	; (8003f94 <HAL_RCC_OscConfig+0x280>)
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	4a38      	ldr	r2, [pc, #224]	; (8003f94 <HAL_RCC_OscConfig+0x280>)
 8003eb2:	f043 0301 	orr.w	r3, r3, #1
 8003eb6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003eb8:	f7fe fbac 	bl	8002614 <HAL_GetTick>
 8003ebc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ebe:	e008      	b.n	8003ed2 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ec0:	f7fe fba8 	bl	8002614 <HAL_GetTick>
 8003ec4:	4602      	mov	r2, r0
 8003ec6:	693b      	ldr	r3, [r7, #16]
 8003ec8:	1ad3      	subs	r3, r2, r3
 8003eca:	2b02      	cmp	r3, #2
 8003ecc:	d901      	bls.n	8003ed2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003ece:	2303      	movs	r3, #3
 8003ed0:	e1bd      	b.n	800424e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ed2:	4b30      	ldr	r3, [pc, #192]	; (8003f94 <HAL_RCC_OscConfig+0x280>)
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f003 0302 	and.w	r3, r3, #2
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d0f0      	beq.n	8003ec0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ede:	4b2d      	ldr	r3, [pc, #180]	; (8003f94 <HAL_RCC_OscConfig+0x280>)
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	691b      	ldr	r3, [r3, #16]
 8003eea:	00db      	lsls	r3, r3, #3
 8003eec:	4929      	ldr	r1, [pc, #164]	; (8003f94 <HAL_RCC_OscConfig+0x280>)
 8003eee:	4313      	orrs	r3, r2
 8003ef0:	600b      	str	r3, [r1, #0]
 8003ef2:	e018      	b.n	8003f26 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003ef4:	4b27      	ldr	r3, [pc, #156]	; (8003f94 <HAL_RCC_OscConfig+0x280>)
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	4a26      	ldr	r2, [pc, #152]	; (8003f94 <HAL_RCC_OscConfig+0x280>)
 8003efa:	f023 0301 	bic.w	r3, r3, #1
 8003efe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f00:	f7fe fb88 	bl	8002614 <HAL_GetTick>
 8003f04:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f06:	e008      	b.n	8003f1a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f08:	f7fe fb84 	bl	8002614 <HAL_GetTick>
 8003f0c:	4602      	mov	r2, r0
 8003f0e:	693b      	ldr	r3, [r7, #16]
 8003f10:	1ad3      	subs	r3, r2, r3
 8003f12:	2b02      	cmp	r3, #2
 8003f14:	d901      	bls.n	8003f1a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003f16:	2303      	movs	r3, #3
 8003f18:	e199      	b.n	800424e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f1a:	4b1e      	ldr	r3, [pc, #120]	; (8003f94 <HAL_RCC_OscConfig+0x280>)
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f003 0302 	and.w	r3, r3, #2
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d1f0      	bne.n	8003f08 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f003 0308 	and.w	r3, r3, #8
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d038      	beq.n	8003fa4 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	695b      	ldr	r3, [r3, #20]
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d019      	beq.n	8003f6e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003f3a:	4b16      	ldr	r3, [pc, #88]	; (8003f94 <HAL_RCC_OscConfig+0x280>)
 8003f3c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f3e:	4a15      	ldr	r2, [pc, #84]	; (8003f94 <HAL_RCC_OscConfig+0x280>)
 8003f40:	f043 0301 	orr.w	r3, r3, #1
 8003f44:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f46:	f7fe fb65 	bl	8002614 <HAL_GetTick>
 8003f4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f4c:	e008      	b.n	8003f60 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f4e:	f7fe fb61 	bl	8002614 <HAL_GetTick>
 8003f52:	4602      	mov	r2, r0
 8003f54:	693b      	ldr	r3, [r7, #16]
 8003f56:	1ad3      	subs	r3, r2, r3
 8003f58:	2b02      	cmp	r3, #2
 8003f5a:	d901      	bls.n	8003f60 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003f5c:	2303      	movs	r3, #3
 8003f5e:	e176      	b.n	800424e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f60:	4b0c      	ldr	r3, [pc, #48]	; (8003f94 <HAL_RCC_OscConfig+0x280>)
 8003f62:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f64:	f003 0302 	and.w	r3, r3, #2
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d0f0      	beq.n	8003f4e <HAL_RCC_OscConfig+0x23a>
 8003f6c:	e01a      	b.n	8003fa4 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003f6e:	4b09      	ldr	r3, [pc, #36]	; (8003f94 <HAL_RCC_OscConfig+0x280>)
 8003f70:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f72:	4a08      	ldr	r2, [pc, #32]	; (8003f94 <HAL_RCC_OscConfig+0x280>)
 8003f74:	f023 0301 	bic.w	r3, r3, #1
 8003f78:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f7a:	f7fe fb4b 	bl	8002614 <HAL_GetTick>
 8003f7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f80:	e00a      	b.n	8003f98 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f82:	f7fe fb47 	bl	8002614 <HAL_GetTick>
 8003f86:	4602      	mov	r2, r0
 8003f88:	693b      	ldr	r3, [r7, #16]
 8003f8a:	1ad3      	subs	r3, r2, r3
 8003f8c:	2b02      	cmp	r3, #2
 8003f8e:	d903      	bls.n	8003f98 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003f90:	2303      	movs	r3, #3
 8003f92:	e15c      	b.n	800424e <HAL_RCC_OscConfig+0x53a>
 8003f94:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f98:	4b91      	ldr	r3, [pc, #580]	; (80041e0 <HAL_RCC_OscConfig+0x4cc>)
 8003f9a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f9c:	f003 0302 	and.w	r3, r3, #2
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d1ee      	bne.n	8003f82 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f003 0304 	and.w	r3, r3, #4
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	f000 80a4 	beq.w	80040fa <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003fb2:	4b8b      	ldr	r3, [pc, #556]	; (80041e0 <HAL_RCC_OscConfig+0x4cc>)
 8003fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d10d      	bne.n	8003fda <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003fbe:	4b88      	ldr	r3, [pc, #544]	; (80041e0 <HAL_RCC_OscConfig+0x4cc>)
 8003fc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fc2:	4a87      	ldr	r2, [pc, #540]	; (80041e0 <HAL_RCC_OscConfig+0x4cc>)
 8003fc4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003fc8:	6413      	str	r3, [r2, #64]	; 0x40
 8003fca:	4b85      	ldr	r3, [pc, #532]	; (80041e0 <HAL_RCC_OscConfig+0x4cc>)
 8003fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fd2:	60bb      	str	r3, [r7, #8]
 8003fd4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003fd6:	2301      	movs	r3, #1
 8003fd8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003fda:	4b82      	ldr	r3, [pc, #520]	; (80041e4 <HAL_RCC_OscConfig+0x4d0>)
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d118      	bne.n	8004018 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003fe6:	4b7f      	ldr	r3, [pc, #508]	; (80041e4 <HAL_RCC_OscConfig+0x4d0>)
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	4a7e      	ldr	r2, [pc, #504]	; (80041e4 <HAL_RCC_OscConfig+0x4d0>)
 8003fec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ff0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003ff2:	f7fe fb0f 	bl	8002614 <HAL_GetTick>
 8003ff6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003ff8:	e008      	b.n	800400c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ffa:	f7fe fb0b 	bl	8002614 <HAL_GetTick>
 8003ffe:	4602      	mov	r2, r0
 8004000:	693b      	ldr	r3, [r7, #16]
 8004002:	1ad3      	subs	r3, r2, r3
 8004004:	2b64      	cmp	r3, #100	; 0x64
 8004006:	d901      	bls.n	800400c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8004008:	2303      	movs	r3, #3
 800400a:	e120      	b.n	800424e <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800400c:	4b75      	ldr	r3, [pc, #468]	; (80041e4 <HAL_RCC_OscConfig+0x4d0>)
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004014:	2b00      	cmp	r3, #0
 8004016:	d0f0      	beq.n	8003ffa <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	689b      	ldr	r3, [r3, #8]
 800401c:	2b01      	cmp	r3, #1
 800401e:	d106      	bne.n	800402e <HAL_RCC_OscConfig+0x31a>
 8004020:	4b6f      	ldr	r3, [pc, #444]	; (80041e0 <HAL_RCC_OscConfig+0x4cc>)
 8004022:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004024:	4a6e      	ldr	r2, [pc, #440]	; (80041e0 <HAL_RCC_OscConfig+0x4cc>)
 8004026:	f043 0301 	orr.w	r3, r3, #1
 800402a:	6713      	str	r3, [r2, #112]	; 0x70
 800402c:	e02d      	b.n	800408a <HAL_RCC_OscConfig+0x376>
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	689b      	ldr	r3, [r3, #8]
 8004032:	2b00      	cmp	r3, #0
 8004034:	d10c      	bne.n	8004050 <HAL_RCC_OscConfig+0x33c>
 8004036:	4b6a      	ldr	r3, [pc, #424]	; (80041e0 <HAL_RCC_OscConfig+0x4cc>)
 8004038:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800403a:	4a69      	ldr	r2, [pc, #420]	; (80041e0 <HAL_RCC_OscConfig+0x4cc>)
 800403c:	f023 0301 	bic.w	r3, r3, #1
 8004040:	6713      	str	r3, [r2, #112]	; 0x70
 8004042:	4b67      	ldr	r3, [pc, #412]	; (80041e0 <HAL_RCC_OscConfig+0x4cc>)
 8004044:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004046:	4a66      	ldr	r2, [pc, #408]	; (80041e0 <HAL_RCC_OscConfig+0x4cc>)
 8004048:	f023 0304 	bic.w	r3, r3, #4
 800404c:	6713      	str	r3, [r2, #112]	; 0x70
 800404e:	e01c      	b.n	800408a <HAL_RCC_OscConfig+0x376>
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	689b      	ldr	r3, [r3, #8]
 8004054:	2b05      	cmp	r3, #5
 8004056:	d10c      	bne.n	8004072 <HAL_RCC_OscConfig+0x35e>
 8004058:	4b61      	ldr	r3, [pc, #388]	; (80041e0 <HAL_RCC_OscConfig+0x4cc>)
 800405a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800405c:	4a60      	ldr	r2, [pc, #384]	; (80041e0 <HAL_RCC_OscConfig+0x4cc>)
 800405e:	f043 0304 	orr.w	r3, r3, #4
 8004062:	6713      	str	r3, [r2, #112]	; 0x70
 8004064:	4b5e      	ldr	r3, [pc, #376]	; (80041e0 <HAL_RCC_OscConfig+0x4cc>)
 8004066:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004068:	4a5d      	ldr	r2, [pc, #372]	; (80041e0 <HAL_RCC_OscConfig+0x4cc>)
 800406a:	f043 0301 	orr.w	r3, r3, #1
 800406e:	6713      	str	r3, [r2, #112]	; 0x70
 8004070:	e00b      	b.n	800408a <HAL_RCC_OscConfig+0x376>
 8004072:	4b5b      	ldr	r3, [pc, #364]	; (80041e0 <HAL_RCC_OscConfig+0x4cc>)
 8004074:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004076:	4a5a      	ldr	r2, [pc, #360]	; (80041e0 <HAL_RCC_OscConfig+0x4cc>)
 8004078:	f023 0301 	bic.w	r3, r3, #1
 800407c:	6713      	str	r3, [r2, #112]	; 0x70
 800407e:	4b58      	ldr	r3, [pc, #352]	; (80041e0 <HAL_RCC_OscConfig+0x4cc>)
 8004080:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004082:	4a57      	ldr	r2, [pc, #348]	; (80041e0 <HAL_RCC_OscConfig+0x4cc>)
 8004084:	f023 0304 	bic.w	r3, r3, #4
 8004088:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	689b      	ldr	r3, [r3, #8]
 800408e:	2b00      	cmp	r3, #0
 8004090:	d015      	beq.n	80040be <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004092:	f7fe fabf 	bl	8002614 <HAL_GetTick>
 8004096:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004098:	e00a      	b.n	80040b0 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800409a:	f7fe fabb 	bl	8002614 <HAL_GetTick>
 800409e:	4602      	mov	r2, r0
 80040a0:	693b      	ldr	r3, [r7, #16]
 80040a2:	1ad3      	subs	r3, r2, r3
 80040a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80040a8:	4293      	cmp	r3, r2
 80040aa:	d901      	bls.n	80040b0 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80040ac:	2303      	movs	r3, #3
 80040ae:	e0ce      	b.n	800424e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040b0:	4b4b      	ldr	r3, [pc, #300]	; (80041e0 <HAL_RCC_OscConfig+0x4cc>)
 80040b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040b4:	f003 0302 	and.w	r3, r3, #2
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d0ee      	beq.n	800409a <HAL_RCC_OscConfig+0x386>
 80040bc:	e014      	b.n	80040e8 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040be:	f7fe faa9 	bl	8002614 <HAL_GetTick>
 80040c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80040c4:	e00a      	b.n	80040dc <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040c6:	f7fe faa5 	bl	8002614 <HAL_GetTick>
 80040ca:	4602      	mov	r2, r0
 80040cc:	693b      	ldr	r3, [r7, #16]
 80040ce:	1ad3      	subs	r3, r2, r3
 80040d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80040d4:	4293      	cmp	r3, r2
 80040d6:	d901      	bls.n	80040dc <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80040d8:	2303      	movs	r3, #3
 80040da:	e0b8      	b.n	800424e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80040dc:	4b40      	ldr	r3, [pc, #256]	; (80041e0 <HAL_RCC_OscConfig+0x4cc>)
 80040de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040e0:	f003 0302 	and.w	r3, r3, #2
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d1ee      	bne.n	80040c6 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80040e8:	7dfb      	ldrb	r3, [r7, #23]
 80040ea:	2b01      	cmp	r3, #1
 80040ec:	d105      	bne.n	80040fa <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80040ee:	4b3c      	ldr	r3, [pc, #240]	; (80041e0 <HAL_RCC_OscConfig+0x4cc>)
 80040f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040f2:	4a3b      	ldr	r2, [pc, #236]	; (80041e0 <HAL_RCC_OscConfig+0x4cc>)
 80040f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80040f8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	699b      	ldr	r3, [r3, #24]
 80040fe:	2b00      	cmp	r3, #0
 8004100:	f000 80a4 	beq.w	800424c <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004104:	4b36      	ldr	r3, [pc, #216]	; (80041e0 <HAL_RCC_OscConfig+0x4cc>)
 8004106:	689b      	ldr	r3, [r3, #8]
 8004108:	f003 030c 	and.w	r3, r3, #12
 800410c:	2b08      	cmp	r3, #8
 800410e:	d06b      	beq.n	80041e8 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	699b      	ldr	r3, [r3, #24]
 8004114:	2b02      	cmp	r3, #2
 8004116:	d149      	bne.n	80041ac <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004118:	4b31      	ldr	r3, [pc, #196]	; (80041e0 <HAL_RCC_OscConfig+0x4cc>)
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	4a30      	ldr	r2, [pc, #192]	; (80041e0 <HAL_RCC_OscConfig+0x4cc>)
 800411e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004122:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004124:	f7fe fa76 	bl	8002614 <HAL_GetTick>
 8004128:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800412a:	e008      	b.n	800413e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800412c:	f7fe fa72 	bl	8002614 <HAL_GetTick>
 8004130:	4602      	mov	r2, r0
 8004132:	693b      	ldr	r3, [r7, #16]
 8004134:	1ad3      	subs	r3, r2, r3
 8004136:	2b02      	cmp	r3, #2
 8004138:	d901      	bls.n	800413e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800413a:	2303      	movs	r3, #3
 800413c:	e087      	b.n	800424e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800413e:	4b28      	ldr	r3, [pc, #160]	; (80041e0 <HAL_RCC_OscConfig+0x4cc>)
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004146:	2b00      	cmp	r3, #0
 8004148:	d1f0      	bne.n	800412c <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	69da      	ldr	r2, [r3, #28]
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	6a1b      	ldr	r3, [r3, #32]
 8004152:	431a      	orrs	r2, r3
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004158:	019b      	lsls	r3, r3, #6
 800415a:	431a      	orrs	r2, r3
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004160:	085b      	lsrs	r3, r3, #1
 8004162:	3b01      	subs	r3, #1
 8004164:	041b      	lsls	r3, r3, #16
 8004166:	431a      	orrs	r2, r3
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800416c:	061b      	lsls	r3, r3, #24
 800416e:	4313      	orrs	r3, r2
 8004170:	4a1b      	ldr	r2, [pc, #108]	; (80041e0 <HAL_RCC_OscConfig+0x4cc>)
 8004172:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004176:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004178:	4b19      	ldr	r3, [pc, #100]	; (80041e0 <HAL_RCC_OscConfig+0x4cc>)
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	4a18      	ldr	r2, [pc, #96]	; (80041e0 <HAL_RCC_OscConfig+0x4cc>)
 800417e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004182:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004184:	f7fe fa46 	bl	8002614 <HAL_GetTick>
 8004188:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800418a:	e008      	b.n	800419e <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800418c:	f7fe fa42 	bl	8002614 <HAL_GetTick>
 8004190:	4602      	mov	r2, r0
 8004192:	693b      	ldr	r3, [r7, #16]
 8004194:	1ad3      	subs	r3, r2, r3
 8004196:	2b02      	cmp	r3, #2
 8004198:	d901      	bls.n	800419e <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 800419a:	2303      	movs	r3, #3
 800419c:	e057      	b.n	800424e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800419e:	4b10      	ldr	r3, [pc, #64]	; (80041e0 <HAL_RCC_OscConfig+0x4cc>)
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d0f0      	beq.n	800418c <HAL_RCC_OscConfig+0x478>
 80041aa:	e04f      	b.n	800424c <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80041ac:	4b0c      	ldr	r3, [pc, #48]	; (80041e0 <HAL_RCC_OscConfig+0x4cc>)
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	4a0b      	ldr	r2, [pc, #44]	; (80041e0 <HAL_RCC_OscConfig+0x4cc>)
 80041b2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80041b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041b8:	f7fe fa2c 	bl	8002614 <HAL_GetTick>
 80041bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80041be:	e008      	b.n	80041d2 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80041c0:	f7fe fa28 	bl	8002614 <HAL_GetTick>
 80041c4:	4602      	mov	r2, r0
 80041c6:	693b      	ldr	r3, [r7, #16]
 80041c8:	1ad3      	subs	r3, r2, r3
 80041ca:	2b02      	cmp	r3, #2
 80041cc:	d901      	bls.n	80041d2 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 80041ce:	2303      	movs	r3, #3
 80041d0:	e03d      	b.n	800424e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80041d2:	4b03      	ldr	r3, [pc, #12]	; (80041e0 <HAL_RCC_OscConfig+0x4cc>)
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d1f0      	bne.n	80041c0 <HAL_RCC_OscConfig+0x4ac>
 80041de:	e035      	b.n	800424c <HAL_RCC_OscConfig+0x538>
 80041e0:	40023800 	.word	0x40023800
 80041e4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80041e8:	4b1b      	ldr	r3, [pc, #108]	; (8004258 <HAL_RCC_OscConfig+0x544>)
 80041ea:	685b      	ldr	r3, [r3, #4]
 80041ec:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	699b      	ldr	r3, [r3, #24]
 80041f2:	2b01      	cmp	r3, #1
 80041f4:	d028      	beq.n	8004248 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004200:	429a      	cmp	r2, r3
 8004202:	d121      	bne.n	8004248 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800420e:	429a      	cmp	r2, r3
 8004210:	d11a      	bne.n	8004248 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004212:	68fa      	ldr	r2, [r7, #12]
 8004214:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004218:	4013      	ands	r3, r2
 800421a:	687a      	ldr	r2, [r7, #4]
 800421c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800421e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004220:	4293      	cmp	r3, r2
 8004222:	d111      	bne.n	8004248 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800422e:	085b      	lsrs	r3, r3, #1
 8004230:	3b01      	subs	r3, #1
 8004232:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004234:	429a      	cmp	r2, r3
 8004236:	d107      	bne.n	8004248 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004242:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004244:	429a      	cmp	r2, r3
 8004246:	d001      	beq.n	800424c <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8004248:	2301      	movs	r3, #1
 800424a:	e000      	b.n	800424e <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 800424c:	2300      	movs	r3, #0
}
 800424e:	4618      	mov	r0, r3
 8004250:	3718      	adds	r7, #24
 8004252:	46bd      	mov	sp, r7
 8004254:	bd80      	pop	{r7, pc}
 8004256:	bf00      	nop
 8004258:	40023800 	.word	0x40023800

0800425c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800425c:	b580      	push	{r7, lr}
 800425e:	b084      	sub	sp, #16
 8004260:	af00      	add	r7, sp, #0
 8004262:	6078      	str	r0, [r7, #4]
 8004264:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8004266:	2300      	movs	r3, #0
 8004268:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	2b00      	cmp	r3, #0
 800426e:	d101      	bne.n	8004274 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004270:	2301      	movs	r3, #1
 8004272:	e0d0      	b.n	8004416 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004274:	4b6a      	ldr	r3, [pc, #424]	; (8004420 <HAL_RCC_ClockConfig+0x1c4>)
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f003 030f 	and.w	r3, r3, #15
 800427c:	683a      	ldr	r2, [r7, #0]
 800427e:	429a      	cmp	r2, r3
 8004280:	d910      	bls.n	80042a4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004282:	4b67      	ldr	r3, [pc, #412]	; (8004420 <HAL_RCC_ClockConfig+0x1c4>)
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f023 020f 	bic.w	r2, r3, #15
 800428a:	4965      	ldr	r1, [pc, #404]	; (8004420 <HAL_RCC_ClockConfig+0x1c4>)
 800428c:	683b      	ldr	r3, [r7, #0]
 800428e:	4313      	orrs	r3, r2
 8004290:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004292:	4b63      	ldr	r3, [pc, #396]	; (8004420 <HAL_RCC_ClockConfig+0x1c4>)
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f003 030f 	and.w	r3, r3, #15
 800429a:	683a      	ldr	r2, [r7, #0]
 800429c:	429a      	cmp	r2, r3
 800429e:	d001      	beq.n	80042a4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80042a0:	2301      	movs	r3, #1
 80042a2:	e0b8      	b.n	8004416 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f003 0302 	and.w	r3, r3, #2
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d020      	beq.n	80042f2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f003 0304 	and.w	r3, r3, #4
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d005      	beq.n	80042c8 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80042bc:	4b59      	ldr	r3, [pc, #356]	; (8004424 <HAL_RCC_ClockConfig+0x1c8>)
 80042be:	689b      	ldr	r3, [r3, #8]
 80042c0:	4a58      	ldr	r2, [pc, #352]	; (8004424 <HAL_RCC_ClockConfig+0x1c8>)
 80042c2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80042c6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f003 0308 	and.w	r3, r3, #8
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d005      	beq.n	80042e0 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80042d4:	4b53      	ldr	r3, [pc, #332]	; (8004424 <HAL_RCC_ClockConfig+0x1c8>)
 80042d6:	689b      	ldr	r3, [r3, #8]
 80042d8:	4a52      	ldr	r2, [pc, #328]	; (8004424 <HAL_RCC_ClockConfig+0x1c8>)
 80042da:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80042de:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80042e0:	4b50      	ldr	r3, [pc, #320]	; (8004424 <HAL_RCC_ClockConfig+0x1c8>)
 80042e2:	689b      	ldr	r3, [r3, #8]
 80042e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	689b      	ldr	r3, [r3, #8]
 80042ec:	494d      	ldr	r1, [pc, #308]	; (8004424 <HAL_RCC_ClockConfig+0x1c8>)
 80042ee:	4313      	orrs	r3, r2
 80042f0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f003 0301 	and.w	r3, r3, #1
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d040      	beq.n	8004380 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	685b      	ldr	r3, [r3, #4]
 8004302:	2b01      	cmp	r3, #1
 8004304:	d107      	bne.n	8004316 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004306:	4b47      	ldr	r3, [pc, #284]	; (8004424 <HAL_RCC_ClockConfig+0x1c8>)
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800430e:	2b00      	cmp	r3, #0
 8004310:	d115      	bne.n	800433e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004312:	2301      	movs	r3, #1
 8004314:	e07f      	b.n	8004416 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	685b      	ldr	r3, [r3, #4]
 800431a:	2b02      	cmp	r3, #2
 800431c:	d107      	bne.n	800432e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800431e:	4b41      	ldr	r3, [pc, #260]	; (8004424 <HAL_RCC_ClockConfig+0x1c8>)
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004326:	2b00      	cmp	r3, #0
 8004328:	d109      	bne.n	800433e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800432a:	2301      	movs	r3, #1
 800432c:	e073      	b.n	8004416 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800432e:	4b3d      	ldr	r3, [pc, #244]	; (8004424 <HAL_RCC_ClockConfig+0x1c8>)
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f003 0302 	and.w	r3, r3, #2
 8004336:	2b00      	cmp	r3, #0
 8004338:	d101      	bne.n	800433e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800433a:	2301      	movs	r3, #1
 800433c:	e06b      	b.n	8004416 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800433e:	4b39      	ldr	r3, [pc, #228]	; (8004424 <HAL_RCC_ClockConfig+0x1c8>)
 8004340:	689b      	ldr	r3, [r3, #8]
 8004342:	f023 0203 	bic.w	r2, r3, #3
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	685b      	ldr	r3, [r3, #4]
 800434a:	4936      	ldr	r1, [pc, #216]	; (8004424 <HAL_RCC_ClockConfig+0x1c8>)
 800434c:	4313      	orrs	r3, r2
 800434e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004350:	f7fe f960 	bl	8002614 <HAL_GetTick>
 8004354:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004356:	e00a      	b.n	800436e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004358:	f7fe f95c 	bl	8002614 <HAL_GetTick>
 800435c:	4602      	mov	r2, r0
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	1ad3      	subs	r3, r2, r3
 8004362:	f241 3288 	movw	r2, #5000	; 0x1388
 8004366:	4293      	cmp	r3, r2
 8004368:	d901      	bls.n	800436e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800436a:	2303      	movs	r3, #3
 800436c:	e053      	b.n	8004416 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800436e:	4b2d      	ldr	r3, [pc, #180]	; (8004424 <HAL_RCC_ClockConfig+0x1c8>)
 8004370:	689b      	ldr	r3, [r3, #8]
 8004372:	f003 020c 	and.w	r2, r3, #12
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	685b      	ldr	r3, [r3, #4]
 800437a:	009b      	lsls	r3, r3, #2
 800437c:	429a      	cmp	r2, r3
 800437e:	d1eb      	bne.n	8004358 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004380:	4b27      	ldr	r3, [pc, #156]	; (8004420 <HAL_RCC_ClockConfig+0x1c4>)
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f003 030f 	and.w	r3, r3, #15
 8004388:	683a      	ldr	r2, [r7, #0]
 800438a:	429a      	cmp	r2, r3
 800438c:	d210      	bcs.n	80043b0 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800438e:	4b24      	ldr	r3, [pc, #144]	; (8004420 <HAL_RCC_ClockConfig+0x1c4>)
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f023 020f 	bic.w	r2, r3, #15
 8004396:	4922      	ldr	r1, [pc, #136]	; (8004420 <HAL_RCC_ClockConfig+0x1c4>)
 8004398:	683b      	ldr	r3, [r7, #0]
 800439a:	4313      	orrs	r3, r2
 800439c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800439e:	4b20      	ldr	r3, [pc, #128]	; (8004420 <HAL_RCC_ClockConfig+0x1c4>)
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f003 030f 	and.w	r3, r3, #15
 80043a6:	683a      	ldr	r2, [r7, #0]
 80043a8:	429a      	cmp	r2, r3
 80043aa:	d001      	beq.n	80043b0 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80043ac:	2301      	movs	r3, #1
 80043ae:	e032      	b.n	8004416 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f003 0304 	and.w	r3, r3, #4
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d008      	beq.n	80043ce <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80043bc:	4b19      	ldr	r3, [pc, #100]	; (8004424 <HAL_RCC_ClockConfig+0x1c8>)
 80043be:	689b      	ldr	r3, [r3, #8]
 80043c0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	68db      	ldr	r3, [r3, #12]
 80043c8:	4916      	ldr	r1, [pc, #88]	; (8004424 <HAL_RCC_ClockConfig+0x1c8>)
 80043ca:	4313      	orrs	r3, r2
 80043cc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f003 0308 	and.w	r3, r3, #8
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d009      	beq.n	80043ee <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80043da:	4b12      	ldr	r3, [pc, #72]	; (8004424 <HAL_RCC_ClockConfig+0x1c8>)
 80043dc:	689b      	ldr	r3, [r3, #8]
 80043de:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	691b      	ldr	r3, [r3, #16]
 80043e6:	00db      	lsls	r3, r3, #3
 80043e8:	490e      	ldr	r1, [pc, #56]	; (8004424 <HAL_RCC_ClockConfig+0x1c8>)
 80043ea:	4313      	orrs	r3, r2
 80043ec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80043ee:	f000 f821 	bl	8004434 <HAL_RCC_GetSysClockFreq>
 80043f2:	4602      	mov	r2, r0
 80043f4:	4b0b      	ldr	r3, [pc, #44]	; (8004424 <HAL_RCC_ClockConfig+0x1c8>)
 80043f6:	689b      	ldr	r3, [r3, #8]
 80043f8:	091b      	lsrs	r3, r3, #4
 80043fa:	f003 030f 	and.w	r3, r3, #15
 80043fe:	490a      	ldr	r1, [pc, #40]	; (8004428 <HAL_RCC_ClockConfig+0x1cc>)
 8004400:	5ccb      	ldrb	r3, [r1, r3]
 8004402:	fa22 f303 	lsr.w	r3, r2, r3
 8004406:	4a09      	ldr	r2, [pc, #36]	; (800442c <HAL_RCC_ClockConfig+0x1d0>)
 8004408:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800440a:	4b09      	ldr	r3, [pc, #36]	; (8004430 <HAL_RCC_ClockConfig+0x1d4>)
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	4618      	mov	r0, r3
 8004410:	f7fe f8bc 	bl	800258c <HAL_InitTick>

  return HAL_OK;
 8004414:	2300      	movs	r3, #0
}
 8004416:	4618      	mov	r0, r3
 8004418:	3710      	adds	r7, #16
 800441a:	46bd      	mov	sp, r7
 800441c:	bd80      	pop	{r7, pc}
 800441e:	bf00      	nop
 8004420:	40023c00 	.word	0x40023c00
 8004424:	40023800 	.word	0x40023800
 8004428:	080085c4 	.word	0x080085c4
 800442c:	20004e90 	.word	0x20004e90
 8004430:	20004e94 	.word	0x20004e94

08004434 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004434:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004438:	b090      	sub	sp, #64	; 0x40
 800443a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800443c:	2300      	movs	r3, #0
 800443e:	637b      	str	r3, [r7, #52]	; 0x34
 8004440:	2300      	movs	r3, #0
 8004442:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004444:	2300      	movs	r3, #0
 8004446:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 8004448:	2300      	movs	r3, #0
 800444a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800444c:	4b59      	ldr	r3, [pc, #356]	; (80045b4 <HAL_RCC_GetSysClockFreq+0x180>)
 800444e:	689b      	ldr	r3, [r3, #8]
 8004450:	f003 030c 	and.w	r3, r3, #12
 8004454:	2b08      	cmp	r3, #8
 8004456:	d00d      	beq.n	8004474 <HAL_RCC_GetSysClockFreq+0x40>
 8004458:	2b08      	cmp	r3, #8
 800445a:	f200 80a1 	bhi.w	80045a0 <HAL_RCC_GetSysClockFreq+0x16c>
 800445e:	2b00      	cmp	r3, #0
 8004460:	d002      	beq.n	8004468 <HAL_RCC_GetSysClockFreq+0x34>
 8004462:	2b04      	cmp	r3, #4
 8004464:	d003      	beq.n	800446e <HAL_RCC_GetSysClockFreq+0x3a>
 8004466:	e09b      	b.n	80045a0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004468:	4b53      	ldr	r3, [pc, #332]	; (80045b8 <HAL_RCC_GetSysClockFreq+0x184>)
 800446a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800446c:	e09b      	b.n	80045a6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800446e:	4b53      	ldr	r3, [pc, #332]	; (80045bc <HAL_RCC_GetSysClockFreq+0x188>)
 8004470:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004472:	e098      	b.n	80045a6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004474:	4b4f      	ldr	r3, [pc, #316]	; (80045b4 <HAL_RCC_GetSysClockFreq+0x180>)
 8004476:	685b      	ldr	r3, [r3, #4]
 8004478:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800447c:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800447e:	4b4d      	ldr	r3, [pc, #308]	; (80045b4 <HAL_RCC_GetSysClockFreq+0x180>)
 8004480:	685b      	ldr	r3, [r3, #4]
 8004482:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004486:	2b00      	cmp	r3, #0
 8004488:	d028      	beq.n	80044dc <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800448a:	4b4a      	ldr	r3, [pc, #296]	; (80045b4 <HAL_RCC_GetSysClockFreq+0x180>)
 800448c:	685b      	ldr	r3, [r3, #4]
 800448e:	099b      	lsrs	r3, r3, #6
 8004490:	2200      	movs	r2, #0
 8004492:	623b      	str	r3, [r7, #32]
 8004494:	627a      	str	r2, [r7, #36]	; 0x24
 8004496:	6a3b      	ldr	r3, [r7, #32]
 8004498:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800449c:	2100      	movs	r1, #0
 800449e:	4b47      	ldr	r3, [pc, #284]	; (80045bc <HAL_RCC_GetSysClockFreq+0x188>)
 80044a0:	fb03 f201 	mul.w	r2, r3, r1
 80044a4:	2300      	movs	r3, #0
 80044a6:	fb00 f303 	mul.w	r3, r0, r3
 80044aa:	4413      	add	r3, r2
 80044ac:	4a43      	ldr	r2, [pc, #268]	; (80045bc <HAL_RCC_GetSysClockFreq+0x188>)
 80044ae:	fba0 1202 	umull	r1, r2, r0, r2
 80044b2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80044b4:	460a      	mov	r2, r1
 80044b6:	62ba      	str	r2, [r7, #40]	; 0x28
 80044b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80044ba:	4413      	add	r3, r2
 80044bc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80044be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044c0:	2200      	movs	r2, #0
 80044c2:	61bb      	str	r3, [r7, #24]
 80044c4:	61fa      	str	r2, [r7, #28]
 80044c6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80044ca:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80044ce:	f7fb feef 	bl	80002b0 <__aeabi_uldivmod>
 80044d2:	4602      	mov	r2, r0
 80044d4:	460b      	mov	r3, r1
 80044d6:	4613      	mov	r3, r2
 80044d8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80044da:	e053      	b.n	8004584 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80044dc:	4b35      	ldr	r3, [pc, #212]	; (80045b4 <HAL_RCC_GetSysClockFreq+0x180>)
 80044de:	685b      	ldr	r3, [r3, #4]
 80044e0:	099b      	lsrs	r3, r3, #6
 80044e2:	2200      	movs	r2, #0
 80044e4:	613b      	str	r3, [r7, #16]
 80044e6:	617a      	str	r2, [r7, #20]
 80044e8:	693b      	ldr	r3, [r7, #16]
 80044ea:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80044ee:	f04f 0b00 	mov.w	fp, #0
 80044f2:	4652      	mov	r2, sl
 80044f4:	465b      	mov	r3, fp
 80044f6:	f04f 0000 	mov.w	r0, #0
 80044fa:	f04f 0100 	mov.w	r1, #0
 80044fe:	0159      	lsls	r1, r3, #5
 8004500:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004504:	0150      	lsls	r0, r2, #5
 8004506:	4602      	mov	r2, r0
 8004508:	460b      	mov	r3, r1
 800450a:	ebb2 080a 	subs.w	r8, r2, sl
 800450e:	eb63 090b 	sbc.w	r9, r3, fp
 8004512:	f04f 0200 	mov.w	r2, #0
 8004516:	f04f 0300 	mov.w	r3, #0
 800451a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800451e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004522:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004526:	ebb2 0408 	subs.w	r4, r2, r8
 800452a:	eb63 0509 	sbc.w	r5, r3, r9
 800452e:	f04f 0200 	mov.w	r2, #0
 8004532:	f04f 0300 	mov.w	r3, #0
 8004536:	00eb      	lsls	r3, r5, #3
 8004538:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800453c:	00e2      	lsls	r2, r4, #3
 800453e:	4614      	mov	r4, r2
 8004540:	461d      	mov	r5, r3
 8004542:	eb14 030a 	adds.w	r3, r4, sl
 8004546:	603b      	str	r3, [r7, #0]
 8004548:	eb45 030b 	adc.w	r3, r5, fp
 800454c:	607b      	str	r3, [r7, #4]
 800454e:	f04f 0200 	mov.w	r2, #0
 8004552:	f04f 0300 	mov.w	r3, #0
 8004556:	e9d7 4500 	ldrd	r4, r5, [r7]
 800455a:	4629      	mov	r1, r5
 800455c:	028b      	lsls	r3, r1, #10
 800455e:	4621      	mov	r1, r4
 8004560:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004564:	4621      	mov	r1, r4
 8004566:	028a      	lsls	r2, r1, #10
 8004568:	4610      	mov	r0, r2
 800456a:	4619      	mov	r1, r3
 800456c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800456e:	2200      	movs	r2, #0
 8004570:	60bb      	str	r3, [r7, #8]
 8004572:	60fa      	str	r2, [r7, #12]
 8004574:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004578:	f7fb fe9a 	bl	80002b0 <__aeabi_uldivmod>
 800457c:	4602      	mov	r2, r0
 800457e:	460b      	mov	r3, r1
 8004580:	4613      	mov	r3, r2
 8004582:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8004584:	4b0b      	ldr	r3, [pc, #44]	; (80045b4 <HAL_RCC_GetSysClockFreq+0x180>)
 8004586:	685b      	ldr	r3, [r3, #4]
 8004588:	0c1b      	lsrs	r3, r3, #16
 800458a:	f003 0303 	and.w	r3, r3, #3
 800458e:	3301      	adds	r3, #1
 8004590:	005b      	lsls	r3, r3, #1
 8004592:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8004594:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004596:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004598:	fbb2 f3f3 	udiv	r3, r2, r3
 800459c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800459e:	e002      	b.n	80045a6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80045a0:	4b05      	ldr	r3, [pc, #20]	; (80045b8 <HAL_RCC_GetSysClockFreq+0x184>)
 80045a2:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80045a4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80045a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80045a8:	4618      	mov	r0, r3
 80045aa:	3740      	adds	r7, #64	; 0x40
 80045ac:	46bd      	mov	sp, r7
 80045ae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80045b2:	bf00      	nop
 80045b4:	40023800 	.word	0x40023800
 80045b8:	00f42400 	.word	0x00f42400
 80045bc:	017d7840 	.word	0x017d7840

080045c0 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80045c0:	b480      	push	{r7}
 80045c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80045c4:	4b03      	ldr	r3, [pc, #12]	; (80045d4 <HAL_RCC_GetHCLKFreq+0x14>)
 80045c6:	681b      	ldr	r3, [r3, #0]
}
 80045c8:	4618      	mov	r0, r3
 80045ca:	46bd      	mov	sp, r7
 80045cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d0:	4770      	bx	lr
 80045d2:	bf00      	nop
 80045d4:	20004e90 	.word	0x20004e90

080045d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80045d8:	b580      	push	{r7, lr}
 80045da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80045dc:	f7ff fff0 	bl	80045c0 <HAL_RCC_GetHCLKFreq>
 80045e0:	4602      	mov	r2, r0
 80045e2:	4b05      	ldr	r3, [pc, #20]	; (80045f8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80045e4:	689b      	ldr	r3, [r3, #8]
 80045e6:	0a9b      	lsrs	r3, r3, #10
 80045e8:	f003 0307 	and.w	r3, r3, #7
 80045ec:	4903      	ldr	r1, [pc, #12]	; (80045fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80045ee:	5ccb      	ldrb	r3, [r1, r3]
 80045f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80045f4:	4618      	mov	r0, r3
 80045f6:	bd80      	pop	{r7, pc}
 80045f8:	40023800 	.word	0x40023800
 80045fc:	080085d4 	.word	0x080085d4

08004600 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004600:	b580      	push	{r7, lr}
 8004602:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004604:	f7ff ffdc 	bl	80045c0 <HAL_RCC_GetHCLKFreq>
 8004608:	4602      	mov	r2, r0
 800460a:	4b05      	ldr	r3, [pc, #20]	; (8004620 <HAL_RCC_GetPCLK2Freq+0x20>)
 800460c:	689b      	ldr	r3, [r3, #8]
 800460e:	0b5b      	lsrs	r3, r3, #13
 8004610:	f003 0307 	and.w	r3, r3, #7
 8004614:	4903      	ldr	r1, [pc, #12]	; (8004624 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004616:	5ccb      	ldrb	r3, [r1, r3]
 8004618:	fa22 f303 	lsr.w	r3, r2, r3
}
 800461c:	4618      	mov	r0, r3
 800461e:	bd80      	pop	{r7, pc}
 8004620:	40023800 	.word	0x40023800
 8004624:	080085d4 	.word	0x080085d4

08004628 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004628:	b580      	push	{r7, lr}
 800462a:	b088      	sub	sp, #32
 800462c:	af00      	add	r7, sp, #0
 800462e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004630:	2300      	movs	r3, #0
 8004632:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8004634:	2300      	movs	r3, #0
 8004636:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8004638:	2300      	movs	r3, #0
 800463a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800463c:	2300      	movs	r3, #0
 800463e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8004640:	2300      	movs	r3, #0
 8004642:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f003 0301 	and.w	r3, r3, #1
 800464c:	2b00      	cmp	r3, #0
 800464e:	d012      	beq.n	8004676 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004650:	4b69      	ldr	r3, [pc, #420]	; (80047f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004652:	689b      	ldr	r3, [r3, #8]
 8004654:	4a68      	ldr	r2, [pc, #416]	; (80047f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004656:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800465a:	6093      	str	r3, [r2, #8]
 800465c:	4b66      	ldr	r3, [pc, #408]	; (80047f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800465e:	689a      	ldr	r2, [r3, #8]
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004664:	4964      	ldr	r1, [pc, #400]	; (80047f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004666:	4313      	orrs	r3, r2
 8004668:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800466e:	2b00      	cmp	r3, #0
 8004670:	d101      	bne.n	8004676 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8004672:	2301      	movs	r3, #1
 8004674:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800467e:	2b00      	cmp	r3, #0
 8004680:	d017      	beq.n	80046b2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004682:	4b5d      	ldr	r3, [pc, #372]	; (80047f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004684:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004688:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004690:	4959      	ldr	r1, [pc, #356]	; (80047f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004692:	4313      	orrs	r3, r2
 8004694:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800469c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80046a0:	d101      	bne.n	80046a6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80046a2:	2301      	movs	r3, #1
 80046a4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d101      	bne.n	80046b2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80046ae:	2301      	movs	r3, #1
 80046b0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d017      	beq.n	80046ee <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80046be:	4b4e      	ldr	r3, [pc, #312]	; (80047f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80046c4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046cc:	494a      	ldr	r1, [pc, #296]	; (80047f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046ce:	4313      	orrs	r3, r2
 80046d0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046d8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80046dc:	d101      	bne.n	80046e2 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80046de:	2301      	movs	r3, #1
 80046e0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d101      	bne.n	80046ee <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80046ea:	2301      	movs	r3, #1
 80046ec:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d001      	beq.n	80046fe <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80046fa:	2301      	movs	r3, #1
 80046fc:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f003 0320 	and.w	r3, r3, #32
 8004706:	2b00      	cmp	r3, #0
 8004708:	f000 808b 	beq.w	8004822 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800470c:	4b3a      	ldr	r3, [pc, #232]	; (80047f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800470e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004710:	4a39      	ldr	r2, [pc, #228]	; (80047f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004712:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004716:	6413      	str	r3, [r2, #64]	; 0x40
 8004718:	4b37      	ldr	r3, [pc, #220]	; (80047f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800471a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800471c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004720:	60bb      	str	r3, [r7, #8]
 8004722:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004724:	4b35      	ldr	r3, [pc, #212]	; (80047fc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	4a34      	ldr	r2, [pc, #208]	; (80047fc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800472a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800472e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004730:	f7fd ff70 	bl	8002614 <HAL_GetTick>
 8004734:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004736:	e008      	b.n	800474a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004738:	f7fd ff6c 	bl	8002614 <HAL_GetTick>
 800473c:	4602      	mov	r2, r0
 800473e:	697b      	ldr	r3, [r7, #20]
 8004740:	1ad3      	subs	r3, r2, r3
 8004742:	2b64      	cmp	r3, #100	; 0x64
 8004744:	d901      	bls.n	800474a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8004746:	2303      	movs	r3, #3
 8004748:	e357      	b.n	8004dfa <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800474a:	4b2c      	ldr	r3, [pc, #176]	; (80047fc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004752:	2b00      	cmp	r3, #0
 8004754:	d0f0      	beq.n	8004738 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004756:	4b28      	ldr	r3, [pc, #160]	; (80047f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004758:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800475a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800475e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004760:	693b      	ldr	r3, [r7, #16]
 8004762:	2b00      	cmp	r3, #0
 8004764:	d035      	beq.n	80047d2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800476a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800476e:	693a      	ldr	r2, [r7, #16]
 8004770:	429a      	cmp	r2, r3
 8004772:	d02e      	beq.n	80047d2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004774:	4b20      	ldr	r3, [pc, #128]	; (80047f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004776:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004778:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800477c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800477e:	4b1e      	ldr	r3, [pc, #120]	; (80047f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004780:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004782:	4a1d      	ldr	r2, [pc, #116]	; (80047f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004784:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004788:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800478a:	4b1b      	ldr	r3, [pc, #108]	; (80047f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800478c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800478e:	4a1a      	ldr	r2, [pc, #104]	; (80047f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004790:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004794:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8004796:	4a18      	ldr	r2, [pc, #96]	; (80047f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004798:	693b      	ldr	r3, [r7, #16]
 800479a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800479c:	4b16      	ldr	r3, [pc, #88]	; (80047f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800479e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047a0:	f003 0301 	and.w	r3, r3, #1
 80047a4:	2b01      	cmp	r3, #1
 80047a6:	d114      	bne.n	80047d2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047a8:	f7fd ff34 	bl	8002614 <HAL_GetTick>
 80047ac:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047ae:	e00a      	b.n	80047c6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80047b0:	f7fd ff30 	bl	8002614 <HAL_GetTick>
 80047b4:	4602      	mov	r2, r0
 80047b6:	697b      	ldr	r3, [r7, #20]
 80047b8:	1ad3      	subs	r3, r2, r3
 80047ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80047be:	4293      	cmp	r3, r2
 80047c0:	d901      	bls.n	80047c6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80047c2:	2303      	movs	r3, #3
 80047c4:	e319      	b.n	8004dfa <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047c6:	4b0c      	ldr	r3, [pc, #48]	; (80047f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80047c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047ca:	f003 0302 	and.w	r3, r3, #2
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d0ee      	beq.n	80047b0 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80047da:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80047de:	d111      	bne.n	8004804 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80047e0:	4b05      	ldr	r3, [pc, #20]	; (80047f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80047e2:	689b      	ldr	r3, [r3, #8]
 80047e4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80047ec:	4b04      	ldr	r3, [pc, #16]	; (8004800 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80047ee:	400b      	ands	r3, r1
 80047f0:	4901      	ldr	r1, [pc, #4]	; (80047f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80047f2:	4313      	orrs	r3, r2
 80047f4:	608b      	str	r3, [r1, #8]
 80047f6:	e00b      	b.n	8004810 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80047f8:	40023800 	.word	0x40023800
 80047fc:	40007000 	.word	0x40007000
 8004800:	0ffffcff 	.word	0x0ffffcff
 8004804:	4baa      	ldr	r3, [pc, #680]	; (8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004806:	689b      	ldr	r3, [r3, #8]
 8004808:	4aa9      	ldr	r2, [pc, #676]	; (8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800480a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800480e:	6093      	str	r3, [r2, #8]
 8004810:	4ba7      	ldr	r3, [pc, #668]	; (8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004812:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004818:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800481c:	49a4      	ldr	r1, [pc, #656]	; (8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800481e:	4313      	orrs	r3, r2
 8004820:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f003 0310 	and.w	r3, r3, #16
 800482a:	2b00      	cmp	r3, #0
 800482c:	d010      	beq.n	8004850 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800482e:	4ba0      	ldr	r3, [pc, #640]	; (8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004830:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004834:	4a9e      	ldr	r2, [pc, #632]	; (8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004836:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800483a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800483e:	4b9c      	ldr	r3, [pc, #624]	; (8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004840:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004848:	4999      	ldr	r1, [pc, #612]	; (8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800484a:	4313      	orrs	r3, r2
 800484c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004858:	2b00      	cmp	r3, #0
 800485a:	d00a      	beq.n	8004872 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800485c:	4b94      	ldr	r3, [pc, #592]	; (8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800485e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004862:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800486a:	4991      	ldr	r1, [pc, #580]	; (8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800486c:	4313      	orrs	r3, r2
 800486e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800487a:	2b00      	cmp	r3, #0
 800487c:	d00a      	beq.n	8004894 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800487e:	4b8c      	ldr	r3, [pc, #560]	; (8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004880:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004884:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800488c:	4988      	ldr	r1, [pc, #544]	; (8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800488e:	4313      	orrs	r3, r2
 8004890:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800489c:	2b00      	cmp	r3, #0
 800489e:	d00a      	beq.n	80048b6 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80048a0:	4b83      	ldr	r3, [pc, #524]	; (8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80048a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048a6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80048ae:	4980      	ldr	r1, [pc, #512]	; (8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80048b0:	4313      	orrs	r3, r2
 80048b2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d00a      	beq.n	80048d8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80048c2:	4b7b      	ldr	r3, [pc, #492]	; (8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80048c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048c8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048d0:	4977      	ldr	r1, [pc, #476]	; (8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80048d2:	4313      	orrs	r3, r2
 80048d4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d00a      	beq.n	80048fa <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80048e4:	4b72      	ldr	r3, [pc, #456]	; (8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80048e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048ea:	f023 0203 	bic.w	r2, r3, #3
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048f2:	496f      	ldr	r1, [pc, #444]	; (8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80048f4:	4313      	orrs	r3, r2
 80048f6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004902:	2b00      	cmp	r3, #0
 8004904:	d00a      	beq.n	800491c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004906:	4b6a      	ldr	r3, [pc, #424]	; (8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004908:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800490c:	f023 020c 	bic.w	r2, r3, #12
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004914:	4966      	ldr	r1, [pc, #408]	; (8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004916:	4313      	orrs	r3, r2
 8004918:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004924:	2b00      	cmp	r3, #0
 8004926:	d00a      	beq.n	800493e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004928:	4b61      	ldr	r3, [pc, #388]	; (8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800492a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800492e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004936:	495e      	ldr	r1, [pc, #376]	; (8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004938:	4313      	orrs	r3, r2
 800493a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004946:	2b00      	cmp	r3, #0
 8004948:	d00a      	beq.n	8004960 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800494a:	4b59      	ldr	r3, [pc, #356]	; (8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800494c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004950:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004958:	4955      	ldr	r1, [pc, #340]	; (8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800495a:	4313      	orrs	r3, r2
 800495c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004968:	2b00      	cmp	r3, #0
 800496a:	d00a      	beq.n	8004982 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800496c:	4b50      	ldr	r3, [pc, #320]	; (8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800496e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004972:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800497a:	494d      	ldr	r1, [pc, #308]	; (8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800497c:	4313      	orrs	r3, r2
 800497e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800498a:	2b00      	cmp	r3, #0
 800498c:	d00a      	beq.n	80049a4 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800498e:	4b48      	ldr	r3, [pc, #288]	; (8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004990:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004994:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800499c:	4944      	ldr	r1, [pc, #272]	; (8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800499e:	4313      	orrs	r3, r2
 80049a0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d00a      	beq.n	80049c6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80049b0:	4b3f      	ldr	r3, [pc, #252]	; (8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80049b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049b6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049be:	493c      	ldr	r1, [pc, #240]	; (8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80049c0:	4313      	orrs	r3, r2
 80049c2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d00a      	beq.n	80049e8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80049d2:	4b37      	ldr	r3, [pc, #220]	; (8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80049d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049d8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80049e0:	4933      	ldr	r1, [pc, #204]	; (8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80049e2:	4313      	orrs	r3, r2
 80049e4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d00a      	beq.n	8004a0a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80049f4:	4b2e      	ldr	r3, [pc, #184]	; (8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80049f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049fa:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004a02:	492b      	ldr	r1, [pc, #172]	; (8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004a04:	4313      	orrs	r3, r2
 8004a06:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d011      	beq.n	8004a3a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004a16:	4b26      	ldr	r3, [pc, #152]	; (8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004a18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a1c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004a24:	4922      	ldr	r1, [pc, #136]	; (8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004a26:	4313      	orrs	r3, r2
 8004a28:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004a30:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004a34:	d101      	bne.n	8004a3a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8004a36:	2301      	movs	r3, #1
 8004a38:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f003 0308 	and.w	r3, r3, #8
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d001      	beq.n	8004a4a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8004a46:	2301      	movs	r3, #1
 8004a48:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d00a      	beq.n	8004a6c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004a56:	4b16      	ldr	r3, [pc, #88]	; (8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004a58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a5c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a64:	4912      	ldr	r1, [pc, #72]	; (8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004a66:	4313      	orrs	r3, r2
 8004a68:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d00b      	beq.n	8004a90 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004a78:	4b0d      	ldr	r3, [pc, #52]	; (8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004a7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a7e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004a88:	4909      	ldr	r1, [pc, #36]	; (8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004a8a:	4313      	orrs	r3, r2
 8004a8c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004a90:	69fb      	ldr	r3, [r7, #28]
 8004a92:	2b01      	cmp	r3, #1
 8004a94:	d006      	beq.n	8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	f000 80d9 	beq.w	8004c56 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004aa4:	4b02      	ldr	r3, [pc, #8]	; (8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	4a01      	ldr	r2, [pc, #4]	; (8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004aaa:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004aae:	e001      	b.n	8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8004ab0:	40023800 	.word	0x40023800
 8004ab4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ab6:	f7fd fdad 	bl	8002614 <HAL_GetTick>
 8004aba:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004abc:	e008      	b.n	8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004abe:	f7fd fda9 	bl	8002614 <HAL_GetTick>
 8004ac2:	4602      	mov	r2, r0
 8004ac4:	697b      	ldr	r3, [r7, #20]
 8004ac6:	1ad3      	subs	r3, r2, r3
 8004ac8:	2b64      	cmp	r3, #100	; 0x64
 8004aca:	d901      	bls.n	8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004acc:	2303      	movs	r3, #3
 8004ace:	e194      	b.n	8004dfa <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004ad0:	4b6c      	ldr	r3, [pc, #432]	; (8004c84 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d1f0      	bne.n	8004abe <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f003 0301 	and.w	r3, r3, #1
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d021      	beq.n	8004b2c <HAL_RCCEx_PeriphCLKConfig+0x504>
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d11d      	bne.n	8004b2c <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004af0:	4b64      	ldr	r3, [pc, #400]	; (8004c84 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004af2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004af6:	0c1b      	lsrs	r3, r3, #16
 8004af8:	f003 0303 	and.w	r3, r3, #3
 8004afc:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004afe:	4b61      	ldr	r3, [pc, #388]	; (8004c84 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004b00:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004b04:	0e1b      	lsrs	r3, r3, #24
 8004b06:	f003 030f 	and.w	r3, r3, #15
 8004b0a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	685b      	ldr	r3, [r3, #4]
 8004b10:	019a      	lsls	r2, r3, #6
 8004b12:	693b      	ldr	r3, [r7, #16]
 8004b14:	041b      	lsls	r3, r3, #16
 8004b16:	431a      	orrs	r2, r3
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	061b      	lsls	r3, r3, #24
 8004b1c:	431a      	orrs	r2, r3
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	689b      	ldr	r3, [r3, #8]
 8004b22:	071b      	lsls	r3, r3, #28
 8004b24:	4957      	ldr	r1, [pc, #348]	; (8004c84 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004b26:	4313      	orrs	r3, r2
 8004b28:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d004      	beq.n	8004b42 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b3c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004b40:	d00a      	beq.n	8004b58 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d02e      	beq.n	8004bac <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b52:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004b56:	d129      	bne.n	8004bac <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004b58:	4b4a      	ldr	r3, [pc, #296]	; (8004c84 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004b5a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004b5e:	0c1b      	lsrs	r3, r3, #16
 8004b60:	f003 0303 	and.w	r3, r3, #3
 8004b64:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004b66:	4b47      	ldr	r3, [pc, #284]	; (8004c84 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004b68:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004b6c:	0f1b      	lsrs	r3, r3, #28
 8004b6e:	f003 0307 	and.w	r3, r3, #7
 8004b72:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	685b      	ldr	r3, [r3, #4]
 8004b78:	019a      	lsls	r2, r3, #6
 8004b7a:	693b      	ldr	r3, [r7, #16]
 8004b7c:	041b      	lsls	r3, r3, #16
 8004b7e:	431a      	orrs	r2, r3
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	68db      	ldr	r3, [r3, #12]
 8004b84:	061b      	lsls	r3, r3, #24
 8004b86:	431a      	orrs	r2, r3
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	071b      	lsls	r3, r3, #28
 8004b8c:	493d      	ldr	r1, [pc, #244]	; (8004c84 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004b8e:	4313      	orrs	r3, r2
 8004b90:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004b94:	4b3b      	ldr	r3, [pc, #236]	; (8004c84 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004b96:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004b9a:	f023 021f 	bic.w	r2, r3, #31
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ba2:	3b01      	subs	r3, #1
 8004ba4:	4937      	ldr	r1, [pc, #220]	; (8004c84 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004ba6:	4313      	orrs	r3, r2
 8004ba8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d01d      	beq.n	8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004bb8:	4b32      	ldr	r3, [pc, #200]	; (8004c84 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004bba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004bbe:	0e1b      	lsrs	r3, r3, #24
 8004bc0:	f003 030f 	and.w	r3, r3, #15
 8004bc4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004bc6:	4b2f      	ldr	r3, [pc, #188]	; (8004c84 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004bc8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004bcc:	0f1b      	lsrs	r3, r3, #28
 8004bce:	f003 0307 	and.w	r3, r3, #7
 8004bd2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	685b      	ldr	r3, [r3, #4]
 8004bd8:	019a      	lsls	r2, r3, #6
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	691b      	ldr	r3, [r3, #16]
 8004bde:	041b      	lsls	r3, r3, #16
 8004be0:	431a      	orrs	r2, r3
 8004be2:	693b      	ldr	r3, [r7, #16]
 8004be4:	061b      	lsls	r3, r3, #24
 8004be6:	431a      	orrs	r2, r3
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	071b      	lsls	r3, r3, #28
 8004bec:	4925      	ldr	r1, [pc, #148]	; (8004c84 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004bee:	4313      	orrs	r3, r2
 8004bf0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d011      	beq.n	8004c24 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	685b      	ldr	r3, [r3, #4]
 8004c04:	019a      	lsls	r2, r3, #6
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	691b      	ldr	r3, [r3, #16]
 8004c0a:	041b      	lsls	r3, r3, #16
 8004c0c:	431a      	orrs	r2, r3
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	68db      	ldr	r3, [r3, #12]
 8004c12:	061b      	lsls	r3, r3, #24
 8004c14:	431a      	orrs	r2, r3
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	689b      	ldr	r3, [r3, #8]
 8004c1a:	071b      	lsls	r3, r3, #28
 8004c1c:	4919      	ldr	r1, [pc, #100]	; (8004c84 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004c1e:	4313      	orrs	r3, r2
 8004c20:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004c24:	4b17      	ldr	r3, [pc, #92]	; (8004c84 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	4a16      	ldr	r2, [pc, #88]	; (8004c84 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004c2a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004c2e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c30:	f7fd fcf0 	bl	8002614 <HAL_GetTick>
 8004c34:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004c36:	e008      	b.n	8004c4a <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004c38:	f7fd fcec 	bl	8002614 <HAL_GetTick>
 8004c3c:	4602      	mov	r2, r0
 8004c3e:	697b      	ldr	r3, [r7, #20]
 8004c40:	1ad3      	subs	r3, r2, r3
 8004c42:	2b64      	cmp	r3, #100	; 0x64
 8004c44:	d901      	bls.n	8004c4a <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004c46:	2303      	movs	r3, #3
 8004c48:	e0d7      	b.n	8004dfa <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004c4a:	4b0e      	ldr	r3, [pc, #56]	; (8004c84 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d0f0      	beq.n	8004c38 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004c56:	69bb      	ldr	r3, [r7, #24]
 8004c58:	2b01      	cmp	r3, #1
 8004c5a:	f040 80cd 	bne.w	8004df8 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004c5e:	4b09      	ldr	r3, [pc, #36]	; (8004c84 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	4a08      	ldr	r2, [pc, #32]	; (8004c84 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004c64:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004c68:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c6a:	f7fd fcd3 	bl	8002614 <HAL_GetTick>
 8004c6e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004c70:	e00a      	b.n	8004c88 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004c72:	f7fd fccf 	bl	8002614 <HAL_GetTick>
 8004c76:	4602      	mov	r2, r0
 8004c78:	697b      	ldr	r3, [r7, #20]
 8004c7a:	1ad3      	subs	r3, r2, r3
 8004c7c:	2b64      	cmp	r3, #100	; 0x64
 8004c7e:	d903      	bls.n	8004c88 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004c80:	2303      	movs	r3, #3
 8004c82:	e0ba      	b.n	8004dfa <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8004c84:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004c88:	4b5e      	ldr	r3, [pc, #376]	; (8004e04 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004c90:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004c94:	d0ed      	beq.n	8004c72 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d003      	beq.n	8004caa <HAL_RCCEx_PeriphCLKConfig+0x682>
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d009      	beq.n	8004cbe <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d02e      	beq.n	8004d14 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d12a      	bne.n	8004d14 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004cbe:	4b51      	ldr	r3, [pc, #324]	; (8004e04 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004cc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cc4:	0c1b      	lsrs	r3, r3, #16
 8004cc6:	f003 0303 	and.w	r3, r3, #3
 8004cca:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004ccc:	4b4d      	ldr	r3, [pc, #308]	; (8004e04 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004cce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cd2:	0f1b      	lsrs	r3, r3, #28
 8004cd4:	f003 0307 	and.w	r3, r3, #7
 8004cd8:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	695b      	ldr	r3, [r3, #20]
 8004cde:	019a      	lsls	r2, r3, #6
 8004ce0:	693b      	ldr	r3, [r7, #16]
 8004ce2:	041b      	lsls	r3, r3, #16
 8004ce4:	431a      	orrs	r2, r3
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	699b      	ldr	r3, [r3, #24]
 8004cea:	061b      	lsls	r3, r3, #24
 8004cec:	431a      	orrs	r2, r3
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	071b      	lsls	r3, r3, #28
 8004cf2:	4944      	ldr	r1, [pc, #272]	; (8004e04 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004cf4:	4313      	orrs	r3, r2
 8004cf6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004cfa:	4b42      	ldr	r3, [pc, #264]	; (8004e04 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004cfc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004d00:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d08:	3b01      	subs	r3, #1
 8004d0a:	021b      	lsls	r3, r3, #8
 8004d0c:	493d      	ldr	r1, [pc, #244]	; (8004e04 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004d0e:	4313      	orrs	r3, r2
 8004d10:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d022      	beq.n	8004d66 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004d24:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004d28:	d11d      	bne.n	8004d66 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004d2a:	4b36      	ldr	r3, [pc, #216]	; (8004e04 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004d2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d30:	0e1b      	lsrs	r3, r3, #24
 8004d32:	f003 030f 	and.w	r3, r3, #15
 8004d36:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004d38:	4b32      	ldr	r3, [pc, #200]	; (8004e04 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004d3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d3e:	0f1b      	lsrs	r3, r3, #28
 8004d40:	f003 0307 	and.w	r3, r3, #7
 8004d44:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	695b      	ldr	r3, [r3, #20]
 8004d4a:	019a      	lsls	r2, r3, #6
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	6a1b      	ldr	r3, [r3, #32]
 8004d50:	041b      	lsls	r3, r3, #16
 8004d52:	431a      	orrs	r2, r3
 8004d54:	693b      	ldr	r3, [r7, #16]
 8004d56:	061b      	lsls	r3, r3, #24
 8004d58:	431a      	orrs	r2, r3
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	071b      	lsls	r3, r3, #28
 8004d5e:	4929      	ldr	r1, [pc, #164]	; (8004e04 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004d60:	4313      	orrs	r3, r2
 8004d62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f003 0308 	and.w	r3, r3, #8
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d028      	beq.n	8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004d72:	4b24      	ldr	r3, [pc, #144]	; (8004e04 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004d74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d78:	0e1b      	lsrs	r3, r3, #24
 8004d7a:	f003 030f 	and.w	r3, r3, #15
 8004d7e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004d80:	4b20      	ldr	r3, [pc, #128]	; (8004e04 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004d82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d86:	0c1b      	lsrs	r3, r3, #16
 8004d88:	f003 0303 	and.w	r3, r3, #3
 8004d8c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	695b      	ldr	r3, [r3, #20]
 8004d92:	019a      	lsls	r2, r3, #6
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	041b      	lsls	r3, r3, #16
 8004d98:	431a      	orrs	r2, r3
 8004d9a:	693b      	ldr	r3, [r7, #16]
 8004d9c:	061b      	lsls	r3, r3, #24
 8004d9e:	431a      	orrs	r2, r3
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	69db      	ldr	r3, [r3, #28]
 8004da4:	071b      	lsls	r3, r3, #28
 8004da6:	4917      	ldr	r1, [pc, #92]	; (8004e04 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004da8:	4313      	orrs	r3, r2
 8004daa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004dae:	4b15      	ldr	r3, [pc, #84]	; (8004e04 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004db0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004db4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dbc:	4911      	ldr	r1, [pc, #68]	; (8004e04 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004dbe:	4313      	orrs	r3, r2
 8004dc0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004dc4:	4b0f      	ldr	r3, [pc, #60]	; (8004e04 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	4a0e      	ldr	r2, [pc, #56]	; (8004e04 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004dca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004dce:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004dd0:	f7fd fc20 	bl	8002614 <HAL_GetTick>
 8004dd4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004dd6:	e008      	b.n	8004dea <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004dd8:	f7fd fc1c 	bl	8002614 <HAL_GetTick>
 8004ddc:	4602      	mov	r2, r0
 8004dde:	697b      	ldr	r3, [r7, #20]
 8004de0:	1ad3      	subs	r3, r2, r3
 8004de2:	2b64      	cmp	r3, #100	; 0x64
 8004de4:	d901      	bls.n	8004dea <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004de6:	2303      	movs	r3, #3
 8004de8:	e007      	b.n	8004dfa <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004dea:	4b06      	ldr	r3, [pc, #24]	; (8004e04 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004df2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004df6:	d1ef      	bne.n	8004dd8 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8004df8:	2300      	movs	r3, #0
}
 8004dfa:	4618      	mov	r0, r3
 8004dfc:	3720      	adds	r7, #32
 8004dfe:	46bd      	mov	sp, r7
 8004e00:	bd80      	pop	{r7, pc}
 8004e02:	bf00      	nop
 8004e04:	40023800 	.word	0x40023800

08004e08 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004e08:	b580      	push	{r7, lr}
 8004e0a:	b084      	sub	sp, #16
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d101      	bne.n	8004e1a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004e16:	2301      	movs	r3, #1
 8004e18:	e09d      	b.n	8004f56 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d108      	bne.n	8004e34 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	685b      	ldr	r3, [r3, #4]
 8004e26:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004e2a:	d009      	beq.n	8004e40 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	2200      	movs	r2, #0
 8004e30:	61da      	str	r2, [r3, #28]
 8004e32:	e005      	b.n	8004e40 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	2200      	movs	r2, #0
 8004e38:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	2200      	movs	r2, #0
 8004e3e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2200      	movs	r2, #0
 8004e44:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004e4c:	b2db      	uxtb	r3, r3
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d106      	bne.n	8004e60 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	2200      	movs	r2, #0
 8004e56:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004e5a:	6878      	ldr	r0, [r7, #4]
 8004e5c:	f7fd f93a 	bl	80020d4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	2202      	movs	r2, #2
 8004e64:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	681a      	ldr	r2, [r3, #0]
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004e76:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	68db      	ldr	r3, [r3, #12]
 8004e7c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004e80:	d902      	bls.n	8004e88 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004e82:	2300      	movs	r3, #0
 8004e84:	60fb      	str	r3, [r7, #12]
 8004e86:	e002      	b.n	8004e8e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004e88:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004e8c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	68db      	ldr	r3, [r3, #12]
 8004e92:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004e96:	d007      	beq.n	8004ea8 <HAL_SPI_Init+0xa0>
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	68db      	ldr	r3, [r3, #12]
 8004e9c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004ea0:	d002      	beq.n	8004ea8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	2200      	movs	r2, #0
 8004ea6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	685b      	ldr	r3, [r3, #4]
 8004eac:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	689b      	ldr	r3, [r3, #8]
 8004eb4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004eb8:	431a      	orrs	r2, r3
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	691b      	ldr	r3, [r3, #16]
 8004ebe:	f003 0302 	and.w	r3, r3, #2
 8004ec2:	431a      	orrs	r2, r3
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	695b      	ldr	r3, [r3, #20]
 8004ec8:	f003 0301 	and.w	r3, r3, #1
 8004ecc:	431a      	orrs	r2, r3
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	699b      	ldr	r3, [r3, #24]
 8004ed2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004ed6:	431a      	orrs	r2, r3
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	69db      	ldr	r3, [r3, #28]
 8004edc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004ee0:	431a      	orrs	r2, r3
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	6a1b      	ldr	r3, [r3, #32]
 8004ee6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004eea:	ea42 0103 	orr.w	r1, r2, r3
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ef2:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	430a      	orrs	r2, r1
 8004efc:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	699b      	ldr	r3, [r3, #24]
 8004f02:	0c1b      	lsrs	r3, r3, #16
 8004f04:	f003 0204 	and.w	r2, r3, #4
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f0c:	f003 0310 	and.w	r3, r3, #16
 8004f10:	431a      	orrs	r2, r3
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f16:	f003 0308 	and.w	r3, r3, #8
 8004f1a:	431a      	orrs	r2, r3
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	68db      	ldr	r3, [r3, #12]
 8004f20:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004f24:	ea42 0103 	orr.w	r1, r2, r3
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	430a      	orrs	r2, r1
 8004f34:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	69da      	ldr	r2, [r3, #28]
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004f44:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	2200      	movs	r2, #0
 8004f4a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	2201      	movs	r2, #1
 8004f50:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004f54:	2300      	movs	r3, #0
}
 8004f56:	4618      	mov	r0, r3
 8004f58:	3710      	adds	r7, #16
 8004f5a:	46bd      	mov	sp, r7
 8004f5c:	bd80      	pop	{r7, pc}

08004f5e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004f5e:	b580      	push	{r7, lr}
 8004f60:	b088      	sub	sp, #32
 8004f62:	af00      	add	r7, sp, #0
 8004f64:	60f8      	str	r0, [r7, #12]
 8004f66:	60b9      	str	r1, [r7, #8]
 8004f68:	603b      	str	r3, [r7, #0]
 8004f6a:	4613      	mov	r3, r2
 8004f6c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004f6e:	2300      	movs	r3, #0
 8004f70:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004f78:	2b01      	cmp	r3, #1
 8004f7a:	d101      	bne.n	8004f80 <HAL_SPI_Transmit+0x22>
 8004f7c:	2302      	movs	r3, #2
 8004f7e:	e158      	b.n	8005232 <HAL_SPI_Transmit+0x2d4>
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	2201      	movs	r2, #1
 8004f84:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004f88:	f7fd fb44 	bl	8002614 <HAL_GetTick>
 8004f8c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004f8e:	88fb      	ldrh	r3, [r7, #6]
 8004f90:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004f98:	b2db      	uxtb	r3, r3
 8004f9a:	2b01      	cmp	r3, #1
 8004f9c:	d002      	beq.n	8004fa4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004f9e:	2302      	movs	r3, #2
 8004fa0:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004fa2:	e13d      	b.n	8005220 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8004fa4:	68bb      	ldr	r3, [r7, #8]
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d002      	beq.n	8004fb0 <HAL_SPI_Transmit+0x52>
 8004faa:	88fb      	ldrh	r3, [r7, #6]
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d102      	bne.n	8004fb6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004fb0:	2301      	movs	r3, #1
 8004fb2:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004fb4:	e134      	b.n	8005220 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	2203      	movs	r2, #3
 8004fba:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	2200      	movs	r2, #0
 8004fc2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	68ba      	ldr	r2, [r7, #8]
 8004fc8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	88fa      	ldrh	r2, [r7, #6]
 8004fce:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	88fa      	ldrh	r2, [r7, #6]
 8004fd4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	2200      	movs	r2, #0
 8004fda:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	2200      	movs	r2, #0
 8004fe0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	2200      	movs	r2, #0
 8004fe8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	2200      	movs	r2, #0
 8004ff0:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	2200      	movs	r2, #0
 8004ff6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	689b      	ldr	r3, [r3, #8]
 8004ffc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005000:	d10f      	bne.n	8005022 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	681a      	ldr	r2, [r3, #0]
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005010:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	681a      	ldr	r2, [r3, #0]
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005020:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800502c:	2b40      	cmp	r3, #64	; 0x40
 800502e:	d007      	beq.n	8005040 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	681a      	ldr	r2, [r3, #0]
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800503e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	68db      	ldr	r3, [r3, #12]
 8005044:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005048:	d94b      	bls.n	80050e2 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	685b      	ldr	r3, [r3, #4]
 800504e:	2b00      	cmp	r3, #0
 8005050:	d002      	beq.n	8005058 <HAL_SPI_Transmit+0xfa>
 8005052:	8afb      	ldrh	r3, [r7, #22]
 8005054:	2b01      	cmp	r3, #1
 8005056:	d13e      	bne.n	80050d6 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800505c:	881a      	ldrh	r2, [r3, #0]
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005068:	1c9a      	adds	r2, r3, #2
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005072:	b29b      	uxth	r3, r3
 8005074:	3b01      	subs	r3, #1
 8005076:	b29a      	uxth	r2, r3
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800507c:	e02b      	b.n	80050d6 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	689b      	ldr	r3, [r3, #8]
 8005084:	f003 0302 	and.w	r3, r3, #2
 8005088:	2b02      	cmp	r3, #2
 800508a:	d112      	bne.n	80050b2 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005090:	881a      	ldrh	r2, [r3, #0]
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800509c:	1c9a      	adds	r2, r3, #2
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80050a6:	b29b      	uxth	r3, r3
 80050a8:	3b01      	subs	r3, #1
 80050aa:	b29a      	uxth	r2, r3
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	87da      	strh	r2, [r3, #62]	; 0x3e
 80050b0:	e011      	b.n	80050d6 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80050b2:	f7fd faaf 	bl	8002614 <HAL_GetTick>
 80050b6:	4602      	mov	r2, r0
 80050b8:	69bb      	ldr	r3, [r7, #24]
 80050ba:	1ad3      	subs	r3, r2, r3
 80050bc:	683a      	ldr	r2, [r7, #0]
 80050be:	429a      	cmp	r2, r3
 80050c0:	d803      	bhi.n	80050ca <HAL_SPI_Transmit+0x16c>
 80050c2:	683b      	ldr	r3, [r7, #0]
 80050c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050c8:	d102      	bne.n	80050d0 <HAL_SPI_Transmit+0x172>
 80050ca:	683b      	ldr	r3, [r7, #0]
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d102      	bne.n	80050d6 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 80050d0:	2303      	movs	r3, #3
 80050d2:	77fb      	strb	r3, [r7, #31]
          goto error;
 80050d4:	e0a4      	b.n	8005220 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80050da:	b29b      	uxth	r3, r3
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d1ce      	bne.n	800507e <HAL_SPI_Transmit+0x120>
 80050e0:	e07c      	b.n	80051dc <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	685b      	ldr	r3, [r3, #4]
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d002      	beq.n	80050f0 <HAL_SPI_Transmit+0x192>
 80050ea:	8afb      	ldrh	r3, [r7, #22]
 80050ec:	2b01      	cmp	r3, #1
 80050ee:	d170      	bne.n	80051d2 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80050f4:	b29b      	uxth	r3, r3
 80050f6:	2b01      	cmp	r3, #1
 80050f8:	d912      	bls.n	8005120 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050fe:	881a      	ldrh	r2, [r3, #0]
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800510a:	1c9a      	adds	r2, r3, #2
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005114:	b29b      	uxth	r3, r3
 8005116:	3b02      	subs	r3, #2
 8005118:	b29a      	uxth	r2, r3
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800511e:	e058      	b.n	80051d2 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	330c      	adds	r3, #12
 800512a:	7812      	ldrb	r2, [r2, #0]
 800512c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005132:	1c5a      	adds	r2, r3, #1
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800513c:	b29b      	uxth	r3, r3
 800513e:	3b01      	subs	r3, #1
 8005140:	b29a      	uxth	r2, r3
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8005146:	e044      	b.n	80051d2 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	689b      	ldr	r3, [r3, #8]
 800514e:	f003 0302 	and.w	r3, r3, #2
 8005152:	2b02      	cmp	r3, #2
 8005154:	d12b      	bne.n	80051ae <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800515a:	b29b      	uxth	r3, r3
 800515c:	2b01      	cmp	r3, #1
 800515e:	d912      	bls.n	8005186 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005164:	881a      	ldrh	r2, [r3, #0]
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005170:	1c9a      	adds	r2, r3, #2
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800517a:	b29b      	uxth	r3, r3
 800517c:	3b02      	subs	r3, #2
 800517e:	b29a      	uxth	r2, r3
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005184:	e025      	b.n	80051d2 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	330c      	adds	r3, #12
 8005190:	7812      	ldrb	r2, [r2, #0]
 8005192:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005198:	1c5a      	adds	r2, r3, #1
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80051a2:	b29b      	uxth	r3, r3
 80051a4:	3b01      	subs	r3, #1
 80051a6:	b29a      	uxth	r2, r3
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	87da      	strh	r2, [r3, #62]	; 0x3e
 80051ac:	e011      	b.n	80051d2 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80051ae:	f7fd fa31 	bl	8002614 <HAL_GetTick>
 80051b2:	4602      	mov	r2, r0
 80051b4:	69bb      	ldr	r3, [r7, #24]
 80051b6:	1ad3      	subs	r3, r2, r3
 80051b8:	683a      	ldr	r2, [r7, #0]
 80051ba:	429a      	cmp	r2, r3
 80051bc:	d803      	bhi.n	80051c6 <HAL_SPI_Transmit+0x268>
 80051be:	683b      	ldr	r3, [r7, #0]
 80051c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051c4:	d102      	bne.n	80051cc <HAL_SPI_Transmit+0x26e>
 80051c6:	683b      	ldr	r3, [r7, #0]
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d102      	bne.n	80051d2 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 80051cc:	2303      	movs	r3, #3
 80051ce:	77fb      	strb	r3, [r7, #31]
          goto error;
 80051d0:	e026      	b.n	8005220 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80051d6:	b29b      	uxth	r3, r3
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d1b5      	bne.n	8005148 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80051dc:	69ba      	ldr	r2, [r7, #24]
 80051de:	6839      	ldr	r1, [r7, #0]
 80051e0:	68f8      	ldr	r0, [r7, #12]
 80051e2:	f000 f949 	bl	8005478 <SPI_EndRxTxTransaction>
 80051e6:	4603      	mov	r3, r0
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d002      	beq.n	80051f2 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	2220      	movs	r2, #32
 80051f0:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	689b      	ldr	r3, [r3, #8]
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d10a      	bne.n	8005210 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80051fa:	2300      	movs	r3, #0
 80051fc:	613b      	str	r3, [r7, #16]
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	68db      	ldr	r3, [r3, #12]
 8005204:	613b      	str	r3, [r7, #16]
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	689b      	ldr	r3, [r3, #8]
 800520c:	613b      	str	r3, [r7, #16]
 800520e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005214:	2b00      	cmp	r3, #0
 8005216:	d002      	beq.n	800521e <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8005218:	2301      	movs	r3, #1
 800521a:	77fb      	strb	r3, [r7, #31]
 800521c:	e000      	b.n	8005220 <HAL_SPI_Transmit+0x2c2>
  }

error:
 800521e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	2201      	movs	r2, #1
 8005224:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	2200      	movs	r2, #0
 800522c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005230:	7ffb      	ldrb	r3, [r7, #31]
}
 8005232:	4618      	mov	r0, r3
 8005234:	3720      	adds	r7, #32
 8005236:	46bd      	mov	sp, r7
 8005238:	bd80      	pop	{r7, pc}
	...

0800523c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800523c:	b580      	push	{r7, lr}
 800523e:	b088      	sub	sp, #32
 8005240:	af00      	add	r7, sp, #0
 8005242:	60f8      	str	r0, [r7, #12]
 8005244:	60b9      	str	r1, [r7, #8]
 8005246:	603b      	str	r3, [r7, #0]
 8005248:	4613      	mov	r3, r2
 800524a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800524c:	f7fd f9e2 	bl	8002614 <HAL_GetTick>
 8005250:	4602      	mov	r2, r0
 8005252:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005254:	1a9b      	subs	r3, r3, r2
 8005256:	683a      	ldr	r2, [r7, #0]
 8005258:	4413      	add	r3, r2
 800525a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800525c:	f7fd f9da 	bl	8002614 <HAL_GetTick>
 8005260:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005262:	4b39      	ldr	r3, [pc, #228]	; (8005348 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	015b      	lsls	r3, r3, #5
 8005268:	0d1b      	lsrs	r3, r3, #20
 800526a:	69fa      	ldr	r2, [r7, #28]
 800526c:	fb02 f303 	mul.w	r3, r2, r3
 8005270:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005272:	e054      	b.n	800531e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005274:	683b      	ldr	r3, [r7, #0]
 8005276:	f1b3 3fff 	cmp.w	r3, #4294967295
 800527a:	d050      	beq.n	800531e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800527c:	f7fd f9ca 	bl	8002614 <HAL_GetTick>
 8005280:	4602      	mov	r2, r0
 8005282:	69bb      	ldr	r3, [r7, #24]
 8005284:	1ad3      	subs	r3, r2, r3
 8005286:	69fa      	ldr	r2, [r7, #28]
 8005288:	429a      	cmp	r2, r3
 800528a:	d902      	bls.n	8005292 <SPI_WaitFlagStateUntilTimeout+0x56>
 800528c:	69fb      	ldr	r3, [r7, #28]
 800528e:	2b00      	cmp	r3, #0
 8005290:	d13d      	bne.n	800530e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	685a      	ldr	r2, [r3, #4]
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80052a0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	685b      	ldr	r3, [r3, #4]
 80052a6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80052aa:	d111      	bne.n	80052d0 <SPI_WaitFlagStateUntilTimeout+0x94>
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	689b      	ldr	r3, [r3, #8]
 80052b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80052b4:	d004      	beq.n	80052c0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	689b      	ldr	r3, [r3, #8]
 80052ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80052be:	d107      	bne.n	80052d0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	681a      	ldr	r2, [r3, #0]
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80052ce:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052d4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80052d8:	d10f      	bne.n	80052fa <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	681a      	ldr	r2, [r3, #0]
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80052e8:	601a      	str	r2, [r3, #0]
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	681a      	ldr	r2, [r3, #0]
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80052f8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	2201      	movs	r2, #1
 80052fe:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	2200      	movs	r2, #0
 8005306:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800530a:	2303      	movs	r3, #3
 800530c:	e017      	b.n	800533e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800530e:	697b      	ldr	r3, [r7, #20]
 8005310:	2b00      	cmp	r3, #0
 8005312:	d101      	bne.n	8005318 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005314:	2300      	movs	r3, #0
 8005316:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005318:	697b      	ldr	r3, [r7, #20]
 800531a:	3b01      	subs	r3, #1
 800531c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	689a      	ldr	r2, [r3, #8]
 8005324:	68bb      	ldr	r3, [r7, #8]
 8005326:	4013      	ands	r3, r2
 8005328:	68ba      	ldr	r2, [r7, #8]
 800532a:	429a      	cmp	r2, r3
 800532c:	bf0c      	ite	eq
 800532e:	2301      	moveq	r3, #1
 8005330:	2300      	movne	r3, #0
 8005332:	b2db      	uxtb	r3, r3
 8005334:	461a      	mov	r2, r3
 8005336:	79fb      	ldrb	r3, [r7, #7]
 8005338:	429a      	cmp	r2, r3
 800533a:	d19b      	bne.n	8005274 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800533c:	2300      	movs	r3, #0
}
 800533e:	4618      	mov	r0, r3
 8005340:	3720      	adds	r7, #32
 8005342:	46bd      	mov	sp, r7
 8005344:	bd80      	pop	{r7, pc}
 8005346:	bf00      	nop
 8005348:	20004e90 	.word	0x20004e90

0800534c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800534c:	b580      	push	{r7, lr}
 800534e:	b08a      	sub	sp, #40	; 0x28
 8005350:	af00      	add	r7, sp, #0
 8005352:	60f8      	str	r0, [r7, #12]
 8005354:	60b9      	str	r1, [r7, #8]
 8005356:	607a      	str	r2, [r7, #4]
 8005358:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800535a:	2300      	movs	r3, #0
 800535c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800535e:	f7fd f959 	bl	8002614 <HAL_GetTick>
 8005362:	4602      	mov	r2, r0
 8005364:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005366:	1a9b      	subs	r3, r3, r2
 8005368:	683a      	ldr	r2, [r7, #0]
 800536a:	4413      	add	r3, r2
 800536c:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800536e:	f7fd f951 	bl	8002614 <HAL_GetTick>
 8005372:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	330c      	adds	r3, #12
 800537a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800537c:	4b3d      	ldr	r3, [pc, #244]	; (8005474 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800537e:	681a      	ldr	r2, [r3, #0]
 8005380:	4613      	mov	r3, r2
 8005382:	009b      	lsls	r3, r3, #2
 8005384:	4413      	add	r3, r2
 8005386:	00da      	lsls	r2, r3, #3
 8005388:	1ad3      	subs	r3, r2, r3
 800538a:	0d1b      	lsrs	r3, r3, #20
 800538c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800538e:	fb02 f303 	mul.w	r3, r2, r3
 8005392:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8005394:	e060      	b.n	8005458 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8005396:	68bb      	ldr	r3, [r7, #8]
 8005398:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800539c:	d107      	bne.n	80053ae <SPI_WaitFifoStateUntilTimeout+0x62>
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d104      	bne.n	80053ae <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80053a4:	69fb      	ldr	r3, [r7, #28]
 80053a6:	781b      	ldrb	r3, [r3, #0]
 80053a8:	b2db      	uxtb	r3, r3
 80053aa:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80053ac:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80053ae:	683b      	ldr	r3, [r7, #0]
 80053b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053b4:	d050      	beq.n	8005458 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80053b6:	f7fd f92d 	bl	8002614 <HAL_GetTick>
 80053ba:	4602      	mov	r2, r0
 80053bc:	6a3b      	ldr	r3, [r7, #32]
 80053be:	1ad3      	subs	r3, r2, r3
 80053c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053c2:	429a      	cmp	r2, r3
 80053c4:	d902      	bls.n	80053cc <SPI_WaitFifoStateUntilTimeout+0x80>
 80053c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d13d      	bne.n	8005448 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	685a      	ldr	r2, [r3, #4]
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80053da:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	685b      	ldr	r3, [r3, #4]
 80053e0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80053e4:	d111      	bne.n	800540a <SPI_WaitFifoStateUntilTimeout+0xbe>
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	689b      	ldr	r3, [r3, #8]
 80053ea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80053ee:	d004      	beq.n	80053fa <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	689b      	ldr	r3, [r3, #8]
 80053f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80053f8:	d107      	bne.n	800540a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	681a      	ldr	r2, [r3, #0]
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005408:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800540e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005412:	d10f      	bne.n	8005434 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	681a      	ldr	r2, [r3, #0]
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005422:	601a      	str	r2, [r3, #0]
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	681a      	ldr	r2, [r3, #0]
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005432:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	2201      	movs	r2, #1
 8005438:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	2200      	movs	r2, #0
 8005440:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005444:	2303      	movs	r3, #3
 8005446:	e010      	b.n	800546a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005448:	69bb      	ldr	r3, [r7, #24]
 800544a:	2b00      	cmp	r3, #0
 800544c:	d101      	bne.n	8005452 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800544e:	2300      	movs	r3, #0
 8005450:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8005452:	69bb      	ldr	r3, [r7, #24]
 8005454:	3b01      	subs	r3, #1
 8005456:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	689a      	ldr	r2, [r3, #8]
 800545e:	68bb      	ldr	r3, [r7, #8]
 8005460:	4013      	ands	r3, r2
 8005462:	687a      	ldr	r2, [r7, #4]
 8005464:	429a      	cmp	r2, r3
 8005466:	d196      	bne.n	8005396 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8005468:	2300      	movs	r3, #0
}
 800546a:	4618      	mov	r0, r3
 800546c:	3728      	adds	r7, #40	; 0x28
 800546e:	46bd      	mov	sp, r7
 8005470:	bd80      	pop	{r7, pc}
 8005472:	bf00      	nop
 8005474:	20004e90 	.word	0x20004e90

08005478 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005478:	b580      	push	{r7, lr}
 800547a:	b088      	sub	sp, #32
 800547c:	af02      	add	r7, sp, #8
 800547e:	60f8      	str	r0, [r7, #12]
 8005480:	60b9      	str	r1, [r7, #8]
 8005482:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	9300      	str	r3, [sp, #0]
 8005488:	68bb      	ldr	r3, [r7, #8]
 800548a:	2200      	movs	r2, #0
 800548c:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8005490:	68f8      	ldr	r0, [r7, #12]
 8005492:	f7ff ff5b 	bl	800534c <SPI_WaitFifoStateUntilTimeout>
 8005496:	4603      	mov	r3, r0
 8005498:	2b00      	cmp	r3, #0
 800549a:	d007      	beq.n	80054ac <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80054a0:	f043 0220 	orr.w	r2, r3, #32
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80054a8:	2303      	movs	r3, #3
 80054aa:	e046      	b.n	800553a <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80054ac:	4b25      	ldr	r3, [pc, #148]	; (8005544 <SPI_EndRxTxTransaction+0xcc>)
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	4a25      	ldr	r2, [pc, #148]	; (8005548 <SPI_EndRxTxTransaction+0xd0>)
 80054b2:	fba2 2303 	umull	r2, r3, r2, r3
 80054b6:	0d5b      	lsrs	r3, r3, #21
 80054b8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80054bc:	fb02 f303 	mul.w	r3, r2, r3
 80054c0:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	685b      	ldr	r3, [r3, #4]
 80054c6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80054ca:	d112      	bne.n	80054f2 <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	9300      	str	r3, [sp, #0]
 80054d0:	68bb      	ldr	r3, [r7, #8]
 80054d2:	2200      	movs	r2, #0
 80054d4:	2180      	movs	r1, #128	; 0x80
 80054d6:	68f8      	ldr	r0, [r7, #12]
 80054d8:	f7ff feb0 	bl	800523c <SPI_WaitFlagStateUntilTimeout>
 80054dc:	4603      	mov	r3, r0
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d016      	beq.n	8005510 <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80054e6:	f043 0220 	orr.w	r2, r3, #32
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 80054ee:	2303      	movs	r3, #3
 80054f0:	e023      	b.n	800553a <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80054f2:	697b      	ldr	r3, [r7, #20]
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d00a      	beq.n	800550e <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 80054f8:	697b      	ldr	r3, [r7, #20]
 80054fa:	3b01      	subs	r3, #1
 80054fc:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	689b      	ldr	r3, [r3, #8]
 8005504:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005508:	2b80      	cmp	r3, #128	; 0x80
 800550a:	d0f2      	beq.n	80054f2 <SPI_EndRxTxTransaction+0x7a>
 800550c:	e000      	b.n	8005510 <SPI_EndRxTxTransaction+0x98>
        break;
 800550e:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	9300      	str	r3, [sp, #0]
 8005514:	68bb      	ldr	r3, [r7, #8]
 8005516:	2200      	movs	r2, #0
 8005518:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800551c:	68f8      	ldr	r0, [r7, #12]
 800551e:	f7ff ff15 	bl	800534c <SPI_WaitFifoStateUntilTimeout>
 8005522:	4603      	mov	r3, r0
 8005524:	2b00      	cmp	r3, #0
 8005526:	d007      	beq.n	8005538 <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800552c:	f043 0220 	orr.w	r2, r3, #32
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005534:	2303      	movs	r3, #3
 8005536:	e000      	b.n	800553a <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 8005538:	2300      	movs	r3, #0
}
 800553a:	4618      	mov	r0, r3
 800553c:	3718      	adds	r7, #24
 800553e:	46bd      	mov	sp, r7
 8005540:	bd80      	pop	{r7, pc}
 8005542:	bf00      	nop
 8005544:	20004e90 	.word	0x20004e90
 8005548:	165e9f81 	.word	0x165e9f81

0800554c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800554c:	b580      	push	{r7, lr}
 800554e:	b082      	sub	sp, #8
 8005550:	af00      	add	r7, sp, #0
 8005552:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	2b00      	cmp	r3, #0
 8005558:	d101      	bne.n	800555e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800555a:	2301      	movs	r3, #1
 800555c:	e049      	b.n	80055f2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005564:	b2db      	uxtb	r3, r3
 8005566:	2b00      	cmp	r3, #0
 8005568:	d106      	bne.n	8005578 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	2200      	movs	r2, #0
 800556e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005572:	6878      	ldr	r0, [r7, #4]
 8005574:	f7fc fe10 	bl	8002198 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	2202      	movs	r2, #2
 800557c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681a      	ldr	r2, [r3, #0]
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	3304      	adds	r3, #4
 8005588:	4619      	mov	r1, r3
 800558a:	4610      	mov	r0, r2
 800558c:	f000 fc7c 	bl	8005e88 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	2201      	movs	r2, #1
 8005594:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	2201      	movs	r2, #1
 800559c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	2201      	movs	r2, #1
 80055a4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	2201      	movs	r2, #1
 80055ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	2201      	movs	r2, #1
 80055b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	2201      	movs	r2, #1
 80055bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	2201      	movs	r2, #1
 80055c4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	2201      	movs	r2, #1
 80055cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	2201      	movs	r2, #1
 80055d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	2201      	movs	r2, #1
 80055dc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	2201      	movs	r2, #1
 80055e4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	2201      	movs	r2, #1
 80055ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80055f0:	2300      	movs	r3, #0
}
 80055f2:	4618      	mov	r0, r3
 80055f4:	3708      	adds	r7, #8
 80055f6:	46bd      	mov	sp, r7
 80055f8:	bd80      	pop	{r7, pc}
	...

080055fc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80055fc:	b480      	push	{r7}
 80055fe:	b085      	sub	sp, #20
 8005600:	af00      	add	r7, sp, #0
 8005602:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800560a:	b2db      	uxtb	r3, r3
 800560c:	2b01      	cmp	r3, #1
 800560e:	d001      	beq.n	8005614 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005610:	2301      	movs	r3, #1
 8005612:	e04c      	b.n	80056ae <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	2202      	movs	r2, #2
 8005618:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	4a26      	ldr	r2, [pc, #152]	; (80056bc <HAL_TIM_Base_Start+0xc0>)
 8005622:	4293      	cmp	r3, r2
 8005624:	d022      	beq.n	800566c <HAL_TIM_Base_Start+0x70>
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800562e:	d01d      	beq.n	800566c <HAL_TIM_Base_Start+0x70>
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	4a22      	ldr	r2, [pc, #136]	; (80056c0 <HAL_TIM_Base_Start+0xc4>)
 8005636:	4293      	cmp	r3, r2
 8005638:	d018      	beq.n	800566c <HAL_TIM_Base_Start+0x70>
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	4a21      	ldr	r2, [pc, #132]	; (80056c4 <HAL_TIM_Base_Start+0xc8>)
 8005640:	4293      	cmp	r3, r2
 8005642:	d013      	beq.n	800566c <HAL_TIM_Base_Start+0x70>
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	4a1f      	ldr	r2, [pc, #124]	; (80056c8 <HAL_TIM_Base_Start+0xcc>)
 800564a:	4293      	cmp	r3, r2
 800564c:	d00e      	beq.n	800566c <HAL_TIM_Base_Start+0x70>
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	4a1e      	ldr	r2, [pc, #120]	; (80056cc <HAL_TIM_Base_Start+0xd0>)
 8005654:	4293      	cmp	r3, r2
 8005656:	d009      	beq.n	800566c <HAL_TIM_Base_Start+0x70>
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	4a1c      	ldr	r2, [pc, #112]	; (80056d0 <HAL_TIM_Base_Start+0xd4>)
 800565e:	4293      	cmp	r3, r2
 8005660:	d004      	beq.n	800566c <HAL_TIM_Base_Start+0x70>
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	4a1b      	ldr	r2, [pc, #108]	; (80056d4 <HAL_TIM_Base_Start+0xd8>)
 8005668:	4293      	cmp	r3, r2
 800566a:	d115      	bne.n	8005698 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	689a      	ldr	r2, [r3, #8]
 8005672:	4b19      	ldr	r3, [pc, #100]	; (80056d8 <HAL_TIM_Base_Start+0xdc>)
 8005674:	4013      	ands	r3, r2
 8005676:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	2b06      	cmp	r3, #6
 800567c:	d015      	beq.n	80056aa <HAL_TIM_Base_Start+0xae>
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005684:	d011      	beq.n	80056aa <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	681a      	ldr	r2, [r3, #0]
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	f042 0201 	orr.w	r2, r2, #1
 8005694:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005696:	e008      	b.n	80056aa <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	681a      	ldr	r2, [r3, #0]
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	f042 0201 	orr.w	r2, r2, #1
 80056a6:	601a      	str	r2, [r3, #0]
 80056a8:	e000      	b.n	80056ac <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80056aa:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80056ac:	2300      	movs	r3, #0
}
 80056ae:	4618      	mov	r0, r3
 80056b0:	3714      	adds	r7, #20
 80056b2:	46bd      	mov	sp, r7
 80056b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b8:	4770      	bx	lr
 80056ba:	bf00      	nop
 80056bc:	40010000 	.word	0x40010000
 80056c0:	40000400 	.word	0x40000400
 80056c4:	40000800 	.word	0x40000800
 80056c8:	40000c00 	.word	0x40000c00
 80056cc:	40010400 	.word	0x40010400
 80056d0:	40014000 	.word	0x40014000
 80056d4:	40001800 	.word	0x40001800
 80056d8:	00010007 	.word	0x00010007

080056dc <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 80056dc:	b480      	push	{r7}
 80056de:	b083      	sub	sp, #12
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	6a1a      	ldr	r2, [r3, #32]
 80056ea:	f241 1311 	movw	r3, #4369	; 0x1111
 80056ee:	4013      	ands	r3, r2
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d10f      	bne.n	8005714 <HAL_TIM_Base_Stop+0x38>
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	6a1a      	ldr	r2, [r3, #32]
 80056fa:	f240 4344 	movw	r3, #1092	; 0x444
 80056fe:	4013      	ands	r3, r2
 8005700:	2b00      	cmp	r3, #0
 8005702:	d107      	bne.n	8005714 <HAL_TIM_Base_Stop+0x38>
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	681a      	ldr	r2, [r3, #0]
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	f022 0201 	bic.w	r2, r2, #1
 8005712:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	2201      	movs	r2, #1
 8005718:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800571c:	2300      	movs	r3, #0
}
 800571e:	4618      	mov	r0, r3
 8005720:	370c      	adds	r7, #12
 8005722:	46bd      	mov	sp, r7
 8005724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005728:	4770      	bx	lr

0800572a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800572a:	b580      	push	{r7, lr}
 800572c:	b082      	sub	sp, #8
 800572e:	af00      	add	r7, sp, #0
 8005730:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	2b00      	cmp	r3, #0
 8005736:	d101      	bne.n	800573c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005738:	2301      	movs	r3, #1
 800573a:	e049      	b.n	80057d0 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005742:	b2db      	uxtb	r3, r3
 8005744:	2b00      	cmp	r3, #0
 8005746:	d106      	bne.n	8005756 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	2200      	movs	r2, #0
 800574c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005750:	6878      	ldr	r0, [r7, #4]
 8005752:	f7fc fd3f 	bl	80021d4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	2202      	movs	r2, #2
 800575a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681a      	ldr	r2, [r3, #0]
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	3304      	adds	r3, #4
 8005766:	4619      	mov	r1, r3
 8005768:	4610      	mov	r0, r2
 800576a:	f000 fb8d 	bl	8005e88 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	2201      	movs	r2, #1
 8005772:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	2201      	movs	r2, #1
 800577a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	2201      	movs	r2, #1
 8005782:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	2201      	movs	r2, #1
 800578a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	2201      	movs	r2, #1
 8005792:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	2201      	movs	r2, #1
 800579a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	2201      	movs	r2, #1
 80057a2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	2201      	movs	r2, #1
 80057aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	2201      	movs	r2, #1
 80057b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	2201      	movs	r2, #1
 80057ba:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	2201      	movs	r2, #1
 80057c2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	2201      	movs	r2, #1
 80057ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80057ce:	2300      	movs	r3, #0
}
 80057d0:	4618      	mov	r0, r3
 80057d2:	3708      	adds	r7, #8
 80057d4:	46bd      	mov	sp, r7
 80057d6:	bd80      	pop	{r7, pc}

080057d8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80057d8:	b580      	push	{r7, lr}
 80057da:	b084      	sub	sp, #16
 80057dc:	af00      	add	r7, sp, #0
 80057de:	6078      	str	r0, [r7, #4]
 80057e0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80057e2:	683b      	ldr	r3, [r7, #0]
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d109      	bne.n	80057fc <HAL_TIM_PWM_Start+0x24>
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80057ee:	b2db      	uxtb	r3, r3
 80057f0:	2b01      	cmp	r3, #1
 80057f2:	bf14      	ite	ne
 80057f4:	2301      	movne	r3, #1
 80057f6:	2300      	moveq	r3, #0
 80057f8:	b2db      	uxtb	r3, r3
 80057fa:	e03c      	b.n	8005876 <HAL_TIM_PWM_Start+0x9e>
 80057fc:	683b      	ldr	r3, [r7, #0]
 80057fe:	2b04      	cmp	r3, #4
 8005800:	d109      	bne.n	8005816 <HAL_TIM_PWM_Start+0x3e>
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005808:	b2db      	uxtb	r3, r3
 800580a:	2b01      	cmp	r3, #1
 800580c:	bf14      	ite	ne
 800580e:	2301      	movne	r3, #1
 8005810:	2300      	moveq	r3, #0
 8005812:	b2db      	uxtb	r3, r3
 8005814:	e02f      	b.n	8005876 <HAL_TIM_PWM_Start+0x9e>
 8005816:	683b      	ldr	r3, [r7, #0]
 8005818:	2b08      	cmp	r3, #8
 800581a:	d109      	bne.n	8005830 <HAL_TIM_PWM_Start+0x58>
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005822:	b2db      	uxtb	r3, r3
 8005824:	2b01      	cmp	r3, #1
 8005826:	bf14      	ite	ne
 8005828:	2301      	movne	r3, #1
 800582a:	2300      	moveq	r3, #0
 800582c:	b2db      	uxtb	r3, r3
 800582e:	e022      	b.n	8005876 <HAL_TIM_PWM_Start+0x9e>
 8005830:	683b      	ldr	r3, [r7, #0]
 8005832:	2b0c      	cmp	r3, #12
 8005834:	d109      	bne.n	800584a <HAL_TIM_PWM_Start+0x72>
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800583c:	b2db      	uxtb	r3, r3
 800583e:	2b01      	cmp	r3, #1
 8005840:	bf14      	ite	ne
 8005842:	2301      	movne	r3, #1
 8005844:	2300      	moveq	r3, #0
 8005846:	b2db      	uxtb	r3, r3
 8005848:	e015      	b.n	8005876 <HAL_TIM_PWM_Start+0x9e>
 800584a:	683b      	ldr	r3, [r7, #0]
 800584c:	2b10      	cmp	r3, #16
 800584e:	d109      	bne.n	8005864 <HAL_TIM_PWM_Start+0x8c>
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005856:	b2db      	uxtb	r3, r3
 8005858:	2b01      	cmp	r3, #1
 800585a:	bf14      	ite	ne
 800585c:	2301      	movne	r3, #1
 800585e:	2300      	moveq	r3, #0
 8005860:	b2db      	uxtb	r3, r3
 8005862:	e008      	b.n	8005876 <HAL_TIM_PWM_Start+0x9e>
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800586a:	b2db      	uxtb	r3, r3
 800586c:	2b01      	cmp	r3, #1
 800586e:	bf14      	ite	ne
 8005870:	2301      	movne	r3, #1
 8005872:	2300      	moveq	r3, #0
 8005874:	b2db      	uxtb	r3, r3
 8005876:	2b00      	cmp	r3, #0
 8005878:	d001      	beq.n	800587e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800587a:	2301      	movs	r3, #1
 800587c:	e092      	b.n	80059a4 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800587e:	683b      	ldr	r3, [r7, #0]
 8005880:	2b00      	cmp	r3, #0
 8005882:	d104      	bne.n	800588e <HAL_TIM_PWM_Start+0xb6>
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	2202      	movs	r2, #2
 8005888:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800588c:	e023      	b.n	80058d6 <HAL_TIM_PWM_Start+0xfe>
 800588e:	683b      	ldr	r3, [r7, #0]
 8005890:	2b04      	cmp	r3, #4
 8005892:	d104      	bne.n	800589e <HAL_TIM_PWM_Start+0xc6>
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	2202      	movs	r2, #2
 8005898:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800589c:	e01b      	b.n	80058d6 <HAL_TIM_PWM_Start+0xfe>
 800589e:	683b      	ldr	r3, [r7, #0]
 80058a0:	2b08      	cmp	r3, #8
 80058a2:	d104      	bne.n	80058ae <HAL_TIM_PWM_Start+0xd6>
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	2202      	movs	r2, #2
 80058a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80058ac:	e013      	b.n	80058d6 <HAL_TIM_PWM_Start+0xfe>
 80058ae:	683b      	ldr	r3, [r7, #0]
 80058b0:	2b0c      	cmp	r3, #12
 80058b2:	d104      	bne.n	80058be <HAL_TIM_PWM_Start+0xe6>
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	2202      	movs	r2, #2
 80058b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80058bc:	e00b      	b.n	80058d6 <HAL_TIM_PWM_Start+0xfe>
 80058be:	683b      	ldr	r3, [r7, #0]
 80058c0:	2b10      	cmp	r3, #16
 80058c2:	d104      	bne.n	80058ce <HAL_TIM_PWM_Start+0xf6>
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	2202      	movs	r2, #2
 80058c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80058cc:	e003      	b.n	80058d6 <HAL_TIM_PWM_Start+0xfe>
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	2202      	movs	r2, #2
 80058d2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	2201      	movs	r2, #1
 80058dc:	6839      	ldr	r1, [r7, #0]
 80058de:	4618      	mov	r0, r3
 80058e0:	f000 fe6a 	bl	80065b8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	4a30      	ldr	r2, [pc, #192]	; (80059ac <HAL_TIM_PWM_Start+0x1d4>)
 80058ea:	4293      	cmp	r3, r2
 80058ec:	d004      	beq.n	80058f8 <HAL_TIM_PWM_Start+0x120>
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	4a2f      	ldr	r2, [pc, #188]	; (80059b0 <HAL_TIM_PWM_Start+0x1d8>)
 80058f4:	4293      	cmp	r3, r2
 80058f6:	d101      	bne.n	80058fc <HAL_TIM_PWM_Start+0x124>
 80058f8:	2301      	movs	r3, #1
 80058fa:	e000      	b.n	80058fe <HAL_TIM_PWM_Start+0x126>
 80058fc:	2300      	movs	r3, #0
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d007      	beq.n	8005912 <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005910:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	4a25      	ldr	r2, [pc, #148]	; (80059ac <HAL_TIM_PWM_Start+0x1d4>)
 8005918:	4293      	cmp	r3, r2
 800591a:	d022      	beq.n	8005962 <HAL_TIM_PWM_Start+0x18a>
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005924:	d01d      	beq.n	8005962 <HAL_TIM_PWM_Start+0x18a>
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	4a22      	ldr	r2, [pc, #136]	; (80059b4 <HAL_TIM_PWM_Start+0x1dc>)
 800592c:	4293      	cmp	r3, r2
 800592e:	d018      	beq.n	8005962 <HAL_TIM_PWM_Start+0x18a>
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	4a20      	ldr	r2, [pc, #128]	; (80059b8 <HAL_TIM_PWM_Start+0x1e0>)
 8005936:	4293      	cmp	r3, r2
 8005938:	d013      	beq.n	8005962 <HAL_TIM_PWM_Start+0x18a>
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	4a1f      	ldr	r2, [pc, #124]	; (80059bc <HAL_TIM_PWM_Start+0x1e4>)
 8005940:	4293      	cmp	r3, r2
 8005942:	d00e      	beq.n	8005962 <HAL_TIM_PWM_Start+0x18a>
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	4a19      	ldr	r2, [pc, #100]	; (80059b0 <HAL_TIM_PWM_Start+0x1d8>)
 800594a:	4293      	cmp	r3, r2
 800594c:	d009      	beq.n	8005962 <HAL_TIM_PWM_Start+0x18a>
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	4a1b      	ldr	r2, [pc, #108]	; (80059c0 <HAL_TIM_PWM_Start+0x1e8>)
 8005954:	4293      	cmp	r3, r2
 8005956:	d004      	beq.n	8005962 <HAL_TIM_PWM_Start+0x18a>
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	4a19      	ldr	r2, [pc, #100]	; (80059c4 <HAL_TIM_PWM_Start+0x1ec>)
 800595e:	4293      	cmp	r3, r2
 8005960:	d115      	bne.n	800598e <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	689a      	ldr	r2, [r3, #8]
 8005968:	4b17      	ldr	r3, [pc, #92]	; (80059c8 <HAL_TIM_PWM_Start+0x1f0>)
 800596a:	4013      	ands	r3, r2
 800596c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	2b06      	cmp	r3, #6
 8005972:	d015      	beq.n	80059a0 <HAL_TIM_PWM_Start+0x1c8>
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800597a:	d011      	beq.n	80059a0 <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	681a      	ldr	r2, [r3, #0]
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	f042 0201 	orr.w	r2, r2, #1
 800598a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800598c:	e008      	b.n	80059a0 <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	681a      	ldr	r2, [r3, #0]
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	f042 0201 	orr.w	r2, r2, #1
 800599c:	601a      	str	r2, [r3, #0]
 800599e:	e000      	b.n	80059a2 <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80059a0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80059a2:	2300      	movs	r3, #0
}
 80059a4:	4618      	mov	r0, r3
 80059a6:	3710      	adds	r7, #16
 80059a8:	46bd      	mov	sp, r7
 80059aa:	bd80      	pop	{r7, pc}
 80059ac:	40010000 	.word	0x40010000
 80059b0:	40010400 	.word	0x40010400
 80059b4:	40000400 	.word	0x40000400
 80059b8:	40000800 	.word	0x40000800
 80059bc:	40000c00 	.word	0x40000c00
 80059c0:	40014000 	.word	0x40014000
 80059c4:	40001800 	.word	0x40001800
 80059c8:	00010007 	.word	0x00010007

080059cc <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80059cc:	b580      	push	{r7, lr}
 80059ce:	b082      	sub	sp, #8
 80059d0:	af00      	add	r7, sp, #0
 80059d2:	6078      	str	r0, [r7, #4]
 80059d4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	2200      	movs	r2, #0
 80059dc:	6839      	ldr	r1, [r7, #0]
 80059de:	4618      	mov	r0, r3
 80059e0:	f000 fdea 	bl	80065b8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	4a36      	ldr	r2, [pc, #216]	; (8005ac4 <HAL_TIM_PWM_Stop+0xf8>)
 80059ea:	4293      	cmp	r3, r2
 80059ec:	d004      	beq.n	80059f8 <HAL_TIM_PWM_Stop+0x2c>
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	4a35      	ldr	r2, [pc, #212]	; (8005ac8 <HAL_TIM_PWM_Stop+0xfc>)
 80059f4:	4293      	cmp	r3, r2
 80059f6:	d101      	bne.n	80059fc <HAL_TIM_PWM_Stop+0x30>
 80059f8:	2301      	movs	r3, #1
 80059fa:	e000      	b.n	80059fe <HAL_TIM_PWM_Stop+0x32>
 80059fc:	2300      	movs	r3, #0
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d017      	beq.n	8005a32 <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	6a1a      	ldr	r2, [r3, #32]
 8005a08:	f241 1311 	movw	r3, #4369	; 0x1111
 8005a0c:	4013      	ands	r3, r2
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d10f      	bne.n	8005a32 <HAL_TIM_PWM_Stop+0x66>
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	6a1a      	ldr	r2, [r3, #32]
 8005a18:	f240 4344 	movw	r3, #1092	; 0x444
 8005a1c:	4013      	ands	r3, r2
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d107      	bne.n	8005a32 <HAL_TIM_PWM_Stop+0x66>
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005a30:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	6a1a      	ldr	r2, [r3, #32]
 8005a38:	f241 1311 	movw	r3, #4369	; 0x1111
 8005a3c:	4013      	ands	r3, r2
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d10f      	bne.n	8005a62 <HAL_TIM_PWM_Stop+0x96>
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	6a1a      	ldr	r2, [r3, #32]
 8005a48:	f240 4344 	movw	r3, #1092	; 0x444
 8005a4c:	4013      	ands	r3, r2
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d107      	bne.n	8005a62 <HAL_TIM_PWM_Stop+0x96>
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	681a      	ldr	r2, [r3, #0]
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	f022 0201 	bic.w	r2, r2, #1
 8005a60:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005a62:	683b      	ldr	r3, [r7, #0]
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d104      	bne.n	8005a72 <HAL_TIM_PWM_Stop+0xa6>
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	2201      	movs	r2, #1
 8005a6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005a70:	e023      	b.n	8005aba <HAL_TIM_PWM_Stop+0xee>
 8005a72:	683b      	ldr	r3, [r7, #0]
 8005a74:	2b04      	cmp	r3, #4
 8005a76:	d104      	bne.n	8005a82 <HAL_TIM_PWM_Stop+0xb6>
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	2201      	movs	r2, #1
 8005a7c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005a80:	e01b      	b.n	8005aba <HAL_TIM_PWM_Stop+0xee>
 8005a82:	683b      	ldr	r3, [r7, #0]
 8005a84:	2b08      	cmp	r3, #8
 8005a86:	d104      	bne.n	8005a92 <HAL_TIM_PWM_Stop+0xc6>
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	2201      	movs	r2, #1
 8005a8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005a90:	e013      	b.n	8005aba <HAL_TIM_PWM_Stop+0xee>
 8005a92:	683b      	ldr	r3, [r7, #0]
 8005a94:	2b0c      	cmp	r3, #12
 8005a96:	d104      	bne.n	8005aa2 <HAL_TIM_PWM_Stop+0xd6>
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	2201      	movs	r2, #1
 8005a9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005aa0:	e00b      	b.n	8005aba <HAL_TIM_PWM_Stop+0xee>
 8005aa2:	683b      	ldr	r3, [r7, #0]
 8005aa4:	2b10      	cmp	r3, #16
 8005aa6:	d104      	bne.n	8005ab2 <HAL_TIM_PWM_Stop+0xe6>
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	2201      	movs	r2, #1
 8005aac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005ab0:	e003      	b.n	8005aba <HAL_TIM_PWM_Stop+0xee>
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	2201      	movs	r2, #1
 8005ab6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 8005aba:	2300      	movs	r3, #0
}
 8005abc:	4618      	mov	r0, r3
 8005abe:	3708      	adds	r7, #8
 8005ac0:	46bd      	mov	sp, r7
 8005ac2:	bd80      	pop	{r7, pc}
 8005ac4:	40010000 	.word	0x40010000
 8005ac8:	40010400 	.word	0x40010400

08005acc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005acc:	b580      	push	{r7, lr}
 8005ace:	b086      	sub	sp, #24
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	60f8      	str	r0, [r7, #12]
 8005ad4:	60b9      	str	r1, [r7, #8]
 8005ad6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005ad8:	2300      	movs	r3, #0
 8005ada:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ae2:	2b01      	cmp	r3, #1
 8005ae4:	d101      	bne.n	8005aea <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005ae6:	2302      	movs	r3, #2
 8005ae8:	e0ff      	b.n	8005cea <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	2201      	movs	r2, #1
 8005aee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	2b14      	cmp	r3, #20
 8005af6:	f200 80f0 	bhi.w	8005cda <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005afa:	a201      	add	r2, pc, #4	; (adr r2, 8005b00 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005afc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b00:	08005b55 	.word	0x08005b55
 8005b04:	08005cdb 	.word	0x08005cdb
 8005b08:	08005cdb 	.word	0x08005cdb
 8005b0c:	08005cdb 	.word	0x08005cdb
 8005b10:	08005b95 	.word	0x08005b95
 8005b14:	08005cdb 	.word	0x08005cdb
 8005b18:	08005cdb 	.word	0x08005cdb
 8005b1c:	08005cdb 	.word	0x08005cdb
 8005b20:	08005bd7 	.word	0x08005bd7
 8005b24:	08005cdb 	.word	0x08005cdb
 8005b28:	08005cdb 	.word	0x08005cdb
 8005b2c:	08005cdb 	.word	0x08005cdb
 8005b30:	08005c17 	.word	0x08005c17
 8005b34:	08005cdb 	.word	0x08005cdb
 8005b38:	08005cdb 	.word	0x08005cdb
 8005b3c:	08005cdb 	.word	0x08005cdb
 8005b40:	08005c59 	.word	0x08005c59
 8005b44:	08005cdb 	.word	0x08005cdb
 8005b48:	08005cdb 	.word	0x08005cdb
 8005b4c:	08005cdb 	.word	0x08005cdb
 8005b50:	08005c99 	.word	0x08005c99
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	68b9      	ldr	r1, [r7, #8]
 8005b5a:	4618      	mov	r0, r3
 8005b5c:	f000 fa34 	bl	8005fc8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	699a      	ldr	r2, [r3, #24]
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	f042 0208 	orr.w	r2, r2, #8
 8005b6e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	699a      	ldr	r2, [r3, #24]
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	f022 0204 	bic.w	r2, r2, #4
 8005b7e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	6999      	ldr	r1, [r3, #24]
 8005b86:	68bb      	ldr	r3, [r7, #8]
 8005b88:	691a      	ldr	r2, [r3, #16]
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	430a      	orrs	r2, r1
 8005b90:	619a      	str	r2, [r3, #24]
      break;
 8005b92:	e0a5      	b.n	8005ce0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	68b9      	ldr	r1, [r7, #8]
 8005b9a:	4618      	mov	r0, r3
 8005b9c:	f000 fa86 	bl	80060ac <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	699a      	ldr	r2, [r3, #24]
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005bae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	699a      	ldr	r2, [r3, #24]
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005bbe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	6999      	ldr	r1, [r3, #24]
 8005bc6:	68bb      	ldr	r3, [r7, #8]
 8005bc8:	691b      	ldr	r3, [r3, #16]
 8005bca:	021a      	lsls	r2, r3, #8
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	430a      	orrs	r2, r1
 8005bd2:	619a      	str	r2, [r3, #24]
      break;
 8005bd4:	e084      	b.n	8005ce0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	68b9      	ldr	r1, [r7, #8]
 8005bdc:	4618      	mov	r0, r3
 8005bde:	f000 fadd 	bl	800619c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	69da      	ldr	r2, [r3, #28]
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	f042 0208 	orr.w	r2, r2, #8
 8005bf0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	69da      	ldr	r2, [r3, #28]
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	f022 0204 	bic.w	r2, r2, #4
 8005c00:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	69d9      	ldr	r1, [r3, #28]
 8005c08:	68bb      	ldr	r3, [r7, #8]
 8005c0a:	691a      	ldr	r2, [r3, #16]
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	430a      	orrs	r2, r1
 8005c12:	61da      	str	r2, [r3, #28]
      break;
 8005c14:	e064      	b.n	8005ce0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	68b9      	ldr	r1, [r7, #8]
 8005c1c:	4618      	mov	r0, r3
 8005c1e:	f000 fb33 	bl	8006288 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	69da      	ldr	r2, [r3, #28]
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005c30:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	69da      	ldr	r2, [r3, #28]
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005c40:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	69d9      	ldr	r1, [r3, #28]
 8005c48:	68bb      	ldr	r3, [r7, #8]
 8005c4a:	691b      	ldr	r3, [r3, #16]
 8005c4c:	021a      	lsls	r2, r3, #8
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	430a      	orrs	r2, r1
 8005c54:	61da      	str	r2, [r3, #28]
      break;
 8005c56:	e043      	b.n	8005ce0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	68b9      	ldr	r1, [r7, #8]
 8005c5e:	4618      	mov	r0, r3
 8005c60:	f000 fb6a 	bl	8006338 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	f042 0208 	orr.w	r2, r2, #8
 8005c72:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	f022 0204 	bic.w	r2, r2, #4
 8005c82:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005c8a:	68bb      	ldr	r3, [r7, #8]
 8005c8c:	691a      	ldr	r2, [r3, #16]
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	430a      	orrs	r2, r1
 8005c94:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005c96:	e023      	b.n	8005ce0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	68b9      	ldr	r1, [r7, #8]
 8005c9e:	4618      	mov	r0, r3
 8005ca0:	f000 fb9c 	bl	80063dc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005cb2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005cc2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005cca:	68bb      	ldr	r3, [r7, #8]
 8005ccc:	691b      	ldr	r3, [r3, #16]
 8005cce:	021a      	lsls	r2, r3, #8
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	430a      	orrs	r2, r1
 8005cd6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005cd8:	e002      	b.n	8005ce0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005cda:	2301      	movs	r3, #1
 8005cdc:	75fb      	strb	r3, [r7, #23]
      break;
 8005cde:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	2200      	movs	r2, #0
 8005ce4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005ce8:	7dfb      	ldrb	r3, [r7, #23]
}
 8005cea:	4618      	mov	r0, r3
 8005cec:	3718      	adds	r7, #24
 8005cee:	46bd      	mov	sp, r7
 8005cf0:	bd80      	pop	{r7, pc}
 8005cf2:	bf00      	nop

08005cf4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005cf4:	b580      	push	{r7, lr}
 8005cf6:	b084      	sub	sp, #16
 8005cf8:	af00      	add	r7, sp, #0
 8005cfa:	6078      	str	r0, [r7, #4]
 8005cfc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005cfe:	2300      	movs	r3, #0
 8005d00:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d08:	2b01      	cmp	r3, #1
 8005d0a:	d101      	bne.n	8005d10 <HAL_TIM_ConfigClockSource+0x1c>
 8005d0c:	2302      	movs	r3, #2
 8005d0e:	e0b4      	b.n	8005e7a <HAL_TIM_ConfigClockSource+0x186>
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	2201      	movs	r2, #1
 8005d14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	2202      	movs	r2, #2
 8005d1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	689b      	ldr	r3, [r3, #8]
 8005d26:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005d28:	68ba      	ldr	r2, [r7, #8]
 8005d2a:	4b56      	ldr	r3, [pc, #344]	; (8005e84 <HAL_TIM_ConfigClockSource+0x190>)
 8005d2c:	4013      	ands	r3, r2
 8005d2e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005d30:	68bb      	ldr	r3, [r7, #8]
 8005d32:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005d36:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	68ba      	ldr	r2, [r7, #8]
 8005d3e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005d40:	683b      	ldr	r3, [r7, #0]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005d48:	d03e      	beq.n	8005dc8 <HAL_TIM_ConfigClockSource+0xd4>
 8005d4a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005d4e:	f200 8087 	bhi.w	8005e60 <HAL_TIM_ConfigClockSource+0x16c>
 8005d52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d56:	f000 8086 	beq.w	8005e66 <HAL_TIM_ConfigClockSource+0x172>
 8005d5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d5e:	d87f      	bhi.n	8005e60 <HAL_TIM_ConfigClockSource+0x16c>
 8005d60:	2b70      	cmp	r3, #112	; 0x70
 8005d62:	d01a      	beq.n	8005d9a <HAL_TIM_ConfigClockSource+0xa6>
 8005d64:	2b70      	cmp	r3, #112	; 0x70
 8005d66:	d87b      	bhi.n	8005e60 <HAL_TIM_ConfigClockSource+0x16c>
 8005d68:	2b60      	cmp	r3, #96	; 0x60
 8005d6a:	d050      	beq.n	8005e0e <HAL_TIM_ConfigClockSource+0x11a>
 8005d6c:	2b60      	cmp	r3, #96	; 0x60
 8005d6e:	d877      	bhi.n	8005e60 <HAL_TIM_ConfigClockSource+0x16c>
 8005d70:	2b50      	cmp	r3, #80	; 0x50
 8005d72:	d03c      	beq.n	8005dee <HAL_TIM_ConfigClockSource+0xfa>
 8005d74:	2b50      	cmp	r3, #80	; 0x50
 8005d76:	d873      	bhi.n	8005e60 <HAL_TIM_ConfigClockSource+0x16c>
 8005d78:	2b40      	cmp	r3, #64	; 0x40
 8005d7a:	d058      	beq.n	8005e2e <HAL_TIM_ConfigClockSource+0x13a>
 8005d7c:	2b40      	cmp	r3, #64	; 0x40
 8005d7e:	d86f      	bhi.n	8005e60 <HAL_TIM_ConfigClockSource+0x16c>
 8005d80:	2b30      	cmp	r3, #48	; 0x30
 8005d82:	d064      	beq.n	8005e4e <HAL_TIM_ConfigClockSource+0x15a>
 8005d84:	2b30      	cmp	r3, #48	; 0x30
 8005d86:	d86b      	bhi.n	8005e60 <HAL_TIM_ConfigClockSource+0x16c>
 8005d88:	2b20      	cmp	r3, #32
 8005d8a:	d060      	beq.n	8005e4e <HAL_TIM_ConfigClockSource+0x15a>
 8005d8c:	2b20      	cmp	r3, #32
 8005d8e:	d867      	bhi.n	8005e60 <HAL_TIM_ConfigClockSource+0x16c>
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d05c      	beq.n	8005e4e <HAL_TIM_ConfigClockSource+0x15a>
 8005d94:	2b10      	cmp	r3, #16
 8005d96:	d05a      	beq.n	8005e4e <HAL_TIM_ConfigClockSource+0x15a>
 8005d98:	e062      	b.n	8005e60 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	6818      	ldr	r0, [r3, #0]
 8005d9e:	683b      	ldr	r3, [r7, #0]
 8005da0:	6899      	ldr	r1, [r3, #8]
 8005da2:	683b      	ldr	r3, [r7, #0]
 8005da4:	685a      	ldr	r2, [r3, #4]
 8005da6:	683b      	ldr	r3, [r7, #0]
 8005da8:	68db      	ldr	r3, [r3, #12]
 8005daa:	f000 fbe5 	bl	8006578 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	689b      	ldr	r3, [r3, #8]
 8005db4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005db6:	68bb      	ldr	r3, [r7, #8]
 8005db8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005dbc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	68ba      	ldr	r2, [r7, #8]
 8005dc4:	609a      	str	r2, [r3, #8]
      break;
 8005dc6:	e04f      	b.n	8005e68 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	6818      	ldr	r0, [r3, #0]
 8005dcc:	683b      	ldr	r3, [r7, #0]
 8005dce:	6899      	ldr	r1, [r3, #8]
 8005dd0:	683b      	ldr	r3, [r7, #0]
 8005dd2:	685a      	ldr	r2, [r3, #4]
 8005dd4:	683b      	ldr	r3, [r7, #0]
 8005dd6:	68db      	ldr	r3, [r3, #12]
 8005dd8:	f000 fbce 	bl	8006578 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	689a      	ldr	r2, [r3, #8]
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005dea:	609a      	str	r2, [r3, #8]
      break;
 8005dec:	e03c      	b.n	8005e68 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	6818      	ldr	r0, [r3, #0]
 8005df2:	683b      	ldr	r3, [r7, #0]
 8005df4:	6859      	ldr	r1, [r3, #4]
 8005df6:	683b      	ldr	r3, [r7, #0]
 8005df8:	68db      	ldr	r3, [r3, #12]
 8005dfa:	461a      	mov	r2, r3
 8005dfc:	f000 fb42 	bl	8006484 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	2150      	movs	r1, #80	; 0x50
 8005e06:	4618      	mov	r0, r3
 8005e08:	f000 fb9b 	bl	8006542 <TIM_ITRx_SetConfig>
      break;
 8005e0c:	e02c      	b.n	8005e68 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	6818      	ldr	r0, [r3, #0]
 8005e12:	683b      	ldr	r3, [r7, #0]
 8005e14:	6859      	ldr	r1, [r3, #4]
 8005e16:	683b      	ldr	r3, [r7, #0]
 8005e18:	68db      	ldr	r3, [r3, #12]
 8005e1a:	461a      	mov	r2, r3
 8005e1c:	f000 fb61 	bl	80064e2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	2160      	movs	r1, #96	; 0x60
 8005e26:	4618      	mov	r0, r3
 8005e28:	f000 fb8b 	bl	8006542 <TIM_ITRx_SetConfig>
      break;
 8005e2c:	e01c      	b.n	8005e68 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	6818      	ldr	r0, [r3, #0]
 8005e32:	683b      	ldr	r3, [r7, #0]
 8005e34:	6859      	ldr	r1, [r3, #4]
 8005e36:	683b      	ldr	r3, [r7, #0]
 8005e38:	68db      	ldr	r3, [r3, #12]
 8005e3a:	461a      	mov	r2, r3
 8005e3c:	f000 fb22 	bl	8006484 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	2140      	movs	r1, #64	; 0x40
 8005e46:	4618      	mov	r0, r3
 8005e48:	f000 fb7b 	bl	8006542 <TIM_ITRx_SetConfig>
      break;
 8005e4c:	e00c      	b.n	8005e68 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681a      	ldr	r2, [r3, #0]
 8005e52:	683b      	ldr	r3, [r7, #0]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	4619      	mov	r1, r3
 8005e58:	4610      	mov	r0, r2
 8005e5a:	f000 fb72 	bl	8006542 <TIM_ITRx_SetConfig>
      break;
 8005e5e:	e003      	b.n	8005e68 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005e60:	2301      	movs	r3, #1
 8005e62:	73fb      	strb	r3, [r7, #15]
      break;
 8005e64:	e000      	b.n	8005e68 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005e66:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	2201      	movs	r2, #1
 8005e6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	2200      	movs	r2, #0
 8005e74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005e78:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e7a:	4618      	mov	r0, r3
 8005e7c:	3710      	adds	r7, #16
 8005e7e:	46bd      	mov	sp, r7
 8005e80:	bd80      	pop	{r7, pc}
 8005e82:	bf00      	nop
 8005e84:	fffeff88 	.word	0xfffeff88

08005e88 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005e88:	b480      	push	{r7}
 8005e8a:	b085      	sub	sp, #20
 8005e8c:	af00      	add	r7, sp, #0
 8005e8e:	6078      	str	r0, [r7, #4]
 8005e90:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	4a40      	ldr	r2, [pc, #256]	; (8005f9c <TIM_Base_SetConfig+0x114>)
 8005e9c:	4293      	cmp	r3, r2
 8005e9e:	d013      	beq.n	8005ec8 <TIM_Base_SetConfig+0x40>
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ea6:	d00f      	beq.n	8005ec8 <TIM_Base_SetConfig+0x40>
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	4a3d      	ldr	r2, [pc, #244]	; (8005fa0 <TIM_Base_SetConfig+0x118>)
 8005eac:	4293      	cmp	r3, r2
 8005eae:	d00b      	beq.n	8005ec8 <TIM_Base_SetConfig+0x40>
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	4a3c      	ldr	r2, [pc, #240]	; (8005fa4 <TIM_Base_SetConfig+0x11c>)
 8005eb4:	4293      	cmp	r3, r2
 8005eb6:	d007      	beq.n	8005ec8 <TIM_Base_SetConfig+0x40>
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	4a3b      	ldr	r2, [pc, #236]	; (8005fa8 <TIM_Base_SetConfig+0x120>)
 8005ebc:	4293      	cmp	r3, r2
 8005ebe:	d003      	beq.n	8005ec8 <TIM_Base_SetConfig+0x40>
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	4a3a      	ldr	r2, [pc, #232]	; (8005fac <TIM_Base_SetConfig+0x124>)
 8005ec4:	4293      	cmp	r3, r2
 8005ec6:	d108      	bne.n	8005eda <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ece:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005ed0:	683b      	ldr	r3, [r7, #0]
 8005ed2:	685b      	ldr	r3, [r3, #4]
 8005ed4:	68fa      	ldr	r2, [r7, #12]
 8005ed6:	4313      	orrs	r3, r2
 8005ed8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	4a2f      	ldr	r2, [pc, #188]	; (8005f9c <TIM_Base_SetConfig+0x114>)
 8005ede:	4293      	cmp	r3, r2
 8005ee0:	d02b      	beq.n	8005f3a <TIM_Base_SetConfig+0xb2>
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ee8:	d027      	beq.n	8005f3a <TIM_Base_SetConfig+0xb2>
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	4a2c      	ldr	r2, [pc, #176]	; (8005fa0 <TIM_Base_SetConfig+0x118>)
 8005eee:	4293      	cmp	r3, r2
 8005ef0:	d023      	beq.n	8005f3a <TIM_Base_SetConfig+0xb2>
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	4a2b      	ldr	r2, [pc, #172]	; (8005fa4 <TIM_Base_SetConfig+0x11c>)
 8005ef6:	4293      	cmp	r3, r2
 8005ef8:	d01f      	beq.n	8005f3a <TIM_Base_SetConfig+0xb2>
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	4a2a      	ldr	r2, [pc, #168]	; (8005fa8 <TIM_Base_SetConfig+0x120>)
 8005efe:	4293      	cmp	r3, r2
 8005f00:	d01b      	beq.n	8005f3a <TIM_Base_SetConfig+0xb2>
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	4a29      	ldr	r2, [pc, #164]	; (8005fac <TIM_Base_SetConfig+0x124>)
 8005f06:	4293      	cmp	r3, r2
 8005f08:	d017      	beq.n	8005f3a <TIM_Base_SetConfig+0xb2>
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	4a28      	ldr	r2, [pc, #160]	; (8005fb0 <TIM_Base_SetConfig+0x128>)
 8005f0e:	4293      	cmp	r3, r2
 8005f10:	d013      	beq.n	8005f3a <TIM_Base_SetConfig+0xb2>
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	4a27      	ldr	r2, [pc, #156]	; (8005fb4 <TIM_Base_SetConfig+0x12c>)
 8005f16:	4293      	cmp	r3, r2
 8005f18:	d00f      	beq.n	8005f3a <TIM_Base_SetConfig+0xb2>
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	4a26      	ldr	r2, [pc, #152]	; (8005fb8 <TIM_Base_SetConfig+0x130>)
 8005f1e:	4293      	cmp	r3, r2
 8005f20:	d00b      	beq.n	8005f3a <TIM_Base_SetConfig+0xb2>
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	4a25      	ldr	r2, [pc, #148]	; (8005fbc <TIM_Base_SetConfig+0x134>)
 8005f26:	4293      	cmp	r3, r2
 8005f28:	d007      	beq.n	8005f3a <TIM_Base_SetConfig+0xb2>
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	4a24      	ldr	r2, [pc, #144]	; (8005fc0 <TIM_Base_SetConfig+0x138>)
 8005f2e:	4293      	cmp	r3, r2
 8005f30:	d003      	beq.n	8005f3a <TIM_Base_SetConfig+0xb2>
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	4a23      	ldr	r2, [pc, #140]	; (8005fc4 <TIM_Base_SetConfig+0x13c>)
 8005f36:	4293      	cmp	r3, r2
 8005f38:	d108      	bne.n	8005f4c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f40:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005f42:	683b      	ldr	r3, [r7, #0]
 8005f44:	68db      	ldr	r3, [r3, #12]
 8005f46:	68fa      	ldr	r2, [r7, #12]
 8005f48:	4313      	orrs	r3, r2
 8005f4a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005f52:	683b      	ldr	r3, [r7, #0]
 8005f54:	695b      	ldr	r3, [r3, #20]
 8005f56:	4313      	orrs	r3, r2
 8005f58:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	68fa      	ldr	r2, [r7, #12]
 8005f5e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005f60:	683b      	ldr	r3, [r7, #0]
 8005f62:	689a      	ldr	r2, [r3, #8]
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005f68:	683b      	ldr	r3, [r7, #0]
 8005f6a:	681a      	ldr	r2, [r3, #0]
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	4a0a      	ldr	r2, [pc, #40]	; (8005f9c <TIM_Base_SetConfig+0x114>)
 8005f74:	4293      	cmp	r3, r2
 8005f76:	d003      	beq.n	8005f80 <TIM_Base_SetConfig+0xf8>
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	4a0c      	ldr	r2, [pc, #48]	; (8005fac <TIM_Base_SetConfig+0x124>)
 8005f7c:	4293      	cmp	r3, r2
 8005f7e:	d103      	bne.n	8005f88 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005f80:	683b      	ldr	r3, [r7, #0]
 8005f82:	691a      	ldr	r2, [r3, #16]
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	2201      	movs	r2, #1
 8005f8c:	615a      	str	r2, [r3, #20]
}
 8005f8e:	bf00      	nop
 8005f90:	3714      	adds	r7, #20
 8005f92:	46bd      	mov	sp, r7
 8005f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f98:	4770      	bx	lr
 8005f9a:	bf00      	nop
 8005f9c:	40010000 	.word	0x40010000
 8005fa0:	40000400 	.word	0x40000400
 8005fa4:	40000800 	.word	0x40000800
 8005fa8:	40000c00 	.word	0x40000c00
 8005fac:	40010400 	.word	0x40010400
 8005fb0:	40014000 	.word	0x40014000
 8005fb4:	40014400 	.word	0x40014400
 8005fb8:	40014800 	.word	0x40014800
 8005fbc:	40001800 	.word	0x40001800
 8005fc0:	40001c00 	.word	0x40001c00
 8005fc4:	40002000 	.word	0x40002000

08005fc8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005fc8:	b480      	push	{r7}
 8005fca:	b087      	sub	sp, #28
 8005fcc:	af00      	add	r7, sp, #0
 8005fce:	6078      	str	r0, [r7, #4]
 8005fd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	6a1b      	ldr	r3, [r3, #32]
 8005fd6:	f023 0201 	bic.w	r2, r3, #1
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	6a1b      	ldr	r3, [r3, #32]
 8005fe2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	685b      	ldr	r3, [r3, #4]
 8005fe8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	699b      	ldr	r3, [r3, #24]
 8005fee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005ff0:	68fa      	ldr	r2, [r7, #12]
 8005ff2:	4b2b      	ldr	r3, [pc, #172]	; (80060a0 <TIM_OC1_SetConfig+0xd8>)
 8005ff4:	4013      	ands	r3, r2
 8005ff6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	f023 0303 	bic.w	r3, r3, #3
 8005ffe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006000:	683b      	ldr	r3, [r7, #0]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	68fa      	ldr	r2, [r7, #12]
 8006006:	4313      	orrs	r3, r2
 8006008:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800600a:	697b      	ldr	r3, [r7, #20]
 800600c:	f023 0302 	bic.w	r3, r3, #2
 8006010:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006012:	683b      	ldr	r3, [r7, #0]
 8006014:	689b      	ldr	r3, [r3, #8]
 8006016:	697a      	ldr	r2, [r7, #20]
 8006018:	4313      	orrs	r3, r2
 800601a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	4a21      	ldr	r2, [pc, #132]	; (80060a4 <TIM_OC1_SetConfig+0xdc>)
 8006020:	4293      	cmp	r3, r2
 8006022:	d003      	beq.n	800602c <TIM_OC1_SetConfig+0x64>
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	4a20      	ldr	r2, [pc, #128]	; (80060a8 <TIM_OC1_SetConfig+0xe0>)
 8006028:	4293      	cmp	r3, r2
 800602a:	d10c      	bne.n	8006046 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800602c:	697b      	ldr	r3, [r7, #20]
 800602e:	f023 0308 	bic.w	r3, r3, #8
 8006032:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006034:	683b      	ldr	r3, [r7, #0]
 8006036:	68db      	ldr	r3, [r3, #12]
 8006038:	697a      	ldr	r2, [r7, #20]
 800603a:	4313      	orrs	r3, r2
 800603c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800603e:	697b      	ldr	r3, [r7, #20]
 8006040:	f023 0304 	bic.w	r3, r3, #4
 8006044:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	4a16      	ldr	r2, [pc, #88]	; (80060a4 <TIM_OC1_SetConfig+0xdc>)
 800604a:	4293      	cmp	r3, r2
 800604c:	d003      	beq.n	8006056 <TIM_OC1_SetConfig+0x8e>
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	4a15      	ldr	r2, [pc, #84]	; (80060a8 <TIM_OC1_SetConfig+0xe0>)
 8006052:	4293      	cmp	r3, r2
 8006054:	d111      	bne.n	800607a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006056:	693b      	ldr	r3, [r7, #16]
 8006058:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800605c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800605e:	693b      	ldr	r3, [r7, #16]
 8006060:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006064:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006066:	683b      	ldr	r3, [r7, #0]
 8006068:	695b      	ldr	r3, [r3, #20]
 800606a:	693a      	ldr	r2, [r7, #16]
 800606c:	4313      	orrs	r3, r2
 800606e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006070:	683b      	ldr	r3, [r7, #0]
 8006072:	699b      	ldr	r3, [r3, #24]
 8006074:	693a      	ldr	r2, [r7, #16]
 8006076:	4313      	orrs	r3, r2
 8006078:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	693a      	ldr	r2, [r7, #16]
 800607e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	68fa      	ldr	r2, [r7, #12]
 8006084:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006086:	683b      	ldr	r3, [r7, #0]
 8006088:	685a      	ldr	r2, [r3, #4]
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	697a      	ldr	r2, [r7, #20]
 8006092:	621a      	str	r2, [r3, #32]
}
 8006094:	bf00      	nop
 8006096:	371c      	adds	r7, #28
 8006098:	46bd      	mov	sp, r7
 800609a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800609e:	4770      	bx	lr
 80060a0:	fffeff8f 	.word	0xfffeff8f
 80060a4:	40010000 	.word	0x40010000
 80060a8:	40010400 	.word	0x40010400

080060ac <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80060ac:	b480      	push	{r7}
 80060ae:	b087      	sub	sp, #28
 80060b0:	af00      	add	r7, sp, #0
 80060b2:	6078      	str	r0, [r7, #4]
 80060b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	6a1b      	ldr	r3, [r3, #32]
 80060ba:	f023 0210 	bic.w	r2, r3, #16
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	6a1b      	ldr	r3, [r3, #32]
 80060c6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	685b      	ldr	r3, [r3, #4]
 80060cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	699b      	ldr	r3, [r3, #24]
 80060d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80060d4:	68fa      	ldr	r2, [r7, #12]
 80060d6:	4b2e      	ldr	r3, [pc, #184]	; (8006190 <TIM_OC2_SetConfig+0xe4>)
 80060d8:	4013      	ands	r3, r2
 80060da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80060e2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80060e4:	683b      	ldr	r3, [r7, #0]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	021b      	lsls	r3, r3, #8
 80060ea:	68fa      	ldr	r2, [r7, #12]
 80060ec:	4313      	orrs	r3, r2
 80060ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80060f0:	697b      	ldr	r3, [r7, #20]
 80060f2:	f023 0320 	bic.w	r3, r3, #32
 80060f6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80060f8:	683b      	ldr	r3, [r7, #0]
 80060fa:	689b      	ldr	r3, [r3, #8]
 80060fc:	011b      	lsls	r3, r3, #4
 80060fe:	697a      	ldr	r2, [r7, #20]
 8006100:	4313      	orrs	r3, r2
 8006102:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	4a23      	ldr	r2, [pc, #140]	; (8006194 <TIM_OC2_SetConfig+0xe8>)
 8006108:	4293      	cmp	r3, r2
 800610a:	d003      	beq.n	8006114 <TIM_OC2_SetConfig+0x68>
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	4a22      	ldr	r2, [pc, #136]	; (8006198 <TIM_OC2_SetConfig+0xec>)
 8006110:	4293      	cmp	r3, r2
 8006112:	d10d      	bne.n	8006130 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006114:	697b      	ldr	r3, [r7, #20]
 8006116:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800611a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800611c:	683b      	ldr	r3, [r7, #0]
 800611e:	68db      	ldr	r3, [r3, #12]
 8006120:	011b      	lsls	r3, r3, #4
 8006122:	697a      	ldr	r2, [r7, #20]
 8006124:	4313      	orrs	r3, r2
 8006126:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006128:	697b      	ldr	r3, [r7, #20]
 800612a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800612e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	4a18      	ldr	r2, [pc, #96]	; (8006194 <TIM_OC2_SetConfig+0xe8>)
 8006134:	4293      	cmp	r3, r2
 8006136:	d003      	beq.n	8006140 <TIM_OC2_SetConfig+0x94>
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	4a17      	ldr	r2, [pc, #92]	; (8006198 <TIM_OC2_SetConfig+0xec>)
 800613c:	4293      	cmp	r3, r2
 800613e:	d113      	bne.n	8006168 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006140:	693b      	ldr	r3, [r7, #16]
 8006142:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006146:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006148:	693b      	ldr	r3, [r7, #16]
 800614a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800614e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006150:	683b      	ldr	r3, [r7, #0]
 8006152:	695b      	ldr	r3, [r3, #20]
 8006154:	009b      	lsls	r3, r3, #2
 8006156:	693a      	ldr	r2, [r7, #16]
 8006158:	4313      	orrs	r3, r2
 800615a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800615c:	683b      	ldr	r3, [r7, #0]
 800615e:	699b      	ldr	r3, [r3, #24]
 8006160:	009b      	lsls	r3, r3, #2
 8006162:	693a      	ldr	r2, [r7, #16]
 8006164:	4313      	orrs	r3, r2
 8006166:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	693a      	ldr	r2, [r7, #16]
 800616c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	68fa      	ldr	r2, [r7, #12]
 8006172:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006174:	683b      	ldr	r3, [r7, #0]
 8006176:	685a      	ldr	r2, [r3, #4]
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	697a      	ldr	r2, [r7, #20]
 8006180:	621a      	str	r2, [r3, #32]
}
 8006182:	bf00      	nop
 8006184:	371c      	adds	r7, #28
 8006186:	46bd      	mov	sp, r7
 8006188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800618c:	4770      	bx	lr
 800618e:	bf00      	nop
 8006190:	feff8fff 	.word	0xfeff8fff
 8006194:	40010000 	.word	0x40010000
 8006198:	40010400 	.word	0x40010400

0800619c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800619c:	b480      	push	{r7}
 800619e:	b087      	sub	sp, #28
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	6078      	str	r0, [r7, #4]
 80061a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	6a1b      	ldr	r3, [r3, #32]
 80061aa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	6a1b      	ldr	r3, [r3, #32]
 80061b6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	685b      	ldr	r3, [r3, #4]
 80061bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	69db      	ldr	r3, [r3, #28]
 80061c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80061c4:	68fa      	ldr	r2, [r7, #12]
 80061c6:	4b2d      	ldr	r3, [pc, #180]	; (800627c <TIM_OC3_SetConfig+0xe0>)
 80061c8:	4013      	ands	r3, r2
 80061ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	f023 0303 	bic.w	r3, r3, #3
 80061d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80061d4:	683b      	ldr	r3, [r7, #0]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	68fa      	ldr	r2, [r7, #12]
 80061da:	4313      	orrs	r3, r2
 80061dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80061de:	697b      	ldr	r3, [r7, #20]
 80061e0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80061e4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80061e6:	683b      	ldr	r3, [r7, #0]
 80061e8:	689b      	ldr	r3, [r3, #8]
 80061ea:	021b      	lsls	r3, r3, #8
 80061ec:	697a      	ldr	r2, [r7, #20]
 80061ee:	4313      	orrs	r3, r2
 80061f0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	4a22      	ldr	r2, [pc, #136]	; (8006280 <TIM_OC3_SetConfig+0xe4>)
 80061f6:	4293      	cmp	r3, r2
 80061f8:	d003      	beq.n	8006202 <TIM_OC3_SetConfig+0x66>
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	4a21      	ldr	r2, [pc, #132]	; (8006284 <TIM_OC3_SetConfig+0xe8>)
 80061fe:	4293      	cmp	r3, r2
 8006200:	d10d      	bne.n	800621e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006202:	697b      	ldr	r3, [r7, #20]
 8006204:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006208:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800620a:	683b      	ldr	r3, [r7, #0]
 800620c:	68db      	ldr	r3, [r3, #12]
 800620e:	021b      	lsls	r3, r3, #8
 8006210:	697a      	ldr	r2, [r7, #20]
 8006212:	4313      	orrs	r3, r2
 8006214:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006216:	697b      	ldr	r3, [r7, #20]
 8006218:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800621c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	4a17      	ldr	r2, [pc, #92]	; (8006280 <TIM_OC3_SetConfig+0xe4>)
 8006222:	4293      	cmp	r3, r2
 8006224:	d003      	beq.n	800622e <TIM_OC3_SetConfig+0x92>
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	4a16      	ldr	r2, [pc, #88]	; (8006284 <TIM_OC3_SetConfig+0xe8>)
 800622a:	4293      	cmp	r3, r2
 800622c:	d113      	bne.n	8006256 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800622e:	693b      	ldr	r3, [r7, #16]
 8006230:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006234:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006236:	693b      	ldr	r3, [r7, #16]
 8006238:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800623c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800623e:	683b      	ldr	r3, [r7, #0]
 8006240:	695b      	ldr	r3, [r3, #20]
 8006242:	011b      	lsls	r3, r3, #4
 8006244:	693a      	ldr	r2, [r7, #16]
 8006246:	4313      	orrs	r3, r2
 8006248:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800624a:	683b      	ldr	r3, [r7, #0]
 800624c:	699b      	ldr	r3, [r3, #24]
 800624e:	011b      	lsls	r3, r3, #4
 8006250:	693a      	ldr	r2, [r7, #16]
 8006252:	4313      	orrs	r3, r2
 8006254:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	693a      	ldr	r2, [r7, #16]
 800625a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	68fa      	ldr	r2, [r7, #12]
 8006260:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006262:	683b      	ldr	r3, [r7, #0]
 8006264:	685a      	ldr	r2, [r3, #4]
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	697a      	ldr	r2, [r7, #20]
 800626e:	621a      	str	r2, [r3, #32]
}
 8006270:	bf00      	nop
 8006272:	371c      	adds	r7, #28
 8006274:	46bd      	mov	sp, r7
 8006276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800627a:	4770      	bx	lr
 800627c:	fffeff8f 	.word	0xfffeff8f
 8006280:	40010000 	.word	0x40010000
 8006284:	40010400 	.word	0x40010400

08006288 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006288:	b480      	push	{r7}
 800628a:	b087      	sub	sp, #28
 800628c:	af00      	add	r7, sp, #0
 800628e:	6078      	str	r0, [r7, #4]
 8006290:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	6a1b      	ldr	r3, [r3, #32]
 8006296:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	6a1b      	ldr	r3, [r3, #32]
 80062a2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	685b      	ldr	r3, [r3, #4]
 80062a8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	69db      	ldr	r3, [r3, #28]
 80062ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80062b0:	68fa      	ldr	r2, [r7, #12]
 80062b2:	4b1e      	ldr	r3, [pc, #120]	; (800632c <TIM_OC4_SetConfig+0xa4>)
 80062b4:	4013      	ands	r3, r2
 80062b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80062be:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80062c0:	683b      	ldr	r3, [r7, #0]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	021b      	lsls	r3, r3, #8
 80062c6:	68fa      	ldr	r2, [r7, #12]
 80062c8:	4313      	orrs	r3, r2
 80062ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80062cc:	693b      	ldr	r3, [r7, #16]
 80062ce:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80062d2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80062d4:	683b      	ldr	r3, [r7, #0]
 80062d6:	689b      	ldr	r3, [r3, #8]
 80062d8:	031b      	lsls	r3, r3, #12
 80062da:	693a      	ldr	r2, [r7, #16]
 80062dc:	4313      	orrs	r3, r2
 80062de:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	4a13      	ldr	r2, [pc, #76]	; (8006330 <TIM_OC4_SetConfig+0xa8>)
 80062e4:	4293      	cmp	r3, r2
 80062e6:	d003      	beq.n	80062f0 <TIM_OC4_SetConfig+0x68>
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	4a12      	ldr	r2, [pc, #72]	; (8006334 <TIM_OC4_SetConfig+0xac>)
 80062ec:	4293      	cmp	r3, r2
 80062ee:	d109      	bne.n	8006304 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80062f0:	697b      	ldr	r3, [r7, #20]
 80062f2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80062f6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80062f8:	683b      	ldr	r3, [r7, #0]
 80062fa:	695b      	ldr	r3, [r3, #20]
 80062fc:	019b      	lsls	r3, r3, #6
 80062fe:	697a      	ldr	r2, [r7, #20]
 8006300:	4313      	orrs	r3, r2
 8006302:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	697a      	ldr	r2, [r7, #20]
 8006308:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	68fa      	ldr	r2, [r7, #12]
 800630e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006310:	683b      	ldr	r3, [r7, #0]
 8006312:	685a      	ldr	r2, [r3, #4]
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	693a      	ldr	r2, [r7, #16]
 800631c:	621a      	str	r2, [r3, #32]
}
 800631e:	bf00      	nop
 8006320:	371c      	adds	r7, #28
 8006322:	46bd      	mov	sp, r7
 8006324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006328:	4770      	bx	lr
 800632a:	bf00      	nop
 800632c:	feff8fff 	.word	0xfeff8fff
 8006330:	40010000 	.word	0x40010000
 8006334:	40010400 	.word	0x40010400

08006338 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006338:	b480      	push	{r7}
 800633a:	b087      	sub	sp, #28
 800633c:	af00      	add	r7, sp, #0
 800633e:	6078      	str	r0, [r7, #4]
 8006340:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	6a1b      	ldr	r3, [r3, #32]
 8006346:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	6a1b      	ldr	r3, [r3, #32]
 8006352:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	685b      	ldr	r3, [r3, #4]
 8006358:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800635e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006360:	68fa      	ldr	r2, [r7, #12]
 8006362:	4b1b      	ldr	r3, [pc, #108]	; (80063d0 <TIM_OC5_SetConfig+0x98>)
 8006364:	4013      	ands	r3, r2
 8006366:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006368:	683b      	ldr	r3, [r7, #0]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	68fa      	ldr	r2, [r7, #12]
 800636e:	4313      	orrs	r3, r2
 8006370:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006372:	693b      	ldr	r3, [r7, #16]
 8006374:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006378:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800637a:	683b      	ldr	r3, [r7, #0]
 800637c:	689b      	ldr	r3, [r3, #8]
 800637e:	041b      	lsls	r3, r3, #16
 8006380:	693a      	ldr	r2, [r7, #16]
 8006382:	4313      	orrs	r3, r2
 8006384:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	4a12      	ldr	r2, [pc, #72]	; (80063d4 <TIM_OC5_SetConfig+0x9c>)
 800638a:	4293      	cmp	r3, r2
 800638c:	d003      	beq.n	8006396 <TIM_OC5_SetConfig+0x5e>
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	4a11      	ldr	r2, [pc, #68]	; (80063d8 <TIM_OC5_SetConfig+0xa0>)
 8006392:	4293      	cmp	r3, r2
 8006394:	d109      	bne.n	80063aa <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006396:	697b      	ldr	r3, [r7, #20]
 8006398:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800639c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800639e:	683b      	ldr	r3, [r7, #0]
 80063a0:	695b      	ldr	r3, [r3, #20]
 80063a2:	021b      	lsls	r3, r3, #8
 80063a4:	697a      	ldr	r2, [r7, #20]
 80063a6:	4313      	orrs	r3, r2
 80063a8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	697a      	ldr	r2, [r7, #20]
 80063ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	68fa      	ldr	r2, [r7, #12]
 80063b4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80063b6:	683b      	ldr	r3, [r7, #0]
 80063b8:	685a      	ldr	r2, [r3, #4]
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	693a      	ldr	r2, [r7, #16]
 80063c2:	621a      	str	r2, [r3, #32]
}
 80063c4:	bf00      	nop
 80063c6:	371c      	adds	r7, #28
 80063c8:	46bd      	mov	sp, r7
 80063ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ce:	4770      	bx	lr
 80063d0:	fffeff8f 	.word	0xfffeff8f
 80063d4:	40010000 	.word	0x40010000
 80063d8:	40010400 	.word	0x40010400

080063dc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80063dc:	b480      	push	{r7}
 80063de:	b087      	sub	sp, #28
 80063e0:	af00      	add	r7, sp, #0
 80063e2:	6078      	str	r0, [r7, #4]
 80063e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	6a1b      	ldr	r3, [r3, #32]
 80063ea:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	6a1b      	ldr	r3, [r3, #32]
 80063f6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	685b      	ldr	r3, [r3, #4]
 80063fc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006402:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006404:	68fa      	ldr	r2, [r7, #12]
 8006406:	4b1c      	ldr	r3, [pc, #112]	; (8006478 <TIM_OC6_SetConfig+0x9c>)
 8006408:	4013      	ands	r3, r2
 800640a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800640c:	683b      	ldr	r3, [r7, #0]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	021b      	lsls	r3, r3, #8
 8006412:	68fa      	ldr	r2, [r7, #12]
 8006414:	4313      	orrs	r3, r2
 8006416:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006418:	693b      	ldr	r3, [r7, #16]
 800641a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800641e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006420:	683b      	ldr	r3, [r7, #0]
 8006422:	689b      	ldr	r3, [r3, #8]
 8006424:	051b      	lsls	r3, r3, #20
 8006426:	693a      	ldr	r2, [r7, #16]
 8006428:	4313      	orrs	r3, r2
 800642a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	4a13      	ldr	r2, [pc, #76]	; (800647c <TIM_OC6_SetConfig+0xa0>)
 8006430:	4293      	cmp	r3, r2
 8006432:	d003      	beq.n	800643c <TIM_OC6_SetConfig+0x60>
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	4a12      	ldr	r2, [pc, #72]	; (8006480 <TIM_OC6_SetConfig+0xa4>)
 8006438:	4293      	cmp	r3, r2
 800643a:	d109      	bne.n	8006450 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800643c:	697b      	ldr	r3, [r7, #20]
 800643e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006442:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006444:	683b      	ldr	r3, [r7, #0]
 8006446:	695b      	ldr	r3, [r3, #20]
 8006448:	029b      	lsls	r3, r3, #10
 800644a:	697a      	ldr	r2, [r7, #20]
 800644c:	4313      	orrs	r3, r2
 800644e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	697a      	ldr	r2, [r7, #20]
 8006454:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	68fa      	ldr	r2, [r7, #12]
 800645a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800645c:	683b      	ldr	r3, [r7, #0]
 800645e:	685a      	ldr	r2, [r3, #4]
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	693a      	ldr	r2, [r7, #16]
 8006468:	621a      	str	r2, [r3, #32]
}
 800646a:	bf00      	nop
 800646c:	371c      	adds	r7, #28
 800646e:	46bd      	mov	sp, r7
 8006470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006474:	4770      	bx	lr
 8006476:	bf00      	nop
 8006478:	feff8fff 	.word	0xfeff8fff
 800647c:	40010000 	.word	0x40010000
 8006480:	40010400 	.word	0x40010400

08006484 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006484:	b480      	push	{r7}
 8006486:	b087      	sub	sp, #28
 8006488:	af00      	add	r7, sp, #0
 800648a:	60f8      	str	r0, [r7, #12]
 800648c:	60b9      	str	r1, [r7, #8]
 800648e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	6a1b      	ldr	r3, [r3, #32]
 8006494:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	6a1b      	ldr	r3, [r3, #32]
 800649a:	f023 0201 	bic.w	r2, r3, #1
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	699b      	ldr	r3, [r3, #24]
 80064a6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80064a8:	693b      	ldr	r3, [r7, #16]
 80064aa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80064ae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	011b      	lsls	r3, r3, #4
 80064b4:	693a      	ldr	r2, [r7, #16]
 80064b6:	4313      	orrs	r3, r2
 80064b8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80064ba:	697b      	ldr	r3, [r7, #20]
 80064bc:	f023 030a 	bic.w	r3, r3, #10
 80064c0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80064c2:	697a      	ldr	r2, [r7, #20]
 80064c4:	68bb      	ldr	r3, [r7, #8]
 80064c6:	4313      	orrs	r3, r2
 80064c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	693a      	ldr	r2, [r7, #16]
 80064ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	697a      	ldr	r2, [r7, #20]
 80064d4:	621a      	str	r2, [r3, #32]
}
 80064d6:	bf00      	nop
 80064d8:	371c      	adds	r7, #28
 80064da:	46bd      	mov	sp, r7
 80064dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e0:	4770      	bx	lr

080064e2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80064e2:	b480      	push	{r7}
 80064e4:	b087      	sub	sp, #28
 80064e6:	af00      	add	r7, sp, #0
 80064e8:	60f8      	str	r0, [r7, #12]
 80064ea:	60b9      	str	r1, [r7, #8]
 80064ec:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	6a1b      	ldr	r3, [r3, #32]
 80064f2:	f023 0210 	bic.w	r2, r3, #16
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	699b      	ldr	r3, [r3, #24]
 80064fe:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	6a1b      	ldr	r3, [r3, #32]
 8006504:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006506:	697b      	ldr	r3, [r7, #20]
 8006508:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800650c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	031b      	lsls	r3, r3, #12
 8006512:	697a      	ldr	r2, [r7, #20]
 8006514:	4313      	orrs	r3, r2
 8006516:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006518:	693b      	ldr	r3, [r7, #16]
 800651a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800651e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006520:	68bb      	ldr	r3, [r7, #8]
 8006522:	011b      	lsls	r3, r3, #4
 8006524:	693a      	ldr	r2, [r7, #16]
 8006526:	4313      	orrs	r3, r2
 8006528:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	697a      	ldr	r2, [r7, #20]
 800652e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	693a      	ldr	r2, [r7, #16]
 8006534:	621a      	str	r2, [r3, #32]
}
 8006536:	bf00      	nop
 8006538:	371c      	adds	r7, #28
 800653a:	46bd      	mov	sp, r7
 800653c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006540:	4770      	bx	lr

08006542 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006542:	b480      	push	{r7}
 8006544:	b085      	sub	sp, #20
 8006546:	af00      	add	r7, sp, #0
 8006548:	6078      	str	r0, [r7, #4]
 800654a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	689b      	ldr	r3, [r3, #8]
 8006550:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006558:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800655a:	683a      	ldr	r2, [r7, #0]
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	4313      	orrs	r3, r2
 8006560:	f043 0307 	orr.w	r3, r3, #7
 8006564:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	68fa      	ldr	r2, [r7, #12]
 800656a:	609a      	str	r2, [r3, #8]
}
 800656c:	bf00      	nop
 800656e:	3714      	adds	r7, #20
 8006570:	46bd      	mov	sp, r7
 8006572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006576:	4770      	bx	lr

08006578 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006578:	b480      	push	{r7}
 800657a:	b087      	sub	sp, #28
 800657c:	af00      	add	r7, sp, #0
 800657e:	60f8      	str	r0, [r7, #12]
 8006580:	60b9      	str	r1, [r7, #8]
 8006582:	607a      	str	r2, [r7, #4]
 8006584:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	689b      	ldr	r3, [r3, #8]
 800658a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800658c:	697b      	ldr	r3, [r7, #20]
 800658e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006592:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006594:	683b      	ldr	r3, [r7, #0]
 8006596:	021a      	lsls	r2, r3, #8
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	431a      	orrs	r2, r3
 800659c:	68bb      	ldr	r3, [r7, #8]
 800659e:	4313      	orrs	r3, r2
 80065a0:	697a      	ldr	r2, [r7, #20]
 80065a2:	4313      	orrs	r3, r2
 80065a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	697a      	ldr	r2, [r7, #20]
 80065aa:	609a      	str	r2, [r3, #8]
}
 80065ac:	bf00      	nop
 80065ae:	371c      	adds	r7, #28
 80065b0:	46bd      	mov	sp, r7
 80065b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b6:	4770      	bx	lr

080065b8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80065b8:	b480      	push	{r7}
 80065ba:	b087      	sub	sp, #28
 80065bc:	af00      	add	r7, sp, #0
 80065be:	60f8      	str	r0, [r7, #12]
 80065c0:	60b9      	str	r1, [r7, #8]
 80065c2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80065c4:	68bb      	ldr	r3, [r7, #8]
 80065c6:	f003 031f 	and.w	r3, r3, #31
 80065ca:	2201      	movs	r2, #1
 80065cc:	fa02 f303 	lsl.w	r3, r2, r3
 80065d0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	6a1a      	ldr	r2, [r3, #32]
 80065d6:	697b      	ldr	r3, [r7, #20]
 80065d8:	43db      	mvns	r3, r3
 80065da:	401a      	ands	r2, r3
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	6a1a      	ldr	r2, [r3, #32]
 80065e4:	68bb      	ldr	r3, [r7, #8]
 80065e6:	f003 031f 	and.w	r3, r3, #31
 80065ea:	6879      	ldr	r1, [r7, #4]
 80065ec:	fa01 f303 	lsl.w	r3, r1, r3
 80065f0:	431a      	orrs	r2, r3
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	621a      	str	r2, [r3, #32]
}
 80065f6:	bf00      	nop
 80065f8:	371c      	adds	r7, #28
 80065fa:	46bd      	mov	sp, r7
 80065fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006600:	4770      	bx	lr
	...

08006604 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006604:	b480      	push	{r7}
 8006606:	b085      	sub	sp, #20
 8006608:	af00      	add	r7, sp, #0
 800660a:	6078      	str	r0, [r7, #4]
 800660c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006614:	2b01      	cmp	r3, #1
 8006616:	d101      	bne.n	800661c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006618:	2302      	movs	r3, #2
 800661a:	e06d      	b.n	80066f8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	2201      	movs	r2, #1
 8006620:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	2202      	movs	r2, #2
 8006628:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	685b      	ldr	r3, [r3, #4]
 8006632:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	689b      	ldr	r3, [r3, #8]
 800663a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	4a30      	ldr	r2, [pc, #192]	; (8006704 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006642:	4293      	cmp	r3, r2
 8006644:	d004      	beq.n	8006650 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	4a2f      	ldr	r2, [pc, #188]	; (8006708 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800664c:	4293      	cmp	r3, r2
 800664e:	d108      	bne.n	8006662 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006656:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006658:	683b      	ldr	r3, [r7, #0]
 800665a:	685b      	ldr	r3, [r3, #4]
 800665c:	68fa      	ldr	r2, [r7, #12]
 800665e:	4313      	orrs	r3, r2
 8006660:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006668:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800666a:	683b      	ldr	r3, [r7, #0]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	68fa      	ldr	r2, [r7, #12]
 8006670:	4313      	orrs	r3, r2
 8006672:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	68fa      	ldr	r2, [r7, #12]
 800667a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	4a20      	ldr	r2, [pc, #128]	; (8006704 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006682:	4293      	cmp	r3, r2
 8006684:	d022      	beq.n	80066cc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800668e:	d01d      	beq.n	80066cc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	4a1d      	ldr	r2, [pc, #116]	; (800670c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006696:	4293      	cmp	r3, r2
 8006698:	d018      	beq.n	80066cc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	4a1c      	ldr	r2, [pc, #112]	; (8006710 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80066a0:	4293      	cmp	r3, r2
 80066a2:	d013      	beq.n	80066cc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	4a1a      	ldr	r2, [pc, #104]	; (8006714 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80066aa:	4293      	cmp	r3, r2
 80066ac:	d00e      	beq.n	80066cc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	4a15      	ldr	r2, [pc, #84]	; (8006708 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80066b4:	4293      	cmp	r3, r2
 80066b6:	d009      	beq.n	80066cc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	4a16      	ldr	r2, [pc, #88]	; (8006718 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80066be:	4293      	cmp	r3, r2
 80066c0:	d004      	beq.n	80066cc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	4a15      	ldr	r2, [pc, #84]	; (800671c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80066c8:	4293      	cmp	r3, r2
 80066ca:	d10c      	bne.n	80066e6 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80066cc:	68bb      	ldr	r3, [r7, #8]
 80066ce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80066d2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80066d4:	683b      	ldr	r3, [r7, #0]
 80066d6:	689b      	ldr	r3, [r3, #8]
 80066d8:	68ba      	ldr	r2, [r7, #8]
 80066da:	4313      	orrs	r3, r2
 80066dc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	68ba      	ldr	r2, [r7, #8]
 80066e4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	2201      	movs	r2, #1
 80066ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	2200      	movs	r2, #0
 80066f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80066f6:	2300      	movs	r3, #0
}
 80066f8:	4618      	mov	r0, r3
 80066fa:	3714      	adds	r7, #20
 80066fc:	46bd      	mov	sp, r7
 80066fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006702:	4770      	bx	lr
 8006704:	40010000 	.word	0x40010000
 8006708:	40010400 	.word	0x40010400
 800670c:	40000400 	.word	0x40000400
 8006710:	40000800 	.word	0x40000800
 8006714:	40000c00 	.word	0x40000c00
 8006718:	40014000 	.word	0x40014000
 800671c:	40001800 	.word	0x40001800

08006720 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006720:	b580      	push	{r7, lr}
 8006722:	b082      	sub	sp, #8
 8006724:	af00      	add	r7, sp, #0
 8006726:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	2b00      	cmp	r3, #0
 800672c:	d101      	bne.n	8006732 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800672e:	2301      	movs	r3, #1
 8006730:	e040      	b.n	80067b4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006736:	2b00      	cmp	r3, #0
 8006738:	d106      	bne.n	8006748 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	2200      	movs	r2, #0
 800673e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006742:	6878      	ldr	r0, [r7, #4]
 8006744:	f7fb fd9e 	bl	8002284 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	2224      	movs	r2, #36	; 0x24
 800674c:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	681a      	ldr	r2, [r3, #0]
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	f022 0201 	bic.w	r2, r2, #1
 800675c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800675e:	6878      	ldr	r0, [r7, #4]
 8006760:	f000 f8b0 	bl	80068c4 <UART_SetConfig>
 8006764:	4603      	mov	r3, r0
 8006766:	2b01      	cmp	r3, #1
 8006768:	d101      	bne.n	800676e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800676a:	2301      	movs	r3, #1
 800676c:	e022      	b.n	80067b4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006772:	2b00      	cmp	r3, #0
 8006774:	d002      	beq.n	800677c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006776:	6878      	ldr	r0, [r7, #4]
 8006778:	f000 fb08 	bl	8006d8c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	685a      	ldr	r2, [r3, #4]
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800678a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	689a      	ldr	r2, [r3, #8]
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800679a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	681a      	ldr	r2, [r3, #0]
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	f042 0201 	orr.w	r2, r2, #1
 80067aa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80067ac:	6878      	ldr	r0, [r7, #4]
 80067ae:	f000 fb8f 	bl	8006ed0 <UART_CheckIdleState>
 80067b2:	4603      	mov	r3, r0
}
 80067b4:	4618      	mov	r0, r3
 80067b6:	3708      	adds	r7, #8
 80067b8:	46bd      	mov	sp, r7
 80067ba:	bd80      	pop	{r7, pc}

080067bc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80067bc:	b580      	push	{r7, lr}
 80067be:	b08a      	sub	sp, #40	; 0x28
 80067c0:	af02      	add	r7, sp, #8
 80067c2:	60f8      	str	r0, [r7, #12]
 80067c4:	60b9      	str	r1, [r7, #8]
 80067c6:	603b      	str	r3, [r7, #0]
 80067c8:	4613      	mov	r3, r2
 80067ca:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80067d0:	2b20      	cmp	r3, #32
 80067d2:	d171      	bne.n	80068b8 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80067d4:	68bb      	ldr	r3, [r7, #8]
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d002      	beq.n	80067e0 <HAL_UART_Transmit+0x24>
 80067da:	88fb      	ldrh	r3, [r7, #6]
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d101      	bne.n	80067e4 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80067e0:	2301      	movs	r3, #1
 80067e2:	e06a      	b.n	80068ba <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	2200      	movs	r2, #0
 80067e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	2221      	movs	r2, #33	; 0x21
 80067f0:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80067f2:	f7fb ff0f 	bl	8002614 <HAL_GetTick>
 80067f6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	88fa      	ldrh	r2, [r7, #6]
 80067fc:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	88fa      	ldrh	r2, [r7, #6]
 8006804:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	689b      	ldr	r3, [r3, #8]
 800680c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006810:	d108      	bne.n	8006824 <HAL_UART_Transmit+0x68>
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	691b      	ldr	r3, [r3, #16]
 8006816:	2b00      	cmp	r3, #0
 8006818:	d104      	bne.n	8006824 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800681a:	2300      	movs	r3, #0
 800681c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800681e:	68bb      	ldr	r3, [r7, #8]
 8006820:	61bb      	str	r3, [r7, #24]
 8006822:	e003      	b.n	800682c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8006824:	68bb      	ldr	r3, [r7, #8]
 8006826:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006828:	2300      	movs	r3, #0
 800682a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800682c:	e02c      	b.n	8006888 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800682e:	683b      	ldr	r3, [r7, #0]
 8006830:	9300      	str	r3, [sp, #0]
 8006832:	697b      	ldr	r3, [r7, #20]
 8006834:	2200      	movs	r2, #0
 8006836:	2180      	movs	r1, #128	; 0x80
 8006838:	68f8      	ldr	r0, [r7, #12]
 800683a:	f000 fb80 	bl	8006f3e <UART_WaitOnFlagUntilTimeout>
 800683e:	4603      	mov	r3, r0
 8006840:	2b00      	cmp	r3, #0
 8006842:	d001      	beq.n	8006848 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8006844:	2303      	movs	r3, #3
 8006846:	e038      	b.n	80068ba <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8006848:	69fb      	ldr	r3, [r7, #28]
 800684a:	2b00      	cmp	r3, #0
 800684c:	d10b      	bne.n	8006866 <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800684e:	69bb      	ldr	r3, [r7, #24]
 8006850:	881b      	ldrh	r3, [r3, #0]
 8006852:	461a      	mov	r2, r3
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800685c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800685e:	69bb      	ldr	r3, [r7, #24]
 8006860:	3302      	adds	r3, #2
 8006862:	61bb      	str	r3, [r7, #24]
 8006864:	e007      	b.n	8006876 <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006866:	69fb      	ldr	r3, [r7, #28]
 8006868:	781a      	ldrb	r2, [r3, #0]
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006870:	69fb      	ldr	r3, [r7, #28]
 8006872:	3301      	adds	r3, #1
 8006874:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800687c:	b29b      	uxth	r3, r3
 800687e:	3b01      	subs	r3, #1
 8006880:	b29a      	uxth	r2, r3
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800688e:	b29b      	uxth	r3, r3
 8006890:	2b00      	cmp	r3, #0
 8006892:	d1cc      	bne.n	800682e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006894:	683b      	ldr	r3, [r7, #0]
 8006896:	9300      	str	r3, [sp, #0]
 8006898:	697b      	ldr	r3, [r7, #20]
 800689a:	2200      	movs	r2, #0
 800689c:	2140      	movs	r1, #64	; 0x40
 800689e:	68f8      	ldr	r0, [r7, #12]
 80068a0:	f000 fb4d 	bl	8006f3e <UART_WaitOnFlagUntilTimeout>
 80068a4:	4603      	mov	r3, r0
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d001      	beq.n	80068ae <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 80068aa:	2303      	movs	r3, #3
 80068ac:	e005      	b.n	80068ba <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	2220      	movs	r2, #32
 80068b2:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80068b4:	2300      	movs	r3, #0
 80068b6:	e000      	b.n	80068ba <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80068b8:	2302      	movs	r3, #2
  }
}
 80068ba:	4618      	mov	r0, r3
 80068bc:	3720      	adds	r7, #32
 80068be:	46bd      	mov	sp, r7
 80068c0:	bd80      	pop	{r7, pc}
	...

080068c4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80068c4:	b580      	push	{r7, lr}
 80068c6:	b088      	sub	sp, #32
 80068c8:	af00      	add	r7, sp, #0
 80068ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80068cc:	2300      	movs	r3, #0
 80068ce:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	689a      	ldr	r2, [r3, #8]
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	691b      	ldr	r3, [r3, #16]
 80068d8:	431a      	orrs	r2, r3
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	695b      	ldr	r3, [r3, #20]
 80068de:	431a      	orrs	r2, r3
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	69db      	ldr	r3, [r3, #28]
 80068e4:	4313      	orrs	r3, r2
 80068e6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	681a      	ldr	r2, [r3, #0]
 80068ee:	4ba6      	ldr	r3, [pc, #664]	; (8006b88 <UART_SetConfig+0x2c4>)
 80068f0:	4013      	ands	r3, r2
 80068f2:	687a      	ldr	r2, [r7, #4]
 80068f4:	6812      	ldr	r2, [r2, #0]
 80068f6:	6979      	ldr	r1, [r7, #20]
 80068f8:	430b      	orrs	r3, r1
 80068fa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	685b      	ldr	r3, [r3, #4]
 8006902:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	68da      	ldr	r2, [r3, #12]
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	430a      	orrs	r2, r1
 8006910:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	699b      	ldr	r3, [r3, #24]
 8006916:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	6a1b      	ldr	r3, [r3, #32]
 800691c:	697a      	ldr	r2, [r7, #20]
 800691e:	4313      	orrs	r3, r2
 8006920:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	689b      	ldr	r3, [r3, #8]
 8006928:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	697a      	ldr	r2, [r7, #20]
 8006932:	430a      	orrs	r2, r1
 8006934:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	4a94      	ldr	r2, [pc, #592]	; (8006b8c <UART_SetConfig+0x2c8>)
 800693c:	4293      	cmp	r3, r2
 800693e:	d120      	bne.n	8006982 <UART_SetConfig+0xbe>
 8006940:	4b93      	ldr	r3, [pc, #588]	; (8006b90 <UART_SetConfig+0x2cc>)
 8006942:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006946:	f003 0303 	and.w	r3, r3, #3
 800694a:	2b03      	cmp	r3, #3
 800694c:	d816      	bhi.n	800697c <UART_SetConfig+0xb8>
 800694e:	a201      	add	r2, pc, #4	; (adr r2, 8006954 <UART_SetConfig+0x90>)
 8006950:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006954:	08006965 	.word	0x08006965
 8006958:	08006971 	.word	0x08006971
 800695c:	0800696b 	.word	0x0800696b
 8006960:	08006977 	.word	0x08006977
 8006964:	2301      	movs	r3, #1
 8006966:	77fb      	strb	r3, [r7, #31]
 8006968:	e150      	b.n	8006c0c <UART_SetConfig+0x348>
 800696a:	2302      	movs	r3, #2
 800696c:	77fb      	strb	r3, [r7, #31]
 800696e:	e14d      	b.n	8006c0c <UART_SetConfig+0x348>
 8006970:	2304      	movs	r3, #4
 8006972:	77fb      	strb	r3, [r7, #31]
 8006974:	e14a      	b.n	8006c0c <UART_SetConfig+0x348>
 8006976:	2308      	movs	r3, #8
 8006978:	77fb      	strb	r3, [r7, #31]
 800697a:	e147      	b.n	8006c0c <UART_SetConfig+0x348>
 800697c:	2310      	movs	r3, #16
 800697e:	77fb      	strb	r3, [r7, #31]
 8006980:	e144      	b.n	8006c0c <UART_SetConfig+0x348>
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	4a83      	ldr	r2, [pc, #524]	; (8006b94 <UART_SetConfig+0x2d0>)
 8006988:	4293      	cmp	r3, r2
 800698a:	d132      	bne.n	80069f2 <UART_SetConfig+0x12e>
 800698c:	4b80      	ldr	r3, [pc, #512]	; (8006b90 <UART_SetConfig+0x2cc>)
 800698e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006992:	f003 030c 	and.w	r3, r3, #12
 8006996:	2b0c      	cmp	r3, #12
 8006998:	d828      	bhi.n	80069ec <UART_SetConfig+0x128>
 800699a:	a201      	add	r2, pc, #4	; (adr r2, 80069a0 <UART_SetConfig+0xdc>)
 800699c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069a0:	080069d5 	.word	0x080069d5
 80069a4:	080069ed 	.word	0x080069ed
 80069a8:	080069ed 	.word	0x080069ed
 80069ac:	080069ed 	.word	0x080069ed
 80069b0:	080069e1 	.word	0x080069e1
 80069b4:	080069ed 	.word	0x080069ed
 80069b8:	080069ed 	.word	0x080069ed
 80069bc:	080069ed 	.word	0x080069ed
 80069c0:	080069db 	.word	0x080069db
 80069c4:	080069ed 	.word	0x080069ed
 80069c8:	080069ed 	.word	0x080069ed
 80069cc:	080069ed 	.word	0x080069ed
 80069d0:	080069e7 	.word	0x080069e7
 80069d4:	2300      	movs	r3, #0
 80069d6:	77fb      	strb	r3, [r7, #31]
 80069d8:	e118      	b.n	8006c0c <UART_SetConfig+0x348>
 80069da:	2302      	movs	r3, #2
 80069dc:	77fb      	strb	r3, [r7, #31]
 80069de:	e115      	b.n	8006c0c <UART_SetConfig+0x348>
 80069e0:	2304      	movs	r3, #4
 80069e2:	77fb      	strb	r3, [r7, #31]
 80069e4:	e112      	b.n	8006c0c <UART_SetConfig+0x348>
 80069e6:	2308      	movs	r3, #8
 80069e8:	77fb      	strb	r3, [r7, #31]
 80069ea:	e10f      	b.n	8006c0c <UART_SetConfig+0x348>
 80069ec:	2310      	movs	r3, #16
 80069ee:	77fb      	strb	r3, [r7, #31]
 80069f0:	e10c      	b.n	8006c0c <UART_SetConfig+0x348>
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	4a68      	ldr	r2, [pc, #416]	; (8006b98 <UART_SetConfig+0x2d4>)
 80069f8:	4293      	cmp	r3, r2
 80069fa:	d120      	bne.n	8006a3e <UART_SetConfig+0x17a>
 80069fc:	4b64      	ldr	r3, [pc, #400]	; (8006b90 <UART_SetConfig+0x2cc>)
 80069fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a02:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006a06:	2b30      	cmp	r3, #48	; 0x30
 8006a08:	d013      	beq.n	8006a32 <UART_SetConfig+0x16e>
 8006a0a:	2b30      	cmp	r3, #48	; 0x30
 8006a0c:	d814      	bhi.n	8006a38 <UART_SetConfig+0x174>
 8006a0e:	2b20      	cmp	r3, #32
 8006a10:	d009      	beq.n	8006a26 <UART_SetConfig+0x162>
 8006a12:	2b20      	cmp	r3, #32
 8006a14:	d810      	bhi.n	8006a38 <UART_SetConfig+0x174>
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d002      	beq.n	8006a20 <UART_SetConfig+0x15c>
 8006a1a:	2b10      	cmp	r3, #16
 8006a1c:	d006      	beq.n	8006a2c <UART_SetConfig+0x168>
 8006a1e:	e00b      	b.n	8006a38 <UART_SetConfig+0x174>
 8006a20:	2300      	movs	r3, #0
 8006a22:	77fb      	strb	r3, [r7, #31]
 8006a24:	e0f2      	b.n	8006c0c <UART_SetConfig+0x348>
 8006a26:	2302      	movs	r3, #2
 8006a28:	77fb      	strb	r3, [r7, #31]
 8006a2a:	e0ef      	b.n	8006c0c <UART_SetConfig+0x348>
 8006a2c:	2304      	movs	r3, #4
 8006a2e:	77fb      	strb	r3, [r7, #31]
 8006a30:	e0ec      	b.n	8006c0c <UART_SetConfig+0x348>
 8006a32:	2308      	movs	r3, #8
 8006a34:	77fb      	strb	r3, [r7, #31]
 8006a36:	e0e9      	b.n	8006c0c <UART_SetConfig+0x348>
 8006a38:	2310      	movs	r3, #16
 8006a3a:	77fb      	strb	r3, [r7, #31]
 8006a3c:	e0e6      	b.n	8006c0c <UART_SetConfig+0x348>
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	4a56      	ldr	r2, [pc, #344]	; (8006b9c <UART_SetConfig+0x2d8>)
 8006a44:	4293      	cmp	r3, r2
 8006a46:	d120      	bne.n	8006a8a <UART_SetConfig+0x1c6>
 8006a48:	4b51      	ldr	r3, [pc, #324]	; (8006b90 <UART_SetConfig+0x2cc>)
 8006a4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a4e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006a52:	2bc0      	cmp	r3, #192	; 0xc0
 8006a54:	d013      	beq.n	8006a7e <UART_SetConfig+0x1ba>
 8006a56:	2bc0      	cmp	r3, #192	; 0xc0
 8006a58:	d814      	bhi.n	8006a84 <UART_SetConfig+0x1c0>
 8006a5a:	2b80      	cmp	r3, #128	; 0x80
 8006a5c:	d009      	beq.n	8006a72 <UART_SetConfig+0x1ae>
 8006a5e:	2b80      	cmp	r3, #128	; 0x80
 8006a60:	d810      	bhi.n	8006a84 <UART_SetConfig+0x1c0>
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d002      	beq.n	8006a6c <UART_SetConfig+0x1a8>
 8006a66:	2b40      	cmp	r3, #64	; 0x40
 8006a68:	d006      	beq.n	8006a78 <UART_SetConfig+0x1b4>
 8006a6a:	e00b      	b.n	8006a84 <UART_SetConfig+0x1c0>
 8006a6c:	2300      	movs	r3, #0
 8006a6e:	77fb      	strb	r3, [r7, #31]
 8006a70:	e0cc      	b.n	8006c0c <UART_SetConfig+0x348>
 8006a72:	2302      	movs	r3, #2
 8006a74:	77fb      	strb	r3, [r7, #31]
 8006a76:	e0c9      	b.n	8006c0c <UART_SetConfig+0x348>
 8006a78:	2304      	movs	r3, #4
 8006a7a:	77fb      	strb	r3, [r7, #31]
 8006a7c:	e0c6      	b.n	8006c0c <UART_SetConfig+0x348>
 8006a7e:	2308      	movs	r3, #8
 8006a80:	77fb      	strb	r3, [r7, #31]
 8006a82:	e0c3      	b.n	8006c0c <UART_SetConfig+0x348>
 8006a84:	2310      	movs	r3, #16
 8006a86:	77fb      	strb	r3, [r7, #31]
 8006a88:	e0c0      	b.n	8006c0c <UART_SetConfig+0x348>
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	4a44      	ldr	r2, [pc, #272]	; (8006ba0 <UART_SetConfig+0x2dc>)
 8006a90:	4293      	cmp	r3, r2
 8006a92:	d125      	bne.n	8006ae0 <UART_SetConfig+0x21c>
 8006a94:	4b3e      	ldr	r3, [pc, #248]	; (8006b90 <UART_SetConfig+0x2cc>)
 8006a96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a9a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006a9e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006aa2:	d017      	beq.n	8006ad4 <UART_SetConfig+0x210>
 8006aa4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006aa8:	d817      	bhi.n	8006ada <UART_SetConfig+0x216>
 8006aaa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006aae:	d00b      	beq.n	8006ac8 <UART_SetConfig+0x204>
 8006ab0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006ab4:	d811      	bhi.n	8006ada <UART_SetConfig+0x216>
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d003      	beq.n	8006ac2 <UART_SetConfig+0x1fe>
 8006aba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006abe:	d006      	beq.n	8006ace <UART_SetConfig+0x20a>
 8006ac0:	e00b      	b.n	8006ada <UART_SetConfig+0x216>
 8006ac2:	2300      	movs	r3, #0
 8006ac4:	77fb      	strb	r3, [r7, #31]
 8006ac6:	e0a1      	b.n	8006c0c <UART_SetConfig+0x348>
 8006ac8:	2302      	movs	r3, #2
 8006aca:	77fb      	strb	r3, [r7, #31]
 8006acc:	e09e      	b.n	8006c0c <UART_SetConfig+0x348>
 8006ace:	2304      	movs	r3, #4
 8006ad0:	77fb      	strb	r3, [r7, #31]
 8006ad2:	e09b      	b.n	8006c0c <UART_SetConfig+0x348>
 8006ad4:	2308      	movs	r3, #8
 8006ad6:	77fb      	strb	r3, [r7, #31]
 8006ad8:	e098      	b.n	8006c0c <UART_SetConfig+0x348>
 8006ada:	2310      	movs	r3, #16
 8006adc:	77fb      	strb	r3, [r7, #31]
 8006ade:	e095      	b.n	8006c0c <UART_SetConfig+0x348>
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	4a2f      	ldr	r2, [pc, #188]	; (8006ba4 <UART_SetConfig+0x2e0>)
 8006ae6:	4293      	cmp	r3, r2
 8006ae8:	d125      	bne.n	8006b36 <UART_SetConfig+0x272>
 8006aea:	4b29      	ldr	r3, [pc, #164]	; (8006b90 <UART_SetConfig+0x2cc>)
 8006aec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006af0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006af4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006af8:	d017      	beq.n	8006b2a <UART_SetConfig+0x266>
 8006afa:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006afe:	d817      	bhi.n	8006b30 <UART_SetConfig+0x26c>
 8006b00:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006b04:	d00b      	beq.n	8006b1e <UART_SetConfig+0x25a>
 8006b06:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006b0a:	d811      	bhi.n	8006b30 <UART_SetConfig+0x26c>
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d003      	beq.n	8006b18 <UART_SetConfig+0x254>
 8006b10:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006b14:	d006      	beq.n	8006b24 <UART_SetConfig+0x260>
 8006b16:	e00b      	b.n	8006b30 <UART_SetConfig+0x26c>
 8006b18:	2301      	movs	r3, #1
 8006b1a:	77fb      	strb	r3, [r7, #31]
 8006b1c:	e076      	b.n	8006c0c <UART_SetConfig+0x348>
 8006b1e:	2302      	movs	r3, #2
 8006b20:	77fb      	strb	r3, [r7, #31]
 8006b22:	e073      	b.n	8006c0c <UART_SetConfig+0x348>
 8006b24:	2304      	movs	r3, #4
 8006b26:	77fb      	strb	r3, [r7, #31]
 8006b28:	e070      	b.n	8006c0c <UART_SetConfig+0x348>
 8006b2a:	2308      	movs	r3, #8
 8006b2c:	77fb      	strb	r3, [r7, #31]
 8006b2e:	e06d      	b.n	8006c0c <UART_SetConfig+0x348>
 8006b30:	2310      	movs	r3, #16
 8006b32:	77fb      	strb	r3, [r7, #31]
 8006b34:	e06a      	b.n	8006c0c <UART_SetConfig+0x348>
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	4a1b      	ldr	r2, [pc, #108]	; (8006ba8 <UART_SetConfig+0x2e4>)
 8006b3c:	4293      	cmp	r3, r2
 8006b3e:	d138      	bne.n	8006bb2 <UART_SetConfig+0x2ee>
 8006b40:	4b13      	ldr	r3, [pc, #76]	; (8006b90 <UART_SetConfig+0x2cc>)
 8006b42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b46:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8006b4a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006b4e:	d017      	beq.n	8006b80 <UART_SetConfig+0x2bc>
 8006b50:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006b54:	d82a      	bhi.n	8006bac <UART_SetConfig+0x2e8>
 8006b56:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006b5a:	d00b      	beq.n	8006b74 <UART_SetConfig+0x2b0>
 8006b5c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006b60:	d824      	bhi.n	8006bac <UART_SetConfig+0x2e8>
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d003      	beq.n	8006b6e <UART_SetConfig+0x2aa>
 8006b66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b6a:	d006      	beq.n	8006b7a <UART_SetConfig+0x2b6>
 8006b6c:	e01e      	b.n	8006bac <UART_SetConfig+0x2e8>
 8006b6e:	2300      	movs	r3, #0
 8006b70:	77fb      	strb	r3, [r7, #31]
 8006b72:	e04b      	b.n	8006c0c <UART_SetConfig+0x348>
 8006b74:	2302      	movs	r3, #2
 8006b76:	77fb      	strb	r3, [r7, #31]
 8006b78:	e048      	b.n	8006c0c <UART_SetConfig+0x348>
 8006b7a:	2304      	movs	r3, #4
 8006b7c:	77fb      	strb	r3, [r7, #31]
 8006b7e:	e045      	b.n	8006c0c <UART_SetConfig+0x348>
 8006b80:	2308      	movs	r3, #8
 8006b82:	77fb      	strb	r3, [r7, #31]
 8006b84:	e042      	b.n	8006c0c <UART_SetConfig+0x348>
 8006b86:	bf00      	nop
 8006b88:	efff69f3 	.word	0xefff69f3
 8006b8c:	40011000 	.word	0x40011000
 8006b90:	40023800 	.word	0x40023800
 8006b94:	40004400 	.word	0x40004400
 8006b98:	40004800 	.word	0x40004800
 8006b9c:	40004c00 	.word	0x40004c00
 8006ba0:	40005000 	.word	0x40005000
 8006ba4:	40011400 	.word	0x40011400
 8006ba8:	40007800 	.word	0x40007800
 8006bac:	2310      	movs	r3, #16
 8006bae:	77fb      	strb	r3, [r7, #31]
 8006bb0:	e02c      	b.n	8006c0c <UART_SetConfig+0x348>
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	4a72      	ldr	r2, [pc, #456]	; (8006d80 <UART_SetConfig+0x4bc>)
 8006bb8:	4293      	cmp	r3, r2
 8006bba:	d125      	bne.n	8006c08 <UART_SetConfig+0x344>
 8006bbc:	4b71      	ldr	r3, [pc, #452]	; (8006d84 <UART_SetConfig+0x4c0>)
 8006bbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006bc2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006bc6:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006bca:	d017      	beq.n	8006bfc <UART_SetConfig+0x338>
 8006bcc:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006bd0:	d817      	bhi.n	8006c02 <UART_SetConfig+0x33e>
 8006bd2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006bd6:	d00b      	beq.n	8006bf0 <UART_SetConfig+0x32c>
 8006bd8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006bdc:	d811      	bhi.n	8006c02 <UART_SetConfig+0x33e>
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d003      	beq.n	8006bea <UART_SetConfig+0x326>
 8006be2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006be6:	d006      	beq.n	8006bf6 <UART_SetConfig+0x332>
 8006be8:	e00b      	b.n	8006c02 <UART_SetConfig+0x33e>
 8006bea:	2300      	movs	r3, #0
 8006bec:	77fb      	strb	r3, [r7, #31]
 8006bee:	e00d      	b.n	8006c0c <UART_SetConfig+0x348>
 8006bf0:	2302      	movs	r3, #2
 8006bf2:	77fb      	strb	r3, [r7, #31]
 8006bf4:	e00a      	b.n	8006c0c <UART_SetConfig+0x348>
 8006bf6:	2304      	movs	r3, #4
 8006bf8:	77fb      	strb	r3, [r7, #31]
 8006bfa:	e007      	b.n	8006c0c <UART_SetConfig+0x348>
 8006bfc:	2308      	movs	r3, #8
 8006bfe:	77fb      	strb	r3, [r7, #31]
 8006c00:	e004      	b.n	8006c0c <UART_SetConfig+0x348>
 8006c02:	2310      	movs	r3, #16
 8006c04:	77fb      	strb	r3, [r7, #31]
 8006c06:	e001      	b.n	8006c0c <UART_SetConfig+0x348>
 8006c08:	2310      	movs	r3, #16
 8006c0a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	69db      	ldr	r3, [r3, #28]
 8006c10:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006c14:	d15b      	bne.n	8006cce <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8006c16:	7ffb      	ldrb	r3, [r7, #31]
 8006c18:	2b08      	cmp	r3, #8
 8006c1a:	d828      	bhi.n	8006c6e <UART_SetConfig+0x3aa>
 8006c1c:	a201      	add	r2, pc, #4	; (adr r2, 8006c24 <UART_SetConfig+0x360>)
 8006c1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c22:	bf00      	nop
 8006c24:	08006c49 	.word	0x08006c49
 8006c28:	08006c51 	.word	0x08006c51
 8006c2c:	08006c59 	.word	0x08006c59
 8006c30:	08006c6f 	.word	0x08006c6f
 8006c34:	08006c5f 	.word	0x08006c5f
 8006c38:	08006c6f 	.word	0x08006c6f
 8006c3c:	08006c6f 	.word	0x08006c6f
 8006c40:	08006c6f 	.word	0x08006c6f
 8006c44:	08006c67 	.word	0x08006c67
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006c48:	f7fd fcc6 	bl	80045d8 <HAL_RCC_GetPCLK1Freq>
 8006c4c:	61b8      	str	r0, [r7, #24]
        break;
 8006c4e:	e013      	b.n	8006c78 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006c50:	f7fd fcd6 	bl	8004600 <HAL_RCC_GetPCLK2Freq>
 8006c54:	61b8      	str	r0, [r7, #24]
        break;
 8006c56:	e00f      	b.n	8006c78 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006c58:	4b4b      	ldr	r3, [pc, #300]	; (8006d88 <UART_SetConfig+0x4c4>)
 8006c5a:	61bb      	str	r3, [r7, #24]
        break;
 8006c5c:	e00c      	b.n	8006c78 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006c5e:	f7fd fbe9 	bl	8004434 <HAL_RCC_GetSysClockFreq>
 8006c62:	61b8      	str	r0, [r7, #24]
        break;
 8006c64:	e008      	b.n	8006c78 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006c66:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006c6a:	61bb      	str	r3, [r7, #24]
        break;
 8006c6c:	e004      	b.n	8006c78 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8006c6e:	2300      	movs	r3, #0
 8006c70:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006c72:	2301      	movs	r3, #1
 8006c74:	77bb      	strb	r3, [r7, #30]
        break;
 8006c76:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006c78:	69bb      	ldr	r3, [r7, #24]
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d074      	beq.n	8006d68 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006c7e:	69bb      	ldr	r3, [r7, #24]
 8006c80:	005a      	lsls	r2, r3, #1
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	685b      	ldr	r3, [r3, #4]
 8006c86:	085b      	lsrs	r3, r3, #1
 8006c88:	441a      	add	r2, r3
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	685b      	ldr	r3, [r3, #4]
 8006c8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c92:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006c94:	693b      	ldr	r3, [r7, #16]
 8006c96:	2b0f      	cmp	r3, #15
 8006c98:	d916      	bls.n	8006cc8 <UART_SetConfig+0x404>
 8006c9a:	693b      	ldr	r3, [r7, #16]
 8006c9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006ca0:	d212      	bcs.n	8006cc8 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006ca2:	693b      	ldr	r3, [r7, #16]
 8006ca4:	b29b      	uxth	r3, r3
 8006ca6:	f023 030f 	bic.w	r3, r3, #15
 8006caa:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006cac:	693b      	ldr	r3, [r7, #16]
 8006cae:	085b      	lsrs	r3, r3, #1
 8006cb0:	b29b      	uxth	r3, r3
 8006cb2:	f003 0307 	and.w	r3, r3, #7
 8006cb6:	b29a      	uxth	r2, r3
 8006cb8:	89fb      	ldrh	r3, [r7, #14]
 8006cba:	4313      	orrs	r3, r2
 8006cbc:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	89fa      	ldrh	r2, [r7, #14]
 8006cc4:	60da      	str	r2, [r3, #12]
 8006cc6:	e04f      	b.n	8006d68 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006cc8:	2301      	movs	r3, #1
 8006cca:	77bb      	strb	r3, [r7, #30]
 8006ccc:	e04c      	b.n	8006d68 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006cce:	7ffb      	ldrb	r3, [r7, #31]
 8006cd0:	2b08      	cmp	r3, #8
 8006cd2:	d828      	bhi.n	8006d26 <UART_SetConfig+0x462>
 8006cd4:	a201      	add	r2, pc, #4	; (adr r2, 8006cdc <UART_SetConfig+0x418>)
 8006cd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cda:	bf00      	nop
 8006cdc:	08006d01 	.word	0x08006d01
 8006ce0:	08006d09 	.word	0x08006d09
 8006ce4:	08006d11 	.word	0x08006d11
 8006ce8:	08006d27 	.word	0x08006d27
 8006cec:	08006d17 	.word	0x08006d17
 8006cf0:	08006d27 	.word	0x08006d27
 8006cf4:	08006d27 	.word	0x08006d27
 8006cf8:	08006d27 	.word	0x08006d27
 8006cfc:	08006d1f 	.word	0x08006d1f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006d00:	f7fd fc6a 	bl	80045d8 <HAL_RCC_GetPCLK1Freq>
 8006d04:	61b8      	str	r0, [r7, #24]
        break;
 8006d06:	e013      	b.n	8006d30 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006d08:	f7fd fc7a 	bl	8004600 <HAL_RCC_GetPCLK2Freq>
 8006d0c:	61b8      	str	r0, [r7, #24]
        break;
 8006d0e:	e00f      	b.n	8006d30 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006d10:	4b1d      	ldr	r3, [pc, #116]	; (8006d88 <UART_SetConfig+0x4c4>)
 8006d12:	61bb      	str	r3, [r7, #24]
        break;
 8006d14:	e00c      	b.n	8006d30 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006d16:	f7fd fb8d 	bl	8004434 <HAL_RCC_GetSysClockFreq>
 8006d1a:	61b8      	str	r0, [r7, #24]
        break;
 8006d1c:	e008      	b.n	8006d30 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006d1e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006d22:	61bb      	str	r3, [r7, #24]
        break;
 8006d24:	e004      	b.n	8006d30 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8006d26:	2300      	movs	r3, #0
 8006d28:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006d2a:	2301      	movs	r3, #1
 8006d2c:	77bb      	strb	r3, [r7, #30]
        break;
 8006d2e:	bf00      	nop
    }

    if (pclk != 0U)
 8006d30:	69bb      	ldr	r3, [r7, #24]
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d018      	beq.n	8006d68 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	685b      	ldr	r3, [r3, #4]
 8006d3a:	085a      	lsrs	r2, r3, #1
 8006d3c:	69bb      	ldr	r3, [r7, #24]
 8006d3e:	441a      	add	r2, r3
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	685b      	ldr	r3, [r3, #4]
 8006d44:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d48:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006d4a:	693b      	ldr	r3, [r7, #16]
 8006d4c:	2b0f      	cmp	r3, #15
 8006d4e:	d909      	bls.n	8006d64 <UART_SetConfig+0x4a0>
 8006d50:	693b      	ldr	r3, [r7, #16]
 8006d52:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006d56:	d205      	bcs.n	8006d64 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006d58:	693b      	ldr	r3, [r7, #16]
 8006d5a:	b29a      	uxth	r2, r3
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	60da      	str	r2, [r3, #12]
 8006d62:	e001      	b.n	8006d68 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006d64:	2301      	movs	r3, #1
 8006d66:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	2200      	movs	r2, #0
 8006d6c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	2200      	movs	r2, #0
 8006d72:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8006d74:	7fbb      	ldrb	r3, [r7, #30]
}
 8006d76:	4618      	mov	r0, r3
 8006d78:	3720      	adds	r7, #32
 8006d7a:	46bd      	mov	sp, r7
 8006d7c:	bd80      	pop	{r7, pc}
 8006d7e:	bf00      	nop
 8006d80:	40007c00 	.word	0x40007c00
 8006d84:	40023800 	.word	0x40023800
 8006d88:	00f42400 	.word	0x00f42400

08006d8c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006d8c:	b480      	push	{r7}
 8006d8e:	b083      	sub	sp, #12
 8006d90:	af00      	add	r7, sp, #0
 8006d92:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d98:	f003 0301 	and.w	r3, r3, #1
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d00a      	beq.n	8006db6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	685b      	ldr	r3, [r3, #4]
 8006da6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	430a      	orrs	r2, r1
 8006db4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dba:	f003 0302 	and.w	r3, r3, #2
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d00a      	beq.n	8006dd8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	685b      	ldr	r3, [r3, #4]
 8006dc8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	430a      	orrs	r2, r1
 8006dd6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ddc:	f003 0304 	and.w	r3, r3, #4
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d00a      	beq.n	8006dfa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	685b      	ldr	r3, [r3, #4]
 8006dea:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	430a      	orrs	r2, r1
 8006df8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dfe:	f003 0308 	and.w	r3, r3, #8
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d00a      	beq.n	8006e1c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	685b      	ldr	r3, [r3, #4]
 8006e0c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	430a      	orrs	r2, r1
 8006e1a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e20:	f003 0310 	and.w	r3, r3, #16
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d00a      	beq.n	8006e3e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	689b      	ldr	r3, [r3, #8]
 8006e2e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	430a      	orrs	r2, r1
 8006e3c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e42:	f003 0320 	and.w	r3, r3, #32
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d00a      	beq.n	8006e60 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	689b      	ldr	r3, [r3, #8]
 8006e50:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	430a      	orrs	r2, r1
 8006e5e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d01a      	beq.n	8006ea2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	685b      	ldr	r3, [r3, #4]
 8006e72:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	430a      	orrs	r2, r1
 8006e80:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e86:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006e8a:	d10a      	bne.n	8006ea2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	685b      	ldr	r3, [r3, #4]
 8006e92:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	430a      	orrs	r2, r1
 8006ea0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ea6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d00a      	beq.n	8006ec4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	685b      	ldr	r3, [r3, #4]
 8006eb4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	430a      	orrs	r2, r1
 8006ec2:	605a      	str	r2, [r3, #4]
  }
}
 8006ec4:	bf00      	nop
 8006ec6:	370c      	adds	r7, #12
 8006ec8:	46bd      	mov	sp, r7
 8006eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ece:	4770      	bx	lr

08006ed0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006ed0:	b580      	push	{r7, lr}
 8006ed2:	b086      	sub	sp, #24
 8006ed4:	af02      	add	r7, sp, #8
 8006ed6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	2200      	movs	r2, #0
 8006edc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006ee0:	f7fb fb98 	bl	8002614 <HAL_GetTick>
 8006ee4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	f003 0308 	and.w	r3, r3, #8
 8006ef0:	2b08      	cmp	r3, #8
 8006ef2:	d10e      	bne.n	8006f12 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006ef4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006ef8:	9300      	str	r3, [sp, #0]
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	2200      	movs	r2, #0
 8006efe:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006f02:	6878      	ldr	r0, [r7, #4]
 8006f04:	f000 f81b 	bl	8006f3e <UART_WaitOnFlagUntilTimeout>
 8006f08:	4603      	mov	r3, r0
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d001      	beq.n	8006f12 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006f0e:	2303      	movs	r3, #3
 8006f10:	e011      	b.n	8006f36 <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	2220      	movs	r2, #32
 8006f16:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	2220      	movs	r2, #32
 8006f1c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	2200      	movs	r2, #0
 8006f24:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	2200      	movs	r2, #0
 8006f2a:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	2200      	movs	r2, #0
 8006f30:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8006f34:	2300      	movs	r3, #0
}
 8006f36:	4618      	mov	r0, r3
 8006f38:	3710      	adds	r7, #16
 8006f3a:	46bd      	mov	sp, r7
 8006f3c:	bd80      	pop	{r7, pc}

08006f3e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006f3e:	b580      	push	{r7, lr}
 8006f40:	b09c      	sub	sp, #112	; 0x70
 8006f42:	af00      	add	r7, sp, #0
 8006f44:	60f8      	str	r0, [r7, #12]
 8006f46:	60b9      	str	r1, [r7, #8]
 8006f48:	603b      	str	r3, [r7, #0]
 8006f4a:	4613      	mov	r3, r2
 8006f4c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006f4e:	e0a7      	b.n	80070a0 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006f50:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006f52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f56:	f000 80a3 	beq.w	80070a0 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006f5a:	f7fb fb5b 	bl	8002614 <HAL_GetTick>
 8006f5e:	4602      	mov	r2, r0
 8006f60:	683b      	ldr	r3, [r7, #0]
 8006f62:	1ad3      	subs	r3, r2, r3
 8006f64:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006f66:	429a      	cmp	r2, r3
 8006f68:	d302      	bcc.n	8006f70 <UART_WaitOnFlagUntilTimeout+0x32>
 8006f6a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d13f      	bne.n	8006ff0 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f76:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006f78:	e853 3f00 	ldrex	r3, [r3]
 8006f7c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006f7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006f80:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006f84:	667b      	str	r3, [r7, #100]	; 0x64
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	461a      	mov	r2, r3
 8006f8c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006f8e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006f90:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f92:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006f94:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006f96:	e841 2300 	strex	r3, r2, [r1]
 8006f9a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006f9c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d1e6      	bne.n	8006f70 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	3308      	adds	r3, #8
 8006fa8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006faa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006fac:	e853 3f00 	ldrex	r3, [r3]
 8006fb0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006fb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fb4:	f023 0301 	bic.w	r3, r3, #1
 8006fb8:	663b      	str	r3, [r7, #96]	; 0x60
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	3308      	adds	r3, #8
 8006fc0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006fc2:	64ba      	str	r2, [r7, #72]	; 0x48
 8006fc4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fc6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006fc8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006fca:	e841 2300 	strex	r3, r2, [r1]
 8006fce:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006fd0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d1e5      	bne.n	8006fa2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	2220      	movs	r2, #32
 8006fda:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	2220      	movs	r2, #32
 8006fe0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	2200      	movs	r2, #0
 8006fe8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8006fec:	2303      	movs	r3, #3
 8006fee:	e068      	b.n	80070c2 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	f003 0304 	and.w	r3, r3, #4
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d050      	beq.n	80070a0 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	69db      	ldr	r3, [r3, #28]
 8007004:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007008:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800700c:	d148      	bne.n	80070a0 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007016:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800701e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007020:	e853 3f00 	ldrex	r3, [r3]
 8007024:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007028:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800702c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	461a      	mov	r2, r3
 8007034:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007036:	637b      	str	r3, [r7, #52]	; 0x34
 8007038:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800703a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800703c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800703e:	e841 2300 	strex	r3, r2, [r1]
 8007042:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007044:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007046:	2b00      	cmp	r3, #0
 8007048:	d1e6      	bne.n	8007018 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	3308      	adds	r3, #8
 8007050:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007052:	697b      	ldr	r3, [r7, #20]
 8007054:	e853 3f00 	ldrex	r3, [r3]
 8007058:	613b      	str	r3, [r7, #16]
   return(result);
 800705a:	693b      	ldr	r3, [r7, #16]
 800705c:	f023 0301 	bic.w	r3, r3, #1
 8007060:	66bb      	str	r3, [r7, #104]	; 0x68
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	3308      	adds	r3, #8
 8007068:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800706a:	623a      	str	r2, [r7, #32]
 800706c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800706e:	69f9      	ldr	r1, [r7, #28]
 8007070:	6a3a      	ldr	r2, [r7, #32]
 8007072:	e841 2300 	strex	r3, r2, [r1]
 8007076:	61bb      	str	r3, [r7, #24]
   return(result);
 8007078:	69bb      	ldr	r3, [r7, #24]
 800707a:	2b00      	cmp	r3, #0
 800707c:	d1e5      	bne.n	800704a <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	2220      	movs	r2, #32
 8007082:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	2220      	movs	r2, #32
 8007088:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	2220      	movs	r2, #32
 8007090:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	2200      	movs	r2, #0
 8007098:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800709c:	2303      	movs	r3, #3
 800709e:	e010      	b.n	80070c2 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	69da      	ldr	r2, [r3, #28]
 80070a6:	68bb      	ldr	r3, [r7, #8]
 80070a8:	4013      	ands	r3, r2
 80070aa:	68ba      	ldr	r2, [r7, #8]
 80070ac:	429a      	cmp	r2, r3
 80070ae:	bf0c      	ite	eq
 80070b0:	2301      	moveq	r3, #1
 80070b2:	2300      	movne	r3, #0
 80070b4:	b2db      	uxtb	r3, r3
 80070b6:	461a      	mov	r2, r3
 80070b8:	79fb      	ldrb	r3, [r7, #7]
 80070ba:	429a      	cmp	r2, r3
 80070bc:	f43f af48 	beq.w	8006f50 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80070c0:	2300      	movs	r3, #0
}
 80070c2:	4618      	mov	r0, r3
 80070c4:	3770      	adds	r7, #112	; 0x70
 80070c6:	46bd      	mov	sp, r7
 80070c8:	bd80      	pop	{r7, pc}
	...

080070cc <__errno>:
 80070cc:	4b01      	ldr	r3, [pc, #4]	; (80070d4 <__errno+0x8>)
 80070ce:	6818      	ldr	r0, [r3, #0]
 80070d0:	4770      	bx	lr
 80070d2:	bf00      	nop
 80070d4:	20004e9c 	.word	0x20004e9c

080070d8 <__libc_init_array>:
 80070d8:	b570      	push	{r4, r5, r6, lr}
 80070da:	4d0d      	ldr	r5, [pc, #52]	; (8007110 <__libc_init_array+0x38>)
 80070dc:	4c0d      	ldr	r4, [pc, #52]	; (8007114 <__libc_init_array+0x3c>)
 80070de:	1b64      	subs	r4, r4, r5
 80070e0:	10a4      	asrs	r4, r4, #2
 80070e2:	2600      	movs	r6, #0
 80070e4:	42a6      	cmp	r6, r4
 80070e6:	d109      	bne.n	80070fc <__libc_init_array+0x24>
 80070e8:	4d0b      	ldr	r5, [pc, #44]	; (8007118 <__libc_init_array+0x40>)
 80070ea:	4c0c      	ldr	r4, [pc, #48]	; (800711c <__libc_init_array+0x44>)
 80070ec:	f001 f824 	bl	8008138 <_init>
 80070f0:	1b64      	subs	r4, r4, r5
 80070f2:	10a4      	asrs	r4, r4, #2
 80070f4:	2600      	movs	r6, #0
 80070f6:	42a6      	cmp	r6, r4
 80070f8:	d105      	bne.n	8007106 <__libc_init_array+0x2e>
 80070fa:	bd70      	pop	{r4, r5, r6, pc}
 80070fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8007100:	4798      	blx	r3
 8007102:	3601      	adds	r6, #1
 8007104:	e7ee      	b.n	80070e4 <__libc_init_array+0xc>
 8007106:	f855 3b04 	ldr.w	r3, [r5], #4
 800710a:	4798      	blx	r3
 800710c:	3601      	adds	r6, #1
 800710e:	e7f2      	b.n	80070f6 <__libc_init_array+0x1e>
 8007110:	0800867c 	.word	0x0800867c
 8007114:	0800867c 	.word	0x0800867c
 8007118:	0800867c 	.word	0x0800867c
 800711c:	08008680 	.word	0x08008680

08007120 <memset>:
 8007120:	4402      	add	r2, r0
 8007122:	4603      	mov	r3, r0
 8007124:	4293      	cmp	r3, r2
 8007126:	d100      	bne.n	800712a <memset+0xa>
 8007128:	4770      	bx	lr
 800712a:	f803 1b01 	strb.w	r1, [r3], #1
 800712e:	e7f9      	b.n	8007124 <memset+0x4>

08007130 <iprintf>:
 8007130:	b40f      	push	{r0, r1, r2, r3}
 8007132:	4b0a      	ldr	r3, [pc, #40]	; (800715c <iprintf+0x2c>)
 8007134:	b513      	push	{r0, r1, r4, lr}
 8007136:	681c      	ldr	r4, [r3, #0]
 8007138:	b124      	cbz	r4, 8007144 <iprintf+0x14>
 800713a:	69a3      	ldr	r3, [r4, #24]
 800713c:	b913      	cbnz	r3, 8007144 <iprintf+0x14>
 800713e:	4620      	mov	r0, r4
 8007140:	f000 fa5e 	bl	8007600 <__sinit>
 8007144:	ab05      	add	r3, sp, #20
 8007146:	9a04      	ldr	r2, [sp, #16]
 8007148:	68a1      	ldr	r1, [r4, #8]
 800714a:	9301      	str	r3, [sp, #4]
 800714c:	4620      	mov	r0, r4
 800714e:	f000 fc67 	bl	8007a20 <_vfiprintf_r>
 8007152:	b002      	add	sp, #8
 8007154:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007158:	b004      	add	sp, #16
 800715a:	4770      	bx	lr
 800715c:	20004e9c 	.word	0x20004e9c

08007160 <_puts_r>:
 8007160:	b570      	push	{r4, r5, r6, lr}
 8007162:	460e      	mov	r6, r1
 8007164:	4605      	mov	r5, r0
 8007166:	b118      	cbz	r0, 8007170 <_puts_r+0x10>
 8007168:	6983      	ldr	r3, [r0, #24]
 800716a:	b90b      	cbnz	r3, 8007170 <_puts_r+0x10>
 800716c:	f000 fa48 	bl	8007600 <__sinit>
 8007170:	69ab      	ldr	r3, [r5, #24]
 8007172:	68ac      	ldr	r4, [r5, #8]
 8007174:	b913      	cbnz	r3, 800717c <_puts_r+0x1c>
 8007176:	4628      	mov	r0, r5
 8007178:	f000 fa42 	bl	8007600 <__sinit>
 800717c:	4b2c      	ldr	r3, [pc, #176]	; (8007230 <_puts_r+0xd0>)
 800717e:	429c      	cmp	r4, r3
 8007180:	d120      	bne.n	80071c4 <_puts_r+0x64>
 8007182:	686c      	ldr	r4, [r5, #4]
 8007184:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007186:	07db      	lsls	r3, r3, #31
 8007188:	d405      	bmi.n	8007196 <_puts_r+0x36>
 800718a:	89a3      	ldrh	r3, [r4, #12]
 800718c:	0598      	lsls	r0, r3, #22
 800718e:	d402      	bmi.n	8007196 <_puts_r+0x36>
 8007190:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007192:	f000 fad3 	bl	800773c <__retarget_lock_acquire_recursive>
 8007196:	89a3      	ldrh	r3, [r4, #12]
 8007198:	0719      	lsls	r1, r3, #28
 800719a:	d51d      	bpl.n	80071d8 <_puts_r+0x78>
 800719c:	6923      	ldr	r3, [r4, #16]
 800719e:	b1db      	cbz	r3, 80071d8 <_puts_r+0x78>
 80071a0:	3e01      	subs	r6, #1
 80071a2:	68a3      	ldr	r3, [r4, #8]
 80071a4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80071a8:	3b01      	subs	r3, #1
 80071aa:	60a3      	str	r3, [r4, #8]
 80071ac:	bb39      	cbnz	r1, 80071fe <_puts_r+0x9e>
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	da38      	bge.n	8007224 <_puts_r+0xc4>
 80071b2:	4622      	mov	r2, r4
 80071b4:	210a      	movs	r1, #10
 80071b6:	4628      	mov	r0, r5
 80071b8:	f000 f848 	bl	800724c <__swbuf_r>
 80071bc:	3001      	adds	r0, #1
 80071be:	d011      	beq.n	80071e4 <_puts_r+0x84>
 80071c0:	250a      	movs	r5, #10
 80071c2:	e011      	b.n	80071e8 <_puts_r+0x88>
 80071c4:	4b1b      	ldr	r3, [pc, #108]	; (8007234 <_puts_r+0xd4>)
 80071c6:	429c      	cmp	r4, r3
 80071c8:	d101      	bne.n	80071ce <_puts_r+0x6e>
 80071ca:	68ac      	ldr	r4, [r5, #8]
 80071cc:	e7da      	b.n	8007184 <_puts_r+0x24>
 80071ce:	4b1a      	ldr	r3, [pc, #104]	; (8007238 <_puts_r+0xd8>)
 80071d0:	429c      	cmp	r4, r3
 80071d2:	bf08      	it	eq
 80071d4:	68ec      	ldreq	r4, [r5, #12]
 80071d6:	e7d5      	b.n	8007184 <_puts_r+0x24>
 80071d8:	4621      	mov	r1, r4
 80071da:	4628      	mov	r0, r5
 80071dc:	f000 f888 	bl	80072f0 <__swsetup_r>
 80071e0:	2800      	cmp	r0, #0
 80071e2:	d0dd      	beq.n	80071a0 <_puts_r+0x40>
 80071e4:	f04f 35ff 	mov.w	r5, #4294967295
 80071e8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80071ea:	07da      	lsls	r2, r3, #31
 80071ec:	d405      	bmi.n	80071fa <_puts_r+0x9a>
 80071ee:	89a3      	ldrh	r3, [r4, #12]
 80071f0:	059b      	lsls	r3, r3, #22
 80071f2:	d402      	bmi.n	80071fa <_puts_r+0x9a>
 80071f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80071f6:	f000 faa2 	bl	800773e <__retarget_lock_release_recursive>
 80071fa:	4628      	mov	r0, r5
 80071fc:	bd70      	pop	{r4, r5, r6, pc}
 80071fe:	2b00      	cmp	r3, #0
 8007200:	da04      	bge.n	800720c <_puts_r+0xac>
 8007202:	69a2      	ldr	r2, [r4, #24]
 8007204:	429a      	cmp	r2, r3
 8007206:	dc06      	bgt.n	8007216 <_puts_r+0xb6>
 8007208:	290a      	cmp	r1, #10
 800720a:	d004      	beq.n	8007216 <_puts_r+0xb6>
 800720c:	6823      	ldr	r3, [r4, #0]
 800720e:	1c5a      	adds	r2, r3, #1
 8007210:	6022      	str	r2, [r4, #0]
 8007212:	7019      	strb	r1, [r3, #0]
 8007214:	e7c5      	b.n	80071a2 <_puts_r+0x42>
 8007216:	4622      	mov	r2, r4
 8007218:	4628      	mov	r0, r5
 800721a:	f000 f817 	bl	800724c <__swbuf_r>
 800721e:	3001      	adds	r0, #1
 8007220:	d1bf      	bne.n	80071a2 <_puts_r+0x42>
 8007222:	e7df      	b.n	80071e4 <_puts_r+0x84>
 8007224:	6823      	ldr	r3, [r4, #0]
 8007226:	250a      	movs	r5, #10
 8007228:	1c5a      	adds	r2, r3, #1
 800722a:	6022      	str	r2, [r4, #0]
 800722c:	701d      	strb	r5, [r3, #0]
 800722e:	e7db      	b.n	80071e8 <_puts_r+0x88>
 8007230:	08008600 	.word	0x08008600
 8007234:	08008620 	.word	0x08008620
 8007238:	080085e0 	.word	0x080085e0

0800723c <puts>:
 800723c:	4b02      	ldr	r3, [pc, #8]	; (8007248 <puts+0xc>)
 800723e:	4601      	mov	r1, r0
 8007240:	6818      	ldr	r0, [r3, #0]
 8007242:	f7ff bf8d 	b.w	8007160 <_puts_r>
 8007246:	bf00      	nop
 8007248:	20004e9c 	.word	0x20004e9c

0800724c <__swbuf_r>:
 800724c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800724e:	460e      	mov	r6, r1
 8007250:	4614      	mov	r4, r2
 8007252:	4605      	mov	r5, r0
 8007254:	b118      	cbz	r0, 800725e <__swbuf_r+0x12>
 8007256:	6983      	ldr	r3, [r0, #24]
 8007258:	b90b      	cbnz	r3, 800725e <__swbuf_r+0x12>
 800725a:	f000 f9d1 	bl	8007600 <__sinit>
 800725e:	4b21      	ldr	r3, [pc, #132]	; (80072e4 <__swbuf_r+0x98>)
 8007260:	429c      	cmp	r4, r3
 8007262:	d12b      	bne.n	80072bc <__swbuf_r+0x70>
 8007264:	686c      	ldr	r4, [r5, #4]
 8007266:	69a3      	ldr	r3, [r4, #24]
 8007268:	60a3      	str	r3, [r4, #8]
 800726a:	89a3      	ldrh	r3, [r4, #12]
 800726c:	071a      	lsls	r2, r3, #28
 800726e:	d52f      	bpl.n	80072d0 <__swbuf_r+0x84>
 8007270:	6923      	ldr	r3, [r4, #16]
 8007272:	b36b      	cbz	r3, 80072d0 <__swbuf_r+0x84>
 8007274:	6923      	ldr	r3, [r4, #16]
 8007276:	6820      	ldr	r0, [r4, #0]
 8007278:	1ac0      	subs	r0, r0, r3
 800727a:	6963      	ldr	r3, [r4, #20]
 800727c:	b2f6      	uxtb	r6, r6
 800727e:	4283      	cmp	r3, r0
 8007280:	4637      	mov	r7, r6
 8007282:	dc04      	bgt.n	800728e <__swbuf_r+0x42>
 8007284:	4621      	mov	r1, r4
 8007286:	4628      	mov	r0, r5
 8007288:	f000 f926 	bl	80074d8 <_fflush_r>
 800728c:	bb30      	cbnz	r0, 80072dc <__swbuf_r+0x90>
 800728e:	68a3      	ldr	r3, [r4, #8]
 8007290:	3b01      	subs	r3, #1
 8007292:	60a3      	str	r3, [r4, #8]
 8007294:	6823      	ldr	r3, [r4, #0]
 8007296:	1c5a      	adds	r2, r3, #1
 8007298:	6022      	str	r2, [r4, #0]
 800729a:	701e      	strb	r6, [r3, #0]
 800729c:	6963      	ldr	r3, [r4, #20]
 800729e:	3001      	adds	r0, #1
 80072a0:	4283      	cmp	r3, r0
 80072a2:	d004      	beq.n	80072ae <__swbuf_r+0x62>
 80072a4:	89a3      	ldrh	r3, [r4, #12]
 80072a6:	07db      	lsls	r3, r3, #31
 80072a8:	d506      	bpl.n	80072b8 <__swbuf_r+0x6c>
 80072aa:	2e0a      	cmp	r6, #10
 80072ac:	d104      	bne.n	80072b8 <__swbuf_r+0x6c>
 80072ae:	4621      	mov	r1, r4
 80072b0:	4628      	mov	r0, r5
 80072b2:	f000 f911 	bl	80074d8 <_fflush_r>
 80072b6:	b988      	cbnz	r0, 80072dc <__swbuf_r+0x90>
 80072b8:	4638      	mov	r0, r7
 80072ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80072bc:	4b0a      	ldr	r3, [pc, #40]	; (80072e8 <__swbuf_r+0x9c>)
 80072be:	429c      	cmp	r4, r3
 80072c0:	d101      	bne.n	80072c6 <__swbuf_r+0x7a>
 80072c2:	68ac      	ldr	r4, [r5, #8]
 80072c4:	e7cf      	b.n	8007266 <__swbuf_r+0x1a>
 80072c6:	4b09      	ldr	r3, [pc, #36]	; (80072ec <__swbuf_r+0xa0>)
 80072c8:	429c      	cmp	r4, r3
 80072ca:	bf08      	it	eq
 80072cc:	68ec      	ldreq	r4, [r5, #12]
 80072ce:	e7ca      	b.n	8007266 <__swbuf_r+0x1a>
 80072d0:	4621      	mov	r1, r4
 80072d2:	4628      	mov	r0, r5
 80072d4:	f000 f80c 	bl	80072f0 <__swsetup_r>
 80072d8:	2800      	cmp	r0, #0
 80072da:	d0cb      	beq.n	8007274 <__swbuf_r+0x28>
 80072dc:	f04f 37ff 	mov.w	r7, #4294967295
 80072e0:	e7ea      	b.n	80072b8 <__swbuf_r+0x6c>
 80072e2:	bf00      	nop
 80072e4:	08008600 	.word	0x08008600
 80072e8:	08008620 	.word	0x08008620
 80072ec:	080085e0 	.word	0x080085e0

080072f0 <__swsetup_r>:
 80072f0:	4b32      	ldr	r3, [pc, #200]	; (80073bc <__swsetup_r+0xcc>)
 80072f2:	b570      	push	{r4, r5, r6, lr}
 80072f4:	681d      	ldr	r5, [r3, #0]
 80072f6:	4606      	mov	r6, r0
 80072f8:	460c      	mov	r4, r1
 80072fa:	b125      	cbz	r5, 8007306 <__swsetup_r+0x16>
 80072fc:	69ab      	ldr	r3, [r5, #24]
 80072fe:	b913      	cbnz	r3, 8007306 <__swsetup_r+0x16>
 8007300:	4628      	mov	r0, r5
 8007302:	f000 f97d 	bl	8007600 <__sinit>
 8007306:	4b2e      	ldr	r3, [pc, #184]	; (80073c0 <__swsetup_r+0xd0>)
 8007308:	429c      	cmp	r4, r3
 800730a:	d10f      	bne.n	800732c <__swsetup_r+0x3c>
 800730c:	686c      	ldr	r4, [r5, #4]
 800730e:	89a3      	ldrh	r3, [r4, #12]
 8007310:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007314:	0719      	lsls	r1, r3, #28
 8007316:	d42c      	bmi.n	8007372 <__swsetup_r+0x82>
 8007318:	06dd      	lsls	r5, r3, #27
 800731a:	d411      	bmi.n	8007340 <__swsetup_r+0x50>
 800731c:	2309      	movs	r3, #9
 800731e:	6033      	str	r3, [r6, #0]
 8007320:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007324:	81a3      	strh	r3, [r4, #12]
 8007326:	f04f 30ff 	mov.w	r0, #4294967295
 800732a:	e03e      	b.n	80073aa <__swsetup_r+0xba>
 800732c:	4b25      	ldr	r3, [pc, #148]	; (80073c4 <__swsetup_r+0xd4>)
 800732e:	429c      	cmp	r4, r3
 8007330:	d101      	bne.n	8007336 <__swsetup_r+0x46>
 8007332:	68ac      	ldr	r4, [r5, #8]
 8007334:	e7eb      	b.n	800730e <__swsetup_r+0x1e>
 8007336:	4b24      	ldr	r3, [pc, #144]	; (80073c8 <__swsetup_r+0xd8>)
 8007338:	429c      	cmp	r4, r3
 800733a:	bf08      	it	eq
 800733c:	68ec      	ldreq	r4, [r5, #12]
 800733e:	e7e6      	b.n	800730e <__swsetup_r+0x1e>
 8007340:	0758      	lsls	r0, r3, #29
 8007342:	d512      	bpl.n	800736a <__swsetup_r+0x7a>
 8007344:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007346:	b141      	cbz	r1, 800735a <__swsetup_r+0x6a>
 8007348:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800734c:	4299      	cmp	r1, r3
 800734e:	d002      	beq.n	8007356 <__swsetup_r+0x66>
 8007350:	4630      	mov	r0, r6
 8007352:	f000 fa5b 	bl	800780c <_free_r>
 8007356:	2300      	movs	r3, #0
 8007358:	6363      	str	r3, [r4, #52]	; 0x34
 800735a:	89a3      	ldrh	r3, [r4, #12]
 800735c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007360:	81a3      	strh	r3, [r4, #12]
 8007362:	2300      	movs	r3, #0
 8007364:	6063      	str	r3, [r4, #4]
 8007366:	6923      	ldr	r3, [r4, #16]
 8007368:	6023      	str	r3, [r4, #0]
 800736a:	89a3      	ldrh	r3, [r4, #12]
 800736c:	f043 0308 	orr.w	r3, r3, #8
 8007370:	81a3      	strh	r3, [r4, #12]
 8007372:	6923      	ldr	r3, [r4, #16]
 8007374:	b94b      	cbnz	r3, 800738a <__swsetup_r+0x9a>
 8007376:	89a3      	ldrh	r3, [r4, #12]
 8007378:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800737c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007380:	d003      	beq.n	800738a <__swsetup_r+0x9a>
 8007382:	4621      	mov	r1, r4
 8007384:	4630      	mov	r0, r6
 8007386:	f000 fa01 	bl	800778c <__smakebuf_r>
 800738a:	89a0      	ldrh	r0, [r4, #12]
 800738c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007390:	f010 0301 	ands.w	r3, r0, #1
 8007394:	d00a      	beq.n	80073ac <__swsetup_r+0xbc>
 8007396:	2300      	movs	r3, #0
 8007398:	60a3      	str	r3, [r4, #8]
 800739a:	6963      	ldr	r3, [r4, #20]
 800739c:	425b      	negs	r3, r3
 800739e:	61a3      	str	r3, [r4, #24]
 80073a0:	6923      	ldr	r3, [r4, #16]
 80073a2:	b943      	cbnz	r3, 80073b6 <__swsetup_r+0xc6>
 80073a4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80073a8:	d1ba      	bne.n	8007320 <__swsetup_r+0x30>
 80073aa:	bd70      	pop	{r4, r5, r6, pc}
 80073ac:	0781      	lsls	r1, r0, #30
 80073ae:	bf58      	it	pl
 80073b0:	6963      	ldrpl	r3, [r4, #20]
 80073b2:	60a3      	str	r3, [r4, #8]
 80073b4:	e7f4      	b.n	80073a0 <__swsetup_r+0xb0>
 80073b6:	2000      	movs	r0, #0
 80073b8:	e7f7      	b.n	80073aa <__swsetup_r+0xba>
 80073ba:	bf00      	nop
 80073bc:	20004e9c 	.word	0x20004e9c
 80073c0:	08008600 	.word	0x08008600
 80073c4:	08008620 	.word	0x08008620
 80073c8:	080085e0 	.word	0x080085e0

080073cc <__sflush_r>:
 80073cc:	898a      	ldrh	r2, [r1, #12]
 80073ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80073d2:	4605      	mov	r5, r0
 80073d4:	0710      	lsls	r0, r2, #28
 80073d6:	460c      	mov	r4, r1
 80073d8:	d458      	bmi.n	800748c <__sflush_r+0xc0>
 80073da:	684b      	ldr	r3, [r1, #4]
 80073dc:	2b00      	cmp	r3, #0
 80073de:	dc05      	bgt.n	80073ec <__sflush_r+0x20>
 80073e0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	dc02      	bgt.n	80073ec <__sflush_r+0x20>
 80073e6:	2000      	movs	r0, #0
 80073e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80073ec:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80073ee:	2e00      	cmp	r6, #0
 80073f0:	d0f9      	beq.n	80073e6 <__sflush_r+0x1a>
 80073f2:	2300      	movs	r3, #0
 80073f4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80073f8:	682f      	ldr	r7, [r5, #0]
 80073fa:	602b      	str	r3, [r5, #0]
 80073fc:	d032      	beq.n	8007464 <__sflush_r+0x98>
 80073fe:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007400:	89a3      	ldrh	r3, [r4, #12]
 8007402:	075a      	lsls	r2, r3, #29
 8007404:	d505      	bpl.n	8007412 <__sflush_r+0x46>
 8007406:	6863      	ldr	r3, [r4, #4]
 8007408:	1ac0      	subs	r0, r0, r3
 800740a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800740c:	b10b      	cbz	r3, 8007412 <__sflush_r+0x46>
 800740e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007410:	1ac0      	subs	r0, r0, r3
 8007412:	2300      	movs	r3, #0
 8007414:	4602      	mov	r2, r0
 8007416:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007418:	6a21      	ldr	r1, [r4, #32]
 800741a:	4628      	mov	r0, r5
 800741c:	47b0      	blx	r6
 800741e:	1c43      	adds	r3, r0, #1
 8007420:	89a3      	ldrh	r3, [r4, #12]
 8007422:	d106      	bne.n	8007432 <__sflush_r+0x66>
 8007424:	6829      	ldr	r1, [r5, #0]
 8007426:	291d      	cmp	r1, #29
 8007428:	d82c      	bhi.n	8007484 <__sflush_r+0xb8>
 800742a:	4a2a      	ldr	r2, [pc, #168]	; (80074d4 <__sflush_r+0x108>)
 800742c:	40ca      	lsrs	r2, r1
 800742e:	07d6      	lsls	r6, r2, #31
 8007430:	d528      	bpl.n	8007484 <__sflush_r+0xb8>
 8007432:	2200      	movs	r2, #0
 8007434:	6062      	str	r2, [r4, #4]
 8007436:	04d9      	lsls	r1, r3, #19
 8007438:	6922      	ldr	r2, [r4, #16]
 800743a:	6022      	str	r2, [r4, #0]
 800743c:	d504      	bpl.n	8007448 <__sflush_r+0x7c>
 800743e:	1c42      	adds	r2, r0, #1
 8007440:	d101      	bne.n	8007446 <__sflush_r+0x7a>
 8007442:	682b      	ldr	r3, [r5, #0]
 8007444:	b903      	cbnz	r3, 8007448 <__sflush_r+0x7c>
 8007446:	6560      	str	r0, [r4, #84]	; 0x54
 8007448:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800744a:	602f      	str	r7, [r5, #0]
 800744c:	2900      	cmp	r1, #0
 800744e:	d0ca      	beq.n	80073e6 <__sflush_r+0x1a>
 8007450:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007454:	4299      	cmp	r1, r3
 8007456:	d002      	beq.n	800745e <__sflush_r+0x92>
 8007458:	4628      	mov	r0, r5
 800745a:	f000 f9d7 	bl	800780c <_free_r>
 800745e:	2000      	movs	r0, #0
 8007460:	6360      	str	r0, [r4, #52]	; 0x34
 8007462:	e7c1      	b.n	80073e8 <__sflush_r+0x1c>
 8007464:	6a21      	ldr	r1, [r4, #32]
 8007466:	2301      	movs	r3, #1
 8007468:	4628      	mov	r0, r5
 800746a:	47b0      	blx	r6
 800746c:	1c41      	adds	r1, r0, #1
 800746e:	d1c7      	bne.n	8007400 <__sflush_r+0x34>
 8007470:	682b      	ldr	r3, [r5, #0]
 8007472:	2b00      	cmp	r3, #0
 8007474:	d0c4      	beq.n	8007400 <__sflush_r+0x34>
 8007476:	2b1d      	cmp	r3, #29
 8007478:	d001      	beq.n	800747e <__sflush_r+0xb2>
 800747a:	2b16      	cmp	r3, #22
 800747c:	d101      	bne.n	8007482 <__sflush_r+0xb6>
 800747e:	602f      	str	r7, [r5, #0]
 8007480:	e7b1      	b.n	80073e6 <__sflush_r+0x1a>
 8007482:	89a3      	ldrh	r3, [r4, #12]
 8007484:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007488:	81a3      	strh	r3, [r4, #12]
 800748a:	e7ad      	b.n	80073e8 <__sflush_r+0x1c>
 800748c:	690f      	ldr	r7, [r1, #16]
 800748e:	2f00      	cmp	r7, #0
 8007490:	d0a9      	beq.n	80073e6 <__sflush_r+0x1a>
 8007492:	0793      	lsls	r3, r2, #30
 8007494:	680e      	ldr	r6, [r1, #0]
 8007496:	bf08      	it	eq
 8007498:	694b      	ldreq	r3, [r1, #20]
 800749a:	600f      	str	r7, [r1, #0]
 800749c:	bf18      	it	ne
 800749e:	2300      	movne	r3, #0
 80074a0:	eba6 0807 	sub.w	r8, r6, r7
 80074a4:	608b      	str	r3, [r1, #8]
 80074a6:	f1b8 0f00 	cmp.w	r8, #0
 80074aa:	dd9c      	ble.n	80073e6 <__sflush_r+0x1a>
 80074ac:	6a21      	ldr	r1, [r4, #32]
 80074ae:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80074b0:	4643      	mov	r3, r8
 80074b2:	463a      	mov	r2, r7
 80074b4:	4628      	mov	r0, r5
 80074b6:	47b0      	blx	r6
 80074b8:	2800      	cmp	r0, #0
 80074ba:	dc06      	bgt.n	80074ca <__sflush_r+0xfe>
 80074bc:	89a3      	ldrh	r3, [r4, #12]
 80074be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80074c2:	81a3      	strh	r3, [r4, #12]
 80074c4:	f04f 30ff 	mov.w	r0, #4294967295
 80074c8:	e78e      	b.n	80073e8 <__sflush_r+0x1c>
 80074ca:	4407      	add	r7, r0
 80074cc:	eba8 0800 	sub.w	r8, r8, r0
 80074d0:	e7e9      	b.n	80074a6 <__sflush_r+0xda>
 80074d2:	bf00      	nop
 80074d4:	20400001 	.word	0x20400001

080074d8 <_fflush_r>:
 80074d8:	b538      	push	{r3, r4, r5, lr}
 80074da:	690b      	ldr	r3, [r1, #16]
 80074dc:	4605      	mov	r5, r0
 80074de:	460c      	mov	r4, r1
 80074e0:	b913      	cbnz	r3, 80074e8 <_fflush_r+0x10>
 80074e2:	2500      	movs	r5, #0
 80074e4:	4628      	mov	r0, r5
 80074e6:	bd38      	pop	{r3, r4, r5, pc}
 80074e8:	b118      	cbz	r0, 80074f2 <_fflush_r+0x1a>
 80074ea:	6983      	ldr	r3, [r0, #24]
 80074ec:	b90b      	cbnz	r3, 80074f2 <_fflush_r+0x1a>
 80074ee:	f000 f887 	bl	8007600 <__sinit>
 80074f2:	4b14      	ldr	r3, [pc, #80]	; (8007544 <_fflush_r+0x6c>)
 80074f4:	429c      	cmp	r4, r3
 80074f6:	d11b      	bne.n	8007530 <_fflush_r+0x58>
 80074f8:	686c      	ldr	r4, [r5, #4]
 80074fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d0ef      	beq.n	80074e2 <_fflush_r+0xa>
 8007502:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007504:	07d0      	lsls	r0, r2, #31
 8007506:	d404      	bmi.n	8007512 <_fflush_r+0x3a>
 8007508:	0599      	lsls	r1, r3, #22
 800750a:	d402      	bmi.n	8007512 <_fflush_r+0x3a>
 800750c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800750e:	f000 f915 	bl	800773c <__retarget_lock_acquire_recursive>
 8007512:	4628      	mov	r0, r5
 8007514:	4621      	mov	r1, r4
 8007516:	f7ff ff59 	bl	80073cc <__sflush_r>
 800751a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800751c:	07da      	lsls	r2, r3, #31
 800751e:	4605      	mov	r5, r0
 8007520:	d4e0      	bmi.n	80074e4 <_fflush_r+0xc>
 8007522:	89a3      	ldrh	r3, [r4, #12]
 8007524:	059b      	lsls	r3, r3, #22
 8007526:	d4dd      	bmi.n	80074e4 <_fflush_r+0xc>
 8007528:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800752a:	f000 f908 	bl	800773e <__retarget_lock_release_recursive>
 800752e:	e7d9      	b.n	80074e4 <_fflush_r+0xc>
 8007530:	4b05      	ldr	r3, [pc, #20]	; (8007548 <_fflush_r+0x70>)
 8007532:	429c      	cmp	r4, r3
 8007534:	d101      	bne.n	800753a <_fflush_r+0x62>
 8007536:	68ac      	ldr	r4, [r5, #8]
 8007538:	e7df      	b.n	80074fa <_fflush_r+0x22>
 800753a:	4b04      	ldr	r3, [pc, #16]	; (800754c <_fflush_r+0x74>)
 800753c:	429c      	cmp	r4, r3
 800753e:	bf08      	it	eq
 8007540:	68ec      	ldreq	r4, [r5, #12]
 8007542:	e7da      	b.n	80074fa <_fflush_r+0x22>
 8007544:	08008600 	.word	0x08008600
 8007548:	08008620 	.word	0x08008620
 800754c:	080085e0 	.word	0x080085e0

08007550 <std>:
 8007550:	2300      	movs	r3, #0
 8007552:	b510      	push	{r4, lr}
 8007554:	4604      	mov	r4, r0
 8007556:	e9c0 3300 	strd	r3, r3, [r0]
 800755a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800755e:	6083      	str	r3, [r0, #8]
 8007560:	8181      	strh	r1, [r0, #12]
 8007562:	6643      	str	r3, [r0, #100]	; 0x64
 8007564:	81c2      	strh	r2, [r0, #14]
 8007566:	6183      	str	r3, [r0, #24]
 8007568:	4619      	mov	r1, r3
 800756a:	2208      	movs	r2, #8
 800756c:	305c      	adds	r0, #92	; 0x5c
 800756e:	f7ff fdd7 	bl	8007120 <memset>
 8007572:	4b05      	ldr	r3, [pc, #20]	; (8007588 <std+0x38>)
 8007574:	6263      	str	r3, [r4, #36]	; 0x24
 8007576:	4b05      	ldr	r3, [pc, #20]	; (800758c <std+0x3c>)
 8007578:	62a3      	str	r3, [r4, #40]	; 0x28
 800757a:	4b05      	ldr	r3, [pc, #20]	; (8007590 <std+0x40>)
 800757c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800757e:	4b05      	ldr	r3, [pc, #20]	; (8007594 <std+0x44>)
 8007580:	6224      	str	r4, [r4, #32]
 8007582:	6323      	str	r3, [r4, #48]	; 0x30
 8007584:	bd10      	pop	{r4, pc}
 8007586:	bf00      	nop
 8007588:	08007fc9 	.word	0x08007fc9
 800758c:	08007feb 	.word	0x08007feb
 8007590:	08008023 	.word	0x08008023
 8007594:	08008047 	.word	0x08008047

08007598 <_cleanup_r>:
 8007598:	4901      	ldr	r1, [pc, #4]	; (80075a0 <_cleanup_r+0x8>)
 800759a:	f000 b8af 	b.w	80076fc <_fwalk_reent>
 800759e:	bf00      	nop
 80075a0:	080074d9 	.word	0x080074d9

080075a4 <__sfmoreglue>:
 80075a4:	b570      	push	{r4, r5, r6, lr}
 80075a6:	2268      	movs	r2, #104	; 0x68
 80075a8:	1e4d      	subs	r5, r1, #1
 80075aa:	4355      	muls	r5, r2
 80075ac:	460e      	mov	r6, r1
 80075ae:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80075b2:	f000 f997 	bl	80078e4 <_malloc_r>
 80075b6:	4604      	mov	r4, r0
 80075b8:	b140      	cbz	r0, 80075cc <__sfmoreglue+0x28>
 80075ba:	2100      	movs	r1, #0
 80075bc:	e9c0 1600 	strd	r1, r6, [r0]
 80075c0:	300c      	adds	r0, #12
 80075c2:	60a0      	str	r0, [r4, #8]
 80075c4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80075c8:	f7ff fdaa 	bl	8007120 <memset>
 80075cc:	4620      	mov	r0, r4
 80075ce:	bd70      	pop	{r4, r5, r6, pc}

080075d0 <__sfp_lock_acquire>:
 80075d0:	4801      	ldr	r0, [pc, #4]	; (80075d8 <__sfp_lock_acquire+0x8>)
 80075d2:	f000 b8b3 	b.w	800773c <__retarget_lock_acquire_recursive>
 80075d6:	bf00      	nop
 80075d8:	200054ed 	.word	0x200054ed

080075dc <__sfp_lock_release>:
 80075dc:	4801      	ldr	r0, [pc, #4]	; (80075e4 <__sfp_lock_release+0x8>)
 80075de:	f000 b8ae 	b.w	800773e <__retarget_lock_release_recursive>
 80075e2:	bf00      	nop
 80075e4:	200054ed 	.word	0x200054ed

080075e8 <__sinit_lock_acquire>:
 80075e8:	4801      	ldr	r0, [pc, #4]	; (80075f0 <__sinit_lock_acquire+0x8>)
 80075ea:	f000 b8a7 	b.w	800773c <__retarget_lock_acquire_recursive>
 80075ee:	bf00      	nop
 80075f0:	200054ee 	.word	0x200054ee

080075f4 <__sinit_lock_release>:
 80075f4:	4801      	ldr	r0, [pc, #4]	; (80075fc <__sinit_lock_release+0x8>)
 80075f6:	f000 b8a2 	b.w	800773e <__retarget_lock_release_recursive>
 80075fa:	bf00      	nop
 80075fc:	200054ee 	.word	0x200054ee

08007600 <__sinit>:
 8007600:	b510      	push	{r4, lr}
 8007602:	4604      	mov	r4, r0
 8007604:	f7ff fff0 	bl	80075e8 <__sinit_lock_acquire>
 8007608:	69a3      	ldr	r3, [r4, #24]
 800760a:	b11b      	cbz	r3, 8007614 <__sinit+0x14>
 800760c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007610:	f7ff bff0 	b.w	80075f4 <__sinit_lock_release>
 8007614:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007618:	6523      	str	r3, [r4, #80]	; 0x50
 800761a:	4b13      	ldr	r3, [pc, #76]	; (8007668 <__sinit+0x68>)
 800761c:	4a13      	ldr	r2, [pc, #76]	; (800766c <__sinit+0x6c>)
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	62a2      	str	r2, [r4, #40]	; 0x28
 8007622:	42a3      	cmp	r3, r4
 8007624:	bf04      	itt	eq
 8007626:	2301      	moveq	r3, #1
 8007628:	61a3      	streq	r3, [r4, #24]
 800762a:	4620      	mov	r0, r4
 800762c:	f000 f820 	bl	8007670 <__sfp>
 8007630:	6060      	str	r0, [r4, #4]
 8007632:	4620      	mov	r0, r4
 8007634:	f000 f81c 	bl	8007670 <__sfp>
 8007638:	60a0      	str	r0, [r4, #8]
 800763a:	4620      	mov	r0, r4
 800763c:	f000 f818 	bl	8007670 <__sfp>
 8007640:	2200      	movs	r2, #0
 8007642:	60e0      	str	r0, [r4, #12]
 8007644:	2104      	movs	r1, #4
 8007646:	6860      	ldr	r0, [r4, #4]
 8007648:	f7ff ff82 	bl	8007550 <std>
 800764c:	68a0      	ldr	r0, [r4, #8]
 800764e:	2201      	movs	r2, #1
 8007650:	2109      	movs	r1, #9
 8007652:	f7ff ff7d 	bl	8007550 <std>
 8007656:	68e0      	ldr	r0, [r4, #12]
 8007658:	2202      	movs	r2, #2
 800765a:	2112      	movs	r1, #18
 800765c:	f7ff ff78 	bl	8007550 <std>
 8007660:	2301      	movs	r3, #1
 8007662:	61a3      	str	r3, [r4, #24]
 8007664:	e7d2      	b.n	800760c <__sinit+0xc>
 8007666:	bf00      	nop
 8007668:	080085dc 	.word	0x080085dc
 800766c:	08007599 	.word	0x08007599

08007670 <__sfp>:
 8007670:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007672:	4607      	mov	r7, r0
 8007674:	f7ff ffac 	bl	80075d0 <__sfp_lock_acquire>
 8007678:	4b1e      	ldr	r3, [pc, #120]	; (80076f4 <__sfp+0x84>)
 800767a:	681e      	ldr	r6, [r3, #0]
 800767c:	69b3      	ldr	r3, [r6, #24]
 800767e:	b913      	cbnz	r3, 8007686 <__sfp+0x16>
 8007680:	4630      	mov	r0, r6
 8007682:	f7ff ffbd 	bl	8007600 <__sinit>
 8007686:	3648      	adds	r6, #72	; 0x48
 8007688:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800768c:	3b01      	subs	r3, #1
 800768e:	d503      	bpl.n	8007698 <__sfp+0x28>
 8007690:	6833      	ldr	r3, [r6, #0]
 8007692:	b30b      	cbz	r3, 80076d8 <__sfp+0x68>
 8007694:	6836      	ldr	r6, [r6, #0]
 8007696:	e7f7      	b.n	8007688 <__sfp+0x18>
 8007698:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800769c:	b9d5      	cbnz	r5, 80076d4 <__sfp+0x64>
 800769e:	4b16      	ldr	r3, [pc, #88]	; (80076f8 <__sfp+0x88>)
 80076a0:	60e3      	str	r3, [r4, #12]
 80076a2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80076a6:	6665      	str	r5, [r4, #100]	; 0x64
 80076a8:	f000 f847 	bl	800773a <__retarget_lock_init_recursive>
 80076ac:	f7ff ff96 	bl	80075dc <__sfp_lock_release>
 80076b0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80076b4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80076b8:	6025      	str	r5, [r4, #0]
 80076ba:	61a5      	str	r5, [r4, #24]
 80076bc:	2208      	movs	r2, #8
 80076be:	4629      	mov	r1, r5
 80076c0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80076c4:	f7ff fd2c 	bl	8007120 <memset>
 80076c8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80076cc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80076d0:	4620      	mov	r0, r4
 80076d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80076d4:	3468      	adds	r4, #104	; 0x68
 80076d6:	e7d9      	b.n	800768c <__sfp+0x1c>
 80076d8:	2104      	movs	r1, #4
 80076da:	4638      	mov	r0, r7
 80076dc:	f7ff ff62 	bl	80075a4 <__sfmoreglue>
 80076e0:	4604      	mov	r4, r0
 80076e2:	6030      	str	r0, [r6, #0]
 80076e4:	2800      	cmp	r0, #0
 80076e6:	d1d5      	bne.n	8007694 <__sfp+0x24>
 80076e8:	f7ff ff78 	bl	80075dc <__sfp_lock_release>
 80076ec:	230c      	movs	r3, #12
 80076ee:	603b      	str	r3, [r7, #0]
 80076f0:	e7ee      	b.n	80076d0 <__sfp+0x60>
 80076f2:	bf00      	nop
 80076f4:	080085dc 	.word	0x080085dc
 80076f8:	ffff0001 	.word	0xffff0001

080076fc <_fwalk_reent>:
 80076fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007700:	4606      	mov	r6, r0
 8007702:	4688      	mov	r8, r1
 8007704:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007708:	2700      	movs	r7, #0
 800770a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800770e:	f1b9 0901 	subs.w	r9, r9, #1
 8007712:	d505      	bpl.n	8007720 <_fwalk_reent+0x24>
 8007714:	6824      	ldr	r4, [r4, #0]
 8007716:	2c00      	cmp	r4, #0
 8007718:	d1f7      	bne.n	800770a <_fwalk_reent+0xe>
 800771a:	4638      	mov	r0, r7
 800771c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007720:	89ab      	ldrh	r3, [r5, #12]
 8007722:	2b01      	cmp	r3, #1
 8007724:	d907      	bls.n	8007736 <_fwalk_reent+0x3a>
 8007726:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800772a:	3301      	adds	r3, #1
 800772c:	d003      	beq.n	8007736 <_fwalk_reent+0x3a>
 800772e:	4629      	mov	r1, r5
 8007730:	4630      	mov	r0, r6
 8007732:	47c0      	blx	r8
 8007734:	4307      	orrs	r7, r0
 8007736:	3568      	adds	r5, #104	; 0x68
 8007738:	e7e9      	b.n	800770e <_fwalk_reent+0x12>

0800773a <__retarget_lock_init_recursive>:
 800773a:	4770      	bx	lr

0800773c <__retarget_lock_acquire_recursive>:
 800773c:	4770      	bx	lr

0800773e <__retarget_lock_release_recursive>:
 800773e:	4770      	bx	lr

08007740 <__swhatbuf_r>:
 8007740:	b570      	push	{r4, r5, r6, lr}
 8007742:	460e      	mov	r6, r1
 8007744:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007748:	2900      	cmp	r1, #0
 800774a:	b096      	sub	sp, #88	; 0x58
 800774c:	4614      	mov	r4, r2
 800774e:	461d      	mov	r5, r3
 8007750:	da08      	bge.n	8007764 <__swhatbuf_r+0x24>
 8007752:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8007756:	2200      	movs	r2, #0
 8007758:	602a      	str	r2, [r5, #0]
 800775a:	061a      	lsls	r2, r3, #24
 800775c:	d410      	bmi.n	8007780 <__swhatbuf_r+0x40>
 800775e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007762:	e00e      	b.n	8007782 <__swhatbuf_r+0x42>
 8007764:	466a      	mov	r2, sp
 8007766:	f000 fc95 	bl	8008094 <_fstat_r>
 800776a:	2800      	cmp	r0, #0
 800776c:	dbf1      	blt.n	8007752 <__swhatbuf_r+0x12>
 800776e:	9a01      	ldr	r2, [sp, #4]
 8007770:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007774:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007778:	425a      	negs	r2, r3
 800777a:	415a      	adcs	r2, r3
 800777c:	602a      	str	r2, [r5, #0]
 800777e:	e7ee      	b.n	800775e <__swhatbuf_r+0x1e>
 8007780:	2340      	movs	r3, #64	; 0x40
 8007782:	2000      	movs	r0, #0
 8007784:	6023      	str	r3, [r4, #0]
 8007786:	b016      	add	sp, #88	; 0x58
 8007788:	bd70      	pop	{r4, r5, r6, pc}
	...

0800778c <__smakebuf_r>:
 800778c:	898b      	ldrh	r3, [r1, #12]
 800778e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007790:	079d      	lsls	r5, r3, #30
 8007792:	4606      	mov	r6, r0
 8007794:	460c      	mov	r4, r1
 8007796:	d507      	bpl.n	80077a8 <__smakebuf_r+0x1c>
 8007798:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800779c:	6023      	str	r3, [r4, #0]
 800779e:	6123      	str	r3, [r4, #16]
 80077a0:	2301      	movs	r3, #1
 80077a2:	6163      	str	r3, [r4, #20]
 80077a4:	b002      	add	sp, #8
 80077a6:	bd70      	pop	{r4, r5, r6, pc}
 80077a8:	ab01      	add	r3, sp, #4
 80077aa:	466a      	mov	r2, sp
 80077ac:	f7ff ffc8 	bl	8007740 <__swhatbuf_r>
 80077b0:	9900      	ldr	r1, [sp, #0]
 80077b2:	4605      	mov	r5, r0
 80077b4:	4630      	mov	r0, r6
 80077b6:	f000 f895 	bl	80078e4 <_malloc_r>
 80077ba:	b948      	cbnz	r0, 80077d0 <__smakebuf_r+0x44>
 80077bc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80077c0:	059a      	lsls	r2, r3, #22
 80077c2:	d4ef      	bmi.n	80077a4 <__smakebuf_r+0x18>
 80077c4:	f023 0303 	bic.w	r3, r3, #3
 80077c8:	f043 0302 	orr.w	r3, r3, #2
 80077cc:	81a3      	strh	r3, [r4, #12]
 80077ce:	e7e3      	b.n	8007798 <__smakebuf_r+0xc>
 80077d0:	4b0d      	ldr	r3, [pc, #52]	; (8007808 <__smakebuf_r+0x7c>)
 80077d2:	62b3      	str	r3, [r6, #40]	; 0x28
 80077d4:	89a3      	ldrh	r3, [r4, #12]
 80077d6:	6020      	str	r0, [r4, #0]
 80077d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80077dc:	81a3      	strh	r3, [r4, #12]
 80077de:	9b00      	ldr	r3, [sp, #0]
 80077e0:	6163      	str	r3, [r4, #20]
 80077e2:	9b01      	ldr	r3, [sp, #4]
 80077e4:	6120      	str	r0, [r4, #16]
 80077e6:	b15b      	cbz	r3, 8007800 <__smakebuf_r+0x74>
 80077e8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80077ec:	4630      	mov	r0, r6
 80077ee:	f000 fc63 	bl	80080b8 <_isatty_r>
 80077f2:	b128      	cbz	r0, 8007800 <__smakebuf_r+0x74>
 80077f4:	89a3      	ldrh	r3, [r4, #12]
 80077f6:	f023 0303 	bic.w	r3, r3, #3
 80077fa:	f043 0301 	orr.w	r3, r3, #1
 80077fe:	81a3      	strh	r3, [r4, #12]
 8007800:	89a0      	ldrh	r0, [r4, #12]
 8007802:	4305      	orrs	r5, r0
 8007804:	81a5      	strh	r5, [r4, #12]
 8007806:	e7cd      	b.n	80077a4 <__smakebuf_r+0x18>
 8007808:	08007599 	.word	0x08007599

0800780c <_free_r>:
 800780c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800780e:	2900      	cmp	r1, #0
 8007810:	d044      	beq.n	800789c <_free_r+0x90>
 8007812:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007816:	9001      	str	r0, [sp, #4]
 8007818:	2b00      	cmp	r3, #0
 800781a:	f1a1 0404 	sub.w	r4, r1, #4
 800781e:	bfb8      	it	lt
 8007820:	18e4      	addlt	r4, r4, r3
 8007822:	f000 fc6b 	bl	80080fc <__malloc_lock>
 8007826:	4a1e      	ldr	r2, [pc, #120]	; (80078a0 <_free_r+0x94>)
 8007828:	9801      	ldr	r0, [sp, #4]
 800782a:	6813      	ldr	r3, [r2, #0]
 800782c:	b933      	cbnz	r3, 800783c <_free_r+0x30>
 800782e:	6063      	str	r3, [r4, #4]
 8007830:	6014      	str	r4, [r2, #0]
 8007832:	b003      	add	sp, #12
 8007834:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007838:	f000 bc66 	b.w	8008108 <__malloc_unlock>
 800783c:	42a3      	cmp	r3, r4
 800783e:	d908      	bls.n	8007852 <_free_r+0x46>
 8007840:	6825      	ldr	r5, [r4, #0]
 8007842:	1961      	adds	r1, r4, r5
 8007844:	428b      	cmp	r3, r1
 8007846:	bf01      	itttt	eq
 8007848:	6819      	ldreq	r1, [r3, #0]
 800784a:	685b      	ldreq	r3, [r3, #4]
 800784c:	1949      	addeq	r1, r1, r5
 800784e:	6021      	streq	r1, [r4, #0]
 8007850:	e7ed      	b.n	800782e <_free_r+0x22>
 8007852:	461a      	mov	r2, r3
 8007854:	685b      	ldr	r3, [r3, #4]
 8007856:	b10b      	cbz	r3, 800785c <_free_r+0x50>
 8007858:	42a3      	cmp	r3, r4
 800785a:	d9fa      	bls.n	8007852 <_free_r+0x46>
 800785c:	6811      	ldr	r1, [r2, #0]
 800785e:	1855      	adds	r5, r2, r1
 8007860:	42a5      	cmp	r5, r4
 8007862:	d10b      	bne.n	800787c <_free_r+0x70>
 8007864:	6824      	ldr	r4, [r4, #0]
 8007866:	4421      	add	r1, r4
 8007868:	1854      	adds	r4, r2, r1
 800786a:	42a3      	cmp	r3, r4
 800786c:	6011      	str	r1, [r2, #0]
 800786e:	d1e0      	bne.n	8007832 <_free_r+0x26>
 8007870:	681c      	ldr	r4, [r3, #0]
 8007872:	685b      	ldr	r3, [r3, #4]
 8007874:	6053      	str	r3, [r2, #4]
 8007876:	4421      	add	r1, r4
 8007878:	6011      	str	r1, [r2, #0]
 800787a:	e7da      	b.n	8007832 <_free_r+0x26>
 800787c:	d902      	bls.n	8007884 <_free_r+0x78>
 800787e:	230c      	movs	r3, #12
 8007880:	6003      	str	r3, [r0, #0]
 8007882:	e7d6      	b.n	8007832 <_free_r+0x26>
 8007884:	6825      	ldr	r5, [r4, #0]
 8007886:	1961      	adds	r1, r4, r5
 8007888:	428b      	cmp	r3, r1
 800788a:	bf04      	itt	eq
 800788c:	6819      	ldreq	r1, [r3, #0]
 800788e:	685b      	ldreq	r3, [r3, #4]
 8007890:	6063      	str	r3, [r4, #4]
 8007892:	bf04      	itt	eq
 8007894:	1949      	addeq	r1, r1, r5
 8007896:	6021      	streq	r1, [r4, #0]
 8007898:	6054      	str	r4, [r2, #4]
 800789a:	e7ca      	b.n	8007832 <_free_r+0x26>
 800789c:	b003      	add	sp, #12
 800789e:	bd30      	pop	{r4, r5, pc}
 80078a0:	200054f0 	.word	0x200054f0

080078a4 <sbrk_aligned>:
 80078a4:	b570      	push	{r4, r5, r6, lr}
 80078a6:	4e0e      	ldr	r6, [pc, #56]	; (80078e0 <sbrk_aligned+0x3c>)
 80078a8:	460c      	mov	r4, r1
 80078aa:	6831      	ldr	r1, [r6, #0]
 80078ac:	4605      	mov	r5, r0
 80078ae:	b911      	cbnz	r1, 80078b6 <sbrk_aligned+0x12>
 80078b0:	f000 fb7a 	bl	8007fa8 <_sbrk_r>
 80078b4:	6030      	str	r0, [r6, #0]
 80078b6:	4621      	mov	r1, r4
 80078b8:	4628      	mov	r0, r5
 80078ba:	f000 fb75 	bl	8007fa8 <_sbrk_r>
 80078be:	1c43      	adds	r3, r0, #1
 80078c0:	d00a      	beq.n	80078d8 <sbrk_aligned+0x34>
 80078c2:	1cc4      	adds	r4, r0, #3
 80078c4:	f024 0403 	bic.w	r4, r4, #3
 80078c8:	42a0      	cmp	r0, r4
 80078ca:	d007      	beq.n	80078dc <sbrk_aligned+0x38>
 80078cc:	1a21      	subs	r1, r4, r0
 80078ce:	4628      	mov	r0, r5
 80078d0:	f000 fb6a 	bl	8007fa8 <_sbrk_r>
 80078d4:	3001      	adds	r0, #1
 80078d6:	d101      	bne.n	80078dc <sbrk_aligned+0x38>
 80078d8:	f04f 34ff 	mov.w	r4, #4294967295
 80078dc:	4620      	mov	r0, r4
 80078de:	bd70      	pop	{r4, r5, r6, pc}
 80078e0:	200054f4 	.word	0x200054f4

080078e4 <_malloc_r>:
 80078e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80078e8:	1ccd      	adds	r5, r1, #3
 80078ea:	f025 0503 	bic.w	r5, r5, #3
 80078ee:	3508      	adds	r5, #8
 80078f0:	2d0c      	cmp	r5, #12
 80078f2:	bf38      	it	cc
 80078f4:	250c      	movcc	r5, #12
 80078f6:	2d00      	cmp	r5, #0
 80078f8:	4607      	mov	r7, r0
 80078fa:	db01      	blt.n	8007900 <_malloc_r+0x1c>
 80078fc:	42a9      	cmp	r1, r5
 80078fe:	d905      	bls.n	800790c <_malloc_r+0x28>
 8007900:	230c      	movs	r3, #12
 8007902:	603b      	str	r3, [r7, #0]
 8007904:	2600      	movs	r6, #0
 8007906:	4630      	mov	r0, r6
 8007908:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800790c:	4e2e      	ldr	r6, [pc, #184]	; (80079c8 <_malloc_r+0xe4>)
 800790e:	f000 fbf5 	bl	80080fc <__malloc_lock>
 8007912:	6833      	ldr	r3, [r6, #0]
 8007914:	461c      	mov	r4, r3
 8007916:	bb34      	cbnz	r4, 8007966 <_malloc_r+0x82>
 8007918:	4629      	mov	r1, r5
 800791a:	4638      	mov	r0, r7
 800791c:	f7ff ffc2 	bl	80078a4 <sbrk_aligned>
 8007920:	1c43      	adds	r3, r0, #1
 8007922:	4604      	mov	r4, r0
 8007924:	d14d      	bne.n	80079c2 <_malloc_r+0xde>
 8007926:	6834      	ldr	r4, [r6, #0]
 8007928:	4626      	mov	r6, r4
 800792a:	2e00      	cmp	r6, #0
 800792c:	d140      	bne.n	80079b0 <_malloc_r+0xcc>
 800792e:	6823      	ldr	r3, [r4, #0]
 8007930:	4631      	mov	r1, r6
 8007932:	4638      	mov	r0, r7
 8007934:	eb04 0803 	add.w	r8, r4, r3
 8007938:	f000 fb36 	bl	8007fa8 <_sbrk_r>
 800793c:	4580      	cmp	r8, r0
 800793e:	d13a      	bne.n	80079b6 <_malloc_r+0xd2>
 8007940:	6821      	ldr	r1, [r4, #0]
 8007942:	3503      	adds	r5, #3
 8007944:	1a6d      	subs	r5, r5, r1
 8007946:	f025 0503 	bic.w	r5, r5, #3
 800794a:	3508      	adds	r5, #8
 800794c:	2d0c      	cmp	r5, #12
 800794e:	bf38      	it	cc
 8007950:	250c      	movcc	r5, #12
 8007952:	4629      	mov	r1, r5
 8007954:	4638      	mov	r0, r7
 8007956:	f7ff ffa5 	bl	80078a4 <sbrk_aligned>
 800795a:	3001      	adds	r0, #1
 800795c:	d02b      	beq.n	80079b6 <_malloc_r+0xd2>
 800795e:	6823      	ldr	r3, [r4, #0]
 8007960:	442b      	add	r3, r5
 8007962:	6023      	str	r3, [r4, #0]
 8007964:	e00e      	b.n	8007984 <_malloc_r+0xa0>
 8007966:	6822      	ldr	r2, [r4, #0]
 8007968:	1b52      	subs	r2, r2, r5
 800796a:	d41e      	bmi.n	80079aa <_malloc_r+0xc6>
 800796c:	2a0b      	cmp	r2, #11
 800796e:	d916      	bls.n	800799e <_malloc_r+0xba>
 8007970:	1961      	adds	r1, r4, r5
 8007972:	42a3      	cmp	r3, r4
 8007974:	6025      	str	r5, [r4, #0]
 8007976:	bf18      	it	ne
 8007978:	6059      	strne	r1, [r3, #4]
 800797a:	6863      	ldr	r3, [r4, #4]
 800797c:	bf08      	it	eq
 800797e:	6031      	streq	r1, [r6, #0]
 8007980:	5162      	str	r2, [r4, r5]
 8007982:	604b      	str	r3, [r1, #4]
 8007984:	4638      	mov	r0, r7
 8007986:	f104 060b 	add.w	r6, r4, #11
 800798a:	f000 fbbd 	bl	8008108 <__malloc_unlock>
 800798e:	f026 0607 	bic.w	r6, r6, #7
 8007992:	1d23      	adds	r3, r4, #4
 8007994:	1af2      	subs	r2, r6, r3
 8007996:	d0b6      	beq.n	8007906 <_malloc_r+0x22>
 8007998:	1b9b      	subs	r3, r3, r6
 800799a:	50a3      	str	r3, [r4, r2]
 800799c:	e7b3      	b.n	8007906 <_malloc_r+0x22>
 800799e:	6862      	ldr	r2, [r4, #4]
 80079a0:	42a3      	cmp	r3, r4
 80079a2:	bf0c      	ite	eq
 80079a4:	6032      	streq	r2, [r6, #0]
 80079a6:	605a      	strne	r2, [r3, #4]
 80079a8:	e7ec      	b.n	8007984 <_malloc_r+0xa0>
 80079aa:	4623      	mov	r3, r4
 80079ac:	6864      	ldr	r4, [r4, #4]
 80079ae:	e7b2      	b.n	8007916 <_malloc_r+0x32>
 80079b0:	4634      	mov	r4, r6
 80079b2:	6876      	ldr	r6, [r6, #4]
 80079b4:	e7b9      	b.n	800792a <_malloc_r+0x46>
 80079b6:	230c      	movs	r3, #12
 80079b8:	603b      	str	r3, [r7, #0]
 80079ba:	4638      	mov	r0, r7
 80079bc:	f000 fba4 	bl	8008108 <__malloc_unlock>
 80079c0:	e7a1      	b.n	8007906 <_malloc_r+0x22>
 80079c2:	6025      	str	r5, [r4, #0]
 80079c4:	e7de      	b.n	8007984 <_malloc_r+0xa0>
 80079c6:	bf00      	nop
 80079c8:	200054f0 	.word	0x200054f0

080079cc <__sfputc_r>:
 80079cc:	6893      	ldr	r3, [r2, #8]
 80079ce:	3b01      	subs	r3, #1
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	b410      	push	{r4}
 80079d4:	6093      	str	r3, [r2, #8]
 80079d6:	da08      	bge.n	80079ea <__sfputc_r+0x1e>
 80079d8:	6994      	ldr	r4, [r2, #24]
 80079da:	42a3      	cmp	r3, r4
 80079dc:	db01      	blt.n	80079e2 <__sfputc_r+0x16>
 80079de:	290a      	cmp	r1, #10
 80079e0:	d103      	bne.n	80079ea <__sfputc_r+0x1e>
 80079e2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80079e6:	f7ff bc31 	b.w	800724c <__swbuf_r>
 80079ea:	6813      	ldr	r3, [r2, #0]
 80079ec:	1c58      	adds	r0, r3, #1
 80079ee:	6010      	str	r0, [r2, #0]
 80079f0:	7019      	strb	r1, [r3, #0]
 80079f2:	4608      	mov	r0, r1
 80079f4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80079f8:	4770      	bx	lr

080079fa <__sfputs_r>:
 80079fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079fc:	4606      	mov	r6, r0
 80079fe:	460f      	mov	r7, r1
 8007a00:	4614      	mov	r4, r2
 8007a02:	18d5      	adds	r5, r2, r3
 8007a04:	42ac      	cmp	r4, r5
 8007a06:	d101      	bne.n	8007a0c <__sfputs_r+0x12>
 8007a08:	2000      	movs	r0, #0
 8007a0a:	e007      	b.n	8007a1c <__sfputs_r+0x22>
 8007a0c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007a10:	463a      	mov	r2, r7
 8007a12:	4630      	mov	r0, r6
 8007a14:	f7ff ffda 	bl	80079cc <__sfputc_r>
 8007a18:	1c43      	adds	r3, r0, #1
 8007a1a:	d1f3      	bne.n	8007a04 <__sfputs_r+0xa>
 8007a1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007a20 <_vfiprintf_r>:
 8007a20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a24:	460d      	mov	r5, r1
 8007a26:	b09d      	sub	sp, #116	; 0x74
 8007a28:	4614      	mov	r4, r2
 8007a2a:	4698      	mov	r8, r3
 8007a2c:	4606      	mov	r6, r0
 8007a2e:	b118      	cbz	r0, 8007a38 <_vfiprintf_r+0x18>
 8007a30:	6983      	ldr	r3, [r0, #24]
 8007a32:	b90b      	cbnz	r3, 8007a38 <_vfiprintf_r+0x18>
 8007a34:	f7ff fde4 	bl	8007600 <__sinit>
 8007a38:	4b89      	ldr	r3, [pc, #548]	; (8007c60 <_vfiprintf_r+0x240>)
 8007a3a:	429d      	cmp	r5, r3
 8007a3c:	d11b      	bne.n	8007a76 <_vfiprintf_r+0x56>
 8007a3e:	6875      	ldr	r5, [r6, #4]
 8007a40:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007a42:	07d9      	lsls	r1, r3, #31
 8007a44:	d405      	bmi.n	8007a52 <_vfiprintf_r+0x32>
 8007a46:	89ab      	ldrh	r3, [r5, #12]
 8007a48:	059a      	lsls	r2, r3, #22
 8007a4a:	d402      	bmi.n	8007a52 <_vfiprintf_r+0x32>
 8007a4c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007a4e:	f7ff fe75 	bl	800773c <__retarget_lock_acquire_recursive>
 8007a52:	89ab      	ldrh	r3, [r5, #12]
 8007a54:	071b      	lsls	r3, r3, #28
 8007a56:	d501      	bpl.n	8007a5c <_vfiprintf_r+0x3c>
 8007a58:	692b      	ldr	r3, [r5, #16]
 8007a5a:	b9eb      	cbnz	r3, 8007a98 <_vfiprintf_r+0x78>
 8007a5c:	4629      	mov	r1, r5
 8007a5e:	4630      	mov	r0, r6
 8007a60:	f7ff fc46 	bl	80072f0 <__swsetup_r>
 8007a64:	b1c0      	cbz	r0, 8007a98 <_vfiprintf_r+0x78>
 8007a66:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007a68:	07dc      	lsls	r4, r3, #31
 8007a6a:	d50e      	bpl.n	8007a8a <_vfiprintf_r+0x6a>
 8007a6c:	f04f 30ff 	mov.w	r0, #4294967295
 8007a70:	b01d      	add	sp, #116	; 0x74
 8007a72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a76:	4b7b      	ldr	r3, [pc, #492]	; (8007c64 <_vfiprintf_r+0x244>)
 8007a78:	429d      	cmp	r5, r3
 8007a7a:	d101      	bne.n	8007a80 <_vfiprintf_r+0x60>
 8007a7c:	68b5      	ldr	r5, [r6, #8]
 8007a7e:	e7df      	b.n	8007a40 <_vfiprintf_r+0x20>
 8007a80:	4b79      	ldr	r3, [pc, #484]	; (8007c68 <_vfiprintf_r+0x248>)
 8007a82:	429d      	cmp	r5, r3
 8007a84:	bf08      	it	eq
 8007a86:	68f5      	ldreq	r5, [r6, #12]
 8007a88:	e7da      	b.n	8007a40 <_vfiprintf_r+0x20>
 8007a8a:	89ab      	ldrh	r3, [r5, #12]
 8007a8c:	0598      	lsls	r0, r3, #22
 8007a8e:	d4ed      	bmi.n	8007a6c <_vfiprintf_r+0x4c>
 8007a90:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007a92:	f7ff fe54 	bl	800773e <__retarget_lock_release_recursive>
 8007a96:	e7e9      	b.n	8007a6c <_vfiprintf_r+0x4c>
 8007a98:	2300      	movs	r3, #0
 8007a9a:	9309      	str	r3, [sp, #36]	; 0x24
 8007a9c:	2320      	movs	r3, #32
 8007a9e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007aa2:	f8cd 800c 	str.w	r8, [sp, #12]
 8007aa6:	2330      	movs	r3, #48	; 0x30
 8007aa8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007c6c <_vfiprintf_r+0x24c>
 8007aac:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007ab0:	f04f 0901 	mov.w	r9, #1
 8007ab4:	4623      	mov	r3, r4
 8007ab6:	469a      	mov	sl, r3
 8007ab8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007abc:	b10a      	cbz	r2, 8007ac2 <_vfiprintf_r+0xa2>
 8007abe:	2a25      	cmp	r2, #37	; 0x25
 8007ac0:	d1f9      	bne.n	8007ab6 <_vfiprintf_r+0x96>
 8007ac2:	ebba 0b04 	subs.w	fp, sl, r4
 8007ac6:	d00b      	beq.n	8007ae0 <_vfiprintf_r+0xc0>
 8007ac8:	465b      	mov	r3, fp
 8007aca:	4622      	mov	r2, r4
 8007acc:	4629      	mov	r1, r5
 8007ace:	4630      	mov	r0, r6
 8007ad0:	f7ff ff93 	bl	80079fa <__sfputs_r>
 8007ad4:	3001      	adds	r0, #1
 8007ad6:	f000 80aa 	beq.w	8007c2e <_vfiprintf_r+0x20e>
 8007ada:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007adc:	445a      	add	r2, fp
 8007ade:	9209      	str	r2, [sp, #36]	; 0x24
 8007ae0:	f89a 3000 	ldrb.w	r3, [sl]
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	f000 80a2 	beq.w	8007c2e <_vfiprintf_r+0x20e>
 8007aea:	2300      	movs	r3, #0
 8007aec:	f04f 32ff 	mov.w	r2, #4294967295
 8007af0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007af4:	f10a 0a01 	add.w	sl, sl, #1
 8007af8:	9304      	str	r3, [sp, #16]
 8007afa:	9307      	str	r3, [sp, #28]
 8007afc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007b00:	931a      	str	r3, [sp, #104]	; 0x68
 8007b02:	4654      	mov	r4, sl
 8007b04:	2205      	movs	r2, #5
 8007b06:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007b0a:	4858      	ldr	r0, [pc, #352]	; (8007c6c <_vfiprintf_r+0x24c>)
 8007b0c:	f7f8 fb80 	bl	8000210 <memchr>
 8007b10:	9a04      	ldr	r2, [sp, #16]
 8007b12:	b9d8      	cbnz	r0, 8007b4c <_vfiprintf_r+0x12c>
 8007b14:	06d1      	lsls	r1, r2, #27
 8007b16:	bf44      	itt	mi
 8007b18:	2320      	movmi	r3, #32
 8007b1a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007b1e:	0713      	lsls	r3, r2, #28
 8007b20:	bf44      	itt	mi
 8007b22:	232b      	movmi	r3, #43	; 0x2b
 8007b24:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007b28:	f89a 3000 	ldrb.w	r3, [sl]
 8007b2c:	2b2a      	cmp	r3, #42	; 0x2a
 8007b2e:	d015      	beq.n	8007b5c <_vfiprintf_r+0x13c>
 8007b30:	9a07      	ldr	r2, [sp, #28]
 8007b32:	4654      	mov	r4, sl
 8007b34:	2000      	movs	r0, #0
 8007b36:	f04f 0c0a 	mov.w	ip, #10
 8007b3a:	4621      	mov	r1, r4
 8007b3c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007b40:	3b30      	subs	r3, #48	; 0x30
 8007b42:	2b09      	cmp	r3, #9
 8007b44:	d94e      	bls.n	8007be4 <_vfiprintf_r+0x1c4>
 8007b46:	b1b0      	cbz	r0, 8007b76 <_vfiprintf_r+0x156>
 8007b48:	9207      	str	r2, [sp, #28]
 8007b4a:	e014      	b.n	8007b76 <_vfiprintf_r+0x156>
 8007b4c:	eba0 0308 	sub.w	r3, r0, r8
 8007b50:	fa09 f303 	lsl.w	r3, r9, r3
 8007b54:	4313      	orrs	r3, r2
 8007b56:	9304      	str	r3, [sp, #16]
 8007b58:	46a2      	mov	sl, r4
 8007b5a:	e7d2      	b.n	8007b02 <_vfiprintf_r+0xe2>
 8007b5c:	9b03      	ldr	r3, [sp, #12]
 8007b5e:	1d19      	adds	r1, r3, #4
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	9103      	str	r1, [sp, #12]
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	bfbb      	ittet	lt
 8007b68:	425b      	neglt	r3, r3
 8007b6a:	f042 0202 	orrlt.w	r2, r2, #2
 8007b6e:	9307      	strge	r3, [sp, #28]
 8007b70:	9307      	strlt	r3, [sp, #28]
 8007b72:	bfb8      	it	lt
 8007b74:	9204      	strlt	r2, [sp, #16]
 8007b76:	7823      	ldrb	r3, [r4, #0]
 8007b78:	2b2e      	cmp	r3, #46	; 0x2e
 8007b7a:	d10c      	bne.n	8007b96 <_vfiprintf_r+0x176>
 8007b7c:	7863      	ldrb	r3, [r4, #1]
 8007b7e:	2b2a      	cmp	r3, #42	; 0x2a
 8007b80:	d135      	bne.n	8007bee <_vfiprintf_r+0x1ce>
 8007b82:	9b03      	ldr	r3, [sp, #12]
 8007b84:	1d1a      	adds	r2, r3, #4
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	9203      	str	r2, [sp, #12]
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	bfb8      	it	lt
 8007b8e:	f04f 33ff 	movlt.w	r3, #4294967295
 8007b92:	3402      	adds	r4, #2
 8007b94:	9305      	str	r3, [sp, #20]
 8007b96:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007c7c <_vfiprintf_r+0x25c>
 8007b9a:	7821      	ldrb	r1, [r4, #0]
 8007b9c:	2203      	movs	r2, #3
 8007b9e:	4650      	mov	r0, sl
 8007ba0:	f7f8 fb36 	bl	8000210 <memchr>
 8007ba4:	b140      	cbz	r0, 8007bb8 <_vfiprintf_r+0x198>
 8007ba6:	2340      	movs	r3, #64	; 0x40
 8007ba8:	eba0 000a 	sub.w	r0, r0, sl
 8007bac:	fa03 f000 	lsl.w	r0, r3, r0
 8007bb0:	9b04      	ldr	r3, [sp, #16]
 8007bb2:	4303      	orrs	r3, r0
 8007bb4:	3401      	adds	r4, #1
 8007bb6:	9304      	str	r3, [sp, #16]
 8007bb8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007bbc:	482c      	ldr	r0, [pc, #176]	; (8007c70 <_vfiprintf_r+0x250>)
 8007bbe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007bc2:	2206      	movs	r2, #6
 8007bc4:	f7f8 fb24 	bl	8000210 <memchr>
 8007bc8:	2800      	cmp	r0, #0
 8007bca:	d03f      	beq.n	8007c4c <_vfiprintf_r+0x22c>
 8007bcc:	4b29      	ldr	r3, [pc, #164]	; (8007c74 <_vfiprintf_r+0x254>)
 8007bce:	bb1b      	cbnz	r3, 8007c18 <_vfiprintf_r+0x1f8>
 8007bd0:	9b03      	ldr	r3, [sp, #12]
 8007bd2:	3307      	adds	r3, #7
 8007bd4:	f023 0307 	bic.w	r3, r3, #7
 8007bd8:	3308      	adds	r3, #8
 8007bda:	9303      	str	r3, [sp, #12]
 8007bdc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007bde:	443b      	add	r3, r7
 8007be0:	9309      	str	r3, [sp, #36]	; 0x24
 8007be2:	e767      	b.n	8007ab4 <_vfiprintf_r+0x94>
 8007be4:	fb0c 3202 	mla	r2, ip, r2, r3
 8007be8:	460c      	mov	r4, r1
 8007bea:	2001      	movs	r0, #1
 8007bec:	e7a5      	b.n	8007b3a <_vfiprintf_r+0x11a>
 8007bee:	2300      	movs	r3, #0
 8007bf0:	3401      	adds	r4, #1
 8007bf2:	9305      	str	r3, [sp, #20]
 8007bf4:	4619      	mov	r1, r3
 8007bf6:	f04f 0c0a 	mov.w	ip, #10
 8007bfa:	4620      	mov	r0, r4
 8007bfc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007c00:	3a30      	subs	r2, #48	; 0x30
 8007c02:	2a09      	cmp	r2, #9
 8007c04:	d903      	bls.n	8007c0e <_vfiprintf_r+0x1ee>
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d0c5      	beq.n	8007b96 <_vfiprintf_r+0x176>
 8007c0a:	9105      	str	r1, [sp, #20]
 8007c0c:	e7c3      	b.n	8007b96 <_vfiprintf_r+0x176>
 8007c0e:	fb0c 2101 	mla	r1, ip, r1, r2
 8007c12:	4604      	mov	r4, r0
 8007c14:	2301      	movs	r3, #1
 8007c16:	e7f0      	b.n	8007bfa <_vfiprintf_r+0x1da>
 8007c18:	ab03      	add	r3, sp, #12
 8007c1a:	9300      	str	r3, [sp, #0]
 8007c1c:	462a      	mov	r2, r5
 8007c1e:	4b16      	ldr	r3, [pc, #88]	; (8007c78 <_vfiprintf_r+0x258>)
 8007c20:	a904      	add	r1, sp, #16
 8007c22:	4630      	mov	r0, r6
 8007c24:	f3af 8000 	nop.w
 8007c28:	4607      	mov	r7, r0
 8007c2a:	1c78      	adds	r0, r7, #1
 8007c2c:	d1d6      	bne.n	8007bdc <_vfiprintf_r+0x1bc>
 8007c2e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007c30:	07d9      	lsls	r1, r3, #31
 8007c32:	d405      	bmi.n	8007c40 <_vfiprintf_r+0x220>
 8007c34:	89ab      	ldrh	r3, [r5, #12]
 8007c36:	059a      	lsls	r2, r3, #22
 8007c38:	d402      	bmi.n	8007c40 <_vfiprintf_r+0x220>
 8007c3a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007c3c:	f7ff fd7f 	bl	800773e <__retarget_lock_release_recursive>
 8007c40:	89ab      	ldrh	r3, [r5, #12]
 8007c42:	065b      	lsls	r3, r3, #25
 8007c44:	f53f af12 	bmi.w	8007a6c <_vfiprintf_r+0x4c>
 8007c48:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007c4a:	e711      	b.n	8007a70 <_vfiprintf_r+0x50>
 8007c4c:	ab03      	add	r3, sp, #12
 8007c4e:	9300      	str	r3, [sp, #0]
 8007c50:	462a      	mov	r2, r5
 8007c52:	4b09      	ldr	r3, [pc, #36]	; (8007c78 <_vfiprintf_r+0x258>)
 8007c54:	a904      	add	r1, sp, #16
 8007c56:	4630      	mov	r0, r6
 8007c58:	f000 f880 	bl	8007d5c <_printf_i>
 8007c5c:	e7e4      	b.n	8007c28 <_vfiprintf_r+0x208>
 8007c5e:	bf00      	nop
 8007c60:	08008600 	.word	0x08008600
 8007c64:	08008620 	.word	0x08008620
 8007c68:	080085e0 	.word	0x080085e0
 8007c6c:	08008640 	.word	0x08008640
 8007c70:	0800864a 	.word	0x0800864a
 8007c74:	00000000 	.word	0x00000000
 8007c78:	080079fb 	.word	0x080079fb
 8007c7c:	08008646 	.word	0x08008646

08007c80 <_printf_common>:
 8007c80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007c84:	4616      	mov	r6, r2
 8007c86:	4699      	mov	r9, r3
 8007c88:	688a      	ldr	r2, [r1, #8]
 8007c8a:	690b      	ldr	r3, [r1, #16]
 8007c8c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007c90:	4293      	cmp	r3, r2
 8007c92:	bfb8      	it	lt
 8007c94:	4613      	movlt	r3, r2
 8007c96:	6033      	str	r3, [r6, #0]
 8007c98:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007c9c:	4607      	mov	r7, r0
 8007c9e:	460c      	mov	r4, r1
 8007ca0:	b10a      	cbz	r2, 8007ca6 <_printf_common+0x26>
 8007ca2:	3301      	adds	r3, #1
 8007ca4:	6033      	str	r3, [r6, #0]
 8007ca6:	6823      	ldr	r3, [r4, #0]
 8007ca8:	0699      	lsls	r1, r3, #26
 8007caa:	bf42      	ittt	mi
 8007cac:	6833      	ldrmi	r3, [r6, #0]
 8007cae:	3302      	addmi	r3, #2
 8007cb0:	6033      	strmi	r3, [r6, #0]
 8007cb2:	6825      	ldr	r5, [r4, #0]
 8007cb4:	f015 0506 	ands.w	r5, r5, #6
 8007cb8:	d106      	bne.n	8007cc8 <_printf_common+0x48>
 8007cba:	f104 0a19 	add.w	sl, r4, #25
 8007cbe:	68e3      	ldr	r3, [r4, #12]
 8007cc0:	6832      	ldr	r2, [r6, #0]
 8007cc2:	1a9b      	subs	r3, r3, r2
 8007cc4:	42ab      	cmp	r3, r5
 8007cc6:	dc26      	bgt.n	8007d16 <_printf_common+0x96>
 8007cc8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007ccc:	1e13      	subs	r3, r2, #0
 8007cce:	6822      	ldr	r2, [r4, #0]
 8007cd0:	bf18      	it	ne
 8007cd2:	2301      	movne	r3, #1
 8007cd4:	0692      	lsls	r2, r2, #26
 8007cd6:	d42b      	bmi.n	8007d30 <_printf_common+0xb0>
 8007cd8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007cdc:	4649      	mov	r1, r9
 8007cde:	4638      	mov	r0, r7
 8007ce0:	47c0      	blx	r8
 8007ce2:	3001      	adds	r0, #1
 8007ce4:	d01e      	beq.n	8007d24 <_printf_common+0xa4>
 8007ce6:	6823      	ldr	r3, [r4, #0]
 8007ce8:	68e5      	ldr	r5, [r4, #12]
 8007cea:	6832      	ldr	r2, [r6, #0]
 8007cec:	f003 0306 	and.w	r3, r3, #6
 8007cf0:	2b04      	cmp	r3, #4
 8007cf2:	bf08      	it	eq
 8007cf4:	1aad      	subeq	r5, r5, r2
 8007cf6:	68a3      	ldr	r3, [r4, #8]
 8007cf8:	6922      	ldr	r2, [r4, #16]
 8007cfa:	bf0c      	ite	eq
 8007cfc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007d00:	2500      	movne	r5, #0
 8007d02:	4293      	cmp	r3, r2
 8007d04:	bfc4      	itt	gt
 8007d06:	1a9b      	subgt	r3, r3, r2
 8007d08:	18ed      	addgt	r5, r5, r3
 8007d0a:	2600      	movs	r6, #0
 8007d0c:	341a      	adds	r4, #26
 8007d0e:	42b5      	cmp	r5, r6
 8007d10:	d11a      	bne.n	8007d48 <_printf_common+0xc8>
 8007d12:	2000      	movs	r0, #0
 8007d14:	e008      	b.n	8007d28 <_printf_common+0xa8>
 8007d16:	2301      	movs	r3, #1
 8007d18:	4652      	mov	r2, sl
 8007d1a:	4649      	mov	r1, r9
 8007d1c:	4638      	mov	r0, r7
 8007d1e:	47c0      	blx	r8
 8007d20:	3001      	adds	r0, #1
 8007d22:	d103      	bne.n	8007d2c <_printf_common+0xac>
 8007d24:	f04f 30ff 	mov.w	r0, #4294967295
 8007d28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d2c:	3501      	adds	r5, #1
 8007d2e:	e7c6      	b.n	8007cbe <_printf_common+0x3e>
 8007d30:	18e1      	adds	r1, r4, r3
 8007d32:	1c5a      	adds	r2, r3, #1
 8007d34:	2030      	movs	r0, #48	; 0x30
 8007d36:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007d3a:	4422      	add	r2, r4
 8007d3c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007d40:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007d44:	3302      	adds	r3, #2
 8007d46:	e7c7      	b.n	8007cd8 <_printf_common+0x58>
 8007d48:	2301      	movs	r3, #1
 8007d4a:	4622      	mov	r2, r4
 8007d4c:	4649      	mov	r1, r9
 8007d4e:	4638      	mov	r0, r7
 8007d50:	47c0      	blx	r8
 8007d52:	3001      	adds	r0, #1
 8007d54:	d0e6      	beq.n	8007d24 <_printf_common+0xa4>
 8007d56:	3601      	adds	r6, #1
 8007d58:	e7d9      	b.n	8007d0e <_printf_common+0x8e>
	...

08007d5c <_printf_i>:
 8007d5c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007d60:	7e0f      	ldrb	r7, [r1, #24]
 8007d62:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007d64:	2f78      	cmp	r7, #120	; 0x78
 8007d66:	4691      	mov	r9, r2
 8007d68:	4680      	mov	r8, r0
 8007d6a:	460c      	mov	r4, r1
 8007d6c:	469a      	mov	sl, r3
 8007d6e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007d72:	d807      	bhi.n	8007d84 <_printf_i+0x28>
 8007d74:	2f62      	cmp	r7, #98	; 0x62
 8007d76:	d80a      	bhi.n	8007d8e <_printf_i+0x32>
 8007d78:	2f00      	cmp	r7, #0
 8007d7a:	f000 80d8 	beq.w	8007f2e <_printf_i+0x1d2>
 8007d7e:	2f58      	cmp	r7, #88	; 0x58
 8007d80:	f000 80a3 	beq.w	8007eca <_printf_i+0x16e>
 8007d84:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007d88:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007d8c:	e03a      	b.n	8007e04 <_printf_i+0xa8>
 8007d8e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007d92:	2b15      	cmp	r3, #21
 8007d94:	d8f6      	bhi.n	8007d84 <_printf_i+0x28>
 8007d96:	a101      	add	r1, pc, #4	; (adr r1, 8007d9c <_printf_i+0x40>)
 8007d98:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007d9c:	08007df5 	.word	0x08007df5
 8007da0:	08007e09 	.word	0x08007e09
 8007da4:	08007d85 	.word	0x08007d85
 8007da8:	08007d85 	.word	0x08007d85
 8007dac:	08007d85 	.word	0x08007d85
 8007db0:	08007d85 	.word	0x08007d85
 8007db4:	08007e09 	.word	0x08007e09
 8007db8:	08007d85 	.word	0x08007d85
 8007dbc:	08007d85 	.word	0x08007d85
 8007dc0:	08007d85 	.word	0x08007d85
 8007dc4:	08007d85 	.word	0x08007d85
 8007dc8:	08007f15 	.word	0x08007f15
 8007dcc:	08007e39 	.word	0x08007e39
 8007dd0:	08007ef7 	.word	0x08007ef7
 8007dd4:	08007d85 	.word	0x08007d85
 8007dd8:	08007d85 	.word	0x08007d85
 8007ddc:	08007f37 	.word	0x08007f37
 8007de0:	08007d85 	.word	0x08007d85
 8007de4:	08007e39 	.word	0x08007e39
 8007de8:	08007d85 	.word	0x08007d85
 8007dec:	08007d85 	.word	0x08007d85
 8007df0:	08007eff 	.word	0x08007eff
 8007df4:	682b      	ldr	r3, [r5, #0]
 8007df6:	1d1a      	adds	r2, r3, #4
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	602a      	str	r2, [r5, #0]
 8007dfc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007e00:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007e04:	2301      	movs	r3, #1
 8007e06:	e0a3      	b.n	8007f50 <_printf_i+0x1f4>
 8007e08:	6820      	ldr	r0, [r4, #0]
 8007e0a:	6829      	ldr	r1, [r5, #0]
 8007e0c:	0606      	lsls	r6, r0, #24
 8007e0e:	f101 0304 	add.w	r3, r1, #4
 8007e12:	d50a      	bpl.n	8007e2a <_printf_i+0xce>
 8007e14:	680e      	ldr	r6, [r1, #0]
 8007e16:	602b      	str	r3, [r5, #0]
 8007e18:	2e00      	cmp	r6, #0
 8007e1a:	da03      	bge.n	8007e24 <_printf_i+0xc8>
 8007e1c:	232d      	movs	r3, #45	; 0x2d
 8007e1e:	4276      	negs	r6, r6
 8007e20:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007e24:	485e      	ldr	r0, [pc, #376]	; (8007fa0 <_printf_i+0x244>)
 8007e26:	230a      	movs	r3, #10
 8007e28:	e019      	b.n	8007e5e <_printf_i+0x102>
 8007e2a:	680e      	ldr	r6, [r1, #0]
 8007e2c:	602b      	str	r3, [r5, #0]
 8007e2e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007e32:	bf18      	it	ne
 8007e34:	b236      	sxthne	r6, r6
 8007e36:	e7ef      	b.n	8007e18 <_printf_i+0xbc>
 8007e38:	682b      	ldr	r3, [r5, #0]
 8007e3a:	6820      	ldr	r0, [r4, #0]
 8007e3c:	1d19      	adds	r1, r3, #4
 8007e3e:	6029      	str	r1, [r5, #0]
 8007e40:	0601      	lsls	r1, r0, #24
 8007e42:	d501      	bpl.n	8007e48 <_printf_i+0xec>
 8007e44:	681e      	ldr	r6, [r3, #0]
 8007e46:	e002      	b.n	8007e4e <_printf_i+0xf2>
 8007e48:	0646      	lsls	r6, r0, #25
 8007e4a:	d5fb      	bpl.n	8007e44 <_printf_i+0xe8>
 8007e4c:	881e      	ldrh	r6, [r3, #0]
 8007e4e:	4854      	ldr	r0, [pc, #336]	; (8007fa0 <_printf_i+0x244>)
 8007e50:	2f6f      	cmp	r7, #111	; 0x6f
 8007e52:	bf0c      	ite	eq
 8007e54:	2308      	moveq	r3, #8
 8007e56:	230a      	movne	r3, #10
 8007e58:	2100      	movs	r1, #0
 8007e5a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007e5e:	6865      	ldr	r5, [r4, #4]
 8007e60:	60a5      	str	r5, [r4, #8]
 8007e62:	2d00      	cmp	r5, #0
 8007e64:	bfa2      	ittt	ge
 8007e66:	6821      	ldrge	r1, [r4, #0]
 8007e68:	f021 0104 	bicge.w	r1, r1, #4
 8007e6c:	6021      	strge	r1, [r4, #0]
 8007e6e:	b90e      	cbnz	r6, 8007e74 <_printf_i+0x118>
 8007e70:	2d00      	cmp	r5, #0
 8007e72:	d04d      	beq.n	8007f10 <_printf_i+0x1b4>
 8007e74:	4615      	mov	r5, r2
 8007e76:	fbb6 f1f3 	udiv	r1, r6, r3
 8007e7a:	fb03 6711 	mls	r7, r3, r1, r6
 8007e7e:	5dc7      	ldrb	r7, [r0, r7]
 8007e80:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007e84:	4637      	mov	r7, r6
 8007e86:	42bb      	cmp	r3, r7
 8007e88:	460e      	mov	r6, r1
 8007e8a:	d9f4      	bls.n	8007e76 <_printf_i+0x11a>
 8007e8c:	2b08      	cmp	r3, #8
 8007e8e:	d10b      	bne.n	8007ea8 <_printf_i+0x14c>
 8007e90:	6823      	ldr	r3, [r4, #0]
 8007e92:	07de      	lsls	r6, r3, #31
 8007e94:	d508      	bpl.n	8007ea8 <_printf_i+0x14c>
 8007e96:	6923      	ldr	r3, [r4, #16]
 8007e98:	6861      	ldr	r1, [r4, #4]
 8007e9a:	4299      	cmp	r1, r3
 8007e9c:	bfde      	ittt	le
 8007e9e:	2330      	movle	r3, #48	; 0x30
 8007ea0:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007ea4:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007ea8:	1b52      	subs	r2, r2, r5
 8007eaa:	6122      	str	r2, [r4, #16]
 8007eac:	f8cd a000 	str.w	sl, [sp]
 8007eb0:	464b      	mov	r3, r9
 8007eb2:	aa03      	add	r2, sp, #12
 8007eb4:	4621      	mov	r1, r4
 8007eb6:	4640      	mov	r0, r8
 8007eb8:	f7ff fee2 	bl	8007c80 <_printf_common>
 8007ebc:	3001      	adds	r0, #1
 8007ebe:	d14c      	bne.n	8007f5a <_printf_i+0x1fe>
 8007ec0:	f04f 30ff 	mov.w	r0, #4294967295
 8007ec4:	b004      	add	sp, #16
 8007ec6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007eca:	4835      	ldr	r0, [pc, #212]	; (8007fa0 <_printf_i+0x244>)
 8007ecc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007ed0:	6829      	ldr	r1, [r5, #0]
 8007ed2:	6823      	ldr	r3, [r4, #0]
 8007ed4:	f851 6b04 	ldr.w	r6, [r1], #4
 8007ed8:	6029      	str	r1, [r5, #0]
 8007eda:	061d      	lsls	r5, r3, #24
 8007edc:	d514      	bpl.n	8007f08 <_printf_i+0x1ac>
 8007ede:	07df      	lsls	r7, r3, #31
 8007ee0:	bf44      	itt	mi
 8007ee2:	f043 0320 	orrmi.w	r3, r3, #32
 8007ee6:	6023      	strmi	r3, [r4, #0]
 8007ee8:	b91e      	cbnz	r6, 8007ef2 <_printf_i+0x196>
 8007eea:	6823      	ldr	r3, [r4, #0]
 8007eec:	f023 0320 	bic.w	r3, r3, #32
 8007ef0:	6023      	str	r3, [r4, #0]
 8007ef2:	2310      	movs	r3, #16
 8007ef4:	e7b0      	b.n	8007e58 <_printf_i+0xfc>
 8007ef6:	6823      	ldr	r3, [r4, #0]
 8007ef8:	f043 0320 	orr.w	r3, r3, #32
 8007efc:	6023      	str	r3, [r4, #0]
 8007efe:	2378      	movs	r3, #120	; 0x78
 8007f00:	4828      	ldr	r0, [pc, #160]	; (8007fa4 <_printf_i+0x248>)
 8007f02:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007f06:	e7e3      	b.n	8007ed0 <_printf_i+0x174>
 8007f08:	0659      	lsls	r1, r3, #25
 8007f0a:	bf48      	it	mi
 8007f0c:	b2b6      	uxthmi	r6, r6
 8007f0e:	e7e6      	b.n	8007ede <_printf_i+0x182>
 8007f10:	4615      	mov	r5, r2
 8007f12:	e7bb      	b.n	8007e8c <_printf_i+0x130>
 8007f14:	682b      	ldr	r3, [r5, #0]
 8007f16:	6826      	ldr	r6, [r4, #0]
 8007f18:	6961      	ldr	r1, [r4, #20]
 8007f1a:	1d18      	adds	r0, r3, #4
 8007f1c:	6028      	str	r0, [r5, #0]
 8007f1e:	0635      	lsls	r5, r6, #24
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	d501      	bpl.n	8007f28 <_printf_i+0x1cc>
 8007f24:	6019      	str	r1, [r3, #0]
 8007f26:	e002      	b.n	8007f2e <_printf_i+0x1d2>
 8007f28:	0670      	lsls	r0, r6, #25
 8007f2a:	d5fb      	bpl.n	8007f24 <_printf_i+0x1c8>
 8007f2c:	8019      	strh	r1, [r3, #0]
 8007f2e:	2300      	movs	r3, #0
 8007f30:	6123      	str	r3, [r4, #16]
 8007f32:	4615      	mov	r5, r2
 8007f34:	e7ba      	b.n	8007eac <_printf_i+0x150>
 8007f36:	682b      	ldr	r3, [r5, #0]
 8007f38:	1d1a      	adds	r2, r3, #4
 8007f3a:	602a      	str	r2, [r5, #0]
 8007f3c:	681d      	ldr	r5, [r3, #0]
 8007f3e:	6862      	ldr	r2, [r4, #4]
 8007f40:	2100      	movs	r1, #0
 8007f42:	4628      	mov	r0, r5
 8007f44:	f7f8 f964 	bl	8000210 <memchr>
 8007f48:	b108      	cbz	r0, 8007f4e <_printf_i+0x1f2>
 8007f4a:	1b40      	subs	r0, r0, r5
 8007f4c:	6060      	str	r0, [r4, #4]
 8007f4e:	6863      	ldr	r3, [r4, #4]
 8007f50:	6123      	str	r3, [r4, #16]
 8007f52:	2300      	movs	r3, #0
 8007f54:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007f58:	e7a8      	b.n	8007eac <_printf_i+0x150>
 8007f5a:	6923      	ldr	r3, [r4, #16]
 8007f5c:	462a      	mov	r2, r5
 8007f5e:	4649      	mov	r1, r9
 8007f60:	4640      	mov	r0, r8
 8007f62:	47d0      	blx	sl
 8007f64:	3001      	adds	r0, #1
 8007f66:	d0ab      	beq.n	8007ec0 <_printf_i+0x164>
 8007f68:	6823      	ldr	r3, [r4, #0]
 8007f6a:	079b      	lsls	r3, r3, #30
 8007f6c:	d413      	bmi.n	8007f96 <_printf_i+0x23a>
 8007f6e:	68e0      	ldr	r0, [r4, #12]
 8007f70:	9b03      	ldr	r3, [sp, #12]
 8007f72:	4298      	cmp	r0, r3
 8007f74:	bfb8      	it	lt
 8007f76:	4618      	movlt	r0, r3
 8007f78:	e7a4      	b.n	8007ec4 <_printf_i+0x168>
 8007f7a:	2301      	movs	r3, #1
 8007f7c:	4632      	mov	r2, r6
 8007f7e:	4649      	mov	r1, r9
 8007f80:	4640      	mov	r0, r8
 8007f82:	47d0      	blx	sl
 8007f84:	3001      	adds	r0, #1
 8007f86:	d09b      	beq.n	8007ec0 <_printf_i+0x164>
 8007f88:	3501      	adds	r5, #1
 8007f8a:	68e3      	ldr	r3, [r4, #12]
 8007f8c:	9903      	ldr	r1, [sp, #12]
 8007f8e:	1a5b      	subs	r3, r3, r1
 8007f90:	42ab      	cmp	r3, r5
 8007f92:	dcf2      	bgt.n	8007f7a <_printf_i+0x21e>
 8007f94:	e7eb      	b.n	8007f6e <_printf_i+0x212>
 8007f96:	2500      	movs	r5, #0
 8007f98:	f104 0619 	add.w	r6, r4, #25
 8007f9c:	e7f5      	b.n	8007f8a <_printf_i+0x22e>
 8007f9e:	bf00      	nop
 8007fa0:	08008651 	.word	0x08008651
 8007fa4:	08008662 	.word	0x08008662

08007fa8 <_sbrk_r>:
 8007fa8:	b538      	push	{r3, r4, r5, lr}
 8007faa:	4d06      	ldr	r5, [pc, #24]	; (8007fc4 <_sbrk_r+0x1c>)
 8007fac:	2300      	movs	r3, #0
 8007fae:	4604      	mov	r4, r0
 8007fb0:	4608      	mov	r0, r1
 8007fb2:	602b      	str	r3, [r5, #0]
 8007fb4:	f7fa fa6c 	bl	8002490 <_sbrk>
 8007fb8:	1c43      	adds	r3, r0, #1
 8007fba:	d102      	bne.n	8007fc2 <_sbrk_r+0x1a>
 8007fbc:	682b      	ldr	r3, [r5, #0]
 8007fbe:	b103      	cbz	r3, 8007fc2 <_sbrk_r+0x1a>
 8007fc0:	6023      	str	r3, [r4, #0]
 8007fc2:	bd38      	pop	{r3, r4, r5, pc}
 8007fc4:	200054f8 	.word	0x200054f8

08007fc8 <__sread>:
 8007fc8:	b510      	push	{r4, lr}
 8007fca:	460c      	mov	r4, r1
 8007fcc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007fd0:	f000 f8a0 	bl	8008114 <_read_r>
 8007fd4:	2800      	cmp	r0, #0
 8007fd6:	bfab      	itete	ge
 8007fd8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007fda:	89a3      	ldrhlt	r3, [r4, #12]
 8007fdc:	181b      	addge	r3, r3, r0
 8007fde:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007fe2:	bfac      	ite	ge
 8007fe4:	6563      	strge	r3, [r4, #84]	; 0x54
 8007fe6:	81a3      	strhlt	r3, [r4, #12]
 8007fe8:	bd10      	pop	{r4, pc}

08007fea <__swrite>:
 8007fea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007fee:	461f      	mov	r7, r3
 8007ff0:	898b      	ldrh	r3, [r1, #12]
 8007ff2:	05db      	lsls	r3, r3, #23
 8007ff4:	4605      	mov	r5, r0
 8007ff6:	460c      	mov	r4, r1
 8007ff8:	4616      	mov	r6, r2
 8007ffa:	d505      	bpl.n	8008008 <__swrite+0x1e>
 8007ffc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008000:	2302      	movs	r3, #2
 8008002:	2200      	movs	r2, #0
 8008004:	f000 f868 	bl	80080d8 <_lseek_r>
 8008008:	89a3      	ldrh	r3, [r4, #12]
 800800a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800800e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008012:	81a3      	strh	r3, [r4, #12]
 8008014:	4632      	mov	r2, r6
 8008016:	463b      	mov	r3, r7
 8008018:	4628      	mov	r0, r5
 800801a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800801e:	f000 b817 	b.w	8008050 <_write_r>

08008022 <__sseek>:
 8008022:	b510      	push	{r4, lr}
 8008024:	460c      	mov	r4, r1
 8008026:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800802a:	f000 f855 	bl	80080d8 <_lseek_r>
 800802e:	1c43      	adds	r3, r0, #1
 8008030:	89a3      	ldrh	r3, [r4, #12]
 8008032:	bf15      	itete	ne
 8008034:	6560      	strne	r0, [r4, #84]	; 0x54
 8008036:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800803a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800803e:	81a3      	strheq	r3, [r4, #12]
 8008040:	bf18      	it	ne
 8008042:	81a3      	strhne	r3, [r4, #12]
 8008044:	bd10      	pop	{r4, pc}

08008046 <__sclose>:
 8008046:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800804a:	f000 b813 	b.w	8008074 <_close_r>
	...

08008050 <_write_r>:
 8008050:	b538      	push	{r3, r4, r5, lr}
 8008052:	4d07      	ldr	r5, [pc, #28]	; (8008070 <_write_r+0x20>)
 8008054:	4604      	mov	r4, r0
 8008056:	4608      	mov	r0, r1
 8008058:	4611      	mov	r1, r2
 800805a:	2200      	movs	r2, #0
 800805c:	602a      	str	r2, [r5, #0]
 800805e:	461a      	mov	r2, r3
 8008060:	f7f9 fcfc 	bl	8001a5c <_write>
 8008064:	1c43      	adds	r3, r0, #1
 8008066:	d102      	bne.n	800806e <_write_r+0x1e>
 8008068:	682b      	ldr	r3, [r5, #0]
 800806a:	b103      	cbz	r3, 800806e <_write_r+0x1e>
 800806c:	6023      	str	r3, [r4, #0]
 800806e:	bd38      	pop	{r3, r4, r5, pc}
 8008070:	200054f8 	.word	0x200054f8

08008074 <_close_r>:
 8008074:	b538      	push	{r3, r4, r5, lr}
 8008076:	4d06      	ldr	r5, [pc, #24]	; (8008090 <_close_r+0x1c>)
 8008078:	2300      	movs	r3, #0
 800807a:	4604      	mov	r4, r0
 800807c:	4608      	mov	r0, r1
 800807e:	602b      	str	r3, [r5, #0]
 8008080:	f7fa f9d2 	bl	8002428 <_close>
 8008084:	1c43      	adds	r3, r0, #1
 8008086:	d102      	bne.n	800808e <_close_r+0x1a>
 8008088:	682b      	ldr	r3, [r5, #0]
 800808a:	b103      	cbz	r3, 800808e <_close_r+0x1a>
 800808c:	6023      	str	r3, [r4, #0]
 800808e:	bd38      	pop	{r3, r4, r5, pc}
 8008090:	200054f8 	.word	0x200054f8

08008094 <_fstat_r>:
 8008094:	b538      	push	{r3, r4, r5, lr}
 8008096:	4d07      	ldr	r5, [pc, #28]	; (80080b4 <_fstat_r+0x20>)
 8008098:	2300      	movs	r3, #0
 800809a:	4604      	mov	r4, r0
 800809c:	4608      	mov	r0, r1
 800809e:	4611      	mov	r1, r2
 80080a0:	602b      	str	r3, [r5, #0]
 80080a2:	f7fa f9cd 	bl	8002440 <_fstat>
 80080a6:	1c43      	adds	r3, r0, #1
 80080a8:	d102      	bne.n	80080b0 <_fstat_r+0x1c>
 80080aa:	682b      	ldr	r3, [r5, #0]
 80080ac:	b103      	cbz	r3, 80080b0 <_fstat_r+0x1c>
 80080ae:	6023      	str	r3, [r4, #0]
 80080b0:	bd38      	pop	{r3, r4, r5, pc}
 80080b2:	bf00      	nop
 80080b4:	200054f8 	.word	0x200054f8

080080b8 <_isatty_r>:
 80080b8:	b538      	push	{r3, r4, r5, lr}
 80080ba:	4d06      	ldr	r5, [pc, #24]	; (80080d4 <_isatty_r+0x1c>)
 80080bc:	2300      	movs	r3, #0
 80080be:	4604      	mov	r4, r0
 80080c0:	4608      	mov	r0, r1
 80080c2:	602b      	str	r3, [r5, #0]
 80080c4:	f7fa f9cc 	bl	8002460 <_isatty>
 80080c8:	1c43      	adds	r3, r0, #1
 80080ca:	d102      	bne.n	80080d2 <_isatty_r+0x1a>
 80080cc:	682b      	ldr	r3, [r5, #0]
 80080ce:	b103      	cbz	r3, 80080d2 <_isatty_r+0x1a>
 80080d0:	6023      	str	r3, [r4, #0]
 80080d2:	bd38      	pop	{r3, r4, r5, pc}
 80080d4:	200054f8 	.word	0x200054f8

080080d8 <_lseek_r>:
 80080d8:	b538      	push	{r3, r4, r5, lr}
 80080da:	4d07      	ldr	r5, [pc, #28]	; (80080f8 <_lseek_r+0x20>)
 80080dc:	4604      	mov	r4, r0
 80080de:	4608      	mov	r0, r1
 80080e0:	4611      	mov	r1, r2
 80080e2:	2200      	movs	r2, #0
 80080e4:	602a      	str	r2, [r5, #0]
 80080e6:	461a      	mov	r2, r3
 80080e8:	f7fa f9c5 	bl	8002476 <_lseek>
 80080ec:	1c43      	adds	r3, r0, #1
 80080ee:	d102      	bne.n	80080f6 <_lseek_r+0x1e>
 80080f0:	682b      	ldr	r3, [r5, #0]
 80080f2:	b103      	cbz	r3, 80080f6 <_lseek_r+0x1e>
 80080f4:	6023      	str	r3, [r4, #0]
 80080f6:	bd38      	pop	{r3, r4, r5, pc}
 80080f8:	200054f8 	.word	0x200054f8

080080fc <__malloc_lock>:
 80080fc:	4801      	ldr	r0, [pc, #4]	; (8008104 <__malloc_lock+0x8>)
 80080fe:	f7ff bb1d 	b.w	800773c <__retarget_lock_acquire_recursive>
 8008102:	bf00      	nop
 8008104:	200054ec 	.word	0x200054ec

08008108 <__malloc_unlock>:
 8008108:	4801      	ldr	r0, [pc, #4]	; (8008110 <__malloc_unlock+0x8>)
 800810a:	f7ff bb18 	b.w	800773e <__retarget_lock_release_recursive>
 800810e:	bf00      	nop
 8008110:	200054ec 	.word	0x200054ec

08008114 <_read_r>:
 8008114:	b538      	push	{r3, r4, r5, lr}
 8008116:	4d07      	ldr	r5, [pc, #28]	; (8008134 <_read_r+0x20>)
 8008118:	4604      	mov	r4, r0
 800811a:	4608      	mov	r0, r1
 800811c:	4611      	mov	r1, r2
 800811e:	2200      	movs	r2, #0
 8008120:	602a      	str	r2, [r5, #0]
 8008122:	461a      	mov	r2, r3
 8008124:	f7fa f963 	bl	80023ee <_read>
 8008128:	1c43      	adds	r3, r0, #1
 800812a:	d102      	bne.n	8008132 <_read_r+0x1e>
 800812c:	682b      	ldr	r3, [r5, #0]
 800812e:	b103      	cbz	r3, 8008132 <_read_r+0x1e>
 8008130:	6023      	str	r3, [r4, #0]
 8008132:	bd38      	pop	{r3, r4, r5, pc}
 8008134:	200054f8 	.word	0x200054f8

08008138 <_init>:
 8008138:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800813a:	bf00      	nop
 800813c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800813e:	bc08      	pop	{r3}
 8008140:	469e      	mov	lr, r3
 8008142:	4770      	bx	lr

08008144 <_fini>:
 8008144:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008146:	bf00      	nop
 8008148:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800814a:	bc08      	pop	{r3}
 800814c:	469e      	mov	lr, r3
 800814e:	4770      	bx	lr
