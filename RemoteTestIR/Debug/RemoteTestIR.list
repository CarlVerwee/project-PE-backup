
RemoteTestIR.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000560c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000170  0800579c  0800579c  0001579c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800590c  0800590c  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  0800590c  0800590c  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800590c  0800590c  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800590c  0800590c  0001590c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005910  08005910  00015910  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08005914  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000009a4  20000074  08005988  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000a18  08005988  00020a18  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000efee  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ecd  00000000  00000000  0002f092  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d18  00000000  00000000  00030f60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c50  00000000  00000000  00031c78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016d72  00000000  00000000  000328c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fd68  00000000  00000000  0004963a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008a5eb  00000000  00000000  000593a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e398d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003e80  00000000  00000000  000e39e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005784 	.word	0x08005784

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	08005784 	.word	0x08005784

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <InitTouch>:
uint8_t NoSignal = 1;
uint8_t lengte_signaal_gevonden = 0;
uint16_t lengte_signaal[60];

void InitTouch()
{
 8000270:	b480      	push	{r7}
 8000272:	af00      	add	r7, sp, #0
//	uint16_t device_address_write = 0xBA;
//	uint16_t device_address_read = 0xBB;
//	uint8_t dataWrite[] = {0x81,0x40};
//	uint8_t ontvangen[11];

}
 8000274:	bf00      	nop
 8000276:	46bd      	mov	sp, r7
 8000278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800027c:	4770      	bx	lr

0800027e <All_Carl_Inits>:
void All_Carl_Inits()
{
 800027e:	b580      	push	{r7, lr}
 8000280:	af00      	add	r7, sp, #0
		for(uint16_t y=0; y<500; y++)
		{
		tijd[x][y]=0;
		}
	}*/
	InitTouch();
 8000282:	f7ff fff5 	bl	8000270 <InitTouch>
	IR_Carrier_OFF();
 8000286:	f000 f84d 	bl	8000324 <IR_Carrier_OFF>
}
 800028a:	bf00      	nop
 800028c:	bd80      	pop	{r7, pc}
	...

08000290 <Interrupt_flank>:
//	uint8_t buffer1[0];
//	uint16_t X_waarde;
//	uint16_t Y_waarde;
}
void Interrupt_flank()
{
 8000290:	b598      	push	{r3, r4, r7, lr}
 8000292:	af00      	add	r7, sp, #0

	if(IR_READ_flag == 1)
 8000294:	4b17      	ldr	r3, [pc, #92]	; (80002f4 <Interrupt_flank+0x64>)
 8000296:	781b      	ldrb	r3, [r3, #0]
 8000298:	2b01      	cmp	r3, #1
 800029a:	d126      	bne.n	80002ea <Interrupt_flank+0x5a>
	{
		HAL_TIM_Base_Stop(&TIM_1us); //timer stoppen
 800029c:	4816      	ldr	r0, [pc, #88]	; (80002f8 <Interrupt_flank+0x68>)
 800029e:	f002 fd95 	bl	8002dcc <HAL_TIM_Base_Stop>
		//timer in het begin is steeds nul maar deze hebben we niet nodig

		tijd[commando][pulsecounter] = TIM_1us.Instance -> CNT; //timer opslaan
 80002a2:	4b15      	ldr	r3, [pc, #84]	; (80002f8 <Interrupt_flank+0x68>)
 80002a4:	681b      	ldr	r3, [r3, #0]
 80002a6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80002a8:	4b14      	ldr	r3, [pc, #80]	; (80002fc <Interrupt_flank+0x6c>)
 80002aa:	781b      	ldrb	r3, [r3, #0]
 80002ac:	461c      	mov	r4, r3
 80002ae:	4b14      	ldr	r3, [pc, #80]	; (8000300 <Interrupt_flank+0x70>)
 80002b0:	881b      	ldrh	r3, [r3, #0]
 80002b2:	4618      	mov	r0, r3
 80002b4:	b291      	uxth	r1, r2
 80002b6:	4a13      	ldr	r2, [pc, #76]	; (8000304 <Interrupt_flank+0x74>)
 80002b8:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80002bc:	fb04 f303 	mul.w	r3, r4, r3
 80002c0:	4403      	add	r3, r0
 80002c2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		lengte = pulsecounter;
 80002c6:	4b0e      	ldr	r3, [pc, #56]	; (8000300 <Interrupt_flank+0x70>)
 80002c8:	881a      	ldrh	r2, [r3, #0]
 80002ca:	4b0f      	ldr	r3, [pc, #60]	; (8000308 <Interrupt_flank+0x78>)
 80002cc:	801a      	strh	r2, [r3, #0]
		pulsecounter++;
 80002ce:	4b0c      	ldr	r3, [pc, #48]	; (8000300 <Interrupt_flank+0x70>)
 80002d0:	881b      	ldrh	r3, [r3, #0]
 80002d2:	3301      	adds	r3, #1
 80002d4:	b29a      	uxth	r2, r3
 80002d6:	4b0a      	ldr	r3, [pc, #40]	; (8000300 <Interrupt_flank+0x70>)
 80002d8:	801a      	strh	r2, [r3, #0]
		TIM_1us.Instance -> CNT = 0;
 80002da:	4b07      	ldr	r3, [pc, #28]	; (80002f8 <Interrupt_flank+0x68>)
 80002dc:	681b      	ldr	r3, [r3, #0]
 80002de:	2200      	movs	r2, #0
 80002e0:	625a      	str	r2, [r3, #36]	; 0x24
		HAL_TIM_Base_Start(&TIM_1us);
 80002e2:	4805      	ldr	r0, [pc, #20]	; (80002f8 <Interrupt_flank+0x68>)
 80002e4:	f002 fd26 	bl	8002d34 <HAL_TIM_Base_Start>
	else
	{
		printf("ik kan niet werken, aangezien ik uit sta\r\n");
	}

}
 80002e8:	e002      	b.n	80002f0 <Interrupt_flank+0x60>
		printf("ik kan niet werken, aangezien ik uit sta\r\n");
 80002ea:	4808      	ldr	r0, [pc, #32]	; (800030c <Interrupt_flank+0x7c>)
 80002ec:	f004 facc 	bl	8004888 <puts>
}
 80002f0:	bf00      	nop
 80002f2:	bd98      	pop	{r3, r4, r7, pc}
 80002f4:	20000861 	.word	0x20000861
 80002f8:	2000092c 	.word	0x2000092c
 80002fc:	20000860 	.word	0x20000860
 8000300:	20000000 	.word	0x20000000
 8000304:	20000090 	.word	0x20000090
 8000308:	20000862 	.word	0x20000862
 800030c:	0800579c 	.word	0x0800579c

08000310 <IR_Carrier_ON>:
void IR_Carrier_ON()
{
 8000310:	b580      	push	{r7, lr}
 8000312:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&TIM_PWM_CARRIER, TIM_PWM_CARRIER_CHANNEL);
 8000314:	2100      	movs	r1, #0
 8000316:	4802      	ldr	r0, [pc, #8]	; (8000320 <IR_Carrier_ON+0x10>)
 8000318:	f002 fdd6 	bl	8002ec8 <HAL_TIM_PWM_Start>
}
 800031c:	bf00      	nop
 800031e:	bd80      	pop	{r7, pc}
 8000320:	200008e0 	.word	0x200008e0

08000324 <IR_Carrier_OFF>:
void IR_Carrier_OFF()
{
 8000324:	b580      	push	{r7, lr}
 8000326:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Stop(&TIM_PWM_CARRIER, TIM_PWM_CARRIER_CHANNEL);
 8000328:	2100      	movs	r1, #0
 800032a:	4802      	ldr	r0, [pc, #8]	; (8000334 <IR_Carrier_OFF+0x10>)
 800032c:	f002 feb2 	bl	8003094 <HAL_TIM_PWM_Stop>
}
 8000330:	bf00      	nop
 8000332:	bd80      	pop	{r7, pc}
 8000334:	200008e0 	.word	0x200008e0

08000338 <IR_Read>:
void IR_Read()
{
 8000338:	b480      	push	{r7}
 800033a:	af00      	add	r7, sp, #0
	IR_READ_flag = 1 ;
 800033c:	4b03      	ldr	r3, [pc, #12]	; (800034c <IR_Read+0x14>)
 800033e:	2201      	movs	r2, #1
 8000340:	701a      	strb	r2, [r3, #0]
}
 8000342:	bf00      	nop
 8000344:	46bd      	mov	sp, r7
 8000346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800034a:	4770      	bx	lr
 800034c:	20000861 	.word	0x20000861

08000350 <IR_UNDERSTAND>:

void IR_UNDERSTAND()
{
 8000350:	b580      	push	{r7, lr}
 8000352:	b082      	sub	sp, #8
 8000354:	af00      	add	r7, sp, #0
	//Is er wel iets gemeten?
	//5 metingen test
	uint8_t measurement = 0;
 8000356:	2300      	movs	r3, #0
 8000358:	71fb      	strb	r3, [r7, #7]
	for(uint8_t five_measurements = 0; five_measurements < 5; five_measurements++)
 800035a:	2300      	movs	r3, #0
 800035c:	71bb      	strb	r3, [r7, #6]
 800035e:	e013      	b.n	8000388 <IR_UNDERSTAND+0x38>
	{

		if(tijd[commando][five_measurements] == 0)
 8000360:	4b33      	ldr	r3, [pc, #204]	; (8000430 <IR_UNDERSTAND+0xe0>)
 8000362:	781b      	ldrb	r3, [r3, #0]
 8000364:	4618      	mov	r0, r3
 8000366:	79bb      	ldrb	r3, [r7, #6]
 8000368:	4932      	ldr	r1, [pc, #200]	; (8000434 <IR_UNDERSTAND+0xe4>)
 800036a:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800036e:	fb00 f202 	mul.w	r2, r0, r2
 8000372:	4413      	add	r3, r2
 8000374:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000378:	2b00      	cmp	r3, #0
 800037a:	d102      	bne.n	8000382 <IR_UNDERSTAND+0x32>
		{
			measurement++;
 800037c:	79fb      	ldrb	r3, [r7, #7]
 800037e:	3301      	adds	r3, #1
 8000380:	71fb      	strb	r3, [r7, #7]
	for(uint8_t five_measurements = 0; five_measurements < 5; five_measurements++)
 8000382:	79bb      	ldrb	r3, [r7, #6]
 8000384:	3301      	adds	r3, #1
 8000386:	71bb      	strb	r3, [r7, #6]
 8000388:	79bb      	ldrb	r3, [r7, #6]
 800038a:	2b04      	cmp	r3, #4
 800038c:	d9e8      	bls.n	8000360 <IR_UNDERSTAND+0x10>
		}
	}
	if(measurement == 5)
 800038e:	79fb      	ldrb	r3, [r7, #7]
 8000390:	2b05      	cmp	r3, #5
 8000392:	d106      	bne.n	80003a2 <IR_UNDERSTAND+0x52>
		{
			printf("Er is niks gemeten \r\n");
 8000394:	4828      	ldr	r0, [pc, #160]	; (8000438 <IR_UNDERSTAND+0xe8>)
 8000396:	f004 fa77 	bl	8004888 <puts>
			NoSignal = 1;
 800039a:	4b28      	ldr	r3, [pc, #160]	; (800043c <IR_UNDERSTAND+0xec>)
 800039c:	2201      	movs	r2, #1
 800039e:	701a      	strb	r2, [r3, #0]
 80003a0:	e00c      	b.n	80003bc <IR_UNDERSTAND+0x6c>
		}
	else
	{
		printf("Er is iets gemeten %d \r\n", lengte_signaal[commando]);
 80003a2:	4b23      	ldr	r3, [pc, #140]	; (8000430 <IR_UNDERSTAND+0xe0>)
 80003a4:	781b      	ldrb	r3, [r3, #0]
 80003a6:	461a      	mov	r2, r3
 80003a8:	4b25      	ldr	r3, [pc, #148]	; (8000440 <IR_UNDERSTAND+0xf0>)
 80003aa:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80003ae:	4619      	mov	r1, r3
 80003b0:	4824      	ldr	r0, [pc, #144]	; (8000444 <IR_UNDERSTAND+0xf4>)
 80003b2:	f004 f9e3 	bl	800477c <iprintf>
		NoSignal = 0;
 80003b6:	4b21      	ldr	r3, [pc, #132]	; (800043c <IR_UNDERSTAND+0xec>)
 80003b8:	2200      	movs	r2, #0
 80003ba:	701a      	strb	r2, [r3, #0]
	}
	if(NoSignal == 0) //Enkel als er een signaal is
 80003bc:	4b1f      	ldr	r3, [pc, #124]	; (800043c <IR_UNDERSTAND+0xec>)
 80003be:	781b      	ldrb	r3, [r3, #0]
 80003c0:	2b00      	cmp	r3, #0
 80003c2:	d130      	bne.n	8000426 <IR_UNDERSTAND+0xd6>
	{

		IR_Debug();
 80003c4:	f000 f8b4 	bl	8000530 <IR_Debug>
		//IR_READ_flag = 0; //stoppen met leesInterrupt
		//Hoe lang is het signaal?
		if(lengte_signaal_gevonden == 0)
 80003c8:	4b1f      	ldr	r3, [pc, #124]	; (8000448 <IR_UNDERSTAND+0xf8>)
 80003ca:	781b      	ldrb	r3, [r3, #0]
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d12a      	bne.n	8000426 <IR_UNDERSTAND+0xd6>
		{
			uint16_t waarde = 499;
 80003d0:	f240 13f3 	movw	r3, #499	; 0x1f3
 80003d4:	80bb      	strh	r3, [r7, #4]
			while(tijd[commando][waarde] == 0)
 80003d6:	e002      	b.n	80003de <IR_UNDERSTAND+0x8e>
			{
				waarde--;
 80003d8:	88bb      	ldrh	r3, [r7, #4]
 80003da:	3b01      	subs	r3, #1
 80003dc:	80bb      	strh	r3, [r7, #4]
			while(tijd[commando][waarde] == 0)
 80003de:	4b14      	ldr	r3, [pc, #80]	; (8000430 <IR_UNDERSTAND+0xe0>)
 80003e0:	781b      	ldrb	r3, [r3, #0]
 80003e2:	4618      	mov	r0, r3
 80003e4:	88bb      	ldrh	r3, [r7, #4]
 80003e6:	4913      	ldr	r1, [pc, #76]	; (8000434 <IR_UNDERSTAND+0xe4>)
 80003e8:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80003ec:	fb00 f202 	mul.w	r2, r0, r2
 80003f0:	4413      	add	r3, r2
 80003f2:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80003f6:	2b00      	cmp	r3, #0
 80003f8:	d0ee      	beq.n	80003d8 <IR_UNDERSTAND+0x88>
			}
			lengte_signaal[commando] = waarde;
 80003fa:	4b0d      	ldr	r3, [pc, #52]	; (8000430 <IR_UNDERSTAND+0xe0>)
 80003fc:	781b      	ldrb	r3, [r3, #0]
 80003fe:	4619      	mov	r1, r3
 8000400:	4a0f      	ldr	r2, [pc, #60]	; (8000440 <IR_UNDERSTAND+0xf0>)
 8000402:	88bb      	ldrh	r3, [r7, #4]
 8000404:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
			printf("lengte signaal = %d\r\n", lengte_signaal[commando]);
 8000408:	4b09      	ldr	r3, [pc, #36]	; (8000430 <IR_UNDERSTAND+0xe0>)
 800040a:	781b      	ldrb	r3, [r3, #0]
 800040c:	461a      	mov	r2, r3
 800040e:	4b0c      	ldr	r3, [pc, #48]	; (8000440 <IR_UNDERSTAND+0xf0>)
 8000410:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8000414:	4619      	mov	r1, r3
 8000416:	480d      	ldr	r0, [pc, #52]	; (800044c <IR_UNDERSTAND+0xfc>)
 8000418:	f004 f9b0 	bl	800477c <iprintf>
			lengte_signaal_gevonden = 1;
 800041c:	4b0a      	ldr	r3, [pc, #40]	; (8000448 <IR_UNDERSTAND+0xf8>)
 800041e:	2201      	movs	r2, #1
 8000420:	701a      	strb	r2, [r3, #0]
			IR_Debug();
 8000422:	f000 f885 	bl	8000530 <IR_Debug>
		}

	}


}
 8000426:	bf00      	nop
 8000428:	3708      	adds	r7, #8
 800042a:	46bd      	mov	sp, r7
 800042c:	bd80      	pop	{r7, pc}
 800042e:	bf00      	nop
 8000430:	20000860 	.word	0x20000860
 8000434:	20000090 	.word	0x20000090
 8000438:	080057c8 	.word	0x080057c8
 800043c:	20000002 	.word	0x20000002
 8000440:	20000868 	.word	0x20000868
 8000444:	080057e0 	.word	0x080057e0
 8000448:	20000864 	.word	0x20000864
 800044c:	080057fc 	.word	0x080057fc

08000450 <IR_sent>:



void IR_sent()
{
 8000450:	b590      	push	{r4, r7, lr}
 8000452:	b083      	sub	sp, #12
 8000454:	af00      	add	r7, sp, #0
	if(NoSignal == 0)
 8000456:	4b30      	ldr	r3, [pc, #192]	; (8000518 <IR_sent+0xc8>)
 8000458:	781b      	ldrb	r3, [r3, #0]
 800045a:	2b00      	cmp	r3, #0
 800045c:	d157      	bne.n	800050e <IR_sent+0xbe>
	{
    IR_READ_flag = 0; //er kan niks meer ingelezen worden
 800045e:	4b2f      	ldr	r3, [pc, #188]	; (800051c <IR_sent+0xcc>)
 8000460:	2200      	movs	r2, #0
 8000462:	701a      	strb	r2, [r3, #0]
   for(uint8_t i = 0; i <= lengte_signaal[commando]; i++)
 8000464:	2300      	movs	r3, #0
 8000466:	71fb      	strb	r3, [r7, #7]
 8000468:	e045      	b.n	80004f6 <IR_sent+0xa6>
   {

	   if((i%2)==0)
 800046a:	79fb      	ldrb	r3, [r7, #7]
 800046c:	f003 0301 	and.w	r3, r3, #1
 8000470:	b2db      	uxtb	r3, r3
 8000472:	2b00      	cmp	r3, #0
 8000474:	d11e      	bne.n	80004b4 <IR_sent+0x64>
	   {
		   HAL_TIM_Base_Stop(&TIM_1us);
 8000476:	482a      	ldr	r0, [pc, #168]	; (8000520 <IR_sent+0xd0>)
 8000478:	f002 fca8 	bl	8002dcc <HAL_TIM_Base_Stop>
		   TIM_1us.Instance->CNT = 0;
 800047c:	4b28      	ldr	r3, [pc, #160]	; (8000520 <IR_sent+0xd0>)
 800047e:	681b      	ldr	r3, [r3, #0]
 8000480:	2200      	movs	r2, #0
 8000482:	625a      	str	r2, [r3, #36]	; 0x24
		   HAL_TIM_Base_Start(&TIM_1us);
 8000484:	4826      	ldr	r0, [pc, #152]	; (8000520 <IR_sent+0xd0>)
 8000486:	f002 fc55 	bl	8002d34 <HAL_TIM_Base_Start>
		   IR_Carrier_ON();
 800048a:	f7ff ff41 	bl	8000310 <IR_Carrier_ON>
		   while((TIM_1us.Instance->CNT) <= tijd[commando][i]){}
 800048e:	bf00      	nop
 8000490:	4b23      	ldr	r3, [pc, #140]	; (8000520 <IR_sent+0xd0>)
 8000492:	681b      	ldr	r3, [r3, #0]
 8000494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000496:	4a23      	ldr	r2, [pc, #140]	; (8000524 <IR_sent+0xd4>)
 8000498:	7812      	ldrb	r2, [r2, #0]
 800049a:	4614      	mov	r4, r2
 800049c:	79fa      	ldrb	r2, [r7, #7]
 800049e:	4822      	ldr	r0, [pc, #136]	; (8000528 <IR_sent+0xd8>)
 80004a0:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80004a4:	fb04 f101 	mul.w	r1, r4, r1
 80004a8:	440a      	add	r2, r1
 80004aa:	f830 2012 	ldrh.w	r2, [r0, r2, lsl #1]
 80004ae:	4293      	cmp	r3, r2
 80004b0:	d9ee      	bls.n	8000490 <IR_sent+0x40>
 80004b2:	e01d      	b.n	80004f0 <IR_sent+0xa0>
	   }
	   else
	   {
		   HAL_TIM_Base_Stop(&TIM_1us);
 80004b4:	481a      	ldr	r0, [pc, #104]	; (8000520 <IR_sent+0xd0>)
 80004b6:	f002 fc89 	bl	8002dcc <HAL_TIM_Base_Stop>
		   TIM_1us.Instance->CNT = 0;
 80004ba:	4b19      	ldr	r3, [pc, #100]	; (8000520 <IR_sent+0xd0>)
 80004bc:	681b      	ldr	r3, [r3, #0]
 80004be:	2200      	movs	r2, #0
 80004c0:	625a      	str	r2, [r3, #36]	; 0x24
		   HAL_TIM_Base_Start(&TIM_1us);
 80004c2:	4817      	ldr	r0, [pc, #92]	; (8000520 <IR_sent+0xd0>)
 80004c4:	f002 fc36 	bl	8002d34 <HAL_TIM_Base_Start>
		   IR_Carrier_OFF();
 80004c8:	f7ff ff2c 	bl	8000324 <IR_Carrier_OFF>
		   while((TIM_1us.Instance->CNT) <= tijd[commando][i]){}
 80004cc:	bf00      	nop
 80004ce:	4b14      	ldr	r3, [pc, #80]	; (8000520 <IR_sent+0xd0>)
 80004d0:	681b      	ldr	r3, [r3, #0]
 80004d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80004d4:	4a13      	ldr	r2, [pc, #76]	; (8000524 <IR_sent+0xd4>)
 80004d6:	7812      	ldrb	r2, [r2, #0]
 80004d8:	4614      	mov	r4, r2
 80004da:	79fa      	ldrb	r2, [r7, #7]
 80004dc:	4812      	ldr	r0, [pc, #72]	; (8000528 <IR_sent+0xd8>)
 80004de:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80004e2:	fb04 f101 	mul.w	r1, r4, r1
 80004e6:	440a      	add	r2, r1
 80004e8:	f830 2012 	ldrh.w	r2, [r0, r2, lsl #1]
 80004ec:	4293      	cmp	r3, r2
 80004ee:	d9ee      	bls.n	80004ce <IR_sent+0x7e>
   for(uint8_t i = 0; i <= lengte_signaal[commando]; i++)
 80004f0:	79fb      	ldrb	r3, [r7, #7]
 80004f2:	3301      	adds	r3, #1
 80004f4:	71fb      	strb	r3, [r7, #7]
 80004f6:	79fb      	ldrb	r3, [r7, #7]
 80004f8:	b29a      	uxth	r2, r3
 80004fa:	4b0a      	ldr	r3, [pc, #40]	; (8000524 <IR_sent+0xd4>)
 80004fc:	781b      	ldrb	r3, [r3, #0]
 80004fe:	4619      	mov	r1, r3
 8000500:	4b0a      	ldr	r3, [pc, #40]	; (800052c <IR_sent+0xdc>)
 8000502:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8000506:	429a      	cmp	r2, r3
 8000508:	d9af      	bls.n	800046a <IR_sent+0x1a>

	   }
   }
   IR_Carrier_OFF();
 800050a:	f7ff ff0b 	bl	8000324 <IR_Carrier_OFF>


}
}
 800050e:	bf00      	nop
 8000510:	370c      	adds	r7, #12
 8000512:	46bd      	mov	sp, r7
 8000514:	bd90      	pop	{r4, r7, pc}
 8000516:	bf00      	nop
 8000518:	20000002 	.word	0x20000002
 800051c:	20000861 	.word	0x20000861
 8000520:	2000092c 	.word	0x2000092c
 8000524:	20000860 	.word	0x20000860
 8000528:	20000090 	.word	0x20000090
 800052c:	20000868 	.word	0x20000868

08000530 <IR_Debug>:
void IR_Debug() //hier lees ik de waarde uit, om te zien wat er effectief aan het gebeuren is
{
 8000530:	b5b0      	push	{r4, r5, r7, lr}
 8000532:	b082      	sub	sp, #8
 8000534:	af00      	add	r7, sp, #0
	if(lengte_signaal_gevonden == 0)  //als de lengte van het signaal nog niet bepaald is
 8000536:	4b29      	ldr	r3, [pc, #164]	; (80005dc <IR_Debug+0xac>)
 8000538:	781b      	ldrb	r3, [r3, #0]
 800053a:	2b00      	cmp	r3, #0
 800053c:	d125      	bne.n	800058a <IR_Debug+0x5a>
	{
		printf("Commando %d\r\n", commando);
 800053e:	4b28      	ldr	r3, [pc, #160]	; (80005e0 <IR_Debug+0xb0>)
 8000540:	781b      	ldrb	r3, [r3, #0]
 8000542:	4619      	mov	r1, r3
 8000544:	4827      	ldr	r0, [pc, #156]	; (80005e4 <IR_Debug+0xb4>)
 8000546:	f004 f919 	bl	800477c <iprintf>

		for(uint16_t debugwaarde = 0; debugwaarde < 500; debugwaarde++)
 800054a:	2300      	movs	r3, #0
 800054c:	80fb      	strh	r3, [r7, #6]
 800054e:	e017      	b.n	8000580 <IR_Debug+0x50>
		{
		printf("tijd[%d][%d] = %d \r\n", commando, debugwaarde, tijd[commando][debugwaarde]);
 8000550:	4b23      	ldr	r3, [pc, #140]	; (80005e0 <IR_Debug+0xb0>)
 8000552:	781b      	ldrb	r3, [r3, #0]
 8000554:	461d      	mov	r5, r3
 8000556:	88f9      	ldrh	r1, [r7, #6]
 8000558:	4b21      	ldr	r3, [pc, #132]	; (80005e0 <IR_Debug+0xb0>)
 800055a:	781b      	ldrb	r3, [r3, #0]
 800055c:	461c      	mov	r4, r3
 800055e:	88fb      	ldrh	r3, [r7, #6]
 8000560:	4821      	ldr	r0, [pc, #132]	; (80005e8 <IR_Debug+0xb8>)
 8000562:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000566:	fb04 f202 	mul.w	r2, r4, r2
 800056a:	4413      	add	r3, r2
 800056c:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8000570:	460a      	mov	r2, r1
 8000572:	4629      	mov	r1, r5
 8000574:	481d      	ldr	r0, [pc, #116]	; (80005ec <IR_Debug+0xbc>)
 8000576:	f004 f901 	bl	800477c <iprintf>
		for(uint16_t debugwaarde = 0; debugwaarde < 500; debugwaarde++)
 800057a:	88fb      	ldrh	r3, [r7, #6]
 800057c:	3301      	adds	r3, #1
 800057e:	80fb      	strh	r3, [r7, #6]
 8000580:	88fb      	ldrh	r3, [r7, #6]
 8000582:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000586:	d3e3      	bcc.n	8000550 <IR_Debug+0x20>
			{
			printf("tijd[%d][%d] = %d \r\n", commando, debugwaarde, tijd[commando][debugwaarde]);
			}
	}

}
 8000588:	e023      	b.n	80005d2 <IR_Debug+0xa2>
		for(uint16_t debugwaarde = 0; debugwaarde <= lengte_signaal[commando] ; debugwaarde++)
 800058a:	2300      	movs	r3, #0
 800058c:	80bb      	strh	r3, [r7, #4]
 800058e:	e017      	b.n	80005c0 <IR_Debug+0x90>
			printf("tijd[%d][%d] = %d \r\n", commando, debugwaarde, tijd[commando][debugwaarde]);
 8000590:	4b13      	ldr	r3, [pc, #76]	; (80005e0 <IR_Debug+0xb0>)
 8000592:	781b      	ldrb	r3, [r3, #0]
 8000594:	461d      	mov	r5, r3
 8000596:	88b9      	ldrh	r1, [r7, #4]
 8000598:	4b11      	ldr	r3, [pc, #68]	; (80005e0 <IR_Debug+0xb0>)
 800059a:	781b      	ldrb	r3, [r3, #0]
 800059c:	461c      	mov	r4, r3
 800059e:	88bb      	ldrh	r3, [r7, #4]
 80005a0:	4811      	ldr	r0, [pc, #68]	; (80005e8 <IR_Debug+0xb8>)
 80005a2:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80005a6:	fb04 f202 	mul.w	r2, r4, r2
 80005aa:	4413      	add	r3, r2
 80005ac:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 80005b0:	460a      	mov	r2, r1
 80005b2:	4629      	mov	r1, r5
 80005b4:	480d      	ldr	r0, [pc, #52]	; (80005ec <IR_Debug+0xbc>)
 80005b6:	f004 f8e1 	bl	800477c <iprintf>
		for(uint16_t debugwaarde = 0; debugwaarde <= lengte_signaal[commando] ; debugwaarde++)
 80005ba:	88bb      	ldrh	r3, [r7, #4]
 80005bc:	3301      	adds	r3, #1
 80005be:	80bb      	strh	r3, [r7, #4]
 80005c0:	4b07      	ldr	r3, [pc, #28]	; (80005e0 <IR_Debug+0xb0>)
 80005c2:	781b      	ldrb	r3, [r3, #0]
 80005c4:	461a      	mov	r2, r3
 80005c6:	4b0a      	ldr	r3, [pc, #40]	; (80005f0 <IR_Debug+0xc0>)
 80005c8:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80005cc:	88ba      	ldrh	r2, [r7, #4]
 80005ce:	429a      	cmp	r2, r3
 80005d0:	d9de      	bls.n	8000590 <IR_Debug+0x60>
}
 80005d2:	bf00      	nop
 80005d4:	3708      	adds	r7, #8
 80005d6:	46bd      	mov	sp, r7
 80005d8:	bdb0      	pop	{r4, r5, r7, pc}
 80005da:	bf00      	nop
 80005dc:	20000864 	.word	0x20000864
 80005e0:	20000860 	.word	0x20000860
 80005e4:	08005814 	.word	0x08005814
 80005e8:	20000090 	.word	0x20000090
 80005ec:	08005824 	.word	0x08005824
 80005f0:	20000868 	.word	0x20000868

080005f4 <whilelus>:
void whilelus(){
 80005f4:	b580      	push	{r7, lr}
 80005f6:	af00      	add	r7, sp, #0
	{
		printf("no\r\n");
	}*/


	 	 if(NoSignal == 1)
 80005f8:	4b0d      	ldr	r3, [pc, #52]	; (8000630 <whilelus+0x3c>)
 80005fa:	781b      	ldrb	r3, [r3, #0]
 80005fc:	2b01      	cmp	r3, #1
 80005fe:	d104      	bne.n	800060a <whilelus+0x16>
	 	 {
		 IR_Read();
 8000600:	f7ff fe9a 	bl	8000338 <IR_Read>
		 IR_UNDERSTAND();
 8000604:	f7ff fea4 	bl	8000350 <IR_UNDERSTAND>
	 			IR_Carrier_OFF();
	 		 }

	 	 }

}
 8000608:	e00f      	b.n	800062a <whilelus+0x36>
	 		 if(HAL_GPIO_ReadPin(Button_GPIO_Port, Button_Pin)==0)
 800060a:	2110      	movs	r1, #16
 800060c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000610:	f000 ff04 	bl	800141c <HAL_GPIO_ReadPin>
 8000614:	4603      	mov	r3, r0
 8000616:	2b00      	cmp	r3, #0
 8000618:	d105      	bne.n	8000626 <whilelus+0x32>
	 			IR_sent();
 800061a:	f7ff ff19 	bl	8000450 <IR_sent>
	 			HAL_Delay(100);
 800061e:	2064      	movs	r0, #100	; 0x64
 8000620:	f000 fc54 	bl	8000ecc <HAL_Delay>
}
 8000624:	e001      	b.n	800062a <whilelus+0x36>
	 			IR_Carrier_OFF();
 8000626:	f7ff fe7d 	bl	8000324 <IR_Carrier_OFF>
}
 800062a:	bf00      	nop
 800062c:	bd80      	pop	{r7, pc}
 800062e:	bf00      	nop
 8000630:	20000002 	.word	0x20000002

08000634 <_write>:
/* USER CODE BEGIN 0 */
#include <errno.h>
#include <sys/stat.h>
#include <sys/times.h>
#include <sys/unistd.h>
int _write(int file, char *ptr, int len) {
 8000634:	b580      	push	{r7, lr}
 8000636:	b086      	sub	sp, #24
 8000638:	af00      	add	r7, sp, #0
 800063a:	60f8      	str	r0, [r7, #12]
 800063c:	60b9      	str	r1, [r7, #8]
 800063e:	607a      	str	r2, [r7, #4]
    HAL_StatusTypeDef xStatus;
    switch (file) {
 8000640:	68fb      	ldr	r3, [r7, #12]
 8000642:	2b01      	cmp	r3, #1
 8000644:	d003      	beq.n	800064e <_write+0x1a>
 8000646:	68fb      	ldr	r3, [r7, #12]
 8000648:	2b02      	cmp	r3, #2
 800064a:	d015      	beq.n	8000678 <_write+0x44>
 800064c:	e029      	b.n	80006a2 <_write+0x6e>
    case STDOUT_FILENO: /*stdout*/
		xStatus = HAL_UART_Transmit(&huart1, (uint8_t*)ptr, len, HAL_MAX_DELAY);
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	b29a      	uxth	r2, r3
 8000652:	f04f 33ff 	mov.w	r3, #4294967295
 8000656:	68b9      	ldr	r1, [r7, #8]
 8000658:	481a      	ldr	r0, [pc, #104]	; (80006c4 <_write+0x90>)
 800065a:	f003 fc87 	bl	8003f6c <HAL_UART_Transmit>
 800065e:	4603      	mov	r3, r0
 8000660:	75fb      	strb	r3, [r7, #23]
		if (xStatus != HAL_OK) {
 8000662:	7dfb      	ldrb	r3, [r7, #23]
 8000664:	2b00      	cmp	r3, #0
 8000666:	d024      	beq.n	80006b2 <_write+0x7e>
			errno = EIO;
 8000668:	f004 f856 	bl	8004718 <__errno>
 800066c:	4603      	mov	r3, r0
 800066e:	2205      	movs	r2, #5
 8000670:	601a      	str	r2, [r3, #0]
			return -1;
 8000672:	f04f 33ff 	mov.w	r3, #4294967295
 8000676:	e020      	b.n	80006ba <_write+0x86>
		}
        break;
    case STDERR_FILENO: /* stderr */
		xStatus = HAL_UART_Transmit(&huart1, (uint8_t*)ptr, len, HAL_MAX_DELAY);
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	b29a      	uxth	r2, r3
 800067c:	f04f 33ff 	mov.w	r3, #4294967295
 8000680:	68b9      	ldr	r1, [r7, #8]
 8000682:	4810      	ldr	r0, [pc, #64]	; (80006c4 <_write+0x90>)
 8000684:	f003 fc72 	bl	8003f6c <HAL_UART_Transmit>
 8000688:	4603      	mov	r3, r0
 800068a:	75fb      	strb	r3, [r7, #23]
		if (xStatus != HAL_OK) {
 800068c:	7dfb      	ldrb	r3, [r7, #23]
 800068e:	2b00      	cmp	r3, #0
 8000690:	d011      	beq.n	80006b6 <_write+0x82>
			errno = EIO;
 8000692:	f004 f841 	bl	8004718 <__errno>
 8000696:	4603      	mov	r3, r0
 8000698:	2205      	movs	r2, #5
 800069a:	601a      	str	r2, [r3, #0]
			return -1;
 800069c:	f04f 33ff 	mov.w	r3, #4294967295
 80006a0:	e00b      	b.n	80006ba <_write+0x86>
		}
        break;
    default:
        errno = EBADF;
 80006a2:	f004 f839 	bl	8004718 <__errno>
 80006a6:	4603      	mov	r3, r0
 80006a8:	2209      	movs	r2, #9
 80006aa:	601a      	str	r2, [r3, #0]
        return -1;
 80006ac:	f04f 33ff 	mov.w	r3, #4294967295
 80006b0:	e003      	b.n	80006ba <_write+0x86>
        break;
 80006b2:	bf00      	nop
 80006b4:	e000      	b.n	80006b8 <_write+0x84>
        break;
 80006b6:	bf00      	nop
    }
    return len;
 80006b8:	687b      	ldr	r3, [r7, #4]
}
 80006ba:	4618      	mov	r0, r3
 80006bc:	3718      	adds	r7, #24
 80006be:	46bd      	mov	sp, r7
 80006c0:	bd80      	pop	{r7, pc}
 80006c2:	bf00      	nop
 80006c4:	20000978 	.word	0x20000978

080006c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006cc:	f000 fb98 	bl	8000e00 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006d0:	f000 f80e 	bl	80006f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006d4:	f000 f97a 	bl	80009cc <MX_GPIO_Init>
  MX_TIM1_Init();
 80006d8:	f000 f866 	bl	80007a8 <MX_TIM1_Init>
  MX_TIM15_Init();
 80006dc:	f000 f8f4 	bl	80008c8 <MX_TIM15_Init>
  MX_USART1_UART_Init();
 80006e0:	f000 f944 	bl	800096c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  All_Carl_Inits();
 80006e4:	f7ff fdcb 	bl	800027e <All_Carl_Inits>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  whilelus();
 80006e8:	f7ff ff84 	bl	80005f4 <whilelus>
 80006ec:	e7fc      	b.n	80006e8 <main+0x20>
	...

080006f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b09c      	sub	sp, #112	; 0x70
 80006f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006f6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80006fa:	2228      	movs	r2, #40	; 0x28
 80006fc:	2100      	movs	r1, #0
 80006fe:	4618      	mov	r0, r3
 8000700:	f004 f834 	bl	800476c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000704:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000708:	2200      	movs	r2, #0
 800070a:	601a      	str	r2, [r3, #0]
 800070c:	605a      	str	r2, [r3, #4]
 800070e:	609a      	str	r2, [r3, #8]
 8000710:	60da      	str	r2, [r3, #12]
 8000712:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000714:	1d3b      	adds	r3, r7, #4
 8000716:	2230      	movs	r2, #48	; 0x30
 8000718:	2100      	movs	r1, #0
 800071a:	4618      	mov	r0, r3
 800071c:	f004 f826 	bl	800476c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000720:	2302      	movs	r3, #2
 8000722:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000724:	2301      	movs	r3, #1
 8000726:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000728:	2310      	movs	r3, #16
 800072a:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800072c:	2302      	movs	r3, #2
 800072e:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000730:	2300      	movs	r3, #0
 8000732:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000734:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000738:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800073a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800073e:	4618      	mov	r0, r3
 8000740:	f000 fea8 	bl	8001494 <HAL_RCC_OscConfig>
 8000744:	4603      	mov	r3, r0
 8000746:	2b00      	cmp	r3, #0
 8000748:	d001      	beq.n	800074e <SystemClock_Config+0x5e>
  {
    Error_Handler();
 800074a:	f000 f97d 	bl	8000a48 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800074e:	230f      	movs	r3, #15
 8000750:	637b      	str	r3, [r7, #52]	; 0x34
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000752:	2302      	movs	r3, #2
 8000754:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000756:	2300      	movs	r3, #0
 8000758:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800075a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800075e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000760:	2300      	movs	r3, #0
 8000762:	647b      	str	r3, [r7, #68]	; 0x44

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000764:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000768:	2102      	movs	r1, #2
 800076a:	4618      	mov	r0, r3
 800076c:	f001 fed0 	bl	8002510 <HAL_RCC_ClockConfig>
 8000770:	4603      	mov	r3, r0
 8000772:	2b00      	cmp	r3, #0
 8000774:	d001      	beq.n	800077a <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8000776:	f000 f967 	bl	8000a48 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_TIM1
 800077a:	4b0a      	ldr	r3, [pc, #40]	; (80007a4 <SystemClock_Config+0xb4>)
 800077c:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_TIM15;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 800077e:	2300      	movs	r3, #0
 8000780:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 8000782:	2300      	movs	r3, #0
 8000784:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInit.Tim15ClockSelection = RCC_TIM15CLK_HCLK;
 8000786:	2300      	movs	r3, #0
 8000788:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800078a:	1d3b      	adds	r3, r7, #4
 800078c:	4618      	mov	r0, r3
 800078e:	f002 f8f5 	bl	800297c <HAL_RCCEx_PeriphCLKConfig>
 8000792:	4603      	mov	r3, r0
 8000794:	2b00      	cmp	r3, #0
 8000796:	d001      	beq.n	800079c <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000798:	f000 f956 	bl	8000a48 <Error_Handler>
  }
}
 800079c:	bf00      	nop
 800079e:	3770      	adds	r7, #112	; 0x70
 80007a0:	46bd      	mov	sp, r7
 80007a2:	bd80      	pop	{r7, pc}
 80007a4:	00041001 	.word	0x00041001

080007a8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b096      	sub	sp, #88	; 0x58
 80007ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007ae:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80007b2:	2200      	movs	r2, #0
 80007b4:	601a      	str	r2, [r3, #0]
 80007b6:	605a      	str	r2, [r3, #4]
 80007b8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80007ba:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80007be:	2200      	movs	r2, #0
 80007c0:	601a      	str	r2, [r3, #0]
 80007c2:	605a      	str	r2, [r3, #4]
 80007c4:	609a      	str	r2, [r3, #8]
 80007c6:	60da      	str	r2, [r3, #12]
 80007c8:	611a      	str	r2, [r3, #16]
 80007ca:	615a      	str	r2, [r3, #20]
 80007cc:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80007ce:	1d3b      	adds	r3, r7, #4
 80007d0:	222c      	movs	r2, #44	; 0x2c
 80007d2:	2100      	movs	r1, #0
 80007d4:	4618      	mov	r0, r3
 80007d6:	f003 ffc9 	bl	800476c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80007da:	4b39      	ldr	r3, [pc, #228]	; (80008c0 <MX_TIM1_Init+0x118>)
 80007dc:	4a39      	ldr	r2, [pc, #228]	; (80008c4 <MX_TIM1_Init+0x11c>)
 80007de:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 4-1;
 80007e0:	4b37      	ldr	r3, [pc, #220]	; (80008c0 <MX_TIM1_Init+0x118>)
 80007e2:	2203      	movs	r2, #3
 80007e4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007e6:	4b36      	ldr	r3, [pc, #216]	; (80008c0 <MX_TIM1_Init+0x118>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 422-1;
 80007ec:	4b34      	ldr	r3, [pc, #208]	; (80008c0 <MX_TIM1_Init+0x118>)
 80007ee:	f240 12a5 	movw	r2, #421	; 0x1a5
 80007f2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007f4:	4b32      	ldr	r3, [pc, #200]	; (80008c0 <MX_TIM1_Init+0x118>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80007fa:	4b31      	ldr	r3, [pc, #196]	; (80008c0 <MX_TIM1_Init+0x118>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000800:	4b2f      	ldr	r3, [pc, #188]	; (80008c0 <MX_TIM1_Init+0x118>)
 8000802:	2280      	movs	r2, #128	; 0x80
 8000804:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000806:	482e      	ldr	r0, [pc, #184]	; (80008c0 <MX_TIM1_Init+0x118>)
 8000808:	f002 fb07 	bl	8002e1a <HAL_TIM_PWM_Init>
 800080c:	4603      	mov	r3, r0
 800080e:	2b00      	cmp	r3, #0
 8000810:	d001      	beq.n	8000816 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8000812:	f000 f919 	bl	8000a48 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000816:	2300      	movs	r3, #0
 8000818:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800081a:	2300      	movs	r3, #0
 800081c:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800081e:	2300      	movs	r3, #0
 8000820:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000822:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000826:	4619      	mov	r1, r3
 8000828:	4825      	ldr	r0, [pc, #148]	; (80008c0 <MX_TIM1_Init+0x118>)
 800082a:	f003 fa73 	bl	8003d14 <HAL_TIMEx_MasterConfigSynchronization>
 800082e:	4603      	mov	r3, r0
 8000830:	2b00      	cmp	r3, #0
 8000832:	d001      	beq.n	8000838 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000834:	f000 f908 	bl	8000a48 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000838:	2360      	movs	r3, #96	; 0x60
 800083a:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 211-1;
 800083c:	23d2      	movs	r3, #210	; 0xd2
 800083e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000840:	2300      	movs	r3, #0
 8000842:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000844:	2300      	movs	r3, #0
 8000846:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000848:	2300      	movs	r3, #0
 800084a:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800084c:	2300      	movs	r3, #0
 800084e:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000850:	2300      	movs	r3, #0
 8000852:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000854:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000858:	2200      	movs	r2, #0
 800085a:	4619      	mov	r1, r3
 800085c:	4818      	ldr	r0, [pc, #96]	; (80008c0 <MX_TIM1_Init+0x118>)
 800085e:	f002 fca7 	bl	80031b0 <HAL_TIM_PWM_ConfigChannel>
 8000862:	4603      	mov	r3, r0
 8000864:	2b00      	cmp	r3, #0
 8000866:	d001      	beq.n	800086c <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8000868:	f000 f8ee 	bl	8000a48 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800086c:	2300      	movs	r3, #0
 800086e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000870:	2300      	movs	r3, #0
 8000872:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000874:	2300      	movs	r3, #0
 8000876:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000878:	2300      	movs	r3, #0
 800087a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800087c:	2300      	movs	r3, #0
 800087e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000880:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000884:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000886:	2300      	movs	r3, #0
 8000888:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800088a:	2300      	movs	r3, #0
 800088c:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800088e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000892:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000894:	2300      	movs	r3, #0
 8000896:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000898:	2300      	movs	r3, #0
 800089a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800089c:	1d3b      	adds	r3, r7, #4
 800089e:	4619      	mov	r1, r3
 80008a0:	4807      	ldr	r0, [pc, #28]	; (80008c0 <MX_TIM1_Init+0x118>)
 80008a2:	f003 fa9d 	bl	8003de0 <HAL_TIMEx_ConfigBreakDeadTime>
 80008a6:	4603      	mov	r3, r0
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d001      	beq.n	80008b0 <MX_TIM1_Init+0x108>
  {
    Error_Handler();
 80008ac:	f000 f8cc 	bl	8000a48 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80008b0:	4803      	ldr	r0, [pc, #12]	; (80008c0 <MX_TIM1_Init+0x118>)
 80008b2:	f000 f933 	bl	8000b1c <HAL_TIM_MspPostInit>

}
 80008b6:	bf00      	nop
 80008b8:	3758      	adds	r7, #88	; 0x58
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bd80      	pop	{r7, pc}
 80008be:	bf00      	nop
 80008c0:	200008e0 	.word	0x200008e0
 80008c4:	40012c00 	.word	0x40012c00

080008c8 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b088      	sub	sp, #32
 80008cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008ce:	f107 0310 	add.w	r3, r7, #16
 80008d2:	2200      	movs	r2, #0
 80008d4:	601a      	str	r2, [r3, #0]
 80008d6:	605a      	str	r2, [r3, #4]
 80008d8:	609a      	str	r2, [r3, #8]
 80008da:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008dc:	1d3b      	adds	r3, r7, #4
 80008de:	2200      	movs	r2, #0
 80008e0:	601a      	str	r2, [r3, #0]
 80008e2:	605a      	str	r2, [r3, #4]
 80008e4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 80008e6:	4b1f      	ldr	r3, [pc, #124]	; (8000964 <MX_TIM15_Init+0x9c>)
 80008e8:	4a1f      	ldr	r2, [pc, #124]	; (8000968 <MX_TIM15_Init+0xa0>)
 80008ea:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 64;
 80008ec:	4b1d      	ldr	r3, [pc, #116]	; (8000964 <MX_TIM15_Init+0x9c>)
 80008ee:	2240      	movs	r2, #64	; 0x40
 80008f0:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008f2:	4b1c      	ldr	r3, [pc, #112]	; (8000964 <MX_TIM15_Init+0x9c>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 80008f8:	4b1a      	ldr	r3, [pc, #104]	; (8000964 <MX_TIM15_Init+0x9c>)
 80008fa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80008fe:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000900:	4b18      	ldr	r3, [pc, #96]	; (8000964 <MX_TIM15_Init+0x9c>)
 8000902:	2200      	movs	r2, #0
 8000904:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8000906:	4b17      	ldr	r3, [pc, #92]	; (8000964 <MX_TIM15_Init+0x9c>)
 8000908:	2200      	movs	r2, #0
 800090a:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800090c:	4b15      	ldr	r3, [pc, #84]	; (8000964 <MX_TIM15_Init+0x9c>)
 800090e:	2280      	movs	r2, #128	; 0x80
 8000910:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8000912:	4814      	ldr	r0, [pc, #80]	; (8000964 <MX_TIM15_Init+0x9c>)
 8000914:	f002 f9b6 	bl	8002c84 <HAL_TIM_Base_Init>
 8000918:	4603      	mov	r3, r0
 800091a:	2b00      	cmp	r3, #0
 800091c:	d001      	beq.n	8000922 <MX_TIM15_Init+0x5a>
  {
    Error_Handler();
 800091e:	f000 f893 	bl	8000a48 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000922:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000926:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8000928:	f107 0310 	add.w	r3, r7, #16
 800092c:	4619      	mov	r1, r3
 800092e:	480d      	ldr	r0, [pc, #52]	; (8000964 <MX_TIM15_Init+0x9c>)
 8000930:	f002 fd52 	bl	80033d8 <HAL_TIM_ConfigClockSource>
 8000934:	4603      	mov	r3, r0
 8000936:	2b00      	cmp	r3, #0
 8000938:	d001      	beq.n	800093e <MX_TIM15_Init+0x76>
  {
    Error_Handler();
 800093a:	f000 f885 	bl	8000a48 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800093e:	2300      	movs	r3, #0
 8000940:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000942:	2300      	movs	r3, #0
 8000944:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8000946:	1d3b      	adds	r3, r7, #4
 8000948:	4619      	mov	r1, r3
 800094a:	4806      	ldr	r0, [pc, #24]	; (8000964 <MX_TIM15_Init+0x9c>)
 800094c:	f003 f9e2 	bl	8003d14 <HAL_TIMEx_MasterConfigSynchronization>
 8000950:	4603      	mov	r3, r0
 8000952:	2b00      	cmp	r3, #0
 8000954:	d001      	beq.n	800095a <MX_TIM15_Init+0x92>
  {
    Error_Handler();
 8000956:	f000 f877 	bl	8000a48 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 800095a:	bf00      	nop
 800095c:	3720      	adds	r7, #32
 800095e:	46bd      	mov	sp, r7
 8000960:	bd80      	pop	{r7, pc}
 8000962:	bf00      	nop
 8000964:	2000092c 	.word	0x2000092c
 8000968:	40014000 	.word	0x40014000

0800096c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000970:	4b14      	ldr	r3, [pc, #80]	; (80009c4 <MX_USART1_UART_Init+0x58>)
 8000972:	4a15      	ldr	r2, [pc, #84]	; (80009c8 <MX_USART1_UART_Init+0x5c>)
 8000974:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000976:	4b13      	ldr	r3, [pc, #76]	; (80009c4 <MX_USART1_UART_Init+0x58>)
 8000978:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800097c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800097e:	4b11      	ldr	r3, [pc, #68]	; (80009c4 <MX_USART1_UART_Init+0x58>)
 8000980:	2200      	movs	r2, #0
 8000982:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000984:	4b0f      	ldr	r3, [pc, #60]	; (80009c4 <MX_USART1_UART_Init+0x58>)
 8000986:	2200      	movs	r2, #0
 8000988:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800098a:	4b0e      	ldr	r3, [pc, #56]	; (80009c4 <MX_USART1_UART_Init+0x58>)
 800098c:	2200      	movs	r2, #0
 800098e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000990:	4b0c      	ldr	r3, [pc, #48]	; (80009c4 <MX_USART1_UART_Init+0x58>)
 8000992:	220c      	movs	r2, #12
 8000994:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000996:	4b0b      	ldr	r3, [pc, #44]	; (80009c4 <MX_USART1_UART_Init+0x58>)
 8000998:	2200      	movs	r2, #0
 800099a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800099c:	4b09      	ldr	r3, [pc, #36]	; (80009c4 <MX_USART1_UART_Init+0x58>)
 800099e:	2200      	movs	r2, #0
 80009a0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009a2:	4b08      	ldr	r3, [pc, #32]	; (80009c4 <MX_USART1_UART_Init+0x58>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009a8:	4b06      	ldr	r3, [pc, #24]	; (80009c4 <MX_USART1_UART_Init+0x58>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80009ae:	4805      	ldr	r0, [pc, #20]	; (80009c4 <MX_USART1_UART_Init+0x58>)
 80009b0:	f003 fa8e 	bl	8003ed0 <HAL_UART_Init>
 80009b4:	4603      	mov	r3, r0
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d001      	beq.n	80009be <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80009ba:	f000 f845 	bl	8000a48 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80009be:	bf00      	nop
 80009c0:	bd80      	pop	{r7, pc}
 80009c2:	bf00      	nop
 80009c4:	20000978 	.word	0x20000978
 80009c8:	40013800 	.word	0x40013800

080009cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b086      	sub	sp, #24
 80009d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009d2:	1d3b      	adds	r3, r7, #4
 80009d4:	2200      	movs	r2, #0
 80009d6:	601a      	str	r2, [r3, #0]
 80009d8:	605a      	str	r2, [r3, #4]
 80009da:	609a      	str	r2, [r3, #8]
 80009dc:	60da      	str	r2, [r3, #12]
 80009de:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009e0:	4b18      	ldr	r3, [pc, #96]	; (8000a44 <MX_GPIO_Init+0x78>)
 80009e2:	695b      	ldr	r3, [r3, #20]
 80009e4:	4a17      	ldr	r2, [pc, #92]	; (8000a44 <MX_GPIO_Init+0x78>)
 80009e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009ea:	6153      	str	r3, [r2, #20]
 80009ec:	4b15      	ldr	r3, [pc, #84]	; (8000a44 <MX_GPIO_Init+0x78>)
 80009ee:	695b      	ldr	r3, [r3, #20]
 80009f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009f4:	603b      	str	r3, [r7, #0]
 80009f6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : ReadIR_Pin */
  GPIO_InitStruct.Pin = ReadIR_Pin;
 80009f8:	2308      	movs	r3, #8
 80009fa:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80009fc:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8000a00:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a02:	2300      	movs	r3, #0
 8000a04:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(ReadIR_GPIO_Port, &GPIO_InitStruct);
 8000a06:	1d3b      	adds	r3, r7, #4
 8000a08:	4619      	mov	r1, r3
 8000a0a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a0e:	f000 fb93 	bl	8001138 <HAL_GPIO_Init>

  /*Configure GPIO pin : Button_Pin */
  GPIO_InitStruct.Pin = Button_Pin;
 8000a12:	2310      	movs	r3, #16
 8000a14:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a16:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000a1a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a1c:	2301      	movs	r3, #1
 8000a1e:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(Button_GPIO_Port, &GPIO_InitStruct);
 8000a20:	1d3b      	adds	r3, r7, #4
 8000a22:	4619      	mov	r1, r3
 8000a24:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a28:	f000 fb86 	bl	8001138 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	2100      	movs	r1, #0
 8000a30:	2009      	movs	r0, #9
 8000a32:	f000 fb4a 	bl	80010ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8000a36:	2009      	movs	r0, #9
 8000a38:	f000 fb63 	bl	8001102 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a3c:	bf00      	nop
 8000a3e:	3718      	adds	r7, #24
 8000a40:	46bd      	mov	sp, r7
 8000a42:	bd80      	pop	{r7, pc}
 8000a44:	40021000 	.word	0x40021000

08000a48 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a4c:	b672      	cpsid	i
}
 8000a4e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a50:	e7fe      	b.n	8000a50 <Error_Handler+0x8>
	...

08000a54 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a54:	b480      	push	{r7}
 8000a56:	b083      	sub	sp, #12
 8000a58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a5a:	4b0f      	ldr	r3, [pc, #60]	; (8000a98 <HAL_MspInit+0x44>)
 8000a5c:	699b      	ldr	r3, [r3, #24]
 8000a5e:	4a0e      	ldr	r2, [pc, #56]	; (8000a98 <HAL_MspInit+0x44>)
 8000a60:	f043 0301 	orr.w	r3, r3, #1
 8000a64:	6193      	str	r3, [r2, #24]
 8000a66:	4b0c      	ldr	r3, [pc, #48]	; (8000a98 <HAL_MspInit+0x44>)
 8000a68:	699b      	ldr	r3, [r3, #24]
 8000a6a:	f003 0301 	and.w	r3, r3, #1
 8000a6e:	607b      	str	r3, [r7, #4]
 8000a70:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a72:	4b09      	ldr	r3, [pc, #36]	; (8000a98 <HAL_MspInit+0x44>)
 8000a74:	69db      	ldr	r3, [r3, #28]
 8000a76:	4a08      	ldr	r2, [pc, #32]	; (8000a98 <HAL_MspInit+0x44>)
 8000a78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a7c:	61d3      	str	r3, [r2, #28]
 8000a7e:	4b06      	ldr	r3, [pc, #24]	; (8000a98 <HAL_MspInit+0x44>)
 8000a80:	69db      	ldr	r3, [r3, #28]
 8000a82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a86:	603b      	str	r3, [r7, #0]
 8000a88:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a8a:	bf00      	nop
 8000a8c:	370c      	adds	r7, #12
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop
 8000a98:	40021000 	.word	0x40021000

08000a9c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	b085      	sub	sp, #20
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	4a0a      	ldr	r2, [pc, #40]	; (8000ad4 <HAL_TIM_PWM_MspInit+0x38>)
 8000aaa:	4293      	cmp	r3, r2
 8000aac:	d10b      	bne.n	8000ac6 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000aae:	4b0a      	ldr	r3, [pc, #40]	; (8000ad8 <HAL_TIM_PWM_MspInit+0x3c>)
 8000ab0:	699b      	ldr	r3, [r3, #24]
 8000ab2:	4a09      	ldr	r2, [pc, #36]	; (8000ad8 <HAL_TIM_PWM_MspInit+0x3c>)
 8000ab4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000ab8:	6193      	str	r3, [r2, #24]
 8000aba:	4b07      	ldr	r3, [pc, #28]	; (8000ad8 <HAL_TIM_PWM_MspInit+0x3c>)
 8000abc:	699b      	ldr	r3, [r3, #24]
 8000abe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000ac2:	60fb      	str	r3, [r7, #12]
 8000ac4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000ac6:	bf00      	nop
 8000ac8:	3714      	adds	r7, #20
 8000aca:	46bd      	mov	sp, r7
 8000acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad0:	4770      	bx	lr
 8000ad2:	bf00      	nop
 8000ad4:	40012c00 	.word	0x40012c00
 8000ad8:	40021000 	.word	0x40021000

08000adc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000adc:	b480      	push	{r7}
 8000ade:	b085      	sub	sp, #20
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM15)
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	4a0a      	ldr	r2, [pc, #40]	; (8000b14 <HAL_TIM_Base_MspInit+0x38>)
 8000aea:	4293      	cmp	r3, r2
 8000aec:	d10b      	bne.n	8000b06 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM15_MspInit 0 */

  /* USER CODE END TIM15_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM15_CLK_ENABLE();
 8000aee:	4b0a      	ldr	r3, [pc, #40]	; (8000b18 <HAL_TIM_Base_MspInit+0x3c>)
 8000af0:	699b      	ldr	r3, [r3, #24]
 8000af2:	4a09      	ldr	r2, [pc, #36]	; (8000b18 <HAL_TIM_Base_MspInit+0x3c>)
 8000af4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000af8:	6193      	str	r3, [r2, #24]
 8000afa:	4b07      	ldr	r3, [pc, #28]	; (8000b18 <HAL_TIM_Base_MspInit+0x3c>)
 8000afc:	699b      	ldr	r3, [r3, #24]
 8000afe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000b02:	60fb      	str	r3, [r7, #12]
 8000b04:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 8000b06:	bf00      	nop
 8000b08:	3714      	adds	r7, #20
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b10:	4770      	bx	lr
 8000b12:	bf00      	nop
 8000b14:	40014000 	.word	0x40014000
 8000b18:	40021000 	.word	0x40021000

08000b1c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b088      	sub	sp, #32
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b24:	f107 030c 	add.w	r3, r7, #12
 8000b28:	2200      	movs	r2, #0
 8000b2a:	601a      	str	r2, [r3, #0]
 8000b2c:	605a      	str	r2, [r3, #4]
 8000b2e:	609a      	str	r2, [r3, #8]
 8000b30:	60da      	str	r2, [r3, #12]
 8000b32:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	4a12      	ldr	r2, [pc, #72]	; (8000b84 <HAL_TIM_MspPostInit+0x68>)
 8000b3a:	4293      	cmp	r3, r2
 8000b3c:	d11d      	bne.n	8000b7a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b3e:	4b12      	ldr	r3, [pc, #72]	; (8000b88 <HAL_TIM_MspPostInit+0x6c>)
 8000b40:	695b      	ldr	r3, [r3, #20]
 8000b42:	4a11      	ldr	r2, [pc, #68]	; (8000b88 <HAL_TIM_MspPostInit+0x6c>)
 8000b44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b48:	6153      	str	r3, [r2, #20]
 8000b4a:	4b0f      	ldr	r3, [pc, #60]	; (8000b88 <HAL_TIM_MspPostInit+0x6c>)
 8000b4c:	695b      	ldr	r3, [r3, #20]
 8000b4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b52:	60bb      	str	r3, [r7, #8]
 8000b54:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000b56:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b5a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b5c:	2302      	movs	r3, #2
 8000b5e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b60:	2300      	movs	r3, #0
 8000b62:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b64:	2300      	movs	r3, #0
 8000b66:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8000b68:	2306      	movs	r3, #6
 8000b6a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b6c:	f107 030c 	add.w	r3, r7, #12
 8000b70:	4619      	mov	r1, r3
 8000b72:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b76:	f000 fadf 	bl	8001138 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000b7a:	bf00      	nop
 8000b7c:	3720      	adds	r7, #32
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bd80      	pop	{r7, pc}
 8000b82:	bf00      	nop
 8000b84:	40012c00 	.word	0x40012c00
 8000b88:	40021000 	.word	0x40021000

08000b8c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b08a      	sub	sp, #40	; 0x28
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b94:	f107 0314 	add.w	r3, r7, #20
 8000b98:	2200      	movs	r2, #0
 8000b9a:	601a      	str	r2, [r3, #0]
 8000b9c:	605a      	str	r2, [r3, #4]
 8000b9e:	609a      	str	r2, [r3, #8]
 8000ba0:	60da      	str	r2, [r3, #12]
 8000ba2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	4a18      	ldr	r2, [pc, #96]	; (8000c0c <HAL_UART_MspInit+0x80>)
 8000baa:	4293      	cmp	r3, r2
 8000bac:	d129      	bne.n	8000c02 <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000bae:	4b18      	ldr	r3, [pc, #96]	; (8000c10 <HAL_UART_MspInit+0x84>)
 8000bb0:	699b      	ldr	r3, [r3, #24]
 8000bb2:	4a17      	ldr	r2, [pc, #92]	; (8000c10 <HAL_UART_MspInit+0x84>)
 8000bb4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bb8:	6193      	str	r3, [r2, #24]
 8000bba:	4b15      	ldr	r3, [pc, #84]	; (8000c10 <HAL_UART_MspInit+0x84>)
 8000bbc:	699b      	ldr	r3, [r3, #24]
 8000bbe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000bc2:	613b      	str	r3, [r7, #16]
 8000bc4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bc6:	4b12      	ldr	r3, [pc, #72]	; (8000c10 <HAL_UART_MspInit+0x84>)
 8000bc8:	695b      	ldr	r3, [r3, #20]
 8000bca:	4a11      	ldr	r2, [pc, #68]	; (8000c10 <HAL_UART_MspInit+0x84>)
 8000bcc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bd0:	6153      	str	r3, [r2, #20]
 8000bd2:	4b0f      	ldr	r3, [pc, #60]	; (8000c10 <HAL_UART_MspInit+0x84>)
 8000bd4:	695b      	ldr	r3, [r3, #20]
 8000bd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bda:	60fb      	str	r3, [r7, #12]
 8000bdc:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000bde:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000be2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000be4:	2302      	movs	r3, #2
 8000be6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be8:	2300      	movs	r3, #0
 8000bea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000bec:	2303      	movs	r3, #3
 8000bee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000bf0:	2307      	movs	r3, #7
 8000bf2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bf4:	f107 0314 	add.w	r3, r7, #20
 8000bf8:	4619      	mov	r1, r3
 8000bfa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bfe:	f000 fa9b 	bl	8001138 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000c02:	bf00      	nop
 8000c04:	3728      	adds	r7, #40	; 0x28
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bd80      	pop	{r7, pc}
 8000c0a:	bf00      	nop
 8000c0c:	40013800 	.word	0x40013800
 8000c10:	40021000 	.word	0x40021000

08000c14 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c14:	b480      	push	{r7}
 8000c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c18:	e7fe      	b.n	8000c18 <NMI_Handler+0x4>

08000c1a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c1a:	b480      	push	{r7}
 8000c1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c1e:	e7fe      	b.n	8000c1e <HardFault_Handler+0x4>

08000c20 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c20:	b480      	push	{r7}
 8000c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c24:	e7fe      	b.n	8000c24 <MemManage_Handler+0x4>

08000c26 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c26:	b480      	push	{r7}
 8000c28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c2a:	e7fe      	b.n	8000c2a <BusFault_Handler+0x4>

08000c2c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c30:	e7fe      	b.n	8000c30 <UsageFault_Handler+0x4>

08000c32 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c32:	b480      	push	{r7}
 8000c34:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c36:	bf00      	nop
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3e:	4770      	bx	lr

08000c40 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c40:	b480      	push	{r7}
 8000c42:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c44:	bf00      	nop
 8000c46:	46bd      	mov	sp, r7
 8000c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4c:	4770      	bx	lr

08000c4e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c4e:	b480      	push	{r7}
 8000c50:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c52:	bf00      	nop
 8000c54:	46bd      	mov	sp, r7
 8000c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5a:	4770      	bx	lr

08000c5c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c60:	f000 f914 	bl	8000e8c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c64:	bf00      	nop
 8000c66:	bd80      	pop	{r7, pc}

08000c68 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */
	Interrupt_flank();
 8000c6c:	f7ff fb10 	bl	8000290 <Interrupt_flank>
  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ReadIR_Pin);
 8000c70:	2008      	movs	r0, #8
 8000c72:	f000 fbeb 	bl	800144c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8000c76:	bf00      	nop
 8000c78:	bd80      	pop	{r7, pc}

08000c7a <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000c7a:	b580      	push	{r7, lr}
 8000c7c:	b086      	sub	sp, #24
 8000c7e:	af00      	add	r7, sp, #0
 8000c80:	60f8      	str	r0, [r7, #12]
 8000c82:	60b9      	str	r1, [r7, #8]
 8000c84:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c86:	2300      	movs	r3, #0
 8000c88:	617b      	str	r3, [r7, #20]
 8000c8a:	e00a      	b.n	8000ca2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000c8c:	f3af 8000 	nop.w
 8000c90:	4601      	mov	r1, r0
 8000c92:	68bb      	ldr	r3, [r7, #8]
 8000c94:	1c5a      	adds	r2, r3, #1
 8000c96:	60ba      	str	r2, [r7, #8]
 8000c98:	b2ca      	uxtb	r2, r1
 8000c9a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c9c:	697b      	ldr	r3, [r7, #20]
 8000c9e:	3301      	adds	r3, #1
 8000ca0:	617b      	str	r3, [r7, #20]
 8000ca2:	697a      	ldr	r2, [r7, #20]
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	429a      	cmp	r2, r3
 8000ca8:	dbf0      	blt.n	8000c8c <_read+0x12>
  }

  return len;
 8000caa:	687b      	ldr	r3, [r7, #4]
}
 8000cac:	4618      	mov	r0, r3
 8000cae:	3718      	adds	r7, #24
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	bd80      	pop	{r7, pc}

08000cb4 <_close>:
  }
  return len;
}

int _close(int file)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	b083      	sub	sp, #12
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000cbc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	370c      	adds	r7, #12
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cca:	4770      	bx	lr

08000ccc <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	b083      	sub	sp, #12
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
 8000cd4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000cd6:	683b      	ldr	r3, [r7, #0]
 8000cd8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000cdc:	605a      	str	r2, [r3, #4]
  return 0;
 8000cde:	2300      	movs	r3, #0
}
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	370c      	adds	r7, #12
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cea:	4770      	bx	lr

08000cec <_isatty>:

int _isatty(int file)
{
 8000cec:	b480      	push	{r7}
 8000cee:	b083      	sub	sp, #12
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000cf4:	2301      	movs	r3, #1
}
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	370c      	adds	r7, #12
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d00:	4770      	bx	lr

08000d02 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000d02:	b480      	push	{r7}
 8000d04:	b085      	sub	sp, #20
 8000d06:	af00      	add	r7, sp, #0
 8000d08:	60f8      	str	r0, [r7, #12]
 8000d0a:	60b9      	str	r1, [r7, #8]
 8000d0c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000d0e:	2300      	movs	r3, #0
}
 8000d10:	4618      	mov	r0, r3
 8000d12:	3714      	adds	r7, #20
 8000d14:	46bd      	mov	sp, r7
 8000d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1a:	4770      	bx	lr

08000d1c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b086      	sub	sp, #24
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d24:	4a14      	ldr	r2, [pc, #80]	; (8000d78 <_sbrk+0x5c>)
 8000d26:	4b15      	ldr	r3, [pc, #84]	; (8000d7c <_sbrk+0x60>)
 8000d28:	1ad3      	subs	r3, r2, r3
 8000d2a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d2c:	697b      	ldr	r3, [r7, #20]
 8000d2e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d30:	4b13      	ldr	r3, [pc, #76]	; (8000d80 <_sbrk+0x64>)
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d102      	bne.n	8000d3e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d38:	4b11      	ldr	r3, [pc, #68]	; (8000d80 <_sbrk+0x64>)
 8000d3a:	4a12      	ldr	r2, [pc, #72]	; (8000d84 <_sbrk+0x68>)
 8000d3c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d3e:	4b10      	ldr	r3, [pc, #64]	; (8000d80 <_sbrk+0x64>)
 8000d40:	681a      	ldr	r2, [r3, #0]
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	4413      	add	r3, r2
 8000d46:	693a      	ldr	r2, [r7, #16]
 8000d48:	429a      	cmp	r2, r3
 8000d4a:	d207      	bcs.n	8000d5c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d4c:	f003 fce4 	bl	8004718 <__errno>
 8000d50:	4603      	mov	r3, r0
 8000d52:	220c      	movs	r2, #12
 8000d54:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d56:	f04f 33ff 	mov.w	r3, #4294967295
 8000d5a:	e009      	b.n	8000d70 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d5c:	4b08      	ldr	r3, [pc, #32]	; (8000d80 <_sbrk+0x64>)
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d62:	4b07      	ldr	r3, [pc, #28]	; (8000d80 <_sbrk+0x64>)
 8000d64:	681a      	ldr	r2, [r3, #0]
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	4413      	add	r3, r2
 8000d6a:	4a05      	ldr	r2, [pc, #20]	; (8000d80 <_sbrk+0x64>)
 8000d6c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d6e:	68fb      	ldr	r3, [r7, #12]
}
 8000d70:	4618      	mov	r0, r3
 8000d72:	3718      	adds	r7, #24
 8000d74:	46bd      	mov	sp, r7
 8000d76:	bd80      	pop	{r7, pc}
 8000d78:	20004000 	.word	0x20004000
 8000d7c:	00000400 	.word	0x00000400
 8000d80:	20000a00 	.word	0x20000a00
 8000d84:	20000a18 	.word	0x20000a18

08000d88 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d8c:	4b06      	ldr	r3, [pc, #24]	; (8000da8 <SystemInit+0x20>)
 8000d8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d92:	4a05      	ldr	r2, [pc, #20]	; (8000da8 <SystemInit+0x20>)
 8000d94:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d98:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d9c:	bf00      	nop
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da4:	4770      	bx	lr
 8000da6:	bf00      	nop
 8000da8:	e000ed00 	.word	0xe000ed00

08000dac <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000dac:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000de4 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000db0:	f7ff ffea 	bl	8000d88 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000db4:	480c      	ldr	r0, [pc, #48]	; (8000de8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000db6:	490d      	ldr	r1, [pc, #52]	; (8000dec <LoopForever+0xa>)
  ldr r2, =_sidata
 8000db8:	4a0d      	ldr	r2, [pc, #52]	; (8000df0 <LoopForever+0xe>)
  movs r3, #0
 8000dba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000dbc:	e002      	b.n	8000dc4 <LoopCopyDataInit>

08000dbe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dbe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000dc0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dc2:	3304      	adds	r3, #4

08000dc4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000dc4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dc6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000dc8:	d3f9      	bcc.n	8000dbe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dca:	4a0a      	ldr	r2, [pc, #40]	; (8000df4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000dcc:	4c0a      	ldr	r4, [pc, #40]	; (8000df8 <LoopForever+0x16>)
  movs r3, #0
 8000dce:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000dd0:	e001      	b.n	8000dd6 <LoopFillZerobss>

08000dd2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dd2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000dd4:	3204      	adds	r2, #4

08000dd6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dd6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000dd8:	d3fb      	bcc.n	8000dd2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000dda:	f003 fca3 	bl	8004724 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000dde:	f7ff fc73 	bl	80006c8 <main>

08000de2 <LoopForever>:

LoopForever:
    b LoopForever
 8000de2:	e7fe      	b.n	8000de2 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000de4:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8000de8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000dec:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000df0:	08005914 	.word	0x08005914
  ldr r2, =_sbss
 8000df4:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000df8:	20000a18 	.word	0x20000a18

08000dfc <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000dfc:	e7fe      	b.n	8000dfc <ADC1_IRQHandler>
	...

08000e00 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e04:	4b08      	ldr	r3, [pc, #32]	; (8000e28 <HAL_Init+0x28>)
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	4a07      	ldr	r2, [pc, #28]	; (8000e28 <HAL_Init+0x28>)
 8000e0a:	f043 0310 	orr.w	r3, r3, #16
 8000e0e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e10:	2003      	movs	r0, #3
 8000e12:	f000 f94f 	bl	80010b4 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e16:	200f      	movs	r0, #15
 8000e18:	f000 f808 	bl	8000e2c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e1c:	f7ff fe1a 	bl	8000a54 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e20:	2300      	movs	r3, #0
}
 8000e22:	4618      	mov	r0, r3
 8000e24:	bd80      	pop	{r7, pc}
 8000e26:	bf00      	nop
 8000e28:	40022000 	.word	0x40022000

08000e2c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b082      	sub	sp, #8
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e34:	4b12      	ldr	r3, [pc, #72]	; (8000e80 <HAL_InitTick+0x54>)
 8000e36:	681a      	ldr	r2, [r3, #0]
 8000e38:	4b12      	ldr	r3, [pc, #72]	; (8000e84 <HAL_InitTick+0x58>)
 8000e3a:	781b      	ldrb	r3, [r3, #0]
 8000e3c:	4619      	mov	r1, r3
 8000e3e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e42:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e46:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	f000 f967 	bl	800111e <HAL_SYSTICK_Config>
 8000e50:	4603      	mov	r3, r0
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d001      	beq.n	8000e5a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e56:	2301      	movs	r3, #1
 8000e58:	e00e      	b.n	8000e78 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	2b0f      	cmp	r3, #15
 8000e5e:	d80a      	bhi.n	8000e76 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e60:	2200      	movs	r2, #0
 8000e62:	6879      	ldr	r1, [r7, #4]
 8000e64:	f04f 30ff 	mov.w	r0, #4294967295
 8000e68:	f000 f92f 	bl	80010ca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e6c:	4a06      	ldr	r2, [pc, #24]	; (8000e88 <HAL_InitTick+0x5c>)
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000e72:	2300      	movs	r3, #0
 8000e74:	e000      	b.n	8000e78 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e76:	2301      	movs	r3, #1
}
 8000e78:	4618      	mov	r0, r3
 8000e7a:	3708      	adds	r7, #8
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	bd80      	pop	{r7, pc}
 8000e80:	20000004 	.word	0x20000004
 8000e84:	2000000c 	.word	0x2000000c
 8000e88:	20000008 	.word	0x20000008

08000e8c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e90:	4b06      	ldr	r3, [pc, #24]	; (8000eac <HAL_IncTick+0x20>)
 8000e92:	781b      	ldrb	r3, [r3, #0]
 8000e94:	461a      	mov	r2, r3
 8000e96:	4b06      	ldr	r3, [pc, #24]	; (8000eb0 <HAL_IncTick+0x24>)
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	4413      	add	r3, r2
 8000e9c:	4a04      	ldr	r2, [pc, #16]	; (8000eb0 <HAL_IncTick+0x24>)
 8000e9e:	6013      	str	r3, [r2, #0]
}
 8000ea0:	bf00      	nop
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop
 8000eac:	2000000c 	.word	0x2000000c
 8000eb0:	20000a04 	.word	0x20000a04

08000eb4 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	af00      	add	r7, sp, #0
  return uwTick;  
 8000eb8:	4b03      	ldr	r3, [pc, #12]	; (8000ec8 <HAL_GetTick+0x14>)
 8000eba:	681b      	ldr	r3, [r3, #0]
}
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec4:	4770      	bx	lr
 8000ec6:	bf00      	nop
 8000ec8:	20000a04 	.word	0x20000a04

08000ecc <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b084      	sub	sp, #16
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ed4:	f7ff ffee 	bl	8000eb4 <HAL_GetTick>
 8000ed8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ede:	68fb      	ldr	r3, [r7, #12]
 8000ee0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ee4:	d005      	beq.n	8000ef2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ee6:	4b0a      	ldr	r3, [pc, #40]	; (8000f10 <HAL_Delay+0x44>)
 8000ee8:	781b      	ldrb	r3, [r3, #0]
 8000eea:	461a      	mov	r2, r3
 8000eec:	68fb      	ldr	r3, [r7, #12]
 8000eee:	4413      	add	r3, r2
 8000ef0:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000ef2:	bf00      	nop
 8000ef4:	f7ff ffde 	bl	8000eb4 <HAL_GetTick>
 8000ef8:	4602      	mov	r2, r0
 8000efa:	68bb      	ldr	r3, [r7, #8]
 8000efc:	1ad3      	subs	r3, r2, r3
 8000efe:	68fa      	ldr	r2, [r7, #12]
 8000f00:	429a      	cmp	r2, r3
 8000f02:	d8f7      	bhi.n	8000ef4 <HAL_Delay+0x28>
  {
  }
}
 8000f04:	bf00      	nop
 8000f06:	bf00      	nop
 8000f08:	3710      	adds	r7, #16
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bd80      	pop	{r7, pc}
 8000f0e:	bf00      	nop
 8000f10:	2000000c 	.word	0x2000000c

08000f14 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f14:	b480      	push	{r7}
 8000f16:	b085      	sub	sp, #20
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	f003 0307 	and.w	r3, r3, #7
 8000f22:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f24:	4b0c      	ldr	r3, [pc, #48]	; (8000f58 <__NVIC_SetPriorityGrouping+0x44>)
 8000f26:	68db      	ldr	r3, [r3, #12]
 8000f28:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f2a:	68ba      	ldr	r2, [r7, #8]
 8000f2c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f30:	4013      	ands	r3, r2
 8000f32:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f38:	68bb      	ldr	r3, [r7, #8]
 8000f3a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f3c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f44:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f46:	4a04      	ldr	r2, [pc, #16]	; (8000f58 <__NVIC_SetPriorityGrouping+0x44>)
 8000f48:	68bb      	ldr	r3, [r7, #8]
 8000f4a:	60d3      	str	r3, [r2, #12]
}
 8000f4c:	bf00      	nop
 8000f4e:	3714      	adds	r7, #20
 8000f50:	46bd      	mov	sp, r7
 8000f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f56:	4770      	bx	lr
 8000f58:	e000ed00 	.word	0xe000ed00

08000f5c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f60:	4b04      	ldr	r3, [pc, #16]	; (8000f74 <__NVIC_GetPriorityGrouping+0x18>)
 8000f62:	68db      	ldr	r3, [r3, #12]
 8000f64:	0a1b      	lsrs	r3, r3, #8
 8000f66:	f003 0307 	and.w	r3, r3, #7
}
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f72:	4770      	bx	lr
 8000f74:	e000ed00 	.word	0xe000ed00

08000f78 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	b083      	sub	sp, #12
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	4603      	mov	r3, r0
 8000f80:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	db0b      	blt.n	8000fa2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f8a:	79fb      	ldrb	r3, [r7, #7]
 8000f8c:	f003 021f 	and.w	r2, r3, #31
 8000f90:	4907      	ldr	r1, [pc, #28]	; (8000fb0 <__NVIC_EnableIRQ+0x38>)
 8000f92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f96:	095b      	lsrs	r3, r3, #5
 8000f98:	2001      	movs	r0, #1
 8000f9a:	fa00 f202 	lsl.w	r2, r0, r2
 8000f9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000fa2:	bf00      	nop
 8000fa4:	370c      	adds	r7, #12
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fac:	4770      	bx	lr
 8000fae:	bf00      	nop
 8000fb0:	e000e100 	.word	0xe000e100

08000fb4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	b083      	sub	sp, #12
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	4603      	mov	r3, r0
 8000fbc:	6039      	str	r1, [r7, #0]
 8000fbe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	db0a      	blt.n	8000fde <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fc8:	683b      	ldr	r3, [r7, #0]
 8000fca:	b2da      	uxtb	r2, r3
 8000fcc:	490c      	ldr	r1, [pc, #48]	; (8001000 <__NVIC_SetPriority+0x4c>)
 8000fce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fd2:	0112      	lsls	r2, r2, #4
 8000fd4:	b2d2      	uxtb	r2, r2
 8000fd6:	440b      	add	r3, r1
 8000fd8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fdc:	e00a      	b.n	8000ff4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fde:	683b      	ldr	r3, [r7, #0]
 8000fe0:	b2da      	uxtb	r2, r3
 8000fe2:	4908      	ldr	r1, [pc, #32]	; (8001004 <__NVIC_SetPriority+0x50>)
 8000fe4:	79fb      	ldrb	r3, [r7, #7]
 8000fe6:	f003 030f 	and.w	r3, r3, #15
 8000fea:	3b04      	subs	r3, #4
 8000fec:	0112      	lsls	r2, r2, #4
 8000fee:	b2d2      	uxtb	r2, r2
 8000ff0:	440b      	add	r3, r1
 8000ff2:	761a      	strb	r2, [r3, #24]
}
 8000ff4:	bf00      	nop
 8000ff6:	370c      	adds	r7, #12
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffe:	4770      	bx	lr
 8001000:	e000e100 	.word	0xe000e100
 8001004:	e000ed00 	.word	0xe000ed00

08001008 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001008:	b480      	push	{r7}
 800100a:	b089      	sub	sp, #36	; 0x24
 800100c:	af00      	add	r7, sp, #0
 800100e:	60f8      	str	r0, [r7, #12]
 8001010:	60b9      	str	r1, [r7, #8]
 8001012:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	f003 0307 	and.w	r3, r3, #7
 800101a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800101c:	69fb      	ldr	r3, [r7, #28]
 800101e:	f1c3 0307 	rsb	r3, r3, #7
 8001022:	2b04      	cmp	r3, #4
 8001024:	bf28      	it	cs
 8001026:	2304      	movcs	r3, #4
 8001028:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800102a:	69fb      	ldr	r3, [r7, #28]
 800102c:	3304      	adds	r3, #4
 800102e:	2b06      	cmp	r3, #6
 8001030:	d902      	bls.n	8001038 <NVIC_EncodePriority+0x30>
 8001032:	69fb      	ldr	r3, [r7, #28]
 8001034:	3b03      	subs	r3, #3
 8001036:	e000      	b.n	800103a <NVIC_EncodePriority+0x32>
 8001038:	2300      	movs	r3, #0
 800103a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800103c:	f04f 32ff 	mov.w	r2, #4294967295
 8001040:	69bb      	ldr	r3, [r7, #24]
 8001042:	fa02 f303 	lsl.w	r3, r2, r3
 8001046:	43da      	mvns	r2, r3
 8001048:	68bb      	ldr	r3, [r7, #8]
 800104a:	401a      	ands	r2, r3
 800104c:	697b      	ldr	r3, [r7, #20]
 800104e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001050:	f04f 31ff 	mov.w	r1, #4294967295
 8001054:	697b      	ldr	r3, [r7, #20]
 8001056:	fa01 f303 	lsl.w	r3, r1, r3
 800105a:	43d9      	mvns	r1, r3
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001060:	4313      	orrs	r3, r2
         );
}
 8001062:	4618      	mov	r0, r3
 8001064:	3724      	adds	r7, #36	; 0x24
 8001066:	46bd      	mov	sp, r7
 8001068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106c:	4770      	bx	lr
	...

08001070 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b082      	sub	sp, #8
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	3b01      	subs	r3, #1
 800107c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001080:	d301      	bcc.n	8001086 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001082:	2301      	movs	r3, #1
 8001084:	e00f      	b.n	80010a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001086:	4a0a      	ldr	r2, [pc, #40]	; (80010b0 <SysTick_Config+0x40>)
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	3b01      	subs	r3, #1
 800108c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800108e:	210f      	movs	r1, #15
 8001090:	f04f 30ff 	mov.w	r0, #4294967295
 8001094:	f7ff ff8e 	bl	8000fb4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001098:	4b05      	ldr	r3, [pc, #20]	; (80010b0 <SysTick_Config+0x40>)
 800109a:	2200      	movs	r2, #0
 800109c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800109e:	4b04      	ldr	r3, [pc, #16]	; (80010b0 <SysTick_Config+0x40>)
 80010a0:	2207      	movs	r2, #7
 80010a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010a4:	2300      	movs	r3, #0
}
 80010a6:	4618      	mov	r0, r3
 80010a8:	3708      	adds	r7, #8
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}
 80010ae:	bf00      	nop
 80010b0:	e000e010 	.word	0xe000e010

080010b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b082      	sub	sp, #8
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010bc:	6878      	ldr	r0, [r7, #4]
 80010be:	f7ff ff29 	bl	8000f14 <__NVIC_SetPriorityGrouping>
}
 80010c2:	bf00      	nop
 80010c4:	3708      	adds	r7, #8
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}

080010ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010ca:	b580      	push	{r7, lr}
 80010cc:	b086      	sub	sp, #24
 80010ce:	af00      	add	r7, sp, #0
 80010d0:	4603      	mov	r3, r0
 80010d2:	60b9      	str	r1, [r7, #8]
 80010d4:	607a      	str	r2, [r7, #4]
 80010d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80010d8:	2300      	movs	r3, #0
 80010da:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010dc:	f7ff ff3e 	bl	8000f5c <__NVIC_GetPriorityGrouping>
 80010e0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010e2:	687a      	ldr	r2, [r7, #4]
 80010e4:	68b9      	ldr	r1, [r7, #8]
 80010e6:	6978      	ldr	r0, [r7, #20]
 80010e8:	f7ff ff8e 	bl	8001008 <NVIC_EncodePriority>
 80010ec:	4602      	mov	r2, r0
 80010ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010f2:	4611      	mov	r1, r2
 80010f4:	4618      	mov	r0, r3
 80010f6:	f7ff ff5d 	bl	8000fb4 <__NVIC_SetPriority>
}
 80010fa:	bf00      	nop
 80010fc:	3718      	adds	r7, #24
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}

08001102 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001102:	b580      	push	{r7, lr}
 8001104:	b082      	sub	sp, #8
 8001106:	af00      	add	r7, sp, #0
 8001108:	4603      	mov	r3, r0
 800110a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800110c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001110:	4618      	mov	r0, r3
 8001112:	f7ff ff31 	bl	8000f78 <__NVIC_EnableIRQ>
}
 8001116:	bf00      	nop
 8001118:	3708      	adds	r7, #8
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}

0800111e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800111e:	b580      	push	{r7, lr}
 8001120:	b082      	sub	sp, #8
 8001122:	af00      	add	r7, sp, #0
 8001124:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001126:	6878      	ldr	r0, [r7, #4]
 8001128:	f7ff ffa2 	bl	8001070 <SysTick_Config>
 800112c:	4603      	mov	r3, r0
}
 800112e:	4618      	mov	r0, r3
 8001130:	3708      	adds	r7, #8
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}
	...

08001138 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001138:	b480      	push	{r7}
 800113a:	b087      	sub	sp, #28
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
 8001140:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001142:	2300      	movs	r3, #0
 8001144:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001146:	e14e      	b.n	80013e6 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	681a      	ldr	r2, [r3, #0]
 800114c:	2101      	movs	r1, #1
 800114e:	697b      	ldr	r3, [r7, #20]
 8001150:	fa01 f303 	lsl.w	r3, r1, r3
 8001154:	4013      	ands	r3, r2
 8001156:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	2b00      	cmp	r3, #0
 800115c:	f000 8140 	beq.w	80013e0 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001160:	683b      	ldr	r3, [r7, #0]
 8001162:	685b      	ldr	r3, [r3, #4]
 8001164:	f003 0303 	and.w	r3, r3, #3
 8001168:	2b01      	cmp	r3, #1
 800116a:	d005      	beq.n	8001178 <HAL_GPIO_Init+0x40>
 800116c:	683b      	ldr	r3, [r7, #0]
 800116e:	685b      	ldr	r3, [r3, #4]
 8001170:	f003 0303 	and.w	r3, r3, #3
 8001174:	2b02      	cmp	r3, #2
 8001176:	d130      	bne.n	80011da <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	689b      	ldr	r3, [r3, #8]
 800117c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800117e:	697b      	ldr	r3, [r7, #20]
 8001180:	005b      	lsls	r3, r3, #1
 8001182:	2203      	movs	r2, #3
 8001184:	fa02 f303 	lsl.w	r3, r2, r3
 8001188:	43db      	mvns	r3, r3
 800118a:	693a      	ldr	r2, [r7, #16]
 800118c:	4013      	ands	r3, r2
 800118e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001190:	683b      	ldr	r3, [r7, #0]
 8001192:	68da      	ldr	r2, [r3, #12]
 8001194:	697b      	ldr	r3, [r7, #20]
 8001196:	005b      	lsls	r3, r3, #1
 8001198:	fa02 f303 	lsl.w	r3, r2, r3
 800119c:	693a      	ldr	r2, [r7, #16]
 800119e:	4313      	orrs	r3, r2
 80011a0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	693a      	ldr	r2, [r7, #16]
 80011a6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	685b      	ldr	r3, [r3, #4]
 80011ac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80011ae:	2201      	movs	r2, #1
 80011b0:	697b      	ldr	r3, [r7, #20]
 80011b2:	fa02 f303 	lsl.w	r3, r2, r3
 80011b6:	43db      	mvns	r3, r3
 80011b8:	693a      	ldr	r2, [r7, #16]
 80011ba:	4013      	ands	r3, r2
 80011bc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80011be:	683b      	ldr	r3, [r7, #0]
 80011c0:	685b      	ldr	r3, [r3, #4]
 80011c2:	091b      	lsrs	r3, r3, #4
 80011c4:	f003 0201 	and.w	r2, r3, #1
 80011c8:	697b      	ldr	r3, [r7, #20]
 80011ca:	fa02 f303 	lsl.w	r3, r2, r3
 80011ce:	693a      	ldr	r2, [r7, #16]
 80011d0:	4313      	orrs	r3, r2
 80011d2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	693a      	ldr	r2, [r7, #16]
 80011d8:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80011da:	683b      	ldr	r3, [r7, #0]
 80011dc:	685b      	ldr	r3, [r3, #4]
 80011de:	f003 0303 	and.w	r3, r3, #3
 80011e2:	2b03      	cmp	r3, #3
 80011e4:	d017      	beq.n	8001216 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	68db      	ldr	r3, [r3, #12]
 80011ea:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80011ec:	697b      	ldr	r3, [r7, #20]
 80011ee:	005b      	lsls	r3, r3, #1
 80011f0:	2203      	movs	r2, #3
 80011f2:	fa02 f303 	lsl.w	r3, r2, r3
 80011f6:	43db      	mvns	r3, r3
 80011f8:	693a      	ldr	r2, [r7, #16]
 80011fa:	4013      	ands	r3, r2
 80011fc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80011fe:	683b      	ldr	r3, [r7, #0]
 8001200:	689a      	ldr	r2, [r3, #8]
 8001202:	697b      	ldr	r3, [r7, #20]
 8001204:	005b      	lsls	r3, r3, #1
 8001206:	fa02 f303 	lsl.w	r3, r2, r3
 800120a:	693a      	ldr	r2, [r7, #16]
 800120c:	4313      	orrs	r3, r2
 800120e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	693a      	ldr	r2, [r7, #16]
 8001214:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001216:	683b      	ldr	r3, [r7, #0]
 8001218:	685b      	ldr	r3, [r3, #4]
 800121a:	f003 0303 	and.w	r3, r3, #3
 800121e:	2b02      	cmp	r3, #2
 8001220:	d123      	bne.n	800126a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001222:	697b      	ldr	r3, [r7, #20]
 8001224:	08da      	lsrs	r2, r3, #3
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	3208      	adds	r2, #8
 800122a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800122e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001230:	697b      	ldr	r3, [r7, #20]
 8001232:	f003 0307 	and.w	r3, r3, #7
 8001236:	009b      	lsls	r3, r3, #2
 8001238:	220f      	movs	r2, #15
 800123a:	fa02 f303 	lsl.w	r3, r2, r3
 800123e:	43db      	mvns	r3, r3
 8001240:	693a      	ldr	r2, [r7, #16]
 8001242:	4013      	ands	r3, r2
 8001244:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001246:	683b      	ldr	r3, [r7, #0]
 8001248:	691a      	ldr	r2, [r3, #16]
 800124a:	697b      	ldr	r3, [r7, #20]
 800124c:	f003 0307 	and.w	r3, r3, #7
 8001250:	009b      	lsls	r3, r3, #2
 8001252:	fa02 f303 	lsl.w	r3, r2, r3
 8001256:	693a      	ldr	r2, [r7, #16]
 8001258:	4313      	orrs	r3, r2
 800125a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800125c:	697b      	ldr	r3, [r7, #20]
 800125e:	08da      	lsrs	r2, r3, #3
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	3208      	adds	r2, #8
 8001264:	6939      	ldr	r1, [r7, #16]
 8001266:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001270:	697b      	ldr	r3, [r7, #20]
 8001272:	005b      	lsls	r3, r3, #1
 8001274:	2203      	movs	r2, #3
 8001276:	fa02 f303 	lsl.w	r3, r2, r3
 800127a:	43db      	mvns	r3, r3
 800127c:	693a      	ldr	r2, [r7, #16]
 800127e:	4013      	ands	r3, r2
 8001280:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001282:	683b      	ldr	r3, [r7, #0]
 8001284:	685b      	ldr	r3, [r3, #4]
 8001286:	f003 0203 	and.w	r2, r3, #3
 800128a:	697b      	ldr	r3, [r7, #20]
 800128c:	005b      	lsls	r3, r3, #1
 800128e:	fa02 f303 	lsl.w	r3, r2, r3
 8001292:	693a      	ldr	r2, [r7, #16]
 8001294:	4313      	orrs	r3, r2
 8001296:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	693a      	ldr	r2, [r7, #16]
 800129c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800129e:	683b      	ldr	r3, [r7, #0]
 80012a0:	685b      	ldr	r3, [r3, #4]
 80012a2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	f000 809a 	beq.w	80013e0 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012ac:	4b55      	ldr	r3, [pc, #340]	; (8001404 <HAL_GPIO_Init+0x2cc>)
 80012ae:	699b      	ldr	r3, [r3, #24]
 80012b0:	4a54      	ldr	r2, [pc, #336]	; (8001404 <HAL_GPIO_Init+0x2cc>)
 80012b2:	f043 0301 	orr.w	r3, r3, #1
 80012b6:	6193      	str	r3, [r2, #24]
 80012b8:	4b52      	ldr	r3, [pc, #328]	; (8001404 <HAL_GPIO_Init+0x2cc>)
 80012ba:	699b      	ldr	r3, [r3, #24]
 80012bc:	f003 0301 	and.w	r3, r3, #1
 80012c0:	60bb      	str	r3, [r7, #8]
 80012c2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80012c4:	4a50      	ldr	r2, [pc, #320]	; (8001408 <HAL_GPIO_Init+0x2d0>)
 80012c6:	697b      	ldr	r3, [r7, #20]
 80012c8:	089b      	lsrs	r3, r3, #2
 80012ca:	3302      	adds	r3, #2
 80012cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012d0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80012d2:	697b      	ldr	r3, [r7, #20]
 80012d4:	f003 0303 	and.w	r3, r3, #3
 80012d8:	009b      	lsls	r3, r3, #2
 80012da:	220f      	movs	r2, #15
 80012dc:	fa02 f303 	lsl.w	r3, r2, r3
 80012e0:	43db      	mvns	r3, r3
 80012e2:	693a      	ldr	r2, [r7, #16]
 80012e4:	4013      	ands	r3, r2
 80012e6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80012ee:	d013      	beq.n	8001318 <HAL_GPIO_Init+0x1e0>
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	4a46      	ldr	r2, [pc, #280]	; (800140c <HAL_GPIO_Init+0x2d4>)
 80012f4:	4293      	cmp	r3, r2
 80012f6:	d00d      	beq.n	8001314 <HAL_GPIO_Init+0x1dc>
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	4a45      	ldr	r2, [pc, #276]	; (8001410 <HAL_GPIO_Init+0x2d8>)
 80012fc:	4293      	cmp	r3, r2
 80012fe:	d007      	beq.n	8001310 <HAL_GPIO_Init+0x1d8>
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	4a44      	ldr	r2, [pc, #272]	; (8001414 <HAL_GPIO_Init+0x2dc>)
 8001304:	4293      	cmp	r3, r2
 8001306:	d101      	bne.n	800130c <HAL_GPIO_Init+0x1d4>
 8001308:	2303      	movs	r3, #3
 800130a:	e006      	b.n	800131a <HAL_GPIO_Init+0x1e2>
 800130c:	2305      	movs	r3, #5
 800130e:	e004      	b.n	800131a <HAL_GPIO_Init+0x1e2>
 8001310:	2302      	movs	r3, #2
 8001312:	e002      	b.n	800131a <HAL_GPIO_Init+0x1e2>
 8001314:	2301      	movs	r3, #1
 8001316:	e000      	b.n	800131a <HAL_GPIO_Init+0x1e2>
 8001318:	2300      	movs	r3, #0
 800131a:	697a      	ldr	r2, [r7, #20]
 800131c:	f002 0203 	and.w	r2, r2, #3
 8001320:	0092      	lsls	r2, r2, #2
 8001322:	4093      	lsls	r3, r2
 8001324:	693a      	ldr	r2, [r7, #16]
 8001326:	4313      	orrs	r3, r2
 8001328:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800132a:	4937      	ldr	r1, [pc, #220]	; (8001408 <HAL_GPIO_Init+0x2d0>)
 800132c:	697b      	ldr	r3, [r7, #20]
 800132e:	089b      	lsrs	r3, r3, #2
 8001330:	3302      	adds	r3, #2
 8001332:	693a      	ldr	r2, [r7, #16]
 8001334:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001338:	4b37      	ldr	r3, [pc, #220]	; (8001418 <HAL_GPIO_Init+0x2e0>)
 800133a:	689b      	ldr	r3, [r3, #8]
 800133c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	43db      	mvns	r3, r3
 8001342:	693a      	ldr	r2, [r7, #16]
 8001344:	4013      	ands	r3, r2
 8001346:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001348:	683b      	ldr	r3, [r7, #0]
 800134a:	685b      	ldr	r3, [r3, #4]
 800134c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001350:	2b00      	cmp	r3, #0
 8001352:	d003      	beq.n	800135c <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8001354:	693a      	ldr	r2, [r7, #16]
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	4313      	orrs	r3, r2
 800135a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800135c:	4a2e      	ldr	r2, [pc, #184]	; (8001418 <HAL_GPIO_Init+0x2e0>)
 800135e:	693b      	ldr	r3, [r7, #16]
 8001360:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001362:	4b2d      	ldr	r3, [pc, #180]	; (8001418 <HAL_GPIO_Init+0x2e0>)
 8001364:	68db      	ldr	r3, [r3, #12]
 8001366:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	43db      	mvns	r3, r3
 800136c:	693a      	ldr	r2, [r7, #16]
 800136e:	4013      	ands	r3, r2
 8001370:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001372:	683b      	ldr	r3, [r7, #0]
 8001374:	685b      	ldr	r3, [r3, #4]
 8001376:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800137a:	2b00      	cmp	r3, #0
 800137c:	d003      	beq.n	8001386 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 800137e:	693a      	ldr	r2, [r7, #16]
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	4313      	orrs	r3, r2
 8001384:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001386:	4a24      	ldr	r2, [pc, #144]	; (8001418 <HAL_GPIO_Init+0x2e0>)
 8001388:	693b      	ldr	r3, [r7, #16]
 800138a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800138c:	4b22      	ldr	r3, [pc, #136]	; (8001418 <HAL_GPIO_Init+0x2e0>)
 800138e:	685b      	ldr	r3, [r3, #4]
 8001390:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	43db      	mvns	r3, r3
 8001396:	693a      	ldr	r2, [r7, #16]
 8001398:	4013      	ands	r3, r2
 800139a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800139c:	683b      	ldr	r3, [r7, #0]
 800139e:	685b      	ldr	r3, [r3, #4]
 80013a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d003      	beq.n	80013b0 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 80013a8:	693a      	ldr	r2, [r7, #16]
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	4313      	orrs	r3, r2
 80013ae:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80013b0:	4a19      	ldr	r2, [pc, #100]	; (8001418 <HAL_GPIO_Init+0x2e0>)
 80013b2:	693b      	ldr	r3, [r7, #16]
 80013b4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80013b6:	4b18      	ldr	r3, [pc, #96]	; (8001418 <HAL_GPIO_Init+0x2e0>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	43db      	mvns	r3, r3
 80013c0:	693a      	ldr	r2, [r7, #16]
 80013c2:	4013      	ands	r3, r2
 80013c4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80013c6:	683b      	ldr	r3, [r7, #0]
 80013c8:	685b      	ldr	r3, [r3, #4]
 80013ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d003      	beq.n	80013da <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 80013d2:	693a      	ldr	r2, [r7, #16]
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	4313      	orrs	r3, r2
 80013d8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80013da:	4a0f      	ldr	r2, [pc, #60]	; (8001418 <HAL_GPIO_Init+0x2e0>)
 80013dc:	693b      	ldr	r3, [r7, #16]
 80013de:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80013e0:	697b      	ldr	r3, [r7, #20]
 80013e2:	3301      	adds	r3, #1
 80013e4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013e6:	683b      	ldr	r3, [r7, #0]
 80013e8:	681a      	ldr	r2, [r3, #0]
 80013ea:	697b      	ldr	r3, [r7, #20]
 80013ec:	fa22 f303 	lsr.w	r3, r2, r3
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	f47f aea9 	bne.w	8001148 <HAL_GPIO_Init+0x10>
  }
}
 80013f6:	bf00      	nop
 80013f8:	bf00      	nop
 80013fa:	371c      	adds	r7, #28
 80013fc:	46bd      	mov	sp, r7
 80013fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001402:	4770      	bx	lr
 8001404:	40021000 	.word	0x40021000
 8001408:	40010000 	.word	0x40010000
 800140c:	48000400 	.word	0x48000400
 8001410:	48000800 	.word	0x48000800
 8001414:	48000c00 	.word	0x48000c00
 8001418:	40010400 	.word	0x40010400

0800141c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800141c:	b480      	push	{r7}
 800141e:	b085      	sub	sp, #20
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
 8001424:	460b      	mov	r3, r1
 8001426:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	691a      	ldr	r2, [r3, #16]
 800142c:	887b      	ldrh	r3, [r7, #2]
 800142e:	4013      	ands	r3, r2
 8001430:	2b00      	cmp	r3, #0
 8001432:	d002      	beq.n	800143a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001434:	2301      	movs	r3, #1
 8001436:	73fb      	strb	r3, [r7, #15]
 8001438:	e001      	b.n	800143e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800143a:	2300      	movs	r3, #0
 800143c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800143e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001440:	4618      	mov	r0, r3
 8001442:	3714      	adds	r7, #20
 8001444:	46bd      	mov	sp, r7
 8001446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144a:	4770      	bx	lr

0800144c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b082      	sub	sp, #8
 8001450:	af00      	add	r7, sp, #0
 8001452:	4603      	mov	r3, r0
 8001454:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001456:	4b08      	ldr	r3, [pc, #32]	; (8001478 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001458:	695a      	ldr	r2, [r3, #20]
 800145a:	88fb      	ldrh	r3, [r7, #6]
 800145c:	4013      	ands	r3, r2
 800145e:	2b00      	cmp	r3, #0
 8001460:	d006      	beq.n	8001470 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001462:	4a05      	ldr	r2, [pc, #20]	; (8001478 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001464:	88fb      	ldrh	r3, [r7, #6]
 8001466:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001468:	88fb      	ldrh	r3, [r7, #6]
 800146a:	4618      	mov	r0, r3
 800146c:	f000 f806 	bl	800147c <HAL_GPIO_EXTI_Callback>
  }
}
 8001470:	bf00      	nop
 8001472:	3708      	adds	r7, #8
 8001474:	46bd      	mov	sp, r7
 8001476:	bd80      	pop	{r7, pc}
 8001478:	40010400 	.word	0x40010400

0800147c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800147c:	b480      	push	{r7}
 800147e:	b083      	sub	sp, #12
 8001480:	af00      	add	r7, sp, #0
 8001482:	4603      	mov	r3, r0
 8001484:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001486:	bf00      	nop
 8001488:	370c      	adds	r7, #12
 800148a:	46bd      	mov	sp, r7
 800148c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001490:	4770      	bx	lr
	...

08001494 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 800149a:	af00      	add	r7, sp, #0
 800149c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014a0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80014a4:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80014a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014aa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d102      	bne.n	80014ba <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 80014b4:	2301      	movs	r3, #1
 80014b6:	f001 b823 	b.w	8002500 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80014ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014be:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f003 0301 	and.w	r3, r3, #1
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	f000 817d 	beq.w	80017ca <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80014d0:	4bbc      	ldr	r3, [pc, #752]	; (80017c4 <HAL_RCC_OscConfig+0x330>)
 80014d2:	685b      	ldr	r3, [r3, #4]
 80014d4:	f003 030c 	and.w	r3, r3, #12
 80014d8:	2b04      	cmp	r3, #4
 80014da:	d00c      	beq.n	80014f6 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80014dc:	4bb9      	ldr	r3, [pc, #740]	; (80017c4 <HAL_RCC_OscConfig+0x330>)
 80014de:	685b      	ldr	r3, [r3, #4]
 80014e0:	f003 030c 	and.w	r3, r3, #12
 80014e4:	2b08      	cmp	r3, #8
 80014e6:	d15c      	bne.n	80015a2 <HAL_RCC_OscConfig+0x10e>
 80014e8:	4bb6      	ldr	r3, [pc, #728]	; (80017c4 <HAL_RCC_OscConfig+0x330>)
 80014ea:	685b      	ldr	r3, [r3, #4]
 80014ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80014f4:	d155      	bne.n	80015a2 <HAL_RCC_OscConfig+0x10e>
 80014f6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80014fa:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014fe:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8001502:	fa93 f3a3 	rbit	r3, r3
 8001506:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800150a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800150e:	fab3 f383 	clz	r3, r3
 8001512:	b2db      	uxtb	r3, r3
 8001514:	095b      	lsrs	r3, r3, #5
 8001516:	b2db      	uxtb	r3, r3
 8001518:	f043 0301 	orr.w	r3, r3, #1
 800151c:	b2db      	uxtb	r3, r3
 800151e:	2b01      	cmp	r3, #1
 8001520:	d102      	bne.n	8001528 <HAL_RCC_OscConfig+0x94>
 8001522:	4ba8      	ldr	r3, [pc, #672]	; (80017c4 <HAL_RCC_OscConfig+0x330>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	e015      	b.n	8001554 <HAL_RCC_OscConfig+0xc0>
 8001528:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800152c:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001530:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8001534:	fa93 f3a3 	rbit	r3, r3
 8001538:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 800153c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001540:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001544:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8001548:	fa93 f3a3 	rbit	r3, r3
 800154c:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8001550:	4b9c      	ldr	r3, [pc, #624]	; (80017c4 <HAL_RCC_OscConfig+0x330>)
 8001552:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001554:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001558:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 800155c:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001560:	fa92 f2a2 	rbit	r2, r2
 8001564:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8001568:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 800156c:	fab2 f282 	clz	r2, r2
 8001570:	b2d2      	uxtb	r2, r2
 8001572:	f042 0220 	orr.w	r2, r2, #32
 8001576:	b2d2      	uxtb	r2, r2
 8001578:	f002 021f 	and.w	r2, r2, #31
 800157c:	2101      	movs	r1, #1
 800157e:	fa01 f202 	lsl.w	r2, r1, r2
 8001582:	4013      	ands	r3, r2
 8001584:	2b00      	cmp	r3, #0
 8001586:	f000 811f 	beq.w	80017c8 <HAL_RCC_OscConfig+0x334>
 800158a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800158e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	685b      	ldr	r3, [r3, #4]
 8001596:	2b00      	cmp	r3, #0
 8001598:	f040 8116 	bne.w	80017c8 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 800159c:	2301      	movs	r3, #1
 800159e:	f000 bfaf 	b.w	8002500 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80015a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015a6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	685b      	ldr	r3, [r3, #4]
 80015ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015b2:	d106      	bne.n	80015c2 <HAL_RCC_OscConfig+0x12e>
 80015b4:	4b83      	ldr	r3, [pc, #524]	; (80017c4 <HAL_RCC_OscConfig+0x330>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	4a82      	ldr	r2, [pc, #520]	; (80017c4 <HAL_RCC_OscConfig+0x330>)
 80015ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015be:	6013      	str	r3, [r2, #0]
 80015c0:	e036      	b.n	8001630 <HAL_RCC_OscConfig+0x19c>
 80015c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015c6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	685b      	ldr	r3, [r3, #4]
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d10c      	bne.n	80015ec <HAL_RCC_OscConfig+0x158>
 80015d2:	4b7c      	ldr	r3, [pc, #496]	; (80017c4 <HAL_RCC_OscConfig+0x330>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	4a7b      	ldr	r2, [pc, #492]	; (80017c4 <HAL_RCC_OscConfig+0x330>)
 80015d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80015dc:	6013      	str	r3, [r2, #0]
 80015de:	4b79      	ldr	r3, [pc, #484]	; (80017c4 <HAL_RCC_OscConfig+0x330>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	4a78      	ldr	r2, [pc, #480]	; (80017c4 <HAL_RCC_OscConfig+0x330>)
 80015e4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80015e8:	6013      	str	r3, [r2, #0]
 80015ea:	e021      	b.n	8001630 <HAL_RCC_OscConfig+0x19c>
 80015ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015f0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	685b      	ldr	r3, [r3, #4]
 80015f8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80015fc:	d10c      	bne.n	8001618 <HAL_RCC_OscConfig+0x184>
 80015fe:	4b71      	ldr	r3, [pc, #452]	; (80017c4 <HAL_RCC_OscConfig+0x330>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	4a70      	ldr	r2, [pc, #448]	; (80017c4 <HAL_RCC_OscConfig+0x330>)
 8001604:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001608:	6013      	str	r3, [r2, #0]
 800160a:	4b6e      	ldr	r3, [pc, #440]	; (80017c4 <HAL_RCC_OscConfig+0x330>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	4a6d      	ldr	r2, [pc, #436]	; (80017c4 <HAL_RCC_OscConfig+0x330>)
 8001610:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001614:	6013      	str	r3, [r2, #0]
 8001616:	e00b      	b.n	8001630 <HAL_RCC_OscConfig+0x19c>
 8001618:	4b6a      	ldr	r3, [pc, #424]	; (80017c4 <HAL_RCC_OscConfig+0x330>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	4a69      	ldr	r2, [pc, #420]	; (80017c4 <HAL_RCC_OscConfig+0x330>)
 800161e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001622:	6013      	str	r3, [r2, #0]
 8001624:	4b67      	ldr	r3, [pc, #412]	; (80017c4 <HAL_RCC_OscConfig+0x330>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	4a66      	ldr	r2, [pc, #408]	; (80017c4 <HAL_RCC_OscConfig+0x330>)
 800162a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800162e:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001630:	4b64      	ldr	r3, [pc, #400]	; (80017c4 <HAL_RCC_OscConfig+0x330>)
 8001632:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001634:	f023 020f 	bic.w	r2, r3, #15
 8001638:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800163c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	689b      	ldr	r3, [r3, #8]
 8001644:	495f      	ldr	r1, [pc, #380]	; (80017c4 <HAL_RCC_OscConfig+0x330>)
 8001646:	4313      	orrs	r3, r2
 8001648:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800164a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800164e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	685b      	ldr	r3, [r3, #4]
 8001656:	2b00      	cmp	r3, #0
 8001658:	d059      	beq.n	800170e <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800165a:	f7ff fc2b 	bl	8000eb4 <HAL_GetTick>
 800165e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001662:	e00a      	b.n	800167a <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001664:	f7ff fc26 	bl	8000eb4 <HAL_GetTick>
 8001668:	4602      	mov	r2, r0
 800166a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800166e:	1ad3      	subs	r3, r2, r3
 8001670:	2b64      	cmp	r3, #100	; 0x64
 8001672:	d902      	bls.n	800167a <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8001674:	2303      	movs	r3, #3
 8001676:	f000 bf43 	b.w	8002500 <HAL_RCC_OscConfig+0x106c>
 800167a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800167e:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001682:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8001686:	fa93 f3a3 	rbit	r3, r3
 800168a:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 800168e:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001692:	fab3 f383 	clz	r3, r3
 8001696:	b2db      	uxtb	r3, r3
 8001698:	095b      	lsrs	r3, r3, #5
 800169a:	b2db      	uxtb	r3, r3
 800169c:	f043 0301 	orr.w	r3, r3, #1
 80016a0:	b2db      	uxtb	r3, r3
 80016a2:	2b01      	cmp	r3, #1
 80016a4:	d102      	bne.n	80016ac <HAL_RCC_OscConfig+0x218>
 80016a6:	4b47      	ldr	r3, [pc, #284]	; (80017c4 <HAL_RCC_OscConfig+0x330>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	e015      	b.n	80016d8 <HAL_RCC_OscConfig+0x244>
 80016ac:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80016b0:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016b4:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80016b8:	fa93 f3a3 	rbit	r3, r3
 80016bc:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80016c0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80016c4:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80016c8:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80016cc:	fa93 f3a3 	rbit	r3, r3
 80016d0:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 80016d4:	4b3b      	ldr	r3, [pc, #236]	; (80017c4 <HAL_RCC_OscConfig+0x330>)
 80016d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016d8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80016dc:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 80016e0:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80016e4:	fa92 f2a2 	rbit	r2, r2
 80016e8:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 80016ec:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 80016f0:	fab2 f282 	clz	r2, r2
 80016f4:	b2d2      	uxtb	r2, r2
 80016f6:	f042 0220 	orr.w	r2, r2, #32
 80016fa:	b2d2      	uxtb	r2, r2
 80016fc:	f002 021f 	and.w	r2, r2, #31
 8001700:	2101      	movs	r1, #1
 8001702:	fa01 f202 	lsl.w	r2, r1, r2
 8001706:	4013      	ands	r3, r2
 8001708:	2b00      	cmp	r3, #0
 800170a:	d0ab      	beq.n	8001664 <HAL_RCC_OscConfig+0x1d0>
 800170c:	e05d      	b.n	80017ca <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800170e:	f7ff fbd1 	bl	8000eb4 <HAL_GetTick>
 8001712:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001716:	e00a      	b.n	800172e <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001718:	f7ff fbcc 	bl	8000eb4 <HAL_GetTick>
 800171c:	4602      	mov	r2, r0
 800171e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001722:	1ad3      	subs	r3, r2, r3
 8001724:	2b64      	cmp	r3, #100	; 0x64
 8001726:	d902      	bls.n	800172e <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8001728:	2303      	movs	r3, #3
 800172a:	f000 bee9 	b.w	8002500 <HAL_RCC_OscConfig+0x106c>
 800172e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001732:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001736:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800173a:	fa93 f3a3 	rbit	r3, r3
 800173e:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8001742:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001746:	fab3 f383 	clz	r3, r3
 800174a:	b2db      	uxtb	r3, r3
 800174c:	095b      	lsrs	r3, r3, #5
 800174e:	b2db      	uxtb	r3, r3
 8001750:	f043 0301 	orr.w	r3, r3, #1
 8001754:	b2db      	uxtb	r3, r3
 8001756:	2b01      	cmp	r3, #1
 8001758:	d102      	bne.n	8001760 <HAL_RCC_OscConfig+0x2cc>
 800175a:	4b1a      	ldr	r3, [pc, #104]	; (80017c4 <HAL_RCC_OscConfig+0x330>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	e015      	b.n	800178c <HAL_RCC_OscConfig+0x2f8>
 8001760:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001764:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001768:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 800176c:	fa93 f3a3 	rbit	r3, r3
 8001770:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001774:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001778:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 800177c:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8001780:	fa93 f3a3 	rbit	r3, r3
 8001784:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8001788:	4b0e      	ldr	r3, [pc, #56]	; (80017c4 <HAL_RCC_OscConfig+0x330>)
 800178a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800178c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001790:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8001794:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001798:	fa92 f2a2 	rbit	r2, r2
 800179c:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 80017a0:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 80017a4:	fab2 f282 	clz	r2, r2
 80017a8:	b2d2      	uxtb	r2, r2
 80017aa:	f042 0220 	orr.w	r2, r2, #32
 80017ae:	b2d2      	uxtb	r2, r2
 80017b0:	f002 021f 	and.w	r2, r2, #31
 80017b4:	2101      	movs	r1, #1
 80017b6:	fa01 f202 	lsl.w	r2, r1, r2
 80017ba:	4013      	ands	r3, r2
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d1ab      	bne.n	8001718 <HAL_RCC_OscConfig+0x284>
 80017c0:	e003      	b.n	80017ca <HAL_RCC_OscConfig+0x336>
 80017c2:	bf00      	nop
 80017c4:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80017ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017ce:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f003 0302 	and.w	r3, r3, #2
 80017da:	2b00      	cmp	r3, #0
 80017dc:	f000 817d 	beq.w	8001ada <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80017e0:	4ba6      	ldr	r3, [pc, #664]	; (8001a7c <HAL_RCC_OscConfig+0x5e8>)
 80017e2:	685b      	ldr	r3, [r3, #4]
 80017e4:	f003 030c 	and.w	r3, r3, #12
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d00b      	beq.n	8001804 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80017ec:	4ba3      	ldr	r3, [pc, #652]	; (8001a7c <HAL_RCC_OscConfig+0x5e8>)
 80017ee:	685b      	ldr	r3, [r3, #4]
 80017f0:	f003 030c 	and.w	r3, r3, #12
 80017f4:	2b08      	cmp	r3, #8
 80017f6:	d172      	bne.n	80018de <HAL_RCC_OscConfig+0x44a>
 80017f8:	4ba0      	ldr	r3, [pc, #640]	; (8001a7c <HAL_RCC_OscConfig+0x5e8>)
 80017fa:	685b      	ldr	r3, [r3, #4]
 80017fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001800:	2b00      	cmp	r3, #0
 8001802:	d16c      	bne.n	80018de <HAL_RCC_OscConfig+0x44a>
 8001804:	2302      	movs	r3, #2
 8001806:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800180a:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800180e:	fa93 f3a3 	rbit	r3, r3
 8001812:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8001816:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800181a:	fab3 f383 	clz	r3, r3
 800181e:	b2db      	uxtb	r3, r3
 8001820:	095b      	lsrs	r3, r3, #5
 8001822:	b2db      	uxtb	r3, r3
 8001824:	f043 0301 	orr.w	r3, r3, #1
 8001828:	b2db      	uxtb	r3, r3
 800182a:	2b01      	cmp	r3, #1
 800182c:	d102      	bne.n	8001834 <HAL_RCC_OscConfig+0x3a0>
 800182e:	4b93      	ldr	r3, [pc, #588]	; (8001a7c <HAL_RCC_OscConfig+0x5e8>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	e013      	b.n	800185c <HAL_RCC_OscConfig+0x3c8>
 8001834:	2302      	movs	r3, #2
 8001836:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800183a:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 800183e:	fa93 f3a3 	rbit	r3, r3
 8001842:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001846:	2302      	movs	r3, #2
 8001848:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 800184c:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001850:	fa93 f3a3 	rbit	r3, r3
 8001854:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8001858:	4b88      	ldr	r3, [pc, #544]	; (8001a7c <HAL_RCC_OscConfig+0x5e8>)
 800185a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800185c:	2202      	movs	r2, #2
 800185e:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8001862:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001866:	fa92 f2a2 	rbit	r2, r2
 800186a:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 800186e:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8001872:	fab2 f282 	clz	r2, r2
 8001876:	b2d2      	uxtb	r2, r2
 8001878:	f042 0220 	orr.w	r2, r2, #32
 800187c:	b2d2      	uxtb	r2, r2
 800187e:	f002 021f 	and.w	r2, r2, #31
 8001882:	2101      	movs	r1, #1
 8001884:	fa01 f202 	lsl.w	r2, r1, r2
 8001888:	4013      	ands	r3, r2
 800188a:	2b00      	cmp	r3, #0
 800188c:	d00a      	beq.n	80018a4 <HAL_RCC_OscConfig+0x410>
 800188e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001892:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	691b      	ldr	r3, [r3, #16]
 800189a:	2b01      	cmp	r3, #1
 800189c:	d002      	beq.n	80018a4 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 800189e:	2301      	movs	r3, #1
 80018a0:	f000 be2e 	b.w	8002500 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018a4:	4b75      	ldr	r3, [pc, #468]	; (8001a7c <HAL_RCC_OscConfig+0x5e8>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80018ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018b0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	695b      	ldr	r3, [r3, #20]
 80018b8:	21f8      	movs	r1, #248	; 0xf8
 80018ba:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018be:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80018c2:	fa91 f1a1 	rbit	r1, r1
 80018c6:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 80018ca:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 80018ce:	fab1 f181 	clz	r1, r1
 80018d2:	b2c9      	uxtb	r1, r1
 80018d4:	408b      	lsls	r3, r1
 80018d6:	4969      	ldr	r1, [pc, #420]	; (8001a7c <HAL_RCC_OscConfig+0x5e8>)
 80018d8:	4313      	orrs	r3, r2
 80018da:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018dc:	e0fd      	b.n	8001ada <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80018de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018e2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	691b      	ldr	r3, [r3, #16]
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	f000 8088 	beq.w	8001a00 <HAL_RCC_OscConfig+0x56c>
 80018f0:	2301      	movs	r3, #1
 80018f2:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018f6:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80018fa:	fa93 f3a3 	rbit	r3, r3
 80018fe:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8001902:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001906:	fab3 f383 	clz	r3, r3
 800190a:	b2db      	uxtb	r3, r3
 800190c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001910:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001914:	009b      	lsls	r3, r3, #2
 8001916:	461a      	mov	r2, r3
 8001918:	2301      	movs	r3, #1
 800191a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800191c:	f7ff faca 	bl	8000eb4 <HAL_GetTick>
 8001920:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001924:	e00a      	b.n	800193c <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001926:	f7ff fac5 	bl	8000eb4 <HAL_GetTick>
 800192a:	4602      	mov	r2, r0
 800192c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001930:	1ad3      	subs	r3, r2, r3
 8001932:	2b02      	cmp	r3, #2
 8001934:	d902      	bls.n	800193c <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8001936:	2303      	movs	r3, #3
 8001938:	f000 bde2 	b.w	8002500 <HAL_RCC_OscConfig+0x106c>
 800193c:	2302      	movs	r3, #2
 800193e:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001942:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8001946:	fa93 f3a3 	rbit	r3, r3
 800194a:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 800194e:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001952:	fab3 f383 	clz	r3, r3
 8001956:	b2db      	uxtb	r3, r3
 8001958:	095b      	lsrs	r3, r3, #5
 800195a:	b2db      	uxtb	r3, r3
 800195c:	f043 0301 	orr.w	r3, r3, #1
 8001960:	b2db      	uxtb	r3, r3
 8001962:	2b01      	cmp	r3, #1
 8001964:	d102      	bne.n	800196c <HAL_RCC_OscConfig+0x4d8>
 8001966:	4b45      	ldr	r3, [pc, #276]	; (8001a7c <HAL_RCC_OscConfig+0x5e8>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	e013      	b.n	8001994 <HAL_RCC_OscConfig+0x500>
 800196c:	2302      	movs	r3, #2
 800196e:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001972:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8001976:	fa93 f3a3 	rbit	r3, r3
 800197a:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800197e:	2302      	movs	r3, #2
 8001980:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001984:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8001988:	fa93 f3a3 	rbit	r3, r3
 800198c:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8001990:	4b3a      	ldr	r3, [pc, #232]	; (8001a7c <HAL_RCC_OscConfig+0x5e8>)
 8001992:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001994:	2202      	movs	r2, #2
 8001996:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 800199a:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800199e:	fa92 f2a2 	rbit	r2, r2
 80019a2:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 80019a6:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80019aa:	fab2 f282 	clz	r2, r2
 80019ae:	b2d2      	uxtb	r2, r2
 80019b0:	f042 0220 	orr.w	r2, r2, #32
 80019b4:	b2d2      	uxtb	r2, r2
 80019b6:	f002 021f 	and.w	r2, r2, #31
 80019ba:	2101      	movs	r1, #1
 80019bc:	fa01 f202 	lsl.w	r2, r1, r2
 80019c0:	4013      	ands	r3, r2
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d0af      	beq.n	8001926 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019c6:	4b2d      	ldr	r3, [pc, #180]	; (8001a7c <HAL_RCC_OscConfig+0x5e8>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80019ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019d2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	695b      	ldr	r3, [r3, #20]
 80019da:	21f8      	movs	r1, #248	; 0xf8
 80019dc:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019e0:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80019e4:	fa91 f1a1 	rbit	r1, r1
 80019e8:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 80019ec:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 80019f0:	fab1 f181 	clz	r1, r1
 80019f4:	b2c9      	uxtb	r1, r1
 80019f6:	408b      	lsls	r3, r1
 80019f8:	4920      	ldr	r1, [pc, #128]	; (8001a7c <HAL_RCC_OscConfig+0x5e8>)
 80019fa:	4313      	orrs	r3, r2
 80019fc:	600b      	str	r3, [r1, #0]
 80019fe:	e06c      	b.n	8001ada <HAL_RCC_OscConfig+0x646>
 8001a00:	2301      	movs	r3, #1
 8001a02:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a06:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001a0a:	fa93 f3a3 	rbit	r3, r3
 8001a0e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8001a12:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a16:	fab3 f383 	clz	r3, r3
 8001a1a:	b2db      	uxtb	r3, r3
 8001a1c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001a20:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001a24:	009b      	lsls	r3, r3, #2
 8001a26:	461a      	mov	r2, r3
 8001a28:	2300      	movs	r3, #0
 8001a2a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a2c:	f7ff fa42 	bl	8000eb4 <HAL_GetTick>
 8001a30:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a34:	e00a      	b.n	8001a4c <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a36:	f7ff fa3d 	bl	8000eb4 <HAL_GetTick>
 8001a3a:	4602      	mov	r2, r0
 8001a3c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001a40:	1ad3      	subs	r3, r2, r3
 8001a42:	2b02      	cmp	r3, #2
 8001a44:	d902      	bls.n	8001a4c <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8001a46:	2303      	movs	r3, #3
 8001a48:	f000 bd5a 	b.w	8002500 <HAL_RCC_OscConfig+0x106c>
 8001a4c:	2302      	movs	r3, #2
 8001a4e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a52:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001a56:	fa93 f3a3 	rbit	r3, r3
 8001a5a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8001a5e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a62:	fab3 f383 	clz	r3, r3
 8001a66:	b2db      	uxtb	r3, r3
 8001a68:	095b      	lsrs	r3, r3, #5
 8001a6a:	b2db      	uxtb	r3, r3
 8001a6c:	f043 0301 	orr.w	r3, r3, #1
 8001a70:	b2db      	uxtb	r3, r3
 8001a72:	2b01      	cmp	r3, #1
 8001a74:	d104      	bne.n	8001a80 <HAL_RCC_OscConfig+0x5ec>
 8001a76:	4b01      	ldr	r3, [pc, #4]	; (8001a7c <HAL_RCC_OscConfig+0x5e8>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	e015      	b.n	8001aa8 <HAL_RCC_OscConfig+0x614>
 8001a7c:	40021000 	.word	0x40021000
 8001a80:	2302      	movs	r3, #2
 8001a82:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a86:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001a8a:	fa93 f3a3 	rbit	r3, r3
 8001a8e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001a92:	2302      	movs	r3, #2
 8001a94:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001a98:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001a9c:	fa93 f3a3 	rbit	r3, r3
 8001aa0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8001aa4:	4bc8      	ldr	r3, [pc, #800]	; (8001dc8 <HAL_RCC_OscConfig+0x934>)
 8001aa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aa8:	2202      	movs	r2, #2
 8001aaa:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8001aae:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001ab2:	fa92 f2a2 	rbit	r2, r2
 8001ab6:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8001aba:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8001abe:	fab2 f282 	clz	r2, r2
 8001ac2:	b2d2      	uxtb	r2, r2
 8001ac4:	f042 0220 	orr.w	r2, r2, #32
 8001ac8:	b2d2      	uxtb	r2, r2
 8001aca:	f002 021f 	and.w	r2, r2, #31
 8001ace:	2101      	movs	r1, #1
 8001ad0:	fa01 f202 	lsl.w	r2, r1, r2
 8001ad4:	4013      	ands	r3, r2
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d1ad      	bne.n	8001a36 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ada:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ade:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f003 0308 	and.w	r3, r3, #8
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	f000 8110 	beq.w	8001d10 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001af0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001af4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	699b      	ldr	r3, [r3, #24]
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d079      	beq.n	8001bf4 <HAL_RCC_OscConfig+0x760>
 8001b00:	2301      	movs	r3, #1
 8001b02:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b06:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001b0a:	fa93 f3a3 	rbit	r3, r3
 8001b0e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8001b12:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b16:	fab3 f383 	clz	r3, r3
 8001b1a:	b2db      	uxtb	r3, r3
 8001b1c:	461a      	mov	r2, r3
 8001b1e:	4bab      	ldr	r3, [pc, #684]	; (8001dcc <HAL_RCC_OscConfig+0x938>)
 8001b20:	4413      	add	r3, r2
 8001b22:	009b      	lsls	r3, r3, #2
 8001b24:	461a      	mov	r2, r3
 8001b26:	2301      	movs	r3, #1
 8001b28:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b2a:	f7ff f9c3 	bl	8000eb4 <HAL_GetTick>
 8001b2e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b32:	e00a      	b.n	8001b4a <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b34:	f7ff f9be 	bl	8000eb4 <HAL_GetTick>
 8001b38:	4602      	mov	r2, r0
 8001b3a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001b3e:	1ad3      	subs	r3, r2, r3
 8001b40:	2b02      	cmp	r3, #2
 8001b42:	d902      	bls.n	8001b4a <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8001b44:	2303      	movs	r3, #3
 8001b46:	f000 bcdb 	b.w	8002500 <HAL_RCC_OscConfig+0x106c>
 8001b4a:	2302      	movs	r3, #2
 8001b4c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b50:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001b54:	fa93 f3a3 	rbit	r3, r3
 8001b58:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001b5c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b60:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001b64:	2202      	movs	r2, #2
 8001b66:	601a      	str	r2, [r3, #0]
 8001b68:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b6c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	fa93 f2a3 	rbit	r2, r3
 8001b76:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b7a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001b7e:	601a      	str	r2, [r3, #0]
 8001b80:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b84:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001b88:	2202      	movs	r2, #2
 8001b8a:	601a      	str	r2, [r3, #0]
 8001b8c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b90:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	fa93 f2a3 	rbit	r2, r3
 8001b9a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b9e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001ba2:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ba4:	4b88      	ldr	r3, [pc, #544]	; (8001dc8 <HAL_RCC_OscConfig+0x934>)
 8001ba6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001ba8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bac:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001bb0:	2102      	movs	r1, #2
 8001bb2:	6019      	str	r1, [r3, #0]
 8001bb4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bb8:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	fa93 f1a3 	rbit	r1, r3
 8001bc2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bc6:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001bca:	6019      	str	r1, [r3, #0]
  return result;
 8001bcc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bd0:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	fab3 f383 	clz	r3, r3
 8001bda:	b2db      	uxtb	r3, r3
 8001bdc:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001be0:	b2db      	uxtb	r3, r3
 8001be2:	f003 031f 	and.w	r3, r3, #31
 8001be6:	2101      	movs	r1, #1
 8001be8:	fa01 f303 	lsl.w	r3, r1, r3
 8001bec:	4013      	ands	r3, r2
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d0a0      	beq.n	8001b34 <HAL_RCC_OscConfig+0x6a0>
 8001bf2:	e08d      	b.n	8001d10 <HAL_RCC_OscConfig+0x87c>
 8001bf4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bf8:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001bfc:	2201      	movs	r2, #1
 8001bfe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c00:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c04:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	fa93 f2a3 	rbit	r2, r3
 8001c0e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c12:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001c16:	601a      	str	r2, [r3, #0]
  return result;
 8001c18:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c1c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001c20:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c22:	fab3 f383 	clz	r3, r3
 8001c26:	b2db      	uxtb	r3, r3
 8001c28:	461a      	mov	r2, r3
 8001c2a:	4b68      	ldr	r3, [pc, #416]	; (8001dcc <HAL_RCC_OscConfig+0x938>)
 8001c2c:	4413      	add	r3, r2
 8001c2e:	009b      	lsls	r3, r3, #2
 8001c30:	461a      	mov	r2, r3
 8001c32:	2300      	movs	r3, #0
 8001c34:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c36:	f7ff f93d 	bl	8000eb4 <HAL_GetTick>
 8001c3a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c3e:	e00a      	b.n	8001c56 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c40:	f7ff f938 	bl	8000eb4 <HAL_GetTick>
 8001c44:	4602      	mov	r2, r0
 8001c46:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001c4a:	1ad3      	subs	r3, r2, r3
 8001c4c:	2b02      	cmp	r3, #2
 8001c4e:	d902      	bls.n	8001c56 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8001c50:	2303      	movs	r3, #3
 8001c52:	f000 bc55 	b.w	8002500 <HAL_RCC_OscConfig+0x106c>
 8001c56:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c5a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001c5e:	2202      	movs	r2, #2
 8001c60:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c62:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c66:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	fa93 f2a3 	rbit	r2, r3
 8001c70:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c74:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001c78:	601a      	str	r2, [r3, #0]
 8001c7a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c7e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001c82:	2202      	movs	r2, #2
 8001c84:	601a      	str	r2, [r3, #0]
 8001c86:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c8a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	fa93 f2a3 	rbit	r2, r3
 8001c94:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c98:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001c9c:	601a      	str	r2, [r3, #0]
 8001c9e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ca2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001ca6:	2202      	movs	r2, #2
 8001ca8:	601a      	str	r2, [r3, #0]
 8001caa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cae:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	fa93 f2a3 	rbit	r2, r3
 8001cb8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cbc:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001cc0:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001cc2:	4b41      	ldr	r3, [pc, #260]	; (8001dc8 <HAL_RCC_OscConfig+0x934>)
 8001cc4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001cc6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cca:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8001cce:	2102      	movs	r1, #2
 8001cd0:	6019      	str	r1, [r3, #0]
 8001cd2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cd6:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	fa93 f1a3 	rbit	r1, r3
 8001ce0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ce4:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001ce8:	6019      	str	r1, [r3, #0]
  return result;
 8001cea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cee:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	fab3 f383 	clz	r3, r3
 8001cf8:	b2db      	uxtb	r3, r3
 8001cfa:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001cfe:	b2db      	uxtb	r3, r3
 8001d00:	f003 031f 	and.w	r3, r3, #31
 8001d04:	2101      	movs	r1, #1
 8001d06:	fa01 f303 	lsl.w	r3, r1, r3
 8001d0a:	4013      	ands	r3, r2
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d197      	bne.n	8001c40 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d10:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d14:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f003 0304 	and.w	r3, r3, #4
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	f000 81a1 	beq.w	8002068 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d26:	2300      	movs	r3, #0
 8001d28:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d2c:	4b26      	ldr	r3, [pc, #152]	; (8001dc8 <HAL_RCC_OscConfig+0x934>)
 8001d2e:	69db      	ldr	r3, [r3, #28]
 8001d30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d116      	bne.n	8001d66 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d38:	4b23      	ldr	r3, [pc, #140]	; (8001dc8 <HAL_RCC_OscConfig+0x934>)
 8001d3a:	69db      	ldr	r3, [r3, #28]
 8001d3c:	4a22      	ldr	r2, [pc, #136]	; (8001dc8 <HAL_RCC_OscConfig+0x934>)
 8001d3e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d42:	61d3      	str	r3, [r2, #28]
 8001d44:	4b20      	ldr	r3, [pc, #128]	; (8001dc8 <HAL_RCC_OscConfig+0x934>)
 8001d46:	69db      	ldr	r3, [r3, #28]
 8001d48:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001d4c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d50:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8001d54:	601a      	str	r2, [r3, #0]
 8001d56:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d5a:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8001d5e:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001d60:	2301      	movs	r3, #1
 8001d62:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d66:	4b1a      	ldr	r3, [pc, #104]	; (8001dd0 <HAL_RCC_OscConfig+0x93c>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d11a      	bne.n	8001da8 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d72:	4b17      	ldr	r3, [pc, #92]	; (8001dd0 <HAL_RCC_OscConfig+0x93c>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	4a16      	ldr	r2, [pc, #88]	; (8001dd0 <HAL_RCC_OscConfig+0x93c>)
 8001d78:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d7c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d7e:	f7ff f899 	bl	8000eb4 <HAL_GetTick>
 8001d82:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d86:	e009      	b.n	8001d9c <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d88:	f7ff f894 	bl	8000eb4 <HAL_GetTick>
 8001d8c:	4602      	mov	r2, r0
 8001d8e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001d92:	1ad3      	subs	r3, r2, r3
 8001d94:	2b64      	cmp	r3, #100	; 0x64
 8001d96:	d901      	bls.n	8001d9c <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8001d98:	2303      	movs	r3, #3
 8001d9a:	e3b1      	b.n	8002500 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d9c:	4b0c      	ldr	r3, [pc, #48]	; (8001dd0 <HAL_RCC_OscConfig+0x93c>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d0ef      	beq.n	8001d88 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001da8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001dac:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	68db      	ldr	r3, [r3, #12]
 8001db4:	2b01      	cmp	r3, #1
 8001db6:	d10d      	bne.n	8001dd4 <HAL_RCC_OscConfig+0x940>
 8001db8:	4b03      	ldr	r3, [pc, #12]	; (8001dc8 <HAL_RCC_OscConfig+0x934>)
 8001dba:	6a1b      	ldr	r3, [r3, #32]
 8001dbc:	4a02      	ldr	r2, [pc, #8]	; (8001dc8 <HAL_RCC_OscConfig+0x934>)
 8001dbe:	f043 0301 	orr.w	r3, r3, #1
 8001dc2:	6213      	str	r3, [r2, #32]
 8001dc4:	e03c      	b.n	8001e40 <HAL_RCC_OscConfig+0x9ac>
 8001dc6:	bf00      	nop
 8001dc8:	40021000 	.word	0x40021000
 8001dcc:	10908120 	.word	0x10908120
 8001dd0:	40007000 	.word	0x40007000
 8001dd4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001dd8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	68db      	ldr	r3, [r3, #12]
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d10c      	bne.n	8001dfe <HAL_RCC_OscConfig+0x96a>
 8001de4:	4bc1      	ldr	r3, [pc, #772]	; (80020ec <HAL_RCC_OscConfig+0xc58>)
 8001de6:	6a1b      	ldr	r3, [r3, #32]
 8001de8:	4ac0      	ldr	r2, [pc, #768]	; (80020ec <HAL_RCC_OscConfig+0xc58>)
 8001dea:	f023 0301 	bic.w	r3, r3, #1
 8001dee:	6213      	str	r3, [r2, #32]
 8001df0:	4bbe      	ldr	r3, [pc, #760]	; (80020ec <HAL_RCC_OscConfig+0xc58>)
 8001df2:	6a1b      	ldr	r3, [r3, #32]
 8001df4:	4abd      	ldr	r2, [pc, #756]	; (80020ec <HAL_RCC_OscConfig+0xc58>)
 8001df6:	f023 0304 	bic.w	r3, r3, #4
 8001dfa:	6213      	str	r3, [r2, #32]
 8001dfc:	e020      	b.n	8001e40 <HAL_RCC_OscConfig+0x9ac>
 8001dfe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e02:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	68db      	ldr	r3, [r3, #12]
 8001e0a:	2b05      	cmp	r3, #5
 8001e0c:	d10c      	bne.n	8001e28 <HAL_RCC_OscConfig+0x994>
 8001e0e:	4bb7      	ldr	r3, [pc, #732]	; (80020ec <HAL_RCC_OscConfig+0xc58>)
 8001e10:	6a1b      	ldr	r3, [r3, #32]
 8001e12:	4ab6      	ldr	r2, [pc, #728]	; (80020ec <HAL_RCC_OscConfig+0xc58>)
 8001e14:	f043 0304 	orr.w	r3, r3, #4
 8001e18:	6213      	str	r3, [r2, #32]
 8001e1a:	4bb4      	ldr	r3, [pc, #720]	; (80020ec <HAL_RCC_OscConfig+0xc58>)
 8001e1c:	6a1b      	ldr	r3, [r3, #32]
 8001e1e:	4ab3      	ldr	r2, [pc, #716]	; (80020ec <HAL_RCC_OscConfig+0xc58>)
 8001e20:	f043 0301 	orr.w	r3, r3, #1
 8001e24:	6213      	str	r3, [r2, #32]
 8001e26:	e00b      	b.n	8001e40 <HAL_RCC_OscConfig+0x9ac>
 8001e28:	4bb0      	ldr	r3, [pc, #704]	; (80020ec <HAL_RCC_OscConfig+0xc58>)
 8001e2a:	6a1b      	ldr	r3, [r3, #32]
 8001e2c:	4aaf      	ldr	r2, [pc, #700]	; (80020ec <HAL_RCC_OscConfig+0xc58>)
 8001e2e:	f023 0301 	bic.w	r3, r3, #1
 8001e32:	6213      	str	r3, [r2, #32]
 8001e34:	4bad      	ldr	r3, [pc, #692]	; (80020ec <HAL_RCC_OscConfig+0xc58>)
 8001e36:	6a1b      	ldr	r3, [r3, #32]
 8001e38:	4aac      	ldr	r2, [pc, #688]	; (80020ec <HAL_RCC_OscConfig+0xc58>)
 8001e3a:	f023 0304 	bic.w	r3, r3, #4
 8001e3e:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001e40:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e44:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	68db      	ldr	r3, [r3, #12]
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	f000 8081 	beq.w	8001f54 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e52:	f7ff f82f 	bl	8000eb4 <HAL_GetTick>
 8001e56:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e5a:	e00b      	b.n	8001e74 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e5c:	f7ff f82a 	bl	8000eb4 <HAL_GetTick>
 8001e60:	4602      	mov	r2, r0
 8001e62:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001e66:	1ad3      	subs	r3, r2, r3
 8001e68:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e6c:	4293      	cmp	r3, r2
 8001e6e:	d901      	bls.n	8001e74 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8001e70:	2303      	movs	r3, #3
 8001e72:	e345      	b.n	8002500 <HAL_RCC_OscConfig+0x106c>
 8001e74:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e78:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001e7c:	2202      	movs	r2, #2
 8001e7e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e80:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e84:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	fa93 f2a3 	rbit	r2, r3
 8001e8e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e92:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8001e96:	601a      	str	r2, [r3, #0]
 8001e98:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e9c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8001ea0:	2202      	movs	r2, #2
 8001ea2:	601a      	str	r2, [r3, #0]
 8001ea4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ea8:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	fa93 f2a3 	rbit	r2, r3
 8001eb2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001eb6:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001eba:	601a      	str	r2, [r3, #0]
  return result;
 8001ebc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ec0:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001ec4:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ec6:	fab3 f383 	clz	r3, r3
 8001eca:	b2db      	uxtb	r3, r3
 8001ecc:	095b      	lsrs	r3, r3, #5
 8001ece:	b2db      	uxtb	r3, r3
 8001ed0:	f043 0302 	orr.w	r3, r3, #2
 8001ed4:	b2db      	uxtb	r3, r3
 8001ed6:	2b02      	cmp	r3, #2
 8001ed8:	d102      	bne.n	8001ee0 <HAL_RCC_OscConfig+0xa4c>
 8001eda:	4b84      	ldr	r3, [pc, #528]	; (80020ec <HAL_RCC_OscConfig+0xc58>)
 8001edc:	6a1b      	ldr	r3, [r3, #32]
 8001ede:	e013      	b.n	8001f08 <HAL_RCC_OscConfig+0xa74>
 8001ee0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ee4:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001ee8:	2202      	movs	r2, #2
 8001eea:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ef0:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	fa93 f2a3 	rbit	r2, r3
 8001efa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001efe:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8001f02:	601a      	str	r2, [r3, #0]
 8001f04:	4b79      	ldr	r3, [pc, #484]	; (80020ec <HAL_RCC_OscConfig+0xc58>)
 8001f06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f08:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001f0c:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8001f10:	2102      	movs	r1, #2
 8001f12:	6011      	str	r1, [r2, #0]
 8001f14:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001f18:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8001f1c:	6812      	ldr	r2, [r2, #0]
 8001f1e:	fa92 f1a2 	rbit	r1, r2
 8001f22:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001f26:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8001f2a:	6011      	str	r1, [r2, #0]
  return result;
 8001f2c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001f30:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8001f34:	6812      	ldr	r2, [r2, #0]
 8001f36:	fab2 f282 	clz	r2, r2
 8001f3a:	b2d2      	uxtb	r2, r2
 8001f3c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001f40:	b2d2      	uxtb	r2, r2
 8001f42:	f002 021f 	and.w	r2, r2, #31
 8001f46:	2101      	movs	r1, #1
 8001f48:	fa01 f202 	lsl.w	r2, r1, r2
 8001f4c:	4013      	ands	r3, r2
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d084      	beq.n	8001e5c <HAL_RCC_OscConfig+0x9c8>
 8001f52:	e07f      	b.n	8002054 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f54:	f7fe ffae 	bl	8000eb4 <HAL_GetTick>
 8001f58:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f5c:	e00b      	b.n	8001f76 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f5e:	f7fe ffa9 	bl	8000eb4 <HAL_GetTick>
 8001f62:	4602      	mov	r2, r0
 8001f64:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001f68:	1ad3      	subs	r3, r2, r3
 8001f6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f6e:	4293      	cmp	r3, r2
 8001f70:	d901      	bls.n	8001f76 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8001f72:	2303      	movs	r3, #3
 8001f74:	e2c4      	b.n	8002500 <HAL_RCC_OscConfig+0x106c>
 8001f76:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f7a:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8001f7e:	2202      	movs	r2, #2
 8001f80:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f82:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f86:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	fa93 f2a3 	rbit	r2, r3
 8001f90:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f94:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8001f98:	601a      	str	r2, [r3, #0]
 8001f9a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f9e:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8001fa2:	2202      	movs	r2, #2
 8001fa4:	601a      	str	r2, [r3, #0]
 8001fa6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001faa:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	fa93 f2a3 	rbit	r2, r3
 8001fb4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fb8:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001fbc:	601a      	str	r2, [r3, #0]
  return result;
 8001fbe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fc2:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001fc6:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fc8:	fab3 f383 	clz	r3, r3
 8001fcc:	b2db      	uxtb	r3, r3
 8001fce:	095b      	lsrs	r3, r3, #5
 8001fd0:	b2db      	uxtb	r3, r3
 8001fd2:	f043 0302 	orr.w	r3, r3, #2
 8001fd6:	b2db      	uxtb	r3, r3
 8001fd8:	2b02      	cmp	r3, #2
 8001fda:	d102      	bne.n	8001fe2 <HAL_RCC_OscConfig+0xb4e>
 8001fdc:	4b43      	ldr	r3, [pc, #268]	; (80020ec <HAL_RCC_OscConfig+0xc58>)
 8001fde:	6a1b      	ldr	r3, [r3, #32]
 8001fe0:	e013      	b.n	800200a <HAL_RCC_OscConfig+0xb76>
 8001fe2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fe6:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8001fea:	2202      	movs	r2, #2
 8001fec:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ff2:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	fa93 f2a3 	rbit	r2, r3
 8001ffc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002000:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8002004:	601a      	str	r2, [r3, #0]
 8002006:	4b39      	ldr	r3, [pc, #228]	; (80020ec <HAL_RCC_OscConfig+0xc58>)
 8002008:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800200a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800200e:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8002012:	2102      	movs	r1, #2
 8002014:	6011      	str	r1, [r2, #0]
 8002016:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800201a:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 800201e:	6812      	ldr	r2, [r2, #0]
 8002020:	fa92 f1a2 	rbit	r1, r2
 8002024:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002028:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 800202c:	6011      	str	r1, [r2, #0]
  return result;
 800202e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002032:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002036:	6812      	ldr	r2, [r2, #0]
 8002038:	fab2 f282 	clz	r2, r2
 800203c:	b2d2      	uxtb	r2, r2
 800203e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002042:	b2d2      	uxtb	r2, r2
 8002044:	f002 021f 	and.w	r2, r2, #31
 8002048:	2101      	movs	r1, #1
 800204a:	fa01 f202 	lsl.w	r2, r1, r2
 800204e:	4013      	ands	r3, r2
 8002050:	2b00      	cmp	r3, #0
 8002052:	d184      	bne.n	8001f5e <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002054:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8002058:	2b01      	cmp	r3, #1
 800205a:	d105      	bne.n	8002068 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800205c:	4b23      	ldr	r3, [pc, #140]	; (80020ec <HAL_RCC_OscConfig+0xc58>)
 800205e:	69db      	ldr	r3, [r3, #28]
 8002060:	4a22      	ldr	r2, [pc, #136]	; (80020ec <HAL_RCC_OscConfig+0xc58>)
 8002062:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002066:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002068:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800206c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	69db      	ldr	r3, [r3, #28]
 8002074:	2b00      	cmp	r3, #0
 8002076:	f000 8242 	beq.w	80024fe <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800207a:	4b1c      	ldr	r3, [pc, #112]	; (80020ec <HAL_RCC_OscConfig+0xc58>)
 800207c:	685b      	ldr	r3, [r3, #4]
 800207e:	f003 030c 	and.w	r3, r3, #12
 8002082:	2b08      	cmp	r3, #8
 8002084:	f000 8213 	beq.w	80024ae <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002088:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800208c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	69db      	ldr	r3, [r3, #28]
 8002094:	2b02      	cmp	r3, #2
 8002096:	f040 8162 	bne.w	800235e <HAL_RCC_OscConfig+0xeca>
 800209a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800209e:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80020a2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80020a6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020ac:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	fa93 f2a3 	rbit	r2, r3
 80020b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020ba:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80020be:	601a      	str	r2, [r3, #0]
  return result;
 80020c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020c4:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80020c8:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020ca:	fab3 f383 	clz	r3, r3
 80020ce:	b2db      	uxtb	r3, r3
 80020d0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80020d4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80020d8:	009b      	lsls	r3, r3, #2
 80020da:	461a      	mov	r2, r3
 80020dc:	2300      	movs	r3, #0
 80020de:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020e0:	f7fe fee8 	bl	8000eb4 <HAL_GetTick>
 80020e4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020e8:	e00c      	b.n	8002104 <HAL_RCC_OscConfig+0xc70>
 80020ea:	bf00      	nop
 80020ec:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80020f0:	f7fe fee0 	bl	8000eb4 <HAL_GetTick>
 80020f4:	4602      	mov	r2, r0
 80020f6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80020fa:	1ad3      	subs	r3, r2, r3
 80020fc:	2b02      	cmp	r3, #2
 80020fe:	d901      	bls.n	8002104 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8002100:	2303      	movs	r3, #3
 8002102:	e1fd      	b.n	8002500 <HAL_RCC_OscConfig+0x106c>
 8002104:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002108:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800210c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002110:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002112:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002116:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	fa93 f2a3 	rbit	r2, r3
 8002120:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002124:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002128:	601a      	str	r2, [r3, #0]
  return result;
 800212a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800212e:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002132:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002134:	fab3 f383 	clz	r3, r3
 8002138:	b2db      	uxtb	r3, r3
 800213a:	095b      	lsrs	r3, r3, #5
 800213c:	b2db      	uxtb	r3, r3
 800213e:	f043 0301 	orr.w	r3, r3, #1
 8002142:	b2db      	uxtb	r3, r3
 8002144:	2b01      	cmp	r3, #1
 8002146:	d102      	bne.n	800214e <HAL_RCC_OscConfig+0xcba>
 8002148:	4bb0      	ldr	r3, [pc, #704]	; (800240c <HAL_RCC_OscConfig+0xf78>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	e027      	b.n	800219e <HAL_RCC_OscConfig+0xd0a>
 800214e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002152:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002156:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800215a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800215c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002160:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	fa93 f2a3 	rbit	r2, r3
 800216a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800216e:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8002172:	601a      	str	r2, [r3, #0]
 8002174:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002178:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800217c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002180:	601a      	str	r2, [r3, #0]
 8002182:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002186:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	fa93 f2a3 	rbit	r2, r3
 8002190:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002194:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8002198:	601a      	str	r2, [r3, #0]
 800219a:	4b9c      	ldr	r3, [pc, #624]	; (800240c <HAL_RCC_OscConfig+0xf78>)
 800219c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800219e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80021a2:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 80021a6:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80021aa:	6011      	str	r1, [r2, #0]
 80021ac:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80021b0:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 80021b4:	6812      	ldr	r2, [r2, #0]
 80021b6:	fa92 f1a2 	rbit	r1, r2
 80021ba:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80021be:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80021c2:	6011      	str	r1, [r2, #0]
  return result;
 80021c4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80021c8:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80021cc:	6812      	ldr	r2, [r2, #0]
 80021ce:	fab2 f282 	clz	r2, r2
 80021d2:	b2d2      	uxtb	r2, r2
 80021d4:	f042 0220 	orr.w	r2, r2, #32
 80021d8:	b2d2      	uxtb	r2, r2
 80021da:	f002 021f 	and.w	r2, r2, #31
 80021de:	2101      	movs	r1, #1
 80021e0:	fa01 f202 	lsl.w	r2, r1, r2
 80021e4:	4013      	ands	r3, r2
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d182      	bne.n	80020f0 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80021ea:	4b88      	ldr	r3, [pc, #544]	; (800240c <HAL_RCC_OscConfig+0xf78>)
 80021ec:	685b      	ldr	r3, [r3, #4]
 80021ee:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80021f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021f6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80021fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002202:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	6a1b      	ldr	r3, [r3, #32]
 800220a:	430b      	orrs	r3, r1
 800220c:	497f      	ldr	r1, [pc, #508]	; (800240c <HAL_RCC_OscConfig+0xf78>)
 800220e:	4313      	orrs	r3, r2
 8002210:	604b      	str	r3, [r1, #4]
 8002212:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002216:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 800221a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800221e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002220:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002224:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	fa93 f2a3 	rbit	r2, r3
 800222e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002232:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002236:	601a      	str	r2, [r3, #0]
  return result;
 8002238:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800223c:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002240:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002242:	fab3 f383 	clz	r3, r3
 8002246:	b2db      	uxtb	r3, r3
 8002248:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800224c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002250:	009b      	lsls	r3, r3, #2
 8002252:	461a      	mov	r2, r3
 8002254:	2301      	movs	r3, #1
 8002256:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002258:	f7fe fe2c 	bl	8000eb4 <HAL_GetTick>
 800225c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002260:	e009      	b.n	8002276 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002262:	f7fe fe27 	bl	8000eb4 <HAL_GetTick>
 8002266:	4602      	mov	r2, r0
 8002268:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800226c:	1ad3      	subs	r3, r2, r3
 800226e:	2b02      	cmp	r3, #2
 8002270:	d901      	bls.n	8002276 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8002272:	2303      	movs	r3, #3
 8002274:	e144      	b.n	8002500 <HAL_RCC_OscConfig+0x106c>
 8002276:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800227a:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800227e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002282:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002284:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002288:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	fa93 f2a3 	rbit	r2, r3
 8002292:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002296:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800229a:	601a      	str	r2, [r3, #0]
  return result;
 800229c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022a0:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80022a4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80022a6:	fab3 f383 	clz	r3, r3
 80022aa:	b2db      	uxtb	r3, r3
 80022ac:	095b      	lsrs	r3, r3, #5
 80022ae:	b2db      	uxtb	r3, r3
 80022b0:	f043 0301 	orr.w	r3, r3, #1
 80022b4:	b2db      	uxtb	r3, r3
 80022b6:	2b01      	cmp	r3, #1
 80022b8:	d102      	bne.n	80022c0 <HAL_RCC_OscConfig+0xe2c>
 80022ba:	4b54      	ldr	r3, [pc, #336]	; (800240c <HAL_RCC_OscConfig+0xf78>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	e027      	b.n	8002310 <HAL_RCC_OscConfig+0xe7c>
 80022c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022c4:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80022c8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80022cc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022d2:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	fa93 f2a3 	rbit	r2, r3
 80022dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022e0:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80022e4:	601a      	str	r2, [r3, #0]
 80022e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022ea:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80022ee:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80022f2:	601a      	str	r2, [r3, #0]
 80022f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022f8:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	fa93 f2a3 	rbit	r2, r3
 8002302:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002306:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 800230a:	601a      	str	r2, [r3, #0]
 800230c:	4b3f      	ldr	r3, [pc, #252]	; (800240c <HAL_RCC_OscConfig+0xf78>)
 800230e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002310:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002314:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8002318:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800231c:	6011      	str	r1, [r2, #0]
 800231e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002322:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8002326:	6812      	ldr	r2, [r2, #0]
 8002328:	fa92 f1a2 	rbit	r1, r2
 800232c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002330:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002334:	6011      	str	r1, [r2, #0]
  return result;
 8002336:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800233a:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 800233e:	6812      	ldr	r2, [r2, #0]
 8002340:	fab2 f282 	clz	r2, r2
 8002344:	b2d2      	uxtb	r2, r2
 8002346:	f042 0220 	orr.w	r2, r2, #32
 800234a:	b2d2      	uxtb	r2, r2
 800234c:	f002 021f 	and.w	r2, r2, #31
 8002350:	2101      	movs	r1, #1
 8002352:	fa01 f202 	lsl.w	r2, r1, r2
 8002356:	4013      	ands	r3, r2
 8002358:	2b00      	cmp	r3, #0
 800235a:	d082      	beq.n	8002262 <HAL_RCC_OscConfig+0xdce>
 800235c:	e0cf      	b.n	80024fe <HAL_RCC_OscConfig+0x106a>
 800235e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002362:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8002366:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800236a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800236c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002370:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	fa93 f2a3 	rbit	r2, r3
 800237a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800237e:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002382:	601a      	str	r2, [r3, #0]
  return result;
 8002384:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002388:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800238c:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800238e:	fab3 f383 	clz	r3, r3
 8002392:	b2db      	uxtb	r3, r3
 8002394:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002398:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800239c:	009b      	lsls	r3, r3, #2
 800239e:	461a      	mov	r2, r3
 80023a0:	2300      	movs	r3, #0
 80023a2:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023a4:	f7fe fd86 	bl	8000eb4 <HAL_GetTick>
 80023a8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023ac:	e009      	b.n	80023c2 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023ae:	f7fe fd81 	bl	8000eb4 <HAL_GetTick>
 80023b2:	4602      	mov	r2, r0
 80023b4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80023b8:	1ad3      	subs	r3, r2, r3
 80023ba:	2b02      	cmp	r3, #2
 80023bc:	d901      	bls.n	80023c2 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 80023be:	2303      	movs	r3, #3
 80023c0:	e09e      	b.n	8002500 <HAL_RCC_OscConfig+0x106c>
 80023c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023c6:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80023ca:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80023ce:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023d4:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	fa93 f2a3 	rbit	r2, r3
 80023de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023e2:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80023e6:	601a      	str	r2, [r3, #0]
  return result;
 80023e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023ec:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80023f0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023f2:	fab3 f383 	clz	r3, r3
 80023f6:	b2db      	uxtb	r3, r3
 80023f8:	095b      	lsrs	r3, r3, #5
 80023fa:	b2db      	uxtb	r3, r3
 80023fc:	f043 0301 	orr.w	r3, r3, #1
 8002400:	b2db      	uxtb	r3, r3
 8002402:	2b01      	cmp	r3, #1
 8002404:	d104      	bne.n	8002410 <HAL_RCC_OscConfig+0xf7c>
 8002406:	4b01      	ldr	r3, [pc, #4]	; (800240c <HAL_RCC_OscConfig+0xf78>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	e029      	b.n	8002460 <HAL_RCC_OscConfig+0xfcc>
 800240c:	40021000 	.word	0x40021000
 8002410:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002414:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002418:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800241c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800241e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002422:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	fa93 f2a3 	rbit	r2, r3
 800242c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002430:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8002434:	601a      	str	r2, [r3, #0]
 8002436:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800243a:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800243e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002442:	601a      	str	r2, [r3, #0]
 8002444:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002448:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	fa93 f2a3 	rbit	r2, r3
 8002452:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002456:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800245a:	601a      	str	r2, [r3, #0]
 800245c:	4b2b      	ldr	r3, [pc, #172]	; (800250c <HAL_RCC_OscConfig+0x1078>)
 800245e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002460:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002464:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8002468:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800246c:	6011      	str	r1, [r2, #0]
 800246e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002472:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8002476:	6812      	ldr	r2, [r2, #0]
 8002478:	fa92 f1a2 	rbit	r1, r2
 800247c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002480:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002484:	6011      	str	r1, [r2, #0]
  return result;
 8002486:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800248a:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 800248e:	6812      	ldr	r2, [r2, #0]
 8002490:	fab2 f282 	clz	r2, r2
 8002494:	b2d2      	uxtb	r2, r2
 8002496:	f042 0220 	orr.w	r2, r2, #32
 800249a:	b2d2      	uxtb	r2, r2
 800249c:	f002 021f 	and.w	r2, r2, #31
 80024a0:	2101      	movs	r1, #1
 80024a2:	fa01 f202 	lsl.w	r2, r1, r2
 80024a6:	4013      	ands	r3, r2
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d180      	bne.n	80023ae <HAL_RCC_OscConfig+0xf1a>
 80024ac:	e027      	b.n	80024fe <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80024ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024b2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	69db      	ldr	r3, [r3, #28]
 80024ba:	2b01      	cmp	r3, #1
 80024bc:	d101      	bne.n	80024c2 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 80024be:	2301      	movs	r3, #1
 80024c0:	e01e      	b.n	8002500 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80024c2:	4b12      	ldr	r3, [pc, #72]	; (800250c <HAL_RCC_OscConfig+0x1078>)
 80024c4:	685b      	ldr	r3, [r3, #4]
 80024c6:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80024ca:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80024ce:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80024d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024d6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	6a1b      	ldr	r3, [r3, #32]
 80024de:	429a      	cmp	r2, r3
 80024e0:	d10b      	bne.n	80024fa <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80024e2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80024e6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80024ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024ee:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80024f6:	429a      	cmp	r2, r3
 80024f8:	d001      	beq.n	80024fe <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 80024fa:	2301      	movs	r3, #1
 80024fc:	e000      	b.n	8002500 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 80024fe:	2300      	movs	r3, #0
}
 8002500:	4618      	mov	r0, r3
 8002502:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8002506:	46bd      	mov	sp, r7
 8002508:	bd80      	pop	{r7, pc}
 800250a:	bf00      	nop
 800250c:	40021000 	.word	0x40021000

08002510 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b09e      	sub	sp, #120	; 0x78
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
 8002518:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800251a:	2300      	movs	r3, #0
 800251c:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	2b00      	cmp	r3, #0
 8002522:	d101      	bne.n	8002528 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002524:	2301      	movs	r3, #1
 8002526:	e162      	b.n	80027ee <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002528:	4b90      	ldr	r3, [pc, #576]	; (800276c <HAL_RCC_ClockConfig+0x25c>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f003 0307 	and.w	r3, r3, #7
 8002530:	683a      	ldr	r2, [r7, #0]
 8002532:	429a      	cmp	r2, r3
 8002534:	d910      	bls.n	8002558 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002536:	4b8d      	ldr	r3, [pc, #564]	; (800276c <HAL_RCC_ClockConfig+0x25c>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f023 0207 	bic.w	r2, r3, #7
 800253e:	498b      	ldr	r1, [pc, #556]	; (800276c <HAL_RCC_ClockConfig+0x25c>)
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	4313      	orrs	r3, r2
 8002544:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002546:	4b89      	ldr	r3, [pc, #548]	; (800276c <HAL_RCC_ClockConfig+0x25c>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f003 0307 	and.w	r3, r3, #7
 800254e:	683a      	ldr	r2, [r7, #0]
 8002550:	429a      	cmp	r2, r3
 8002552:	d001      	beq.n	8002558 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002554:	2301      	movs	r3, #1
 8002556:	e14a      	b.n	80027ee <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f003 0302 	and.w	r3, r3, #2
 8002560:	2b00      	cmp	r3, #0
 8002562:	d008      	beq.n	8002576 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002564:	4b82      	ldr	r3, [pc, #520]	; (8002770 <HAL_RCC_ClockConfig+0x260>)
 8002566:	685b      	ldr	r3, [r3, #4]
 8002568:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	689b      	ldr	r3, [r3, #8]
 8002570:	497f      	ldr	r1, [pc, #508]	; (8002770 <HAL_RCC_ClockConfig+0x260>)
 8002572:	4313      	orrs	r3, r2
 8002574:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f003 0301 	and.w	r3, r3, #1
 800257e:	2b00      	cmp	r3, #0
 8002580:	f000 80dc 	beq.w	800273c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	685b      	ldr	r3, [r3, #4]
 8002588:	2b01      	cmp	r3, #1
 800258a:	d13c      	bne.n	8002606 <HAL_RCC_ClockConfig+0xf6>
 800258c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002590:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002592:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002594:	fa93 f3a3 	rbit	r3, r3
 8002598:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800259a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800259c:	fab3 f383 	clz	r3, r3
 80025a0:	b2db      	uxtb	r3, r3
 80025a2:	095b      	lsrs	r3, r3, #5
 80025a4:	b2db      	uxtb	r3, r3
 80025a6:	f043 0301 	orr.w	r3, r3, #1
 80025aa:	b2db      	uxtb	r3, r3
 80025ac:	2b01      	cmp	r3, #1
 80025ae:	d102      	bne.n	80025b6 <HAL_RCC_ClockConfig+0xa6>
 80025b0:	4b6f      	ldr	r3, [pc, #444]	; (8002770 <HAL_RCC_ClockConfig+0x260>)
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	e00f      	b.n	80025d6 <HAL_RCC_ClockConfig+0xc6>
 80025b6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80025ba:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025bc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80025be:	fa93 f3a3 	rbit	r3, r3
 80025c2:	667b      	str	r3, [r7, #100]	; 0x64
 80025c4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80025c8:	663b      	str	r3, [r7, #96]	; 0x60
 80025ca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80025cc:	fa93 f3a3 	rbit	r3, r3
 80025d0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80025d2:	4b67      	ldr	r3, [pc, #412]	; (8002770 <HAL_RCC_ClockConfig+0x260>)
 80025d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025d6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80025da:	65ba      	str	r2, [r7, #88]	; 0x58
 80025dc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80025de:	fa92 f2a2 	rbit	r2, r2
 80025e2:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80025e4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80025e6:	fab2 f282 	clz	r2, r2
 80025ea:	b2d2      	uxtb	r2, r2
 80025ec:	f042 0220 	orr.w	r2, r2, #32
 80025f0:	b2d2      	uxtb	r2, r2
 80025f2:	f002 021f 	and.w	r2, r2, #31
 80025f6:	2101      	movs	r1, #1
 80025f8:	fa01 f202 	lsl.w	r2, r1, r2
 80025fc:	4013      	ands	r3, r2
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d17b      	bne.n	80026fa <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002602:	2301      	movs	r3, #1
 8002604:	e0f3      	b.n	80027ee <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	685b      	ldr	r3, [r3, #4]
 800260a:	2b02      	cmp	r3, #2
 800260c:	d13c      	bne.n	8002688 <HAL_RCC_ClockConfig+0x178>
 800260e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002612:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002614:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002616:	fa93 f3a3 	rbit	r3, r3
 800261a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800261c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800261e:	fab3 f383 	clz	r3, r3
 8002622:	b2db      	uxtb	r3, r3
 8002624:	095b      	lsrs	r3, r3, #5
 8002626:	b2db      	uxtb	r3, r3
 8002628:	f043 0301 	orr.w	r3, r3, #1
 800262c:	b2db      	uxtb	r3, r3
 800262e:	2b01      	cmp	r3, #1
 8002630:	d102      	bne.n	8002638 <HAL_RCC_ClockConfig+0x128>
 8002632:	4b4f      	ldr	r3, [pc, #316]	; (8002770 <HAL_RCC_ClockConfig+0x260>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	e00f      	b.n	8002658 <HAL_RCC_ClockConfig+0x148>
 8002638:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800263c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800263e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002640:	fa93 f3a3 	rbit	r3, r3
 8002644:	647b      	str	r3, [r7, #68]	; 0x44
 8002646:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800264a:	643b      	str	r3, [r7, #64]	; 0x40
 800264c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800264e:	fa93 f3a3 	rbit	r3, r3
 8002652:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002654:	4b46      	ldr	r3, [pc, #280]	; (8002770 <HAL_RCC_ClockConfig+0x260>)
 8002656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002658:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800265c:	63ba      	str	r2, [r7, #56]	; 0x38
 800265e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002660:	fa92 f2a2 	rbit	r2, r2
 8002664:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8002666:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002668:	fab2 f282 	clz	r2, r2
 800266c:	b2d2      	uxtb	r2, r2
 800266e:	f042 0220 	orr.w	r2, r2, #32
 8002672:	b2d2      	uxtb	r2, r2
 8002674:	f002 021f 	and.w	r2, r2, #31
 8002678:	2101      	movs	r1, #1
 800267a:	fa01 f202 	lsl.w	r2, r1, r2
 800267e:	4013      	ands	r3, r2
 8002680:	2b00      	cmp	r3, #0
 8002682:	d13a      	bne.n	80026fa <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002684:	2301      	movs	r3, #1
 8002686:	e0b2      	b.n	80027ee <HAL_RCC_ClockConfig+0x2de>
 8002688:	2302      	movs	r3, #2
 800268a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800268c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800268e:	fa93 f3a3 	rbit	r3, r3
 8002692:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002694:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002696:	fab3 f383 	clz	r3, r3
 800269a:	b2db      	uxtb	r3, r3
 800269c:	095b      	lsrs	r3, r3, #5
 800269e:	b2db      	uxtb	r3, r3
 80026a0:	f043 0301 	orr.w	r3, r3, #1
 80026a4:	b2db      	uxtb	r3, r3
 80026a6:	2b01      	cmp	r3, #1
 80026a8:	d102      	bne.n	80026b0 <HAL_RCC_ClockConfig+0x1a0>
 80026aa:	4b31      	ldr	r3, [pc, #196]	; (8002770 <HAL_RCC_ClockConfig+0x260>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	e00d      	b.n	80026cc <HAL_RCC_ClockConfig+0x1bc>
 80026b0:	2302      	movs	r3, #2
 80026b2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026b6:	fa93 f3a3 	rbit	r3, r3
 80026ba:	627b      	str	r3, [r7, #36]	; 0x24
 80026bc:	2302      	movs	r3, #2
 80026be:	623b      	str	r3, [r7, #32]
 80026c0:	6a3b      	ldr	r3, [r7, #32]
 80026c2:	fa93 f3a3 	rbit	r3, r3
 80026c6:	61fb      	str	r3, [r7, #28]
 80026c8:	4b29      	ldr	r3, [pc, #164]	; (8002770 <HAL_RCC_ClockConfig+0x260>)
 80026ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026cc:	2202      	movs	r2, #2
 80026ce:	61ba      	str	r2, [r7, #24]
 80026d0:	69ba      	ldr	r2, [r7, #24]
 80026d2:	fa92 f2a2 	rbit	r2, r2
 80026d6:	617a      	str	r2, [r7, #20]
  return result;
 80026d8:	697a      	ldr	r2, [r7, #20]
 80026da:	fab2 f282 	clz	r2, r2
 80026de:	b2d2      	uxtb	r2, r2
 80026e0:	f042 0220 	orr.w	r2, r2, #32
 80026e4:	b2d2      	uxtb	r2, r2
 80026e6:	f002 021f 	and.w	r2, r2, #31
 80026ea:	2101      	movs	r1, #1
 80026ec:	fa01 f202 	lsl.w	r2, r1, r2
 80026f0:	4013      	ands	r3, r2
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d101      	bne.n	80026fa <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80026f6:	2301      	movs	r3, #1
 80026f8:	e079      	b.n	80027ee <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80026fa:	4b1d      	ldr	r3, [pc, #116]	; (8002770 <HAL_RCC_ClockConfig+0x260>)
 80026fc:	685b      	ldr	r3, [r3, #4]
 80026fe:	f023 0203 	bic.w	r2, r3, #3
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	685b      	ldr	r3, [r3, #4]
 8002706:	491a      	ldr	r1, [pc, #104]	; (8002770 <HAL_RCC_ClockConfig+0x260>)
 8002708:	4313      	orrs	r3, r2
 800270a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800270c:	f7fe fbd2 	bl	8000eb4 <HAL_GetTick>
 8002710:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002712:	e00a      	b.n	800272a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002714:	f7fe fbce 	bl	8000eb4 <HAL_GetTick>
 8002718:	4602      	mov	r2, r0
 800271a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800271c:	1ad3      	subs	r3, r2, r3
 800271e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002722:	4293      	cmp	r3, r2
 8002724:	d901      	bls.n	800272a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002726:	2303      	movs	r3, #3
 8002728:	e061      	b.n	80027ee <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800272a:	4b11      	ldr	r3, [pc, #68]	; (8002770 <HAL_RCC_ClockConfig+0x260>)
 800272c:	685b      	ldr	r3, [r3, #4]
 800272e:	f003 020c 	and.w	r2, r3, #12
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	685b      	ldr	r3, [r3, #4]
 8002736:	009b      	lsls	r3, r3, #2
 8002738:	429a      	cmp	r2, r3
 800273a:	d1eb      	bne.n	8002714 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800273c:	4b0b      	ldr	r3, [pc, #44]	; (800276c <HAL_RCC_ClockConfig+0x25c>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f003 0307 	and.w	r3, r3, #7
 8002744:	683a      	ldr	r2, [r7, #0]
 8002746:	429a      	cmp	r2, r3
 8002748:	d214      	bcs.n	8002774 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800274a:	4b08      	ldr	r3, [pc, #32]	; (800276c <HAL_RCC_ClockConfig+0x25c>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f023 0207 	bic.w	r2, r3, #7
 8002752:	4906      	ldr	r1, [pc, #24]	; (800276c <HAL_RCC_ClockConfig+0x25c>)
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	4313      	orrs	r3, r2
 8002758:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800275a:	4b04      	ldr	r3, [pc, #16]	; (800276c <HAL_RCC_ClockConfig+0x25c>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f003 0307 	and.w	r3, r3, #7
 8002762:	683a      	ldr	r2, [r7, #0]
 8002764:	429a      	cmp	r2, r3
 8002766:	d005      	beq.n	8002774 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002768:	2301      	movs	r3, #1
 800276a:	e040      	b.n	80027ee <HAL_RCC_ClockConfig+0x2de>
 800276c:	40022000 	.word	0x40022000
 8002770:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f003 0304 	and.w	r3, r3, #4
 800277c:	2b00      	cmp	r3, #0
 800277e:	d008      	beq.n	8002792 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002780:	4b1d      	ldr	r3, [pc, #116]	; (80027f8 <HAL_RCC_ClockConfig+0x2e8>)
 8002782:	685b      	ldr	r3, [r3, #4]
 8002784:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	68db      	ldr	r3, [r3, #12]
 800278c:	491a      	ldr	r1, [pc, #104]	; (80027f8 <HAL_RCC_ClockConfig+0x2e8>)
 800278e:	4313      	orrs	r3, r2
 8002790:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f003 0308 	and.w	r3, r3, #8
 800279a:	2b00      	cmp	r3, #0
 800279c:	d009      	beq.n	80027b2 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800279e:	4b16      	ldr	r3, [pc, #88]	; (80027f8 <HAL_RCC_ClockConfig+0x2e8>)
 80027a0:	685b      	ldr	r3, [r3, #4]
 80027a2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	691b      	ldr	r3, [r3, #16]
 80027aa:	00db      	lsls	r3, r3, #3
 80027ac:	4912      	ldr	r1, [pc, #72]	; (80027f8 <HAL_RCC_ClockConfig+0x2e8>)
 80027ae:	4313      	orrs	r3, r2
 80027b0:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80027b2:	f000 f829 	bl	8002808 <HAL_RCC_GetSysClockFreq>
 80027b6:	4601      	mov	r1, r0
 80027b8:	4b0f      	ldr	r3, [pc, #60]	; (80027f8 <HAL_RCC_ClockConfig+0x2e8>)
 80027ba:	685b      	ldr	r3, [r3, #4]
 80027bc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80027c0:	22f0      	movs	r2, #240	; 0xf0
 80027c2:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027c4:	693a      	ldr	r2, [r7, #16]
 80027c6:	fa92 f2a2 	rbit	r2, r2
 80027ca:	60fa      	str	r2, [r7, #12]
  return result;
 80027cc:	68fa      	ldr	r2, [r7, #12]
 80027ce:	fab2 f282 	clz	r2, r2
 80027d2:	b2d2      	uxtb	r2, r2
 80027d4:	40d3      	lsrs	r3, r2
 80027d6:	4a09      	ldr	r2, [pc, #36]	; (80027fc <HAL_RCC_ClockConfig+0x2ec>)
 80027d8:	5cd3      	ldrb	r3, [r2, r3]
 80027da:	fa21 f303 	lsr.w	r3, r1, r3
 80027de:	4a08      	ldr	r2, [pc, #32]	; (8002800 <HAL_RCC_ClockConfig+0x2f0>)
 80027e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80027e2:	4b08      	ldr	r3, [pc, #32]	; (8002804 <HAL_RCC_ClockConfig+0x2f4>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	4618      	mov	r0, r3
 80027e8:	f7fe fb20 	bl	8000e2c <HAL_InitTick>
  
  return HAL_OK;
 80027ec:	2300      	movs	r3, #0
}
 80027ee:	4618      	mov	r0, r3
 80027f0:	3778      	adds	r7, #120	; 0x78
 80027f2:	46bd      	mov	sp, r7
 80027f4:	bd80      	pop	{r7, pc}
 80027f6:	bf00      	nop
 80027f8:	40021000 	.word	0x40021000
 80027fc:	0800583c 	.word	0x0800583c
 8002800:	20000004 	.word	0x20000004
 8002804:	20000008 	.word	0x20000008

08002808 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002808:	b480      	push	{r7}
 800280a:	b08b      	sub	sp, #44	; 0x2c
 800280c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800280e:	2300      	movs	r3, #0
 8002810:	61fb      	str	r3, [r7, #28]
 8002812:	2300      	movs	r3, #0
 8002814:	61bb      	str	r3, [r7, #24]
 8002816:	2300      	movs	r3, #0
 8002818:	627b      	str	r3, [r7, #36]	; 0x24
 800281a:	2300      	movs	r3, #0
 800281c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800281e:	2300      	movs	r3, #0
 8002820:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8002822:	4b29      	ldr	r3, [pc, #164]	; (80028c8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002824:	685b      	ldr	r3, [r3, #4]
 8002826:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002828:	69fb      	ldr	r3, [r7, #28]
 800282a:	f003 030c 	and.w	r3, r3, #12
 800282e:	2b04      	cmp	r3, #4
 8002830:	d002      	beq.n	8002838 <HAL_RCC_GetSysClockFreq+0x30>
 8002832:	2b08      	cmp	r3, #8
 8002834:	d003      	beq.n	800283e <HAL_RCC_GetSysClockFreq+0x36>
 8002836:	e03c      	b.n	80028b2 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002838:	4b24      	ldr	r3, [pc, #144]	; (80028cc <HAL_RCC_GetSysClockFreq+0xc4>)
 800283a:	623b      	str	r3, [r7, #32]
      break;
 800283c:	e03c      	b.n	80028b8 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800283e:	69fb      	ldr	r3, [r7, #28]
 8002840:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002844:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002848:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800284a:	68ba      	ldr	r2, [r7, #8]
 800284c:	fa92 f2a2 	rbit	r2, r2
 8002850:	607a      	str	r2, [r7, #4]
  return result;
 8002852:	687a      	ldr	r2, [r7, #4]
 8002854:	fab2 f282 	clz	r2, r2
 8002858:	b2d2      	uxtb	r2, r2
 800285a:	40d3      	lsrs	r3, r2
 800285c:	4a1c      	ldr	r2, [pc, #112]	; (80028d0 <HAL_RCC_GetSysClockFreq+0xc8>)
 800285e:	5cd3      	ldrb	r3, [r2, r3]
 8002860:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002862:	4b19      	ldr	r3, [pc, #100]	; (80028c8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002864:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002866:	f003 030f 	and.w	r3, r3, #15
 800286a:	220f      	movs	r2, #15
 800286c:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800286e:	693a      	ldr	r2, [r7, #16]
 8002870:	fa92 f2a2 	rbit	r2, r2
 8002874:	60fa      	str	r2, [r7, #12]
  return result;
 8002876:	68fa      	ldr	r2, [r7, #12]
 8002878:	fab2 f282 	clz	r2, r2
 800287c:	b2d2      	uxtb	r2, r2
 800287e:	40d3      	lsrs	r3, r2
 8002880:	4a14      	ldr	r2, [pc, #80]	; (80028d4 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002882:	5cd3      	ldrb	r3, [r2, r3]
 8002884:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8002886:	69fb      	ldr	r3, [r7, #28]
 8002888:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800288c:	2b00      	cmp	r3, #0
 800288e:	d008      	beq.n	80028a2 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002890:	4a0e      	ldr	r2, [pc, #56]	; (80028cc <HAL_RCC_GetSysClockFreq+0xc4>)
 8002892:	69bb      	ldr	r3, [r7, #24]
 8002894:	fbb2 f2f3 	udiv	r2, r2, r3
 8002898:	697b      	ldr	r3, [r7, #20]
 800289a:	fb02 f303 	mul.w	r3, r2, r3
 800289e:	627b      	str	r3, [r7, #36]	; 0x24
 80028a0:	e004      	b.n	80028ac <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80028a2:	697b      	ldr	r3, [r7, #20]
 80028a4:	4a0c      	ldr	r2, [pc, #48]	; (80028d8 <HAL_RCC_GetSysClockFreq+0xd0>)
 80028a6:	fb02 f303 	mul.w	r3, r2, r3
 80028aa:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80028ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ae:	623b      	str	r3, [r7, #32]
      break;
 80028b0:	e002      	b.n	80028b8 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80028b2:	4b06      	ldr	r3, [pc, #24]	; (80028cc <HAL_RCC_GetSysClockFreq+0xc4>)
 80028b4:	623b      	str	r3, [r7, #32]
      break;
 80028b6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80028b8:	6a3b      	ldr	r3, [r7, #32]
}
 80028ba:	4618      	mov	r0, r3
 80028bc:	372c      	adds	r7, #44	; 0x2c
 80028be:	46bd      	mov	sp, r7
 80028c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c4:	4770      	bx	lr
 80028c6:	bf00      	nop
 80028c8:	40021000 	.word	0x40021000
 80028cc:	007a1200 	.word	0x007a1200
 80028d0:	08005854 	.word	0x08005854
 80028d4:	08005864 	.word	0x08005864
 80028d8:	003d0900 	.word	0x003d0900

080028dc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80028dc:	b480      	push	{r7}
 80028de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80028e0:	4b03      	ldr	r3, [pc, #12]	; (80028f0 <HAL_RCC_GetHCLKFreq+0x14>)
 80028e2:	681b      	ldr	r3, [r3, #0]
}
 80028e4:	4618      	mov	r0, r3
 80028e6:	46bd      	mov	sp, r7
 80028e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ec:	4770      	bx	lr
 80028ee:	bf00      	nop
 80028f0:	20000004 	.word	0x20000004

080028f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b082      	sub	sp, #8
 80028f8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80028fa:	f7ff ffef 	bl	80028dc <HAL_RCC_GetHCLKFreq>
 80028fe:	4601      	mov	r1, r0
 8002900:	4b0b      	ldr	r3, [pc, #44]	; (8002930 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002902:	685b      	ldr	r3, [r3, #4]
 8002904:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002908:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800290c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800290e:	687a      	ldr	r2, [r7, #4]
 8002910:	fa92 f2a2 	rbit	r2, r2
 8002914:	603a      	str	r2, [r7, #0]
  return result;
 8002916:	683a      	ldr	r2, [r7, #0]
 8002918:	fab2 f282 	clz	r2, r2
 800291c:	b2d2      	uxtb	r2, r2
 800291e:	40d3      	lsrs	r3, r2
 8002920:	4a04      	ldr	r2, [pc, #16]	; (8002934 <HAL_RCC_GetPCLK1Freq+0x40>)
 8002922:	5cd3      	ldrb	r3, [r2, r3]
 8002924:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002928:	4618      	mov	r0, r3
 800292a:	3708      	adds	r7, #8
 800292c:	46bd      	mov	sp, r7
 800292e:	bd80      	pop	{r7, pc}
 8002930:	40021000 	.word	0x40021000
 8002934:	0800584c 	.word	0x0800584c

08002938 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b082      	sub	sp, #8
 800293c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800293e:	f7ff ffcd 	bl	80028dc <HAL_RCC_GetHCLKFreq>
 8002942:	4601      	mov	r1, r0
 8002944:	4b0b      	ldr	r3, [pc, #44]	; (8002974 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002946:	685b      	ldr	r3, [r3, #4]
 8002948:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 800294c:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002950:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002952:	687a      	ldr	r2, [r7, #4]
 8002954:	fa92 f2a2 	rbit	r2, r2
 8002958:	603a      	str	r2, [r7, #0]
  return result;
 800295a:	683a      	ldr	r2, [r7, #0]
 800295c:	fab2 f282 	clz	r2, r2
 8002960:	b2d2      	uxtb	r2, r2
 8002962:	40d3      	lsrs	r3, r2
 8002964:	4a04      	ldr	r2, [pc, #16]	; (8002978 <HAL_RCC_GetPCLK2Freq+0x40>)
 8002966:	5cd3      	ldrb	r3, [r2, r3]
 8002968:	fa21 f303 	lsr.w	r3, r1, r3
} 
 800296c:	4618      	mov	r0, r3
 800296e:	3708      	adds	r7, #8
 8002970:	46bd      	mov	sp, r7
 8002972:	bd80      	pop	{r7, pc}
 8002974:	40021000 	.word	0x40021000
 8002978:	0800584c 	.word	0x0800584c

0800297c <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b092      	sub	sp, #72	; 0x48
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002984:	2300      	movs	r3, #0
 8002986:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8002988:	2300      	movs	r3, #0
 800298a:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 800298c:	2300      	movs	r3, #0
 800298e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800299a:	2b00      	cmp	r3, #0
 800299c:	f000 80d4 	beq.w	8002b48 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80029a0:	4b4e      	ldr	r3, [pc, #312]	; (8002adc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029a2:	69db      	ldr	r3, [r3, #28]
 80029a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d10e      	bne.n	80029ca <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80029ac:	4b4b      	ldr	r3, [pc, #300]	; (8002adc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029ae:	69db      	ldr	r3, [r3, #28]
 80029b0:	4a4a      	ldr	r2, [pc, #296]	; (8002adc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029b6:	61d3      	str	r3, [r2, #28]
 80029b8:	4b48      	ldr	r3, [pc, #288]	; (8002adc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029ba:	69db      	ldr	r3, [r3, #28]
 80029bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029c0:	60bb      	str	r3, [r7, #8]
 80029c2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80029c4:	2301      	movs	r3, #1
 80029c6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029ca:	4b45      	ldr	r3, [pc, #276]	; (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d118      	bne.n	8002a08 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80029d6:	4b42      	ldr	r3, [pc, #264]	; (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	4a41      	ldr	r2, [pc, #260]	; (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80029dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029e0:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80029e2:	f7fe fa67 	bl	8000eb4 <HAL_GetTick>
 80029e6:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029e8:	e008      	b.n	80029fc <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029ea:	f7fe fa63 	bl	8000eb4 <HAL_GetTick>
 80029ee:	4602      	mov	r2, r0
 80029f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80029f2:	1ad3      	subs	r3, r2, r3
 80029f4:	2b64      	cmp	r3, #100	; 0x64
 80029f6:	d901      	bls.n	80029fc <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80029f8:	2303      	movs	r3, #3
 80029fa:	e13c      	b.n	8002c76 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029fc:	4b38      	ldr	r3, [pc, #224]	; (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d0f0      	beq.n	80029ea <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002a08:	4b34      	ldr	r3, [pc, #208]	; (8002adc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a0a:	6a1b      	ldr	r3, [r3, #32]
 8002a0c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a10:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002a12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	f000 8084 	beq.w	8002b22 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	685b      	ldr	r3, [r3, #4]
 8002a1e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a22:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002a24:	429a      	cmp	r2, r3
 8002a26:	d07c      	beq.n	8002b22 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002a28:	4b2c      	ldr	r3, [pc, #176]	; (8002adc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a2a:	6a1b      	ldr	r3, [r3, #32]
 8002a2c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a30:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002a32:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002a36:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a3a:	fa93 f3a3 	rbit	r3, r3
 8002a3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002a40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002a42:	fab3 f383 	clz	r3, r3
 8002a46:	b2db      	uxtb	r3, r3
 8002a48:	461a      	mov	r2, r3
 8002a4a:	4b26      	ldr	r3, [pc, #152]	; (8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002a4c:	4413      	add	r3, r2
 8002a4e:	009b      	lsls	r3, r3, #2
 8002a50:	461a      	mov	r2, r3
 8002a52:	2301      	movs	r3, #1
 8002a54:	6013      	str	r3, [r2, #0]
 8002a56:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002a5a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a5e:	fa93 f3a3 	rbit	r3, r3
 8002a62:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002a64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002a66:	fab3 f383 	clz	r3, r3
 8002a6a:	b2db      	uxtb	r3, r3
 8002a6c:	461a      	mov	r2, r3
 8002a6e:	4b1d      	ldr	r3, [pc, #116]	; (8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002a70:	4413      	add	r3, r2
 8002a72:	009b      	lsls	r3, r3, #2
 8002a74:	461a      	mov	r2, r3
 8002a76:	2300      	movs	r3, #0
 8002a78:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002a7a:	4a18      	ldr	r2, [pc, #96]	; (8002adc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a7e:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002a80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a82:	f003 0301 	and.w	r3, r3, #1
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d04b      	beq.n	8002b22 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a8a:	f7fe fa13 	bl	8000eb4 <HAL_GetTick>
 8002a8e:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a90:	e00a      	b.n	8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a92:	f7fe fa0f 	bl	8000eb4 <HAL_GetTick>
 8002a96:	4602      	mov	r2, r0
 8002a98:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002a9a:	1ad3      	subs	r3, r2, r3
 8002a9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002aa0:	4293      	cmp	r3, r2
 8002aa2:	d901      	bls.n	8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002aa4:	2303      	movs	r3, #3
 8002aa6:	e0e6      	b.n	8002c76 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
 8002aa8:	2302      	movs	r3, #2
 8002aaa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002aae:	fa93 f3a3 	rbit	r3, r3
 8002ab2:	627b      	str	r3, [r7, #36]	; 0x24
 8002ab4:	2302      	movs	r3, #2
 8002ab6:	623b      	str	r3, [r7, #32]
 8002ab8:	6a3b      	ldr	r3, [r7, #32]
 8002aba:	fa93 f3a3 	rbit	r3, r3
 8002abe:	61fb      	str	r3, [r7, #28]
  return result;
 8002ac0:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ac2:	fab3 f383 	clz	r3, r3
 8002ac6:	b2db      	uxtb	r3, r3
 8002ac8:	095b      	lsrs	r3, r3, #5
 8002aca:	b2db      	uxtb	r3, r3
 8002acc:	f043 0302 	orr.w	r3, r3, #2
 8002ad0:	b2db      	uxtb	r3, r3
 8002ad2:	2b02      	cmp	r3, #2
 8002ad4:	d108      	bne.n	8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8002ad6:	4b01      	ldr	r3, [pc, #4]	; (8002adc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ad8:	6a1b      	ldr	r3, [r3, #32]
 8002ada:	e00d      	b.n	8002af8 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8002adc:	40021000 	.word	0x40021000
 8002ae0:	40007000 	.word	0x40007000
 8002ae4:	10908100 	.word	0x10908100
 8002ae8:	2302      	movs	r3, #2
 8002aea:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aec:	69bb      	ldr	r3, [r7, #24]
 8002aee:	fa93 f3a3 	rbit	r3, r3
 8002af2:	617b      	str	r3, [r7, #20]
 8002af4:	4b62      	ldr	r3, [pc, #392]	; (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002af6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002af8:	2202      	movs	r2, #2
 8002afa:	613a      	str	r2, [r7, #16]
 8002afc:	693a      	ldr	r2, [r7, #16]
 8002afe:	fa92 f2a2 	rbit	r2, r2
 8002b02:	60fa      	str	r2, [r7, #12]
  return result;
 8002b04:	68fa      	ldr	r2, [r7, #12]
 8002b06:	fab2 f282 	clz	r2, r2
 8002b0a:	b2d2      	uxtb	r2, r2
 8002b0c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002b10:	b2d2      	uxtb	r2, r2
 8002b12:	f002 021f 	and.w	r2, r2, #31
 8002b16:	2101      	movs	r1, #1
 8002b18:	fa01 f202 	lsl.w	r2, r1, r2
 8002b1c:	4013      	ands	r3, r2
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d0b7      	beq.n	8002a92 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002b22:	4b57      	ldr	r3, [pc, #348]	; (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002b24:	6a1b      	ldr	r3, [r3, #32]
 8002b26:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	685b      	ldr	r3, [r3, #4]
 8002b2e:	4954      	ldr	r1, [pc, #336]	; (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002b30:	4313      	orrs	r3, r2
 8002b32:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002b34:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002b38:	2b01      	cmp	r3, #1
 8002b3a:	d105      	bne.n	8002b48 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b3c:	4b50      	ldr	r3, [pc, #320]	; (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002b3e:	69db      	ldr	r3, [r3, #28]
 8002b40:	4a4f      	ldr	r2, [pc, #316]	; (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002b42:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b46:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f003 0301 	and.w	r3, r3, #1
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d008      	beq.n	8002b66 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002b54:	4b4a      	ldr	r3, [pc, #296]	; (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002b56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b58:	f023 0203 	bic.w	r2, r3, #3
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	689b      	ldr	r3, [r3, #8]
 8002b60:	4947      	ldr	r1, [pc, #284]	; (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002b62:	4313      	orrs	r3, r2
 8002b64:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f003 0320 	and.w	r3, r3, #32
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d008      	beq.n	8002b84 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002b72:	4b43      	ldr	r3, [pc, #268]	; (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b76:	f023 0210 	bic.w	r2, r3, #16
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	68db      	ldr	r3, [r3, #12]
 8002b7e:	4940      	ldr	r1, [pc, #256]	; (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002b80:	4313      	orrs	r3, r2
 8002b82:	630b      	str	r3, [r1, #48]	; 0x30
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d008      	beq.n	8002ba2 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002b90:	4b3b      	ldr	r3, [pc, #236]	; (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002b92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b94:	f023 0220 	bic.w	r2, r3, #32
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	691b      	ldr	r3, [r3, #16]
 8002b9c:	4938      	ldr	r1, [pc, #224]	; (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002b9e:	4313      	orrs	r3, r2
 8002ba0:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d008      	beq.n	8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002bae:	4b34      	ldr	r3, [pc, #208]	; (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bb2:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	695b      	ldr	r3, [r3, #20]
 8002bba:	4931      	ldr	r1, [pc, #196]	; (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002bbc:	4313      	orrs	r3, r2
 8002bbe:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d008      	beq.n	8002bde <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002bcc:	4b2c      	ldr	r3, [pc, #176]	; (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002bce:	685b      	ldr	r3, [r3, #4]
 8002bd0:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	69db      	ldr	r3, [r3, #28]
 8002bd8:	4929      	ldr	r1, [pc, #164]	; (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002bda:	4313      	orrs	r3, r2
 8002bdc:	604b      	str	r3, [r1, #4]
       /* STM32F301x8 || STM32F302x8 || STM32F318xx    */
  
#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
      
  /*------------------------------ ADC1 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC1) == RCC_PERIPHCLK_ADC1)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d008      	beq.n	8002bfc <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC1PLLCLK_DIV(PeriphClkInit->Adc1ClockSelection));
    
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC1_CONFIG(PeriphClkInit->Adc1ClockSelection);
 8002bea:	4b25      	ldr	r3, [pc, #148]	; (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002bec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bee:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	699b      	ldr	r3, [r3, #24]
 8002bf6:	4922      	ldr	r1, [pc, #136]	; (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002bf8:	4313      	orrs	r3, r2
 8002bfa:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d008      	beq.n	8002c1a <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002c08:	4b1d      	ldr	r3, [pc, #116]	; (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002c0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c0c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6a1b      	ldr	r3, [r3, #32]
 8002c14:	491a      	ldr	r1, [pc, #104]	; (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002c16:	4313      	orrs	r3, r2
 8002c18:	630b      	str	r3, [r1, #48]	; 0x30
       /* STM32F303xC || STM32F358xx    */

#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM15 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d008      	beq.n	8002c38 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8002c26:	4b16      	ldr	r3, [pc, #88]	; (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c2a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c32:	4913      	ldr	r1, [pc, #76]	; (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002c34:	4313      	orrs	r3, r2
 8002c36:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d008      	beq.n	8002c56 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the TIM16 clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8002c44:	4b0e      	ldr	r3, [pc, #56]	; (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002c46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c48:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c50:	490b      	ldr	r1, [pc, #44]	; (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002c52:	4313      	orrs	r3, r2
 8002c54:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d008      	beq.n	8002c74 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the TIM17 clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8002c62:	4b07      	ldr	r3, [pc, #28]	; (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c66:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c6e:	4904      	ldr	r1, [pc, #16]	; (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002c70:	4313      	orrs	r3, r2
 8002c72:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002c74:	2300      	movs	r3, #0
}
 8002c76:	4618      	mov	r0, r3
 8002c78:	3748      	adds	r7, #72	; 0x48
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	bd80      	pop	{r7, pc}
 8002c7e:	bf00      	nop
 8002c80:	40021000 	.word	0x40021000

08002c84 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b082      	sub	sp, #8
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d101      	bne.n	8002c96 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002c92:	2301      	movs	r3, #1
 8002c94:	e049      	b.n	8002d2a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c9c:	b2db      	uxtb	r3, r3
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d106      	bne.n	8002cb0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002caa:	6878      	ldr	r0, [r7, #4]
 8002cac:	f7fd ff16 	bl	8000adc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2202      	movs	r2, #2
 8002cb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681a      	ldr	r2, [r3, #0]
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	3304      	adds	r3, #4
 8002cc0:	4619      	mov	r1, r3
 8002cc2:	4610      	mov	r0, r2
 8002cc4:	f000 fc52 	bl	800356c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2201      	movs	r2, #1
 8002ccc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2201      	movs	r2, #1
 8002cd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2201      	movs	r2, #1
 8002cdc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2201      	movs	r2, #1
 8002ce4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2201      	movs	r2, #1
 8002cec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2201      	movs	r2, #1
 8002cf4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2201      	movs	r2, #1
 8002cfc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2201      	movs	r2, #1
 8002d04:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2201      	movs	r2, #1
 8002d0c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2201      	movs	r2, #1
 8002d14:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	2201      	movs	r2, #1
 8002d1c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2201      	movs	r2, #1
 8002d24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002d28:	2300      	movs	r3, #0
}
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	3708      	adds	r7, #8
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	bd80      	pop	{r7, pc}
	...

08002d34 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002d34:	b480      	push	{r7}
 8002d36:	b085      	sub	sp, #20
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d42:	b2db      	uxtb	r3, r3
 8002d44:	2b01      	cmp	r3, #1
 8002d46:	d001      	beq.n	8002d4c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002d48:	2301      	movs	r3, #1
 8002d4a:	e033      	b.n	8002db4 <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2202      	movs	r2, #2
 8002d50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	4a19      	ldr	r2, [pc, #100]	; (8002dc0 <HAL_TIM_Base_Start+0x8c>)
 8002d5a:	4293      	cmp	r3, r2
 8002d5c:	d009      	beq.n	8002d72 <HAL_TIM_Base_Start+0x3e>
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d66:	d004      	beq.n	8002d72 <HAL_TIM_Base_Start+0x3e>
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	4a15      	ldr	r2, [pc, #84]	; (8002dc4 <HAL_TIM_Base_Start+0x90>)
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	d115      	bne.n	8002d9e <HAL_TIM_Base_Start+0x6a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	689a      	ldr	r2, [r3, #8]
 8002d78:	4b13      	ldr	r3, [pc, #76]	; (8002dc8 <HAL_TIM_Base_Start+0x94>)
 8002d7a:	4013      	ands	r3, r2
 8002d7c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	2b06      	cmp	r3, #6
 8002d82:	d015      	beq.n	8002db0 <HAL_TIM_Base_Start+0x7c>
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d8a:	d011      	beq.n	8002db0 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	681a      	ldr	r2, [r3, #0]
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f042 0201 	orr.w	r2, r2, #1
 8002d9a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d9c:	e008      	b.n	8002db0 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	681a      	ldr	r2, [r3, #0]
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f042 0201 	orr.w	r2, r2, #1
 8002dac:	601a      	str	r2, [r3, #0]
 8002dae:	e000      	b.n	8002db2 <HAL_TIM_Base_Start+0x7e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002db0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002db2:	2300      	movs	r3, #0
}
 8002db4:	4618      	mov	r0, r3
 8002db6:	3714      	adds	r7, #20
 8002db8:	46bd      	mov	sp, r7
 8002dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dbe:	4770      	bx	lr
 8002dc0:	40012c00 	.word	0x40012c00
 8002dc4:	40014000 	.word	0x40014000
 8002dc8:	00010007 	.word	0x00010007

08002dcc <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8002dcc:	b480      	push	{r7}
 8002dce:	b083      	sub	sp, #12
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	6a1a      	ldr	r2, [r3, #32]
 8002dda:	f241 1311 	movw	r3, #4369	; 0x1111
 8002dde:	4013      	ands	r3, r2
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d10f      	bne.n	8002e04 <HAL_TIM_Base_Stop+0x38>
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	6a1a      	ldr	r2, [r3, #32]
 8002dea:	f240 4344 	movw	r3, #1092	; 0x444
 8002dee:	4013      	ands	r3, r2
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d107      	bne.n	8002e04 <HAL_TIM_Base_Stop+0x38>
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	681a      	ldr	r2, [r3, #0]
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f022 0201 	bic.w	r2, r2, #1
 8002e02:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2201      	movs	r2, #1
 8002e08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8002e0c:	2300      	movs	r3, #0
}
 8002e0e:	4618      	mov	r0, r3
 8002e10:	370c      	adds	r7, #12
 8002e12:	46bd      	mov	sp, r7
 8002e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e18:	4770      	bx	lr

08002e1a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002e1a:	b580      	push	{r7, lr}
 8002e1c:	b082      	sub	sp, #8
 8002e1e:	af00      	add	r7, sp, #0
 8002e20:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d101      	bne.n	8002e2c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002e28:	2301      	movs	r3, #1
 8002e2a:	e049      	b.n	8002ec0 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e32:	b2db      	uxtb	r3, r3
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d106      	bne.n	8002e46 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002e40:	6878      	ldr	r0, [r7, #4]
 8002e42:	f7fd fe2b 	bl	8000a9c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	2202      	movs	r2, #2
 8002e4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681a      	ldr	r2, [r3, #0]
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	3304      	adds	r3, #4
 8002e56:	4619      	mov	r1, r3
 8002e58:	4610      	mov	r0, r2
 8002e5a:	f000 fb87 	bl	800356c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	2201      	movs	r2, #1
 8002e62:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	2201      	movs	r2, #1
 8002e6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	2201      	movs	r2, #1
 8002e72:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	2201      	movs	r2, #1
 8002e7a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	2201      	movs	r2, #1
 8002e82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	2201      	movs	r2, #1
 8002e8a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	2201      	movs	r2, #1
 8002e92:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	2201      	movs	r2, #1
 8002e9a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	2201      	movs	r2, #1
 8002ea2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	2201      	movs	r2, #1
 8002eaa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	2201      	movs	r2, #1
 8002eb2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	2201      	movs	r2, #1
 8002eba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002ebe:	2300      	movs	r3, #0
}
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	3708      	adds	r7, #8
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	bd80      	pop	{r7, pc}

08002ec8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b084      	sub	sp, #16
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
 8002ed0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002ed2:	683b      	ldr	r3, [r7, #0]
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d109      	bne.n	8002eec <HAL_TIM_PWM_Start+0x24>
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002ede:	b2db      	uxtb	r3, r3
 8002ee0:	2b01      	cmp	r3, #1
 8002ee2:	bf14      	ite	ne
 8002ee4:	2301      	movne	r3, #1
 8002ee6:	2300      	moveq	r3, #0
 8002ee8:	b2db      	uxtb	r3, r3
 8002eea:	e03c      	b.n	8002f66 <HAL_TIM_PWM_Start+0x9e>
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	2b04      	cmp	r3, #4
 8002ef0:	d109      	bne.n	8002f06 <HAL_TIM_PWM_Start+0x3e>
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002ef8:	b2db      	uxtb	r3, r3
 8002efa:	2b01      	cmp	r3, #1
 8002efc:	bf14      	ite	ne
 8002efe:	2301      	movne	r3, #1
 8002f00:	2300      	moveq	r3, #0
 8002f02:	b2db      	uxtb	r3, r3
 8002f04:	e02f      	b.n	8002f66 <HAL_TIM_PWM_Start+0x9e>
 8002f06:	683b      	ldr	r3, [r7, #0]
 8002f08:	2b08      	cmp	r3, #8
 8002f0a:	d109      	bne.n	8002f20 <HAL_TIM_PWM_Start+0x58>
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002f12:	b2db      	uxtb	r3, r3
 8002f14:	2b01      	cmp	r3, #1
 8002f16:	bf14      	ite	ne
 8002f18:	2301      	movne	r3, #1
 8002f1a:	2300      	moveq	r3, #0
 8002f1c:	b2db      	uxtb	r3, r3
 8002f1e:	e022      	b.n	8002f66 <HAL_TIM_PWM_Start+0x9e>
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	2b0c      	cmp	r3, #12
 8002f24:	d109      	bne.n	8002f3a <HAL_TIM_PWM_Start+0x72>
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f2c:	b2db      	uxtb	r3, r3
 8002f2e:	2b01      	cmp	r3, #1
 8002f30:	bf14      	ite	ne
 8002f32:	2301      	movne	r3, #1
 8002f34:	2300      	moveq	r3, #0
 8002f36:	b2db      	uxtb	r3, r3
 8002f38:	e015      	b.n	8002f66 <HAL_TIM_PWM_Start+0x9e>
 8002f3a:	683b      	ldr	r3, [r7, #0]
 8002f3c:	2b10      	cmp	r3, #16
 8002f3e:	d109      	bne.n	8002f54 <HAL_TIM_PWM_Start+0x8c>
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002f46:	b2db      	uxtb	r3, r3
 8002f48:	2b01      	cmp	r3, #1
 8002f4a:	bf14      	ite	ne
 8002f4c:	2301      	movne	r3, #1
 8002f4e:	2300      	moveq	r3, #0
 8002f50:	b2db      	uxtb	r3, r3
 8002f52:	e008      	b.n	8002f66 <HAL_TIM_PWM_Start+0x9e>
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8002f5a:	b2db      	uxtb	r3, r3
 8002f5c:	2b01      	cmp	r3, #1
 8002f5e:	bf14      	ite	ne
 8002f60:	2301      	movne	r3, #1
 8002f62:	2300      	moveq	r3, #0
 8002f64:	b2db      	uxtb	r3, r3
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d001      	beq.n	8002f6e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8002f6a:	2301      	movs	r3, #1
 8002f6c:	e083      	b.n	8003076 <HAL_TIM_PWM_Start+0x1ae>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002f6e:	683b      	ldr	r3, [r7, #0]
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d104      	bne.n	8002f7e <HAL_TIM_PWM_Start+0xb6>
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	2202      	movs	r2, #2
 8002f78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002f7c:	e023      	b.n	8002fc6 <HAL_TIM_PWM_Start+0xfe>
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	2b04      	cmp	r3, #4
 8002f82:	d104      	bne.n	8002f8e <HAL_TIM_PWM_Start+0xc6>
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2202      	movs	r2, #2
 8002f88:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002f8c:	e01b      	b.n	8002fc6 <HAL_TIM_PWM_Start+0xfe>
 8002f8e:	683b      	ldr	r3, [r7, #0]
 8002f90:	2b08      	cmp	r3, #8
 8002f92:	d104      	bne.n	8002f9e <HAL_TIM_PWM_Start+0xd6>
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2202      	movs	r2, #2
 8002f98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002f9c:	e013      	b.n	8002fc6 <HAL_TIM_PWM_Start+0xfe>
 8002f9e:	683b      	ldr	r3, [r7, #0]
 8002fa0:	2b0c      	cmp	r3, #12
 8002fa2:	d104      	bne.n	8002fae <HAL_TIM_PWM_Start+0xe6>
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2202      	movs	r2, #2
 8002fa8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002fac:	e00b      	b.n	8002fc6 <HAL_TIM_PWM_Start+0xfe>
 8002fae:	683b      	ldr	r3, [r7, #0]
 8002fb0:	2b10      	cmp	r3, #16
 8002fb2:	d104      	bne.n	8002fbe <HAL_TIM_PWM_Start+0xf6>
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2202      	movs	r2, #2
 8002fb8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002fbc:	e003      	b.n	8002fc6 <HAL_TIM_PWM_Start+0xfe>
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	2202      	movs	r2, #2
 8002fc2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	2201      	movs	r2, #1
 8002fcc:	6839      	ldr	r1, [r7, #0]
 8002fce:	4618      	mov	r0, r3
 8002fd0:	f000 fe7a 	bl	8003cc8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	4a29      	ldr	r2, [pc, #164]	; (8003080 <HAL_TIM_PWM_Start+0x1b8>)
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	d00e      	beq.n	8002ffc <HAL_TIM_PWM_Start+0x134>
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	4a28      	ldr	r2, [pc, #160]	; (8003084 <HAL_TIM_PWM_Start+0x1bc>)
 8002fe4:	4293      	cmp	r3, r2
 8002fe6:	d009      	beq.n	8002ffc <HAL_TIM_PWM_Start+0x134>
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	4a26      	ldr	r2, [pc, #152]	; (8003088 <HAL_TIM_PWM_Start+0x1c0>)
 8002fee:	4293      	cmp	r3, r2
 8002ff0:	d004      	beq.n	8002ffc <HAL_TIM_PWM_Start+0x134>
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	4a25      	ldr	r2, [pc, #148]	; (800308c <HAL_TIM_PWM_Start+0x1c4>)
 8002ff8:	4293      	cmp	r3, r2
 8002ffa:	d101      	bne.n	8003000 <HAL_TIM_PWM_Start+0x138>
 8002ffc:	2301      	movs	r3, #1
 8002ffe:	e000      	b.n	8003002 <HAL_TIM_PWM_Start+0x13a>
 8003000:	2300      	movs	r3, #0
 8003002:	2b00      	cmp	r3, #0
 8003004:	d007      	beq.n	8003016 <HAL_TIM_PWM_Start+0x14e>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003014:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	4a19      	ldr	r2, [pc, #100]	; (8003080 <HAL_TIM_PWM_Start+0x1b8>)
 800301c:	4293      	cmp	r3, r2
 800301e:	d009      	beq.n	8003034 <HAL_TIM_PWM_Start+0x16c>
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003028:	d004      	beq.n	8003034 <HAL_TIM_PWM_Start+0x16c>
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	4a15      	ldr	r2, [pc, #84]	; (8003084 <HAL_TIM_PWM_Start+0x1bc>)
 8003030:	4293      	cmp	r3, r2
 8003032:	d115      	bne.n	8003060 <HAL_TIM_PWM_Start+0x198>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	689a      	ldr	r2, [r3, #8]
 800303a:	4b15      	ldr	r3, [pc, #84]	; (8003090 <HAL_TIM_PWM_Start+0x1c8>)
 800303c:	4013      	ands	r3, r2
 800303e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	2b06      	cmp	r3, #6
 8003044:	d015      	beq.n	8003072 <HAL_TIM_PWM_Start+0x1aa>
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800304c:	d011      	beq.n	8003072 <HAL_TIM_PWM_Start+0x1aa>
    {
      __HAL_TIM_ENABLE(htim);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	681a      	ldr	r2, [r3, #0]
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f042 0201 	orr.w	r2, r2, #1
 800305c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800305e:	e008      	b.n	8003072 <HAL_TIM_PWM_Start+0x1aa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	681a      	ldr	r2, [r3, #0]
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f042 0201 	orr.w	r2, r2, #1
 800306e:	601a      	str	r2, [r3, #0]
 8003070:	e000      	b.n	8003074 <HAL_TIM_PWM_Start+0x1ac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003072:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003074:	2300      	movs	r3, #0
}
 8003076:	4618      	mov	r0, r3
 8003078:	3710      	adds	r7, #16
 800307a:	46bd      	mov	sp, r7
 800307c:	bd80      	pop	{r7, pc}
 800307e:	bf00      	nop
 8003080:	40012c00 	.word	0x40012c00
 8003084:	40014000 	.word	0x40014000
 8003088:	40014400 	.word	0x40014400
 800308c:	40014800 	.word	0x40014800
 8003090:	00010007 	.word	0x00010007

08003094 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003094:	b580      	push	{r7, lr}
 8003096:	b082      	sub	sp, #8
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]
 800309c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	2200      	movs	r2, #0
 80030a4:	6839      	ldr	r1, [r7, #0]
 80030a6:	4618      	mov	r0, r3
 80030a8:	f000 fe0e 	bl	8003cc8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	4a3b      	ldr	r2, [pc, #236]	; (80031a0 <HAL_TIM_PWM_Stop+0x10c>)
 80030b2:	4293      	cmp	r3, r2
 80030b4:	d00e      	beq.n	80030d4 <HAL_TIM_PWM_Stop+0x40>
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	4a3a      	ldr	r2, [pc, #232]	; (80031a4 <HAL_TIM_PWM_Stop+0x110>)
 80030bc:	4293      	cmp	r3, r2
 80030be:	d009      	beq.n	80030d4 <HAL_TIM_PWM_Stop+0x40>
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	4a38      	ldr	r2, [pc, #224]	; (80031a8 <HAL_TIM_PWM_Stop+0x114>)
 80030c6:	4293      	cmp	r3, r2
 80030c8:	d004      	beq.n	80030d4 <HAL_TIM_PWM_Stop+0x40>
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	4a37      	ldr	r2, [pc, #220]	; (80031ac <HAL_TIM_PWM_Stop+0x118>)
 80030d0:	4293      	cmp	r3, r2
 80030d2:	d101      	bne.n	80030d8 <HAL_TIM_PWM_Stop+0x44>
 80030d4:	2301      	movs	r3, #1
 80030d6:	e000      	b.n	80030da <HAL_TIM_PWM_Stop+0x46>
 80030d8:	2300      	movs	r3, #0
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d017      	beq.n	800310e <HAL_TIM_PWM_Stop+0x7a>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	6a1a      	ldr	r2, [r3, #32]
 80030e4:	f241 1311 	movw	r3, #4369	; 0x1111
 80030e8:	4013      	ands	r3, r2
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d10f      	bne.n	800310e <HAL_TIM_PWM_Stop+0x7a>
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	6a1a      	ldr	r2, [r3, #32]
 80030f4:	f240 4344 	movw	r3, #1092	; 0x444
 80030f8:	4013      	ands	r3, r2
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d107      	bne.n	800310e <HAL_TIM_PWM_Stop+0x7a>
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800310c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	6a1a      	ldr	r2, [r3, #32]
 8003114:	f241 1311 	movw	r3, #4369	; 0x1111
 8003118:	4013      	ands	r3, r2
 800311a:	2b00      	cmp	r3, #0
 800311c:	d10f      	bne.n	800313e <HAL_TIM_PWM_Stop+0xaa>
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	6a1a      	ldr	r2, [r3, #32]
 8003124:	f240 4344 	movw	r3, #1092	; 0x444
 8003128:	4013      	ands	r3, r2
 800312a:	2b00      	cmp	r3, #0
 800312c:	d107      	bne.n	800313e <HAL_TIM_PWM_Stop+0xaa>
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	681a      	ldr	r2, [r3, #0]
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f022 0201 	bic.w	r2, r2, #1
 800313c:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800313e:	683b      	ldr	r3, [r7, #0]
 8003140:	2b00      	cmp	r3, #0
 8003142:	d104      	bne.n	800314e <HAL_TIM_PWM_Stop+0xba>
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2201      	movs	r2, #1
 8003148:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800314c:	e023      	b.n	8003196 <HAL_TIM_PWM_Stop+0x102>
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	2b04      	cmp	r3, #4
 8003152:	d104      	bne.n	800315e <HAL_TIM_PWM_Stop+0xca>
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2201      	movs	r2, #1
 8003158:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800315c:	e01b      	b.n	8003196 <HAL_TIM_PWM_Stop+0x102>
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	2b08      	cmp	r3, #8
 8003162:	d104      	bne.n	800316e <HAL_TIM_PWM_Stop+0xda>
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2201      	movs	r2, #1
 8003168:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800316c:	e013      	b.n	8003196 <HAL_TIM_PWM_Stop+0x102>
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	2b0c      	cmp	r3, #12
 8003172:	d104      	bne.n	800317e <HAL_TIM_PWM_Stop+0xea>
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2201      	movs	r2, #1
 8003178:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800317c:	e00b      	b.n	8003196 <HAL_TIM_PWM_Stop+0x102>
 800317e:	683b      	ldr	r3, [r7, #0]
 8003180:	2b10      	cmp	r3, #16
 8003182:	d104      	bne.n	800318e <HAL_TIM_PWM_Stop+0xfa>
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2201      	movs	r2, #1
 8003188:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800318c:	e003      	b.n	8003196 <HAL_TIM_PWM_Stop+0x102>
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	2201      	movs	r2, #1
 8003192:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 8003196:	2300      	movs	r3, #0
}
 8003198:	4618      	mov	r0, r3
 800319a:	3708      	adds	r7, #8
 800319c:	46bd      	mov	sp, r7
 800319e:	bd80      	pop	{r7, pc}
 80031a0:	40012c00 	.word	0x40012c00
 80031a4:	40014000 	.word	0x40014000
 80031a8:	40014400 	.word	0x40014400
 80031ac:	40014800 	.word	0x40014800

080031b0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b086      	sub	sp, #24
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	60f8      	str	r0, [r7, #12]
 80031b8:	60b9      	str	r1, [r7, #8]
 80031ba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80031bc:	2300      	movs	r3, #0
 80031be:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80031c6:	2b01      	cmp	r3, #1
 80031c8:	d101      	bne.n	80031ce <HAL_TIM_PWM_ConfigChannel+0x1e>
 80031ca:	2302      	movs	r3, #2
 80031cc:	e0ff      	b.n	80033ce <HAL_TIM_PWM_ConfigChannel+0x21e>
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	2201      	movs	r2, #1
 80031d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	2b14      	cmp	r3, #20
 80031da:	f200 80f0 	bhi.w	80033be <HAL_TIM_PWM_ConfigChannel+0x20e>
 80031de:	a201      	add	r2, pc, #4	; (adr r2, 80031e4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80031e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031e4:	08003239 	.word	0x08003239
 80031e8:	080033bf 	.word	0x080033bf
 80031ec:	080033bf 	.word	0x080033bf
 80031f0:	080033bf 	.word	0x080033bf
 80031f4:	08003279 	.word	0x08003279
 80031f8:	080033bf 	.word	0x080033bf
 80031fc:	080033bf 	.word	0x080033bf
 8003200:	080033bf 	.word	0x080033bf
 8003204:	080032bb 	.word	0x080032bb
 8003208:	080033bf 	.word	0x080033bf
 800320c:	080033bf 	.word	0x080033bf
 8003210:	080033bf 	.word	0x080033bf
 8003214:	080032fb 	.word	0x080032fb
 8003218:	080033bf 	.word	0x080033bf
 800321c:	080033bf 	.word	0x080033bf
 8003220:	080033bf 	.word	0x080033bf
 8003224:	0800333d 	.word	0x0800333d
 8003228:	080033bf 	.word	0x080033bf
 800322c:	080033bf 	.word	0x080033bf
 8003230:	080033bf 	.word	0x080033bf
 8003234:	0800337d 	.word	0x0800337d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	68b9      	ldr	r1, [r7, #8]
 800323e:	4618      	mov	r0, r3
 8003240:	f000 fa02 	bl	8003648 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	699a      	ldr	r2, [r3, #24]
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f042 0208 	orr.w	r2, r2, #8
 8003252:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	699a      	ldr	r2, [r3, #24]
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f022 0204 	bic.w	r2, r2, #4
 8003262:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	6999      	ldr	r1, [r3, #24]
 800326a:	68bb      	ldr	r3, [r7, #8]
 800326c:	691a      	ldr	r2, [r3, #16]
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	430a      	orrs	r2, r1
 8003274:	619a      	str	r2, [r3, #24]
      break;
 8003276:	e0a5      	b.n	80033c4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	68b9      	ldr	r1, [r7, #8]
 800327e:	4618      	mov	r0, r3
 8003280:	f000 fa68 	bl	8003754 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	699a      	ldr	r2, [r3, #24]
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003292:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	699a      	ldr	r2, [r3, #24]
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80032a2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	6999      	ldr	r1, [r3, #24]
 80032aa:	68bb      	ldr	r3, [r7, #8]
 80032ac:	691b      	ldr	r3, [r3, #16]
 80032ae:	021a      	lsls	r2, r3, #8
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	430a      	orrs	r2, r1
 80032b6:	619a      	str	r2, [r3, #24]
      break;
 80032b8:	e084      	b.n	80033c4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	68b9      	ldr	r1, [r7, #8]
 80032c0:	4618      	mov	r0, r3
 80032c2:	f000 fac7 	bl	8003854 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	69da      	ldr	r2, [r3, #28]
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f042 0208 	orr.w	r2, r2, #8
 80032d4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	69da      	ldr	r2, [r3, #28]
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f022 0204 	bic.w	r2, r2, #4
 80032e4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	69d9      	ldr	r1, [r3, #28]
 80032ec:	68bb      	ldr	r3, [r7, #8]
 80032ee:	691a      	ldr	r2, [r3, #16]
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	430a      	orrs	r2, r1
 80032f6:	61da      	str	r2, [r3, #28]
      break;
 80032f8:	e064      	b.n	80033c4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	68b9      	ldr	r1, [r7, #8]
 8003300:	4618      	mov	r0, r3
 8003302:	f000 fb25 	bl	8003950 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	69da      	ldr	r2, [r3, #28]
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003314:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	69da      	ldr	r2, [r3, #28]
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003324:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	69d9      	ldr	r1, [r3, #28]
 800332c:	68bb      	ldr	r3, [r7, #8]
 800332e:	691b      	ldr	r3, [r3, #16]
 8003330:	021a      	lsls	r2, r3, #8
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	430a      	orrs	r2, r1
 8003338:	61da      	str	r2, [r3, #28]
      break;
 800333a:	e043      	b.n	80033c4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	68b9      	ldr	r1, [r7, #8]
 8003342:	4618      	mov	r0, r3
 8003344:	f000 fb68 	bl	8003a18 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f042 0208 	orr.w	r2, r2, #8
 8003356:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f022 0204 	bic.w	r2, r2, #4
 8003366:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800336e:	68bb      	ldr	r3, [r7, #8]
 8003370:	691a      	ldr	r2, [r3, #16]
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	430a      	orrs	r2, r1
 8003378:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800337a:	e023      	b.n	80033c4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	68b9      	ldr	r1, [r7, #8]
 8003382:	4618      	mov	r0, r3
 8003384:	f000 fba6 	bl	8003ad4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003396:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80033a6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80033ae:	68bb      	ldr	r3, [r7, #8]
 80033b0:	691b      	ldr	r3, [r3, #16]
 80033b2:	021a      	lsls	r2, r3, #8
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	430a      	orrs	r2, r1
 80033ba:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80033bc:	e002      	b.n	80033c4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 80033be:	2301      	movs	r3, #1
 80033c0:	75fb      	strb	r3, [r7, #23]
      break;
 80033c2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	2200      	movs	r2, #0
 80033c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80033cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80033ce:	4618      	mov	r0, r3
 80033d0:	3718      	adds	r7, #24
 80033d2:	46bd      	mov	sp, r7
 80033d4:	bd80      	pop	{r7, pc}
 80033d6:	bf00      	nop

080033d8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80033d8:	b580      	push	{r7, lr}
 80033da:	b084      	sub	sp, #16
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
 80033e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80033e2:	2300      	movs	r3, #0
 80033e4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80033ec:	2b01      	cmp	r3, #1
 80033ee:	d101      	bne.n	80033f4 <HAL_TIM_ConfigClockSource+0x1c>
 80033f0:	2302      	movs	r3, #2
 80033f2:	e0b6      	b.n	8003562 <HAL_TIM_ConfigClockSource+0x18a>
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2201      	movs	r2, #1
 80033f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2202      	movs	r2, #2
 8003400:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	689b      	ldr	r3, [r3, #8]
 800340a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800340c:	68bb      	ldr	r3, [r7, #8]
 800340e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003412:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003416:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003418:	68bb      	ldr	r3, [r7, #8]
 800341a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800341e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	68ba      	ldr	r2, [r7, #8]
 8003426:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003430:	d03e      	beq.n	80034b0 <HAL_TIM_ConfigClockSource+0xd8>
 8003432:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003436:	f200 8087 	bhi.w	8003548 <HAL_TIM_ConfigClockSource+0x170>
 800343a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800343e:	f000 8086 	beq.w	800354e <HAL_TIM_ConfigClockSource+0x176>
 8003442:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003446:	d87f      	bhi.n	8003548 <HAL_TIM_ConfigClockSource+0x170>
 8003448:	2b70      	cmp	r3, #112	; 0x70
 800344a:	d01a      	beq.n	8003482 <HAL_TIM_ConfigClockSource+0xaa>
 800344c:	2b70      	cmp	r3, #112	; 0x70
 800344e:	d87b      	bhi.n	8003548 <HAL_TIM_ConfigClockSource+0x170>
 8003450:	2b60      	cmp	r3, #96	; 0x60
 8003452:	d050      	beq.n	80034f6 <HAL_TIM_ConfigClockSource+0x11e>
 8003454:	2b60      	cmp	r3, #96	; 0x60
 8003456:	d877      	bhi.n	8003548 <HAL_TIM_ConfigClockSource+0x170>
 8003458:	2b50      	cmp	r3, #80	; 0x50
 800345a:	d03c      	beq.n	80034d6 <HAL_TIM_ConfigClockSource+0xfe>
 800345c:	2b50      	cmp	r3, #80	; 0x50
 800345e:	d873      	bhi.n	8003548 <HAL_TIM_ConfigClockSource+0x170>
 8003460:	2b40      	cmp	r3, #64	; 0x40
 8003462:	d058      	beq.n	8003516 <HAL_TIM_ConfigClockSource+0x13e>
 8003464:	2b40      	cmp	r3, #64	; 0x40
 8003466:	d86f      	bhi.n	8003548 <HAL_TIM_ConfigClockSource+0x170>
 8003468:	2b30      	cmp	r3, #48	; 0x30
 800346a:	d064      	beq.n	8003536 <HAL_TIM_ConfigClockSource+0x15e>
 800346c:	2b30      	cmp	r3, #48	; 0x30
 800346e:	d86b      	bhi.n	8003548 <HAL_TIM_ConfigClockSource+0x170>
 8003470:	2b20      	cmp	r3, #32
 8003472:	d060      	beq.n	8003536 <HAL_TIM_ConfigClockSource+0x15e>
 8003474:	2b20      	cmp	r3, #32
 8003476:	d867      	bhi.n	8003548 <HAL_TIM_ConfigClockSource+0x170>
 8003478:	2b00      	cmp	r3, #0
 800347a:	d05c      	beq.n	8003536 <HAL_TIM_ConfigClockSource+0x15e>
 800347c:	2b10      	cmp	r3, #16
 800347e:	d05a      	beq.n	8003536 <HAL_TIM_ConfigClockSource+0x15e>
 8003480:	e062      	b.n	8003548 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6818      	ldr	r0, [r3, #0]
 8003486:	683b      	ldr	r3, [r7, #0]
 8003488:	6899      	ldr	r1, [r3, #8]
 800348a:	683b      	ldr	r3, [r7, #0]
 800348c:	685a      	ldr	r2, [r3, #4]
 800348e:	683b      	ldr	r3, [r7, #0]
 8003490:	68db      	ldr	r3, [r3, #12]
 8003492:	f000 fbf9 	bl	8003c88 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	689b      	ldr	r3, [r3, #8]
 800349c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800349e:	68bb      	ldr	r3, [r7, #8]
 80034a0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80034a4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	68ba      	ldr	r2, [r7, #8]
 80034ac:	609a      	str	r2, [r3, #8]
      break;
 80034ae:	e04f      	b.n	8003550 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6818      	ldr	r0, [r3, #0]
 80034b4:	683b      	ldr	r3, [r7, #0]
 80034b6:	6899      	ldr	r1, [r3, #8]
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	685a      	ldr	r2, [r3, #4]
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	68db      	ldr	r3, [r3, #12]
 80034c0:	f000 fbe2 	bl	8003c88 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	689a      	ldr	r2, [r3, #8]
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80034d2:	609a      	str	r2, [r3, #8]
      break;
 80034d4:	e03c      	b.n	8003550 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6818      	ldr	r0, [r3, #0]
 80034da:	683b      	ldr	r3, [r7, #0]
 80034dc:	6859      	ldr	r1, [r3, #4]
 80034de:	683b      	ldr	r3, [r7, #0]
 80034e0:	68db      	ldr	r3, [r3, #12]
 80034e2:	461a      	mov	r2, r3
 80034e4:	f000 fb56 	bl	8003b94 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	2150      	movs	r1, #80	; 0x50
 80034ee:	4618      	mov	r0, r3
 80034f0:	f000 fbaf 	bl	8003c52 <TIM_ITRx_SetConfig>
      break;
 80034f4:	e02c      	b.n	8003550 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6818      	ldr	r0, [r3, #0]
 80034fa:	683b      	ldr	r3, [r7, #0]
 80034fc:	6859      	ldr	r1, [r3, #4]
 80034fe:	683b      	ldr	r3, [r7, #0]
 8003500:	68db      	ldr	r3, [r3, #12]
 8003502:	461a      	mov	r2, r3
 8003504:	f000 fb75 	bl	8003bf2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	2160      	movs	r1, #96	; 0x60
 800350e:	4618      	mov	r0, r3
 8003510:	f000 fb9f 	bl	8003c52 <TIM_ITRx_SetConfig>
      break;
 8003514:	e01c      	b.n	8003550 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6818      	ldr	r0, [r3, #0]
 800351a:	683b      	ldr	r3, [r7, #0]
 800351c:	6859      	ldr	r1, [r3, #4]
 800351e:	683b      	ldr	r3, [r7, #0]
 8003520:	68db      	ldr	r3, [r3, #12]
 8003522:	461a      	mov	r2, r3
 8003524:	f000 fb36 	bl	8003b94 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	2140      	movs	r1, #64	; 0x40
 800352e:	4618      	mov	r0, r3
 8003530:	f000 fb8f 	bl	8003c52 <TIM_ITRx_SetConfig>
      break;
 8003534:	e00c      	b.n	8003550 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681a      	ldr	r2, [r3, #0]
 800353a:	683b      	ldr	r3, [r7, #0]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	4619      	mov	r1, r3
 8003540:	4610      	mov	r0, r2
 8003542:	f000 fb86 	bl	8003c52 <TIM_ITRx_SetConfig>
      break;
 8003546:	e003      	b.n	8003550 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8003548:	2301      	movs	r3, #1
 800354a:	73fb      	strb	r3, [r7, #15]
      break;
 800354c:	e000      	b.n	8003550 <HAL_TIM_ConfigClockSource+0x178>
      break;
 800354e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2201      	movs	r2, #1
 8003554:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2200      	movs	r2, #0
 800355c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003560:	7bfb      	ldrb	r3, [r7, #15]
}
 8003562:	4618      	mov	r0, r3
 8003564:	3710      	adds	r7, #16
 8003566:	46bd      	mov	sp, r7
 8003568:	bd80      	pop	{r7, pc}
	...

0800356c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800356c:	b480      	push	{r7}
 800356e:	b085      	sub	sp, #20
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]
 8003574:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	4a2e      	ldr	r2, [pc, #184]	; (8003638 <TIM_Base_SetConfig+0xcc>)
 8003580:	4293      	cmp	r3, r2
 8003582:	d003      	beq.n	800358c <TIM_Base_SetConfig+0x20>
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800358a:	d108      	bne.n	800359e <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003592:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	685b      	ldr	r3, [r3, #4]
 8003598:	68fa      	ldr	r2, [r7, #12]
 800359a:	4313      	orrs	r3, r2
 800359c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	4a25      	ldr	r2, [pc, #148]	; (8003638 <TIM_Base_SetConfig+0xcc>)
 80035a2:	4293      	cmp	r3, r2
 80035a4:	d00f      	beq.n	80035c6 <TIM_Base_SetConfig+0x5a>
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035ac:	d00b      	beq.n	80035c6 <TIM_Base_SetConfig+0x5a>
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	4a22      	ldr	r2, [pc, #136]	; (800363c <TIM_Base_SetConfig+0xd0>)
 80035b2:	4293      	cmp	r3, r2
 80035b4:	d007      	beq.n	80035c6 <TIM_Base_SetConfig+0x5a>
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	4a21      	ldr	r2, [pc, #132]	; (8003640 <TIM_Base_SetConfig+0xd4>)
 80035ba:	4293      	cmp	r3, r2
 80035bc:	d003      	beq.n	80035c6 <TIM_Base_SetConfig+0x5a>
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	4a20      	ldr	r2, [pc, #128]	; (8003644 <TIM_Base_SetConfig+0xd8>)
 80035c2:	4293      	cmp	r3, r2
 80035c4:	d108      	bne.n	80035d8 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80035cc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80035ce:	683b      	ldr	r3, [r7, #0]
 80035d0:	68db      	ldr	r3, [r3, #12]
 80035d2:	68fa      	ldr	r2, [r7, #12]
 80035d4:	4313      	orrs	r3, r2
 80035d6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	695b      	ldr	r3, [r3, #20]
 80035e2:	4313      	orrs	r3, r2
 80035e4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	68fa      	ldr	r2, [r7, #12]
 80035ea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	689a      	ldr	r2, [r3, #8]
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	681a      	ldr	r2, [r3, #0]
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	4a0e      	ldr	r2, [pc, #56]	; (8003638 <TIM_Base_SetConfig+0xcc>)
 8003600:	4293      	cmp	r3, r2
 8003602:	d00b      	beq.n	800361c <TIM_Base_SetConfig+0xb0>
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	4a0d      	ldr	r2, [pc, #52]	; (800363c <TIM_Base_SetConfig+0xd0>)
 8003608:	4293      	cmp	r3, r2
 800360a:	d007      	beq.n	800361c <TIM_Base_SetConfig+0xb0>
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	4a0c      	ldr	r2, [pc, #48]	; (8003640 <TIM_Base_SetConfig+0xd4>)
 8003610:	4293      	cmp	r3, r2
 8003612:	d003      	beq.n	800361c <TIM_Base_SetConfig+0xb0>
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	4a0b      	ldr	r2, [pc, #44]	; (8003644 <TIM_Base_SetConfig+0xd8>)
 8003618:	4293      	cmp	r3, r2
 800361a:	d103      	bne.n	8003624 <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800361c:	683b      	ldr	r3, [r7, #0]
 800361e:	691a      	ldr	r2, [r3, #16]
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2201      	movs	r2, #1
 8003628:	615a      	str	r2, [r3, #20]
}
 800362a:	bf00      	nop
 800362c:	3714      	adds	r7, #20
 800362e:	46bd      	mov	sp, r7
 8003630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003634:	4770      	bx	lr
 8003636:	bf00      	nop
 8003638:	40012c00 	.word	0x40012c00
 800363c:	40014000 	.word	0x40014000
 8003640:	40014400 	.word	0x40014400
 8003644:	40014800 	.word	0x40014800

08003648 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003648:	b480      	push	{r7}
 800364a:	b087      	sub	sp, #28
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
 8003650:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6a1b      	ldr	r3, [r3, #32]
 8003656:	f023 0201 	bic.w	r2, r3, #1
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	6a1b      	ldr	r3, [r3, #32]
 8003662:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	685b      	ldr	r3, [r3, #4]
 8003668:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	699b      	ldr	r3, [r3, #24]
 800366e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003676:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800367a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	f023 0303 	bic.w	r3, r3, #3
 8003682:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003684:	683b      	ldr	r3, [r7, #0]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	68fa      	ldr	r2, [r7, #12]
 800368a:	4313      	orrs	r3, r2
 800368c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800368e:	697b      	ldr	r3, [r7, #20]
 8003690:	f023 0302 	bic.w	r3, r3, #2
 8003694:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003696:	683b      	ldr	r3, [r7, #0]
 8003698:	689b      	ldr	r3, [r3, #8]
 800369a:	697a      	ldr	r2, [r7, #20]
 800369c:	4313      	orrs	r3, r2
 800369e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	4a28      	ldr	r2, [pc, #160]	; (8003744 <TIM_OC1_SetConfig+0xfc>)
 80036a4:	4293      	cmp	r3, r2
 80036a6:	d00b      	beq.n	80036c0 <TIM_OC1_SetConfig+0x78>
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	4a27      	ldr	r2, [pc, #156]	; (8003748 <TIM_OC1_SetConfig+0x100>)
 80036ac:	4293      	cmp	r3, r2
 80036ae:	d007      	beq.n	80036c0 <TIM_OC1_SetConfig+0x78>
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	4a26      	ldr	r2, [pc, #152]	; (800374c <TIM_OC1_SetConfig+0x104>)
 80036b4:	4293      	cmp	r3, r2
 80036b6:	d003      	beq.n	80036c0 <TIM_OC1_SetConfig+0x78>
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	4a25      	ldr	r2, [pc, #148]	; (8003750 <TIM_OC1_SetConfig+0x108>)
 80036bc:	4293      	cmp	r3, r2
 80036be:	d10c      	bne.n	80036da <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80036c0:	697b      	ldr	r3, [r7, #20]
 80036c2:	f023 0308 	bic.w	r3, r3, #8
 80036c6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80036c8:	683b      	ldr	r3, [r7, #0]
 80036ca:	68db      	ldr	r3, [r3, #12]
 80036cc:	697a      	ldr	r2, [r7, #20]
 80036ce:	4313      	orrs	r3, r2
 80036d0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80036d2:	697b      	ldr	r3, [r7, #20]
 80036d4:	f023 0304 	bic.w	r3, r3, #4
 80036d8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	4a19      	ldr	r2, [pc, #100]	; (8003744 <TIM_OC1_SetConfig+0xfc>)
 80036de:	4293      	cmp	r3, r2
 80036e0:	d00b      	beq.n	80036fa <TIM_OC1_SetConfig+0xb2>
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	4a18      	ldr	r2, [pc, #96]	; (8003748 <TIM_OC1_SetConfig+0x100>)
 80036e6:	4293      	cmp	r3, r2
 80036e8:	d007      	beq.n	80036fa <TIM_OC1_SetConfig+0xb2>
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	4a17      	ldr	r2, [pc, #92]	; (800374c <TIM_OC1_SetConfig+0x104>)
 80036ee:	4293      	cmp	r3, r2
 80036f0:	d003      	beq.n	80036fa <TIM_OC1_SetConfig+0xb2>
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	4a16      	ldr	r2, [pc, #88]	; (8003750 <TIM_OC1_SetConfig+0x108>)
 80036f6:	4293      	cmp	r3, r2
 80036f8:	d111      	bne.n	800371e <TIM_OC1_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80036fa:	693b      	ldr	r3, [r7, #16]
 80036fc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003700:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003702:	693b      	ldr	r3, [r7, #16]
 8003704:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003708:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800370a:	683b      	ldr	r3, [r7, #0]
 800370c:	695b      	ldr	r3, [r3, #20]
 800370e:	693a      	ldr	r2, [r7, #16]
 8003710:	4313      	orrs	r3, r2
 8003712:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	699b      	ldr	r3, [r3, #24]
 8003718:	693a      	ldr	r2, [r7, #16]
 800371a:	4313      	orrs	r3, r2
 800371c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	693a      	ldr	r2, [r7, #16]
 8003722:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	68fa      	ldr	r2, [r7, #12]
 8003728:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800372a:	683b      	ldr	r3, [r7, #0]
 800372c:	685a      	ldr	r2, [r3, #4]
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	697a      	ldr	r2, [r7, #20]
 8003736:	621a      	str	r2, [r3, #32]
}
 8003738:	bf00      	nop
 800373a:	371c      	adds	r7, #28
 800373c:	46bd      	mov	sp, r7
 800373e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003742:	4770      	bx	lr
 8003744:	40012c00 	.word	0x40012c00
 8003748:	40014000 	.word	0x40014000
 800374c:	40014400 	.word	0x40014400
 8003750:	40014800 	.word	0x40014800

08003754 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003754:	b480      	push	{r7}
 8003756:	b087      	sub	sp, #28
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
 800375c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6a1b      	ldr	r3, [r3, #32]
 8003762:	f023 0210 	bic.w	r2, r3, #16
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6a1b      	ldr	r3, [r3, #32]
 800376e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	685b      	ldr	r3, [r3, #4]
 8003774:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	699b      	ldr	r3, [r3, #24]
 800377a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003782:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003786:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800378e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003790:	683b      	ldr	r3, [r7, #0]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	021b      	lsls	r3, r3, #8
 8003796:	68fa      	ldr	r2, [r7, #12]
 8003798:	4313      	orrs	r3, r2
 800379a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800379c:	697b      	ldr	r3, [r7, #20]
 800379e:	f023 0320 	bic.w	r3, r3, #32
 80037a2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80037a4:	683b      	ldr	r3, [r7, #0]
 80037a6:	689b      	ldr	r3, [r3, #8]
 80037a8:	011b      	lsls	r3, r3, #4
 80037aa:	697a      	ldr	r2, [r7, #20]
 80037ac:	4313      	orrs	r3, r2
 80037ae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	4a24      	ldr	r2, [pc, #144]	; (8003844 <TIM_OC2_SetConfig+0xf0>)
 80037b4:	4293      	cmp	r3, r2
 80037b6:	d10d      	bne.n	80037d4 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80037b8:	697b      	ldr	r3, [r7, #20]
 80037ba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80037be:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	68db      	ldr	r3, [r3, #12]
 80037c4:	011b      	lsls	r3, r3, #4
 80037c6:	697a      	ldr	r2, [r7, #20]
 80037c8:	4313      	orrs	r3, r2
 80037ca:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80037cc:	697b      	ldr	r3, [r7, #20]
 80037ce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80037d2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	4a1b      	ldr	r2, [pc, #108]	; (8003844 <TIM_OC2_SetConfig+0xf0>)
 80037d8:	4293      	cmp	r3, r2
 80037da:	d00b      	beq.n	80037f4 <TIM_OC2_SetConfig+0xa0>
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	4a1a      	ldr	r2, [pc, #104]	; (8003848 <TIM_OC2_SetConfig+0xf4>)
 80037e0:	4293      	cmp	r3, r2
 80037e2:	d007      	beq.n	80037f4 <TIM_OC2_SetConfig+0xa0>
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	4a19      	ldr	r2, [pc, #100]	; (800384c <TIM_OC2_SetConfig+0xf8>)
 80037e8:	4293      	cmp	r3, r2
 80037ea:	d003      	beq.n	80037f4 <TIM_OC2_SetConfig+0xa0>
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	4a18      	ldr	r2, [pc, #96]	; (8003850 <TIM_OC2_SetConfig+0xfc>)
 80037f0:	4293      	cmp	r3, r2
 80037f2:	d113      	bne.n	800381c <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80037f4:	693b      	ldr	r3, [r7, #16]
 80037f6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80037fa:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80037fc:	693b      	ldr	r3, [r7, #16]
 80037fe:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003802:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003804:	683b      	ldr	r3, [r7, #0]
 8003806:	695b      	ldr	r3, [r3, #20]
 8003808:	009b      	lsls	r3, r3, #2
 800380a:	693a      	ldr	r2, [r7, #16]
 800380c:	4313      	orrs	r3, r2
 800380e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	699b      	ldr	r3, [r3, #24]
 8003814:	009b      	lsls	r3, r3, #2
 8003816:	693a      	ldr	r2, [r7, #16]
 8003818:	4313      	orrs	r3, r2
 800381a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	693a      	ldr	r2, [r7, #16]
 8003820:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	68fa      	ldr	r2, [r7, #12]
 8003826:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003828:	683b      	ldr	r3, [r7, #0]
 800382a:	685a      	ldr	r2, [r3, #4]
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	697a      	ldr	r2, [r7, #20]
 8003834:	621a      	str	r2, [r3, #32]
}
 8003836:	bf00      	nop
 8003838:	371c      	adds	r7, #28
 800383a:	46bd      	mov	sp, r7
 800383c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003840:	4770      	bx	lr
 8003842:	bf00      	nop
 8003844:	40012c00 	.word	0x40012c00
 8003848:	40014000 	.word	0x40014000
 800384c:	40014400 	.word	0x40014400
 8003850:	40014800 	.word	0x40014800

08003854 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003854:	b480      	push	{r7}
 8003856:	b087      	sub	sp, #28
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
 800385c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6a1b      	ldr	r3, [r3, #32]
 8003862:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6a1b      	ldr	r3, [r3, #32]
 800386e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	685b      	ldr	r3, [r3, #4]
 8003874:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	69db      	ldr	r3, [r3, #28]
 800387a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003882:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003886:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	f023 0303 	bic.w	r3, r3, #3
 800388e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003890:	683b      	ldr	r3, [r7, #0]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	68fa      	ldr	r2, [r7, #12]
 8003896:	4313      	orrs	r3, r2
 8003898:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800389a:	697b      	ldr	r3, [r7, #20]
 800389c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80038a0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80038a2:	683b      	ldr	r3, [r7, #0]
 80038a4:	689b      	ldr	r3, [r3, #8]
 80038a6:	021b      	lsls	r3, r3, #8
 80038a8:	697a      	ldr	r2, [r7, #20]
 80038aa:	4313      	orrs	r3, r2
 80038ac:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	4a23      	ldr	r2, [pc, #140]	; (8003940 <TIM_OC3_SetConfig+0xec>)
 80038b2:	4293      	cmp	r3, r2
 80038b4:	d10d      	bne.n	80038d2 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80038b6:	697b      	ldr	r3, [r7, #20]
 80038b8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80038bc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80038be:	683b      	ldr	r3, [r7, #0]
 80038c0:	68db      	ldr	r3, [r3, #12]
 80038c2:	021b      	lsls	r3, r3, #8
 80038c4:	697a      	ldr	r2, [r7, #20]
 80038c6:	4313      	orrs	r3, r2
 80038c8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80038ca:	697b      	ldr	r3, [r7, #20]
 80038cc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80038d0:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	4a1a      	ldr	r2, [pc, #104]	; (8003940 <TIM_OC3_SetConfig+0xec>)
 80038d6:	4293      	cmp	r3, r2
 80038d8:	d00b      	beq.n	80038f2 <TIM_OC3_SetConfig+0x9e>
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	4a19      	ldr	r2, [pc, #100]	; (8003944 <TIM_OC3_SetConfig+0xf0>)
 80038de:	4293      	cmp	r3, r2
 80038e0:	d007      	beq.n	80038f2 <TIM_OC3_SetConfig+0x9e>
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	4a18      	ldr	r2, [pc, #96]	; (8003948 <TIM_OC3_SetConfig+0xf4>)
 80038e6:	4293      	cmp	r3, r2
 80038e8:	d003      	beq.n	80038f2 <TIM_OC3_SetConfig+0x9e>
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	4a17      	ldr	r2, [pc, #92]	; (800394c <TIM_OC3_SetConfig+0xf8>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d113      	bne.n	800391a <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80038f2:	693b      	ldr	r3, [r7, #16]
 80038f4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80038f8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80038fa:	693b      	ldr	r3, [r7, #16]
 80038fc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003900:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003902:	683b      	ldr	r3, [r7, #0]
 8003904:	695b      	ldr	r3, [r3, #20]
 8003906:	011b      	lsls	r3, r3, #4
 8003908:	693a      	ldr	r2, [r7, #16]
 800390a:	4313      	orrs	r3, r2
 800390c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800390e:	683b      	ldr	r3, [r7, #0]
 8003910:	699b      	ldr	r3, [r3, #24]
 8003912:	011b      	lsls	r3, r3, #4
 8003914:	693a      	ldr	r2, [r7, #16]
 8003916:	4313      	orrs	r3, r2
 8003918:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	693a      	ldr	r2, [r7, #16]
 800391e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	68fa      	ldr	r2, [r7, #12]
 8003924:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003926:	683b      	ldr	r3, [r7, #0]
 8003928:	685a      	ldr	r2, [r3, #4]
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	697a      	ldr	r2, [r7, #20]
 8003932:	621a      	str	r2, [r3, #32]
}
 8003934:	bf00      	nop
 8003936:	371c      	adds	r7, #28
 8003938:	46bd      	mov	sp, r7
 800393a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393e:	4770      	bx	lr
 8003940:	40012c00 	.word	0x40012c00
 8003944:	40014000 	.word	0x40014000
 8003948:	40014400 	.word	0x40014400
 800394c:	40014800 	.word	0x40014800

08003950 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003950:	b480      	push	{r7}
 8003952:	b087      	sub	sp, #28
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
 8003958:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6a1b      	ldr	r3, [r3, #32]
 800395e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6a1b      	ldr	r3, [r3, #32]
 800396a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	685b      	ldr	r3, [r3, #4]
 8003970:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	69db      	ldr	r3, [r3, #28]
 8003976:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800397e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003982:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800398a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800398c:	683b      	ldr	r3, [r7, #0]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	021b      	lsls	r3, r3, #8
 8003992:	68fa      	ldr	r2, [r7, #12]
 8003994:	4313      	orrs	r3, r2
 8003996:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003998:	693b      	ldr	r3, [r7, #16]
 800399a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800399e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80039a0:	683b      	ldr	r3, [r7, #0]
 80039a2:	689b      	ldr	r3, [r3, #8]
 80039a4:	031b      	lsls	r3, r3, #12
 80039a6:	693a      	ldr	r2, [r7, #16]
 80039a8:	4313      	orrs	r3, r2
 80039aa:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	4a16      	ldr	r2, [pc, #88]	; (8003a08 <TIM_OC4_SetConfig+0xb8>)
 80039b0:	4293      	cmp	r3, r2
 80039b2:	d00b      	beq.n	80039cc <TIM_OC4_SetConfig+0x7c>
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	4a15      	ldr	r2, [pc, #84]	; (8003a0c <TIM_OC4_SetConfig+0xbc>)
 80039b8:	4293      	cmp	r3, r2
 80039ba:	d007      	beq.n	80039cc <TIM_OC4_SetConfig+0x7c>
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	4a14      	ldr	r2, [pc, #80]	; (8003a10 <TIM_OC4_SetConfig+0xc0>)
 80039c0:	4293      	cmp	r3, r2
 80039c2:	d003      	beq.n	80039cc <TIM_OC4_SetConfig+0x7c>
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	4a13      	ldr	r2, [pc, #76]	; (8003a14 <TIM_OC4_SetConfig+0xc4>)
 80039c8:	4293      	cmp	r3, r2
 80039ca:	d109      	bne.n	80039e0 <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80039cc:	697b      	ldr	r3, [r7, #20]
 80039ce:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80039d2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80039d4:	683b      	ldr	r3, [r7, #0]
 80039d6:	695b      	ldr	r3, [r3, #20]
 80039d8:	019b      	lsls	r3, r3, #6
 80039da:	697a      	ldr	r2, [r7, #20]
 80039dc:	4313      	orrs	r3, r2
 80039de:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	697a      	ldr	r2, [r7, #20]
 80039e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	68fa      	ldr	r2, [r7, #12]
 80039ea:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	685a      	ldr	r2, [r3, #4]
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	693a      	ldr	r2, [r7, #16]
 80039f8:	621a      	str	r2, [r3, #32]
}
 80039fa:	bf00      	nop
 80039fc:	371c      	adds	r7, #28
 80039fe:	46bd      	mov	sp, r7
 8003a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a04:	4770      	bx	lr
 8003a06:	bf00      	nop
 8003a08:	40012c00 	.word	0x40012c00
 8003a0c:	40014000 	.word	0x40014000
 8003a10:	40014400 	.word	0x40014400
 8003a14:	40014800 	.word	0x40014800

08003a18 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003a18:	b480      	push	{r7}
 8003a1a:	b087      	sub	sp, #28
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
 8003a20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6a1b      	ldr	r3, [r3, #32]
 8003a26:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6a1b      	ldr	r3, [r3, #32]
 8003a32:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	685b      	ldr	r3, [r3, #4]
 8003a38:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a4a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003a4c:	683b      	ldr	r3, [r7, #0]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	68fa      	ldr	r2, [r7, #12]
 8003a52:	4313      	orrs	r3, r2
 8003a54:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003a56:	693b      	ldr	r3, [r7, #16]
 8003a58:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003a5c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003a5e:	683b      	ldr	r3, [r7, #0]
 8003a60:	689b      	ldr	r3, [r3, #8]
 8003a62:	041b      	lsls	r3, r3, #16
 8003a64:	693a      	ldr	r2, [r7, #16]
 8003a66:	4313      	orrs	r3, r2
 8003a68:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	4a15      	ldr	r2, [pc, #84]	; (8003ac4 <TIM_OC5_SetConfig+0xac>)
 8003a6e:	4293      	cmp	r3, r2
 8003a70:	d00b      	beq.n	8003a8a <TIM_OC5_SetConfig+0x72>
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	4a14      	ldr	r2, [pc, #80]	; (8003ac8 <TIM_OC5_SetConfig+0xb0>)
 8003a76:	4293      	cmp	r3, r2
 8003a78:	d007      	beq.n	8003a8a <TIM_OC5_SetConfig+0x72>
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	4a13      	ldr	r2, [pc, #76]	; (8003acc <TIM_OC5_SetConfig+0xb4>)
 8003a7e:	4293      	cmp	r3, r2
 8003a80:	d003      	beq.n	8003a8a <TIM_OC5_SetConfig+0x72>
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	4a12      	ldr	r2, [pc, #72]	; (8003ad0 <TIM_OC5_SetConfig+0xb8>)
 8003a86:	4293      	cmp	r3, r2
 8003a88:	d109      	bne.n	8003a9e <TIM_OC5_SetConfig+0x86>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003a8a:	697b      	ldr	r3, [r7, #20]
 8003a8c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a90:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003a92:	683b      	ldr	r3, [r7, #0]
 8003a94:	695b      	ldr	r3, [r3, #20]
 8003a96:	021b      	lsls	r3, r3, #8
 8003a98:	697a      	ldr	r2, [r7, #20]
 8003a9a:	4313      	orrs	r3, r2
 8003a9c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	697a      	ldr	r2, [r7, #20]
 8003aa2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	68fa      	ldr	r2, [r7, #12]
 8003aa8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003aaa:	683b      	ldr	r3, [r7, #0]
 8003aac:	685a      	ldr	r2, [r3, #4]
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	693a      	ldr	r2, [r7, #16]
 8003ab6:	621a      	str	r2, [r3, #32]
}
 8003ab8:	bf00      	nop
 8003aba:	371c      	adds	r7, #28
 8003abc:	46bd      	mov	sp, r7
 8003abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac2:	4770      	bx	lr
 8003ac4:	40012c00 	.word	0x40012c00
 8003ac8:	40014000 	.word	0x40014000
 8003acc:	40014400 	.word	0x40014400
 8003ad0:	40014800 	.word	0x40014800

08003ad4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003ad4:	b480      	push	{r7}
 8003ad6:	b087      	sub	sp, #28
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
 8003adc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6a1b      	ldr	r3, [r3, #32]
 8003ae2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6a1b      	ldr	r3, [r3, #32]
 8003aee:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	685b      	ldr	r3, [r3, #4]
 8003af4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003afa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003b02:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003b06:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003b08:	683b      	ldr	r3, [r7, #0]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	021b      	lsls	r3, r3, #8
 8003b0e:	68fa      	ldr	r2, [r7, #12]
 8003b10:	4313      	orrs	r3, r2
 8003b12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003b14:	693b      	ldr	r3, [r7, #16]
 8003b16:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003b1a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003b1c:	683b      	ldr	r3, [r7, #0]
 8003b1e:	689b      	ldr	r3, [r3, #8]
 8003b20:	051b      	lsls	r3, r3, #20
 8003b22:	693a      	ldr	r2, [r7, #16]
 8003b24:	4313      	orrs	r3, r2
 8003b26:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	4a16      	ldr	r2, [pc, #88]	; (8003b84 <TIM_OC6_SetConfig+0xb0>)
 8003b2c:	4293      	cmp	r3, r2
 8003b2e:	d00b      	beq.n	8003b48 <TIM_OC6_SetConfig+0x74>
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	4a15      	ldr	r2, [pc, #84]	; (8003b88 <TIM_OC6_SetConfig+0xb4>)
 8003b34:	4293      	cmp	r3, r2
 8003b36:	d007      	beq.n	8003b48 <TIM_OC6_SetConfig+0x74>
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	4a14      	ldr	r2, [pc, #80]	; (8003b8c <TIM_OC6_SetConfig+0xb8>)
 8003b3c:	4293      	cmp	r3, r2
 8003b3e:	d003      	beq.n	8003b48 <TIM_OC6_SetConfig+0x74>
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	4a13      	ldr	r2, [pc, #76]	; (8003b90 <TIM_OC6_SetConfig+0xbc>)
 8003b44:	4293      	cmp	r3, r2
 8003b46:	d109      	bne.n	8003b5c <TIM_OC6_SetConfig+0x88>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003b48:	697b      	ldr	r3, [r7, #20]
 8003b4a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003b4e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	695b      	ldr	r3, [r3, #20]
 8003b54:	029b      	lsls	r3, r3, #10
 8003b56:	697a      	ldr	r2, [r7, #20]
 8003b58:	4313      	orrs	r3, r2
 8003b5a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	697a      	ldr	r2, [r7, #20]
 8003b60:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	68fa      	ldr	r2, [r7, #12]
 8003b66:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003b68:	683b      	ldr	r3, [r7, #0]
 8003b6a:	685a      	ldr	r2, [r3, #4]
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	693a      	ldr	r2, [r7, #16]
 8003b74:	621a      	str	r2, [r3, #32]
}
 8003b76:	bf00      	nop
 8003b78:	371c      	adds	r7, #28
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b80:	4770      	bx	lr
 8003b82:	bf00      	nop
 8003b84:	40012c00 	.word	0x40012c00
 8003b88:	40014000 	.word	0x40014000
 8003b8c:	40014400 	.word	0x40014400
 8003b90:	40014800 	.word	0x40014800

08003b94 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003b94:	b480      	push	{r7}
 8003b96:	b087      	sub	sp, #28
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	60f8      	str	r0, [r7, #12]
 8003b9c:	60b9      	str	r1, [r7, #8]
 8003b9e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	6a1b      	ldr	r3, [r3, #32]
 8003ba4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	6a1b      	ldr	r3, [r3, #32]
 8003baa:	f023 0201 	bic.w	r2, r3, #1
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	699b      	ldr	r3, [r3, #24]
 8003bb6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003bb8:	693b      	ldr	r3, [r7, #16]
 8003bba:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003bbe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	011b      	lsls	r3, r3, #4
 8003bc4:	693a      	ldr	r2, [r7, #16]
 8003bc6:	4313      	orrs	r3, r2
 8003bc8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003bca:	697b      	ldr	r3, [r7, #20]
 8003bcc:	f023 030a 	bic.w	r3, r3, #10
 8003bd0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003bd2:	697a      	ldr	r2, [r7, #20]
 8003bd4:	68bb      	ldr	r3, [r7, #8]
 8003bd6:	4313      	orrs	r3, r2
 8003bd8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	693a      	ldr	r2, [r7, #16]
 8003bde:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	697a      	ldr	r2, [r7, #20]
 8003be4:	621a      	str	r2, [r3, #32]
}
 8003be6:	bf00      	nop
 8003be8:	371c      	adds	r7, #28
 8003bea:	46bd      	mov	sp, r7
 8003bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf0:	4770      	bx	lr

08003bf2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003bf2:	b480      	push	{r7}
 8003bf4:	b087      	sub	sp, #28
 8003bf6:	af00      	add	r7, sp, #0
 8003bf8:	60f8      	str	r0, [r7, #12]
 8003bfa:	60b9      	str	r1, [r7, #8]
 8003bfc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	6a1b      	ldr	r3, [r3, #32]
 8003c02:	f023 0210 	bic.w	r2, r3, #16
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	699b      	ldr	r3, [r3, #24]
 8003c0e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	6a1b      	ldr	r3, [r3, #32]
 8003c14:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003c16:	697b      	ldr	r3, [r7, #20]
 8003c18:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003c1c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	031b      	lsls	r3, r3, #12
 8003c22:	697a      	ldr	r2, [r7, #20]
 8003c24:	4313      	orrs	r3, r2
 8003c26:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003c28:	693b      	ldr	r3, [r7, #16]
 8003c2a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003c2e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003c30:	68bb      	ldr	r3, [r7, #8]
 8003c32:	011b      	lsls	r3, r3, #4
 8003c34:	693a      	ldr	r2, [r7, #16]
 8003c36:	4313      	orrs	r3, r2
 8003c38:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	697a      	ldr	r2, [r7, #20]
 8003c3e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	693a      	ldr	r2, [r7, #16]
 8003c44:	621a      	str	r2, [r3, #32]
}
 8003c46:	bf00      	nop
 8003c48:	371c      	adds	r7, #28
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c50:	4770      	bx	lr

08003c52 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003c52:	b480      	push	{r7}
 8003c54:	b085      	sub	sp, #20
 8003c56:	af00      	add	r7, sp, #0
 8003c58:	6078      	str	r0, [r7, #4]
 8003c5a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	689b      	ldr	r3, [r3, #8]
 8003c60:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c68:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003c6a:	683a      	ldr	r2, [r7, #0]
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	4313      	orrs	r3, r2
 8003c70:	f043 0307 	orr.w	r3, r3, #7
 8003c74:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	68fa      	ldr	r2, [r7, #12]
 8003c7a:	609a      	str	r2, [r3, #8]
}
 8003c7c:	bf00      	nop
 8003c7e:	3714      	adds	r7, #20
 8003c80:	46bd      	mov	sp, r7
 8003c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c86:	4770      	bx	lr

08003c88 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003c88:	b480      	push	{r7}
 8003c8a:	b087      	sub	sp, #28
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	60f8      	str	r0, [r7, #12]
 8003c90:	60b9      	str	r1, [r7, #8]
 8003c92:	607a      	str	r2, [r7, #4]
 8003c94:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	689b      	ldr	r3, [r3, #8]
 8003c9a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003c9c:	697b      	ldr	r3, [r7, #20]
 8003c9e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003ca2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003ca4:	683b      	ldr	r3, [r7, #0]
 8003ca6:	021a      	lsls	r2, r3, #8
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	431a      	orrs	r2, r3
 8003cac:	68bb      	ldr	r3, [r7, #8]
 8003cae:	4313      	orrs	r3, r2
 8003cb0:	697a      	ldr	r2, [r7, #20]
 8003cb2:	4313      	orrs	r3, r2
 8003cb4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	697a      	ldr	r2, [r7, #20]
 8003cba:	609a      	str	r2, [r3, #8]
}
 8003cbc:	bf00      	nop
 8003cbe:	371c      	adds	r7, #28
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc6:	4770      	bx	lr

08003cc8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003cc8:	b480      	push	{r7}
 8003cca:	b087      	sub	sp, #28
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	60f8      	str	r0, [r7, #12]
 8003cd0:	60b9      	str	r1, [r7, #8]
 8003cd2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003cd4:	68bb      	ldr	r3, [r7, #8]
 8003cd6:	f003 031f 	and.w	r3, r3, #31
 8003cda:	2201      	movs	r2, #1
 8003cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8003ce0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	6a1a      	ldr	r2, [r3, #32]
 8003ce6:	697b      	ldr	r3, [r7, #20]
 8003ce8:	43db      	mvns	r3, r3
 8003cea:	401a      	ands	r2, r3
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	6a1a      	ldr	r2, [r3, #32]
 8003cf4:	68bb      	ldr	r3, [r7, #8]
 8003cf6:	f003 031f 	and.w	r3, r3, #31
 8003cfa:	6879      	ldr	r1, [r7, #4]
 8003cfc:	fa01 f303 	lsl.w	r3, r1, r3
 8003d00:	431a      	orrs	r2, r3
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	621a      	str	r2, [r3, #32]
}
 8003d06:	bf00      	nop
 8003d08:	371c      	adds	r7, #28
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d10:	4770      	bx	lr
	...

08003d14 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003d14:	b480      	push	{r7}
 8003d16:	b085      	sub	sp, #20
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	6078      	str	r0, [r7, #4]
 8003d1c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d24:	2b01      	cmp	r3, #1
 8003d26:	d101      	bne.n	8003d2c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003d28:	2302      	movs	r3, #2
 8003d2a:	e04f      	b.n	8003dcc <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2201      	movs	r2, #1
 8003d30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2202      	movs	r2, #2
 8003d38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	685b      	ldr	r3, [r3, #4]
 8003d42:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	689b      	ldr	r3, [r3, #8]
 8003d4a:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	4a21      	ldr	r2, [pc, #132]	; (8003dd8 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8003d52:	4293      	cmp	r3, r2
 8003d54:	d108      	bne.n	8003d68 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003d5c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003d5e:	683b      	ldr	r3, [r7, #0]
 8003d60:	685b      	ldr	r3, [r3, #4]
 8003d62:	68fa      	ldr	r2, [r7, #12]
 8003d64:	4313      	orrs	r3, r2
 8003d66:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d6e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003d70:	683b      	ldr	r3, [r7, #0]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	68fa      	ldr	r2, [r7, #12]
 8003d76:	4313      	orrs	r3, r2
 8003d78:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	68fa      	ldr	r2, [r7, #12]
 8003d80:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	4a14      	ldr	r2, [pc, #80]	; (8003dd8 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8003d88:	4293      	cmp	r3, r2
 8003d8a:	d009      	beq.n	8003da0 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d94:	d004      	beq.n	8003da0 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	4a10      	ldr	r2, [pc, #64]	; (8003ddc <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003d9c:	4293      	cmp	r3, r2
 8003d9e:	d10c      	bne.n	8003dba <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003da0:	68bb      	ldr	r3, [r7, #8]
 8003da2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003da6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003da8:	683b      	ldr	r3, [r7, #0]
 8003daa:	689b      	ldr	r3, [r3, #8]
 8003dac:	68ba      	ldr	r2, [r7, #8]
 8003dae:	4313      	orrs	r3, r2
 8003db0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	68ba      	ldr	r2, [r7, #8]
 8003db8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	2201      	movs	r2, #1
 8003dbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003dca:	2300      	movs	r3, #0
}
 8003dcc:	4618      	mov	r0, r3
 8003dce:	3714      	adds	r7, #20
 8003dd0:	46bd      	mov	sp, r7
 8003dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd6:	4770      	bx	lr
 8003dd8:	40012c00 	.word	0x40012c00
 8003ddc:	40014000 	.word	0x40014000

08003de0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003de0:	b480      	push	{r7}
 8003de2:	b085      	sub	sp, #20
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]
 8003de8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003dea:	2300      	movs	r3, #0
 8003dec:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003df4:	2b01      	cmp	r3, #1
 8003df6:	d101      	bne.n	8003dfc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003df8:	2302      	movs	r3, #2
 8003dfa:	e060      	b.n	8003ebe <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2201      	movs	r2, #1
 8003e00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003e0a:	683b      	ldr	r3, [r7, #0]
 8003e0c:	68db      	ldr	r3, [r3, #12]
 8003e0e:	4313      	orrs	r3, r2
 8003e10:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003e18:	683b      	ldr	r3, [r7, #0]
 8003e1a:	689b      	ldr	r3, [r3, #8]
 8003e1c:	4313      	orrs	r3, r2
 8003e1e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003e26:	683b      	ldr	r3, [r7, #0]
 8003e28:	685b      	ldr	r3, [r3, #4]
 8003e2a:	4313      	orrs	r3, r2
 8003e2c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003e34:	683b      	ldr	r3, [r7, #0]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	4313      	orrs	r3, r2
 8003e3a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003e42:	683b      	ldr	r3, [r7, #0]
 8003e44:	691b      	ldr	r3, [r3, #16]
 8003e46:	4313      	orrs	r3, r2
 8003e48:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003e50:	683b      	ldr	r3, [r7, #0]
 8003e52:	695b      	ldr	r3, [r3, #20]
 8003e54:	4313      	orrs	r3, r2
 8003e56:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003e5e:	683b      	ldr	r3, [r7, #0]
 8003e60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e62:	4313      	orrs	r3, r2
 8003e64:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8003e6c:	683b      	ldr	r3, [r7, #0]
 8003e6e:	699b      	ldr	r3, [r3, #24]
 8003e70:	041b      	lsls	r3, r3, #16
 8003e72:	4313      	orrs	r3, r2
 8003e74:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	4a14      	ldr	r2, [pc, #80]	; (8003ecc <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8003e7c:	4293      	cmp	r3, r2
 8003e7e:	d115      	bne.n	8003eac <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8003e86:	683b      	ldr	r3, [r7, #0]
 8003e88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e8a:	051b      	lsls	r3, r3, #20
 8003e8c:	4313      	orrs	r3, r2
 8003e8e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003e96:	683b      	ldr	r3, [r7, #0]
 8003e98:	69db      	ldr	r3, [r3, #28]
 8003e9a:	4313      	orrs	r3, r2
 8003e9c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003ea4:	683b      	ldr	r3, [r7, #0]
 8003ea6:	6a1b      	ldr	r3, [r3, #32]
 8003ea8:	4313      	orrs	r3, r2
 8003eaa:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	68fa      	ldr	r2, [r7, #12]
 8003eb2:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003ebc:	2300      	movs	r3, #0
}
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	3714      	adds	r7, #20
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec8:	4770      	bx	lr
 8003eca:	bf00      	nop
 8003ecc:	40012c00 	.word	0x40012c00

08003ed0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	b082      	sub	sp, #8
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d101      	bne.n	8003ee2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003ede:	2301      	movs	r3, #1
 8003ee0:	e040      	b.n	8003f64 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d106      	bne.n	8003ef8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	2200      	movs	r2, #0
 8003eee:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003ef2:	6878      	ldr	r0, [r7, #4]
 8003ef4:	f7fc fe4a 	bl	8000b8c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2224      	movs	r2, #36	; 0x24
 8003efc:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	681a      	ldr	r2, [r3, #0]
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f022 0201 	bic.w	r2, r2, #1
 8003f0c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003f0e:	6878      	ldr	r0, [r7, #4]
 8003f10:	f000 f8b6 	bl	8004080 <UART_SetConfig>
 8003f14:	4603      	mov	r3, r0
 8003f16:	2b01      	cmp	r3, #1
 8003f18:	d101      	bne.n	8003f1e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003f1a:	2301      	movs	r3, #1
 8003f1c:	e022      	b.n	8003f64 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d002      	beq.n	8003f2c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003f26:	6878      	ldr	r0, [r7, #4]
 8003f28:	f000 f9e0 	bl	80042ec <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	685a      	ldr	r2, [r3, #4]
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003f3a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	689a      	ldr	r2, [r3, #8]
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003f4a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	681a      	ldr	r2, [r3, #0]
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f042 0201 	orr.w	r2, r2, #1
 8003f5a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003f5c:	6878      	ldr	r0, [r7, #4]
 8003f5e:	f000 fa67 	bl	8004430 <UART_CheckIdleState>
 8003f62:	4603      	mov	r3, r0
}
 8003f64:	4618      	mov	r0, r3
 8003f66:	3708      	adds	r7, #8
 8003f68:	46bd      	mov	sp, r7
 8003f6a:	bd80      	pop	{r7, pc}

08003f6c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	b08a      	sub	sp, #40	; 0x28
 8003f70:	af02      	add	r7, sp, #8
 8003f72:	60f8      	str	r0, [r7, #12]
 8003f74:	60b9      	str	r1, [r7, #8]
 8003f76:	603b      	str	r3, [r7, #0]
 8003f78:	4613      	mov	r3, r2
 8003f7a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003f80:	2b20      	cmp	r3, #32
 8003f82:	d178      	bne.n	8004076 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003f84:	68bb      	ldr	r3, [r7, #8]
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d002      	beq.n	8003f90 <HAL_UART_Transmit+0x24>
 8003f8a:	88fb      	ldrh	r3, [r7, #6]
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d101      	bne.n	8003f94 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003f90:	2301      	movs	r3, #1
 8003f92:	e071      	b.n	8004078 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	2200      	movs	r2, #0
 8003f98:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	2221      	movs	r2, #33	; 0x21
 8003fa0:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003fa2:	f7fc ff87 	bl	8000eb4 <HAL_GetTick>
 8003fa6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	88fa      	ldrh	r2, [r7, #6]
 8003fac:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	88fa      	ldrh	r2, [r7, #6]
 8003fb4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	689b      	ldr	r3, [r3, #8]
 8003fbc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003fc0:	d108      	bne.n	8003fd4 <HAL_UART_Transmit+0x68>
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	691b      	ldr	r3, [r3, #16]
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d104      	bne.n	8003fd4 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8003fca:	2300      	movs	r3, #0
 8003fcc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003fce:	68bb      	ldr	r3, [r7, #8]
 8003fd0:	61bb      	str	r3, [r7, #24]
 8003fd2:	e003      	b.n	8003fdc <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003fd4:	68bb      	ldr	r3, [r7, #8]
 8003fd6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003fd8:	2300      	movs	r3, #0
 8003fda:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003fdc:	e030      	b.n	8004040 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003fde:	683b      	ldr	r3, [r7, #0]
 8003fe0:	9300      	str	r3, [sp, #0]
 8003fe2:	697b      	ldr	r3, [r7, #20]
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	2180      	movs	r1, #128	; 0x80
 8003fe8:	68f8      	ldr	r0, [r7, #12]
 8003fea:	f000 fac9 	bl	8004580 <UART_WaitOnFlagUntilTimeout>
 8003fee:	4603      	mov	r3, r0
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d004      	beq.n	8003ffe <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	2220      	movs	r2, #32
 8003ff8:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8003ffa:	2303      	movs	r3, #3
 8003ffc:	e03c      	b.n	8004078 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8003ffe:	69fb      	ldr	r3, [r7, #28]
 8004000:	2b00      	cmp	r3, #0
 8004002:	d10b      	bne.n	800401c <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004004:	69bb      	ldr	r3, [r7, #24]
 8004006:	881a      	ldrh	r2, [r3, #0]
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004010:	b292      	uxth	r2, r2
 8004012:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004014:	69bb      	ldr	r3, [r7, #24]
 8004016:	3302      	adds	r3, #2
 8004018:	61bb      	str	r3, [r7, #24]
 800401a:	e008      	b.n	800402e <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800401c:	69fb      	ldr	r3, [r7, #28]
 800401e:	781a      	ldrb	r2, [r3, #0]
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	b292      	uxth	r2, r2
 8004026:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004028:	69fb      	ldr	r3, [r7, #28]
 800402a:	3301      	adds	r3, #1
 800402c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004034:	b29b      	uxth	r3, r3
 8004036:	3b01      	subs	r3, #1
 8004038:	b29a      	uxth	r2, r3
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004046:	b29b      	uxth	r3, r3
 8004048:	2b00      	cmp	r3, #0
 800404a:	d1c8      	bne.n	8003fde <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800404c:	683b      	ldr	r3, [r7, #0]
 800404e:	9300      	str	r3, [sp, #0]
 8004050:	697b      	ldr	r3, [r7, #20]
 8004052:	2200      	movs	r2, #0
 8004054:	2140      	movs	r1, #64	; 0x40
 8004056:	68f8      	ldr	r0, [r7, #12]
 8004058:	f000 fa92 	bl	8004580 <UART_WaitOnFlagUntilTimeout>
 800405c:	4603      	mov	r3, r0
 800405e:	2b00      	cmp	r3, #0
 8004060:	d004      	beq.n	800406c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	2220      	movs	r2, #32
 8004066:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8004068:	2303      	movs	r3, #3
 800406a:	e005      	b.n	8004078 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	2220      	movs	r2, #32
 8004070:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8004072:	2300      	movs	r3, #0
 8004074:	e000      	b.n	8004078 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8004076:	2302      	movs	r3, #2
  }
}
 8004078:	4618      	mov	r0, r3
 800407a:	3720      	adds	r7, #32
 800407c:	46bd      	mov	sp, r7
 800407e:	bd80      	pop	{r7, pc}

08004080 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004080:	b580      	push	{r7, lr}
 8004082:	b088      	sub	sp, #32
 8004084:	af00      	add	r7, sp, #0
 8004086:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004088:	2300      	movs	r3, #0
 800408a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	689a      	ldr	r2, [r3, #8]
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	691b      	ldr	r3, [r3, #16]
 8004094:	431a      	orrs	r2, r3
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	695b      	ldr	r3, [r3, #20]
 800409a:	431a      	orrs	r2, r3
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	69db      	ldr	r3, [r3, #28]
 80040a0:	4313      	orrs	r3, r2
 80040a2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	681a      	ldr	r2, [r3, #0]
 80040aa:	4b8a      	ldr	r3, [pc, #552]	; (80042d4 <UART_SetConfig+0x254>)
 80040ac:	4013      	ands	r3, r2
 80040ae:	687a      	ldr	r2, [r7, #4]
 80040b0:	6812      	ldr	r2, [r2, #0]
 80040b2:	6979      	ldr	r1, [r7, #20]
 80040b4:	430b      	orrs	r3, r1
 80040b6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	685b      	ldr	r3, [r3, #4]
 80040be:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	68da      	ldr	r2, [r3, #12]
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	430a      	orrs	r2, r1
 80040cc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	699b      	ldr	r3, [r3, #24]
 80040d2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	6a1b      	ldr	r3, [r3, #32]
 80040d8:	697a      	ldr	r2, [r7, #20]
 80040da:	4313      	orrs	r3, r2
 80040dc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	689b      	ldr	r3, [r3, #8]
 80040e4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	697a      	ldr	r2, [r7, #20]
 80040ee:	430a      	orrs	r2, r1
 80040f0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	4a78      	ldr	r2, [pc, #480]	; (80042d8 <UART_SetConfig+0x258>)
 80040f8:	4293      	cmp	r3, r2
 80040fa:	d120      	bne.n	800413e <UART_SetConfig+0xbe>
 80040fc:	4b77      	ldr	r3, [pc, #476]	; (80042dc <UART_SetConfig+0x25c>)
 80040fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004100:	f003 0303 	and.w	r3, r3, #3
 8004104:	2b03      	cmp	r3, #3
 8004106:	d817      	bhi.n	8004138 <UART_SetConfig+0xb8>
 8004108:	a201      	add	r2, pc, #4	; (adr r2, 8004110 <UART_SetConfig+0x90>)
 800410a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800410e:	bf00      	nop
 8004110:	08004121 	.word	0x08004121
 8004114:	0800412d 	.word	0x0800412d
 8004118:	08004133 	.word	0x08004133
 800411c:	08004127 	.word	0x08004127
 8004120:	2300      	movs	r3, #0
 8004122:	77fb      	strb	r3, [r7, #31]
 8004124:	e01d      	b.n	8004162 <UART_SetConfig+0xe2>
 8004126:	2302      	movs	r3, #2
 8004128:	77fb      	strb	r3, [r7, #31]
 800412a:	e01a      	b.n	8004162 <UART_SetConfig+0xe2>
 800412c:	2304      	movs	r3, #4
 800412e:	77fb      	strb	r3, [r7, #31]
 8004130:	e017      	b.n	8004162 <UART_SetConfig+0xe2>
 8004132:	2308      	movs	r3, #8
 8004134:	77fb      	strb	r3, [r7, #31]
 8004136:	e014      	b.n	8004162 <UART_SetConfig+0xe2>
 8004138:	2310      	movs	r3, #16
 800413a:	77fb      	strb	r3, [r7, #31]
 800413c:	e011      	b.n	8004162 <UART_SetConfig+0xe2>
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	4a67      	ldr	r2, [pc, #412]	; (80042e0 <UART_SetConfig+0x260>)
 8004144:	4293      	cmp	r3, r2
 8004146:	d102      	bne.n	800414e <UART_SetConfig+0xce>
 8004148:	2300      	movs	r3, #0
 800414a:	77fb      	strb	r3, [r7, #31]
 800414c:	e009      	b.n	8004162 <UART_SetConfig+0xe2>
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	4a64      	ldr	r2, [pc, #400]	; (80042e4 <UART_SetConfig+0x264>)
 8004154:	4293      	cmp	r3, r2
 8004156:	d102      	bne.n	800415e <UART_SetConfig+0xde>
 8004158:	2300      	movs	r3, #0
 800415a:	77fb      	strb	r3, [r7, #31]
 800415c:	e001      	b.n	8004162 <UART_SetConfig+0xe2>
 800415e:	2310      	movs	r3, #16
 8004160:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	69db      	ldr	r3, [r3, #28]
 8004166:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800416a:	d15a      	bne.n	8004222 <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 800416c:	7ffb      	ldrb	r3, [r7, #31]
 800416e:	2b08      	cmp	r3, #8
 8004170:	d827      	bhi.n	80041c2 <UART_SetConfig+0x142>
 8004172:	a201      	add	r2, pc, #4	; (adr r2, 8004178 <UART_SetConfig+0xf8>)
 8004174:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004178:	0800419d 	.word	0x0800419d
 800417c:	080041a5 	.word	0x080041a5
 8004180:	080041ad 	.word	0x080041ad
 8004184:	080041c3 	.word	0x080041c3
 8004188:	080041b3 	.word	0x080041b3
 800418c:	080041c3 	.word	0x080041c3
 8004190:	080041c3 	.word	0x080041c3
 8004194:	080041c3 	.word	0x080041c3
 8004198:	080041bb 	.word	0x080041bb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800419c:	f7fe fbaa 	bl	80028f4 <HAL_RCC_GetPCLK1Freq>
 80041a0:	61b8      	str	r0, [r7, #24]
        break;
 80041a2:	e013      	b.n	80041cc <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80041a4:	f7fe fbc8 	bl	8002938 <HAL_RCC_GetPCLK2Freq>
 80041a8:	61b8      	str	r0, [r7, #24]
        break;
 80041aa:	e00f      	b.n	80041cc <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80041ac:	4b4e      	ldr	r3, [pc, #312]	; (80042e8 <UART_SetConfig+0x268>)
 80041ae:	61bb      	str	r3, [r7, #24]
        break;
 80041b0:	e00c      	b.n	80041cc <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80041b2:	f7fe fb29 	bl	8002808 <HAL_RCC_GetSysClockFreq>
 80041b6:	61b8      	str	r0, [r7, #24]
        break;
 80041b8:	e008      	b.n	80041cc <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80041ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80041be:	61bb      	str	r3, [r7, #24]
        break;
 80041c0:	e004      	b.n	80041cc <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 80041c2:	2300      	movs	r3, #0
 80041c4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80041c6:	2301      	movs	r3, #1
 80041c8:	77bb      	strb	r3, [r7, #30]
        break;
 80041ca:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80041cc:	69bb      	ldr	r3, [r7, #24]
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d074      	beq.n	80042bc <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80041d2:	69bb      	ldr	r3, [r7, #24]
 80041d4:	005a      	lsls	r2, r3, #1
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	685b      	ldr	r3, [r3, #4]
 80041da:	085b      	lsrs	r3, r3, #1
 80041dc:	441a      	add	r2, r3
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	685b      	ldr	r3, [r3, #4]
 80041e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80041e6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80041e8:	693b      	ldr	r3, [r7, #16]
 80041ea:	2b0f      	cmp	r3, #15
 80041ec:	d916      	bls.n	800421c <UART_SetConfig+0x19c>
 80041ee:	693b      	ldr	r3, [r7, #16]
 80041f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041f4:	d212      	bcs.n	800421c <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80041f6:	693b      	ldr	r3, [r7, #16]
 80041f8:	b29b      	uxth	r3, r3
 80041fa:	f023 030f 	bic.w	r3, r3, #15
 80041fe:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004200:	693b      	ldr	r3, [r7, #16]
 8004202:	085b      	lsrs	r3, r3, #1
 8004204:	b29b      	uxth	r3, r3
 8004206:	f003 0307 	and.w	r3, r3, #7
 800420a:	b29a      	uxth	r2, r3
 800420c:	89fb      	ldrh	r3, [r7, #14]
 800420e:	4313      	orrs	r3, r2
 8004210:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	89fa      	ldrh	r2, [r7, #14]
 8004218:	60da      	str	r2, [r3, #12]
 800421a:	e04f      	b.n	80042bc <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 800421c:	2301      	movs	r3, #1
 800421e:	77bb      	strb	r3, [r7, #30]
 8004220:	e04c      	b.n	80042bc <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004222:	7ffb      	ldrb	r3, [r7, #31]
 8004224:	2b08      	cmp	r3, #8
 8004226:	d828      	bhi.n	800427a <UART_SetConfig+0x1fa>
 8004228:	a201      	add	r2, pc, #4	; (adr r2, 8004230 <UART_SetConfig+0x1b0>)
 800422a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800422e:	bf00      	nop
 8004230:	08004255 	.word	0x08004255
 8004234:	0800425d 	.word	0x0800425d
 8004238:	08004265 	.word	0x08004265
 800423c:	0800427b 	.word	0x0800427b
 8004240:	0800426b 	.word	0x0800426b
 8004244:	0800427b 	.word	0x0800427b
 8004248:	0800427b 	.word	0x0800427b
 800424c:	0800427b 	.word	0x0800427b
 8004250:	08004273 	.word	0x08004273
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004254:	f7fe fb4e 	bl	80028f4 <HAL_RCC_GetPCLK1Freq>
 8004258:	61b8      	str	r0, [r7, #24]
        break;
 800425a:	e013      	b.n	8004284 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800425c:	f7fe fb6c 	bl	8002938 <HAL_RCC_GetPCLK2Freq>
 8004260:	61b8      	str	r0, [r7, #24]
        break;
 8004262:	e00f      	b.n	8004284 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004264:	4b20      	ldr	r3, [pc, #128]	; (80042e8 <UART_SetConfig+0x268>)
 8004266:	61bb      	str	r3, [r7, #24]
        break;
 8004268:	e00c      	b.n	8004284 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800426a:	f7fe facd 	bl	8002808 <HAL_RCC_GetSysClockFreq>
 800426e:	61b8      	str	r0, [r7, #24]
        break;
 8004270:	e008      	b.n	8004284 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004272:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004276:	61bb      	str	r3, [r7, #24]
        break;
 8004278:	e004      	b.n	8004284 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 800427a:	2300      	movs	r3, #0
 800427c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800427e:	2301      	movs	r3, #1
 8004280:	77bb      	strb	r3, [r7, #30]
        break;
 8004282:	bf00      	nop
    }

    if (pclk != 0U)
 8004284:	69bb      	ldr	r3, [r7, #24]
 8004286:	2b00      	cmp	r3, #0
 8004288:	d018      	beq.n	80042bc <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	685b      	ldr	r3, [r3, #4]
 800428e:	085a      	lsrs	r2, r3, #1
 8004290:	69bb      	ldr	r3, [r7, #24]
 8004292:	441a      	add	r2, r3
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	685b      	ldr	r3, [r3, #4]
 8004298:	fbb2 f3f3 	udiv	r3, r2, r3
 800429c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800429e:	693b      	ldr	r3, [r7, #16]
 80042a0:	2b0f      	cmp	r3, #15
 80042a2:	d909      	bls.n	80042b8 <UART_SetConfig+0x238>
 80042a4:	693b      	ldr	r3, [r7, #16]
 80042a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042aa:	d205      	bcs.n	80042b8 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80042ac:	693b      	ldr	r3, [r7, #16]
 80042ae:	b29a      	uxth	r2, r3
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	60da      	str	r2, [r3, #12]
 80042b6:	e001      	b.n	80042bc <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 80042b8:	2301      	movs	r3, #1
 80042ba:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2200      	movs	r2, #0
 80042c0:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	2200      	movs	r2, #0
 80042c6:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80042c8:	7fbb      	ldrb	r3, [r7, #30]
}
 80042ca:	4618      	mov	r0, r3
 80042cc:	3720      	adds	r7, #32
 80042ce:	46bd      	mov	sp, r7
 80042d0:	bd80      	pop	{r7, pc}
 80042d2:	bf00      	nop
 80042d4:	efff69f3 	.word	0xefff69f3
 80042d8:	40013800 	.word	0x40013800
 80042dc:	40021000 	.word	0x40021000
 80042e0:	40004400 	.word	0x40004400
 80042e4:	40004800 	.word	0x40004800
 80042e8:	007a1200 	.word	0x007a1200

080042ec <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80042ec:	b480      	push	{r7}
 80042ee:	b083      	sub	sp, #12
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042f8:	f003 0301 	and.w	r3, r3, #1
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d00a      	beq.n	8004316 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	685b      	ldr	r3, [r3, #4]
 8004306:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	430a      	orrs	r2, r1
 8004314:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800431a:	f003 0302 	and.w	r3, r3, #2
 800431e:	2b00      	cmp	r3, #0
 8004320:	d00a      	beq.n	8004338 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	685b      	ldr	r3, [r3, #4]
 8004328:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	430a      	orrs	r2, r1
 8004336:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800433c:	f003 0304 	and.w	r3, r3, #4
 8004340:	2b00      	cmp	r3, #0
 8004342:	d00a      	beq.n	800435a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	685b      	ldr	r3, [r3, #4]
 800434a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	430a      	orrs	r2, r1
 8004358:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800435e:	f003 0308 	and.w	r3, r3, #8
 8004362:	2b00      	cmp	r3, #0
 8004364:	d00a      	beq.n	800437c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	685b      	ldr	r3, [r3, #4]
 800436c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	430a      	orrs	r2, r1
 800437a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004380:	f003 0310 	and.w	r3, r3, #16
 8004384:	2b00      	cmp	r3, #0
 8004386:	d00a      	beq.n	800439e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	689b      	ldr	r3, [r3, #8]
 800438e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	430a      	orrs	r2, r1
 800439c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043a2:	f003 0320 	and.w	r3, r3, #32
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d00a      	beq.n	80043c0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	689b      	ldr	r3, [r3, #8]
 80043b0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	430a      	orrs	r2, r1
 80043be:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d01a      	beq.n	8004402 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	685b      	ldr	r3, [r3, #4]
 80043d2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	430a      	orrs	r2, r1
 80043e0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043e6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80043ea:	d10a      	bne.n	8004402 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	685b      	ldr	r3, [r3, #4]
 80043f2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	430a      	orrs	r2, r1
 8004400:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004406:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800440a:	2b00      	cmp	r3, #0
 800440c:	d00a      	beq.n	8004424 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	685b      	ldr	r3, [r3, #4]
 8004414:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	430a      	orrs	r2, r1
 8004422:	605a      	str	r2, [r3, #4]
  }
}
 8004424:	bf00      	nop
 8004426:	370c      	adds	r7, #12
 8004428:	46bd      	mov	sp, r7
 800442a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442e:	4770      	bx	lr

08004430 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004430:	b580      	push	{r7, lr}
 8004432:	b098      	sub	sp, #96	; 0x60
 8004434:	af02      	add	r7, sp, #8
 8004436:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2200      	movs	r2, #0
 800443c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004440:	f7fc fd38 	bl	8000eb4 <HAL_GetTick>
 8004444:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f003 0308 	and.w	r3, r3, #8
 8004450:	2b08      	cmp	r3, #8
 8004452:	d12e      	bne.n	80044b2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004454:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004458:	9300      	str	r3, [sp, #0]
 800445a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800445c:	2200      	movs	r2, #0
 800445e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004462:	6878      	ldr	r0, [r7, #4]
 8004464:	f000 f88c 	bl	8004580 <UART_WaitOnFlagUntilTimeout>
 8004468:	4603      	mov	r3, r0
 800446a:	2b00      	cmp	r3, #0
 800446c:	d021      	beq.n	80044b2 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004474:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004476:	e853 3f00 	ldrex	r3, [r3]
 800447a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800447c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800447e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004482:	653b      	str	r3, [r7, #80]	; 0x50
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	461a      	mov	r2, r3
 800448a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800448c:	647b      	str	r3, [r7, #68]	; 0x44
 800448e:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004490:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004492:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004494:	e841 2300 	strex	r3, r2, [r1]
 8004498:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800449a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800449c:	2b00      	cmp	r3, #0
 800449e:	d1e6      	bne.n	800446e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2220      	movs	r2, #32
 80044a4:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	2200      	movs	r2, #0
 80044aa:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80044ae:	2303      	movs	r3, #3
 80044b0:	e062      	b.n	8004578 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f003 0304 	and.w	r3, r3, #4
 80044bc:	2b04      	cmp	r3, #4
 80044be:	d149      	bne.n	8004554 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80044c0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80044c4:	9300      	str	r3, [sp, #0]
 80044c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80044c8:	2200      	movs	r2, #0
 80044ca:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80044ce:	6878      	ldr	r0, [r7, #4]
 80044d0:	f000 f856 	bl	8004580 <UART_WaitOnFlagUntilTimeout>
 80044d4:	4603      	mov	r3, r0
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d03c      	beq.n	8004554 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044e2:	e853 3f00 	ldrex	r3, [r3]
 80044e6:	623b      	str	r3, [r7, #32]
   return(result);
 80044e8:	6a3b      	ldr	r3, [r7, #32]
 80044ea:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80044ee:	64fb      	str	r3, [r7, #76]	; 0x4c
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	461a      	mov	r2, r3
 80044f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80044f8:	633b      	str	r3, [r7, #48]	; 0x30
 80044fa:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044fc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80044fe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004500:	e841 2300 	strex	r3, r2, [r1]
 8004504:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004506:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004508:	2b00      	cmp	r3, #0
 800450a:	d1e6      	bne.n	80044da <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	3308      	adds	r3, #8
 8004512:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004514:	693b      	ldr	r3, [r7, #16]
 8004516:	e853 3f00 	ldrex	r3, [r3]
 800451a:	60fb      	str	r3, [r7, #12]
   return(result);
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	f023 0301 	bic.w	r3, r3, #1
 8004522:	64bb      	str	r3, [r7, #72]	; 0x48
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	3308      	adds	r3, #8
 800452a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800452c:	61fa      	str	r2, [r7, #28]
 800452e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004530:	69b9      	ldr	r1, [r7, #24]
 8004532:	69fa      	ldr	r2, [r7, #28]
 8004534:	e841 2300 	strex	r3, r2, [r1]
 8004538:	617b      	str	r3, [r7, #20]
   return(result);
 800453a:	697b      	ldr	r3, [r7, #20]
 800453c:	2b00      	cmp	r3, #0
 800453e:	d1e5      	bne.n	800450c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2220      	movs	r2, #32
 8004544:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2200      	movs	r2, #0
 800454c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004550:	2303      	movs	r3, #3
 8004552:	e011      	b.n	8004578 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	2220      	movs	r2, #32
 8004558:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	2220      	movs	r2, #32
 800455e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	2200      	movs	r2, #0
 8004566:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2200      	movs	r2, #0
 800456c:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	2200      	movs	r2, #0
 8004572:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8004576:	2300      	movs	r3, #0
}
 8004578:	4618      	mov	r0, r3
 800457a:	3758      	adds	r7, #88	; 0x58
 800457c:	46bd      	mov	sp, r7
 800457e:	bd80      	pop	{r7, pc}

08004580 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004580:	b580      	push	{r7, lr}
 8004582:	b084      	sub	sp, #16
 8004584:	af00      	add	r7, sp, #0
 8004586:	60f8      	str	r0, [r7, #12]
 8004588:	60b9      	str	r1, [r7, #8]
 800458a:	603b      	str	r3, [r7, #0]
 800458c:	4613      	mov	r3, r2
 800458e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004590:	e049      	b.n	8004626 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004592:	69bb      	ldr	r3, [r7, #24]
 8004594:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004598:	d045      	beq.n	8004626 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800459a:	f7fc fc8b 	bl	8000eb4 <HAL_GetTick>
 800459e:	4602      	mov	r2, r0
 80045a0:	683b      	ldr	r3, [r7, #0]
 80045a2:	1ad3      	subs	r3, r2, r3
 80045a4:	69ba      	ldr	r2, [r7, #24]
 80045a6:	429a      	cmp	r2, r3
 80045a8:	d302      	bcc.n	80045b0 <UART_WaitOnFlagUntilTimeout+0x30>
 80045aa:	69bb      	ldr	r3, [r7, #24]
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d101      	bne.n	80045b4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80045b0:	2303      	movs	r3, #3
 80045b2:	e048      	b.n	8004646 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f003 0304 	and.w	r3, r3, #4
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d031      	beq.n	8004626 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	69db      	ldr	r3, [r3, #28]
 80045c8:	f003 0308 	and.w	r3, r3, #8
 80045cc:	2b08      	cmp	r3, #8
 80045ce:	d110      	bne.n	80045f2 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	2208      	movs	r2, #8
 80045d6:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 80045d8:	68f8      	ldr	r0, [r7, #12]
 80045da:	f000 f838 	bl	800464e <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	2208      	movs	r2, #8
 80045e2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	2200      	movs	r2, #0
 80045ea:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 80045ee:	2301      	movs	r3, #1
 80045f0:	e029      	b.n	8004646 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	69db      	ldr	r3, [r3, #28]
 80045f8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80045fc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004600:	d111      	bne.n	8004626 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800460a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800460c:	68f8      	ldr	r0, [r7, #12]
 800460e:	f000 f81e 	bl	800464e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	2220      	movs	r2, #32
 8004616:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	2200      	movs	r2, #0
 800461e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8004622:	2303      	movs	r3, #3
 8004624:	e00f      	b.n	8004646 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	69da      	ldr	r2, [r3, #28]
 800462c:	68bb      	ldr	r3, [r7, #8]
 800462e:	4013      	ands	r3, r2
 8004630:	68ba      	ldr	r2, [r7, #8]
 8004632:	429a      	cmp	r2, r3
 8004634:	bf0c      	ite	eq
 8004636:	2301      	moveq	r3, #1
 8004638:	2300      	movne	r3, #0
 800463a:	b2db      	uxtb	r3, r3
 800463c:	461a      	mov	r2, r3
 800463e:	79fb      	ldrb	r3, [r7, #7]
 8004640:	429a      	cmp	r2, r3
 8004642:	d0a6      	beq.n	8004592 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004644:	2300      	movs	r3, #0
}
 8004646:	4618      	mov	r0, r3
 8004648:	3710      	adds	r7, #16
 800464a:	46bd      	mov	sp, r7
 800464c:	bd80      	pop	{r7, pc}

0800464e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800464e:	b480      	push	{r7}
 8004650:	b095      	sub	sp, #84	; 0x54
 8004652:	af00      	add	r7, sp, #0
 8004654:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800465c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800465e:	e853 3f00 	ldrex	r3, [r3]
 8004662:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004664:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004666:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800466a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	461a      	mov	r2, r3
 8004672:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004674:	643b      	str	r3, [r7, #64]	; 0x40
 8004676:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004678:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800467a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800467c:	e841 2300 	strex	r3, r2, [r1]
 8004680:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004682:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004684:	2b00      	cmp	r3, #0
 8004686:	d1e6      	bne.n	8004656 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	3308      	adds	r3, #8
 800468e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004690:	6a3b      	ldr	r3, [r7, #32]
 8004692:	e853 3f00 	ldrex	r3, [r3]
 8004696:	61fb      	str	r3, [r7, #28]
   return(result);
 8004698:	69fb      	ldr	r3, [r7, #28]
 800469a:	f023 0301 	bic.w	r3, r3, #1
 800469e:	64bb      	str	r3, [r7, #72]	; 0x48
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	3308      	adds	r3, #8
 80046a6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80046a8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80046aa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046ac:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80046ae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80046b0:	e841 2300 	strex	r3, r2, [r1]
 80046b4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80046b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d1e5      	bne.n	8004688 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80046c0:	2b01      	cmp	r3, #1
 80046c2:	d118      	bne.n	80046f6 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	e853 3f00 	ldrex	r3, [r3]
 80046d0:	60bb      	str	r3, [r7, #8]
   return(result);
 80046d2:	68bb      	ldr	r3, [r7, #8]
 80046d4:	f023 0310 	bic.w	r3, r3, #16
 80046d8:	647b      	str	r3, [r7, #68]	; 0x44
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	461a      	mov	r2, r3
 80046e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80046e2:	61bb      	str	r3, [r7, #24]
 80046e4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046e6:	6979      	ldr	r1, [r7, #20]
 80046e8:	69ba      	ldr	r2, [r7, #24]
 80046ea:	e841 2300 	strex	r3, r2, [r1]
 80046ee:	613b      	str	r3, [r7, #16]
   return(result);
 80046f0:	693b      	ldr	r3, [r7, #16]
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d1e6      	bne.n	80046c4 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	2220      	movs	r2, #32
 80046fa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	2200      	movs	r2, #0
 8004702:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	2200      	movs	r2, #0
 8004708:	669a      	str	r2, [r3, #104]	; 0x68
}
 800470a:	bf00      	nop
 800470c:	3754      	adds	r7, #84	; 0x54
 800470e:	46bd      	mov	sp, r7
 8004710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004714:	4770      	bx	lr
	...

08004718 <__errno>:
 8004718:	4b01      	ldr	r3, [pc, #4]	; (8004720 <__errno+0x8>)
 800471a:	6818      	ldr	r0, [r3, #0]
 800471c:	4770      	bx	lr
 800471e:	bf00      	nop
 8004720:	20000010 	.word	0x20000010

08004724 <__libc_init_array>:
 8004724:	b570      	push	{r4, r5, r6, lr}
 8004726:	4d0d      	ldr	r5, [pc, #52]	; (800475c <__libc_init_array+0x38>)
 8004728:	4c0d      	ldr	r4, [pc, #52]	; (8004760 <__libc_init_array+0x3c>)
 800472a:	1b64      	subs	r4, r4, r5
 800472c:	10a4      	asrs	r4, r4, #2
 800472e:	2600      	movs	r6, #0
 8004730:	42a6      	cmp	r6, r4
 8004732:	d109      	bne.n	8004748 <__libc_init_array+0x24>
 8004734:	4d0b      	ldr	r5, [pc, #44]	; (8004764 <__libc_init_array+0x40>)
 8004736:	4c0c      	ldr	r4, [pc, #48]	; (8004768 <__libc_init_array+0x44>)
 8004738:	f001 f824 	bl	8005784 <_init>
 800473c:	1b64      	subs	r4, r4, r5
 800473e:	10a4      	asrs	r4, r4, #2
 8004740:	2600      	movs	r6, #0
 8004742:	42a6      	cmp	r6, r4
 8004744:	d105      	bne.n	8004752 <__libc_init_array+0x2e>
 8004746:	bd70      	pop	{r4, r5, r6, pc}
 8004748:	f855 3b04 	ldr.w	r3, [r5], #4
 800474c:	4798      	blx	r3
 800474e:	3601      	adds	r6, #1
 8004750:	e7ee      	b.n	8004730 <__libc_init_array+0xc>
 8004752:	f855 3b04 	ldr.w	r3, [r5], #4
 8004756:	4798      	blx	r3
 8004758:	3601      	adds	r6, #1
 800475a:	e7f2      	b.n	8004742 <__libc_init_array+0x1e>
 800475c:	0800590c 	.word	0x0800590c
 8004760:	0800590c 	.word	0x0800590c
 8004764:	0800590c 	.word	0x0800590c
 8004768:	08005910 	.word	0x08005910

0800476c <memset>:
 800476c:	4402      	add	r2, r0
 800476e:	4603      	mov	r3, r0
 8004770:	4293      	cmp	r3, r2
 8004772:	d100      	bne.n	8004776 <memset+0xa>
 8004774:	4770      	bx	lr
 8004776:	f803 1b01 	strb.w	r1, [r3], #1
 800477a:	e7f9      	b.n	8004770 <memset+0x4>

0800477c <iprintf>:
 800477c:	b40f      	push	{r0, r1, r2, r3}
 800477e:	4b0a      	ldr	r3, [pc, #40]	; (80047a8 <iprintf+0x2c>)
 8004780:	b513      	push	{r0, r1, r4, lr}
 8004782:	681c      	ldr	r4, [r3, #0]
 8004784:	b124      	cbz	r4, 8004790 <iprintf+0x14>
 8004786:	69a3      	ldr	r3, [r4, #24]
 8004788:	b913      	cbnz	r3, 8004790 <iprintf+0x14>
 800478a:	4620      	mov	r0, r4
 800478c:	f000 fa5e 	bl	8004c4c <__sinit>
 8004790:	ab05      	add	r3, sp, #20
 8004792:	9a04      	ldr	r2, [sp, #16]
 8004794:	68a1      	ldr	r1, [r4, #8]
 8004796:	9301      	str	r3, [sp, #4]
 8004798:	4620      	mov	r0, r4
 800479a:	f000 fc67 	bl	800506c <_vfiprintf_r>
 800479e:	b002      	add	sp, #8
 80047a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80047a4:	b004      	add	sp, #16
 80047a6:	4770      	bx	lr
 80047a8:	20000010 	.word	0x20000010

080047ac <_puts_r>:
 80047ac:	b570      	push	{r4, r5, r6, lr}
 80047ae:	460e      	mov	r6, r1
 80047b0:	4605      	mov	r5, r0
 80047b2:	b118      	cbz	r0, 80047bc <_puts_r+0x10>
 80047b4:	6983      	ldr	r3, [r0, #24]
 80047b6:	b90b      	cbnz	r3, 80047bc <_puts_r+0x10>
 80047b8:	f000 fa48 	bl	8004c4c <__sinit>
 80047bc:	69ab      	ldr	r3, [r5, #24]
 80047be:	68ac      	ldr	r4, [r5, #8]
 80047c0:	b913      	cbnz	r3, 80047c8 <_puts_r+0x1c>
 80047c2:	4628      	mov	r0, r5
 80047c4:	f000 fa42 	bl	8004c4c <__sinit>
 80047c8:	4b2c      	ldr	r3, [pc, #176]	; (800487c <_puts_r+0xd0>)
 80047ca:	429c      	cmp	r4, r3
 80047cc:	d120      	bne.n	8004810 <_puts_r+0x64>
 80047ce:	686c      	ldr	r4, [r5, #4]
 80047d0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80047d2:	07db      	lsls	r3, r3, #31
 80047d4:	d405      	bmi.n	80047e2 <_puts_r+0x36>
 80047d6:	89a3      	ldrh	r3, [r4, #12]
 80047d8:	0598      	lsls	r0, r3, #22
 80047da:	d402      	bmi.n	80047e2 <_puts_r+0x36>
 80047dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80047de:	f000 fad3 	bl	8004d88 <__retarget_lock_acquire_recursive>
 80047e2:	89a3      	ldrh	r3, [r4, #12]
 80047e4:	0719      	lsls	r1, r3, #28
 80047e6:	d51d      	bpl.n	8004824 <_puts_r+0x78>
 80047e8:	6923      	ldr	r3, [r4, #16]
 80047ea:	b1db      	cbz	r3, 8004824 <_puts_r+0x78>
 80047ec:	3e01      	subs	r6, #1
 80047ee:	68a3      	ldr	r3, [r4, #8]
 80047f0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80047f4:	3b01      	subs	r3, #1
 80047f6:	60a3      	str	r3, [r4, #8]
 80047f8:	bb39      	cbnz	r1, 800484a <_puts_r+0x9e>
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	da38      	bge.n	8004870 <_puts_r+0xc4>
 80047fe:	4622      	mov	r2, r4
 8004800:	210a      	movs	r1, #10
 8004802:	4628      	mov	r0, r5
 8004804:	f000 f848 	bl	8004898 <__swbuf_r>
 8004808:	3001      	adds	r0, #1
 800480a:	d011      	beq.n	8004830 <_puts_r+0x84>
 800480c:	250a      	movs	r5, #10
 800480e:	e011      	b.n	8004834 <_puts_r+0x88>
 8004810:	4b1b      	ldr	r3, [pc, #108]	; (8004880 <_puts_r+0xd4>)
 8004812:	429c      	cmp	r4, r3
 8004814:	d101      	bne.n	800481a <_puts_r+0x6e>
 8004816:	68ac      	ldr	r4, [r5, #8]
 8004818:	e7da      	b.n	80047d0 <_puts_r+0x24>
 800481a:	4b1a      	ldr	r3, [pc, #104]	; (8004884 <_puts_r+0xd8>)
 800481c:	429c      	cmp	r4, r3
 800481e:	bf08      	it	eq
 8004820:	68ec      	ldreq	r4, [r5, #12]
 8004822:	e7d5      	b.n	80047d0 <_puts_r+0x24>
 8004824:	4621      	mov	r1, r4
 8004826:	4628      	mov	r0, r5
 8004828:	f000 f888 	bl	800493c <__swsetup_r>
 800482c:	2800      	cmp	r0, #0
 800482e:	d0dd      	beq.n	80047ec <_puts_r+0x40>
 8004830:	f04f 35ff 	mov.w	r5, #4294967295
 8004834:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004836:	07da      	lsls	r2, r3, #31
 8004838:	d405      	bmi.n	8004846 <_puts_r+0x9a>
 800483a:	89a3      	ldrh	r3, [r4, #12]
 800483c:	059b      	lsls	r3, r3, #22
 800483e:	d402      	bmi.n	8004846 <_puts_r+0x9a>
 8004840:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004842:	f000 faa2 	bl	8004d8a <__retarget_lock_release_recursive>
 8004846:	4628      	mov	r0, r5
 8004848:	bd70      	pop	{r4, r5, r6, pc}
 800484a:	2b00      	cmp	r3, #0
 800484c:	da04      	bge.n	8004858 <_puts_r+0xac>
 800484e:	69a2      	ldr	r2, [r4, #24]
 8004850:	429a      	cmp	r2, r3
 8004852:	dc06      	bgt.n	8004862 <_puts_r+0xb6>
 8004854:	290a      	cmp	r1, #10
 8004856:	d004      	beq.n	8004862 <_puts_r+0xb6>
 8004858:	6823      	ldr	r3, [r4, #0]
 800485a:	1c5a      	adds	r2, r3, #1
 800485c:	6022      	str	r2, [r4, #0]
 800485e:	7019      	strb	r1, [r3, #0]
 8004860:	e7c5      	b.n	80047ee <_puts_r+0x42>
 8004862:	4622      	mov	r2, r4
 8004864:	4628      	mov	r0, r5
 8004866:	f000 f817 	bl	8004898 <__swbuf_r>
 800486a:	3001      	adds	r0, #1
 800486c:	d1bf      	bne.n	80047ee <_puts_r+0x42>
 800486e:	e7df      	b.n	8004830 <_puts_r+0x84>
 8004870:	6823      	ldr	r3, [r4, #0]
 8004872:	250a      	movs	r5, #10
 8004874:	1c5a      	adds	r2, r3, #1
 8004876:	6022      	str	r2, [r4, #0]
 8004878:	701d      	strb	r5, [r3, #0]
 800487a:	e7db      	b.n	8004834 <_puts_r+0x88>
 800487c:	08005898 	.word	0x08005898
 8004880:	080058b8 	.word	0x080058b8
 8004884:	08005878 	.word	0x08005878

08004888 <puts>:
 8004888:	4b02      	ldr	r3, [pc, #8]	; (8004894 <puts+0xc>)
 800488a:	4601      	mov	r1, r0
 800488c:	6818      	ldr	r0, [r3, #0]
 800488e:	f7ff bf8d 	b.w	80047ac <_puts_r>
 8004892:	bf00      	nop
 8004894:	20000010 	.word	0x20000010

08004898 <__swbuf_r>:
 8004898:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800489a:	460e      	mov	r6, r1
 800489c:	4614      	mov	r4, r2
 800489e:	4605      	mov	r5, r0
 80048a0:	b118      	cbz	r0, 80048aa <__swbuf_r+0x12>
 80048a2:	6983      	ldr	r3, [r0, #24]
 80048a4:	b90b      	cbnz	r3, 80048aa <__swbuf_r+0x12>
 80048a6:	f000 f9d1 	bl	8004c4c <__sinit>
 80048aa:	4b21      	ldr	r3, [pc, #132]	; (8004930 <__swbuf_r+0x98>)
 80048ac:	429c      	cmp	r4, r3
 80048ae:	d12b      	bne.n	8004908 <__swbuf_r+0x70>
 80048b0:	686c      	ldr	r4, [r5, #4]
 80048b2:	69a3      	ldr	r3, [r4, #24]
 80048b4:	60a3      	str	r3, [r4, #8]
 80048b6:	89a3      	ldrh	r3, [r4, #12]
 80048b8:	071a      	lsls	r2, r3, #28
 80048ba:	d52f      	bpl.n	800491c <__swbuf_r+0x84>
 80048bc:	6923      	ldr	r3, [r4, #16]
 80048be:	b36b      	cbz	r3, 800491c <__swbuf_r+0x84>
 80048c0:	6923      	ldr	r3, [r4, #16]
 80048c2:	6820      	ldr	r0, [r4, #0]
 80048c4:	1ac0      	subs	r0, r0, r3
 80048c6:	6963      	ldr	r3, [r4, #20]
 80048c8:	b2f6      	uxtb	r6, r6
 80048ca:	4283      	cmp	r3, r0
 80048cc:	4637      	mov	r7, r6
 80048ce:	dc04      	bgt.n	80048da <__swbuf_r+0x42>
 80048d0:	4621      	mov	r1, r4
 80048d2:	4628      	mov	r0, r5
 80048d4:	f000 f926 	bl	8004b24 <_fflush_r>
 80048d8:	bb30      	cbnz	r0, 8004928 <__swbuf_r+0x90>
 80048da:	68a3      	ldr	r3, [r4, #8]
 80048dc:	3b01      	subs	r3, #1
 80048de:	60a3      	str	r3, [r4, #8]
 80048e0:	6823      	ldr	r3, [r4, #0]
 80048e2:	1c5a      	adds	r2, r3, #1
 80048e4:	6022      	str	r2, [r4, #0]
 80048e6:	701e      	strb	r6, [r3, #0]
 80048e8:	6963      	ldr	r3, [r4, #20]
 80048ea:	3001      	adds	r0, #1
 80048ec:	4283      	cmp	r3, r0
 80048ee:	d004      	beq.n	80048fa <__swbuf_r+0x62>
 80048f0:	89a3      	ldrh	r3, [r4, #12]
 80048f2:	07db      	lsls	r3, r3, #31
 80048f4:	d506      	bpl.n	8004904 <__swbuf_r+0x6c>
 80048f6:	2e0a      	cmp	r6, #10
 80048f8:	d104      	bne.n	8004904 <__swbuf_r+0x6c>
 80048fa:	4621      	mov	r1, r4
 80048fc:	4628      	mov	r0, r5
 80048fe:	f000 f911 	bl	8004b24 <_fflush_r>
 8004902:	b988      	cbnz	r0, 8004928 <__swbuf_r+0x90>
 8004904:	4638      	mov	r0, r7
 8004906:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004908:	4b0a      	ldr	r3, [pc, #40]	; (8004934 <__swbuf_r+0x9c>)
 800490a:	429c      	cmp	r4, r3
 800490c:	d101      	bne.n	8004912 <__swbuf_r+0x7a>
 800490e:	68ac      	ldr	r4, [r5, #8]
 8004910:	e7cf      	b.n	80048b2 <__swbuf_r+0x1a>
 8004912:	4b09      	ldr	r3, [pc, #36]	; (8004938 <__swbuf_r+0xa0>)
 8004914:	429c      	cmp	r4, r3
 8004916:	bf08      	it	eq
 8004918:	68ec      	ldreq	r4, [r5, #12]
 800491a:	e7ca      	b.n	80048b2 <__swbuf_r+0x1a>
 800491c:	4621      	mov	r1, r4
 800491e:	4628      	mov	r0, r5
 8004920:	f000 f80c 	bl	800493c <__swsetup_r>
 8004924:	2800      	cmp	r0, #0
 8004926:	d0cb      	beq.n	80048c0 <__swbuf_r+0x28>
 8004928:	f04f 37ff 	mov.w	r7, #4294967295
 800492c:	e7ea      	b.n	8004904 <__swbuf_r+0x6c>
 800492e:	bf00      	nop
 8004930:	08005898 	.word	0x08005898
 8004934:	080058b8 	.word	0x080058b8
 8004938:	08005878 	.word	0x08005878

0800493c <__swsetup_r>:
 800493c:	4b32      	ldr	r3, [pc, #200]	; (8004a08 <__swsetup_r+0xcc>)
 800493e:	b570      	push	{r4, r5, r6, lr}
 8004940:	681d      	ldr	r5, [r3, #0]
 8004942:	4606      	mov	r6, r0
 8004944:	460c      	mov	r4, r1
 8004946:	b125      	cbz	r5, 8004952 <__swsetup_r+0x16>
 8004948:	69ab      	ldr	r3, [r5, #24]
 800494a:	b913      	cbnz	r3, 8004952 <__swsetup_r+0x16>
 800494c:	4628      	mov	r0, r5
 800494e:	f000 f97d 	bl	8004c4c <__sinit>
 8004952:	4b2e      	ldr	r3, [pc, #184]	; (8004a0c <__swsetup_r+0xd0>)
 8004954:	429c      	cmp	r4, r3
 8004956:	d10f      	bne.n	8004978 <__swsetup_r+0x3c>
 8004958:	686c      	ldr	r4, [r5, #4]
 800495a:	89a3      	ldrh	r3, [r4, #12]
 800495c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004960:	0719      	lsls	r1, r3, #28
 8004962:	d42c      	bmi.n	80049be <__swsetup_r+0x82>
 8004964:	06dd      	lsls	r5, r3, #27
 8004966:	d411      	bmi.n	800498c <__swsetup_r+0x50>
 8004968:	2309      	movs	r3, #9
 800496a:	6033      	str	r3, [r6, #0]
 800496c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004970:	81a3      	strh	r3, [r4, #12]
 8004972:	f04f 30ff 	mov.w	r0, #4294967295
 8004976:	e03e      	b.n	80049f6 <__swsetup_r+0xba>
 8004978:	4b25      	ldr	r3, [pc, #148]	; (8004a10 <__swsetup_r+0xd4>)
 800497a:	429c      	cmp	r4, r3
 800497c:	d101      	bne.n	8004982 <__swsetup_r+0x46>
 800497e:	68ac      	ldr	r4, [r5, #8]
 8004980:	e7eb      	b.n	800495a <__swsetup_r+0x1e>
 8004982:	4b24      	ldr	r3, [pc, #144]	; (8004a14 <__swsetup_r+0xd8>)
 8004984:	429c      	cmp	r4, r3
 8004986:	bf08      	it	eq
 8004988:	68ec      	ldreq	r4, [r5, #12]
 800498a:	e7e6      	b.n	800495a <__swsetup_r+0x1e>
 800498c:	0758      	lsls	r0, r3, #29
 800498e:	d512      	bpl.n	80049b6 <__swsetup_r+0x7a>
 8004990:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004992:	b141      	cbz	r1, 80049a6 <__swsetup_r+0x6a>
 8004994:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004998:	4299      	cmp	r1, r3
 800499a:	d002      	beq.n	80049a2 <__swsetup_r+0x66>
 800499c:	4630      	mov	r0, r6
 800499e:	f000 fa5b 	bl	8004e58 <_free_r>
 80049a2:	2300      	movs	r3, #0
 80049a4:	6363      	str	r3, [r4, #52]	; 0x34
 80049a6:	89a3      	ldrh	r3, [r4, #12]
 80049a8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80049ac:	81a3      	strh	r3, [r4, #12]
 80049ae:	2300      	movs	r3, #0
 80049b0:	6063      	str	r3, [r4, #4]
 80049b2:	6923      	ldr	r3, [r4, #16]
 80049b4:	6023      	str	r3, [r4, #0]
 80049b6:	89a3      	ldrh	r3, [r4, #12]
 80049b8:	f043 0308 	orr.w	r3, r3, #8
 80049bc:	81a3      	strh	r3, [r4, #12]
 80049be:	6923      	ldr	r3, [r4, #16]
 80049c0:	b94b      	cbnz	r3, 80049d6 <__swsetup_r+0x9a>
 80049c2:	89a3      	ldrh	r3, [r4, #12]
 80049c4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80049c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80049cc:	d003      	beq.n	80049d6 <__swsetup_r+0x9a>
 80049ce:	4621      	mov	r1, r4
 80049d0:	4630      	mov	r0, r6
 80049d2:	f000 fa01 	bl	8004dd8 <__smakebuf_r>
 80049d6:	89a0      	ldrh	r0, [r4, #12]
 80049d8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80049dc:	f010 0301 	ands.w	r3, r0, #1
 80049e0:	d00a      	beq.n	80049f8 <__swsetup_r+0xbc>
 80049e2:	2300      	movs	r3, #0
 80049e4:	60a3      	str	r3, [r4, #8]
 80049e6:	6963      	ldr	r3, [r4, #20]
 80049e8:	425b      	negs	r3, r3
 80049ea:	61a3      	str	r3, [r4, #24]
 80049ec:	6923      	ldr	r3, [r4, #16]
 80049ee:	b943      	cbnz	r3, 8004a02 <__swsetup_r+0xc6>
 80049f0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80049f4:	d1ba      	bne.n	800496c <__swsetup_r+0x30>
 80049f6:	bd70      	pop	{r4, r5, r6, pc}
 80049f8:	0781      	lsls	r1, r0, #30
 80049fa:	bf58      	it	pl
 80049fc:	6963      	ldrpl	r3, [r4, #20]
 80049fe:	60a3      	str	r3, [r4, #8]
 8004a00:	e7f4      	b.n	80049ec <__swsetup_r+0xb0>
 8004a02:	2000      	movs	r0, #0
 8004a04:	e7f7      	b.n	80049f6 <__swsetup_r+0xba>
 8004a06:	bf00      	nop
 8004a08:	20000010 	.word	0x20000010
 8004a0c:	08005898 	.word	0x08005898
 8004a10:	080058b8 	.word	0x080058b8
 8004a14:	08005878 	.word	0x08005878

08004a18 <__sflush_r>:
 8004a18:	898a      	ldrh	r2, [r1, #12]
 8004a1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004a1e:	4605      	mov	r5, r0
 8004a20:	0710      	lsls	r0, r2, #28
 8004a22:	460c      	mov	r4, r1
 8004a24:	d458      	bmi.n	8004ad8 <__sflush_r+0xc0>
 8004a26:	684b      	ldr	r3, [r1, #4]
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	dc05      	bgt.n	8004a38 <__sflush_r+0x20>
 8004a2c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	dc02      	bgt.n	8004a38 <__sflush_r+0x20>
 8004a32:	2000      	movs	r0, #0
 8004a34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004a38:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004a3a:	2e00      	cmp	r6, #0
 8004a3c:	d0f9      	beq.n	8004a32 <__sflush_r+0x1a>
 8004a3e:	2300      	movs	r3, #0
 8004a40:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004a44:	682f      	ldr	r7, [r5, #0]
 8004a46:	602b      	str	r3, [r5, #0]
 8004a48:	d032      	beq.n	8004ab0 <__sflush_r+0x98>
 8004a4a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004a4c:	89a3      	ldrh	r3, [r4, #12]
 8004a4e:	075a      	lsls	r2, r3, #29
 8004a50:	d505      	bpl.n	8004a5e <__sflush_r+0x46>
 8004a52:	6863      	ldr	r3, [r4, #4]
 8004a54:	1ac0      	subs	r0, r0, r3
 8004a56:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004a58:	b10b      	cbz	r3, 8004a5e <__sflush_r+0x46>
 8004a5a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004a5c:	1ac0      	subs	r0, r0, r3
 8004a5e:	2300      	movs	r3, #0
 8004a60:	4602      	mov	r2, r0
 8004a62:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004a64:	6a21      	ldr	r1, [r4, #32]
 8004a66:	4628      	mov	r0, r5
 8004a68:	47b0      	blx	r6
 8004a6a:	1c43      	adds	r3, r0, #1
 8004a6c:	89a3      	ldrh	r3, [r4, #12]
 8004a6e:	d106      	bne.n	8004a7e <__sflush_r+0x66>
 8004a70:	6829      	ldr	r1, [r5, #0]
 8004a72:	291d      	cmp	r1, #29
 8004a74:	d82c      	bhi.n	8004ad0 <__sflush_r+0xb8>
 8004a76:	4a2a      	ldr	r2, [pc, #168]	; (8004b20 <__sflush_r+0x108>)
 8004a78:	40ca      	lsrs	r2, r1
 8004a7a:	07d6      	lsls	r6, r2, #31
 8004a7c:	d528      	bpl.n	8004ad0 <__sflush_r+0xb8>
 8004a7e:	2200      	movs	r2, #0
 8004a80:	6062      	str	r2, [r4, #4]
 8004a82:	04d9      	lsls	r1, r3, #19
 8004a84:	6922      	ldr	r2, [r4, #16]
 8004a86:	6022      	str	r2, [r4, #0]
 8004a88:	d504      	bpl.n	8004a94 <__sflush_r+0x7c>
 8004a8a:	1c42      	adds	r2, r0, #1
 8004a8c:	d101      	bne.n	8004a92 <__sflush_r+0x7a>
 8004a8e:	682b      	ldr	r3, [r5, #0]
 8004a90:	b903      	cbnz	r3, 8004a94 <__sflush_r+0x7c>
 8004a92:	6560      	str	r0, [r4, #84]	; 0x54
 8004a94:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004a96:	602f      	str	r7, [r5, #0]
 8004a98:	2900      	cmp	r1, #0
 8004a9a:	d0ca      	beq.n	8004a32 <__sflush_r+0x1a>
 8004a9c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004aa0:	4299      	cmp	r1, r3
 8004aa2:	d002      	beq.n	8004aaa <__sflush_r+0x92>
 8004aa4:	4628      	mov	r0, r5
 8004aa6:	f000 f9d7 	bl	8004e58 <_free_r>
 8004aaa:	2000      	movs	r0, #0
 8004aac:	6360      	str	r0, [r4, #52]	; 0x34
 8004aae:	e7c1      	b.n	8004a34 <__sflush_r+0x1c>
 8004ab0:	6a21      	ldr	r1, [r4, #32]
 8004ab2:	2301      	movs	r3, #1
 8004ab4:	4628      	mov	r0, r5
 8004ab6:	47b0      	blx	r6
 8004ab8:	1c41      	adds	r1, r0, #1
 8004aba:	d1c7      	bne.n	8004a4c <__sflush_r+0x34>
 8004abc:	682b      	ldr	r3, [r5, #0]
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d0c4      	beq.n	8004a4c <__sflush_r+0x34>
 8004ac2:	2b1d      	cmp	r3, #29
 8004ac4:	d001      	beq.n	8004aca <__sflush_r+0xb2>
 8004ac6:	2b16      	cmp	r3, #22
 8004ac8:	d101      	bne.n	8004ace <__sflush_r+0xb6>
 8004aca:	602f      	str	r7, [r5, #0]
 8004acc:	e7b1      	b.n	8004a32 <__sflush_r+0x1a>
 8004ace:	89a3      	ldrh	r3, [r4, #12]
 8004ad0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004ad4:	81a3      	strh	r3, [r4, #12]
 8004ad6:	e7ad      	b.n	8004a34 <__sflush_r+0x1c>
 8004ad8:	690f      	ldr	r7, [r1, #16]
 8004ada:	2f00      	cmp	r7, #0
 8004adc:	d0a9      	beq.n	8004a32 <__sflush_r+0x1a>
 8004ade:	0793      	lsls	r3, r2, #30
 8004ae0:	680e      	ldr	r6, [r1, #0]
 8004ae2:	bf08      	it	eq
 8004ae4:	694b      	ldreq	r3, [r1, #20]
 8004ae6:	600f      	str	r7, [r1, #0]
 8004ae8:	bf18      	it	ne
 8004aea:	2300      	movne	r3, #0
 8004aec:	eba6 0807 	sub.w	r8, r6, r7
 8004af0:	608b      	str	r3, [r1, #8]
 8004af2:	f1b8 0f00 	cmp.w	r8, #0
 8004af6:	dd9c      	ble.n	8004a32 <__sflush_r+0x1a>
 8004af8:	6a21      	ldr	r1, [r4, #32]
 8004afa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004afc:	4643      	mov	r3, r8
 8004afe:	463a      	mov	r2, r7
 8004b00:	4628      	mov	r0, r5
 8004b02:	47b0      	blx	r6
 8004b04:	2800      	cmp	r0, #0
 8004b06:	dc06      	bgt.n	8004b16 <__sflush_r+0xfe>
 8004b08:	89a3      	ldrh	r3, [r4, #12]
 8004b0a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004b0e:	81a3      	strh	r3, [r4, #12]
 8004b10:	f04f 30ff 	mov.w	r0, #4294967295
 8004b14:	e78e      	b.n	8004a34 <__sflush_r+0x1c>
 8004b16:	4407      	add	r7, r0
 8004b18:	eba8 0800 	sub.w	r8, r8, r0
 8004b1c:	e7e9      	b.n	8004af2 <__sflush_r+0xda>
 8004b1e:	bf00      	nop
 8004b20:	20400001 	.word	0x20400001

08004b24 <_fflush_r>:
 8004b24:	b538      	push	{r3, r4, r5, lr}
 8004b26:	690b      	ldr	r3, [r1, #16]
 8004b28:	4605      	mov	r5, r0
 8004b2a:	460c      	mov	r4, r1
 8004b2c:	b913      	cbnz	r3, 8004b34 <_fflush_r+0x10>
 8004b2e:	2500      	movs	r5, #0
 8004b30:	4628      	mov	r0, r5
 8004b32:	bd38      	pop	{r3, r4, r5, pc}
 8004b34:	b118      	cbz	r0, 8004b3e <_fflush_r+0x1a>
 8004b36:	6983      	ldr	r3, [r0, #24]
 8004b38:	b90b      	cbnz	r3, 8004b3e <_fflush_r+0x1a>
 8004b3a:	f000 f887 	bl	8004c4c <__sinit>
 8004b3e:	4b14      	ldr	r3, [pc, #80]	; (8004b90 <_fflush_r+0x6c>)
 8004b40:	429c      	cmp	r4, r3
 8004b42:	d11b      	bne.n	8004b7c <_fflush_r+0x58>
 8004b44:	686c      	ldr	r4, [r5, #4]
 8004b46:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d0ef      	beq.n	8004b2e <_fflush_r+0xa>
 8004b4e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004b50:	07d0      	lsls	r0, r2, #31
 8004b52:	d404      	bmi.n	8004b5e <_fflush_r+0x3a>
 8004b54:	0599      	lsls	r1, r3, #22
 8004b56:	d402      	bmi.n	8004b5e <_fflush_r+0x3a>
 8004b58:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004b5a:	f000 f915 	bl	8004d88 <__retarget_lock_acquire_recursive>
 8004b5e:	4628      	mov	r0, r5
 8004b60:	4621      	mov	r1, r4
 8004b62:	f7ff ff59 	bl	8004a18 <__sflush_r>
 8004b66:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004b68:	07da      	lsls	r2, r3, #31
 8004b6a:	4605      	mov	r5, r0
 8004b6c:	d4e0      	bmi.n	8004b30 <_fflush_r+0xc>
 8004b6e:	89a3      	ldrh	r3, [r4, #12]
 8004b70:	059b      	lsls	r3, r3, #22
 8004b72:	d4dd      	bmi.n	8004b30 <_fflush_r+0xc>
 8004b74:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004b76:	f000 f908 	bl	8004d8a <__retarget_lock_release_recursive>
 8004b7a:	e7d9      	b.n	8004b30 <_fflush_r+0xc>
 8004b7c:	4b05      	ldr	r3, [pc, #20]	; (8004b94 <_fflush_r+0x70>)
 8004b7e:	429c      	cmp	r4, r3
 8004b80:	d101      	bne.n	8004b86 <_fflush_r+0x62>
 8004b82:	68ac      	ldr	r4, [r5, #8]
 8004b84:	e7df      	b.n	8004b46 <_fflush_r+0x22>
 8004b86:	4b04      	ldr	r3, [pc, #16]	; (8004b98 <_fflush_r+0x74>)
 8004b88:	429c      	cmp	r4, r3
 8004b8a:	bf08      	it	eq
 8004b8c:	68ec      	ldreq	r4, [r5, #12]
 8004b8e:	e7da      	b.n	8004b46 <_fflush_r+0x22>
 8004b90:	08005898 	.word	0x08005898
 8004b94:	080058b8 	.word	0x080058b8
 8004b98:	08005878 	.word	0x08005878

08004b9c <std>:
 8004b9c:	2300      	movs	r3, #0
 8004b9e:	b510      	push	{r4, lr}
 8004ba0:	4604      	mov	r4, r0
 8004ba2:	e9c0 3300 	strd	r3, r3, [r0]
 8004ba6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004baa:	6083      	str	r3, [r0, #8]
 8004bac:	8181      	strh	r1, [r0, #12]
 8004bae:	6643      	str	r3, [r0, #100]	; 0x64
 8004bb0:	81c2      	strh	r2, [r0, #14]
 8004bb2:	6183      	str	r3, [r0, #24]
 8004bb4:	4619      	mov	r1, r3
 8004bb6:	2208      	movs	r2, #8
 8004bb8:	305c      	adds	r0, #92	; 0x5c
 8004bba:	f7ff fdd7 	bl	800476c <memset>
 8004bbe:	4b05      	ldr	r3, [pc, #20]	; (8004bd4 <std+0x38>)
 8004bc0:	6263      	str	r3, [r4, #36]	; 0x24
 8004bc2:	4b05      	ldr	r3, [pc, #20]	; (8004bd8 <std+0x3c>)
 8004bc4:	62a3      	str	r3, [r4, #40]	; 0x28
 8004bc6:	4b05      	ldr	r3, [pc, #20]	; (8004bdc <std+0x40>)
 8004bc8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004bca:	4b05      	ldr	r3, [pc, #20]	; (8004be0 <std+0x44>)
 8004bcc:	6224      	str	r4, [r4, #32]
 8004bce:	6323      	str	r3, [r4, #48]	; 0x30
 8004bd0:	bd10      	pop	{r4, pc}
 8004bd2:	bf00      	nop
 8004bd4:	08005615 	.word	0x08005615
 8004bd8:	08005637 	.word	0x08005637
 8004bdc:	0800566f 	.word	0x0800566f
 8004be0:	08005693 	.word	0x08005693

08004be4 <_cleanup_r>:
 8004be4:	4901      	ldr	r1, [pc, #4]	; (8004bec <_cleanup_r+0x8>)
 8004be6:	f000 b8af 	b.w	8004d48 <_fwalk_reent>
 8004bea:	bf00      	nop
 8004bec:	08004b25 	.word	0x08004b25

08004bf0 <__sfmoreglue>:
 8004bf0:	b570      	push	{r4, r5, r6, lr}
 8004bf2:	2268      	movs	r2, #104	; 0x68
 8004bf4:	1e4d      	subs	r5, r1, #1
 8004bf6:	4355      	muls	r5, r2
 8004bf8:	460e      	mov	r6, r1
 8004bfa:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004bfe:	f000 f997 	bl	8004f30 <_malloc_r>
 8004c02:	4604      	mov	r4, r0
 8004c04:	b140      	cbz	r0, 8004c18 <__sfmoreglue+0x28>
 8004c06:	2100      	movs	r1, #0
 8004c08:	e9c0 1600 	strd	r1, r6, [r0]
 8004c0c:	300c      	adds	r0, #12
 8004c0e:	60a0      	str	r0, [r4, #8]
 8004c10:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004c14:	f7ff fdaa 	bl	800476c <memset>
 8004c18:	4620      	mov	r0, r4
 8004c1a:	bd70      	pop	{r4, r5, r6, pc}

08004c1c <__sfp_lock_acquire>:
 8004c1c:	4801      	ldr	r0, [pc, #4]	; (8004c24 <__sfp_lock_acquire+0x8>)
 8004c1e:	f000 b8b3 	b.w	8004d88 <__retarget_lock_acquire_recursive>
 8004c22:	bf00      	nop
 8004c24:	20000a09 	.word	0x20000a09

08004c28 <__sfp_lock_release>:
 8004c28:	4801      	ldr	r0, [pc, #4]	; (8004c30 <__sfp_lock_release+0x8>)
 8004c2a:	f000 b8ae 	b.w	8004d8a <__retarget_lock_release_recursive>
 8004c2e:	bf00      	nop
 8004c30:	20000a09 	.word	0x20000a09

08004c34 <__sinit_lock_acquire>:
 8004c34:	4801      	ldr	r0, [pc, #4]	; (8004c3c <__sinit_lock_acquire+0x8>)
 8004c36:	f000 b8a7 	b.w	8004d88 <__retarget_lock_acquire_recursive>
 8004c3a:	bf00      	nop
 8004c3c:	20000a0a 	.word	0x20000a0a

08004c40 <__sinit_lock_release>:
 8004c40:	4801      	ldr	r0, [pc, #4]	; (8004c48 <__sinit_lock_release+0x8>)
 8004c42:	f000 b8a2 	b.w	8004d8a <__retarget_lock_release_recursive>
 8004c46:	bf00      	nop
 8004c48:	20000a0a 	.word	0x20000a0a

08004c4c <__sinit>:
 8004c4c:	b510      	push	{r4, lr}
 8004c4e:	4604      	mov	r4, r0
 8004c50:	f7ff fff0 	bl	8004c34 <__sinit_lock_acquire>
 8004c54:	69a3      	ldr	r3, [r4, #24]
 8004c56:	b11b      	cbz	r3, 8004c60 <__sinit+0x14>
 8004c58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004c5c:	f7ff bff0 	b.w	8004c40 <__sinit_lock_release>
 8004c60:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004c64:	6523      	str	r3, [r4, #80]	; 0x50
 8004c66:	4b13      	ldr	r3, [pc, #76]	; (8004cb4 <__sinit+0x68>)
 8004c68:	4a13      	ldr	r2, [pc, #76]	; (8004cb8 <__sinit+0x6c>)
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	62a2      	str	r2, [r4, #40]	; 0x28
 8004c6e:	42a3      	cmp	r3, r4
 8004c70:	bf04      	itt	eq
 8004c72:	2301      	moveq	r3, #1
 8004c74:	61a3      	streq	r3, [r4, #24]
 8004c76:	4620      	mov	r0, r4
 8004c78:	f000 f820 	bl	8004cbc <__sfp>
 8004c7c:	6060      	str	r0, [r4, #4]
 8004c7e:	4620      	mov	r0, r4
 8004c80:	f000 f81c 	bl	8004cbc <__sfp>
 8004c84:	60a0      	str	r0, [r4, #8]
 8004c86:	4620      	mov	r0, r4
 8004c88:	f000 f818 	bl	8004cbc <__sfp>
 8004c8c:	2200      	movs	r2, #0
 8004c8e:	60e0      	str	r0, [r4, #12]
 8004c90:	2104      	movs	r1, #4
 8004c92:	6860      	ldr	r0, [r4, #4]
 8004c94:	f7ff ff82 	bl	8004b9c <std>
 8004c98:	68a0      	ldr	r0, [r4, #8]
 8004c9a:	2201      	movs	r2, #1
 8004c9c:	2109      	movs	r1, #9
 8004c9e:	f7ff ff7d 	bl	8004b9c <std>
 8004ca2:	68e0      	ldr	r0, [r4, #12]
 8004ca4:	2202      	movs	r2, #2
 8004ca6:	2112      	movs	r1, #18
 8004ca8:	f7ff ff78 	bl	8004b9c <std>
 8004cac:	2301      	movs	r3, #1
 8004cae:	61a3      	str	r3, [r4, #24]
 8004cb0:	e7d2      	b.n	8004c58 <__sinit+0xc>
 8004cb2:	bf00      	nop
 8004cb4:	08005874 	.word	0x08005874
 8004cb8:	08004be5 	.word	0x08004be5

08004cbc <__sfp>:
 8004cbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004cbe:	4607      	mov	r7, r0
 8004cc0:	f7ff ffac 	bl	8004c1c <__sfp_lock_acquire>
 8004cc4:	4b1e      	ldr	r3, [pc, #120]	; (8004d40 <__sfp+0x84>)
 8004cc6:	681e      	ldr	r6, [r3, #0]
 8004cc8:	69b3      	ldr	r3, [r6, #24]
 8004cca:	b913      	cbnz	r3, 8004cd2 <__sfp+0x16>
 8004ccc:	4630      	mov	r0, r6
 8004cce:	f7ff ffbd 	bl	8004c4c <__sinit>
 8004cd2:	3648      	adds	r6, #72	; 0x48
 8004cd4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004cd8:	3b01      	subs	r3, #1
 8004cda:	d503      	bpl.n	8004ce4 <__sfp+0x28>
 8004cdc:	6833      	ldr	r3, [r6, #0]
 8004cde:	b30b      	cbz	r3, 8004d24 <__sfp+0x68>
 8004ce0:	6836      	ldr	r6, [r6, #0]
 8004ce2:	e7f7      	b.n	8004cd4 <__sfp+0x18>
 8004ce4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004ce8:	b9d5      	cbnz	r5, 8004d20 <__sfp+0x64>
 8004cea:	4b16      	ldr	r3, [pc, #88]	; (8004d44 <__sfp+0x88>)
 8004cec:	60e3      	str	r3, [r4, #12]
 8004cee:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004cf2:	6665      	str	r5, [r4, #100]	; 0x64
 8004cf4:	f000 f847 	bl	8004d86 <__retarget_lock_init_recursive>
 8004cf8:	f7ff ff96 	bl	8004c28 <__sfp_lock_release>
 8004cfc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004d00:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004d04:	6025      	str	r5, [r4, #0]
 8004d06:	61a5      	str	r5, [r4, #24]
 8004d08:	2208      	movs	r2, #8
 8004d0a:	4629      	mov	r1, r5
 8004d0c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004d10:	f7ff fd2c 	bl	800476c <memset>
 8004d14:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004d18:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004d1c:	4620      	mov	r0, r4
 8004d1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004d20:	3468      	adds	r4, #104	; 0x68
 8004d22:	e7d9      	b.n	8004cd8 <__sfp+0x1c>
 8004d24:	2104      	movs	r1, #4
 8004d26:	4638      	mov	r0, r7
 8004d28:	f7ff ff62 	bl	8004bf0 <__sfmoreglue>
 8004d2c:	4604      	mov	r4, r0
 8004d2e:	6030      	str	r0, [r6, #0]
 8004d30:	2800      	cmp	r0, #0
 8004d32:	d1d5      	bne.n	8004ce0 <__sfp+0x24>
 8004d34:	f7ff ff78 	bl	8004c28 <__sfp_lock_release>
 8004d38:	230c      	movs	r3, #12
 8004d3a:	603b      	str	r3, [r7, #0]
 8004d3c:	e7ee      	b.n	8004d1c <__sfp+0x60>
 8004d3e:	bf00      	nop
 8004d40:	08005874 	.word	0x08005874
 8004d44:	ffff0001 	.word	0xffff0001

08004d48 <_fwalk_reent>:
 8004d48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004d4c:	4606      	mov	r6, r0
 8004d4e:	4688      	mov	r8, r1
 8004d50:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004d54:	2700      	movs	r7, #0
 8004d56:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004d5a:	f1b9 0901 	subs.w	r9, r9, #1
 8004d5e:	d505      	bpl.n	8004d6c <_fwalk_reent+0x24>
 8004d60:	6824      	ldr	r4, [r4, #0]
 8004d62:	2c00      	cmp	r4, #0
 8004d64:	d1f7      	bne.n	8004d56 <_fwalk_reent+0xe>
 8004d66:	4638      	mov	r0, r7
 8004d68:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004d6c:	89ab      	ldrh	r3, [r5, #12]
 8004d6e:	2b01      	cmp	r3, #1
 8004d70:	d907      	bls.n	8004d82 <_fwalk_reent+0x3a>
 8004d72:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004d76:	3301      	adds	r3, #1
 8004d78:	d003      	beq.n	8004d82 <_fwalk_reent+0x3a>
 8004d7a:	4629      	mov	r1, r5
 8004d7c:	4630      	mov	r0, r6
 8004d7e:	47c0      	blx	r8
 8004d80:	4307      	orrs	r7, r0
 8004d82:	3568      	adds	r5, #104	; 0x68
 8004d84:	e7e9      	b.n	8004d5a <_fwalk_reent+0x12>

08004d86 <__retarget_lock_init_recursive>:
 8004d86:	4770      	bx	lr

08004d88 <__retarget_lock_acquire_recursive>:
 8004d88:	4770      	bx	lr

08004d8a <__retarget_lock_release_recursive>:
 8004d8a:	4770      	bx	lr

08004d8c <__swhatbuf_r>:
 8004d8c:	b570      	push	{r4, r5, r6, lr}
 8004d8e:	460e      	mov	r6, r1
 8004d90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004d94:	2900      	cmp	r1, #0
 8004d96:	b096      	sub	sp, #88	; 0x58
 8004d98:	4614      	mov	r4, r2
 8004d9a:	461d      	mov	r5, r3
 8004d9c:	da08      	bge.n	8004db0 <__swhatbuf_r+0x24>
 8004d9e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8004da2:	2200      	movs	r2, #0
 8004da4:	602a      	str	r2, [r5, #0]
 8004da6:	061a      	lsls	r2, r3, #24
 8004da8:	d410      	bmi.n	8004dcc <__swhatbuf_r+0x40>
 8004daa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004dae:	e00e      	b.n	8004dce <__swhatbuf_r+0x42>
 8004db0:	466a      	mov	r2, sp
 8004db2:	f000 fc95 	bl	80056e0 <_fstat_r>
 8004db6:	2800      	cmp	r0, #0
 8004db8:	dbf1      	blt.n	8004d9e <__swhatbuf_r+0x12>
 8004dba:	9a01      	ldr	r2, [sp, #4]
 8004dbc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004dc0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004dc4:	425a      	negs	r2, r3
 8004dc6:	415a      	adcs	r2, r3
 8004dc8:	602a      	str	r2, [r5, #0]
 8004dca:	e7ee      	b.n	8004daa <__swhatbuf_r+0x1e>
 8004dcc:	2340      	movs	r3, #64	; 0x40
 8004dce:	2000      	movs	r0, #0
 8004dd0:	6023      	str	r3, [r4, #0]
 8004dd2:	b016      	add	sp, #88	; 0x58
 8004dd4:	bd70      	pop	{r4, r5, r6, pc}
	...

08004dd8 <__smakebuf_r>:
 8004dd8:	898b      	ldrh	r3, [r1, #12]
 8004dda:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004ddc:	079d      	lsls	r5, r3, #30
 8004dde:	4606      	mov	r6, r0
 8004de0:	460c      	mov	r4, r1
 8004de2:	d507      	bpl.n	8004df4 <__smakebuf_r+0x1c>
 8004de4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004de8:	6023      	str	r3, [r4, #0]
 8004dea:	6123      	str	r3, [r4, #16]
 8004dec:	2301      	movs	r3, #1
 8004dee:	6163      	str	r3, [r4, #20]
 8004df0:	b002      	add	sp, #8
 8004df2:	bd70      	pop	{r4, r5, r6, pc}
 8004df4:	ab01      	add	r3, sp, #4
 8004df6:	466a      	mov	r2, sp
 8004df8:	f7ff ffc8 	bl	8004d8c <__swhatbuf_r>
 8004dfc:	9900      	ldr	r1, [sp, #0]
 8004dfe:	4605      	mov	r5, r0
 8004e00:	4630      	mov	r0, r6
 8004e02:	f000 f895 	bl	8004f30 <_malloc_r>
 8004e06:	b948      	cbnz	r0, 8004e1c <__smakebuf_r+0x44>
 8004e08:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004e0c:	059a      	lsls	r2, r3, #22
 8004e0e:	d4ef      	bmi.n	8004df0 <__smakebuf_r+0x18>
 8004e10:	f023 0303 	bic.w	r3, r3, #3
 8004e14:	f043 0302 	orr.w	r3, r3, #2
 8004e18:	81a3      	strh	r3, [r4, #12]
 8004e1a:	e7e3      	b.n	8004de4 <__smakebuf_r+0xc>
 8004e1c:	4b0d      	ldr	r3, [pc, #52]	; (8004e54 <__smakebuf_r+0x7c>)
 8004e1e:	62b3      	str	r3, [r6, #40]	; 0x28
 8004e20:	89a3      	ldrh	r3, [r4, #12]
 8004e22:	6020      	str	r0, [r4, #0]
 8004e24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e28:	81a3      	strh	r3, [r4, #12]
 8004e2a:	9b00      	ldr	r3, [sp, #0]
 8004e2c:	6163      	str	r3, [r4, #20]
 8004e2e:	9b01      	ldr	r3, [sp, #4]
 8004e30:	6120      	str	r0, [r4, #16]
 8004e32:	b15b      	cbz	r3, 8004e4c <__smakebuf_r+0x74>
 8004e34:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004e38:	4630      	mov	r0, r6
 8004e3a:	f000 fc63 	bl	8005704 <_isatty_r>
 8004e3e:	b128      	cbz	r0, 8004e4c <__smakebuf_r+0x74>
 8004e40:	89a3      	ldrh	r3, [r4, #12]
 8004e42:	f023 0303 	bic.w	r3, r3, #3
 8004e46:	f043 0301 	orr.w	r3, r3, #1
 8004e4a:	81a3      	strh	r3, [r4, #12]
 8004e4c:	89a0      	ldrh	r0, [r4, #12]
 8004e4e:	4305      	orrs	r5, r0
 8004e50:	81a5      	strh	r5, [r4, #12]
 8004e52:	e7cd      	b.n	8004df0 <__smakebuf_r+0x18>
 8004e54:	08004be5 	.word	0x08004be5

08004e58 <_free_r>:
 8004e58:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004e5a:	2900      	cmp	r1, #0
 8004e5c:	d044      	beq.n	8004ee8 <_free_r+0x90>
 8004e5e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004e62:	9001      	str	r0, [sp, #4]
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	f1a1 0404 	sub.w	r4, r1, #4
 8004e6a:	bfb8      	it	lt
 8004e6c:	18e4      	addlt	r4, r4, r3
 8004e6e:	f000 fc6b 	bl	8005748 <__malloc_lock>
 8004e72:	4a1e      	ldr	r2, [pc, #120]	; (8004eec <_free_r+0x94>)
 8004e74:	9801      	ldr	r0, [sp, #4]
 8004e76:	6813      	ldr	r3, [r2, #0]
 8004e78:	b933      	cbnz	r3, 8004e88 <_free_r+0x30>
 8004e7a:	6063      	str	r3, [r4, #4]
 8004e7c:	6014      	str	r4, [r2, #0]
 8004e7e:	b003      	add	sp, #12
 8004e80:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004e84:	f000 bc66 	b.w	8005754 <__malloc_unlock>
 8004e88:	42a3      	cmp	r3, r4
 8004e8a:	d908      	bls.n	8004e9e <_free_r+0x46>
 8004e8c:	6825      	ldr	r5, [r4, #0]
 8004e8e:	1961      	adds	r1, r4, r5
 8004e90:	428b      	cmp	r3, r1
 8004e92:	bf01      	itttt	eq
 8004e94:	6819      	ldreq	r1, [r3, #0]
 8004e96:	685b      	ldreq	r3, [r3, #4]
 8004e98:	1949      	addeq	r1, r1, r5
 8004e9a:	6021      	streq	r1, [r4, #0]
 8004e9c:	e7ed      	b.n	8004e7a <_free_r+0x22>
 8004e9e:	461a      	mov	r2, r3
 8004ea0:	685b      	ldr	r3, [r3, #4]
 8004ea2:	b10b      	cbz	r3, 8004ea8 <_free_r+0x50>
 8004ea4:	42a3      	cmp	r3, r4
 8004ea6:	d9fa      	bls.n	8004e9e <_free_r+0x46>
 8004ea8:	6811      	ldr	r1, [r2, #0]
 8004eaa:	1855      	adds	r5, r2, r1
 8004eac:	42a5      	cmp	r5, r4
 8004eae:	d10b      	bne.n	8004ec8 <_free_r+0x70>
 8004eb0:	6824      	ldr	r4, [r4, #0]
 8004eb2:	4421      	add	r1, r4
 8004eb4:	1854      	adds	r4, r2, r1
 8004eb6:	42a3      	cmp	r3, r4
 8004eb8:	6011      	str	r1, [r2, #0]
 8004eba:	d1e0      	bne.n	8004e7e <_free_r+0x26>
 8004ebc:	681c      	ldr	r4, [r3, #0]
 8004ebe:	685b      	ldr	r3, [r3, #4]
 8004ec0:	6053      	str	r3, [r2, #4]
 8004ec2:	4421      	add	r1, r4
 8004ec4:	6011      	str	r1, [r2, #0]
 8004ec6:	e7da      	b.n	8004e7e <_free_r+0x26>
 8004ec8:	d902      	bls.n	8004ed0 <_free_r+0x78>
 8004eca:	230c      	movs	r3, #12
 8004ecc:	6003      	str	r3, [r0, #0]
 8004ece:	e7d6      	b.n	8004e7e <_free_r+0x26>
 8004ed0:	6825      	ldr	r5, [r4, #0]
 8004ed2:	1961      	adds	r1, r4, r5
 8004ed4:	428b      	cmp	r3, r1
 8004ed6:	bf04      	itt	eq
 8004ed8:	6819      	ldreq	r1, [r3, #0]
 8004eda:	685b      	ldreq	r3, [r3, #4]
 8004edc:	6063      	str	r3, [r4, #4]
 8004ede:	bf04      	itt	eq
 8004ee0:	1949      	addeq	r1, r1, r5
 8004ee2:	6021      	streq	r1, [r4, #0]
 8004ee4:	6054      	str	r4, [r2, #4]
 8004ee6:	e7ca      	b.n	8004e7e <_free_r+0x26>
 8004ee8:	b003      	add	sp, #12
 8004eea:	bd30      	pop	{r4, r5, pc}
 8004eec:	20000a0c 	.word	0x20000a0c

08004ef0 <sbrk_aligned>:
 8004ef0:	b570      	push	{r4, r5, r6, lr}
 8004ef2:	4e0e      	ldr	r6, [pc, #56]	; (8004f2c <sbrk_aligned+0x3c>)
 8004ef4:	460c      	mov	r4, r1
 8004ef6:	6831      	ldr	r1, [r6, #0]
 8004ef8:	4605      	mov	r5, r0
 8004efa:	b911      	cbnz	r1, 8004f02 <sbrk_aligned+0x12>
 8004efc:	f000 fb7a 	bl	80055f4 <_sbrk_r>
 8004f00:	6030      	str	r0, [r6, #0]
 8004f02:	4621      	mov	r1, r4
 8004f04:	4628      	mov	r0, r5
 8004f06:	f000 fb75 	bl	80055f4 <_sbrk_r>
 8004f0a:	1c43      	adds	r3, r0, #1
 8004f0c:	d00a      	beq.n	8004f24 <sbrk_aligned+0x34>
 8004f0e:	1cc4      	adds	r4, r0, #3
 8004f10:	f024 0403 	bic.w	r4, r4, #3
 8004f14:	42a0      	cmp	r0, r4
 8004f16:	d007      	beq.n	8004f28 <sbrk_aligned+0x38>
 8004f18:	1a21      	subs	r1, r4, r0
 8004f1a:	4628      	mov	r0, r5
 8004f1c:	f000 fb6a 	bl	80055f4 <_sbrk_r>
 8004f20:	3001      	adds	r0, #1
 8004f22:	d101      	bne.n	8004f28 <sbrk_aligned+0x38>
 8004f24:	f04f 34ff 	mov.w	r4, #4294967295
 8004f28:	4620      	mov	r0, r4
 8004f2a:	bd70      	pop	{r4, r5, r6, pc}
 8004f2c:	20000a10 	.word	0x20000a10

08004f30 <_malloc_r>:
 8004f30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004f34:	1ccd      	adds	r5, r1, #3
 8004f36:	f025 0503 	bic.w	r5, r5, #3
 8004f3a:	3508      	adds	r5, #8
 8004f3c:	2d0c      	cmp	r5, #12
 8004f3e:	bf38      	it	cc
 8004f40:	250c      	movcc	r5, #12
 8004f42:	2d00      	cmp	r5, #0
 8004f44:	4607      	mov	r7, r0
 8004f46:	db01      	blt.n	8004f4c <_malloc_r+0x1c>
 8004f48:	42a9      	cmp	r1, r5
 8004f4a:	d905      	bls.n	8004f58 <_malloc_r+0x28>
 8004f4c:	230c      	movs	r3, #12
 8004f4e:	603b      	str	r3, [r7, #0]
 8004f50:	2600      	movs	r6, #0
 8004f52:	4630      	mov	r0, r6
 8004f54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004f58:	4e2e      	ldr	r6, [pc, #184]	; (8005014 <_malloc_r+0xe4>)
 8004f5a:	f000 fbf5 	bl	8005748 <__malloc_lock>
 8004f5e:	6833      	ldr	r3, [r6, #0]
 8004f60:	461c      	mov	r4, r3
 8004f62:	bb34      	cbnz	r4, 8004fb2 <_malloc_r+0x82>
 8004f64:	4629      	mov	r1, r5
 8004f66:	4638      	mov	r0, r7
 8004f68:	f7ff ffc2 	bl	8004ef0 <sbrk_aligned>
 8004f6c:	1c43      	adds	r3, r0, #1
 8004f6e:	4604      	mov	r4, r0
 8004f70:	d14d      	bne.n	800500e <_malloc_r+0xde>
 8004f72:	6834      	ldr	r4, [r6, #0]
 8004f74:	4626      	mov	r6, r4
 8004f76:	2e00      	cmp	r6, #0
 8004f78:	d140      	bne.n	8004ffc <_malloc_r+0xcc>
 8004f7a:	6823      	ldr	r3, [r4, #0]
 8004f7c:	4631      	mov	r1, r6
 8004f7e:	4638      	mov	r0, r7
 8004f80:	eb04 0803 	add.w	r8, r4, r3
 8004f84:	f000 fb36 	bl	80055f4 <_sbrk_r>
 8004f88:	4580      	cmp	r8, r0
 8004f8a:	d13a      	bne.n	8005002 <_malloc_r+0xd2>
 8004f8c:	6821      	ldr	r1, [r4, #0]
 8004f8e:	3503      	adds	r5, #3
 8004f90:	1a6d      	subs	r5, r5, r1
 8004f92:	f025 0503 	bic.w	r5, r5, #3
 8004f96:	3508      	adds	r5, #8
 8004f98:	2d0c      	cmp	r5, #12
 8004f9a:	bf38      	it	cc
 8004f9c:	250c      	movcc	r5, #12
 8004f9e:	4629      	mov	r1, r5
 8004fa0:	4638      	mov	r0, r7
 8004fa2:	f7ff ffa5 	bl	8004ef0 <sbrk_aligned>
 8004fa6:	3001      	adds	r0, #1
 8004fa8:	d02b      	beq.n	8005002 <_malloc_r+0xd2>
 8004faa:	6823      	ldr	r3, [r4, #0]
 8004fac:	442b      	add	r3, r5
 8004fae:	6023      	str	r3, [r4, #0]
 8004fb0:	e00e      	b.n	8004fd0 <_malloc_r+0xa0>
 8004fb2:	6822      	ldr	r2, [r4, #0]
 8004fb4:	1b52      	subs	r2, r2, r5
 8004fb6:	d41e      	bmi.n	8004ff6 <_malloc_r+0xc6>
 8004fb8:	2a0b      	cmp	r2, #11
 8004fba:	d916      	bls.n	8004fea <_malloc_r+0xba>
 8004fbc:	1961      	adds	r1, r4, r5
 8004fbe:	42a3      	cmp	r3, r4
 8004fc0:	6025      	str	r5, [r4, #0]
 8004fc2:	bf18      	it	ne
 8004fc4:	6059      	strne	r1, [r3, #4]
 8004fc6:	6863      	ldr	r3, [r4, #4]
 8004fc8:	bf08      	it	eq
 8004fca:	6031      	streq	r1, [r6, #0]
 8004fcc:	5162      	str	r2, [r4, r5]
 8004fce:	604b      	str	r3, [r1, #4]
 8004fd0:	4638      	mov	r0, r7
 8004fd2:	f104 060b 	add.w	r6, r4, #11
 8004fd6:	f000 fbbd 	bl	8005754 <__malloc_unlock>
 8004fda:	f026 0607 	bic.w	r6, r6, #7
 8004fde:	1d23      	adds	r3, r4, #4
 8004fe0:	1af2      	subs	r2, r6, r3
 8004fe2:	d0b6      	beq.n	8004f52 <_malloc_r+0x22>
 8004fe4:	1b9b      	subs	r3, r3, r6
 8004fe6:	50a3      	str	r3, [r4, r2]
 8004fe8:	e7b3      	b.n	8004f52 <_malloc_r+0x22>
 8004fea:	6862      	ldr	r2, [r4, #4]
 8004fec:	42a3      	cmp	r3, r4
 8004fee:	bf0c      	ite	eq
 8004ff0:	6032      	streq	r2, [r6, #0]
 8004ff2:	605a      	strne	r2, [r3, #4]
 8004ff4:	e7ec      	b.n	8004fd0 <_malloc_r+0xa0>
 8004ff6:	4623      	mov	r3, r4
 8004ff8:	6864      	ldr	r4, [r4, #4]
 8004ffa:	e7b2      	b.n	8004f62 <_malloc_r+0x32>
 8004ffc:	4634      	mov	r4, r6
 8004ffe:	6876      	ldr	r6, [r6, #4]
 8005000:	e7b9      	b.n	8004f76 <_malloc_r+0x46>
 8005002:	230c      	movs	r3, #12
 8005004:	603b      	str	r3, [r7, #0]
 8005006:	4638      	mov	r0, r7
 8005008:	f000 fba4 	bl	8005754 <__malloc_unlock>
 800500c:	e7a1      	b.n	8004f52 <_malloc_r+0x22>
 800500e:	6025      	str	r5, [r4, #0]
 8005010:	e7de      	b.n	8004fd0 <_malloc_r+0xa0>
 8005012:	bf00      	nop
 8005014:	20000a0c 	.word	0x20000a0c

08005018 <__sfputc_r>:
 8005018:	6893      	ldr	r3, [r2, #8]
 800501a:	3b01      	subs	r3, #1
 800501c:	2b00      	cmp	r3, #0
 800501e:	b410      	push	{r4}
 8005020:	6093      	str	r3, [r2, #8]
 8005022:	da08      	bge.n	8005036 <__sfputc_r+0x1e>
 8005024:	6994      	ldr	r4, [r2, #24]
 8005026:	42a3      	cmp	r3, r4
 8005028:	db01      	blt.n	800502e <__sfputc_r+0x16>
 800502a:	290a      	cmp	r1, #10
 800502c:	d103      	bne.n	8005036 <__sfputc_r+0x1e>
 800502e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005032:	f7ff bc31 	b.w	8004898 <__swbuf_r>
 8005036:	6813      	ldr	r3, [r2, #0]
 8005038:	1c58      	adds	r0, r3, #1
 800503a:	6010      	str	r0, [r2, #0]
 800503c:	7019      	strb	r1, [r3, #0]
 800503e:	4608      	mov	r0, r1
 8005040:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005044:	4770      	bx	lr

08005046 <__sfputs_r>:
 8005046:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005048:	4606      	mov	r6, r0
 800504a:	460f      	mov	r7, r1
 800504c:	4614      	mov	r4, r2
 800504e:	18d5      	adds	r5, r2, r3
 8005050:	42ac      	cmp	r4, r5
 8005052:	d101      	bne.n	8005058 <__sfputs_r+0x12>
 8005054:	2000      	movs	r0, #0
 8005056:	e007      	b.n	8005068 <__sfputs_r+0x22>
 8005058:	f814 1b01 	ldrb.w	r1, [r4], #1
 800505c:	463a      	mov	r2, r7
 800505e:	4630      	mov	r0, r6
 8005060:	f7ff ffda 	bl	8005018 <__sfputc_r>
 8005064:	1c43      	adds	r3, r0, #1
 8005066:	d1f3      	bne.n	8005050 <__sfputs_r+0xa>
 8005068:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800506c <_vfiprintf_r>:
 800506c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005070:	460d      	mov	r5, r1
 8005072:	b09d      	sub	sp, #116	; 0x74
 8005074:	4614      	mov	r4, r2
 8005076:	4698      	mov	r8, r3
 8005078:	4606      	mov	r6, r0
 800507a:	b118      	cbz	r0, 8005084 <_vfiprintf_r+0x18>
 800507c:	6983      	ldr	r3, [r0, #24]
 800507e:	b90b      	cbnz	r3, 8005084 <_vfiprintf_r+0x18>
 8005080:	f7ff fde4 	bl	8004c4c <__sinit>
 8005084:	4b89      	ldr	r3, [pc, #548]	; (80052ac <_vfiprintf_r+0x240>)
 8005086:	429d      	cmp	r5, r3
 8005088:	d11b      	bne.n	80050c2 <_vfiprintf_r+0x56>
 800508a:	6875      	ldr	r5, [r6, #4]
 800508c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800508e:	07d9      	lsls	r1, r3, #31
 8005090:	d405      	bmi.n	800509e <_vfiprintf_r+0x32>
 8005092:	89ab      	ldrh	r3, [r5, #12]
 8005094:	059a      	lsls	r2, r3, #22
 8005096:	d402      	bmi.n	800509e <_vfiprintf_r+0x32>
 8005098:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800509a:	f7ff fe75 	bl	8004d88 <__retarget_lock_acquire_recursive>
 800509e:	89ab      	ldrh	r3, [r5, #12]
 80050a0:	071b      	lsls	r3, r3, #28
 80050a2:	d501      	bpl.n	80050a8 <_vfiprintf_r+0x3c>
 80050a4:	692b      	ldr	r3, [r5, #16]
 80050a6:	b9eb      	cbnz	r3, 80050e4 <_vfiprintf_r+0x78>
 80050a8:	4629      	mov	r1, r5
 80050aa:	4630      	mov	r0, r6
 80050ac:	f7ff fc46 	bl	800493c <__swsetup_r>
 80050b0:	b1c0      	cbz	r0, 80050e4 <_vfiprintf_r+0x78>
 80050b2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80050b4:	07dc      	lsls	r4, r3, #31
 80050b6:	d50e      	bpl.n	80050d6 <_vfiprintf_r+0x6a>
 80050b8:	f04f 30ff 	mov.w	r0, #4294967295
 80050bc:	b01d      	add	sp, #116	; 0x74
 80050be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80050c2:	4b7b      	ldr	r3, [pc, #492]	; (80052b0 <_vfiprintf_r+0x244>)
 80050c4:	429d      	cmp	r5, r3
 80050c6:	d101      	bne.n	80050cc <_vfiprintf_r+0x60>
 80050c8:	68b5      	ldr	r5, [r6, #8]
 80050ca:	e7df      	b.n	800508c <_vfiprintf_r+0x20>
 80050cc:	4b79      	ldr	r3, [pc, #484]	; (80052b4 <_vfiprintf_r+0x248>)
 80050ce:	429d      	cmp	r5, r3
 80050d0:	bf08      	it	eq
 80050d2:	68f5      	ldreq	r5, [r6, #12]
 80050d4:	e7da      	b.n	800508c <_vfiprintf_r+0x20>
 80050d6:	89ab      	ldrh	r3, [r5, #12]
 80050d8:	0598      	lsls	r0, r3, #22
 80050da:	d4ed      	bmi.n	80050b8 <_vfiprintf_r+0x4c>
 80050dc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80050de:	f7ff fe54 	bl	8004d8a <__retarget_lock_release_recursive>
 80050e2:	e7e9      	b.n	80050b8 <_vfiprintf_r+0x4c>
 80050e4:	2300      	movs	r3, #0
 80050e6:	9309      	str	r3, [sp, #36]	; 0x24
 80050e8:	2320      	movs	r3, #32
 80050ea:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80050ee:	f8cd 800c 	str.w	r8, [sp, #12]
 80050f2:	2330      	movs	r3, #48	; 0x30
 80050f4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80052b8 <_vfiprintf_r+0x24c>
 80050f8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80050fc:	f04f 0901 	mov.w	r9, #1
 8005100:	4623      	mov	r3, r4
 8005102:	469a      	mov	sl, r3
 8005104:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005108:	b10a      	cbz	r2, 800510e <_vfiprintf_r+0xa2>
 800510a:	2a25      	cmp	r2, #37	; 0x25
 800510c:	d1f9      	bne.n	8005102 <_vfiprintf_r+0x96>
 800510e:	ebba 0b04 	subs.w	fp, sl, r4
 8005112:	d00b      	beq.n	800512c <_vfiprintf_r+0xc0>
 8005114:	465b      	mov	r3, fp
 8005116:	4622      	mov	r2, r4
 8005118:	4629      	mov	r1, r5
 800511a:	4630      	mov	r0, r6
 800511c:	f7ff ff93 	bl	8005046 <__sfputs_r>
 8005120:	3001      	adds	r0, #1
 8005122:	f000 80aa 	beq.w	800527a <_vfiprintf_r+0x20e>
 8005126:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005128:	445a      	add	r2, fp
 800512a:	9209      	str	r2, [sp, #36]	; 0x24
 800512c:	f89a 3000 	ldrb.w	r3, [sl]
 8005130:	2b00      	cmp	r3, #0
 8005132:	f000 80a2 	beq.w	800527a <_vfiprintf_r+0x20e>
 8005136:	2300      	movs	r3, #0
 8005138:	f04f 32ff 	mov.w	r2, #4294967295
 800513c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005140:	f10a 0a01 	add.w	sl, sl, #1
 8005144:	9304      	str	r3, [sp, #16]
 8005146:	9307      	str	r3, [sp, #28]
 8005148:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800514c:	931a      	str	r3, [sp, #104]	; 0x68
 800514e:	4654      	mov	r4, sl
 8005150:	2205      	movs	r2, #5
 8005152:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005156:	4858      	ldr	r0, [pc, #352]	; (80052b8 <_vfiprintf_r+0x24c>)
 8005158:	f7fb f83a 	bl	80001d0 <memchr>
 800515c:	9a04      	ldr	r2, [sp, #16]
 800515e:	b9d8      	cbnz	r0, 8005198 <_vfiprintf_r+0x12c>
 8005160:	06d1      	lsls	r1, r2, #27
 8005162:	bf44      	itt	mi
 8005164:	2320      	movmi	r3, #32
 8005166:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800516a:	0713      	lsls	r3, r2, #28
 800516c:	bf44      	itt	mi
 800516e:	232b      	movmi	r3, #43	; 0x2b
 8005170:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005174:	f89a 3000 	ldrb.w	r3, [sl]
 8005178:	2b2a      	cmp	r3, #42	; 0x2a
 800517a:	d015      	beq.n	80051a8 <_vfiprintf_r+0x13c>
 800517c:	9a07      	ldr	r2, [sp, #28]
 800517e:	4654      	mov	r4, sl
 8005180:	2000      	movs	r0, #0
 8005182:	f04f 0c0a 	mov.w	ip, #10
 8005186:	4621      	mov	r1, r4
 8005188:	f811 3b01 	ldrb.w	r3, [r1], #1
 800518c:	3b30      	subs	r3, #48	; 0x30
 800518e:	2b09      	cmp	r3, #9
 8005190:	d94e      	bls.n	8005230 <_vfiprintf_r+0x1c4>
 8005192:	b1b0      	cbz	r0, 80051c2 <_vfiprintf_r+0x156>
 8005194:	9207      	str	r2, [sp, #28]
 8005196:	e014      	b.n	80051c2 <_vfiprintf_r+0x156>
 8005198:	eba0 0308 	sub.w	r3, r0, r8
 800519c:	fa09 f303 	lsl.w	r3, r9, r3
 80051a0:	4313      	orrs	r3, r2
 80051a2:	9304      	str	r3, [sp, #16]
 80051a4:	46a2      	mov	sl, r4
 80051a6:	e7d2      	b.n	800514e <_vfiprintf_r+0xe2>
 80051a8:	9b03      	ldr	r3, [sp, #12]
 80051aa:	1d19      	adds	r1, r3, #4
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	9103      	str	r1, [sp, #12]
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	bfbb      	ittet	lt
 80051b4:	425b      	neglt	r3, r3
 80051b6:	f042 0202 	orrlt.w	r2, r2, #2
 80051ba:	9307      	strge	r3, [sp, #28]
 80051bc:	9307      	strlt	r3, [sp, #28]
 80051be:	bfb8      	it	lt
 80051c0:	9204      	strlt	r2, [sp, #16]
 80051c2:	7823      	ldrb	r3, [r4, #0]
 80051c4:	2b2e      	cmp	r3, #46	; 0x2e
 80051c6:	d10c      	bne.n	80051e2 <_vfiprintf_r+0x176>
 80051c8:	7863      	ldrb	r3, [r4, #1]
 80051ca:	2b2a      	cmp	r3, #42	; 0x2a
 80051cc:	d135      	bne.n	800523a <_vfiprintf_r+0x1ce>
 80051ce:	9b03      	ldr	r3, [sp, #12]
 80051d0:	1d1a      	adds	r2, r3, #4
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	9203      	str	r2, [sp, #12]
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	bfb8      	it	lt
 80051da:	f04f 33ff 	movlt.w	r3, #4294967295
 80051de:	3402      	adds	r4, #2
 80051e0:	9305      	str	r3, [sp, #20]
 80051e2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80052c8 <_vfiprintf_r+0x25c>
 80051e6:	7821      	ldrb	r1, [r4, #0]
 80051e8:	2203      	movs	r2, #3
 80051ea:	4650      	mov	r0, sl
 80051ec:	f7fa fff0 	bl	80001d0 <memchr>
 80051f0:	b140      	cbz	r0, 8005204 <_vfiprintf_r+0x198>
 80051f2:	2340      	movs	r3, #64	; 0x40
 80051f4:	eba0 000a 	sub.w	r0, r0, sl
 80051f8:	fa03 f000 	lsl.w	r0, r3, r0
 80051fc:	9b04      	ldr	r3, [sp, #16]
 80051fe:	4303      	orrs	r3, r0
 8005200:	3401      	adds	r4, #1
 8005202:	9304      	str	r3, [sp, #16]
 8005204:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005208:	482c      	ldr	r0, [pc, #176]	; (80052bc <_vfiprintf_r+0x250>)
 800520a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800520e:	2206      	movs	r2, #6
 8005210:	f7fa ffde 	bl	80001d0 <memchr>
 8005214:	2800      	cmp	r0, #0
 8005216:	d03f      	beq.n	8005298 <_vfiprintf_r+0x22c>
 8005218:	4b29      	ldr	r3, [pc, #164]	; (80052c0 <_vfiprintf_r+0x254>)
 800521a:	bb1b      	cbnz	r3, 8005264 <_vfiprintf_r+0x1f8>
 800521c:	9b03      	ldr	r3, [sp, #12]
 800521e:	3307      	adds	r3, #7
 8005220:	f023 0307 	bic.w	r3, r3, #7
 8005224:	3308      	adds	r3, #8
 8005226:	9303      	str	r3, [sp, #12]
 8005228:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800522a:	443b      	add	r3, r7
 800522c:	9309      	str	r3, [sp, #36]	; 0x24
 800522e:	e767      	b.n	8005100 <_vfiprintf_r+0x94>
 8005230:	fb0c 3202 	mla	r2, ip, r2, r3
 8005234:	460c      	mov	r4, r1
 8005236:	2001      	movs	r0, #1
 8005238:	e7a5      	b.n	8005186 <_vfiprintf_r+0x11a>
 800523a:	2300      	movs	r3, #0
 800523c:	3401      	adds	r4, #1
 800523e:	9305      	str	r3, [sp, #20]
 8005240:	4619      	mov	r1, r3
 8005242:	f04f 0c0a 	mov.w	ip, #10
 8005246:	4620      	mov	r0, r4
 8005248:	f810 2b01 	ldrb.w	r2, [r0], #1
 800524c:	3a30      	subs	r2, #48	; 0x30
 800524e:	2a09      	cmp	r2, #9
 8005250:	d903      	bls.n	800525a <_vfiprintf_r+0x1ee>
 8005252:	2b00      	cmp	r3, #0
 8005254:	d0c5      	beq.n	80051e2 <_vfiprintf_r+0x176>
 8005256:	9105      	str	r1, [sp, #20]
 8005258:	e7c3      	b.n	80051e2 <_vfiprintf_r+0x176>
 800525a:	fb0c 2101 	mla	r1, ip, r1, r2
 800525e:	4604      	mov	r4, r0
 8005260:	2301      	movs	r3, #1
 8005262:	e7f0      	b.n	8005246 <_vfiprintf_r+0x1da>
 8005264:	ab03      	add	r3, sp, #12
 8005266:	9300      	str	r3, [sp, #0]
 8005268:	462a      	mov	r2, r5
 800526a:	4b16      	ldr	r3, [pc, #88]	; (80052c4 <_vfiprintf_r+0x258>)
 800526c:	a904      	add	r1, sp, #16
 800526e:	4630      	mov	r0, r6
 8005270:	f3af 8000 	nop.w
 8005274:	4607      	mov	r7, r0
 8005276:	1c78      	adds	r0, r7, #1
 8005278:	d1d6      	bne.n	8005228 <_vfiprintf_r+0x1bc>
 800527a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800527c:	07d9      	lsls	r1, r3, #31
 800527e:	d405      	bmi.n	800528c <_vfiprintf_r+0x220>
 8005280:	89ab      	ldrh	r3, [r5, #12]
 8005282:	059a      	lsls	r2, r3, #22
 8005284:	d402      	bmi.n	800528c <_vfiprintf_r+0x220>
 8005286:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005288:	f7ff fd7f 	bl	8004d8a <__retarget_lock_release_recursive>
 800528c:	89ab      	ldrh	r3, [r5, #12]
 800528e:	065b      	lsls	r3, r3, #25
 8005290:	f53f af12 	bmi.w	80050b8 <_vfiprintf_r+0x4c>
 8005294:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005296:	e711      	b.n	80050bc <_vfiprintf_r+0x50>
 8005298:	ab03      	add	r3, sp, #12
 800529a:	9300      	str	r3, [sp, #0]
 800529c:	462a      	mov	r2, r5
 800529e:	4b09      	ldr	r3, [pc, #36]	; (80052c4 <_vfiprintf_r+0x258>)
 80052a0:	a904      	add	r1, sp, #16
 80052a2:	4630      	mov	r0, r6
 80052a4:	f000 f880 	bl	80053a8 <_printf_i>
 80052a8:	e7e4      	b.n	8005274 <_vfiprintf_r+0x208>
 80052aa:	bf00      	nop
 80052ac:	08005898 	.word	0x08005898
 80052b0:	080058b8 	.word	0x080058b8
 80052b4:	08005878 	.word	0x08005878
 80052b8:	080058d8 	.word	0x080058d8
 80052bc:	080058e2 	.word	0x080058e2
 80052c0:	00000000 	.word	0x00000000
 80052c4:	08005047 	.word	0x08005047
 80052c8:	080058de 	.word	0x080058de

080052cc <_printf_common>:
 80052cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80052d0:	4616      	mov	r6, r2
 80052d2:	4699      	mov	r9, r3
 80052d4:	688a      	ldr	r2, [r1, #8]
 80052d6:	690b      	ldr	r3, [r1, #16]
 80052d8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80052dc:	4293      	cmp	r3, r2
 80052de:	bfb8      	it	lt
 80052e0:	4613      	movlt	r3, r2
 80052e2:	6033      	str	r3, [r6, #0]
 80052e4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80052e8:	4607      	mov	r7, r0
 80052ea:	460c      	mov	r4, r1
 80052ec:	b10a      	cbz	r2, 80052f2 <_printf_common+0x26>
 80052ee:	3301      	adds	r3, #1
 80052f0:	6033      	str	r3, [r6, #0]
 80052f2:	6823      	ldr	r3, [r4, #0]
 80052f4:	0699      	lsls	r1, r3, #26
 80052f6:	bf42      	ittt	mi
 80052f8:	6833      	ldrmi	r3, [r6, #0]
 80052fa:	3302      	addmi	r3, #2
 80052fc:	6033      	strmi	r3, [r6, #0]
 80052fe:	6825      	ldr	r5, [r4, #0]
 8005300:	f015 0506 	ands.w	r5, r5, #6
 8005304:	d106      	bne.n	8005314 <_printf_common+0x48>
 8005306:	f104 0a19 	add.w	sl, r4, #25
 800530a:	68e3      	ldr	r3, [r4, #12]
 800530c:	6832      	ldr	r2, [r6, #0]
 800530e:	1a9b      	subs	r3, r3, r2
 8005310:	42ab      	cmp	r3, r5
 8005312:	dc26      	bgt.n	8005362 <_printf_common+0x96>
 8005314:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005318:	1e13      	subs	r3, r2, #0
 800531a:	6822      	ldr	r2, [r4, #0]
 800531c:	bf18      	it	ne
 800531e:	2301      	movne	r3, #1
 8005320:	0692      	lsls	r2, r2, #26
 8005322:	d42b      	bmi.n	800537c <_printf_common+0xb0>
 8005324:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005328:	4649      	mov	r1, r9
 800532a:	4638      	mov	r0, r7
 800532c:	47c0      	blx	r8
 800532e:	3001      	adds	r0, #1
 8005330:	d01e      	beq.n	8005370 <_printf_common+0xa4>
 8005332:	6823      	ldr	r3, [r4, #0]
 8005334:	68e5      	ldr	r5, [r4, #12]
 8005336:	6832      	ldr	r2, [r6, #0]
 8005338:	f003 0306 	and.w	r3, r3, #6
 800533c:	2b04      	cmp	r3, #4
 800533e:	bf08      	it	eq
 8005340:	1aad      	subeq	r5, r5, r2
 8005342:	68a3      	ldr	r3, [r4, #8]
 8005344:	6922      	ldr	r2, [r4, #16]
 8005346:	bf0c      	ite	eq
 8005348:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800534c:	2500      	movne	r5, #0
 800534e:	4293      	cmp	r3, r2
 8005350:	bfc4      	itt	gt
 8005352:	1a9b      	subgt	r3, r3, r2
 8005354:	18ed      	addgt	r5, r5, r3
 8005356:	2600      	movs	r6, #0
 8005358:	341a      	adds	r4, #26
 800535a:	42b5      	cmp	r5, r6
 800535c:	d11a      	bne.n	8005394 <_printf_common+0xc8>
 800535e:	2000      	movs	r0, #0
 8005360:	e008      	b.n	8005374 <_printf_common+0xa8>
 8005362:	2301      	movs	r3, #1
 8005364:	4652      	mov	r2, sl
 8005366:	4649      	mov	r1, r9
 8005368:	4638      	mov	r0, r7
 800536a:	47c0      	blx	r8
 800536c:	3001      	adds	r0, #1
 800536e:	d103      	bne.n	8005378 <_printf_common+0xac>
 8005370:	f04f 30ff 	mov.w	r0, #4294967295
 8005374:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005378:	3501      	adds	r5, #1
 800537a:	e7c6      	b.n	800530a <_printf_common+0x3e>
 800537c:	18e1      	adds	r1, r4, r3
 800537e:	1c5a      	adds	r2, r3, #1
 8005380:	2030      	movs	r0, #48	; 0x30
 8005382:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005386:	4422      	add	r2, r4
 8005388:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800538c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005390:	3302      	adds	r3, #2
 8005392:	e7c7      	b.n	8005324 <_printf_common+0x58>
 8005394:	2301      	movs	r3, #1
 8005396:	4622      	mov	r2, r4
 8005398:	4649      	mov	r1, r9
 800539a:	4638      	mov	r0, r7
 800539c:	47c0      	blx	r8
 800539e:	3001      	adds	r0, #1
 80053a0:	d0e6      	beq.n	8005370 <_printf_common+0xa4>
 80053a2:	3601      	adds	r6, #1
 80053a4:	e7d9      	b.n	800535a <_printf_common+0x8e>
	...

080053a8 <_printf_i>:
 80053a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80053ac:	7e0f      	ldrb	r7, [r1, #24]
 80053ae:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80053b0:	2f78      	cmp	r7, #120	; 0x78
 80053b2:	4691      	mov	r9, r2
 80053b4:	4680      	mov	r8, r0
 80053b6:	460c      	mov	r4, r1
 80053b8:	469a      	mov	sl, r3
 80053ba:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80053be:	d807      	bhi.n	80053d0 <_printf_i+0x28>
 80053c0:	2f62      	cmp	r7, #98	; 0x62
 80053c2:	d80a      	bhi.n	80053da <_printf_i+0x32>
 80053c4:	2f00      	cmp	r7, #0
 80053c6:	f000 80d8 	beq.w	800557a <_printf_i+0x1d2>
 80053ca:	2f58      	cmp	r7, #88	; 0x58
 80053cc:	f000 80a3 	beq.w	8005516 <_printf_i+0x16e>
 80053d0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80053d4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80053d8:	e03a      	b.n	8005450 <_printf_i+0xa8>
 80053da:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80053de:	2b15      	cmp	r3, #21
 80053e0:	d8f6      	bhi.n	80053d0 <_printf_i+0x28>
 80053e2:	a101      	add	r1, pc, #4	; (adr r1, 80053e8 <_printf_i+0x40>)
 80053e4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80053e8:	08005441 	.word	0x08005441
 80053ec:	08005455 	.word	0x08005455
 80053f0:	080053d1 	.word	0x080053d1
 80053f4:	080053d1 	.word	0x080053d1
 80053f8:	080053d1 	.word	0x080053d1
 80053fc:	080053d1 	.word	0x080053d1
 8005400:	08005455 	.word	0x08005455
 8005404:	080053d1 	.word	0x080053d1
 8005408:	080053d1 	.word	0x080053d1
 800540c:	080053d1 	.word	0x080053d1
 8005410:	080053d1 	.word	0x080053d1
 8005414:	08005561 	.word	0x08005561
 8005418:	08005485 	.word	0x08005485
 800541c:	08005543 	.word	0x08005543
 8005420:	080053d1 	.word	0x080053d1
 8005424:	080053d1 	.word	0x080053d1
 8005428:	08005583 	.word	0x08005583
 800542c:	080053d1 	.word	0x080053d1
 8005430:	08005485 	.word	0x08005485
 8005434:	080053d1 	.word	0x080053d1
 8005438:	080053d1 	.word	0x080053d1
 800543c:	0800554b 	.word	0x0800554b
 8005440:	682b      	ldr	r3, [r5, #0]
 8005442:	1d1a      	adds	r2, r3, #4
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	602a      	str	r2, [r5, #0]
 8005448:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800544c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005450:	2301      	movs	r3, #1
 8005452:	e0a3      	b.n	800559c <_printf_i+0x1f4>
 8005454:	6820      	ldr	r0, [r4, #0]
 8005456:	6829      	ldr	r1, [r5, #0]
 8005458:	0606      	lsls	r6, r0, #24
 800545a:	f101 0304 	add.w	r3, r1, #4
 800545e:	d50a      	bpl.n	8005476 <_printf_i+0xce>
 8005460:	680e      	ldr	r6, [r1, #0]
 8005462:	602b      	str	r3, [r5, #0]
 8005464:	2e00      	cmp	r6, #0
 8005466:	da03      	bge.n	8005470 <_printf_i+0xc8>
 8005468:	232d      	movs	r3, #45	; 0x2d
 800546a:	4276      	negs	r6, r6
 800546c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005470:	485e      	ldr	r0, [pc, #376]	; (80055ec <_printf_i+0x244>)
 8005472:	230a      	movs	r3, #10
 8005474:	e019      	b.n	80054aa <_printf_i+0x102>
 8005476:	680e      	ldr	r6, [r1, #0]
 8005478:	602b      	str	r3, [r5, #0]
 800547a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800547e:	bf18      	it	ne
 8005480:	b236      	sxthne	r6, r6
 8005482:	e7ef      	b.n	8005464 <_printf_i+0xbc>
 8005484:	682b      	ldr	r3, [r5, #0]
 8005486:	6820      	ldr	r0, [r4, #0]
 8005488:	1d19      	adds	r1, r3, #4
 800548a:	6029      	str	r1, [r5, #0]
 800548c:	0601      	lsls	r1, r0, #24
 800548e:	d501      	bpl.n	8005494 <_printf_i+0xec>
 8005490:	681e      	ldr	r6, [r3, #0]
 8005492:	e002      	b.n	800549a <_printf_i+0xf2>
 8005494:	0646      	lsls	r6, r0, #25
 8005496:	d5fb      	bpl.n	8005490 <_printf_i+0xe8>
 8005498:	881e      	ldrh	r6, [r3, #0]
 800549a:	4854      	ldr	r0, [pc, #336]	; (80055ec <_printf_i+0x244>)
 800549c:	2f6f      	cmp	r7, #111	; 0x6f
 800549e:	bf0c      	ite	eq
 80054a0:	2308      	moveq	r3, #8
 80054a2:	230a      	movne	r3, #10
 80054a4:	2100      	movs	r1, #0
 80054a6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80054aa:	6865      	ldr	r5, [r4, #4]
 80054ac:	60a5      	str	r5, [r4, #8]
 80054ae:	2d00      	cmp	r5, #0
 80054b0:	bfa2      	ittt	ge
 80054b2:	6821      	ldrge	r1, [r4, #0]
 80054b4:	f021 0104 	bicge.w	r1, r1, #4
 80054b8:	6021      	strge	r1, [r4, #0]
 80054ba:	b90e      	cbnz	r6, 80054c0 <_printf_i+0x118>
 80054bc:	2d00      	cmp	r5, #0
 80054be:	d04d      	beq.n	800555c <_printf_i+0x1b4>
 80054c0:	4615      	mov	r5, r2
 80054c2:	fbb6 f1f3 	udiv	r1, r6, r3
 80054c6:	fb03 6711 	mls	r7, r3, r1, r6
 80054ca:	5dc7      	ldrb	r7, [r0, r7]
 80054cc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80054d0:	4637      	mov	r7, r6
 80054d2:	42bb      	cmp	r3, r7
 80054d4:	460e      	mov	r6, r1
 80054d6:	d9f4      	bls.n	80054c2 <_printf_i+0x11a>
 80054d8:	2b08      	cmp	r3, #8
 80054da:	d10b      	bne.n	80054f4 <_printf_i+0x14c>
 80054dc:	6823      	ldr	r3, [r4, #0]
 80054de:	07de      	lsls	r6, r3, #31
 80054e0:	d508      	bpl.n	80054f4 <_printf_i+0x14c>
 80054e2:	6923      	ldr	r3, [r4, #16]
 80054e4:	6861      	ldr	r1, [r4, #4]
 80054e6:	4299      	cmp	r1, r3
 80054e8:	bfde      	ittt	le
 80054ea:	2330      	movle	r3, #48	; 0x30
 80054ec:	f805 3c01 	strble.w	r3, [r5, #-1]
 80054f0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80054f4:	1b52      	subs	r2, r2, r5
 80054f6:	6122      	str	r2, [r4, #16]
 80054f8:	f8cd a000 	str.w	sl, [sp]
 80054fc:	464b      	mov	r3, r9
 80054fe:	aa03      	add	r2, sp, #12
 8005500:	4621      	mov	r1, r4
 8005502:	4640      	mov	r0, r8
 8005504:	f7ff fee2 	bl	80052cc <_printf_common>
 8005508:	3001      	adds	r0, #1
 800550a:	d14c      	bne.n	80055a6 <_printf_i+0x1fe>
 800550c:	f04f 30ff 	mov.w	r0, #4294967295
 8005510:	b004      	add	sp, #16
 8005512:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005516:	4835      	ldr	r0, [pc, #212]	; (80055ec <_printf_i+0x244>)
 8005518:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800551c:	6829      	ldr	r1, [r5, #0]
 800551e:	6823      	ldr	r3, [r4, #0]
 8005520:	f851 6b04 	ldr.w	r6, [r1], #4
 8005524:	6029      	str	r1, [r5, #0]
 8005526:	061d      	lsls	r5, r3, #24
 8005528:	d514      	bpl.n	8005554 <_printf_i+0x1ac>
 800552a:	07df      	lsls	r7, r3, #31
 800552c:	bf44      	itt	mi
 800552e:	f043 0320 	orrmi.w	r3, r3, #32
 8005532:	6023      	strmi	r3, [r4, #0]
 8005534:	b91e      	cbnz	r6, 800553e <_printf_i+0x196>
 8005536:	6823      	ldr	r3, [r4, #0]
 8005538:	f023 0320 	bic.w	r3, r3, #32
 800553c:	6023      	str	r3, [r4, #0]
 800553e:	2310      	movs	r3, #16
 8005540:	e7b0      	b.n	80054a4 <_printf_i+0xfc>
 8005542:	6823      	ldr	r3, [r4, #0]
 8005544:	f043 0320 	orr.w	r3, r3, #32
 8005548:	6023      	str	r3, [r4, #0]
 800554a:	2378      	movs	r3, #120	; 0x78
 800554c:	4828      	ldr	r0, [pc, #160]	; (80055f0 <_printf_i+0x248>)
 800554e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005552:	e7e3      	b.n	800551c <_printf_i+0x174>
 8005554:	0659      	lsls	r1, r3, #25
 8005556:	bf48      	it	mi
 8005558:	b2b6      	uxthmi	r6, r6
 800555a:	e7e6      	b.n	800552a <_printf_i+0x182>
 800555c:	4615      	mov	r5, r2
 800555e:	e7bb      	b.n	80054d8 <_printf_i+0x130>
 8005560:	682b      	ldr	r3, [r5, #0]
 8005562:	6826      	ldr	r6, [r4, #0]
 8005564:	6961      	ldr	r1, [r4, #20]
 8005566:	1d18      	adds	r0, r3, #4
 8005568:	6028      	str	r0, [r5, #0]
 800556a:	0635      	lsls	r5, r6, #24
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	d501      	bpl.n	8005574 <_printf_i+0x1cc>
 8005570:	6019      	str	r1, [r3, #0]
 8005572:	e002      	b.n	800557a <_printf_i+0x1d2>
 8005574:	0670      	lsls	r0, r6, #25
 8005576:	d5fb      	bpl.n	8005570 <_printf_i+0x1c8>
 8005578:	8019      	strh	r1, [r3, #0]
 800557a:	2300      	movs	r3, #0
 800557c:	6123      	str	r3, [r4, #16]
 800557e:	4615      	mov	r5, r2
 8005580:	e7ba      	b.n	80054f8 <_printf_i+0x150>
 8005582:	682b      	ldr	r3, [r5, #0]
 8005584:	1d1a      	adds	r2, r3, #4
 8005586:	602a      	str	r2, [r5, #0]
 8005588:	681d      	ldr	r5, [r3, #0]
 800558a:	6862      	ldr	r2, [r4, #4]
 800558c:	2100      	movs	r1, #0
 800558e:	4628      	mov	r0, r5
 8005590:	f7fa fe1e 	bl	80001d0 <memchr>
 8005594:	b108      	cbz	r0, 800559a <_printf_i+0x1f2>
 8005596:	1b40      	subs	r0, r0, r5
 8005598:	6060      	str	r0, [r4, #4]
 800559a:	6863      	ldr	r3, [r4, #4]
 800559c:	6123      	str	r3, [r4, #16]
 800559e:	2300      	movs	r3, #0
 80055a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80055a4:	e7a8      	b.n	80054f8 <_printf_i+0x150>
 80055a6:	6923      	ldr	r3, [r4, #16]
 80055a8:	462a      	mov	r2, r5
 80055aa:	4649      	mov	r1, r9
 80055ac:	4640      	mov	r0, r8
 80055ae:	47d0      	blx	sl
 80055b0:	3001      	adds	r0, #1
 80055b2:	d0ab      	beq.n	800550c <_printf_i+0x164>
 80055b4:	6823      	ldr	r3, [r4, #0]
 80055b6:	079b      	lsls	r3, r3, #30
 80055b8:	d413      	bmi.n	80055e2 <_printf_i+0x23a>
 80055ba:	68e0      	ldr	r0, [r4, #12]
 80055bc:	9b03      	ldr	r3, [sp, #12]
 80055be:	4298      	cmp	r0, r3
 80055c0:	bfb8      	it	lt
 80055c2:	4618      	movlt	r0, r3
 80055c4:	e7a4      	b.n	8005510 <_printf_i+0x168>
 80055c6:	2301      	movs	r3, #1
 80055c8:	4632      	mov	r2, r6
 80055ca:	4649      	mov	r1, r9
 80055cc:	4640      	mov	r0, r8
 80055ce:	47d0      	blx	sl
 80055d0:	3001      	adds	r0, #1
 80055d2:	d09b      	beq.n	800550c <_printf_i+0x164>
 80055d4:	3501      	adds	r5, #1
 80055d6:	68e3      	ldr	r3, [r4, #12]
 80055d8:	9903      	ldr	r1, [sp, #12]
 80055da:	1a5b      	subs	r3, r3, r1
 80055dc:	42ab      	cmp	r3, r5
 80055de:	dcf2      	bgt.n	80055c6 <_printf_i+0x21e>
 80055e0:	e7eb      	b.n	80055ba <_printf_i+0x212>
 80055e2:	2500      	movs	r5, #0
 80055e4:	f104 0619 	add.w	r6, r4, #25
 80055e8:	e7f5      	b.n	80055d6 <_printf_i+0x22e>
 80055ea:	bf00      	nop
 80055ec:	080058e9 	.word	0x080058e9
 80055f0:	080058fa 	.word	0x080058fa

080055f4 <_sbrk_r>:
 80055f4:	b538      	push	{r3, r4, r5, lr}
 80055f6:	4d06      	ldr	r5, [pc, #24]	; (8005610 <_sbrk_r+0x1c>)
 80055f8:	2300      	movs	r3, #0
 80055fa:	4604      	mov	r4, r0
 80055fc:	4608      	mov	r0, r1
 80055fe:	602b      	str	r3, [r5, #0]
 8005600:	f7fb fb8c 	bl	8000d1c <_sbrk>
 8005604:	1c43      	adds	r3, r0, #1
 8005606:	d102      	bne.n	800560e <_sbrk_r+0x1a>
 8005608:	682b      	ldr	r3, [r5, #0]
 800560a:	b103      	cbz	r3, 800560e <_sbrk_r+0x1a>
 800560c:	6023      	str	r3, [r4, #0]
 800560e:	bd38      	pop	{r3, r4, r5, pc}
 8005610:	20000a14 	.word	0x20000a14

08005614 <__sread>:
 8005614:	b510      	push	{r4, lr}
 8005616:	460c      	mov	r4, r1
 8005618:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800561c:	f000 f8a0 	bl	8005760 <_read_r>
 8005620:	2800      	cmp	r0, #0
 8005622:	bfab      	itete	ge
 8005624:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005626:	89a3      	ldrhlt	r3, [r4, #12]
 8005628:	181b      	addge	r3, r3, r0
 800562a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800562e:	bfac      	ite	ge
 8005630:	6563      	strge	r3, [r4, #84]	; 0x54
 8005632:	81a3      	strhlt	r3, [r4, #12]
 8005634:	bd10      	pop	{r4, pc}

08005636 <__swrite>:
 8005636:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800563a:	461f      	mov	r7, r3
 800563c:	898b      	ldrh	r3, [r1, #12]
 800563e:	05db      	lsls	r3, r3, #23
 8005640:	4605      	mov	r5, r0
 8005642:	460c      	mov	r4, r1
 8005644:	4616      	mov	r6, r2
 8005646:	d505      	bpl.n	8005654 <__swrite+0x1e>
 8005648:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800564c:	2302      	movs	r3, #2
 800564e:	2200      	movs	r2, #0
 8005650:	f000 f868 	bl	8005724 <_lseek_r>
 8005654:	89a3      	ldrh	r3, [r4, #12]
 8005656:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800565a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800565e:	81a3      	strh	r3, [r4, #12]
 8005660:	4632      	mov	r2, r6
 8005662:	463b      	mov	r3, r7
 8005664:	4628      	mov	r0, r5
 8005666:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800566a:	f000 b817 	b.w	800569c <_write_r>

0800566e <__sseek>:
 800566e:	b510      	push	{r4, lr}
 8005670:	460c      	mov	r4, r1
 8005672:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005676:	f000 f855 	bl	8005724 <_lseek_r>
 800567a:	1c43      	adds	r3, r0, #1
 800567c:	89a3      	ldrh	r3, [r4, #12]
 800567e:	bf15      	itete	ne
 8005680:	6560      	strne	r0, [r4, #84]	; 0x54
 8005682:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005686:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800568a:	81a3      	strheq	r3, [r4, #12]
 800568c:	bf18      	it	ne
 800568e:	81a3      	strhne	r3, [r4, #12]
 8005690:	bd10      	pop	{r4, pc}

08005692 <__sclose>:
 8005692:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005696:	f000 b813 	b.w	80056c0 <_close_r>
	...

0800569c <_write_r>:
 800569c:	b538      	push	{r3, r4, r5, lr}
 800569e:	4d07      	ldr	r5, [pc, #28]	; (80056bc <_write_r+0x20>)
 80056a0:	4604      	mov	r4, r0
 80056a2:	4608      	mov	r0, r1
 80056a4:	4611      	mov	r1, r2
 80056a6:	2200      	movs	r2, #0
 80056a8:	602a      	str	r2, [r5, #0]
 80056aa:	461a      	mov	r2, r3
 80056ac:	f7fa ffc2 	bl	8000634 <_write>
 80056b0:	1c43      	adds	r3, r0, #1
 80056b2:	d102      	bne.n	80056ba <_write_r+0x1e>
 80056b4:	682b      	ldr	r3, [r5, #0]
 80056b6:	b103      	cbz	r3, 80056ba <_write_r+0x1e>
 80056b8:	6023      	str	r3, [r4, #0]
 80056ba:	bd38      	pop	{r3, r4, r5, pc}
 80056bc:	20000a14 	.word	0x20000a14

080056c0 <_close_r>:
 80056c0:	b538      	push	{r3, r4, r5, lr}
 80056c2:	4d06      	ldr	r5, [pc, #24]	; (80056dc <_close_r+0x1c>)
 80056c4:	2300      	movs	r3, #0
 80056c6:	4604      	mov	r4, r0
 80056c8:	4608      	mov	r0, r1
 80056ca:	602b      	str	r3, [r5, #0]
 80056cc:	f7fb faf2 	bl	8000cb4 <_close>
 80056d0:	1c43      	adds	r3, r0, #1
 80056d2:	d102      	bne.n	80056da <_close_r+0x1a>
 80056d4:	682b      	ldr	r3, [r5, #0]
 80056d6:	b103      	cbz	r3, 80056da <_close_r+0x1a>
 80056d8:	6023      	str	r3, [r4, #0]
 80056da:	bd38      	pop	{r3, r4, r5, pc}
 80056dc:	20000a14 	.word	0x20000a14

080056e0 <_fstat_r>:
 80056e0:	b538      	push	{r3, r4, r5, lr}
 80056e2:	4d07      	ldr	r5, [pc, #28]	; (8005700 <_fstat_r+0x20>)
 80056e4:	2300      	movs	r3, #0
 80056e6:	4604      	mov	r4, r0
 80056e8:	4608      	mov	r0, r1
 80056ea:	4611      	mov	r1, r2
 80056ec:	602b      	str	r3, [r5, #0]
 80056ee:	f7fb faed 	bl	8000ccc <_fstat>
 80056f2:	1c43      	adds	r3, r0, #1
 80056f4:	d102      	bne.n	80056fc <_fstat_r+0x1c>
 80056f6:	682b      	ldr	r3, [r5, #0]
 80056f8:	b103      	cbz	r3, 80056fc <_fstat_r+0x1c>
 80056fa:	6023      	str	r3, [r4, #0]
 80056fc:	bd38      	pop	{r3, r4, r5, pc}
 80056fe:	bf00      	nop
 8005700:	20000a14 	.word	0x20000a14

08005704 <_isatty_r>:
 8005704:	b538      	push	{r3, r4, r5, lr}
 8005706:	4d06      	ldr	r5, [pc, #24]	; (8005720 <_isatty_r+0x1c>)
 8005708:	2300      	movs	r3, #0
 800570a:	4604      	mov	r4, r0
 800570c:	4608      	mov	r0, r1
 800570e:	602b      	str	r3, [r5, #0]
 8005710:	f7fb faec 	bl	8000cec <_isatty>
 8005714:	1c43      	adds	r3, r0, #1
 8005716:	d102      	bne.n	800571e <_isatty_r+0x1a>
 8005718:	682b      	ldr	r3, [r5, #0]
 800571a:	b103      	cbz	r3, 800571e <_isatty_r+0x1a>
 800571c:	6023      	str	r3, [r4, #0]
 800571e:	bd38      	pop	{r3, r4, r5, pc}
 8005720:	20000a14 	.word	0x20000a14

08005724 <_lseek_r>:
 8005724:	b538      	push	{r3, r4, r5, lr}
 8005726:	4d07      	ldr	r5, [pc, #28]	; (8005744 <_lseek_r+0x20>)
 8005728:	4604      	mov	r4, r0
 800572a:	4608      	mov	r0, r1
 800572c:	4611      	mov	r1, r2
 800572e:	2200      	movs	r2, #0
 8005730:	602a      	str	r2, [r5, #0]
 8005732:	461a      	mov	r2, r3
 8005734:	f7fb fae5 	bl	8000d02 <_lseek>
 8005738:	1c43      	adds	r3, r0, #1
 800573a:	d102      	bne.n	8005742 <_lseek_r+0x1e>
 800573c:	682b      	ldr	r3, [r5, #0]
 800573e:	b103      	cbz	r3, 8005742 <_lseek_r+0x1e>
 8005740:	6023      	str	r3, [r4, #0]
 8005742:	bd38      	pop	{r3, r4, r5, pc}
 8005744:	20000a14 	.word	0x20000a14

08005748 <__malloc_lock>:
 8005748:	4801      	ldr	r0, [pc, #4]	; (8005750 <__malloc_lock+0x8>)
 800574a:	f7ff bb1d 	b.w	8004d88 <__retarget_lock_acquire_recursive>
 800574e:	bf00      	nop
 8005750:	20000a08 	.word	0x20000a08

08005754 <__malloc_unlock>:
 8005754:	4801      	ldr	r0, [pc, #4]	; (800575c <__malloc_unlock+0x8>)
 8005756:	f7ff bb18 	b.w	8004d8a <__retarget_lock_release_recursive>
 800575a:	bf00      	nop
 800575c:	20000a08 	.word	0x20000a08

08005760 <_read_r>:
 8005760:	b538      	push	{r3, r4, r5, lr}
 8005762:	4d07      	ldr	r5, [pc, #28]	; (8005780 <_read_r+0x20>)
 8005764:	4604      	mov	r4, r0
 8005766:	4608      	mov	r0, r1
 8005768:	4611      	mov	r1, r2
 800576a:	2200      	movs	r2, #0
 800576c:	602a      	str	r2, [r5, #0]
 800576e:	461a      	mov	r2, r3
 8005770:	f7fb fa83 	bl	8000c7a <_read>
 8005774:	1c43      	adds	r3, r0, #1
 8005776:	d102      	bne.n	800577e <_read_r+0x1e>
 8005778:	682b      	ldr	r3, [r5, #0]
 800577a:	b103      	cbz	r3, 800577e <_read_r+0x1e>
 800577c:	6023      	str	r3, [r4, #0]
 800577e:	bd38      	pop	{r3, r4, r5, pc}
 8005780:	20000a14 	.word	0x20000a14

08005784 <_init>:
 8005784:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005786:	bf00      	nop
 8005788:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800578a:	bc08      	pop	{r3}
 800578c:	469e      	mov	lr, r3
 800578e:	4770      	bx	lr

08005790 <_fini>:
 8005790:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005792:	bf00      	nop
 8005794:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005796:	bc08      	pop	{r3}
 8005798:	469e      	mov	lr, r3
 800579a:	4770      	bx	lr
