
Display.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007828  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000054c  080079f8  080079f8  000179f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007f44  08007f44  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08007f44  08007f44  00017f44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007f4c  08007f4c  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007f4c  08007f4c  00017f4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007f50  08007f50  00017f50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08007f54  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000664  20000078  08007fcc  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200006dc  08007fcc  000206dc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   000166f5  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002b7e  00000000  00000000  0003679d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001378  00000000  00000000  00039320  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001250  00000000  00000000  0003a698  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002838f  00000000  00000000  0003b8e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001836c  00000000  00000000  00063c77  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f5dae  00000000  00000000  0007bfe3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00171d91  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005a68  00000000  00000000  00171de4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000078 	.word	0x20000078
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080079e0 	.word	0x080079e0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000007c 	.word	0x2000007c
 800020c:	080079e0 	.word	0x080079e0

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b974 	b.w	80005b0 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468e      	mov	lr, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14d      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4694      	mov	ip, r2
 80002f2:	d969      	bls.n	80003c8 <__udivmoddi4+0xe8>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b152      	cbz	r2, 8000310 <__udivmoddi4+0x30>
 80002fa:	fa01 f302 	lsl.w	r3, r1, r2
 80002fe:	f1c2 0120 	rsb	r1, r2, #32
 8000302:	fa20 f101 	lsr.w	r1, r0, r1
 8000306:	fa0c fc02 	lsl.w	ip, ip, r2
 800030a:	ea41 0e03 	orr.w	lr, r1, r3
 800030e:	4094      	lsls	r4, r2
 8000310:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000314:	0c21      	lsrs	r1, r4, #16
 8000316:	fbbe f6f8 	udiv	r6, lr, r8
 800031a:	fa1f f78c 	uxth.w	r7, ip
 800031e:	fb08 e316 	mls	r3, r8, r6, lr
 8000322:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000326:	fb06 f107 	mul.w	r1, r6, r7
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f106 30ff 	add.w	r0, r6, #4294967295
 8000336:	f080 811f 	bcs.w	8000578 <__udivmoddi4+0x298>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 811c 	bls.w	8000578 <__udivmoddi4+0x298>
 8000340:	3e02      	subs	r6, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a5b      	subs	r3, r3, r1
 8000346:	b2a4      	uxth	r4, r4
 8000348:	fbb3 f0f8 	udiv	r0, r3, r8
 800034c:	fb08 3310 	mls	r3, r8, r0, r3
 8000350:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000354:	fb00 f707 	mul.w	r7, r0, r7
 8000358:	42a7      	cmp	r7, r4
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x92>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f100 33ff 	add.w	r3, r0, #4294967295
 8000364:	f080 810a 	bcs.w	800057c <__udivmoddi4+0x29c>
 8000368:	42a7      	cmp	r7, r4
 800036a:	f240 8107 	bls.w	800057c <__udivmoddi4+0x29c>
 800036e:	4464      	add	r4, ip
 8000370:	3802      	subs	r0, #2
 8000372:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000376:	1be4      	subs	r4, r4, r7
 8000378:	2600      	movs	r6, #0
 800037a:	b11d      	cbz	r5, 8000384 <__udivmoddi4+0xa4>
 800037c:	40d4      	lsrs	r4, r2
 800037e:	2300      	movs	r3, #0
 8000380:	e9c5 4300 	strd	r4, r3, [r5]
 8000384:	4631      	mov	r1, r6
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d909      	bls.n	80003a2 <__udivmoddi4+0xc2>
 800038e:	2d00      	cmp	r5, #0
 8000390:	f000 80ef 	beq.w	8000572 <__udivmoddi4+0x292>
 8000394:	2600      	movs	r6, #0
 8000396:	e9c5 0100 	strd	r0, r1, [r5]
 800039a:	4630      	mov	r0, r6
 800039c:	4631      	mov	r1, r6
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	fab3 f683 	clz	r6, r3
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d14a      	bne.n	8000440 <__udivmoddi4+0x160>
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d302      	bcc.n	80003b4 <__udivmoddi4+0xd4>
 80003ae:	4282      	cmp	r2, r0
 80003b0:	f200 80f9 	bhi.w	80005a6 <__udivmoddi4+0x2c6>
 80003b4:	1a84      	subs	r4, r0, r2
 80003b6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ba:	2001      	movs	r0, #1
 80003bc:	469e      	mov	lr, r3
 80003be:	2d00      	cmp	r5, #0
 80003c0:	d0e0      	beq.n	8000384 <__udivmoddi4+0xa4>
 80003c2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003c6:	e7dd      	b.n	8000384 <__udivmoddi4+0xa4>
 80003c8:	b902      	cbnz	r2, 80003cc <__udivmoddi4+0xec>
 80003ca:	deff      	udf	#255	; 0xff
 80003cc:	fab2 f282 	clz	r2, r2
 80003d0:	2a00      	cmp	r2, #0
 80003d2:	f040 8092 	bne.w	80004fa <__udivmoddi4+0x21a>
 80003d6:	eba1 010c 	sub.w	r1, r1, ip
 80003da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003de:	fa1f fe8c 	uxth.w	lr, ip
 80003e2:	2601      	movs	r6, #1
 80003e4:	0c20      	lsrs	r0, r4, #16
 80003e6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ea:	fb07 1113 	mls	r1, r7, r3, r1
 80003ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f2:	fb0e f003 	mul.w	r0, lr, r3
 80003f6:	4288      	cmp	r0, r1
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x12c>
 80003fa:	eb1c 0101 	adds.w	r1, ip, r1
 80003fe:	f103 38ff 	add.w	r8, r3, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x12a>
 8000404:	4288      	cmp	r0, r1
 8000406:	f200 80cb 	bhi.w	80005a0 <__udivmoddi4+0x2c0>
 800040a:	4643      	mov	r3, r8
 800040c:	1a09      	subs	r1, r1, r0
 800040e:	b2a4      	uxth	r4, r4
 8000410:	fbb1 f0f7 	udiv	r0, r1, r7
 8000414:	fb07 1110 	mls	r1, r7, r0, r1
 8000418:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800041c:	fb0e fe00 	mul.w	lr, lr, r0
 8000420:	45a6      	cmp	lr, r4
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x156>
 8000424:	eb1c 0404 	adds.w	r4, ip, r4
 8000428:	f100 31ff 	add.w	r1, r0, #4294967295
 800042c:	d202      	bcs.n	8000434 <__udivmoddi4+0x154>
 800042e:	45a6      	cmp	lr, r4
 8000430:	f200 80bb 	bhi.w	80005aa <__udivmoddi4+0x2ca>
 8000434:	4608      	mov	r0, r1
 8000436:	eba4 040e 	sub.w	r4, r4, lr
 800043a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800043e:	e79c      	b.n	800037a <__udivmoddi4+0x9a>
 8000440:	f1c6 0720 	rsb	r7, r6, #32
 8000444:	40b3      	lsls	r3, r6
 8000446:	fa22 fc07 	lsr.w	ip, r2, r7
 800044a:	ea4c 0c03 	orr.w	ip, ip, r3
 800044e:	fa20 f407 	lsr.w	r4, r0, r7
 8000452:	fa01 f306 	lsl.w	r3, r1, r6
 8000456:	431c      	orrs	r4, r3
 8000458:	40f9      	lsrs	r1, r7
 800045a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800045e:	fa00 f306 	lsl.w	r3, r0, r6
 8000462:	fbb1 f8f9 	udiv	r8, r1, r9
 8000466:	0c20      	lsrs	r0, r4, #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fb09 1118 	mls	r1, r9, r8, r1
 8000470:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000474:	fb08 f00e 	mul.w	r0, r8, lr
 8000478:	4288      	cmp	r0, r1
 800047a:	fa02 f206 	lsl.w	r2, r2, r6
 800047e:	d90b      	bls.n	8000498 <__udivmoddi4+0x1b8>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f108 3aff 	add.w	sl, r8, #4294967295
 8000488:	f080 8088 	bcs.w	800059c <__udivmoddi4+0x2bc>
 800048c:	4288      	cmp	r0, r1
 800048e:	f240 8085 	bls.w	800059c <__udivmoddi4+0x2bc>
 8000492:	f1a8 0802 	sub.w	r8, r8, #2
 8000496:	4461      	add	r1, ip
 8000498:	1a09      	subs	r1, r1, r0
 800049a:	b2a4      	uxth	r4, r4
 800049c:	fbb1 f0f9 	udiv	r0, r1, r9
 80004a0:	fb09 1110 	mls	r1, r9, r0, r1
 80004a4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ac:	458e      	cmp	lr, r1
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x1e2>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004b8:	d26c      	bcs.n	8000594 <__udivmoddi4+0x2b4>
 80004ba:	458e      	cmp	lr, r1
 80004bc:	d96a      	bls.n	8000594 <__udivmoddi4+0x2b4>
 80004be:	3802      	subs	r0, #2
 80004c0:	4461      	add	r1, ip
 80004c2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004c6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ca:	eba1 010e 	sub.w	r1, r1, lr
 80004ce:	42a1      	cmp	r1, r4
 80004d0:	46c8      	mov	r8, r9
 80004d2:	46a6      	mov	lr, r4
 80004d4:	d356      	bcc.n	8000584 <__udivmoddi4+0x2a4>
 80004d6:	d053      	beq.n	8000580 <__udivmoddi4+0x2a0>
 80004d8:	b15d      	cbz	r5, 80004f2 <__udivmoddi4+0x212>
 80004da:	ebb3 0208 	subs.w	r2, r3, r8
 80004de:	eb61 010e 	sbc.w	r1, r1, lr
 80004e2:	fa01 f707 	lsl.w	r7, r1, r7
 80004e6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ea:	40f1      	lsrs	r1, r6
 80004ec:	431f      	orrs	r7, r3
 80004ee:	e9c5 7100 	strd	r7, r1, [r5]
 80004f2:	2600      	movs	r6, #0
 80004f4:	4631      	mov	r1, r6
 80004f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004fa:	f1c2 0320 	rsb	r3, r2, #32
 80004fe:	40d8      	lsrs	r0, r3
 8000500:	fa0c fc02 	lsl.w	ip, ip, r2
 8000504:	fa21 f303 	lsr.w	r3, r1, r3
 8000508:	4091      	lsls	r1, r2
 800050a:	4301      	orrs	r1, r0
 800050c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000510:	fa1f fe8c 	uxth.w	lr, ip
 8000514:	fbb3 f0f7 	udiv	r0, r3, r7
 8000518:	fb07 3610 	mls	r6, r7, r0, r3
 800051c:	0c0b      	lsrs	r3, r1, #16
 800051e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000522:	fb00 f60e 	mul.w	r6, r0, lr
 8000526:	429e      	cmp	r6, r3
 8000528:	fa04 f402 	lsl.w	r4, r4, r2
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x260>
 800052e:	eb1c 0303 	adds.w	r3, ip, r3
 8000532:	f100 38ff 	add.w	r8, r0, #4294967295
 8000536:	d22f      	bcs.n	8000598 <__udivmoddi4+0x2b8>
 8000538:	429e      	cmp	r6, r3
 800053a:	d92d      	bls.n	8000598 <__udivmoddi4+0x2b8>
 800053c:	3802      	subs	r0, #2
 800053e:	4463      	add	r3, ip
 8000540:	1b9b      	subs	r3, r3, r6
 8000542:	b289      	uxth	r1, r1
 8000544:	fbb3 f6f7 	udiv	r6, r3, r7
 8000548:	fb07 3316 	mls	r3, r7, r6, r3
 800054c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000550:	fb06 f30e 	mul.w	r3, r6, lr
 8000554:	428b      	cmp	r3, r1
 8000556:	d908      	bls.n	800056a <__udivmoddi4+0x28a>
 8000558:	eb1c 0101 	adds.w	r1, ip, r1
 800055c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000560:	d216      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000562:	428b      	cmp	r3, r1
 8000564:	d914      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000566:	3e02      	subs	r6, #2
 8000568:	4461      	add	r1, ip
 800056a:	1ac9      	subs	r1, r1, r3
 800056c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000570:	e738      	b.n	80003e4 <__udivmoddi4+0x104>
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e705      	b.n	8000384 <__udivmoddi4+0xa4>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e3      	b.n	8000344 <__udivmoddi4+0x64>
 800057c:	4618      	mov	r0, r3
 800057e:	e6f8      	b.n	8000372 <__udivmoddi4+0x92>
 8000580:	454b      	cmp	r3, r9
 8000582:	d2a9      	bcs.n	80004d8 <__udivmoddi4+0x1f8>
 8000584:	ebb9 0802 	subs.w	r8, r9, r2
 8000588:	eb64 0e0c 	sbc.w	lr, r4, ip
 800058c:	3801      	subs	r0, #1
 800058e:	e7a3      	b.n	80004d8 <__udivmoddi4+0x1f8>
 8000590:	4646      	mov	r6, r8
 8000592:	e7ea      	b.n	800056a <__udivmoddi4+0x28a>
 8000594:	4620      	mov	r0, r4
 8000596:	e794      	b.n	80004c2 <__udivmoddi4+0x1e2>
 8000598:	4640      	mov	r0, r8
 800059a:	e7d1      	b.n	8000540 <__udivmoddi4+0x260>
 800059c:	46d0      	mov	r8, sl
 800059e:	e77b      	b.n	8000498 <__udivmoddi4+0x1b8>
 80005a0:	3b02      	subs	r3, #2
 80005a2:	4461      	add	r1, ip
 80005a4:	e732      	b.n	800040c <__udivmoddi4+0x12c>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e709      	b.n	80003be <__udivmoddi4+0xde>
 80005aa:	4464      	add	r4, ip
 80005ac:	3802      	subs	r0, #2
 80005ae:	e742      	b.n	8000436 <__udivmoddi4+0x156>

080005b0 <__aeabi_idiv0>:
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop

080005b4 <Starting>:
extern uint16_t geheugen[10000]; // {8, 4, 4, 6, 6, 8,...}
extern uint16_t geheugenplaatsen;
extern uint16_t lengte_signaal[48]; //{1, 2, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0, 0};
extern uint16_t tijd[500];
void Starting()
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	af00      	add	r7, sp, #0
	  printf("\r\n-----------------------------------------------------------------------\r\n");
 80005b8:	480e      	ldr	r0, [pc, #56]	; (80005f4 <Starting+0x40>)
 80005ba:	f006 fa93 	bl	8006ae4 <puts>
	  printf("  ######  ########    ###    ########  ######## #### ##    ##  ######\r\n");
 80005be:	480e      	ldr	r0, [pc, #56]	; (80005f8 <Starting+0x44>)
 80005c0:	f006 fa90 	bl	8006ae4 <puts>
	  printf(" ##    ##    ##      ## ##   ##     ##    ##     ##  ###   ## ##    ##\r\n");
 80005c4:	480d      	ldr	r0, [pc, #52]	; (80005fc <Starting+0x48>)
 80005c6:	f006 fa8d 	bl	8006ae4 <puts>
	  printf(" ##          ##     ##   ##  ##     ##    ##     ##  ####  ## ## \r\n");
 80005ca:	480d      	ldr	r0, [pc, #52]	; (8000600 <Starting+0x4c>)
 80005cc:	f006 fa8a 	bl	8006ae4 <puts>
	  printf("  ######     ##    ##     ## ########     ##     ##  ## ## ## ##   #### \r\n");
 80005d0:	480c      	ldr	r0, [pc, #48]	; (8000604 <Starting+0x50>)
 80005d2:	f006 fa87 	bl	8006ae4 <puts>
	  printf("       ##    ##    ######### ##   ##      ##     ##  ##  #### ##    ##\r\n");
 80005d6:	480c      	ldr	r0, [pc, #48]	; (8000608 <Starting+0x54>)
 80005d8:	f006 fa84 	bl	8006ae4 <puts>
	  printf(" ##    ##    ##    ##     ## ##    ##     ##     ##  ##   ### ##    ##  \r\n");
 80005dc:	480b      	ldr	r0, [pc, #44]	; (800060c <Starting+0x58>)
 80005de:	f006 fa81 	bl	8006ae4 <puts>
	  printf("  ######     ##    ##     ## ##     ##    ##    #### ##    ##  ######\r\n");
 80005e2:	480b      	ldr	r0, [pc, #44]	; (8000610 <Starting+0x5c>)
 80005e4:	f006 fa7e 	bl	8006ae4 <puts>
	  printf("-----------------------------------------------------------------------\r\n\r\n");
 80005e8:	480a      	ldr	r0, [pc, #40]	; (8000614 <Starting+0x60>)
 80005ea:	f006 fa7b 	bl	8006ae4 <puts>
}
 80005ee:	bf00      	nop
 80005f0:	bd80      	pop	{r7, pc}
 80005f2:	bf00      	nop
 80005f4:	080079f8 	.word	0x080079f8
 80005f8:	08007a44 	.word	0x08007a44
 80005fc:	08007a8c 	.word	0x08007a8c
 8000600:	08007ad4 	.word	0x08007ad4
 8000604:	08007b18 	.word	0x08007b18
 8000608:	08007b64 	.word	0x08007b64
 800060c:	08007bac 	.word	0x08007bac
 8000610:	08007bf8 	.word	0x08007bf8
 8000614:	08007c40 	.word	0x08007c40

08000618 <All_Carl_Inits>:
void All_Carl_Inits()
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b082      	sub	sp, #8
 800061c:	af00      	add	r7, sp, #0
	if(UartScreen == 1)
 800061e:	4b12      	ldr	r3, [pc, #72]	; (8000668 <All_Carl_Inits+0x50>)
 8000620:	781b      	ldrb	r3, [r3, #0]
 8000622:	2b01      	cmp	r3, #1
 8000624:	d101      	bne.n	800062a <All_Carl_Inits+0x12>
	{
	Starting();
 8000626:	f7ff ffc5 	bl	80005b4 <Starting>
	}
	InitTouch();
 800062a:	f000 fd99 	bl	8001160 <InitTouch>
	DisplayBegin();
 800062e:	f000 f8b1 	bl	8000794 <DisplayBegin>
	IR_Carrier_OFF();
 8000632:	f000 fd8b 	bl	800114c <IR_Carrier_OFF>
	//logo();
	mainscreen();
 8000636:	f000 fcf9 	bl	800102c <mainscreen>
//	WriteToGeheugen(3, 12);
//	DeleteFromGeheugen(3, 11);
//	DeleteFromGeheugen(1, 1);
	//Wat zit er eigenlijk in mijn geheugen?
	for(uint8_t i = 1; i <= 4; i++)
 800063a:	2301      	movs	r3, #1
 800063c:	71fb      	strb	r3, [r7, #7]
 800063e:	e00b      	b.n	8000658 <All_Carl_Inits+0x40>
	{
		uint16_t *tijd;
		for(uint8_t j = 1; j <= 12; j ++)
 8000640:	2301      	movs	r3, #1
 8000642:	71bb      	strb	r3, [r7, #6]
 8000644:	e002      	b.n	800064c <All_Carl_Inits+0x34>
 8000646:	79bb      	ldrb	r3, [r7, #6]
 8000648:	3301      	adds	r3, #1
 800064a:	71bb      	strb	r3, [r7, #6]
 800064c:	79bb      	ldrb	r3, [r7, #6]
 800064e:	2b0c      	cmp	r3, #12
 8000650:	d9f9      	bls.n	8000646 <All_Carl_Inits+0x2e>
	for(uint8_t i = 1; i <= 4; i++)
 8000652:	79fb      	ldrb	r3, [r7, #7]
 8000654:	3301      	adds	r3, #1
 8000656:	71fb      	strb	r3, [r7, #7]
 8000658:	79fb      	ldrb	r3, [r7, #7]
 800065a:	2b04      	cmp	r3, #4
 800065c:	d9f0      	bls.n	8000640 <All_Carl_Inits+0x28>
		{
			//tijd = TakefromGeheugen(i, j);
		}
	}
}
 800065e:	bf00      	nop
 8000660:	bf00      	nop
 8000662:	3708      	adds	r7, #8
 8000664:	46bd      	mov	sp, r7
 8000666:	bd80      	pop	{r7, pc}
 8000668:	20000000 	.word	0x20000000

0800066c <whilelus>:
		}
}

uint8_t device = 0;
uint8_t button = 0;
void whilelus(){
 800066c:	b580      	push	{r7, lr}
 800066e:	af00      	add	r7, sp, #0
while(device == 0)
 8000670:	e004      	b.n	800067c <whilelus+0x10>
{
	Touch();
 8000672:	f000 fda1 	bl	80011b8 <Touch>
	ReadDevice(&device);
 8000676:	4820      	ldr	r0, [pc, #128]	; (80006f8 <whilelus+0x8c>)
 8000678:	f000 fe18 	bl	80012ac <ReadDevice>
while(device == 0)
 800067c:	4b1e      	ldr	r3, [pc, #120]	; (80006f8 <whilelus+0x8c>)
 800067e:	781b      	ldrb	r3, [r3, #0]
 8000680:	2b00      	cmp	r3, #0
 8000682:	d0f6      	beq.n	8000672 <whilelus+0x6>
}
DevicePressed(&device);
 8000684:	481c      	ldr	r0, [pc, #112]	; (80006f8 <whilelus+0x8c>)
 8000686:	f000 fb49 	bl	8000d1c <DevicePressed>
while(button == 0)
 800068a:	e004      	b.n	8000696 <whilelus+0x2a>
{
Touch();
 800068c:	f000 fd94 	bl	80011b8 <Touch>
ReadButton(&button);
 8000690:	481a      	ldr	r0, [pc, #104]	; (80006fc <whilelus+0x90>)
 8000692:	f000 fe6b 	bl	800136c <ReadButton>
while(button == 0)
 8000696:	4b19      	ldr	r3, [pc, #100]	; (80006fc <whilelus+0x90>)
 8000698:	781b      	ldrb	r3, [r3, #0]
 800069a:	2b00      	cmp	r3, #0
 800069c:	d0f6      	beq.n	800068c <whilelus+0x20>
}
switch(device)
 800069e:	4b16      	ldr	r3, [pc, #88]	; (80006f8 <whilelus+0x8c>)
 80006a0:	781b      	ldrb	r3, [r3, #0]
 80006a2:	3b01      	subs	r3, #1
 80006a4:	2b03      	cmp	r3, #3
 80006a6:	d81b      	bhi.n	80006e0 <whilelus+0x74>
 80006a8:	a201      	add	r2, pc, #4	; (adr r2, 80006b0 <whilelus+0x44>)
 80006aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006ae:	bf00      	nop
 80006b0:	080006c1 	.word	0x080006c1
 80006b4:	080006c9 	.word	0x080006c9
 80006b8:	080006d1 	.word	0x080006d1
 80006bc:	080006d9 	.word	0x080006d9
{
case 1:
	ButtonPressed_Dev1(&button);
 80006c0:	480e      	ldr	r0, [pc, #56]	; (80006fc <whilelus+0x90>)
 80006c2:	f000 fc67 	bl	8000f94 <ButtonPressed_Dev1>
	break;
 80006c6:	e00c      	b.n	80006e2 <whilelus+0x76>
case 2:
	ButtonPressed_Dev2(&button);
 80006c8:	480c      	ldr	r0, [pc, #48]	; (80006fc <whilelus+0x90>)
 80006ca:	f000 fc76 	bl	8000fba <ButtonPressed_Dev2>
	break;
 80006ce:	e008      	b.n	80006e2 <whilelus+0x76>
case 3:
	ButtonPressed_Dev3(&button);
 80006d0:	480a      	ldr	r0, [pc, #40]	; (80006fc <whilelus+0x90>)
 80006d2:	f000 fc85 	bl	8000fe0 <ButtonPressed_Dev3>
	break;
 80006d6:	e004      	b.n	80006e2 <whilelus+0x76>
case 4:
	ButtonPressed_Dev4(&button);
 80006d8:	4808      	ldr	r0, [pc, #32]	; (80006fc <whilelus+0x90>)
 80006da:	f000 fc94 	bl	8001006 <ButtonPressed_Dev4>
	break;
 80006de:	e000      	b.n	80006e2 <whilelus+0x76>
default:
	break;
 80006e0:	bf00      	nop
}
printf("device:%d button: %d \r\n", device, button);
 80006e2:	4b05      	ldr	r3, [pc, #20]	; (80006f8 <whilelus+0x8c>)
 80006e4:	781b      	ldrb	r3, [r3, #0]
 80006e6:	4619      	mov	r1, r3
 80006e8:	4b04      	ldr	r3, [pc, #16]	; (80006fc <whilelus+0x90>)
 80006ea:	781b      	ldrb	r3, [r3, #0]
 80006ec:	461a      	mov	r2, r3
 80006ee:	4804      	ldr	r0, [pc, #16]	; (8000700 <whilelus+0x94>)
 80006f0:	f006 f972 	bl	80069d8 <iprintf>

}
 80006f4:	bf00      	nop
 80006f6:	bd80      	pop	{r7, pc}
 80006f8:	20000094 	.word	0x20000094
 80006fc:	20000095 	.word	0x20000095
 8000700:	08007d40 	.word	0x08007d40

08000704 <CS_HIGH>:
#define ILI9488_GREENYELLOW 	0xAFE5      /* 173, 255,  47 */
#define ILI9488_PINK        			0xF81F

/* Some Easy Functions */ 
void CS_HIGH() //High = The chip is not selected and not accessible pg23
{HAL_GPIO_WritePin(CS_Port, CS_Pin, 1);}
 8000704:	b580      	push	{r7, lr}
 8000706:	af00      	add	r7, sp, #0
 8000708:	2201      	movs	r2, #1
 800070a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800070e:	4802      	ldr	r0, [pc, #8]	; (8000718 <CS_HIGH+0x14>)
 8000710:	f001 ffbc 	bl	800268c <HAL_GPIO_WritePin>
 8000714:	bf00      	nop
 8000716:	bd80      	pop	{r7, pc}
 8000718:	40021400 	.word	0x40021400

0800071c <CS_LOW>:
void CS_LOW()  //Low = The chip is selected and accessible pg23
{HAL_GPIO_WritePin(CS_Port, CS_Pin, 0);}
 800071c:	b580      	push	{r7, lr}
 800071e:	af00      	add	r7, sp, #0
 8000720:	2200      	movs	r2, #0
 8000722:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000726:	4802      	ldr	r0, [pc, #8]	; (8000730 <CS_LOW+0x14>)
 8000728:	f001 ffb0 	bl	800268c <HAL_GPIO_WritePin>
 800072c:	bf00      	nop
 800072e:	bd80      	pop	{r7, pc}
 8000730:	40021400 	.word	0x40021400

08000734 <DC_HIGH>:
void DC_HIGH() //High = Parameter pg23
{HAL_GPIO_WritePin(DC_Port, DC_Pin, 1);}
 8000734:	b580      	push	{r7, lr}
 8000736:	af00      	add	r7, sp, #0
 8000738:	2201      	movs	r2, #1
 800073a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800073e:	4802      	ldr	r0, [pc, #8]	; (8000748 <DC_HIGH+0x14>)
 8000740:	f001 ffa4 	bl	800268c <HAL_GPIO_WritePin>
 8000744:	bf00      	nop
 8000746:	bd80      	pop	{r7, pc}
 8000748:	40021400 	.word	0x40021400

0800074c <DC_LOW>:
void DC_LOW()  //Low = command pg23
{HAL_GPIO_WritePin(DC_Port, DC_Pin, 0);}
 800074c:	b580      	push	{r7, lr}
 800074e:	af00      	add	r7, sp, #0
 8000750:	2200      	movs	r2, #0
 8000752:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000756:	4802      	ldr	r0, [pc, #8]	; (8000760 <DC_LOW+0x14>)
 8000758:	f001 ff98 	bl	800268c <HAL_GPIO_WritePin>
 800075c:	bf00      	nop
 800075e:	bd80      	pop	{r7, pc}
 8000760:	40021400 	.word	0x40021400

08000764 <RST_HIGH>:
void RST_HIGH() 
{HAL_GPIO_WritePin(RST_Port, RST_Pin, 1);}
 8000764:	b580      	push	{r7, lr}
 8000766:	af00      	add	r7, sp, #0
 8000768:	2201      	movs	r2, #1
 800076a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800076e:	4802      	ldr	r0, [pc, #8]	; (8000778 <RST_HIGH+0x14>)
 8000770:	f001 ff8c 	bl	800268c <HAL_GPIO_WritePin>
 8000774:	bf00      	nop
 8000776:	bd80      	pop	{r7, pc}
 8000778:	40021400 	.word	0x40021400

0800077c <RST_LOW>:
void RST_LOW() //initialize with a low input pg23
{HAL_GPIO_WritePin(RST_Port, RST_Pin, 0);}
 800077c:	b580      	push	{r7, lr}
 800077e:	af00      	add	r7, sp, #0
 8000780:	2200      	movs	r2, #0
 8000782:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000786:	4802      	ldr	r0, [pc, #8]	; (8000790 <RST_LOW+0x14>)
 8000788:	f001 ff80 	bl	800268c <HAL_GPIO_WritePin>
 800078c:	bf00      	nop
 800078e:	bd80      	pop	{r7, pc}
 8000790:	40021400 	.word	0x40021400

08000794 <DisplayBegin>:

//#define TIM_1us htim2

void DisplayBegin(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	af00      	add	r7, sp, #0
	RST_LOW(); //initialize with a low input pg23
 8000798:	f7ff fff0 	bl	800077c <RST_LOW>
	HAL_Delay(500);
 800079c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80007a0:	f001 fc92 	bl	80020c8 <HAL_Delay>
	RST_HIGH();
 80007a4:	f7ff ffde 	bl	8000764 <RST_HIGH>
	HAL_Delay(500);
 80007a8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80007ac:	f001 fc8c 	bl	80020c8 <HAL_Delay>
	writecommand(0xE0);
 80007b0:	20e0      	movs	r0, #224	; 0xe0
 80007b2:	f000 f8bf 	bl	8000934 <writecommand>
	writedata(0x00);
 80007b6:	2000      	movs	r0, #0
 80007b8:	f000 f8d8 	bl	800096c <writedata>
	writedata(0x03);
 80007bc:	2003      	movs	r0, #3
 80007be:	f000 f8d5 	bl	800096c <writedata>
	writedata(0x09);
 80007c2:	2009      	movs	r0, #9
 80007c4:	f000 f8d2 	bl	800096c <writedata>
	writedata(0x08);
 80007c8:	2008      	movs	r0, #8
 80007ca:	f000 f8cf 	bl	800096c <writedata>
	writedata(0x16);
 80007ce:	2016      	movs	r0, #22
 80007d0:	f000 f8cc 	bl	800096c <writedata>
	writedata(0x0A);
 80007d4:	200a      	movs	r0, #10
 80007d6:	f000 f8c9 	bl	800096c <writedata>
	writedata(0x3F);
 80007da:	203f      	movs	r0, #63	; 0x3f
 80007dc:	f000 f8c6 	bl	800096c <writedata>
	writedata(0x78);
 80007e0:	2078      	movs	r0, #120	; 0x78
 80007e2:	f000 f8c3 	bl	800096c <writedata>
	writedata(0x4C);
 80007e6:	204c      	movs	r0, #76	; 0x4c
 80007e8:	f000 f8c0 	bl	800096c <writedata>
	writedata(0x09);
 80007ec:	2009      	movs	r0, #9
 80007ee:	f000 f8bd 	bl	800096c <writedata>
	writedata(0x0A);
 80007f2:	200a      	movs	r0, #10
 80007f4:	f000 f8ba 	bl	800096c <writedata>
	writedata(0x08);
 80007f8:	2008      	movs	r0, #8
 80007fa:	f000 f8b7 	bl	800096c <writedata>
	writedata(0x16);
 80007fe:	2016      	movs	r0, #22
 8000800:	f000 f8b4 	bl	800096c <writedata>
	writedata(0x1A);
 8000804:	201a      	movs	r0, #26
 8000806:	f000 f8b1 	bl	800096c <writedata>
	writedata(0x0F);
 800080a:	200f      	movs	r0, #15
 800080c:	f000 f8ae 	bl	800096c <writedata>

	writecommand(0XE1);
 8000810:	20e1      	movs	r0, #225	; 0xe1
 8000812:	f000 f88f 	bl	8000934 <writecommand>
	writedata(0x00);
 8000816:	2000      	movs	r0, #0
 8000818:	f000 f8a8 	bl	800096c <writedata>
	writedata(0x16);
 800081c:	2016      	movs	r0, #22
 800081e:	f000 f8a5 	bl	800096c <writedata>
	writedata(0x19);
 8000822:	2019      	movs	r0, #25
 8000824:	f000 f8a2 	bl	800096c <writedata>
	writedata(0x03);
 8000828:	2003      	movs	r0, #3
 800082a:	f000 f89f 	bl	800096c <writedata>
	writedata(0x0F);
 800082e:	200f      	movs	r0, #15
 8000830:	f000 f89c 	bl	800096c <writedata>
	writedata(0x05);
 8000834:	2005      	movs	r0, #5
 8000836:	f000 f899 	bl	800096c <writedata>
	writedata(0x32);
 800083a:	2032      	movs	r0, #50	; 0x32
 800083c:	f000 f896 	bl	800096c <writedata>
	writedata(0x45);
 8000840:	2045      	movs	r0, #69	; 0x45
 8000842:	f000 f893 	bl	800096c <writedata>
	writedata(0x46);
 8000846:	2046      	movs	r0, #70	; 0x46
 8000848:	f000 f890 	bl	800096c <writedata>
	writedata(0x04);
 800084c:	2004      	movs	r0, #4
 800084e:	f000 f88d 	bl	800096c <writedata>
	writedata(0x0E);
 8000852:	200e      	movs	r0, #14
 8000854:	f000 f88a 	bl	800096c <writedata>
	writedata(0x0D);
 8000858:	200d      	movs	r0, #13
 800085a:	f000 f887 	bl	800096c <writedata>
	writedata(0x35);
 800085e:	2035      	movs	r0, #53	; 0x35
 8000860:	f000 f884 	bl	800096c <writedata>
	writedata(0x37);
 8000864:	2037      	movs	r0, #55	; 0x37
 8000866:	f000 f881 	bl	800096c <writedata>
	writedata(0x0F);
 800086a:	200f      	movs	r0, #15
 800086c:	f000 f87e 	bl	800096c <writedata>

	writecommand(0XC0);      //Power Control 1 (pg 237)
 8000870:	20c0      	movs	r0, #192	; 0xc0
 8000872:	f000 f85f 	bl	8000934 <writecommand>
							
	writedata(0x17);    //Vreg1out =  5V zie pg 237
 8000876:	2017      	movs	r0, #23
 8000878:	f000 f878 	bl	800096c <writedata>
	writedata(0x15);    //Verg2out = -4.87V zie pg 237
 800087c:	2015      	movs	r0, #21
 800087e:	f000 f875 	bl	800096c <writedata>
							//	Input voltage from the set-up circuit (-6 to -4.5V).
							
							//Op de DFR0669 staat een LevelShifter, zodat het op 5V werkt.
							

	writecommand(0xC1);      //Power Control 2 (pg 239)
 8000882:	20c1      	movs	r0, #193	; 0xc1
 8000884:	f000 f856 	bl	8000934 <writecommand>
	writedata(0x41);    //VGH,VGL
 8000888:	2041      	movs	r0, #65	; 0x41
 800088a:	f000 f86f 	bl	800096c <writedata>
						// = 3'h1 = 001
						// 0100 0XXX 
						// 0100 0001 = 41h  (65 decimaal)
						

	writecommand(0xC5);      //VCOM control pg243
 800088e:	20c5      	movs	r0, #197	; 0xc5
 8000890:	f000 f850 	bl	8000934 <writecommand>
	writedata(0x00);		 //1e parameter standaard 00h
 8000894:	2000      	movs	r0, #0
 8000896:	f000 f869 	bl	800096c <writedata>
	writedata(0x12);    	 //VCOM = -1.71    |VCOM| x 2 = VREG = 3.42V
 800089a:	2012      	movs	r0, #18
 800089c:	f000 f866 	bl	800096c <writedata>
	writedata(0x80);		// ? 
 80008a0:	2080      	movs	r0, #128	; 0x80
 80008a2:	f000 f863 	bl	800096c <writedata>

	writecommand(0x36);      //Memory Access pg192
 80008a6:	2036      	movs	r0, #54	; 0x36
 80008a8:	f000 f844 	bl	8000934 <writecommand>
	writedata(0x48);		//MY = 0				//in vb 0x48
 80008ac:	2048      	movs	r0, #72	; 0x48
 80008ae:	f000 f85d 	bl	800096c <writedata>
							//ML = 0
							//BGR = 0
							//MH = 0
							//=0h

	writecommand(0x3A);		// Interface Pixel Format (RGB 565 standaard 3Ah pg123
 80008b2:	203a      	movs	r0, #58	; 0x3a
 80008b4:	f000 f83e 	bl	8000934 <writecommand>
	writedata(0x66); 	  	//pg 200 --> 16bits/pixel = 55 (decimal = 85)
 80008b8:	2066      	movs	r0, #102	; 0x66
 80008ba:	f000 f857 	bl	800096c <writedata>
							//55 = 0101 0101

	writecommand(0XB0);      // Interface Mode Control pg219
 80008be:	20b0      	movs	r0, #176	; 0xb0
 80008c0:	f000 f838 	bl	8000934 <writecommand>
	writedata(0x80);     			 //SDO NOT USE
 80008c4:	2080      	movs	r0, #128	; 0x80
 80008c6:	f000 f851 	bl	800096c <writedata>
									//1000 0000
									//High enable for RGB interface,
									//data fetched at the rising time,
									//and low level sync clock
									
	writecommand(0xB1);      //Frame rate pg 221
 80008ca:	20b1      	movs	r0, #177	; 0xb1
 80008cc:	f000 f832 	bl	8000934 <writecommand>
	writedata(0xA0);    //60Hz      NOG UITREKENEN
 80008d0:	20a0      	movs	r0, #160	; 0xa0
 80008d2:	f000 f84b 	bl	800096c <writedata>

	writecommand(0xB4);      //Display Inversion Control  pg 225
 80008d6:	20b4      	movs	r0, #180	; 0xb4
 80008d8:	f000 f82c 	bl	8000934 <writecommand>
	writedata(0x02);    //2-dot inversion (standard)
 80008dc:	2002      	movs	r0, #2
 80008de:	f000 f845 	bl	800096c <writedata>

	writecommand(0XB6); //Display Function Control  RGB/MCU Interface Control pg228
 80008e2:	20b6      	movs	r0, #182	; 0xb6
 80008e4:	f000 f826 	bl	8000934 <writecommand>

	writedata(0x02);    //MCU // 1e parameter standard    question Bypass= Memory or Shift register? 
 80008e8:	2002      	movs	r0, #2
 80008ea:	f000 f83f 	bl	800096c <writedata>
	writedata(0x02);    //Source,Gate scan direction so frames at 84ms
 80008ee:	2002      	movs	r0, #2
 80008f0:	f000 f83c 	bl	800096c <writedata>

	writecommand(0XE9);      // Set Image Function pg271 
 80008f4:	20e9      	movs	r0, #233	; 0xe9
 80008f6:	f000 f81d 	bl	8000934 <writecommand>
	writedata(0x00);    // Disable 24 bit data
 80008fa:	2000      	movs	r0, #0
 80008fc:	f000 f836 	bl	800096c <writedata>

	writecommand(0xF7);      // Adjust Control   pg 276
 8000900:	20f7      	movs	r0, #247	; 0xf7
 8000902:	f000 f817 	bl	8000934 <writecommand>
	writedata(0xA9);  //standard 1e parameter
 8000906:	20a9      	movs	r0, #169	; 0xa9
 8000908:	f000 f830 	bl	800096c <writedata>
	writedata(0x51);  //standard 2e parameter
 800090c:	2051      	movs	r0, #81	; 0x51
 800090e:	f000 f82d 	bl	800096c <writedata>
	writedata(0x2C);  //standard 3e parameter
 8000912:	202c      	movs	r0, #44	; 0x2c
 8000914:	f000 f82a 	bl	800096c <writedata>
	writedata(0x82);    // D7 stream, loose   //standard 4e parameter
 8000918:	2082      	movs	r0, #130	; 0x82
 800091a:	f000 f827 	bl	800096c <writedata>

	writecommand(Display_ExitSleep);    //Exit Sleep
 800091e:	2011      	movs	r0, #17
 8000920:	f000 f808 	bl	8000934 <writecommand>

	HAL_Delay(120);
 8000924:	2078      	movs	r0, #120	; 0x78
 8000926:	f001 fbcf 	bl	80020c8 <HAL_Delay>

	writecommand(Display_On);    //Display on
 800092a:	2029      	movs	r0, #41	; 0x29
 800092c:	f000 f802 	bl	8000934 <writecommand>


	
}
 8000930:	bf00      	nop
 8000932:	bd80      	pop	{r7, pc}

08000934 <writecommand>:

void writecommand(uint8_t cmdo)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b084      	sub	sp, #16
 8000938:	af00      	add	r7, sp, #0
 800093a:	4603      	mov	r3, r0
 800093c:	71fb      	strb	r3, [r7, #7]
	uint8_t commando = cmdo;
 800093e:	79fb      	ldrb	r3, [r7, #7]
 8000940:	73fb      	strb	r3, [r7, #15]
	DC_LOW(); //Low = command pg23
 8000942:	f7ff ff03 	bl	800074c <DC_LOW>
	CS_LOW(); //The chip is selected and accessible pg23
 8000946:	f7ff fee9 	bl	800071c <CS_LOW>
	HAL_SPI_Transmit(&mySPI, &commando, 1, HAL_MAX_DELAY); //Size = bytes
 800094a:	f107 010f 	add.w	r1, r7, #15
 800094e:	f04f 33ff 	mov.w	r3, #4294967295
 8000952:	2201      	movs	r2, #1
 8000954:	4804      	ldr	r0, [pc, #16]	; (8000968 <writecommand+0x34>)
 8000956:	f004 f850 	bl	80049fa <HAL_SPI_Transmit>
	CS_HIGH(); //The chip is not selected and not accessible pg23
 800095a:	f7ff fed3 	bl	8000704 <CS_HIGH>
	


}
 800095e:	bf00      	nop
 8000960:	3710      	adds	r7, #16
 8000962:	46bd      	mov	sp, r7
 8000964:	bd80      	pop	{r7, pc}
 8000966:	bf00      	nop
 8000968:	20000540 	.word	0x20000540

0800096c <writedata>:
void writedata(uint8_t dta )
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b084      	sub	sp, #16
 8000970:	af00      	add	r7, sp, #0
 8000972:	4603      	mov	r3, r0
 8000974:	71fb      	strb	r3, [r7, #7]
	uint8_t data = dta;
 8000976:	79fb      	ldrb	r3, [r7, #7]
 8000978:	73fb      	strb	r3, [r7, #15]
	DC_HIGH(); //High = Parameter pg23
 800097a:	f7ff fedb 	bl	8000734 <DC_HIGH>
	CS_LOW(); //The chip is selected and accessible pg23
 800097e:	f7ff fecd 	bl	800071c <CS_LOW>
	HAL_SPI_Transmit(&mySPI, &data, 1, HAL_MAX_DELAY); //Size = bytes
 8000982:	f107 010f 	add.w	r1, r7, #15
 8000986:	f04f 33ff 	mov.w	r3, #4294967295
 800098a:	2201      	movs	r2, #1
 800098c:	4804      	ldr	r0, [pc, #16]	; (80009a0 <writedata+0x34>)
 800098e:	f004 f834 	bl	80049fa <HAL_SPI_Transmit>
	CS_HIGH(); //The chip is not selected and not accessible pg23
 8000992:	f7ff feb7 	bl	8000704 <CS_HIGH>
	//als ik het scherm uitschakel, krijg ik ook geen errors
	//wel leuk om optimistisch te zijn, maar dit doet niks
	//uint8_t StateSpiHulp = HAL_SPI_GetState(&hspi2);
	//uint8_t ErrorSpiHulp = HAL_SPI_GetError(&hspi2);
	//printf("    data: 0x %x Spi_State:%d Error: %d\r\n", dta, StateSpiHulp, ErrorSpiHulp);
}
 8000996:	bf00      	nop
 8000998:	3710      	adds	r7, #16
 800099a:	46bd      	mov	sp, r7
 800099c:	bd80      	pop	{r7, pc}
 800099e:	bf00      	nop
 80009a0:	20000540 	.word	0x20000540

080009a4 <setAddrWindow>:
void setAddrWindow(uint16_t x0,uint16_t y0,uint16_t x1,uint16_t y1)
{
 80009a4:	b590      	push	{r4, r7, lr}
 80009a6:	b083      	sub	sp, #12
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	4604      	mov	r4, r0
 80009ac:	4608      	mov	r0, r1
 80009ae:	4611      	mov	r1, r2
 80009b0:	461a      	mov	r2, r3
 80009b2:	4623      	mov	r3, r4
 80009b4:	80fb      	strh	r3, [r7, #6]
 80009b6:	4603      	mov	r3, r0
 80009b8:	80bb      	strh	r3, [r7, #4]
 80009ba:	460b      	mov	r3, r1
 80009bc:	807b      	strh	r3, [r7, #2]
 80009be:	4613      	mov	r3, r2
 80009c0:	803b      	strh	r3, [r7, #0]
	//pg 175 -> Column Address Set = 2Ah
	writecommand(0x2A);
 80009c2:	202a      	movs	r0, #42	; 0x2a
 80009c4:	f7ff ffb6 	bl	8000934 <writecommand>
	
	writedata(x0 >> 8); //?
 80009c8:	88fb      	ldrh	r3, [r7, #6]
 80009ca:	0a1b      	lsrs	r3, r3, #8
 80009cc:	b29b      	uxth	r3, r3
 80009ce:	b2db      	uxtb	r3, r3
 80009d0:	4618      	mov	r0, r3
 80009d2:	f7ff ffcb 	bl	800096c <writedata>
	writedata(x0 & 0xFF);     // XSTART ?
 80009d6:	88fb      	ldrh	r3, [r7, #6]
 80009d8:	b2db      	uxtb	r3, r3
 80009da:	4618      	mov	r0, r3
 80009dc:	f7ff ffc6 	bl	800096c <writedata>
	writedata(x1 >> 8); //?
 80009e0:	887b      	ldrh	r3, [r7, #2]
 80009e2:	0a1b      	lsrs	r3, r3, #8
 80009e4:	b29b      	uxth	r3, r3
 80009e6:	b2db      	uxtb	r3, r3
 80009e8:	4618      	mov	r0, r3
 80009ea:	f7ff ffbf 	bl	800096c <writedata>
	writedata(x1 & 0xFF);     // XEND //?
 80009ee:	887b      	ldrh	r3, [r7, #2]
 80009f0:	b2db      	uxtb	r3, r3
 80009f2:	4618      	mov	r0, r3
 80009f4:	f7ff ffba 	bl	800096c <writedata>
	
	//pg 177 -> Page Address Set = 2Bh = Row Address Set 
	writecommand(0x2B); // Row addr set
 80009f8:	202b      	movs	r0, #43	; 0x2b
 80009fa:	f7ff ff9b 	bl	8000934 <writecommand>
	writedata(y0 >> 8); //?
 80009fe:	88bb      	ldrh	r3, [r7, #4]
 8000a00:	0a1b      	lsrs	r3, r3, #8
 8000a02:	b29b      	uxth	r3, r3
 8000a04:	b2db      	uxtb	r3, r3
 8000a06:	4618      	mov	r0, r3
 8000a08:	f7ff ffb0 	bl	800096c <writedata>
	writedata(y0 & 0xff);     // YSTART   ?
 8000a0c:	88bb      	ldrh	r3, [r7, #4]
 8000a0e:	b2db      	uxtb	r3, r3
 8000a10:	4618      	mov	r0, r3
 8000a12:	f7ff ffab 	bl	800096c <writedata>
	writedata(y1 >> 8); // ?
 8000a16:	883b      	ldrh	r3, [r7, #0]
 8000a18:	0a1b      	lsrs	r3, r3, #8
 8000a1a:	b29b      	uxth	r3, r3
 8000a1c:	b2db      	uxtb	r3, r3
 8000a1e:	4618      	mov	r0, r3
 8000a20:	f7ff ffa4 	bl	800096c <writedata>
	writedata(y1 & 0xff);     // YEND //?
 8000a24:	883b      	ldrh	r3, [r7, #0]
 8000a26:	b2db      	uxtb	r3, r3
 8000a28:	4618      	mov	r0, r3
 8000a2a:	f7ff ff9f 	bl	800096c <writedata>
	writecommand(Display_Write_To_RAM);
 8000a2e:	202c      	movs	r0, #44	; 0x2c
 8000a30:	f7ff ff80 	bl	8000934 <writecommand>
	
}
 8000a34:	bf00      	nop
 8000a36:	370c      	adds	r7, #12
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	bd90      	pop	{r4, r7, pc}

08000a3c <drawPixel>:
void drawPixel(uint16_t x, uint16_t y, uint16_t color)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b082      	sub	sp, #8
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	4603      	mov	r3, r0
 8000a44:	80fb      	strh	r3, [r7, #6]
 8000a46:	460b      	mov	r3, r1
 8000a48:	80bb      	strh	r3, [r7, #4]
 8000a4a:	4613      	mov	r3, r2
 8000a4c:	807b      	strh	r3, [r7, #2]
	setAddrWindow(x, y, x + 1, y + 1);
 8000a4e:	88fb      	ldrh	r3, [r7, #6]
 8000a50:	3301      	adds	r3, #1
 8000a52:	b29a      	uxth	r2, r3
 8000a54:	88bb      	ldrh	r3, [r7, #4]
 8000a56:	3301      	adds	r3, #1
 8000a58:	b29b      	uxth	r3, r3
 8000a5a:	88b9      	ldrh	r1, [r7, #4]
 8000a5c:	88f8      	ldrh	r0, [r7, #6]
 8000a5e:	f7ff ffa1 	bl	80009a4 <setAddrWindow>
	DC_HIGH();
 8000a62:	f7ff fe67 	bl	8000734 <DC_HIGH>
	CS_LOW();
 8000a66:	f7ff fe59 	bl	800071c <CS_LOW>
	write16BitColor(color);
 8000a6a:	887b      	ldrh	r3, [r7, #2]
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	f000 f8c5 	bl	8000bfc <write16BitColor>
	CS_HIGH();
 8000a72:	f7ff fe47 	bl	8000704 <CS_HIGH>
}
 8000a76:	bf00      	nop
 8000a78:	3708      	adds	r7, #8
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bd80      	pop	{r7, pc}

08000a7e <DrawRectangle>:
void DrawRectangle(uint16_t x, uint16_t y, uint16_t h, uint16_t w, uint16_t color, uint16_t contentcolor, uint8_t border)
{
 8000a7e:	b590      	push	{r4, r7, lr}
 8000a80:	b089      	sub	sp, #36	; 0x24
 8000a82:	af02      	add	r7, sp, #8
 8000a84:	4604      	mov	r4, r0
 8000a86:	4608      	mov	r0, r1
 8000a88:	4611      	mov	r1, r2
 8000a8a:	461a      	mov	r2, r3
 8000a8c:	4623      	mov	r3, r4
 8000a8e:	80fb      	strh	r3, [r7, #6]
 8000a90:	4603      	mov	r3, r0
 8000a92:	80bb      	strh	r3, [r7, #4]
 8000a94:	460b      	mov	r3, r1
 8000a96:	807b      	strh	r3, [r7, #2]
 8000a98:	4613      	mov	r3, r2
 8000a9a:	803b      	strh	r3, [r7, #0]

	//lijntje horizontaal 1
	for(uint8_t j = 0; j <= border; j++)
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	75fb      	strb	r3, [r7, #23]
 8000aa0:	e018      	b.n	8000ad4 <DrawRectangle+0x56>
	{
		for(uint16_t i = x; i <= (x+w); i++)
 8000aa2:	88fb      	ldrh	r3, [r7, #6]
 8000aa4:	82bb      	strh	r3, [r7, #20]
 8000aa6:	e00c      	b.n	8000ac2 <DrawRectangle+0x44>
		{
			drawPixel(i, y+j, color);
 8000aa8:	7dfb      	ldrb	r3, [r7, #23]
 8000aaa:	b29a      	uxth	r2, r3
 8000aac:	88bb      	ldrh	r3, [r7, #4]
 8000aae:	4413      	add	r3, r2
 8000ab0:	b299      	uxth	r1, r3
 8000ab2:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8000ab4:	8abb      	ldrh	r3, [r7, #20]
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	f7ff ffc0 	bl	8000a3c <drawPixel>
		for(uint16_t i = x; i <= (x+w); i++)
 8000abc:	8abb      	ldrh	r3, [r7, #20]
 8000abe:	3301      	adds	r3, #1
 8000ac0:	82bb      	strh	r3, [r7, #20]
 8000ac2:	8aba      	ldrh	r2, [r7, #20]
 8000ac4:	88f9      	ldrh	r1, [r7, #6]
 8000ac6:	883b      	ldrh	r3, [r7, #0]
 8000ac8:	440b      	add	r3, r1
 8000aca:	429a      	cmp	r2, r3
 8000acc:	ddec      	ble.n	8000aa8 <DrawRectangle+0x2a>
	for(uint8_t j = 0; j <= border; j++)
 8000ace:	7dfb      	ldrb	r3, [r7, #23]
 8000ad0:	3301      	adds	r3, #1
 8000ad2:	75fb      	strb	r3, [r7, #23]
 8000ad4:	7dfa      	ldrb	r2, [r7, #23]
 8000ad6:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8000ada:	429a      	cmp	r2, r3
 8000adc:	d9e1      	bls.n	8000aa2 <DrawRectangle+0x24>
		}
	}

//lijntje verticaal 1
for(uint8_t j = 0; j <= border; j++)
 8000ade:	2300      	movs	r3, #0
 8000ae0:	74fb      	strb	r3, [r7, #19]
 8000ae2:	e018      	b.n	8000b16 <DrawRectangle+0x98>
{
	for(uint16_t i = y; i <= (y+h); i++)
 8000ae4:	88bb      	ldrh	r3, [r7, #4]
 8000ae6:	823b      	strh	r3, [r7, #16]
 8000ae8:	e00c      	b.n	8000b04 <DrawRectangle+0x86>
	{
		drawPixel(x+j, i, color);
 8000aea:	7cfb      	ldrb	r3, [r7, #19]
 8000aec:	b29a      	uxth	r2, r3
 8000aee:	88fb      	ldrh	r3, [r7, #6]
 8000af0:	4413      	add	r3, r2
 8000af2:	b29b      	uxth	r3, r3
 8000af4:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8000af6:	8a39      	ldrh	r1, [r7, #16]
 8000af8:	4618      	mov	r0, r3
 8000afa:	f7ff ff9f 	bl	8000a3c <drawPixel>
	for(uint16_t i = y; i <= (y+h); i++)
 8000afe:	8a3b      	ldrh	r3, [r7, #16]
 8000b00:	3301      	adds	r3, #1
 8000b02:	823b      	strh	r3, [r7, #16]
 8000b04:	8a3a      	ldrh	r2, [r7, #16]
 8000b06:	88b9      	ldrh	r1, [r7, #4]
 8000b08:	887b      	ldrh	r3, [r7, #2]
 8000b0a:	440b      	add	r3, r1
 8000b0c:	429a      	cmp	r2, r3
 8000b0e:	ddec      	ble.n	8000aea <DrawRectangle+0x6c>
for(uint8_t j = 0; j <= border; j++)
 8000b10:	7cfb      	ldrb	r3, [r7, #19]
 8000b12:	3301      	adds	r3, #1
 8000b14:	74fb      	strb	r3, [r7, #19]
 8000b16:	7cfa      	ldrb	r2, [r7, #19]
 8000b18:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8000b1c:	429a      	cmp	r2, r3
 8000b1e:	d9e1      	bls.n	8000ae4 <DrawRectangle+0x66>
	}
}
//lijntje verticaal 2
for(uint8_t j = 0; j <= border; j++)
 8000b20:	2300      	movs	r3, #0
 8000b22:	73fb      	strb	r3, [r7, #15]
 8000b24:	e01b      	b.n	8000b5e <DrawRectangle+0xe0>
{
	for(uint16_t i = y; i <= (y+h); i++)
 8000b26:	88bb      	ldrh	r3, [r7, #4]
 8000b28:	81bb      	strh	r3, [r7, #12]
 8000b2a:	e00f      	b.n	8000b4c <DrawRectangle+0xce>
	{
		drawPixel((x+w)-j, i, color);
 8000b2c:	88fa      	ldrh	r2, [r7, #6]
 8000b2e:	883b      	ldrh	r3, [r7, #0]
 8000b30:	4413      	add	r3, r2
 8000b32:	b29a      	uxth	r2, r3
 8000b34:	7bfb      	ldrb	r3, [r7, #15]
 8000b36:	b29b      	uxth	r3, r3
 8000b38:	1ad3      	subs	r3, r2, r3
 8000b3a:	b29b      	uxth	r3, r3
 8000b3c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8000b3e:	89b9      	ldrh	r1, [r7, #12]
 8000b40:	4618      	mov	r0, r3
 8000b42:	f7ff ff7b 	bl	8000a3c <drawPixel>
	for(uint16_t i = y; i <= (y+h); i++)
 8000b46:	89bb      	ldrh	r3, [r7, #12]
 8000b48:	3301      	adds	r3, #1
 8000b4a:	81bb      	strh	r3, [r7, #12]
 8000b4c:	89ba      	ldrh	r2, [r7, #12]
 8000b4e:	88b9      	ldrh	r1, [r7, #4]
 8000b50:	887b      	ldrh	r3, [r7, #2]
 8000b52:	440b      	add	r3, r1
 8000b54:	429a      	cmp	r2, r3
 8000b56:	dde9      	ble.n	8000b2c <DrawRectangle+0xae>
for(uint8_t j = 0; j <= border; j++)
 8000b58:	7bfb      	ldrb	r3, [r7, #15]
 8000b5a:	3301      	adds	r3, #1
 8000b5c:	73fb      	strb	r3, [r7, #15]
 8000b5e:	7bfa      	ldrb	r2, [r7, #15]
 8000b60:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8000b64:	429a      	cmp	r2, r3
 8000b66:	d9de      	bls.n	8000b26 <DrawRectangle+0xa8>
	}
}

//lijntje horizontaal 2
for(uint8_t j = 0; j <= border; j++)
 8000b68:	2300      	movs	r3, #0
 8000b6a:	72fb      	strb	r3, [r7, #11]
 8000b6c:	e01b      	b.n	8000ba6 <DrawRectangle+0x128>
{
	for(uint16_t i = x; i <= (x+w); i++)
 8000b6e:	88fb      	ldrh	r3, [r7, #6]
 8000b70:	813b      	strh	r3, [r7, #8]
 8000b72:	e00f      	b.n	8000b94 <DrawRectangle+0x116>
	{
		drawPixel(i, (y+h)-j, color);
 8000b74:	88ba      	ldrh	r2, [r7, #4]
 8000b76:	887b      	ldrh	r3, [r7, #2]
 8000b78:	4413      	add	r3, r2
 8000b7a:	b29a      	uxth	r2, r3
 8000b7c:	7afb      	ldrb	r3, [r7, #11]
 8000b7e:	b29b      	uxth	r3, r3
 8000b80:	1ad3      	subs	r3, r2, r3
 8000b82:	b299      	uxth	r1, r3
 8000b84:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8000b86:	893b      	ldrh	r3, [r7, #8]
 8000b88:	4618      	mov	r0, r3
 8000b8a:	f7ff ff57 	bl	8000a3c <drawPixel>
	for(uint16_t i = x; i <= (x+w); i++)
 8000b8e:	893b      	ldrh	r3, [r7, #8]
 8000b90:	3301      	adds	r3, #1
 8000b92:	813b      	strh	r3, [r7, #8]
 8000b94:	893a      	ldrh	r2, [r7, #8]
 8000b96:	88f9      	ldrh	r1, [r7, #6]
 8000b98:	883b      	ldrh	r3, [r7, #0]
 8000b9a:	440b      	add	r3, r1
 8000b9c:	429a      	cmp	r2, r3
 8000b9e:	dde9      	ble.n	8000b74 <DrawRectangle+0xf6>
for(uint8_t j = 0; j <= border; j++)
 8000ba0:	7afb      	ldrb	r3, [r7, #11]
 8000ba2:	3301      	adds	r3, #1
 8000ba4:	72fb      	strb	r3, [r7, #11]
 8000ba6:	7afa      	ldrb	r2, [r7, #11]
 8000ba8:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8000bac:	429a      	cmp	r2, r3
 8000bae:	d9de      	bls.n	8000b6e <DrawRectangle+0xf0>
	}
}
//contentcolor
fillRect(x+border, y+border, w-(border*2), h-(border*2), contentcolor);
 8000bb0:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8000bb4:	b29a      	uxth	r2, r3
 8000bb6:	88fb      	ldrh	r3, [r7, #6]
 8000bb8:	4413      	add	r3, r2
 8000bba:	b298      	uxth	r0, r3
 8000bbc:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8000bc0:	b29a      	uxth	r2, r3
 8000bc2:	88bb      	ldrh	r3, [r7, #4]
 8000bc4:	4413      	add	r3, r2
 8000bc6:	b299      	uxth	r1, r3
 8000bc8:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8000bcc:	b29b      	uxth	r3, r3
 8000bce:	005b      	lsls	r3, r3, #1
 8000bd0:	b29b      	uxth	r3, r3
 8000bd2:	883a      	ldrh	r2, [r7, #0]
 8000bd4:	1ad3      	subs	r3, r2, r3
 8000bd6:	b29c      	uxth	r4, r3
 8000bd8:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8000bdc:	b29b      	uxth	r3, r3
 8000bde:	005b      	lsls	r3, r3, #1
 8000be0:	b29b      	uxth	r3, r3
 8000be2:	887a      	ldrh	r2, [r7, #2]
 8000be4:	1ad3      	subs	r3, r2, r3
 8000be6:	b29a      	uxth	r2, r3
 8000be8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8000bea:	9300      	str	r3, [sp, #0]
 8000bec:	4613      	mov	r3, r2
 8000bee:	4622      	mov	r2, r4
 8000bf0:	f000 f82c 	bl	8000c4c <fillRect>



}
 8000bf4:	bf00      	nop
 8000bf6:	371c      	adds	r7, #28
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	bd90      	pop	{r4, r7, pc}

08000bfc <write16BitColor>:
void DrawVolumebuttonDown()
{

}

void write16BitColor(uint16_t color){
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b084      	sub	sp, #16
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	4603      	mov	r3, r0
 8000c04:	80fb      	strh	r3, [r7, #6]
	//565  = rrrr rggg gggb bbbb
	//F800 = 1111 1000 0000 0000 //11 nullekes
	//07E0 = 0000 0111 1110 0000 //5 nulleks
	//001F = 0000 0000 0001 1111
	 uint8_t r = (color >> 8) & 0Xf8; //& 0xF800) >> 11;
 8000c06:	88fb      	ldrh	r3, [r7, #6]
 8000c08:	0a1b      	lsrs	r3, r3, #8
 8000c0a:	b29b      	uxth	r3, r3
 8000c0c:	b2db      	uxtb	r3, r3
 8000c0e:	f023 0307 	bic.w	r3, r3, #7
 8000c12:	73fb      	strb	r3, [r7, #15]
	 uint8_t g = (color >> 3) & 0Xfc; //& 0x07E0) >> 5;
 8000c14:	88fb      	ldrh	r3, [r7, #6]
 8000c16:	08db      	lsrs	r3, r3, #3
 8000c18:	b29b      	uxth	r3, r3
 8000c1a:	b2db      	uxtb	r3, r3
 8000c1c:	f023 0303 	bic.w	r3, r3, #3
 8000c20:	73bb      	strb	r3, [r7, #14]
	 uint8_t b = (color <<3); //& 0x001F;
 8000c22:	88fb      	ldrh	r3, [r7, #6]
 8000c24:	b2db      	uxtb	r3, r3
 8000c26:	00db      	lsls	r3, r3, #3
 8000c28:	737b      	strb	r3, [r7, #13]
	 //2^6 = 64  (0 tot 63)
	 //2^5 = 32 (0 tot 31)
	  //r = (r * 255) / 31;
	  //g = (g * 255) / 63;
	  //b = (b * 255) / 31;
	 writedata(r);
 8000c2a:	7bfb      	ldrb	r3, [r7, #15]
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	f7ff fe9d 	bl	800096c <writedata>
	 writedata(g);
 8000c32:	7bbb      	ldrb	r3, [r7, #14]
 8000c34:	4618      	mov	r0, r3
 8000c36:	f7ff fe99 	bl	800096c <writedata>
	 writedata(b);
 8000c3a:	7b7b      	ldrb	r3, [r7, #13]
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	f7ff fe95 	bl	800096c <writedata>
	  //HAL_SPI_Transmit(&mySPI, &r, 1, HAL_MAX_DELAY); //Size = bytes
	  //HAL_SPI_Transmit(&mySPI, &g, 1, HAL_MAX_DELAY); //Size = bytes
	  //HAL_SPI_Transmit(&mySPI, &b, 1, HAL_MAX_DELAY); //Size = bytes
}
 8000c42:	bf00      	nop
 8000c44:	3710      	adds	r7, #16
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bd80      	pop	{r7, pc}
	...

08000c4c <fillRect>:



}
void fillRect(uint16_t x, uint16_t y , uint16_t w , uint16_t h, uint16_t color)
{
 8000c4c:	b590      	push	{r4, r7, lr}
 8000c4e:	b083      	sub	sp, #12
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	4604      	mov	r4, r0
 8000c54:	4608      	mov	r0, r1
 8000c56:	4611      	mov	r1, r2
 8000c58:	461a      	mov	r2, r3
 8000c5a:	4623      	mov	r3, r4
 8000c5c:	80fb      	strh	r3, [r7, #6]
 8000c5e:	4603      	mov	r3, r0
 8000c60:	80bb      	strh	r3, [r7, #4]
 8000c62:	460b      	mov	r3, r1
 8000c64:	807b      	strh	r3, [r7, #2]
 8000c66:	4613      	mov	r3, r2
 8000c68:	803b      	strh	r3, [r7, #0]
	if ((x >= Display_width) || (y >= Display_height))
 8000c6a:	4b2a      	ldr	r3, [pc, #168]	; (8000d14 <fillRect+0xc8>)
 8000c6c:	881b      	ldrh	r3, [r3, #0]
 8000c6e:	88fa      	ldrh	r2, [r7, #6]
 8000c70:	429a      	cmp	r2, r3
 8000c72:	d24a      	bcs.n	8000d0a <fillRect+0xbe>
 8000c74:	4b28      	ldr	r3, [pc, #160]	; (8000d18 <fillRect+0xcc>)
 8000c76:	881b      	ldrh	r3, [r3, #0]
 8000c78:	88ba      	ldrh	r2, [r7, #4]
 8000c7a:	429a      	cmp	r2, r3
 8000c7c:	d245      	bcs.n	8000d0a <fillRect+0xbe>
		return;
	if ((x + w - 1) >= Display_width)
 8000c7e:	88fa      	ldrh	r2, [r7, #6]
 8000c80:	887b      	ldrh	r3, [r7, #2]
 8000c82:	4413      	add	r3, r2
 8000c84:	4a23      	ldr	r2, [pc, #140]	; (8000d14 <fillRect+0xc8>)
 8000c86:	8812      	ldrh	r2, [r2, #0]
 8000c88:	4293      	cmp	r3, r2
 8000c8a:	dd04      	ble.n	8000c96 <fillRect+0x4a>
		w = Display_width - x;
 8000c8c:	4b21      	ldr	r3, [pc, #132]	; (8000d14 <fillRect+0xc8>)
 8000c8e:	881a      	ldrh	r2, [r3, #0]
 8000c90:	88fb      	ldrh	r3, [r7, #6]
 8000c92:	1ad3      	subs	r3, r2, r3
 8000c94:	807b      	strh	r3, [r7, #2]
	if ((y + h - 1) >= Display_height)
 8000c96:	88ba      	ldrh	r2, [r7, #4]
 8000c98:	883b      	ldrh	r3, [r7, #0]
 8000c9a:	4413      	add	r3, r2
 8000c9c:	4a1e      	ldr	r2, [pc, #120]	; (8000d18 <fillRect+0xcc>)
 8000c9e:	8812      	ldrh	r2, [r2, #0]
 8000ca0:	4293      	cmp	r3, r2
 8000ca2:	dd04      	ble.n	8000cae <fillRect+0x62>
		h = Display_height - y;
 8000ca4:	4b1c      	ldr	r3, [pc, #112]	; (8000d18 <fillRect+0xcc>)
 8000ca6:	881a      	ldrh	r2, [r3, #0]
 8000ca8:	88bb      	ldrh	r3, [r7, #4]
 8000caa:	1ad3      	subs	r3, r2, r3
 8000cac:	803b      	strh	r3, [r7, #0]

	setAddrWindow(x, y, x + w - 1, y + h - 1);
 8000cae:	88fa      	ldrh	r2, [r7, #6]
 8000cb0:	887b      	ldrh	r3, [r7, #2]
 8000cb2:	4413      	add	r3, r2
 8000cb4:	b29b      	uxth	r3, r3
 8000cb6:	3b01      	subs	r3, #1
 8000cb8:	b29c      	uxth	r4, r3
 8000cba:	88ba      	ldrh	r2, [r7, #4]
 8000cbc:	883b      	ldrh	r3, [r7, #0]
 8000cbe:	4413      	add	r3, r2
 8000cc0:	b29b      	uxth	r3, r3
 8000cc2:	3b01      	subs	r3, #1
 8000cc4:	b29b      	uxth	r3, r3
 8000cc6:	88b9      	ldrh	r1, [r7, #4]
 8000cc8:	88f8      	ldrh	r0, [r7, #6]
 8000cca:	4622      	mov	r2, r4
 8000ccc:	f7ff fe6a 	bl	80009a4 <setAddrWindow>

	DC_HIGH();
 8000cd0:	f7ff fd30 	bl	8000734 <DC_HIGH>
	CS_LOW();
 8000cd4:	f7ff fd22 	bl	800071c <CS_LOW>

	for (y = h; y > 0; y--) {
 8000cd8:	883b      	ldrh	r3, [r7, #0]
 8000cda:	80bb      	strh	r3, [r7, #4]
 8000cdc:	e00f      	b.n	8000cfe <fillRect+0xb2>
		for (x = w; x > 0; x--) {
 8000cde:	887b      	ldrh	r3, [r7, #2]
 8000ce0:	80fb      	strh	r3, [r7, #6]
 8000ce2:	e006      	b.n	8000cf2 <fillRect+0xa6>

			write16BitColor(color);
 8000ce4:	8b3b      	ldrh	r3, [r7, #24]
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	f7ff ff88 	bl	8000bfc <write16BitColor>
		for (x = w; x > 0; x--) {
 8000cec:	88fb      	ldrh	r3, [r7, #6]
 8000cee:	3b01      	subs	r3, #1
 8000cf0:	80fb      	strh	r3, [r7, #6]
 8000cf2:	88fb      	ldrh	r3, [r7, #6]
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d1f5      	bne.n	8000ce4 <fillRect+0x98>
	for (y = h; y > 0; y--) {
 8000cf8:	88bb      	ldrh	r3, [r7, #4]
 8000cfa:	3b01      	subs	r3, #1
 8000cfc:	80bb      	strh	r3, [r7, #4]
 8000cfe:	88bb      	ldrh	r3, [r7, #4]
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d1ec      	bne.n	8000cde <fillRect+0x92>
		}
	}

	CS_HIGH();
 8000d04:	f7ff fcfe 	bl	8000704 <CS_HIGH>
 8000d08:	e000      	b.n	8000d0c <fillRect+0xc0>
		return;
 8000d0a:	bf00      	nop



}
 8000d0c:	370c      	adds	r7, #12
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bd90      	pop	{r4, r7, pc}
 8000d12:	bf00      	nop
 8000d14:	20000002 	.word	0x20000002
 8000d18:	20000004 	.word	0x20000004

08000d1c <DevicePressed>:


void DevicePressed(uint8_t *apparaat)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b088      	sub	sp, #32
 8000d20:	af04      	add	r7, sp, #16
 8000d22:	6078      	str	r0, [r7, #4]
	uint16_t color;
	uint16_t contentcolor;
	uint8_t device = *apparaat;
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	781b      	ldrb	r3, [r3, #0]
 8000d28:	72bb      	strb	r3, [r7, #10]
	switch(device)
 8000d2a:	7abb      	ldrb	r3, [r7, #10]
 8000d2c:	3b01      	subs	r3, #1
 8000d2e:	2b03      	cmp	r3, #3
 8000d30:	d819      	bhi.n	8000d66 <DevicePressed+0x4a>
 8000d32:	a201      	add	r2, pc, #4	; (adr r2, 8000d38 <DevicePressed+0x1c>)
 8000d34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d38:	08000d49 	.word	0x08000d49
 8000d3c:	08000d4f 	.word	0x08000d4f
 8000d40:	08000d57 	.word	0x08000d57
 8000d44:	08000d5f 	.word	0x08000d5f
	{
	case 1:
		color = ILI9488_BLUE;
 8000d48:	231f      	movs	r3, #31
 8000d4a:	81fb      	strh	r3, [r7, #14]
		break;
 8000d4c:	e00c      	b.n	8000d68 <DevicePressed+0x4c>
	case 2:
		color = ILI9488_YELLOW;
 8000d4e:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8000d52:	81fb      	strh	r3, [r7, #14]
		break;
 8000d54:	e008      	b.n	8000d68 <DevicePressed+0x4c>
	case 3:
		color = ILI9488_GREEN;
 8000d56:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8000d5a:	81fb      	strh	r3, [r7, #14]
		break;
 8000d5c:	e004      	b.n	8000d68 <DevicePressed+0x4c>
	case 4:
		color = ILI9488_WHITE;
 8000d5e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000d62:	81fb      	strh	r3, [r7, #14]
		break;
 8000d64:	e000      	b.n	8000d68 <DevicePressed+0x4c>
	default:
		break;
 8000d66:	bf00      	nop
	}
	for(uint8_t knop = 1; knop <= 14; knop++)
 8000d68:	2301      	movs	r3, #1
 8000d6a:	72fb      	strb	r3, [r7, #11]
 8000d6c:	e107      	b.n	8000f7e <DevicePressed+0x262>
	{
		if(knop <= 12)
 8000d6e:	7afb      	ldrb	r3, [r7, #11]
 8000d70:	2b0c      	cmp	r3, #12
 8000d72:	d81d      	bhi.n	8000db0 <DevicePressed+0x94>
		{
			uint8_t berekening = ((device-1) * 12) + knop-1 ;
 8000d74:	7abb      	ldrb	r3, [r7, #10]
 8000d76:	461a      	mov	r2, r3
 8000d78:	0052      	lsls	r2, r2, #1
 8000d7a:	4413      	add	r3, r2
 8000d7c:	009b      	lsls	r3, r3, #2
 8000d7e:	b2da      	uxtb	r2, r3
 8000d80:	7afb      	ldrb	r3, [r7, #11]
 8000d82:	4413      	add	r3, r2
 8000d84:	b2db      	uxtb	r3, r3
 8000d86:	3b0d      	subs	r3, #13
 8000d88:	727b      	strb	r3, [r7, #9]
			if(lengte_signaal[berekening] != 0)
 8000d8a:	7a7b      	ldrb	r3, [r7, #9]
 8000d8c:	4a80      	ldr	r2, [pc, #512]	; (8000f90 <DevicePressed+0x274>)
 8000d8e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d00a      	beq.n	8000dac <DevicePressed+0x90>
			{
				if(knop == 1)
 8000d96:	7afb      	ldrb	r3, [r7, #11]
 8000d98:	2b01      	cmp	r3, #1
 8000d9a:	d103      	bne.n	8000da4 <DevicePressed+0x88>
				{
					contentcolor = ILI9488_RED;
 8000d9c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8000da0:	81bb      	strh	r3, [r7, #12]
 8000da2:	e005      	b.n	8000db0 <DevicePressed+0x94>
				}
				else
				{
					contentcolor = ILI9488_DARKGREY;
 8000da4:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8000da8:	81bb      	strh	r3, [r7, #12]
 8000daa:	e001      	b.n	8000db0 <DevicePressed+0x94>
				}

			}
			else
			{
			contentcolor = ILI9488_BLACK;
 8000dac:	2300      	movs	r3, #0
 8000dae:	81bb      	strh	r3, [r7, #12]
			}
		}
		switch(knop)
 8000db0:	7afb      	ldrb	r3, [r7, #11]
 8000db2:	3b01      	subs	r3, #1
 8000db4:	2b0d      	cmp	r3, #13
 8000db6:	f200 80de 	bhi.w	8000f76 <DevicePressed+0x25a>
 8000dba:	a201      	add	r2, pc, #4	; (adr r2, 8000dc0 <DevicePressed+0xa4>)
 8000dbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000dc0:	08000df9 	.word	0x08000df9
 8000dc4:	08000e13 	.word	0x08000e13
 8000dc8:	08000e2d 	.word	0x08000e2d
 8000dcc:	08000e47 	.word	0x08000e47
 8000dd0:	08000e61 	.word	0x08000e61
 8000dd4:	08000e7b 	.word	0x08000e7b
 8000dd8:	08000e95 	.word	0x08000e95
 8000ddc:	08000eaf 	.word	0x08000eaf
 8000de0:	08000ecb 	.word	0x08000ecb
 8000de4:	08000ee7 	.word	0x08000ee7
 8000de8:	08000f03 	.word	0x08000f03
 8000dec:	08000f1f 	.word	0x08000f1f
 8000df0:	08000f3b 	.word	0x08000f3b
 8000df4:	08000f59 	.word	0x08000f59
		{
		case 1:
			//Power
			DrawRectangle(23, 50, 75, 75, color, contentcolor, 5);
 8000df8:	2305      	movs	r3, #5
 8000dfa:	9302      	str	r3, [sp, #8]
 8000dfc:	89bb      	ldrh	r3, [r7, #12]
 8000dfe:	9301      	str	r3, [sp, #4]
 8000e00:	89fb      	ldrh	r3, [r7, #14]
 8000e02:	9300      	str	r3, [sp, #0]
 8000e04:	234b      	movs	r3, #75	; 0x4b
 8000e06:	224b      	movs	r2, #75	; 0x4b
 8000e08:	2132      	movs	r1, #50	; 0x32
 8000e0a:	2017      	movs	r0, #23
 8000e0c:	f7ff fe37 	bl	8000a7e <DrawRectangle>
			break;
 8000e10:	e0b2      	b.n	8000f78 <DevicePressed+0x25c>
		case 2:
			//Src
			DrawRectangle(219, 50, 75, 75, color, contentcolor, 5);
 8000e12:	2305      	movs	r3, #5
 8000e14:	9302      	str	r3, [sp, #8]
 8000e16:	89bb      	ldrh	r3, [r7, #12]
 8000e18:	9301      	str	r3, [sp, #4]
 8000e1a:	89fb      	ldrh	r3, [r7, #14]
 8000e1c:	9300      	str	r3, [sp, #0]
 8000e1e:	234b      	movs	r3, #75	; 0x4b
 8000e20:	224b      	movs	r2, #75	; 0x4b
 8000e22:	2132      	movs	r1, #50	; 0x32
 8000e24:	20db      	movs	r0, #219	; 0xdb
 8000e26:	f7ff fe2a 	bl	8000a7e <DrawRectangle>
			break;
 8000e2a:	e0a5      	b.n	8000f78 <DevicePressed+0x25c>
		case 3:
			//^
			DrawRectangle(121, 80, 75, 75, color, contentcolor, 5);
 8000e2c:	2305      	movs	r3, #5
 8000e2e:	9302      	str	r3, [sp, #8]
 8000e30:	89bb      	ldrh	r3, [r7, #12]
 8000e32:	9301      	str	r3, [sp, #4]
 8000e34:	89fb      	ldrh	r3, [r7, #14]
 8000e36:	9300      	str	r3, [sp, #0]
 8000e38:	234b      	movs	r3, #75	; 0x4b
 8000e3a:	224b      	movs	r2, #75	; 0x4b
 8000e3c:	2150      	movs	r1, #80	; 0x50
 8000e3e:	2079      	movs	r0, #121	; 0x79
 8000e40:	f7ff fe1d 	bl	8000a7e <DrawRectangle>
			break;
 8000e44:	e098      	b.n	8000f78 <DevicePressed+0x25c>
		case 4:
			//<
			DrawRectangle(23, 165, 75, 75, color, contentcolor, 5);
 8000e46:	2305      	movs	r3, #5
 8000e48:	9302      	str	r3, [sp, #8]
 8000e4a:	89bb      	ldrh	r3, [r7, #12]
 8000e4c:	9301      	str	r3, [sp, #4]
 8000e4e:	89fb      	ldrh	r3, [r7, #14]
 8000e50:	9300      	str	r3, [sp, #0]
 8000e52:	234b      	movs	r3, #75	; 0x4b
 8000e54:	224b      	movs	r2, #75	; 0x4b
 8000e56:	21a5      	movs	r1, #165	; 0xa5
 8000e58:	2017      	movs	r0, #23
 8000e5a:	f7ff fe10 	bl	8000a7e <DrawRectangle>
			break;
 8000e5e:	e08b      	b.n	8000f78 <DevicePressed+0x25c>
		case 5:
			//OK
			DrawRectangle(121, 165, 75, 75, color, contentcolor, 5);
 8000e60:	2305      	movs	r3, #5
 8000e62:	9302      	str	r3, [sp, #8]
 8000e64:	89bb      	ldrh	r3, [r7, #12]
 8000e66:	9301      	str	r3, [sp, #4]
 8000e68:	89fb      	ldrh	r3, [r7, #14]
 8000e6a:	9300      	str	r3, [sp, #0]
 8000e6c:	234b      	movs	r3, #75	; 0x4b
 8000e6e:	224b      	movs	r2, #75	; 0x4b
 8000e70:	21a5      	movs	r1, #165	; 0xa5
 8000e72:	2079      	movs	r0, #121	; 0x79
 8000e74:	f7ff fe03 	bl	8000a7e <DrawRectangle>
			break;
 8000e78:	e07e      	b.n	8000f78 <DevicePressed+0x25c>
		case 6:
			//>
			DrawRectangle(219, 165, 75, 75, color, contentcolor, 5);
 8000e7a:	2305      	movs	r3, #5
 8000e7c:	9302      	str	r3, [sp, #8]
 8000e7e:	89bb      	ldrh	r3, [r7, #12]
 8000e80:	9301      	str	r3, [sp, #4]
 8000e82:	89fb      	ldrh	r3, [r7, #14]
 8000e84:	9300      	str	r3, [sp, #0]
 8000e86:	234b      	movs	r3, #75	; 0x4b
 8000e88:	224b      	movs	r2, #75	; 0x4b
 8000e8a:	21a5      	movs	r1, #165	; 0xa5
 8000e8c:	20db      	movs	r0, #219	; 0xdb
 8000e8e:	f7ff fdf6 	bl	8000a7e <DrawRectangle>
			break;
 8000e92:	e071      	b.n	8000f78 <DevicePressed+0x25c>
		case 7:
			//V
			DrawRectangle(121, 250, 75, 75, color, contentcolor, 5);
 8000e94:	2305      	movs	r3, #5
 8000e96:	9302      	str	r3, [sp, #8]
 8000e98:	89bb      	ldrh	r3, [r7, #12]
 8000e9a:	9301      	str	r3, [sp, #4]
 8000e9c:	89fb      	ldrh	r3, [r7, #14]
 8000e9e:	9300      	str	r3, [sp, #0]
 8000ea0:	234b      	movs	r3, #75	; 0x4b
 8000ea2:	224b      	movs	r2, #75	; 0x4b
 8000ea4:	21fa      	movs	r1, #250	; 0xfa
 8000ea6:	2079      	movs	r0, #121	; 0x79
 8000ea8:	f7ff fde9 	bl	8000a7e <DrawRectangle>
			break;
 8000eac:	e064      	b.n	8000f78 <DevicePressed+0x25c>
		case 8:
			//volume up
				DrawRectangle(23, 298, 75, 75, color, contentcolor, 5);
 8000eae:	2305      	movs	r3, #5
 8000eb0:	9302      	str	r3, [sp, #8]
 8000eb2:	89bb      	ldrh	r3, [r7, #12]
 8000eb4:	9301      	str	r3, [sp, #4]
 8000eb6:	89fb      	ldrh	r3, [r7, #14]
 8000eb8:	9300      	str	r3, [sp, #0]
 8000eba:	234b      	movs	r3, #75	; 0x4b
 8000ebc:	224b      	movs	r2, #75	; 0x4b
 8000ebe:	f44f 7195 	mov.w	r1, #298	; 0x12a
 8000ec2:	2017      	movs	r0, #23
 8000ec4:	f7ff fddb 	bl	8000a7e <DrawRectangle>
			break;
 8000ec8:	e056      	b.n	8000f78 <DevicePressed+0x25c>
		case 9:
			//volume down
				DrawRectangle(23, 393, 75, 75, color, contentcolor, 5);
 8000eca:	2305      	movs	r3, #5
 8000ecc:	9302      	str	r3, [sp, #8]
 8000ece:	89bb      	ldrh	r3, [r7, #12]
 8000ed0:	9301      	str	r3, [sp, #4]
 8000ed2:	89fb      	ldrh	r3, [r7, #14]
 8000ed4:	9300      	str	r3, [sp, #0]
 8000ed6:	234b      	movs	r3, #75	; 0x4b
 8000ed8:	224b      	movs	r2, #75	; 0x4b
 8000eda:	f240 1189 	movw	r1, #393	; 0x189
 8000ede:	2017      	movs	r0, #23
 8000ee0:	f7ff fdcd 	bl	8000a7e <DrawRectangle>
			break;
 8000ee4:	e048      	b.n	8000f78 <DevicePressed+0x25c>
		case 10:
			//mute
				DrawRectangle(121, 393, 75, 75, color, contentcolor, 5);
 8000ee6:	2305      	movs	r3, #5
 8000ee8:	9302      	str	r3, [sp, #8]
 8000eea:	89bb      	ldrh	r3, [r7, #12]
 8000eec:	9301      	str	r3, [sp, #4]
 8000eee:	89fb      	ldrh	r3, [r7, #14]
 8000ef0:	9300      	str	r3, [sp, #0]
 8000ef2:	234b      	movs	r3, #75	; 0x4b
 8000ef4:	224b      	movs	r2, #75	; 0x4b
 8000ef6:	f240 1189 	movw	r1, #393	; 0x189
 8000efa:	2079      	movs	r0, #121	; 0x79
 8000efc:	f7ff fdbf 	bl	8000a7e <DrawRectangle>
			break;
 8000f00:	e03a      	b.n	8000f78 <DevicePressed+0x25c>
		case 11:
			//channel up
				DrawRectangle(219, 298, 75, 75, color, contentcolor, 5);
 8000f02:	2305      	movs	r3, #5
 8000f04:	9302      	str	r3, [sp, #8]
 8000f06:	89bb      	ldrh	r3, [r7, #12]
 8000f08:	9301      	str	r3, [sp, #4]
 8000f0a:	89fb      	ldrh	r3, [r7, #14]
 8000f0c:	9300      	str	r3, [sp, #0]
 8000f0e:	234b      	movs	r3, #75	; 0x4b
 8000f10:	224b      	movs	r2, #75	; 0x4b
 8000f12:	f44f 7195 	mov.w	r1, #298	; 0x12a
 8000f16:	20db      	movs	r0, #219	; 0xdb
 8000f18:	f7ff fdb1 	bl	8000a7e <DrawRectangle>
			break;
 8000f1c:	e02c      	b.n	8000f78 <DevicePressed+0x25c>
		case 12:
			//channel down
				DrawRectangle(219, 393, 75, 75, color, contentcolor, 5);
 8000f1e:	2305      	movs	r3, #5
 8000f20:	9302      	str	r3, [sp, #8]
 8000f22:	89bb      	ldrh	r3, [r7, #12]
 8000f24:	9301      	str	r3, [sp, #4]
 8000f26:	89fb      	ldrh	r3, [r7, #14]
 8000f28:	9300      	str	r3, [sp, #0]
 8000f2a:	234b      	movs	r3, #75	; 0x4b
 8000f2c:	224b      	movs	r2, #75	; 0x4b
 8000f2e:	f240 1189 	movw	r1, #393	; 0x189
 8000f32:	20db      	movs	r0, #219	; 0xdb
 8000f34:	f7ff fda3 	bl	8000a7e <DrawRectangle>
			break;
 8000f38:	e01e      	b.n	8000f78 <DevicePressed+0x25c>
		case 13:
			//Add
				DrawRectangle(23, 245, 48, 75, ILI9488_GREENYELLOW, ILI9488_GREENYELLOW, 0);
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	9302      	str	r3, [sp, #8]
 8000f3e:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8000f42:	9301      	str	r3, [sp, #4]
 8000f44:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8000f48:	9300      	str	r3, [sp, #0]
 8000f4a:	234b      	movs	r3, #75	; 0x4b
 8000f4c:	2230      	movs	r2, #48	; 0x30
 8000f4e:	21f5      	movs	r1, #245	; 0xf5
 8000f50:	2017      	movs	r0, #23
 8000f52:	f7ff fd94 	bl	8000a7e <DrawRectangle>
			break;
 8000f56:	e00f      	b.n	8000f78 <DevicePressed+0x25c>
		case 14:
			//Delete
					DrawRectangle(219, 245, 48, 75, ILI9488_RED, ILI9488_RED, 0);
 8000f58:	2300      	movs	r3, #0
 8000f5a:	9302      	str	r3, [sp, #8]
 8000f5c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8000f60:	9301      	str	r3, [sp, #4]
 8000f62:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8000f66:	9300      	str	r3, [sp, #0]
 8000f68:	234b      	movs	r3, #75	; 0x4b
 8000f6a:	2230      	movs	r2, #48	; 0x30
 8000f6c:	21f5      	movs	r1, #245	; 0xf5
 8000f6e:	20db      	movs	r0, #219	; 0xdb
 8000f70:	f7ff fd85 	bl	8000a7e <DrawRectangle>
			break;
 8000f74:	e000      	b.n	8000f78 <DevicePressed+0x25c>
		default:
			break;
 8000f76:	bf00      	nop
	for(uint8_t knop = 1; knop <= 14; knop++)
 8000f78:	7afb      	ldrb	r3, [r7, #11]
 8000f7a:	3301      	adds	r3, #1
 8000f7c:	72fb      	strb	r3, [r7, #11]
 8000f7e:	7afb      	ldrb	r3, [r7, #11]
 8000f80:	2b0e      	cmp	r3, #14
 8000f82:	f67f aef4 	bls.w	8000d6e <DevicePressed+0x52>





}
 8000f86:	bf00      	nop
 8000f88:	bf00      	nop
 8000f8a:	3710      	adds	r7, #16
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bd80      	pop	{r7, pc}
 8000f90:	2000009c 	.word	0x2000009c

08000f94 <ButtonPressed_Dev1>:
void ButtonPressed_Dev1(uint8_t *but)
{
 8000f94:	b480      	push	{r7}
 8000f96:	b085      	sub	sp, #20
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
// uint8_t device=1;
 uint8_t button=*but;
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	781b      	ldrb	r3, [r3, #0]
 8000fa0:	73fb      	strb	r3, [r7, #15]
 if(button >= 13)
 8000fa2:	7bfb      	ldrb	r3, [r7, #15]
 8000fa4:	2b0c      	cmp	r3, #12
 8000fa6:	d902      	bls.n	8000fae <ButtonPressed_Dev1+0x1a>
 {
	 switch(button)
 8000fa8:	7bfb      	ldrb	r3, [r7, #15]
 8000faa:	2b0d      	cmp	r3, #13
		 //Add
		 break;
	 case 14: //Del
		 //Delete
	 default:
		 break;
 8000fac:	bf00      	nop
//	 uint16_t *t;
//	 t = TakefromGeheugen(device, button);
//	 printf("%d\r\n", t[0]);
 }

 }
 8000fae:	bf00      	nop
 8000fb0:	3714      	adds	r7, #20
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb8:	4770      	bx	lr

08000fba <ButtonPressed_Dev2>:
void ButtonPressed_Dev2(uint8_t *but)
{
 8000fba:	b480      	push	{r7}
 8000fbc:	b085      	sub	sp, #20
 8000fbe:	af00      	add	r7, sp, #0
 8000fc0:	6078      	str	r0, [r7, #4]
// uint8_t device=1;
 uint8_t button=*but;
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	781b      	ldrb	r3, [r3, #0]
 8000fc6:	73fb      	strb	r3, [r7, #15]
 if(button >= 13)
 8000fc8:	7bfb      	ldrb	r3, [r7, #15]
 8000fca:	2b0c      	cmp	r3, #12
 8000fcc:	d902      	bls.n	8000fd4 <ButtonPressed_Dev2+0x1a>
 {
	 switch(button)
 8000fce:	7bfb      	ldrb	r3, [r7, #15]
 8000fd0:	2b0d      	cmp	r3, #13
		 //Add
		 break;
	 case 14: //Del
		 //Delete
	 default:
		 break;
 8000fd2:	bf00      	nop
//	 uint16_t *t;
//	 t = TakefromGeheugen(device, button);
//	 printf("%d\r\n", t[0]);
 }

 }
 8000fd4:	bf00      	nop
 8000fd6:	3714      	adds	r7, #20
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fde:	4770      	bx	lr

08000fe0 <ButtonPressed_Dev3>:
void ButtonPressed_Dev3(uint8_t *but)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	b085      	sub	sp, #20
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
// uint8_t device=1;
 uint8_t button=*but;
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	781b      	ldrb	r3, [r3, #0]
 8000fec:	73fb      	strb	r3, [r7, #15]
 if(button >= 13)
 8000fee:	7bfb      	ldrb	r3, [r7, #15]
 8000ff0:	2b0c      	cmp	r3, #12
 8000ff2:	d902      	bls.n	8000ffa <ButtonPressed_Dev3+0x1a>
 {
	 switch(button)
 8000ff4:	7bfb      	ldrb	r3, [r7, #15]
 8000ff6:	2b0d      	cmp	r3, #13
		 //Add
		 break;
	 case 14: //Del
		 //Delete
	 default:
		 break;
 8000ff8:	bf00      	nop
//	 uint16_t *t;
//	 t = TakefromGeheugen(device, button);
//	 printf("%d\r\n", t[0]);
 }

 }
 8000ffa:	bf00      	nop
 8000ffc:	3714      	adds	r7, #20
 8000ffe:	46bd      	mov	sp, r7
 8001000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001004:	4770      	bx	lr

08001006 <ButtonPressed_Dev4>:
void ButtonPressed_Dev4(uint8_t *but)
{
 8001006:	b480      	push	{r7}
 8001008:	b085      	sub	sp, #20
 800100a:	af00      	add	r7, sp, #0
 800100c:	6078      	str	r0, [r7, #4]
// uint8_t device=1;
 uint8_t button=*but;
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	781b      	ldrb	r3, [r3, #0]
 8001012:	73fb      	strb	r3, [r7, #15]
 if(button >= 13)
 8001014:	7bfb      	ldrb	r3, [r7, #15]
 8001016:	2b0c      	cmp	r3, #12
 8001018:	d902      	bls.n	8001020 <ButtonPressed_Dev4+0x1a>
 {
	 switch(button)
 800101a:	7bfb      	ldrb	r3, [r7, #15]
 800101c:	2b0d      	cmp	r3, #13
		 //Add
		 break;
	 case 14: //Del
		 //Delete
	 default:
		 break;
 800101e:	bf00      	nop
//	 uint16_t *t;
//	 t = TakefromGeheugen(device, button);
//	 printf("%d\r\n", t[0]);
 }

 }
 8001020:	bf00      	nop
 8001022:	3714      	adds	r7, #20
 8001024:	46bd      	mov	sp, r7
 8001026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102a:	4770      	bx	lr

0800102c <mainscreen>:
void mainscreen()
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b084      	sub	sp, #16
 8001030:	af04      	add	r7, sp, #16
	if(UartScreen == 1)
 8001032:	4b28      	ldr	r3, [pc, #160]	; (80010d4 <mainscreen+0xa8>)
 8001034:	781b      	ldrb	r3, [r3, #0]
 8001036:	2b01      	cmp	r3, #1
 8001038:	d102      	bne.n	8001040 <mainscreen+0x14>
		{
		printf("Even geduld...\r\n");
 800103a:	4827      	ldr	r0, [pc, #156]	; (80010d8 <mainscreen+0xac>)
 800103c:	f005 fd52 	bl	8006ae4 <puts>
		}
	fillRect(0, 0, 320, 480, 0x0000);
 8001040:	2300      	movs	r3, #0
 8001042:	9300      	str	r3, [sp, #0]
 8001044:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8001048:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800104c:	2100      	movs	r1, #0
 800104e:	2000      	movs	r0, #0
 8001050:	f7ff fdfc 	bl	8000c4c <fillRect>
	//DrawImage(0, 0, POWERBUTTON_DATA_X_PIXEL, POWERBUTTON_DATA_Y_PIXEL, POWERBUTTON_DATA);
	//DrawRectangle(x, y, h, w, color, contentcolor, border)
	DrawRectangle(0, 0, 40, 79, ILI9488_BLUE, ILI9488_BLUE, 0);
 8001054:	2300      	movs	r3, #0
 8001056:	9302      	str	r3, [sp, #8]
 8001058:	231f      	movs	r3, #31
 800105a:	9301      	str	r3, [sp, #4]
 800105c:	231f      	movs	r3, #31
 800105e:	9300      	str	r3, [sp, #0]
 8001060:	234f      	movs	r3, #79	; 0x4f
 8001062:	2228      	movs	r2, #40	; 0x28
 8001064:	2100      	movs	r1, #0
 8001066:	2000      	movs	r0, #0
 8001068:	f7ff fd09 	bl	8000a7e <DrawRectangle>
	DrawRectangle(80, 0, 40, 79, ILI9488_YELLOW, ILI9488_YELLOW, 0);
 800106c:	2300      	movs	r3, #0
 800106e:	9302      	str	r3, [sp, #8]
 8001070:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001074:	9301      	str	r3, [sp, #4]
 8001076:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800107a:	9300      	str	r3, [sp, #0]
 800107c:	234f      	movs	r3, #79	; 0x4f
 800107e:	2228      	movs	r2, #40	; 0x28
 8001080:	2100      	movs	r1, #0
 8001082:	2050      	movs	r0, #80	; 0x50
 8001084:	f7ff fcfb 	bl	8000a7e <DrawRectangle>
	DrawRectangle(160, 0, 40, 79, ILI9488_GREEN, ILI9488_GREEN, 0);
 8001088:	2300      	movs	r3, #0
 800108a:	9302      	str	r3, [sp, #8]
 800108c:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8001090:	9301      	str	r3, [sp, #4]
 8001092:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8001096:	9300      	str	r3, [sp, #0]
 8001098:	234f      	movs	r3, #79	; 0x4f
 800109a:	2228      	movs	r2, #40	; 0x28
 800109c:	2100      	movs	r1, #0
 800109e:	20a0      	movs	r0, #160	; 0xa0
 80010a0:	f7ff fced 	bl	8000a7e <DrawRectangle>
	DrawRectangle(240, 0, 40, 79, ILI9488_WHITE, ILI9488_WHITE, 0);
 80010a4:	2300      	movs	r3, #0
 80010a6:	9302      	str	r3, [sp, #8]
 80010a8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80010ac:	9301      	str	r3, [sp, #4]
 80010ae:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80010b2:	9300      	str	r3, [sp, #0]
 80010b4:	234f      	movs	r3, #79	; 0x4f
 80010b6:	2228      	movs	r2, #40	; 0x28
 80010b8:	2100      	movs	r1, #0
 80010ba:	20f0      	movs	r0, #240	; 0xf0
 80010bc:	f7ff fcdf 	bl	8000a7e <DrawRectangle>

	if(UartScreen == 1)
 80010c0:	4b04      	ldr	r3, [pc, #16]	; (80010d4 <mainscreen+0xa8>)
 80010c2:	781b      	ldrb	r3, [r3, #0]
 80010c4:	2b01      	cmp	r3, #1
 80010c6:	d102      	bne.n	80010ce <mainscreen+0xa2>
	{
	printf("MainScreen ingeladen\r\n");
 80010c8:	4804      	ldr	r0, [pc, #16]	; (80010dc <mainscreen+0xb0>)
 80010ca:	f005 fd0b 	bl	8006ae4 <puts>
	}
}
 80010ce:	bf00      	nop
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bd80      	pop	{r7, pc}
 80010d4:	20000000 	.word	0x20000000
 80010d8:	08007d58 	.word	0x08007d58
 80010dc:	08007d68 	.word	0x08007d68

080010e0 <Interrupt_flank>:
uint16_t lengte_signaal[48];
uint16_t tijd[500];
uint8_t commando = 0;

void Interrupt_flank()
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	af00      	add	r7, sp, #0

	if(IR_READ_flag == 1)
 80010e4:	4b13      	ldr	r3, [pc, #76]	; (8001134 <Interrupt_flank+0x54>)
 80010e6:	781b      	ldrb	r3, [r3, #0]
 80010e8:	2b01      	cmp	r3, #1
 80010ea:	d11e      	bne.n	800112a <Interrupt_flank+0x4a>
	{
		HAL_TIM_Base_Stop(&TIM_1us); //timer stoppen
 80010ec:	4812      	ldr	r0, [pc, #72]	; (8001138 <Interrupt_flank+0x58>)
 80010ee:	f004 f843 	bl	8005178 <HAL_TIM_Base_Stop>
		//timer in het begin is steeds nul maar deze hebben we niet nodig

		tijd[pulsecounter] = TIM_1us.Instance -> CNT; //timer opslaan
 80010f2:	4b11      	ldr	r3, [pc, #68]	; (8001138 <Interrupt_flank+0x58>)
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80010f8:	4b10      	ldr	r3, [pc, #64]	; (800113c <Interrupt_flank+0x5c>)
 80010fa:	881b      	ldrh	r3, [r3, #0]
 80010fc:	461a      	mov	r2, r3
 80010fe:	b289      	uxth	r1, r1
 8001100:	4b0f      	ldr	r3, [pc, #60]	; (8001140 <Interrupt_flank+0x60>)
 8001102:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		lengte = pulsecounter;
 8001106:	4b0d      	ldr	r3, [pc, #52]	; (800113c <Interrupt_flank+0x5c>)
 8001108:	881a      	ldrh	r2, [r3, #0]
 800110a:	4b0e      	ldr	r3, [pc, #56]	; (8001144 <Interrupt_flank+0x64>)
 800110c:	801a      	strh	r2, [r3, #0]
		pulsecounter++;
 800110e:	4b0b      	ldr	r3, [pc, #44]	; (800113c <Interrupt_flank+0x5c>)
 8001110:	881b      	ldrh	r3, [r3, #0]
 8001112:	3301      	adds	r3, #1
 8001114:	b29a      	uxth	r2, r3
 8001116:	4b09      	ldr	r3, [pc, #36]	; (800113c <Interrupt_flank+0x5c>)
 8001118:	801a      	strh	r2, [r3, #0]
		TIM_1us.Instance -> CNT = 0;
 800111a:	4b07      	ldr	r3, [pc, #28]	; (8001138 <Interrupt_flank+0x58>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	2200      	movs	r2, #0
 8001120:	625a      	str	r2, [r3, #36]	; 0x24
		HAL_TIM_Base_Start(&TIM_1us);
 8001122:	4805      	ldr	r0, [pc, #20]	; (8001138 <Interrupt_flank+0x58>)
 8001124:	f003 ffb8 	bl	8005098 <HAL_TIM_Base_Start>
	else
	{
		printf("ik kan niet werken, aangezien ik uit sta\r\n");
	}

}
 8001128:	e002      	b.n	8001130 <Interrupt_flank+0x50>
		printf("ik kan niet werken, aangezien ik uit sta\r\n");
 800112a:	4807      	ldr	r0, [pc, #28]	; (8001148 <Interrupt_flank+0x68>)
 800112c:	f005 fcda 	bl	8006ae4 <puts>
}
 8001130:	bf00      	nop
 8001132:	bd80      	pop	{r7, pc}
 8001134:	20000096 	.word	0x20000096
 8001138:	200005a4 	.word	0x200005a4
 800113c:	20000006 	.word	0x20000006
 8001140:	200000fc 	.word	0x200000fc
 8001144:	20000098 	.word	0x20000098
 8001148:	08007d80 	.word	0x08007d80

0800114c <IR_Carrier_OFF>:
void IR_Carrier_ON()
{
	HAL_TIM_PWM_Start(&TIM_PWM_CARRIER, TIM_PWM_CARRIER_CHANNEL);
}
void IR_Carrier_OFF()
{
 800114c:	b580      	push	{r7, lr}
 800114e:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Stop(&TIM_PWM_CARRIER, TIM_PWM_CARRIER_CHANNEL);
 8001150:	2104      	movs	r1, #4
 8001152:	4802      	ldr	r0, [pc, #8]	; (800115c <IR_Carrier_OFF+0x10>)
 8001154:	f004 f88e 	bl	8005274 <HAL_TIM_PWM_Stop>
}
 8001158:	bf00      	nop
 800115a:	bd80      	pop	{r7, pc}
 800115c:	200005f0 	.word	0x200005f0

08001160 <InitTouch>:
uint16_t X_waarde;
uint16_t OldX;
uint16_t OldY;

void InitTouch()
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b088      	sub	sp, #32
 8001164:	af02      	add	r7, sp, #8
	uint16_t device_address_write = 0xBA;
 8001166:	23ba      	movs	r3, #186	; 0xba
 8001168:	82fb      	strh	r3, [r7, #22]
	uint16_t device_address_read = 0xBB;
 800116a:	23bb      	movs	r3, #187	; 0xbb
 800116c:	82bb      	strh	r3, [r7, #20]
	uint8_t dataWrite[] = {0x81,0x40};
 800116e:	f244 0381 	movw	r3, #16513	; 0x4081
 8001172:	823b      	strh	r3, [r7, #16]
	uint8_t ontvangen[11];
	HAL_I2C_Master_Transmit(&hi2c1, device_address_write, 0, 0 , HAL_MAX_DELAY); //new
 8001174:	8af9      	ldrh	r1, [r7, #22]
 8001176:	f04f 33ff 	mov.w	r3, #4294967295
 800117a:	9300      	str	r3, [sp, #0]
 800117c:	2300      	movs	r3, #0
 800117e:	2200      	movs	r2, #0
 8001180:	480c      	ldr	r0, [pc, #48]	; (80011b4 <InitTouch+0x54>)
 8001182:	f001 fb51 	bl	8002828 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Transmit(&hi2c1, device_address_write, dataWrite, 2 , HAL_MAX_DELAY);
 8001186:	f107 0210 	add.w	r2, r7, #16
 800118a:	8af9      	ldrh	r1, [r7, #22]
 800118c:	f04f 33ff 	mov.w	r3, #4294967295
 8001190:	9300      	str	r3, [sp, #0]
 8001192:	2302      	movs	r3, #2
 8001194:	4807      	ldr	r0, [pc, #28]	; (80011b4 <InitTouch+0x54>)
 8001196:	f001 fb47 	bl	8002828 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1, device_address_read, ontvangen, 11, HAL_MAX_DELAY); //
 800119a:	1d3a      	adds	r2, r7, #4
 800119c:	8ab9      	ldrh	r1, [r7, #20]
 800119e:	f04f 33ff 	mov.w	r3, #4294967295
 80011a2:	9300      	str	r3, [sp, #0]
 80011a4:	230b      	movs	r3, #11
 80011a6:	4803      	ldr	r0, [pc, #12]	; (80011b4 <InitTouch+0x54>)
 80011a8:	f001 fc32 	bl	8002a10 <HAL_I2C_Master_Receive>
}
 80011ac:	bf00      	nop
 80011ae:	3718      	adds	r7, #24
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bd80      	pop	{r7, pc}
 80011b4:	200004ec 	.word	0x200004ec

080011b8 <Touch>:
void Touch()
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b08a      	sub	sp, #40	; 0x28
 80011bc:	af04      	add	r7, sp, #16
	uint16_t device_address_write = 0xBA;
 80011be:	23ba      	movs	r3, #186	; 0xba
 80011c0:	82fb      	strh	r3, [r7, #22]
	uint16_t device_address_read = 0xBB;
 80011c2:	23bb      	movs	r3, #187	; 0xbb
 80011c4:	82bb      	strh	r3, [r7, #20]
	uint8_t nulladdress = 0x00;
 80011c6:	2300      	movs	r3, #0
 80011c8:	74fb      	strb	r3, [r7, #19]





		HAL_Delay(5);
 80011ca:	2005      	movs	r0, #5
 80011cc:	f000 ff7c 	bl	80020c8 <HAL_Delay>
		HAL_I2C_Mem_Read(&myI2C, device_address_read, 0x814E, 2, buffer1, 1, HAL_MAX_DELAY);
 80011d0:	8ab9      	ldrh	r1, [r7, #20]
 80011d2:	f04f 33ff 	mov.w	r3, #4294967295
 80011d6:	9302      	str	r3, [sp, #8]
 80011d8:	2301      	movs	r3, #1
 80011da:	9301      	str	r3, [sp, #4]
 80011dc:	1d3b      	adds	r3, r7, #4
 80011de:	9300      	str	r3, [sp, #0]
 80011e0:	2302      	movs	r3, #2
 80011e2:	f248 124e 	movw	r2, #33102	; 0x814e
 80011e6:	482b      	ldr	r0, [pc, #172]	; (8001294 <Touch+0xdc>)
 80011e8:	f001 fe1c 	bl	8002e24 <HAL_I2C_Mem_Read>
		if(buffer1[0] != 0x00)
 80011ec:	793b      	ldrb	r3, [r7, #4]
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d048      	beq.n	8001284 <Touch+0xcc>
		{
			HAL_I2C_Mem_Read(&myI2C, device_address_read, 0x814F, 2, buffer, 12, HAL_MAX_DELAY);
 80011f2:	8ab9      	ldrh	r1, [r7, #20]
 80011f4:	f04f 33ff 	mov.w	r3, #4294967295
 80011f8:	9302      	str	r3, [sp, #8]
 80011fa:	230c      	movs	r3, #12
 80011fc:	9301      	str	r3, [sp, #4]
 80011fe:	1d3b      	adds	r3, r7, #4
 8001200:	9300      	str	r3, [sp, #0]
 8001202:	2302      	movs	r3, #2
 8001204:	f248 124f 	movw	r2, #33103	; 0x814f
 8001208:	4822      	ldr	r0, [pc, #136]	; (8001294 <Touch+0xdc>)
 800120a:	f001 fe0b 	bl	8002e24 <HAL_I2C_Mem_Read>
			if(buffer[4] == 1) //als buffer[3] het midden overschrijdt, dan gaat hij van 255 terug naar 0, en wordt buffer[4] op 1 gezet.
 800120e:	7a3b      	ldrb	r3, [r7, #8]
 8001210:	2b01      	cmp	r3, #1
 8001212:	d106      	bne.n	8001222 <Touch+0x6a>
			{
				Y_waarde = 0xFF + buffer[3];
 8001214:	79fb      	ldrb	r3, [r7, #7]
 8001216:	b29b      	uxth	r3, r3
 8001218:	33ff      	adds	r3, #255	; 0xff
 800121a:	b29a      	uxth	r2, r3
 800121c:	4b1e      	ldr	r3, [pc, #120]	; (8001298 <Touch+0xe0>)
 800121e:	801a      	strh	r2, [r3, #0]
 8001220:	e003      	b.n	800122a <Touch+0x72>
			}
			else
			{
				Y_waarde = buffer[3];
 8001222:	79fb      	ldrb	r3, [r7, #7]
 8001224:	b29a      	uxth	r2, r3
 8001226:	4b1c      	ldr	r3, [pc, #112]	; (8001298 <Touch+0xe0>)
 8001228:	801a      	strh	r2, [r3, #0]
			}
			if(buffer[2] == 1)
 800122a:	79bb      	ldrb	r3, [r7, #6]
 800122c:	2b01      	cmp	r3, #1
 800122e:	d106      	bne.n	800123e <Touch+0x86>
			{
				X_waarde = 0xFF + buffer[1];
 8001230:	797b      	ldrb	r3, [r7, #5]
 8001232:	b29b      	uxth	r3, r3
 8001234:	33ff      	adds	r3, #255	; 0xff
 8001236:	b29a      	uxth	r2, r3
 8001238:	4b18      	ldr	r3, [pc, #96]	; (800129c <Touch+0xe4>)
 800123a:	801a      	strh	r2, [r3, #0]
 800123c:	e003      	b.n	8001246 <Touch+0x8e>
			}
			else
			{
				X_waarde = buffer[1];
 800123e:	797b      	ldrb	r3, [r7, #5]
 8001240:	b29a      	uxth	r2, r3
 8001242:	4b16      	ldr	r3, [pc, #88]	; (800129c <Touch+0xe4>)
 8001244:	801a      	strh	r2, [r3, #0]
			}
						if(UartScreen == 1)
 8001246:	4b16      	ldr	r3, [pc, #88]	; (80012a0 <Touch+0xe8>)
 8001248:	781b      	ldrb	r3, [r3, #0]
 800124a:	2b01      	cmp	r3, #1
 800124c:	d10b      	bne.n	8001266 <Touch+0xae>
							{
						printf("X= %d\r\n", X_waarde);
 800124e:	4b13      	ldr	r3, [pc, #76]	; (800129c <Touch+0xe4>)
 8001250:	881b      	ldrh	r3, [r3, #0]
 8001252:	4619      	mov	r1, r3
 8001254:	4813      	ldr	r0, [pc, #76]	; (80012a4 <Touch+0xec>)
 8001256:	f005 fbbf 	bl	80069d8 <iprintf>
						printf("Y= %d\r\n", Y_waarde);
 800125a:	4b0f      	ldr	r3, [pc, #60]	; (8001298 <Touch+0xe0>)
 800125c:	881b      	ldrh	r3, [r3, #0]
 800125e:	4619      	mov	r1, r3
 8001260:	4811      	ldr	r0, [pc, #68]	; (80012a8 <Touch+0xf0>)
 8001262:	f005 fbb9 	bl	80069d8 <iprintf>
							}

			HAL_I2C_Mem_Write(&myI2C, device_address_write, 0x814E, 2, &nulladdress, 1, HAL_MAX_DELAY); //de flag uitzetten
 8001266:	8af9      	ldrh	r1, [r7, #22]
 8001268:	f04f 33ff 	mov.w	r3, #4294967295
 800126c:	9302      	str	r3, [sp, #8]
 800126e:	2301      	movs	r3, #1
 8001270:	9301      	str	r3, [sp, #4]
 8001272:	f107 0313 	add.w	r3, r7, #19
 8001276:	9300      	str	r3, [sp, #0]
 8001278:	2302      	movs	r3, #2
 800127a:	f248 124e 	movw	r2, #33102	; 0x814e
 800127e:	4805      	ldr	r0, [pc, #20]	; (8001294 <Touch+0xdc>)
 8001280:	f001 fcbc 	bl	8002bfc <HAL_I2C_Mem_Write>
		}
		HAL_Delay(100);
 8001284:	2064      	movs	r0, #100	; 0x64
 8001286:	f000 ff1f 	bl	80020c8 <HAL_Delay>
		}
 800128a:	bf00      	nop
 800128c:	3718      	adds	r7, #24
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}
 8001292:	bf00      	nop
 8001294:	200004ec 	.word	0x200004ec
 8001298:	200004e4 	.word	0x200004e4
 800129c:	200004e6 	.word	0x200004e6
 80012a0:	20000000 	.word	0x20000000
 80012a4:	08007e20 	.word	0x08007e20
 80012a8:	08007e28 	.word	0x08007e28

080012ac <ReadDevice>:

void ReadDevice(uint8_t *device)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b086      	sub	sp, #24
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
	const uint16_t X_waarde_knoppen[] = {0,80,160,240};
 80012b4:	4a27      	ldr	r2, [pc, #156]	; (8001354 <ReadDevice+0xa8>)
 80012b6:	f107 030c 	add.w	r3, r7, #12
 80012ba:	e892 0003 	ldmia.w	r2, {r0, r1}
 80012be:	e883 0003 	stmia.w	r3, {r0, r1}
	const uint16_t Y_waarde_knoppen[] = {0,40};
 80012c2:	2300      	movs	r3, #0
 80012c4:	813b      	strh	r3, [r7, #8]
 80012c6:	2328      	movs	r3, #40	; 0x28
 80012c8:	817b      	strh	r3, [r7, #10]
	uint8_t apparaat = 0; //if device = 0 , dan is er geen device geselecteerd
 80012ca:	2300      	movs	r3, #0
 80012cc:	75bb      	strb	r3, [r7, #22]
	if((OldX != X_waarde)||(OldY != Y_waarde))  //is de X of Y dezelfde als de vorige waarde X/Y?
 80012ce:	4b22      	ldr	r3, [pc, #136]	; (8001358 <ReadDevice+0xac>)
 80012d0:	881a      	ldrh	r2, [r3, #0]
 80012d2:	4b22      	ldr	r3, [pc, #136]	; (800135c <ReadDevice+0xb0>)
 80012d4:	881b      	ldrh	r3, [r3, #0]
 80012d6:	429a      	cmp	r2, r3
 80012d8:	d105      	bne.n	80012e6 <ReadDevice+0x3a>
 80012da:	4b21      	ldr	r3, [pc, #132]	; (8001360 <ReadDevice+0xb4>)
 80012dc:	881a      	ldrh	r2, [r3, #0]
 80012de:	4b21      	ldr	r3, [pc, #132]	; (8001364 <ReadDevice+0xb8>)
 80012e0:	881b      	ldrh	r3, [r3, #0]
 80012e2:	429a      	cmp	r2, r3
 80012e4:	d032      	beq.n	800134c <ReadDevice+0xa0>
	{
		for(uint8_t i = 1; i<= 4; i++)
 80012e6:	2301      	movs	r3, #1
 80012e8:	75fb      	strb	r3, [r7, #23]
 80012ea:	e02c      	b.n	8001346 <ReadDevice+0x9a>
		{
		if((X_waarde >= X_waarde_knoppen[i-1])&&(X_waarde <=X_waarde_knoppen[i-1]+79)&&(Y_waarde >= Y_waarde_knoppen[0])&&(Y_waarde <=Y_waarde_knoppen[1]))
 80012ec:	7dfb      	ldrb	r3, [r7, #23]
 80012ee:	3b01      	subs	r3, #1
 80012f0:	005b      	lsls	r3, r3, #1
 80012f2:	3318      	adds	r3, #24
 80012f4:	443b      	add	r3, r7
 80012f6:	f833 2c0c 	ldrh.w	r2, [r3, #-12]
 80012fa:	4b18      	ldr	r3, [pc, #96]	; (800135c <ReadDevice+0xb0>)
 80012fc:	881b      	ldrh	r3, [r3, #0]
 80012fe:	429a      	cmp	r2, r3
 8001300:	d81e      	bhi.n	8001340 <ReadDevice+0x94>
 8001302:	4b16      	ldr	r3, [pc, #88]	; (800135c <ReadDevice+0xb0>)
 8001304:	881b      	ldrh	r3, [r3, #0]
 8001306:	461a      	mov	r2, r3
 8001308:	7dfb      	ldrb	r3, [r7, #23]
 800130a:	3b01      	subs	r3, #1
 800130c:	005b      	lsls	r3, r3, #1
 800130e:	3318      	adds	r3, #24
 8001310:	443b      	add	r3, r7
 8001312:	f833 3c0c 	ldrh.w	r3, [r3, #-12]
 8001316:	334f      	adds	r3, #79	; 0x4f
 8001318:	429a      	cmp	r2, r3
 800131a:	dc11      	bgt.n	8001340 <ReadDevice+0x94>
 800131c:	893a      	ldrh	r2, [r7, #8]
 800131e:	4b11      	ldr	r3, [pc, #68]	; (8001364 <ReadDevice+0xb8>)
 8001320:	881b      	ldrh	r3, [r3, #0]
 8001322:	429a      	cmp	r2, r3
 8001324:	d80c      	bhi.n	8001340 <ReadDevice+0x94>
 8001326:	897a      	ldrh	r2, [r7, #10]
 8001328:	4b0e      	ldr	r3, [pc, #56]	; (8001364 <ReadDevice+0xb8>)
 800132a:	881b      	ldrh	r3, [r3, #0]
 800132c:	429a      	cmp	r2, r3
 800132e:	d307      	bcc.n	8001340 <ReadDevice+0x94>
		{
			*device = i;
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	7dfa      	ldrb	r2, [r7, #23]
 8001334:	701a      	strb	r2, [r3, #0]
			printf("device %d\r\n", i);
 8001336:	7dfb      	ldrb	r3, [r7, #23]
 8001338:	4619      	mov	r1, r3
 800133a:	480b      	ldr	r0, [pc, #44]	; (8001368 <ReadDevice+0xbc>)
 800133c:	f005 fb4c 	bl	80069d8 <iprintf>
		for(uint8_t i = 1; i<= 4; i++)
 8001340:	7dfb      	ldrb	r3, [r7, #23]
 8001342:	3301      	adds	r3, #1
 8001344:	75fb      	strb	r3, [r7, #23]
 8001346:	7dfb      	ldrb	r3, [r7, #23]
 8001348:	2b04      	cmp	r3, #4
 800134a:	d9cf      	bls.n	80012ec <ReadDevice+0x40>

		}
		}

	}
}
 800134c:	bf00      	nop
 800134e:	3718      	adds	r7, #24
 8001350:	46bd      	mov	sp, r7
 8001352:	bd80      	pop	{r7, pc}
 8001354:	08007e3c 	.word	0x08007e3c
 8001358:	200004e8 	.word	0x200004e8
 800135c:	200004e6 	.word	0x200004e6
 8001360:	200004ea 	.word	0x200004ea
 8001364:	200004e4 	.word	0x200004e4
 8001368:	08007e30 	.word	0x08007e30

0800136c <ReadButton>:
void ReadButton(uint8_t *button){
 800136c:	b5b0      	push	{r4, r5, r7, lr}
 800136e:	b092      	sub	sp, #72	; 0x48
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
	const uint16_t X_waarde_knoppen[] = {23,219,121,23,121,219,121,23,23,121,219,219,23,219};
 8001374:	4b59      	ldr	r3, [pc, #356]	; (80014dc <ReadButton+0x170>)
 8001376:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800137a:	461d      	mov	r5, r3
 800137c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800137e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001380:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001384:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	const uint16_t Y_waarde_knoppen[] = {50,50,90,175,175,175,260,298,393,393,298,393,245,245};
 8001388:	4b55      	ldr	r3, [pc, #340]	; (80014e0 <ReadButton+0x174>)
 800138a:	f107 040c 	add.w	r4, r7, #12
 800138e:	461d      	mov	r5, r3
 8001390:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001392:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001394:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001398:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	 * knop12: Channel-
	 * knop13: Add
	 * knop14: Delete
	 */

	if((OldX != X_waarde)||(OldY != Y_waarde))  //is de X of Y dezelfde als de vorige waarde X/Y?
 800139c:	4b51      	ldr	r3, [pc, #324]	; (80014e4 <ReadButton+0x178>)
 800139e:	881a      	ldrh	r2, [r3, #0]
 80013a0:	4b51      	ldr	r3, [pc, #324]	; (80014e8 <ReadButton+0x17c>)
 80013a2:	881b      	ldrh	r3, [r3, #0]
 80013a4:	429a      	cmp	r2, r3
 80013a6:	d106      	bne.n	80013b6 <ReadButton+0x4a>
 80013a8:	4b50      	ldr	r3, [pc, #320]	; (80014ec <ReadButton+0x180>)
 80013aa:	881a      	ldrh	r2, [r3, #0]
 80013ac:	4b50      	ldr	r3, [pc, #320]	; (80014f0 <ReadButton+0x184>)
 80013ae:	881b      	ldrh	r3, [r3, #0]
 80013b0:	429a      	cmp	r2, r3
 80013b2:	f000 808f 	beq.w	80014d4 <ReadButton+0x168>
	{
		for(uint8_t i = 1; i<= 14; i++)
 80013b6:	2301      	movs	r3, #1
 80013b8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80013bc:	e085      	b.n	80014ca <ReadButton+0x15e>
		{
			if(i <= 12)
 80013be:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80013c2:	2b0c      	cmp	r3, #12
 80013c4:	d83e      	bhi.n	8001444 <ReadButton+0xd8>
			{
				//hier lees ik mijn touch uit
				if((X_waarde >= X_waarde_knoppen[i-1])&&(X_waarde <=X_waarde_knoppen[i-1]+75)&&(Y_waarde >= Y_waarde_knoppen[i-1])&&(Y_waarde <=Y_waarde_knoppen[i-1]+75))
 80013c6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80013ca:	3b01      	subs	r3, #1
 80013cc:	005b      	lsls	r3, r3, #1
 80013ce:	3348      	adds	r3, #72	; 0x48
 80013d0:	443b      	add	r3, r7
 80013d2:	f833 2c20 	ldrh.w	r2, [r3, #-32]
 80013d6:	4b44      	ldr	r3, [pc, #272]	; (80014e8 <ReadButton+0x17c>)
 80013d8:	881b      	ldrh	r3, [r3, #0]
 80013da:	429a      	cmp	r2, r3
 80013dc:	d870      	bhi.n	80014c0 <ReadButton+0x154>
 80013de:	4b42      	ldr	r3, [pc, #264]	; (80014e8 <ReadButton+0x17c>)
 80013e0:	881b      	ldrh	r3, [r3, #0]
 80013e2:	461a      	mov	r2, r3
 80013e4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80013e8:	3b01      	subs	r3, #1
 80013ea:	005b      	lsls	r3, r3, #1
 80013ec:	3348      	adds	r3, #72	; 0x48
 80013ee:	443b      	add	r3, r7
 80013f0:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 80013f4:	334b      	adds	r3, #75	; 0x4b
 80013f6:	429a      	cmp	r2, r3
 80013f8:	dc62      	bgt.n	80014c0 <ReadButton+0x154>
 80013fa:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80013fe:	3b01      	subs	r3, #1
 8001400:	005b      	lsls	r3, r3, #1
 8001402:	3348      	adds	r3, #72	; 0x48
 8001404:	443b      	add	r3, r7
 8001406:	f833 2c3c 	ldrh.w	r2, [r3, #-60]
 800140a:	4b39      	ldr	r3, [pc, #228]	; (80014f0 <ReadButton+0x184>)
 800140c:	881b      	ldrh	r3, [r3, #0]
 800140e:	429a      	cmp	r2, r3
 8001410:	d856      	bhi.n	80014c0 <ReadButton+0x154>
 8001412:	4b37      	ldr	r3, [pc, #220]	; (80014f0 <ReadButton+0x184>)
 8001414:	881b      	ldrh	r3, [r3, #0]
 8001416:	461a      	mov	r2, r3
 8001418:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800141c:	3b01      	subs	r3, #1
 800141e:	005b      	lsls	r3, r3, #1
 8001420:	3348      	adds	r3, #72	; 0x48
 8001422:	443b      	add	r3, r7
 8001424:	f833 3c3c 	ldrh.w	r3, [r3, #-60]
 8001428:	334b      	adds	r3, #75	; 0x4b
 800142a:	429a      	cmp	r2, r3
 800142c:	dc48      	bgt.n	80014c0 <ReadButton+0x154>
				{

					*button = i;
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 8001434:	701a      	strb	r2, [r3, #0]
					printf("geduwd op button %d\r\n", i);
 8001436:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800143a:	4619      	mov	r1, r3
 800143c:	482d      	ldr	r0, [pc, #180]	; (80014f4 <ReadButton+0x188>)
 800143e:	f005 facb 	bl	80069d8 <iprintf>
 8001442:	e03d      	b.n	80014c0 <ReadButton+0x154>
				}
			}
			else
			{
				if((X_waarde >= X_waarde_knoppen[i-1])&&(X_waarde <=X_waarde_knoppen[i-1]+75)&&(Y_waarde >= Y_waarde_knoppen[i-1])&&(Y_waarde <=Y_waarde_knoppen[i-1]+48))
 8001444:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001448:	3b01      	subs	r3, #1
 800144a:	005b      	lsls	r3, r3, #1
 800144c:	3348      	adds	r3, #72	; 0x48
 800144e:	443b      	add	r3, r7
 8001450:	f833 2c20 	ldrh.w	r2, [r3, #-32]
 8001454:	4b24      	ldr	r3, [pc, #144]	; (80014e8 <ReadButton+0x17c>)
 8001456:	881b      	ldrh	r3, [r3, #0]
 8001458:	429a      	cmp	r2, r3
 800145a:	d831      	bhi.n	80014c0 <ReadButton+0x154>
 800145c:	4b22      	ldr	r3, [pc, #136]	; (80014e8 <ReadButton+0x17c>)
 800145e:	881b      	ldrh	r3, [r3, #0]
 8001460:	461a      	mov	r2, r3
 8001462:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001466:	3b01      	subs	r3, #1
 8001468:	005b      	lsls	r3, r3, #1
 800146a:	3348      	adds	r3, #72	; 0x48
 800146c:	443b      	add	r3, r7
 800146e:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 8001472:	334b      	adds	r3, #75	; 0x4b
 8001474:	429a      	cmp	r2, r3
 8001476:	dc23      	bgt.n	80014c0 <ReadButton+0x154>
 8001478:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800147c:	3b01      	subs	r3, #1
 800147e:	005b      	lsls	r3, r3, #1
 8001480:	3348      	adds	r3, #72	; 0x48
 8001482:	443b      	add	r3, r7
 8001484:	f833 2c3c 	ldrh.w	r2, [r3, #-60]
 8001488:	4b19      	ldr	r3, [pc, #100]	; (80014f0 <ReadButton+0x184>)
 800148a:	881b      	ldrh	r3, [r3, #0]
 800148c:	429a      	cmp	r2, r3
 800148e:	d817      	bhi.n	80014c0 <ReadButton+0x154>
 8001490:	4b17      	ldr	r3, [pc, #92]	; (80014f0 <ReadButton+0x184>)
 8001492:	881b      	ldrh	r3, [r3, #0]
 8001494:	461a      	mov	r2, r3
 8001496:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800149a:	3b01      	subs	r3, #1
 800149c:	005b      	lsls	r3, r3, #1
 800149e:	3348      	adds	r3, #72	; 0x48
 80014a0:	443b      	add	r3, r7
 80014a2:	f833 3c3c 	ldrh.w	r3, [r3, #-60]
 80014a6:	3330      	adds	r3, #48	; 0x30
 80014a8:	429a      	cmp	r2, r3
 80014aa:	dc09      	bgt.n	80014c0 <ReadButton+0x154>
				{

				*button = i;
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 80014b2:	701a      	strb	r2, [r3, #0]
				printf("geduwd op button %d\r\n", i);
 80014b4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80014b8:	4619      	mov	r1, r3
 80014ba:	480e      	ldr	r0, [pc, #56]	; (80014f4 <ReadButton+0x188>)
 80014bc:	f005 fa8c 	bl	80069d8 <iprintf>
		for(uint8_t i = 1; i<= 14; i++)
 80014c0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80014c4:	3301      	adds	r3, #1
 80014c6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80014ca:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80014ce:	2b0e      	cmp	r3, #14
 80014d0:	f67f af75 	bls.w	80013be <ReadButton+0x52>
				}
			}
		}
	}
}
 80014d4:	bf00      	nop
 80014d6:	3748      	adds	r7, #72	; 0x48
 80014d8:	46bd      	mov	sp, r7
 80014da:	bdb0      	pop	{r4, r5, r7, pc}
 80014dc:	08007e5c 	.word	0x08007e5c
 80014e0:	08007e78 	.word	0x08007e78
 80014e4:	200004e8 	.word	0x200004e8
 80014e8:	200004e6 	.word	0x200004e6
 80014ec:	200004ea 	.word	0x200004ea
 80014f0:	200004e4 	.word	0x200004e4
 80014f4:	08007e44 	.word	0x08007e44

080014f8 <_write>:
/* USER CODE BEGIN 0 */
#include <errno.h>
#include <sys/stat.h>
#include <sys/times.h>
#include <sys/unistd.h>
int _write(int file, char *ptr, int len) {
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b086      	sub	sp, #24
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	60f8      	str	r0, [r7, #12]
 8001500:	60b9      	str	r1, [r7, #8]
 8001502:	607a      	str	r2, [r7, #4]
    HAL_StatusTypeDef xStatus;
    switch (file) {
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	2b01      	cmp	r3, #1
 8001508:	d003      	beq.n	8001512 <_write+0x1a>
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	2b02      	cmp	r3, #2
 800150e:	d015      	beq.n	800153c <_write+0x44>
 8001510:	e029      	b.n	8001566 <_write+0x6e>
    case STDOUT_FILENO: /*stdout*/
		xStatus = HAL_UART_Transmit(&huart1, (uint8_t*)ptr, len, HAL_MAX_DELAY);
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	b29a      	uxth	r2, r3
 8001516:	f04f 33ff 	mov.w	r3, #4294967295
 800151a:	68b9      	ldr	r1, [r7, #8]
 800151c:	481a      	ldr	r0, [pc, #104]	; (8001588 <_write+0x90>)
 800151e:	f004 fda1 	bl	8006064 <HAL_UART_Transmit>
 8001522:	4603      	mov	r3, r0
 8001524:	75fb      	strb	r3, [r7, #23]
		if (xStatus != HAL_OK) {
 8001526:	7dfb      	ldrb	r3, [r7, #23]
 8001528:	2b00      	cmp	r3, #0
 800152a:	d024      	beq.n	8001576 <_write+0x7e>
			errno = EIO;
 800152c:	f005 fa22 	bl	8006974 <__errno>
 8001530:	4603      	mov	r3, r0
 8001532:	2205      	movs	r2, #5
 8001534:	601a      	str	r2, [r3, #0]
			return -1;
 8001536:	f04f 33ff 	mov.w	r3, #4294967295
 800153a:	e020      	b.n	800157e <_write+0x86>
		}
        break;
    case STDERR_FILENO: /* stderr */
		xStatus = HAL_UART_Transmit(&huart1, (uint8_t*)ptr, len, HAL_MAX_DELAY);
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	b29a      	uxth	r2, r3
 8001540:	f04f 33ff 	mov.w	r3, #4294967295
 8001544:	68b9      	ldr	r1, [r7, #8]
 8001546:	4810      	ldr	r0, [pc, #64]	; (8001588 <_write+0x90>)
 8001548:	f004 fd8c 	bl	8006064 <HAL_UART_Transmit>
 800154c:	4603      	mov	r3, r0
 800154e:	75fb      	strb	r3, [r7, #23]
		if (xStatus != HAL_OK) {
 8001550:	7dfb      	ldrb	r3, [r7, #23]
 8001552:	2b00      	cmp	r3, #0
 8001554:	d011      	beq.n	800157a <_write+0x82>
			errno = EIO;
 8001556:	f005 fa0d 	bl	8006974 <__errno>
 800155a:	4603      	mov	r3, r0
 800155c:	2205      	movs	r2, #5
 800155e:	601a      	str	r2, [r3, #0]
			return -1;
 8001560:	f04f 33ff 	mov.w	r3, #4294967295
 8001564:	e00b      	b.n	800157e <_write+0x86>
		}
        break;
    default:
        errno = EBADF;
 8001566:	f005 fa05 	bl	8006974 <__errno>
 800156a:	4603      	mov	r3, r0
 800156c:	2209      	movs	r2, #9
 800156e:	601a      	str	r2, [r3, #0]
        return -1;
 8001570:	f04f 33ff 	mov.w	r3, #4294967295
 8001574:	e003      	b.n	800157e <_write+0x86>
        break;
 8001576:	bf00      	nop
 8001578:	e000      	b.n	800157c <_write+0x84>
        break;
 800157a:	bf00      	nop
    }
    return len;
 800157c:	687b      	ldr	r3, [r7, #4]
}
 800157e:	4618      	mov	r0, r3
 8001580:	3718      	adds	r7, #24
 8001582:	46bd      	mov	sp, r7
 8001584:	bd80      	pop	{r7, pc}
 8001586:	bf00      	nop
 8001588:	2000063c 	.word	0x2000063c

0800158c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001590:	f000 fd3d 	bl	800200e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001594:	f000 f812 	bl	80015bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001598:	f000 f9ce 	bl	8001938 <MX_GPIO_Init>
  MX_SPI2_Init();
 800159c:	f000 f8b6 	bl	800170c <MX_SPI2_Init>
  MX_USART1_UART_Init();
 80015a0:	f000 f99a 	bl	80018d8 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 80015a4:	f000 f872 	bl	800168c <MX_I2C1_Init>
  MX_TIM3_Init();
 80015a8:	f000 f93c 	bl	8001824 <MX_TIM3_Init>
  MX_TIM2_Init();
 80015ac:	f000 f8ec 	bl	8001788 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  All_Carl_Inits();
 80015b0:	f7ff f832 	bl	8000618 <All_Carl_Inits>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  whilelus();
 80015b4:	f7ff f85a 	bl	800066c <whilelus>
 80015b8:	e7fc      	b.n	80015b4 <main+0x28>
	...

080015bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b094      	sub	sp, #80	; 0x50
 80015c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015c2:	f107 0320 	add.w	r3, r7, #32
 80015c6:	2230      	movs	r2, #48	; 0x30
 80015c8:	2100      	movs	r1, #0
 80015ca:	4618      	mov	r0, r3
 80015cc:	f005 f9fc 	bl	80069c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015d0:	f107 030c 	add.w	r3, r7, #12
 80015d4:	2200      	movs	r2, #0
 80015d6:	601a      	str	r2, [r3, #0]
 80015d8:	605a      	str	r2, [r3, #4]
 80015da:	609a      	str	r2, [r3, #8]
 80015dc:	60da      	str	r2, [r3, #12]
 80015de:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80015e0:	4b28      	ldr	r3, [pc, #160]	; (8001684 <SystemClock_Config+0xc8>)
 80015e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015e4:	4a27      	ldr	r2, [pc, #156]	; (8001684 <SystemClock_Config+0xc8>)
 80015e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015ea:	6413      	str	r3, [r2, #64]	; 0x40
 80015ec:	4b25      	ldr	r3, [pc, #148]	; (8001684 <SystemClock_Config+0xc8>)
 80015ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015f4:	60bb      	str	r3, [r7, #8]
 80015f6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80015f8:	4b23      	ldr	r3, [pc, #140]	; (8001688 <SystemClock_Config+0xcc>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001600:	4a21      	ldr	r2, [pc, #132]	; (8001688 <SystemClock_Config+0xcc>)
 8001602:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001606:	6013      	str	r3, [r2, #0]
 8001608:	4b1f      	ldr	r3, [pc, #124]	; (8001688 <SystemClock_Config+0xcc>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001610:	607b      	str	r3, [r7, #4]
 8001612:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001614:	2302      	movs	r3, #2
 8001616:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001618:	2301      	movs	r3, #1
 800161a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800161c:	2310      	movs	r3, #16
 800161e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001620:	2302      	movs	r3, #2
 8001622:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001624:	2300      	movs	r3, #0
 8001626:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001628:	2308      	movs	r3, #8
 800162a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 64;
 800162c:	2340      	movs	r3, #64	; 0x40
 800162e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001630:	2302      	movs	r3, #2
 8001632:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001634:	2302      	movs	r3, #2
 8001636:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001638:	f107 0320 	add.w	r3, r7, #32
 800163c:	4618      	mov	r0, r3
 800163e:	f002 f8b7 	bl	80037b0 <HAL_RCC_OscConfig>
 8001642:	4603      	mov	r3, r0
 8001644:	2b00      	cmp	r3, #0
 8001646:	d001      	beq.n	800164c <SystemClock_Config+0x90>
  {
    Error_Handler();
 8001648:	f000 fa08 	bl	8001a5c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800164c:	230f      	movs	r3, #15
 800164e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001650:	2302      	movs	r3, #2
 8001652:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001654:	2300      	movs	r3, #0
 8001656:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001658:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800165c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800165e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001662:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001664:	f107 030c 	add.w	r3, r7, #12
 8001668:	2102      	movs	r1, #2
 800166a:	4618      	mov	r0, r3
 800166c:	f002 fb44 	bl	8003cf8 <HAL_RCC_ClockConfig>
 8001670:	4603      	mov	r3, r0
 8001672:	2b00      	cmp	r3, #0
 8001674:	d001      	beq.n	800167a <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8001676:	f000 f9f1 	bl	8001a5c <Error_Handler>
  }
}
 800167a:	bf00      	nop
 800167c:	3750      	adds	r7, #80	; 0x50
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}
 8001682:	bf00      	nop
 8001684:	40023800 	.word	0x40023800
 8001688:	40007000 	.word	0x40007000

0800168c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001690:	4b1b      	ldr	r3, [pc, #108]	; (8001700 <MX_I2C1_Init+0x74>)
 8001692:	4a1c      	ldr	r2, [pc, #112]	; (8001704 <MX_I2C1_Init+0x78>)
 8001694:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 8001696:	4b1a      	ldr	r3, [pc, #104]	; (8001700 <MX_I2C1_Init+0x74>)
 8001698:	4a1b      	ldr	r2, [pc, #108]	; (8001708 <MX_I2C1_Init+0x7c>)
 800169a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800169c:	4b18      	ldr	r3, [pc, #96]	; (8001700 <MX_I2C1_Init+0x74>)
 800169e:	2200      	movs	r2, #0
 80016a0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80016a2:	4b17      	ldr	r3, [pc, #92]	; (8001700 <MX_I2C1_Init+0x74>)
 80016a4:	2201      	movs	r2, #1
 80016a6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80016a8:	4b15      	ldr	r3, [pc, #84]	; (8001700 <MX_I2C1_Init+0x74>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80016ae:	4b14      	ldr	r3, [pc, #80]	; (8001700 <MX_I2C1_Init+0x74>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80016b4:	4b12      	ldr	r3, [pc, #72]	; (8001700 <MX_I2C1_Init+0x74>)
 80016b6:	2200      	movs	r2, #0
 80016b8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80016ba:	4b11      	ldr	r3, [pc, #68]	; (8001700 <MX_I2C1_Init+0x74>)
 80016bc:	2200      	movs	r2, #0
 80016be:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80016c0:	4b0f      	ldr	r3, [pc, #60]	; (8001700 <MX_I2C1_Init+0x74>)
 80016c2:	2200      	movs	r2, #0
 80016c4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80016c6:	480e      	ldr	r0, [pc, #56]	; (8001700 <MX_I2C1_Init+0x74>)
 80016c8:	f001 f81e 	bl	8002708 <HAL_I2C_Init>
 80016cc:	4603      	mov	r3, r0
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d001      	beq.n	80016d6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80016d2:	f000 f9c3 	bl	8001a5c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80016d6:	2100      	movs	r1, #0
 80016d8:	4809      	ldr	r0, [pc, #36]	; (8001700 <MX_I2C1_Init+0x74>)
 80016da:	f001 ffd1 	bl	8003680 <HAL_I2CEx_ConfigAnalogFilter>
 80016de:	4603      	mov	r3, r0
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d001      	beq.n	80016e8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80016e4:	f000 f9ba 	bl	8001a5c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80016e8:	2100      	movs	r1, #0
 80016ea:	4805      	ldr	r0, [pc, #20]	; (8001700 <MX_I2C1_Init+0x74>)
 80016ec:	f002 f813 	bl	8003716 <HAL_I2CEx_ConfigDigitalFilter>
 80016f0:	4603      	mov	r3, r0
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d001      	beq.n	80016fa <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80016f6:	f000 f9b1 	bl	8001a5c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80016fa:	bf00      	nop
 80016fc:	bd80      	pop	{r7, pc}
 80016fe:	bf00      	nop
 8001700:	200004ec 	.word	0x200004ec
 8001704:	40005400 	.word	0x40005400
 8001708:	00707cbb 	.word	0x00707cbb

0800170c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001710:	4b1b      	ldr	r3, [pc, #108]	; (8001780 <MX_SPI2_Init+0x74>)
 8001712:	4a1c      	ldr	r2, [pc, #112]	; (8001784 <MX_SPI2_Init+0x78>)
 8001714:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001716:	4b1a      	ldr	r3, [pc, #104]	; (8001780 <MX_SPI2_Init+0x74>)
 8001718:	f44f 7282 	mov.w	r2, #260	; 0x104
 800171c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800171e:	4b18      	ldr	r3, [pc, #96]	; (8001780 <MX_SPI2_Init+0x74>)
 8001720:	2200      	movs	r2, #0
 8001722:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001724:	4b16      	ldr	r3, [pc, #88]	; (8001780 <MX_SPI2_Init+0x74>)
 8001726:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800172a:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800172c:	4b14      	ldr	r3, [pc, #80]	; (8001780 <MX_SPI2_Init+0x74>)
 800172e:	2200      	movs	r2, #0
 8001730:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001732:	4b13      	ldr	r3, [pc, #76]	; (8001780 <MX_SPI2_Init+0x74>)
 8001734:	2200      	movs	r2, #0
 8001736:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001738:	4b11      	ldr	r3, [pc, #68]	; (8001780 <MX_SPI2_Init+0x74>)
 800173a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800173e:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001740:	4b0f      	ldr	r3, [pc, #60]	; (8001780 <MX_SPI2_Init+0x74>)
 8001742:	2200      	movs	r2, #0
 8001744:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001746:	4b0e      	ldr	r3, [pc, #56]	; (8001780 <MX_SPI2_Init+0x74>)
 8001748:	2200      	movs	r2, #0
 800174a:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800174c:	4b0c      	ldr	r3, [pc, #48]	; (8001780 <MX_SPI2_Init+0x74>)
 800174e:	2200      	movs	r2, #0
 8001750:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001752:	4b0b      	ldr	r3, [pc, #44]	; (8001780 <MX_SPI2_Init+0x74>)
 8001754:	2200      	movs	r2, #0
 8001756:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8001758:	4b09      	ldr	r3, [pc, #36]	; (8001780 <MX_SPI2_Init+0x74>)
 800175a:	2207      	movs	r2, #7
 800175c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800175e:	4b08      	ldr	r3, [pc, #32]	; (8001780 <MX_SPI2_Init+0x74>)
 8001760:	2200      	movs	r2, #0
 8001762:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001764:	4b06      	ldr	r3, [pc, #24]	; (8001780 <MX_SPI2_Init+0x74>)
 8001766:	2208      	movs	r2, #8
 8001768:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800176a:	4805      	ldr	r0, [pc, #20]	; (8001780 <MX_SPI2_Init+0x74>)
 800176c:	f003 f89a 	bl	80048a4 <HAL_SPI_Init>
 8001770:	4603      	mov	r3, r0
 8001772:	2b00      	cmp	r3, #0
 8001774:	d001      	beq.n	800177a <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8001776:	f000 f971 	bl	8001a5c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800177a:	bf00      	nop
 800177c:	bd80      	pop	{r7, pc}
 800177e:	bf00      	nop
 8001780:	20000540 	.word	0x20000540
 8001784:	40003800 	.word	0x40003800

08001788 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b088      	sub	sp, #32
 800178c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800178e:	f107 0310 	add.w	r3, r7, #16
 8001792:	2200      	movs	r2, #0
 8001794:	601a      	str	r2, [r3, #0]
 8001796:	605a      	str	r2, [r3, #4]
 8001798:	609a      	str	r2, [r3, #8]
 800179a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800179c:	1d3b      	adds	r3, r7, #4
 800179e:	2200      	movs	r2, #0
 80017a0:	601a      	str	r2, [r3, #0]
 80017a2:	605a      	str	r2, [r3, #4]
 80017a4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80017a6:	4b1e      	ldr	r3, [pc, #120]	; (8001820 <MX_TIM2_Init+0x98>)
 80017a8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80017ac:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 64-1;
 80017ae:	4b1c      	ldr	r3, [pc, #112]	; (8001820 <MX_TIM2_Init+0x98>)
 80017b0:	223f      	movs	r2, #63	; 0x3f
 80017b2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017b4:	4b1a      	ldr	r3, [pc, #104]	; (8001820 <MX_TIM2_Init+0x98>)
 80017b6:	2200      	movs	r2, #0
 80017b8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80017ba:	4b19      	ldr	r3, [pc, #100]	; (8001820 <MX_TIM2_Init+0x98>)
 80017bc:	f04f 32ff 	mov.w	r2, #4294967295
 80017c0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017c2:	4b17      	ldr	r3, [pc, #92]	; (8001820 <MX_TIM2_Init+0x98>)
 80017c4:	2200      	movs	r2, #0
 80017c6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80017c8:	4b15      	ldr	r3, [pc, #84]	; (8001820 <MX_TIM2_Init+0x98>)
 80017ca:	2280      	movs	r2, #128	; 0x80
 80017cc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80017ce:	4814      	ldr	r0, [pc, #80]	; (8001820 <MX_TIM2_Init+0x98>)
 80017d0:	f003 fc0a 	bl	8004fe8 <HAL_TIM_Base_Init>
 80017d4:	4603      	mov	r3, r0
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d001      	beq.n	80017de <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80017da:	f000 f93f 	bl	8001a5c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017e2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80017e4:	f107 0310 	add.w	r3, r7, #16
 80017e8:	4619      	mov	r1, r3
 80017ea:	480d      	ldr	r0, [pc, #52]	; (8001820 <MX_TIM2_Init+0x98>)
 80017ec:	f003 fed6 	bl	800559c <HAL_TIM_ConfigClockSource>
 80017f0:	4603      	mov	r3, r0
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d001      	beq.n	80017fa <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80017f6:	f000 f931 	bl	8001a5c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017fa:	2300      	movs	r3, #0
 80017fc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017fe:	2300      	movs	r3, #0
 8001800:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001802:	1d3b      	adds	r3, r7, #4
 8001804:	4619      	mov	r1, r3
 8001806:	4806      	ldr	r0, [pc, #24]	; (8001820 <MX_TIM2_Init+0x98>)
 8001808:	f004 fb50 	bl	8005eac <HAL_TIMEx_MasterConfigSynchronization>
 800180c:	4603      	mov	r3, r0
 800180e:	2b00      	cmp	r3, #0
 8001810:	d001      	beq.n	8001816 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001812:	f000 f923 	bl	8001a5c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001816:	bf00      	nop
 8001818:	3720      	adds	r7, #32
 800181a:	46bd      	mov	sp, r7
 800181c:	bd80      	pop	{r7, pc}
 800181e:	bf00      	nop
 8001820:	200005a4 	.word	0x200005a4

08001824 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b08a      	sub	sp, #40	; 0x28
 8001828:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800182a:	f107 031c 	add.w	r3, r7, #28
 800182e:	2200      	movs	r2, #0
 8001830:	601a      	str	r2, [r3, #0]
 8001832:	605a      	str	r2, [r3, #4]
 8001834:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001836:	463b      	mov	r3, r7
 8001838:	2200      	movs	r2, #0
 800183a:	601a      	str	r2, [r3, #0]
 800183c:	605a      	str	r2, [r3, #4]
 800183e:	609a      	str	r2, [r3, #8]
 8001840:	60da      	str	r2, [r3, #12]
 8001842:	611a      	str	r2, [r3, #16]
 8001844:	615a      	str	r2, [r3, #20]
 8001846:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001848:	4b21      	ldr	r3, [pc, #132]	; (80018d0 <MX_TIM3_Init+0xac>)
 800184a:	4a22      	ldr	r2, [pc, #136]	; (80018d4 <MX_TIM3_Init+0xb0>)
 800184c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 4-1;
 800184e:	4b20      	ldr	r3, [pc, #128]	; (80018d0 <MX_TIM3_Init+0xac>)
 8001850:	2203      	movs	r2, #3
 8001852:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001854:	4b1e      	ldr	r3, [pc, #120]	; (80018d0 <MX_TIM3_Init+0xac>)
 8001856:	2200      	movs	r2, #0
 8001858:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 422;
 800185a:	4b1d      	ldr	r3, [pc, #116]	; (80018d0 <MX_TIM3_Init+0xac>)
 800185c:	f44f 72d3 	mov.w	r2, #422	; 0x1a6
 8001860:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001862:	4b1b      	ldr	r3, [pc, #108]	; (80018d0 <MX_TIM3_Init+0xac>)
 8001864:	2200      	movs	r2, #0
 8001866:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001868:	4b19      	ldr	r3, [pc, #100]	; (80018d0 <MX_TIM3_Init+0xac>)
 800186a:	2280      	movs	r2, #128	; 0x80
 800186c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800186e:	4818      	ldr	r0, [pc, #96]	; (80018d0 <MX_TIM3_Init+0xac>)
 8001870:	f003 fca9 	bl	80051c6 <HAL_TIM_PWM_Init>
 8001874:	4603      	mov	r3, r0
 8001876:	2b00      	cmp	r3, #0
 8001878:	d001      	beq.n	800187e <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 800187a:	f000 f8ef 	bl	8001a5c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800187e:	2300      	movs	r3, #0
 8001880:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001882:	2300      	movs	r3, #0
 8001884:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001886:	f107 031c 	add.w	r3, r7, #28
 800188a:	4619      	mov	r1, r3
 800188c:	4810      	ldr	r0, [pc, #64]	; (80018d0 <MX_TIM3_Init+0xac>)
 800188e:	f004 fb0d 	bl	8005eac <HAL_TIMEx_MasterConfigSynchronization>
 8001892:	4603      	mov	r3, r0
 8001894:	2b00      	cmp	r3, #0
 8001896:	d001      	beq.n	800189c <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8001898:	f000 f8e0 	bl	8001a5c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800189c:	2360      	movs	r3, #96	; 0x60
 800189e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80018a0:	2300      	movs	r3, #0
 80018a2:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80018a4:	2300      	movs	r3, #0
 80018a6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80018a8:	2300      	movs	r3, #0
 80018aa:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80018ac:	463b      	mov	r3, r7
 80018ae:	2204      	movs	r2, #4
 80018b0:	4619      	mov	r1, r3
 80018b2:	4807      	ldr	r0, [pc, #28]	; (80018d0 <MX_TIM3_Init+0xac>)
 80018b4:	f003 fd5e 	bl	8005374 <HAL_TIM_PWM_ConfigChannel>
 80018b8:	4603      	mov	r3, r0
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d001      	beq.n	80018c2 <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 80018be:	f000 f8cd 	bl	8001a5c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80018c2:	4803      	ldr	r0, [pc, #12]	; (80018d0 <MX_TIM3_Init+0xac>)
 80018c4:	f000 f9f4 	bl	8001cb0 <HAL_TIM_MspPostInit>

}
 80018c8:	bf00      	nop
 80018ca:	3728      	adds	r7, #40	; 0x28
 80018cc:	46bd      	mov	sp, r7
 80018ce:	bd80      	pop	{r7, pc}
 80018d0:	200005f0 	.word	0x200005f0
 80018d4:	40000400 	.word	0x40000400

080018d8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80018dc:	4b14      	ldr	r3, [pc, #80]	; (8001930 <MX_USART1_UART_Init+0x58>)
 80018de:	4a15      	ldr	r2, [pc, #84]	; (8001934 <MX_USART1_UART_Init+0x5c>)
 80018e0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80018e2:	4b13      	ldr	r3, [pc, #76]	; (8001930 <MX_USART1_UART_Init+0x58>)
 80018e4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80018e8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80018ea:	4b11      	ldr	r3, [pc, #68]	; (8001930 <MX_USART1_UART_Init+0x58>)
 80018ec:	2200      	movs	r2, #0
 80018ee:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80018f0:	4b0f      	ldr	r3, [pc, #60]	; (8001930 <MX_USART1_UART_Init+0x58>)
 80018f2:	2200      	movs	r2, #0
 80018f4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80018f6:	4b0e      	ldr	r3, [pc, #56]	; (8001930 <MX_USART1_UART_Init+0x58>)
 80018f8:	2200      	movs	r2, #0
 80018fa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80018fc:	4b0c      	ldr	r3, [pc, #48]	; (8001930 <MX_USART1_UART_Init+0x58>)
 80018fe:	220c      	movs	r2, #12
 8001900:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001902:	4b0b      	ldr	r3, [pc, #44]	; (8001930 <MX_USART1_UART_Init+0x58>)
 8001904:	2200      	movs	r2, #0
 8001906:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001908:	4b09      	ldr	r3, [pc, #36]	; (8001930 <MX_USART1_UART_Init+0x58>)
 800190a:	2200      	movs	r2, #0
 800190c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800190e:	4b08      	ldr	r3, [pc, #32]	; (8001930 <MX_USART1_UART_Init+0x58>)
 8001910:	2200      	movs	r2, #0
 8001912:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001914:	4b06      	ldr	r3, [pc, #24]	; (8001930 <MX_USART1_UART_Init+0x58>)
 8001916:	2200      	movs	r2, #0
 8001918:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800191a:	4805      	ldr	r0, [pc, #20]	; (8001930 <MX_USART1_UART_Init+0x58>)
 800191c:	f004 fb54 	bl	8005fc8 <HAL_UART_Init>
 8001920:	4603      	mov	r3, r0
 8001922:	2b00      	cmp	r3, #0
 8001924:	d001      	beq.n	800192a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001926:	f000 f899 	bl	8001a5c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800192a:	bf00      	nop
 800192c:	bd80      	pop	{r7, pc}
 800192e:	bf00      	nop
 8001930:	2000063c 	.word	0x2000063c
 8001934:	40011000 	.word	0x40011000

08001938 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b08a      	sub	sp, #40	; 0x28
 800193c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800193e:	f107 0314 	add.w	r3, r7, #20
 8001942:	2200      	movs	r2, #0
 8001944:	601a      	str	r2, [r3, #0]
 8001946:	605a      	str	r2, [r3, #4]
 8001948:	609a      	str	r2, [r3, #8]
 800194a:	60da      	str	r2, [r3, #12]
 800194c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800194e:	4b40      	ldr	r3, [pc, #256]	; (8001a50 <MX_GPIO_Init+0x118>)
 8001950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001952:	4a3f      	ldr	r2, [pc, #252]	; (8001a50 <MX_GPIO_Init+0x118>)
 8001954:	f043 0302 	orr.w	r3, r3, #2
 8001958:	6313      	str	r3, [r2, #48]	; 0x30
 800195a:	4b3d      	ldr	r3, [pc, #244]	; (8001a50 <MX_GPIO_Init+0x118>)
 800195c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800195e:	f003 0302 	and.w	r3, r3, #2
 8001962:	613b      	str	r3, [r7, #16]
 8001964:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8001966:	4b3a      	ldr	r3, [pc, #232]	; (8001a50 <MX_GPIO_Init+0x118>)
 8001968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800196a:	4a39      	ldr	r2, [pc, #228]	; (8001a50 <MX_GPIO_Init+0x118>)
 800196c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001970:	6313      	str	r3, [r2, #48]	; 0x30
 8001972:	4b37      	ldr	r3, [pc, #220]	; (8001a50 <MX_GPIO_Init+0x118>)
 8001974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001976:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800197a:	60fb      	str	r3, [r7, #12]
 800197c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800197e:	4b34      	ldr	r3, [pc, #208]	; (8001a50 <MX_GPIO_Init+0x118>)
 8001980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001982:	4a33      	ldr	r2, [pc, #204]	; (8001a50 <MX_GPIO_Init+0x118>)
 8001984:	f043 0301 	orr.w	r3, r3, #1
 8001988:	6313      	str	r3, [r2, #48]	; 0x30
 800198a:	4b31      	ldr	r3, [pc, #196]	; (8001a50 <MX_GPIO_Init+0x118>)
 800198c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800198e:	f003 0301 	and.w	r3, r3, #1
 8001992:	60bb      	str	r3, [r7, #8]
 8001994:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001996:	4b2e      	ldr	r3, [pc, #184]	; (8001a50 <MX_GPIO_Init+0x118>)
 8001998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800199a:	4a2d      	ldr	r2, [pc, #180]	; (8001a50 <MX_GPIO_Init+0x118>)
 800199c:	f043 0304 	orr.w	r3, r3, #4
 80019a0:	6313      	str	r3, [r2, #48]	; 0x30
 80019a2:	4b2b      	ldr	r3, [pc, #172]	; (8001a50 <MX_GPIO_Init+0x118>)
 80019a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019a6:	f003 0304 	and.w	r3, r3, #4
 80019aa:	607b      	str	r3, [r7, #4]
 80019ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80019ae:	4b28      	ldr	r3, [pc, #160]	; (8001a50 <MX_GPIO_Init+0x118>)
 80019b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019b2:	4a27      	ldr	r2, [pc, #156]	; (8001a50 <MX_GPIO_Init+0x118>)
 80019b4:	f043 0320 	orr.w	r3, r3, #32
 80019b8:	6313      	str	r3, [r2, #48]	; 0x30
 80019ba:	4b25      	ldr	r3, [pc, #148]	; (8001a50 <MX_GPIO_Init+0x118>)
 80019bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019be:	f003 0320 	and.w	r3, r3, #32
 80019c2:	603b      	str	r3, [r7, #0]
 80019c4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DISPLAY_CS_GPIO_Port, DISPLAY_CS_Pin, GPIO_PIN_SET);
 80019c6:	2201      	movs	r2, #1
 80019c8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80019cc:	4821      	ldr	r0, [pc, #132]	; (8001a54 <MX_GPIO_Init+0x11c>)
 80019ce:	f000 fe5d 	bl	800268c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, DISPLAY_RESET_Pin|DISPLAY_DC_Pin, GPIO_PIN_RESET);
 80019d2:	2200      	movs	r2, #0
 80019d4:	f44f 7140 	mov.w	r1, #768	; 0x300
 80019d8:	481e      	ldr	r0, [pc, #120]	; (8001a54 <MX_GPIO_Init+0x11c>)
 80019da:	f000 fe57 	bl	800268c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PF6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80019de:	2340      	movs	r3, #64	; 0x40
 80019e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019e2:	2302      	movs	r3, #2
 80019e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019e6:	2300      	movs	r3, #0
 80019e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019ea:	2300      	movs	r3, #0
 80019ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 80019ee:	2303      	movs	r3, #3
 80019f0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80019f2:	f107 0314 	add.w	r3, r7, #20
 80019f6:	4619      	mov	r1, r3
 80019f8:	4816      	ldr	r0, [pc, #88]	; (8001a54 <MX_GPIO_Init+0x11c>)
 80019fa:	f000 fc9b 	bl	8002334 <HAL_GPIO_Init>

  /*Configure GPIO pins : DISPLAY_CS_Pin DISPLAY_RESET_Pin DISPLAY_DC_Pin */
  GPIO_InitStruct.Pin = DISPLAY_CS_Pin|DISPLAY_RESET_Pin|DISPLAY_DC_Pin;
 80019fe:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8001a02:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a04:	2301      	movs	r3, #1
 8001a06:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a0c:	2303      	movs	r3, #3
 8001a0e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001a10:	f107 0314 	add.w	r3, r7, #20
 8001a14:	4619      	mov	r1, r3
 8001a16:	480f      	ldr	r0, [pc, #60]	; (8001a54 <MX_GPIO_Init+0x11c>)
 8001a18:	f000 fc8c 	bl	8002334 <HAL_GPIO_Init>

  /*Configure GPIO pin : IRread_Pin */
  GPIO_InitStruct.Pin = IRread_Pin;
 8001a1c:	2301      	movs	r3, #1
 8001a1e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001a20:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001a24:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a26:	2300      	movs	r3, #0
 8001a28:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(IRread_GPIO_Port, &GPIO_InitStruct);
 8001a2a:	f107 0314 	add.w	r3, r7, #20
 8001a2e:	4619      	mov	r1, r3
 8001a30:	4809      	ldr	r0, [pc, #36]	; (8001a58 <MX_GPIO_Init+0x120>)
 8001a32:	f000 fc7f 	bl	8002334 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001a36:	2200      	movs	r2, #0
 8001a38:	2100      	movs	r1, #0
 8001a3a:	2006      	movs	r0, #6
 8001a3c:	f000 fc43 	bl	80022c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001a40:	2006      	movs	r0, #6
 8001a42:	f000 fc5c 	bl	80022fe <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001a46:	bf00      	nop
 8001a48:	3728      	adds	r7, #40	; 0x28
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bd80      	pop	{r7, pc}
 8001a4e:	bf00      	nop
 8001a50:	40023800 	.word	0x40023800
 8001a54:	40021400 	.word	0x40021400
 8001a58:	40020000 	.word	0x40020000

08001a5c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a60:	b672      	cpsid	i
}
 8001a62:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a64:	e7fe      	b.n	8001a64 <Error_Handler+0x8>
	...

08001a68 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	b083      	sub	sp, #12
 8001a6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001a6e:	4b0f      	ldr	r3, [pc, #60]	; (8001aac <HAL_MspInit+0x44>)
 8001a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a72:	4a0e      	ldr	r2, [pc, #56]	; (8001aac <HAL_MspInit+0x44>)
 8001a74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a78:	6413      	str	r3, [r2, #64]	; 0x40
 8001a7a:	4b0c      	ldr	r3, [pc, #48]	; (8001aac <HAL_MspInit+0x44>)
 8001a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a82:	607b      	str	r3, [r7, #4]
 8001a84:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a86:	4b09      	ldr	r3, [pc, #36]	; (8001aac <HAL_MspInit+0x44>)
 8001a88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a8a:	4a08      	ldr	r2, [pc, #32]	; (8001aac <HAL_MspInit+0x44>)
 8001a8c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a90:	6453      	str	r3, [r2, #68]	; 0x44
 8001a92:	4b06      	ldr	r3, [pc, #24]	; (8001aac <HAL_MspInit+0x44>)
 8001a94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a96:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a9a:	603b      	str	r3, [r7, #0]
 8001a9c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a9e:	bf00      	nop
 8001aa0:	370c      	adds	r7, #12
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa8:	4770      	bx	lr
 8001aaa:	bf00      	nop
 8001aac:	40023800 	.word	0x40023800

08001ab0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b0aa      	sub	sp, #168	; 0xa8
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ab8:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001abc:	2200      	movs	r2, #0
 8001abe:	601a      	str	r2, [r3, #0]
 8001ac0:	605a      	str	r2, [r3, #4]
 8001ac2:	609a      	str	r2, [r3, #8]
 8001ac4:	60da      	str	r2, [r3, #12]
 8001ac6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001ac8:	f107 0310 	add.w	r3, r7, #16
 8001acc:	2284      	movs	r2, #132	; 0x84
 8001ace:	2100      	movs	r1, #0
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	f004 ff79 	bl	80069c8 <memset>
  if(hi2c->Instance==I2C1)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	4a22      	ldr	r2, [pc, #136]	; (8001b64 <HAL_I2C_MspInit+0xb4>)
 8001adc:	4293      	cmp	r3, r2
 8001ade:	d13c      	bne.n	8001b5a <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001ae0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001ae4:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001aea:	f107 0310 	add.w	r3, r7, #16
 8001aee:	4618      	mov	r0, r3
 8001af0:	f002 fae8 	bl	80040c4 <HAL_RCCEx_PeriphCLKConfig>
 8001af4:	4603      	mov	r3, r0
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d001      	beq.n	8001afe <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001afa:	f7ff ffaf 	bl	8001a5c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001afe:	4b1a      	ldr	r3, [pc, #104]	; (8001b68 <HAL_I2C_MspInit+0xb8>)
 8001b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b02:	4a19      	ldr	r2, [pc, #100]	; (8001b68 <HAL_I2C_MspInit+0xb8>)
 8001b04:	f043 0302 	orr.w	r3, r3, #2
 8001b08:	6313      	str	r3, [r2, #48]	; 0x30
 8001b0a:	4b17      	ldr	r3, [pc, #92]	; (8001b68 <HAL_I2C_MspInit+0xb8>)
 8001b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b0e:	f003 0302 	and.w	r3, r3, #2
 8001b12:	60fb      	str	r3, [r7, #12]
 8001b14:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001b16:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001b1a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b1e:	2312      	movs	r3, #18
 8001b20:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b24:	2300      	movs	r3, #0
 8001b26:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b2a:	2303      	movs	r3, #3
 8001b2c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001b30:	2304      	movs	r3, #4
 8001b32:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b36:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001b3a:	4619      	mov	r1, r3
 8001b3c:	480b      	ldr	r0, [pc, #44]	; (8001b6c <HAL_I2C_MspInit+0xbc>)
 8001b3e:	f000 fbf9 	bl	8002334 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001b42:	4b09      	ldr	r3, [pc, #36]	; (8001b68 <HAL_I2C_MspInit+0xb8>)
 8001b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b46:	4a08      	ldr	r2, [pc, #32]	; (8001b68 <HAL_I2C_MspInit+0xb8>)
 8001b48:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001b4c:	6413      	str	r3, [r2, #64]	; 0x40
 8001b4e:	4b06      	ldr	r3, [pc, #24]	; (8001b68 <HAL_I2C_MspInit+0xb8>)
 8001b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b52:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b56:	60bb      	str	r3, [r7, #8]
 8001b58:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001b5a:	bf00      	nop
 8001b5c:	37a8      	adds	r7, #168	; 0xa8
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bd80      	pop	{r7, pc}
 8001b62:	bf00      	nop
 8001b64:	40005400 	.word	0x40005400
 8001b68:	40023800 	.word	0x40023800
 8001b6c:	40020400 	.word	0x40020400

08001b70 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b08a      	sub	sp, #40	; 0x28
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b78:	f107 0314 	add.w	r3, r7, #20
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	601a      	str	r2, [r3, #0]
 8001b80:	605a      	str	r2, [r3, #4]
 8001b82:	609a      	str	r2, [r3, #8]
 8001b84:	60da      	str	r2, [r3, #12]
 8001b86:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	4a25      	ldr	r2, [pc, #148]	; (8001c24 <HAL_SPI_MspInit+0xb4>)
 8001b8e:	4293      	cmp	r3, r2
 8001b90:	d144      	bne.n	8001c1c <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001b92:	4b25      	ldr	r3, [pc, #148]	; (8001c28 <HAL_SPI_MspInit+0xb8>)
 8001b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b96:	4a24      	ldr	r2, [pc, #144]	; (8001c28 <HAL_SPI_MspInit+0xb8>)
 8001b98:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b9c:	6413      	str	r3, [r2, #64]	; 0x40
 8001b9e:	4b22      	ldr	r3, [pc, #136]	; (8001c28 <HAL_SPI_MspInit+0xb8>)
 8001ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ba2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ba6:	613b      	str	r3, [r7, #16]
 8001ba8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOI_CLK_ENABLE();
 8001baa:	4b1f      	ldr	r3, [pc, #124]	; (8001c28 <HAL_SPI_MspInit+0xb8>)
 8001bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bae:	4a1e      	ldr	r2, [pc, #120]	; (8001c28 <HAL_SPI_MspInit+0xb8>)
 8001bb0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bb4:	6313      	str	r3, [r2, #48]	; 0x30
 8001bb6:	4b1c      	ldr	r3, [pc, #112]	; (8001c28 <HAL_SPI_MspInit+0xb8>)
 8001bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bbe:	60fb      	str	r3, [r7, #12]
 8001bc0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bc2:	4b19      	ldr	r3, [pc, #100]	; (8001c28 <HAL_SPI_MspInit+0xb8>)
 8001bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bc6:	4a18      	ldr	r2, [pc, #96]	; (8001c28 <HAL_SPI_MspInit+0xb8>)
 8001bc8:	f043 0302 	orr.w	r3, r3, #2
 8001bcc:	6313      	str	r3, [r2, #48]	; 0x30
 8001bce:	4b16      	ldr	r3, [pc, #88]	; (8001c28 <HAL_SPI_MspInit+0xb8>)
 8001bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bd2:	f003 0302 	and.w	r3, r3, #2
 8001bd6:	60bb      	str	r3, [r7, #8]
 8001bd8:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PI1     ------> SPI2_SCK
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001bda:	2302      	movs	r3, #2
 8001bdc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bde:	2302      	movs	r3, #2
 8001be0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001be2:	2300      	movs	r3, #0
 8001be4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001be6:	2303      	movs	r3, #3
 8001be8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001bea:	2305      	movs	r3, #5
 8001bec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001bee:	f107 0314 	add.w	r3, r7, #20
 8001bf2:	4619      	mov	r1, r3
 8001bf4:	480d      	ldr	r0, [pc, #52]	; (8001c2c <HAL_SPI_MspInit+0xbc>)
 8001bf6:	f000 fb9d 	bl	8002334 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001bfa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001bfe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c00:	2302      	movs	r3, #2
 8001c02:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c04:	2300      	movs	r3, #0
 8001c06:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c08:	2303      	movs	r3, #3
 8001c0a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001c0c:	2305      	movs	r3, #5
 8001c0e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c10:	f107 0314 	add.w	r3, r7, #20
 8001c14:	4619      	mov	r1, r3
 8001c16:	4806      	ldr	r0, [pc, #24]	; (8001c30 <HAL_SPI_MspInit+0xc0>)
 8001c18:	f000 fb8c 	bl	8002334 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001c1c:	bf00      	nop
 8001c1e:	3728      	adds	r7, #40	; 0x28
 8001c20:	46bd      	mov	sp, r7
 8001c22:	bd80      	pop	{r7, pc}
 8001c24:	40003800 	.word	0x40003800
 8001c28:	40023800 	.word	0x40023800
 8001c2c:	40022000 	.word	0x40022000
 8001c30:	40020400 	.word	0x40020400

08001c34 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001c34:	b480      	push	{r7}
 8001c36:	b085      	sub	sp, #20
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c44:	d10b      	bne.n	8001c5e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001c46:	4b09      	ldr	r3, [pc, #36]	; (8001c6c <HAL_TIM_Base_MspInit+0x38>)
 8001c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c4a:	4a08      	ldr	r2, [pc, #32]	; (8001c6c <HAL_TIM_Base_MspInit+0x38>)
 8001c4c:	f043 0301 	orr.w	r3, r3, #1
 8001c50:	6413      	str	r3, [r2, #64]	; 0x40
 8001c52:	4b06      	ldr	r3, [pc, #24]	; (8001c6c <HAL_TIM_Base_MspInit+0x38>)
 8001c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c56:	f003 0301 	and.w	r3, r3, #1
 8001c5a:	60fb      	str	r3, [r7, #12]
 8001c5c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001c5e:	bf00      	nop
 8001c60:	3714      	adds	r7, #20
 8001c62:	46bd      	mov	sp, r7
 8001c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c68:	4770      	bx	lr
 8001c6a:	bf00      	nop
 8001c6c:	40023800 	.word	0x40023800

08001c70 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001c70:	b480      	push	{r7}
 8001c72:	b085      	sub	sp, #20
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	4a0a      	ldr	r2, [pc, #40]	; (8001ca8 <HAL_TIM_PWM_MspInit+0x38>)
 8001c7e:	4293      	cmp	r3, r2
 8001c80:	d10b      	bne.n	8001c9a <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001c82:	4b0a      	ldr	r3, [pc, #40]	; (8001cac <HAL_TIM_PWM_MspInit+0x3c>)
 8001c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c86:	4a09      	ldr	r2, [pc, #36]	; (8001cac <HAL_TIM_PWM_MspInit+0x3c>)
 8001c88:	f043 0302 	orr.w	r3, r3, #2
 8001c8c:	6413      	str	r3, [r2, #64]	; 0x40
 8001c8e:	4b07      	ldr	r3, [pc, #28]	; (8001cac <HAL_TIM_PWM_MspInit+0x3c>)
 8001c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c92:	f003 0302 	and.w	r3, r3, #2
 8001c96:	60fb      	str	r3, [r7, #12]
 8001c98:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001c9a:	bf00      	nop
 8001c9c:	3714      	adds	r7, #20
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca4:	4770      	bx	lr
 8001ca6:	bf00      	nop
 8001ca8:	40000400 	.word	0x40000400
 8001cac:	40023800 	.word	0x40023800

08001cb0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b088      	sub	sp, #32
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cb8:	f107 030c 	add.w	r3, r7, #12
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	601a      	str	r2, [r3, #0]
 8001cc0:	605a      	str	r2, [r3, #4]
 8001cc2:	609a      	str	r2, [r3, #8]
 8001cc4:	60da      	str	r2, [r3, #12]
 8001cc6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	4a11      	ldr	r2, [pc, #68]	; (8001d14 <HAL_TIM_MspPostInit+0x64>)
 8001cce:	4293      	cmp	r3, r2
 8001cd0:	d11b      	bne.n	8001d0a <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001cd2:	4b11      	ldr	r3, [pc, #68]	; (8001d18 <HAL_TIM_MspPostInit+0x68>)
 8001cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cd6:	4a10      	ldr	r2, [pc, #64]	; (8001d18 <HAL_TIM_MspPostInit+0x68>)
 8001cd8:	f043 0304 	orr.w	r3, r3, #4
 8001cdc:	6313      	str	r3, [r2, #48]	; 0x30
 8001cde:	4b0e      	ldr	r3, [pc, #56]	; (8001d18 <HAL_TIM_MspPostInit+0x68>)
 8001ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ce2:	f003 0304 	and.w	r3, r3, #4
 8001ce6:	60bb      	str	r3, [r7, #8]
 8001ce8:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001cea:	2380      	movs	r3, #128	; 0x80
 8001cec:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cee:	2302      	movs	r3, #2
 8001cf0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001cfa:	2302      	movs	r3, #2
 8001cfc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001cfe:	f107 030c 	add.w	r3, r7, #12
 8001d02:	4619      	mov	r1, r3
 8001d04:	4805      	ldr	r0, [pc, #20]	; (8001d1c <HAL_TIM_MspPostInit+0x6c>)
 8001d06:	f000 fb15 	bl	8002334 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001d0a:	bf00      	nop
 8001d0c:	3720      	adds	r7, #32
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bd80      	pop	{r7, pc}
 8001d12:	bf00      	nop
 8001d14:	40000400 	.word	0x40000400
 8001d18:	40023800 	.word	0x40023800
 8001d1c:	40020800 	.word	0x40020800

08001d20 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b0ac      	sub	sp, #176	; 0xb0
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d28:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	601a      	str	r2, [r3, #0]
 8001d30:	605a      	str	r2, [r3, #4]
 8001d32:	609a      	str	r2, [r3, #8]
 8001d34:	60da      	str	r2, [r3, #12]
 8001d36:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001d38:	f107 0318 	add.w	r3, r7, #24
 8001d3c:	2284      	movs	r2, #132	; 0x84
 8001d3e:	2100      	movs	r1, #0
 8001d40:	4618      	mov	r0, r3
 8001d42:	f004 fe41 	bl	80069c8 <memset>
  if(huart->Instance==USART1)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	4a32      	ldr	r2, [pc, #200]	; (8001e14 <HAL_UART_MspInit+0xf4>)
 8001d4c:	4293      	cmp	r3, r2
 8001d4e:	d15c      	bne.n	8001e0a <HAL_UART_MspInit+0xea>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001d50:	2340      	movs	r3, #64	; 0x40
 8001d52:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001d54:	2300      	movs	r3, #0
 8001d56:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001d58:	f107 0318 	add.w	r3, r7, #24
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	f002 f9b1 	bl	80040c4 <HAL_RCCEx_PeriphCLKConfig>
 8001d62:	4603      	mov	r3, r0
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d001      	beq.n	8001d6c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001d68:	f7ff fe78 	bl	8001a5c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001d6c:	4b2a      	ldr	r3, [pc, #168]	; (8001e18 <HAL_UART_MspInit+0xf8>)
 8001d6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d70:	4a29      	ldr	r2, [pc, #164]	; (8001e18 <HAL_UART_MspInit+0xf8>)
 8001d72:	f043 0310 	orr.w	r3, r3, #16
 8001d76:	6453      	str	r3, [r2, #68]	; 0x44
 8001d78:	4b27      	ldr	r3, [pc, #156]	; (8001e18 <HAL_UART_MspInit+0xf8>)
 8001d7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d7c:	f003 0310 	and.w	r3, r3, #16
 8001d80:	617b      	str	r3, [r7, #20]
 8001d82:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d84:	4b24      	ldr	r3, [pc, #144]	; (8001e18 <HAL_UART_MspInit+0xf8>)
 8001d86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d88:	4a23      	ldr	r2, [pc, #140]	; (8001e18 <HAL_UART_MspInit+0xf8>)
 8001d8a:	f043 0302 	orr.w	r3, r3, #2
 8001d8e:	6313      	str	r3, [r2, #48]	; 0x30
 8001d90:	4b21      	ldr	r3, [pc, #132]	; (8001e18 <HAL_UART_MspInit+0xf8>)
 8001d92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d94:	f003 0302 	and.w	r3, r3, #2
 8001d98:	613b      	str	r3, [r7, #16]
 8001d9a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d9c:	4b1e      	ldr	r3, [pc, #120]	; (8001e18 <HAL_UART_MspInit+0xf8>)
 8001d9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001da0:	4a1d      	ldr	r2, [pc, #116]	; (8001e18 <HAL_UART_MspInit+0xf8>)
 8001da2:	f043 0301 	orr.w	r3, r3, #1
 8001da6:	6313      	str	r3, [r2, #48]	; 0x30
 8001da8:	4b1b      	ldr	r3, [pc, #108]	; (8001e18 <HAL_UART_MspInit+0xf8>)
 8001daa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dac:	f003 0301 	and.w	r3, r3, #1
 8001db0:	60fb      	str	r3, [r7, #12]
 8001db2:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001db4:	2380      	movs	r3, #128	; 0x80
 8001db6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dba:	2302      	movs	r3, #2
 8001dbc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dc6:	2303      	movs	r3, #3
 8001dc8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001dcc:	2307      	movs	r3, #7
 8001dce:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dd2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001dd6:	4619      	mov	r1, r3
 8001dd8:	4810      	ldr	r0, [pc, #64]	; (8001e1c <HAL_UART_MspInit+0xfc>)
 8001dda:	f000 faab 	bl	8002334 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001dde:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001de2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001de6:	2302      	movs	r3, #2
 8001de8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dec:	2300      	movs	r3, #0
 8001dee:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001df2:	2303      	movs	r3, #3
 8001df4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001df8:	2307      	movs	r3, #7
 8001dfa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dfe:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001e02:	4619      	mov	r1, r3
 8001e04:	4806      	ldr	r0, [pc, #24]	; (8001e20 <HAL_UART_MspInit+0x100>)
 8001e06:	f000 fa95 	bl	8002334 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001e0a:	bf00      	nop
 8001e0c:	37b0      	adds	r7, #176	; 0xb0
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bd80      	pop	{r7, pc}
 8001e12:	bf00      	nop
 8001e14:	40011000 	.word	0x40011000
 8001e18:	40023800 	.word	0x40023800
 8001e1c:	40020400 	.word	0x40020400
 8001e20:	40020000 	.word	0x40020000

08001e24 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e24:	b480      	push	{r7}
 8001e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001e28:	e7fe      	b.n	8001e28 <NMI_Handler+0x4>

08001e2a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e2a:	b480      	push	{r7}
 8001e2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e2e:	e7fe      	b.n	8001e2e <HardFault_Handler+0x4>

08001e30 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e30:	b480      	push	{r7}
 8001e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e34:	e7fe      	b.n	8001e34 <MemManage_Handler+0x4>

08001e36 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e36:	b480      	push	{r7}
 8001e38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e3a:	e7fe      	b.n	8001e3a <BusFault_Handler+0x4>

08001e3c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e40:	e7fe      	b.n	8001e40 <UsageFault_Handler+0x4>

08001e42 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e42:	b480      	push	{r7}
 8001e44:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e46:	bf00      	nop
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4e:	4770      	bx	lr

08001e50 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e50:	b480      	push	{r7}
 8001e52:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e54:	bf00      	nop
 8001e56:	46bd      	mov	sp, r7
 8001e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5c:	4770      	bx	lr

08001e5e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e5e:	b480      	push	{r7}
 8001e60:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e62:	bf00      	nop
 8001e64:	46bd      	mov	sp, r7
 8001e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6a:	4770      	bx	lr

08001e6c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e70:	f000 f90a 	bl	8002088 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e74:	bf00      	nop
 8001e76:	bd80      	pop	{r7, pc}

08001e78 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */
	Interrupt_flank();
 8001e7c:	f7ff f930 	bl	80010e0 <Interrupt_flank>
  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(IRread_Pin);
 8001e80:	2001      	movs	r0, #1
 8001e82:	f000 fc1d 	bl	80026c0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001e86:	bf00      	nop
 8001e88:	bd80      	pop	{r7, pc}

08001e8a <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001e8a:	b580      	push	{r7, lr}
 8001e8c:	b086      	sub	sp, #24
 8001e8e:	af00      	add	r7, sp, #0
 8001e90:	60f8      	str	r0, [r7, #12]
 8001e92:	60b9      	str	r1, [r7, #8]
 8001e94:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e96:	2300      	movs	r3, #0
 8001e98:	617b      	str	r3, [r7, #20]
 8001e9a:	e00a      	b.n	8001eb2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001e9c:	f3af 8000 	nop.w
 8001ea0:	4601      	mov	r1, r0
 8001ea2:	68bb      	ldr	r3, [r7, #8]
 8001ea4:	1c5a      	adds	r2, r3, #1
 8001ea6:	60ba      	str	r2, [r7, #8]
 8001ea8:	b2ca      	uxtb	r2, r1
 8001eaa:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001eac:	697b      	ldr	r3, [r7, #20]
 8001eae:	3301      	adds	r3, #1
 8001eb0:	617b      	str	r3, [r7, #20]
 8001eb2:	697a      	ldr	r2, [r7, #20]
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	429a      	cmp	r2, r3
 8001eb8:	dbf0      	blt.n	8001e9c <_read+0x12>
  }

  return len;
 8001eba:	687b      	ldr	r3, [r7, #4]
}
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	3718      	adds	r7, #24
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	bd80      	pop	{r7, pc}

08001ec4 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	b083      	sub	sp, #12
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001ecc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	370c      	adds	r7, #12
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eda:	4770      	bx	lr

08001edc <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001edc:	b480      	push	{r7}
 8001ede:	b083      	sub	sp, #12
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
 8001ee4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001ee6:	683b      	ldr	r3, [r7, #0]
 8001ee8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001eec:	605a      	str	r2, [r3, #4]
  return 0;
 8001eee:	2300      	movs	r3, #0
}
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	370c      	adds	r7, #12
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efa:	4770      	bx	lr

08001efc <_isatty>:

int _isatty(int file)
{
 8001efc:	b480      	push	{r7}
 8001efe:	b083      	sub	sp, #12
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001f04:	2301      	movs	r3, #1
}
 8001f06:	4618      	mov	r0, r3
 8001f08:	370c      	adds	r7, #12
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f10:	4770      	bx	lr

08001f12 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001f12:	b480      	push	{r7}
 8001f14:	b085      	sub	sp, #20
 8001f16:	af00      	add	r7, sp, #0
 8001f18:	60f8      	str	r0, [r7, #12]
 8001f1a:	60b9      	str	r1, [r7, #8]
 8001f1c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001f1e:	2300      	movs	r3, #0
}
 8001f20:	4618      	mov	r0, r3
 8001f22:	3714      	adds	r7, #20
 8001f24:	46bd      	mov	sp, r7
 8001f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2a:	4770      	bx	lr

08001f2c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b086      	sub	sp, #24
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f34:	4a14      	ldr	r2, [pc, #80]	; (8001f88 <_sbrk+0x5c>)
 8001f36:	4b15      	ldr	r3, [pc, #84]	; (8001f8c <_sbrk+0x60>)
 8001f38:	1ad3      	subs	r3, r2, r3
 8001f3a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f3c:	697b      	ldr	r3, [r7, #20]
 8001f3e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f40:	4b13      	ldr	r3, [pc, #76]	; (8001f90 <_sbrk+0x64>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d102      	bne.n	8001f4e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f48:	4b11      	ldr	r3, [pc, #68]	; (8001f90 <_sbrk+0x64>)
 8001f4a:	4a12      	ldr	r2, [pc, #72]	; (8001f94 <_sbrk+0x68>)
 8001f4c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f4e:	4b10      	ldr	r3, [pc, #64]	; (8001f90 <_sbrk+0x64>)
 8001f50:	681a      	ldr	r2, [r3, #0]
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	4413      	add	r3, r2
 8001f56:	693a      	ldr	r2, [r7, #16]
 8001f58:	429a      	cmp	r2, r3
 8001f5a:	d207      	bcs.n	8001f6c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001f5c:	f004 fd0a 	bl	8006974 <__errno>
 8001f60:	4603      	mov	r3, r0
 8001f62:	220c      	movs	r2, #12
 8001f64:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001f66:	f04f 33ff 	mov.w	r3, #4294967295
 8001f6a:	e009      	b.n	8001f80 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001f6c:	4b08      	ldr	r3, [pc, #32]	; (8001f90 <_sbrk+0x64>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001f72:	4b07      	ldr	r3, [pc, #28]	; (8001f90 <_sbrk+0x64>)
 8001f74:	681a      	ldr	r2, [r3, #0]
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	4413      	add	r3, r2
 8001f7a:	4a05      	ldr	r2, [pc, #20]	; (8001f90 <_sbrk+0x64>)
 8001f7c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001f7e:	68fb      	ldr	r3, [r7, #12]
}
 8001f80:	4618      	mov	r0, r3
 8001f82:	3718      	adds	r7, #24
 8001f84:	46bd      	mov	sp, r7
 8001f86:	bd80      	pop	{r7, pc}
 8001f88:	20050000 	.word	0x20050000
 8001f8c:	00000400 	.word	0x00000400
 8001f90:	200006c4 	.word	0x200006c4
 8001f94:	200006e0 	.word	0x200006e0

08001f98 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001f9c:	4b06      	ldr	r3, [pc, #24]	; (8001fb8 <SystemInit+0x20>)
 8001f9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fa2:	4a05      	ldr	r2, [pc, #20]	; (8001fb8 <SystemInit+0x20>)
 8001fa4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001fa8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001fac:	bf00      	nop
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb4:	4770      	bx	lr
 8001fb6:	bf00      	nop
 8001fb8:	e000ed00 	.word	0xe000ed00

08001fbc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001fbc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ff4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001fc0:	480d      	ldr	r0, [pc, #52]	; (8001ff8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001fc2:	490e      	ldr	r1, [pc, #56]	; (8001ffc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001fc4:	4a0e      	ldr	r2, [pc, #56]	; (8002000 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001fc6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001fc8:	e002      	b.n	8001fd0 <LoopCopyDataInit>

08001fca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001fca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001fcc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001fce:	3304      	adds	r3, #4

08001fd0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001fd0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001fd2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001fd4:	d3f9      	bcc.n	8001fca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001fd6:	4a0b      	ldr	r2, [pc, #44]	; (8002004 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001fd8:	4c0b      	ldr	r4, [pc, #44]	; (8002008 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001fda:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001fdc:	e001      	b.n	8001fe2 <LoopFillZerobss>

08001fde <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001fde:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001fe0:	3204      	adds	r2, #4

08001fe2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001fe2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001fe4:	d3fb      	bcc.n	8001fde <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001fe6:	f7ff ffd7 	bl	8001f98 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001fea:	f004 fcc9 	bl	8006980 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001fee:	f7ff facd 	bl	800158c <main>
  bx  lr    
 8001ff2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001ff4:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001ff8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ffc:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8002000:	08007f54 	.word	0x08007f54
  ldr r2, =_sbss
 8002004:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8002008:	200006dc 	.word	0x200006dc

0800200c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800200c:	e7fe      	b.n	800200c <ADC_IRQHandler>

0800200e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800200e:	b580      	push	{r7, lr}
 8002010:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002012:	2003      	movs	r0, #3
 8002014:	f000 f94c 	bl	80022b0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002018:	2000      	movs	r0, #0
 800201a:	f000 f805 	bl	8002028 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800201e:	f7ff fd23 	bl	8001a68 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002022:	2300      	movs	r3, #0
}
 8002024:	4618      	mov	r0, r3
 8002026:	bd80      	pop	{r7, pc}

08002028 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b082      	sub	sp, #8
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002030:	4b12      	ldr	r3, [pc, #72]	; (800207c <HAL_InitTick+0x54>)
 8002032:	681a      	ldr	r2, [r3, #0]
 8002034:	4b12      	ldr	r3, [pc, #72]	; (8002080 <HAL_InitTick+0x58>)
 8002036:	781b      	ldrb	r3, [r3, #0]
 8002038:	4619      	mov	r1, r3
 800203a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800203e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002042:	fbb2 f3f3 	udiv	r3, r2, r3
 8002046:	4618      	mov	r0, r3
 8002048:	f000 f967 	bl	800231a <HAL_SYSTICK_Config>
 800204c:	4603      	mov	r3, r0
 800204e:	2b00      	cmp	r3, #0
 8002050:	d001      	beq.n	8002056 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002052:	2301      	movs	r3, #1
 8002054:	e00e      	b.n	8002074 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	2b0f      	cmp	r3, #15
 800205a:	d80a      	bhi.n	8002072 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800205c:	2200      	movs	r2, #0
 800205e:	6879      	ldr	r1, [r7, #4]
 8002060:	f04f 30ff 	mov.w	r0, #4294967295
 8002064:	f000 f92f 	bl	80022c6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002068:	4a06      	ldr	r2, [pc, #24]	; (8002084 <HAL_InitTick+0x5c>)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800206e:	2300      	movs	r3, #0
 8002070:	e000      	b.n	8002074 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002072:	2301      	movs	r3, #1
}
 8002074:	4618      	mov	r0, r3
 8002076:	3708      	adds	r7, #8
 8002078:	46bd      	mov	sp, r7
 800207a:	bd80      	pop	{r7, pc}
 800207c:	20000008 	.word	0x20000008
 8002080:	20000010 	.word	0x20000010
 8002084:	2000000c 	.word	0x2000000c

08002088 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002088:	b480      	push	{r7}
 800208a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800208c:	4b06      	ldr	r3, [pc, #24]	; (80020a8 <HAL_IncTick+0x20>)
 800208e:	781b      	ldrb	r3, [r3, #0]
 8002090:	461a      	mov	r2, r3
 8002092:	4b06      	ldr	r3, [pc, #24]	; (80020ac <HAL_IncTick+0x24>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	4413      	add	r3, r2
 8002098:	4a04      	ldr	r2, [pc, #16]	; (80020ac <HAL_IncTick+0x24>)
 800209a:	6013      	str	r3, [r2, #0]
}
 800209c:	bf00      	nop
 800209e:	46bd      	mov	sp, r7
 80020a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a4:	4770      	bx	lr
 80020a6:	bf00      	nop
 80020a8:	20000010 	.word	0x20000010
 80020ac:	200006c8 	.word	0x200006c8

080020b0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80020b0:	b480      	push	{r7}
 80020b2:	af00      	add	r7, sp, #0
  return uwTick;
 80020b4:	4b03      	ldr	r3, [pc, #12]	; (80020c4 <HAL_GetTick+0x14>)
 80020b6:	681b      	ldr	r3, [r3, #0]
}
 80020b8:	4618      	mov	r0, r3
 80020ba:	46bd      	mov	sp, r7
 80020bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c0:	4770      	bx	lr
 80020c2:	bf00      	nop
 80020c4:	200006c8 	.word	0x200006c8

080020c8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b084      	sub	sp, #16
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80020d0:	f7ff ffee 	bl	80020b0 <HAL_GetTick>
 80020d4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020e0:	d005      	beq.n	80020ee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80020e2:	4b0a      	ldr	r3, [pc, #40]	; (800210c <HAL_Delay+0x44>)
 80020e4:	781b      	ldrb	r3, [r3, #0]
 80020e6:	461a      	mov	r2, r3
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	4413      	add	r3, r2
 80020ec:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80020ee:	bf00      	nop
 80020f0:	f7ff ffde 	bl	80020b0 <HAL_GetTick>
 80020f4:	4602      	mov	r2, r0
 80020f6:	68bb      	ldr	r3, [r7, #8]
 80020f8:	1ad3      	subs	r3, r2, r3
 80020fa:	68fa      	ldr	r2, [r7, #12]
 80020fc:	429a      	cmp	r2, r3
 80020fe:	d8f7      	bhi.n	80020f0 <HAL_Delay+0x28>
  {
  }
}
 8002100:	bf00      	nop
 8002102:	bf00      	nop
 8002104:	3710      	adds	r7, #16
 8002106:	46bd      	mov	sp, r7
 8002108:	bd80      	pop	{r7, pc}
 800210a:	bf00      	nop
 800210c:	20000010 	.word	0x20000010

08002110 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002110:	b480      	push	{r7}
 8002112:	b085      	sub	sp, #20
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	f003 0307 	and.w	r3, r3, #7
 800211e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002120:	4b0b      	ldr	r3, [pc, #44]	; (8002150 <__NVIC_SetPriorityGrouping+0x40>)
 8002122:	68db      	ldr	r3, [r3, #12]
 8002124:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002126:	68ba      	ldr	r2, [r7, #8]
 8002128:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800212c:	4013      	ands	r3, r2
 800212e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002134:	68bb      	ldr	r3, [r7, #8]
 8002136:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002138:	4b06      	ldr	r3, [pc, #24]	; (8002154 <__NVIC_SetPriorityGrouping+0x44>)
 800213a:	4313      	orrs	r3, r2
 800213c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800213e:	4a04      	ldr	r2, [pc, #16]	; (8002150 <__NVIC_SetPriorityGrouping+0x40>)
 8002140:	68bb      	ldr	r3, [r7, #8]
 8002142:	60d3      	str	r3, [r2, #12]
}
 8002144:	bf00      	nop
 8002146:	3714      	adds	r7, #20
 8002148:	46bd      	mov	sp, r7
 800214a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214e:	4770      	bx	lr
 8002150:	e000ed00 	.word	0xe000ed00
 8002154:	05fa0000 	.word	0x05fa0000

08002158 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002158:	b480      	push	{r7}
 800215a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800215c:	4b04      	ldr	r3, [pc, #16]	; (8002170 <__NVIC_GetPriorityGrouping+0x18>)
 800215e:	68db      	ldr	r3, [r3, #12]
 8002160:	0a1b      	lsrs	r3, r3, #8
 8002162:	f003 0307 	and.w	r3, r3, #7
}
 8002166:	4618      	mov	r0, r3
 8002168:	46bd      	mov	sp, r7
 800216a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216e:	4770      	bx	lr
 8002170:	e000ed00 	.word	0xe000ed00

08002174 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002174:	b480      	push	{r7}
 8002176:	b083      	sub	sp, #12
 8002178:	af00      	add	r7, sp, #0
 800217a:	4603      	mov	r3, r0
 800217c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800217e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002182:	2b00      	cmp	r3, #0
 8002184:	db0b      	blt.n	800219e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002186:	79fb      	ldrb	r3, [r7, #7]
 8002188:	f003 021f 	and.w	r2, r3, #31
 800218c:	4907      	ldr	r1, [pc, #28]	; (80021ac <__NVIC_EnableIRQ+0x38>)
 800218e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002192:	095b      	lsrs	r3, r3, #5
 8002194:	2001      	movs	r0, #1
 8002196:	fa00 f202 	lsl.w	r2, r0, r2
 800219a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800219e:	bf00      	nop
 80021a0:	370c      	adds	r7, #12
 80021a2:	46bd      	mov	sp, r7
 80021a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a8:	4770      	bx	lr
 80021aa:	bf00      	nop
 80021ac:	e000e100 	.word	0xe000e100

080021b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80021b0:	b480      	push	{r7}
 80021b2:	b083      	sub	sp, #12
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	4603      	mov	r3, r0
 80021b8:	6039      	str	r1, [r7, #0]
 80021ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	db0a      	blt.n	80021da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	b2da      	uxtb	r2, r3
 80021c8:	490c      	ldr	r1, [pc, #48]	; (80021fc <__NVIC_SetPriority+0x4c>)
 80021ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021ce:	0112      	lsls	r2, r2, #4
 80021d0:	b2d2      	uxtb	r2, r2
 80021d2:	440b      	add	r3, r1
 80021d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80021d8:	e00a      	b.n	80021f0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	b2da      	uxtb	r2, r3
 80021de:	4908      	ldr	r1, [pc, #32]	; (8002200 <__NVIC_SetPriority+0x50>)
 80021e0:	79fb      	ldrb	r3, [r7, #7]
 80021e2:	f003 030f 	and.w	r3, r3, #15
 80021e6:	3b04      	subs	r3, #4
 80021e8:	0112      	lsls	r2, r2, #4
 80021ea:	b2d2      	uxtb	r2, r2
 80021ec:	440b      	add	r3, r1
 80021ee:	761a      	strb	r2, [r3, #24]
}
 80021f0:	bf00      	nop
 80021f2:	370c      	adds	r7, #12
 80021f4:	46bd      	mov	sp, r7
 80021f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fa:	4770      	bx	lr
 80021fc:	e000e100 	.word	0xe000e100
 8002200:	e000ed00 	.word	0xe000ed00

08002204 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002204:	b480      	push	{r7}
 8002206:	b089      	sub	sp, #36	; 0x24
 8002208:	af00      	add	r7, sp, #0
 800220a:	60f8      	str	r0, [r7, #12]
 800220c:	60b9      	str	r1, [r7, #8]
 800220e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	f003 0307 	and.w	r3, r3, #7
 8002216:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002218:	69fb      	ldr	r3, [r7, #28]
 800221a:	f1c3 0307 	rsb	r3, r3, #7
 800221e:	2b04      	cmp	r3, #4
 8002220:	bf28      	it	cs
 8002222:	2304      	movcs	r3, #4
 8002224:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002226:	69fb      	ldr	r3, [r7, #28]
 8002228:	3304      	adds	r3, #4
 800222a:	2b06      	cmp	r3, #6
 800222c:	d902      	bls.n	8002234 <NVIC_EncodePriority+0x30>
 800222e:	69fb      	ldr	r3, [r7, #28]
 8002230:	3b03      	subs	r3, #3
 8002232:	e000      	b.n	8002236 <NVIC_EncodePriority+0x32>
 8002234:	2300      	movs	r3, #0
 8002236:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002238:	f04f 32ff 	mov.w	r2, #4294967295
 800223c:	69bb      	ldr	r3, [r7, #24]
 800223e:	fa02 f303 	lsl.w	r3, r2, r3
 8002242:	43da      	mvns	r2, r3
 8002244:	68bb      	ldr	r3, [r7, #8]
 8002246:	401a      	ands	r2, r3
 8002248:	697b      	ldr	r3, [r7, #20]
 800224a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800224c:	f04f 31ff 	mov.w	r1, #4294967295
 8002250:	697b      	ldr	r3, [r7, #20]
 8002252:	fa01 f303 	lsl.w	r3, r1, r3
 8002256:	43d9      	mvns	r1, r3
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800225c:	4313      	orrs	r3, r2
         );
}
 800225e:	4618      	mov	r0, r3
 8002260:	3724      	adds	r7, #36	; 0x24
 8002262:	46bd      	mov	sp, r7
 8002264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002268:	4770      	bx	lr
	...

0800226c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b082      	sub	sp, #8
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	3b01      	subs	r3, #1
 8002278:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800227c:	d301      	bcc.n	8002282 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800227e:	2301      	movs	r3, #1
 8002280:	e00f      	b.n	80022a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002282:	4a0a      	ldr	r2, [pc, #40]	; (80022ac <SysTick_Config+0x40>)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	3b01      	subs	r3, #1
 8002288:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800228a:	210f      	movs	r1, #15
 800228c:	f04f 30ff 	mov.w	r0, #4294967295
 8002290:	f7ff ff8e 	bl	80021b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002294:	4b05      	ldr	r3, [pc, #20]	; (80022ac <SysTick_Config+0x40>)
 8002296:	2200      	movs	r2, #0
 8002298:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800229a:	4b04      	ldr	r3, [pc, #16]	; (80022ac <SysTick_Config+0x40>)
 800229c:	2207      	movs	r2, #7
 800229e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80022a0:	2300      	movs	r3, #0
}
 80022a2:	4618      	mov	r0, r3
 80022a4:	3708      	adds	r7, #8
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bd80      	pop	{r7, pc}
 80022aa:	bf00      	nop
 80022ac:	e000e010 	.word	0xe000e010

080022b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b082      	sub	sp, #8
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80022b8:	6878      	ldr	r0, [r7, #4]
 80022ba:	f7ff ff29 	bl	8002110 <__NVIC_SetPriorityGrouping>
}
 80022be:	bf00      	nop
 80022c0:	3708      	adds	r7, #8
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bd80      	pop	{r7, pc}

080022c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80022c6:	b580      	push	{r7, lr}
 80022c8:	b086      	sub	sp, #24
 80022ca:	af00      	add	r7, sp, #0
 80022cc:	4603      	mov	r3, r0
 80022ce:	60b9      	str	r1, [r7, #8]
 80022d0:	607a      	str	r2, [r7, #4]
 80022d2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80022d4:	2300      	movs	r3, #0
 80022d6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80022d8:	f7ff ff3e 	bl	8002158 <__NVIC_GetPriorityGrouping>
 80022dc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80022de:	687a      	ldr	r2, [r7, #4]
 80022e0:	68b9      	ldr	r1, [r7, #8]
 80022e2:	6978      	ldr	r0, [r7, #20]
 80022e4:	f7ff ff8e 	bl	8002204 <NVIC_EncodePriority>
 80022e8:	4602      	mov	r2, r0
 80022ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022ee:	4611      	mov	r1, r2
 80022f0:	4618      	mov	r0, r3
 80022f2:	f7ff ff5d 	bl	80021b0 <__NVIC_SetPriority>
}
 80022f6:	bf00      	nop
 80022f8:	3718      	adds	r7, #24
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bd80      	pop	{r7, pc}

080022fe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022fe:	b580      	push	{r7, lr}
 8002300:	b082      	sub	sp, #8
 8002302:	af00      	add	r7, sp, #0
 8002304:	4603      	mov	r3, r0
 8002306:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002308:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800230c:	4618      	mov	r0, r3
 800230e:	f7ff ff31 	bl	8002174 <__NVIC_EnableIRQ>
}
 8002312:	bf00      	nop
 8002314:	3708      	adds	r7, #8
 8002316:	46bd      	mov	sp, r7
 8002318:	bd80      	pop	{r7, pc}

0800231a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800231a:	b580      	push	{r7, lr}
 800231c:	b082      	sub	sp, #8
 800231e:	af00      	add	r7, sp, #0
 8002320:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002322:	6878      	ldr	r0, [r7, #4]
 8002324:	f7ff ffa2 	bl	800226c <SysTick_Config>
 8002328:	4603      	mov	r3, r0
}
 800232a:	4618      	mov	r0, r3
 800232c:	3708      	adds	r7, #8
 800232e:	46bd      	mov	sp, r7
 8002330:	bd80      	pop	{r7, pc}
	...

08002334 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002334:	b480      	push	{r7}
 8002336:	b089      	sub	sp, #36	; 0x24
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
 800233c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800233e:	2300      	movs	r3, #0
 8002340:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002342:	2300      	movs	r3, #0
 8002344:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002346:	2300      	movs	r3, #0
 8002348:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800234a:	2300      	movs	r3, #0
 800234c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800234e:	2300      	movs	r3, #0
 8002350:	61fb      	str	r3, [r7, #28]
 8002352:	e175      	b.n	8002640 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002354:	2201      	movs	r2, #1
 8002356:	69fb      	ldr	r3, [r7, #28]
 8002358:	fa02 f303 	lsl.w	r3, r2, r3
 800235c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	697a      	ldr	r2, [r7, #20]
 8002364:	4013      	ands	r3, r2
 8002366:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002368:	693a      	ldr	r2, [r7, #16]
 800236a:	697b      	ldr	r3, [r7, #20]
 800236c:	429a      	cmp	r2, r3
 800236e:	f040 8164 	bne.w	800263a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	685b      	ldr	r3, [r3, #4]
 8002376:	f003 0303 	and.w	r3, r3, #3
 800237a:	2b01      	cmp	r3, #1
 800237c:	d005      	beq.n	800238a <HAL_GPIO_Init+0x56>
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	685b      	ldr	r3, [r3, #4]
 8002382:	f003 0303 	and.w	r3, r3, #3
 8002386:	2b02      	cmp	r3, #2
 8002388:	d130      	bne.n	80023ec <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	689b      	ldr	r3, [r3, #8]
 800238e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002390:	69fb      	ldr	r3, [r7, #28]
 8002392:	005b      	lsls	r3, r3, #1
 8002394:	2203      	movs	r2, #3
 8002396:	fa02 f303 	lsl.w	r3, r2, r3
 800239a:	43db      	mvns	r3, r3
 800239c:	69ba      	ldr	r2, [r7, #24]
 800239e:	4013      	ands	r3, r2
 80023a0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	68da      	ldr	r2, [r3, #12]
 80023a6:	69fb      	ldr	r3, [r7, #28]
 80023a8:	005b      	lsls	r3, r3, #1
 80023aa:	fa02 f303 	lsl.w	r3, r2, r3
 80023ae:	69ba      	ldr	r2, [r7, #24]
 80023b0:	4313      	orrs	r3, r2
 80023b2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	69ba      	ldr	r2, [r7, #24]
 80023b8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	685b      	ldr	r3, [r3, #4]
 80023be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80023c0:	2201      	movs	r2, #1
 80023c2:	69fb      	ldr	r3, [r7, #28]
 80023c4:	fa02 f303 	lsl.w	r3, r2, r3
 80023c8:	43db      	mvns	r3, r3
 80023ca:	69ba      	ldr	r2, [r7, #24]
 80023cc:	4013      	ands	r3, r2
 80023ce:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	685b      	ldr	r3, [r3, #4]
 80023d4:	091b      	lsrs	r3, r3, #4
 80023d6:	f003 0201 	and.w	r2, r3, #1
 80023da:	69fb      	ldr	r3, [r7, #28]
 80023dc:	fa02 f303 	lsl.w	r3, r2, r3
 80023e0:	69ba      	ldr	r2, [r7, #24]
 80023e2:	4313      	orrs	r3, r2
 80023e4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	69ba      	ldr	r2, [r7, #24]
 80023ea:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	685b      	ldr	r3, [r3, #4]
 80023f0:	f003 0303 	and.w	r3, r3, #3
 80023f4:	2b03      	cmp	r3, #3
 80023f6:	d017      	beq.n	8002428 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	68db      	ldr	r3, [r3, #12]
 80023fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80023fe:	69fb      	ldr	r3, [r7, #28]
 8002400:	005b      	lsls	r3, r3, #1
 8002402:	2203      	movs	r2, #3
 8002404:	fa02 f303 	lsl.w	r3, r2, r3
 8002408:	43db      	mvns	r3, r3
 800240a:	69ba      	ldr	r2, [r7, #24]
 800240c:	4013      	ands	r3, r2
 800240e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	689a      	ldr	r2, [r3, #8]
 8002414:	69fb      	ldr	r3, [r7, #28]
 8002416:	005b      	lsls	r3, r3, #1
 8002418:	fa02 f303 	lsl.w	r3, r2, r3
 800241c:	69ba      	ldr	r2, [r7, #24]
 800241e:	4313      	orrs	r3, r2
 8002420:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	69ba      	ldr	r2, [r7, #24]
 8002426:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002428:	683b      	ldr	r3, [r7, #0]
 800242a:	685b      	ldr	r3, [r3, #4]
 800242c:	f003 0303 	and.w	r3, r3, #3
 8002430:	2b02      	cmp	r3, #2
 8002432:	d123      	bne.n	800247c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002434:	69fb      	ldr	r3, [r7, #28]
 8002436:	08da      	lsrs	r2, r3, #3
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	3208      	adds	r2, #8
 800243c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002440:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002442:	69fb      	ldr	r3, [r7, #28]
 8002444:	f003 0307 	and.w	r3, r3, #7
 8002448:	009b      	lsls	r3, r3, #2
 800244a:	220f      	movs	r2, #15
 800244c:	fa02 f303 	lsl.w	r3, r2, r3
 8002450:	43db      	mvns	r3, r3
 8002452:	69ba      	ldr	r2, [r7, #24]
 8002454:	4013      	ands	r3, r2
 8002456:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	691a      	ldr	r2, [r3, #16]
 800245c:	69fb      	ldr	r3, [r7, #28]
 800245e:	f003 0307 	and.w	r3, r3, #7
 8002462:	009b      	lsls	r3, r3, #2
 8002464:	fa02 f303 	lsl.w	r3, r2, r3
 8002468:	69ba      	ldr	r2, [r7, #24]
 800246a:	4313      	orrs	r3, r2
 800246c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800246e:	69fb      	ldr	r3, [r7, #28]
 8002470:	08da      	lsrs	r2, r3, #3
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	3208      	adds	r2, #8
 8002476:	69b9      	ldr	r1, [r7, #24]
 8002478:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002482:	69fb      	ldr	r3, [r7, #28]
 8002484:	005b      	lsls	r3, r3, #1
 8002486:	2203      	movs	r2, #3
 8002488:	fa02 f303 	lsl.w	r3, r2, r3
 800248c:	43db      	mvns	r3, r3
 800248e:	69ba      	ldr	r2, [r7, #24]
 8002490:	4013      	ands	r3, r2
 8002492:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	685b      	ldr	r3, [r3, #4]
 8002498:	f003 0203 	and.w	r2, r3, #3
 800249c:	69fb      	ldr	r3, [r7, #28]
 800249e:	005b      	lsls	r3, r3, #1
 80024a0:	fa02 f303 	lsl.w	r3, r2, r3
 80024a4:	69ba      	ldr	r2, [r7, #24]
 80024a6:	4313      	orrs	r3, r2
 80024a8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	69ba      	ldr	r2, [r7, #24]
 80024ae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	685b      	ldr	r3, [r3, #4]
 80024b4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	f000 80be 	beq.w	800263a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024be:	4b66      	ldr	r3, [pc, #408]	; (8002658 <HAL_GPIO_Init+0x324>)
 80024c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024c2:	4a65      	ldr	r2, [pc, #404]	; (8002658 <HAL_GPIO_Init+0x324>)
 80024c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80024c8:	6453      	str	r3, [r2, #68]	; 0x44
 80024ca:	4b63      	ldr	r3, [pc, #396]	; (8002658 <HAL_GPIO_Init+0x324>)
 80024cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024d2:	60fb      	str	r3, [r7, #12]
 80024d4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80024d6:	4a61      	ldr	r2, [pc, #388]	; (800265c <HAL_GPIO_Init+0x328>)
 80024d8:	69fb      	ldr	r3, [r7, #28]
 80024da:	089b      	lsrs	r3, r3, #2
 80024dc:	3302      	adds	r3, #2
 80024de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80024e4:	69fb      	ldr	r3, [r7, #28]
 80024e6:	f003 0303 	and.w	r3, r3, #3
 80024ea:	009b      	lsls	r3, r3, #2
 80024ec:	220f      	movs	r2, #15
 80024ee:	fa02 f303 	lsl.w	r3, r2, r3
 80024f2:	43db      	mvns	r3, r3
 80024f4:	69ba      	ldr	r2, [r7, #24]
 80024f6:	4013      	ands	r3, r2
 80024f8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	4a58      	ldr	r2, [pc, #352]	; (8002660 <HAL_GPIO_Init+0x32c>)
 80024fe:	4293      	cmp	r3, r2
 8002500:	d037      	beq.n	8002572 <HAL_GPIO_Init+0x23e>
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	4a57      	ldr	r2, [pc, #348]	; (8002664 <HAL_GPIO_Init+0x330>)
 8002506:	4293      	cmp	r3, r2
 8002508:	d031      	beq.n	800256e <HAL_GPIO_Init+0x23a>
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	4a56      	ldr	r2, [pc, #344]	; (8002668 <HAL_GPIO_Init+0x334>)
 800250e:	4293      	cmp	r3, r2
 8002510:	d02b      	beq.n	800256a <HAL_GPIO_Init+0x236>
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	4a55      	ldr	r2, [pc, #340]	; (800266c <HAL_GPIO_Init+0x338>)
 8002516:	4293      	cmp	r3, r2
 8002518:	d025      	beq.n	8002566 <HAL_GPIO_Init+0x232>
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	4a54      	ldr	r2, [pc, #336]	; (8002670 <HAL_GPIO_Init+0x33c>)
 800251e:	4293      	cmp	r3, r2
 8002520:	d01f      	beq.n	8002562 <HAL_GPIO_Init+0x22e>
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	4a53      	ldr	r2, [pc, #332]	; (8002674 <HAL_GPIO_Init+0x340>)
 8002526:	4293      	cmp	r3, r2
 8002528:	d019      	beq.n	800255e <HAL_GPIO_Init+0x22a>
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	4a52      	ldr	r2, [pc, #328]	; (8002678 <HAL_GPIO_Init+0x344>)
 800252e:	4293      	cmp	r3, r2
 8002530:	d013      	beq.n	800255a <HAL_GPIO_Init+0x226>
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	4a51      	ldr	r2, [pc, #324]	; (800267c <HAL_GPIO_Init+0x348>)
 8002536:	4293      	cmp	r3, r2
 8002538:	d00d      	beq.n	8002556 <HAL_GPIO_Init+0x222>
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	4a50      	ldr	r2, [pc, #320]	; (8002680 <HAL_GPIO_Init+0x34c>)
 800253e:	4293      	cmp	r3, r2
 8002540:	d007      	beq.n	8002552 <HAL_GPIO_Init+0x21e>
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	4a4f      	ldr	r2, [pc, #316]	; (8002684 <HAL_GPIO_Init+0x350>)
 8002546:	4293      	cmp	r3, r2
 8002548:	d101      	bne.n	800254e <HAL_GPIO_Init+0x21a>
 800254a:	2309      	movs	r3, #9
 800254c:	e012      	b.n	8002574 <HAL_GPIO_Init+0x240>
 800254e:	230a      	movs	r3, #10
 8002550:	e010      	b.n	8002574 <HAL_GPIO_Init+0x240>
 8002552:	2308      	movs	r3, #8
 8002554:	e00e      	b.n	8002574 <HAL_GPIO_Init+0x240>
 8002556:	2307      	movs	r3, #7
 8002558:	e00c      	b.n	8002574 <HAL_GPIO_Init+0x240>
 800255a:	2306      	movs	r3, #6
 800255c:	e00a      	b.n	8002574 <HAL_GPIO_Init+0x240>
 800255e:	2305      	movs	r3, #5
 8002560:	e008      	b.n	8002574 <HAL_GPIO_Init+0x240>
 8002562:	2304      	movs	r3, #4
 8002564:	e006      	b.n	8002574 <HAL_GPIO_Init+0x240>
 8002566:	2303      	movs	r3, #3
 8002568:	e004      	b.n	8002574 <HAL_GPIO_Init+0x240>
 800256a:	2302      	movs	r3, #2
 800256c:	e002      	b.n	8002574 <HAL_GPIO_Init+0x240>
 800256e:	2301      	movs	r3, #1
 8002570:	e000      	b.n	8002574 <HAL_GPIO_Init+0x240>
 8002572:	2300      	movs	r3, #0
 8002574:	69fa      	ldr	r2, [r7, #28]
 8002576:	f002 0203 	and.w	r2, r2, #3
 800257a:	0092      	lsls	r2, r2, #2
 800257c:	4093      	lsls	r3, r2
 800257e:	69ba      	ldr	r2, [r7, #24]
 8002580:	4313      	orrs	r3, r2
 8002582:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002584:	4935      	ldr	r1, [pc, #212]	; (800265c <HAL_GPIO_Init+0x328>)
 8002586:	69fb      	ldr	r3, [r7, #28]
 8002588:	089b      	lsrs	r3, r3, #2
 800258a:	3302      	adds	r3, #2
 800258c:	69ba      	ldr	r2, [r7, #24]
 800258e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002592:	4b3d      	ldr	r3, [pc, #244]	; (8002688 <HAL_GPIO_Init+0x354>)
 8002594:	689b      	ldr	r3, [r3, #8]
 8002596:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002598:	693b      	ldr	r3, [r7, #16]
 800259a:	43db      	mvns	r3, r3
 800259c:	69ba      	ldr	r2, [r7, #24]
 800259e:	4013      	ands	r3, r2
 80025a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	685b      	ldr	r3, [r3, #4]
 80025a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d003      	beq.n	80025b6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80025ae:	69ba      	ldr	r2, [r7, #24]
 80025b0:	693b      	ldr	r3, [r7, #16]
 80025b2:	4313      	orrs	r3, r2
 80025b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80025b6:	4a34      	ldr	r2, [pc, #208]	; (8002688 <HAL_GPIO_Init+0x354>)
 80025b8:	69bb      	ldr	r3, [r7, #24]
 80025ba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80025bc:	4b32      	ldr	r3, [pc, #200]	; (8002688 <HAL_GPIO_Init+0x354>)
 80025be:	68db      	ldr	r3, [r3, #12]
 80025c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025c2:	693b      	ldr	r3, [r7, #16]
 80025c4:	43db      	mvns	r3, r3
 80025c6:	69ba      	ldr	r2, [r7, #24]
 80025c8:	4013      	ands	r3, r2
 80025ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	685b      	ldr	r3, [r3, #4]
 80025d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d003      	beq.n	80025e0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80025d8:	69ba      	ldr	r2, [r7, #24]
 80025da:	693b      	ldr	r3, [r7, #16]
 80025dc:	4313      	orrs	r3, r2
 80025de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80025e0:	4a29      	ldr	r2, [pc, #164]	; (8002688 <HAL_GPIO_Init+0x354>)
 80025e2:	69bb      	ldr	r3, [r7, #24]
 80025e4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80025e6:	4b28      	ldr	r3, [pc, #160]	; (8002688 <HAL_GPIO_Init+0x354>)
 80025e8:	685b      	ldr	r3, [r3, #4]
 80025ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025ec:	693b      	ldr	r3, [r7, #16]
 80025ee:	43db      	mvns	r3, r3
 80025f0:	69ba      	ldr	r2, [r7, #24]
 80025f2:	4013      	ands	r3, r2
 80025f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	685b      	ldr	r3, [r3, #4]
 80025fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d003      	beq.n	800260a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002602:	69ba      	ldr	r2, [r7, #24]
 8002604:	693b      	ldr	r3, [r7, #16]
 8002606:	4313      	orrs	r3, r2
 8002608:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800260a:	4a1f      	ldr	r2, [pc, #124]	; (8002688 <HAL_GPIO_Init+0x354>)
 800260c:	69bb      	ldr	r3, [r7, #24]
 800260e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002610:	4b1d      	ldr	r3, [pc, #116]	; (8002688 <HAL_GPIO_Init+0x354>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002616:	693b      	ldr	r3, [r7, #16]
 8002618:	43db      	mvns	r3, r3
 800261a:	69ba      	ldr	r2, [r7, #24]
 800261c:	4013      	ands	r3, r2
 800261e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002620:	683b      	ldr	r3, [r7, #0]
 8002622:	685b      	ldr	r3, [r3, #4]
 8002624:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002628:	2b00      	cmp	r3, #0
 800262a:	d003      	beq.n	8002634 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800262c:	69ba      	ldr	r2, [r7, #24]
 800262e:	693b      	ldr	r3, [r7, #16]
 8002630:	4313      	orrs	r3, r2
 8002632:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002634:	4a14      	ldr	r2, [pc, #80]	; (8002688 <HAL_GPIO_Init+0x354>)
 8002636:	69bb      	ldr	r3, [r7, #24]
 8002638:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800263a:	69fb      	ldr	r3, [r7, #28]
 800263c:	3301      	adds	r3, #1
 800263e:	61fb      	str	r3, [r7, #28]
 8002640:	69fb      	ldr	r3, [r7, #28]
 8002642:	2b0f      	cmp	r3, #15
 8002644:	f67f ae86 	bls.w	8002354 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002648:	bf00      	nop
 800264a:	bf00      	nop
 800264c:	3724      	adds	r7, #36	; 0x24
 800264e:	46bd      	mov	sp, r7
 8002650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002654:	4770      	bx	lr
 8002656:	bf00      	nop
 8002658:	40023800 	.word	0x40023800
 800265c:	40013800 	.word	0x40013800
 8002660:	40020000 	.word	0x40020000
 8002664:	40020400 	.word	0x40020400
 8002668:	40020800 	.word	0x40020800
 800266c:	40020c00 	.word	0x40020c00
 8002670:	40021000 	.word	0x40021000
 8002674:	40021400 	.word	0x40021400
 8002678:	40021800 	.word	0x40021800
 800267c:	40021c00 	.word	0x40021c00
 8002680:	40022000 	.word	0x40022000
 8002684:	40022400 	.word	0x40022400
 8002688:	40013c00 	.word	0x40013c00

0800268c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800268c:	b480      	push	{r7}
 800268e:	b083      	sub	sp, #12
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
 8002694:	460b      	mov	r3, r1
 8002696:	807b      	strh	r3, [r7, #2]
 8002698:	4613      	mov	r3, r2
 800269a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800269c:	787b      	ldrb	r3, [r7, #1]
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d003      	beq.n	80026aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80026a2:	887a      	ldrh	r2, [r7, #2]
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80026a8:	e003      	b.n	80026b2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80026aa:	887b      	ldrh	r3, [r7, #2]
 80026ac:	041a      	lsls	r2, r3, #16
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	619a      	str	r2, [r3, #24]
}
 80026b2:	bf00      	nop
 80026b4:	370c      	adds	r7, #12
 80026b6:	46bd      	mov	sp, r7
 80026b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026bc:	4770      	bx	lr
	...

080026c0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b082      	sub	sp, #8
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	4603      	mov	r3, r0
 80026c8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80026ca:	4b08      	ldr	r3, [pc, #32]	; (80026ec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80026cc:	695a      	ldr	r2, [r3, #20]
 80026ce:	88fb      	ldrh	r3, [r7, #6]
 80026d0:	4013      	ands	r3, r2
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d006      	beq.n	80026e4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80026d6:	4a05      	ldr	r2, [pc, #20]	; (80026ec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80026d8:	88fb      	ldrh	r3, [r7, #6]
 80026da:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80026dc:	88fb      	ldrh	r3, [r7, #6]
 80026de:	4618      	mov	r0, r3
 80026e0:	f000 f806 	bl	80026f0 <HAL_GPIO_EXTI_Callback>
  }
}
 80026e4:	bf00      	nop
 80026e6:	3708      	adds	r7, #8
 80026e8:	46bd      	mov	sp, r7
 80026ea:	bd80      	pop	{r7, pc}
 80026ec:	40013c00 	.word	0x40013c00

080026f0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80026f0:	b480      	push	{r7}
 80026f2:	b083      	sub	sp, #12
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	4603      	mov	r3, r0
 80026f8:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);
  
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80026fa:	bf00      	nop
 80026fc:	370c      	adds	r7, #12
 80026fe:	46bd      	mov	sp, r7
 8002700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002704:	4770      	bx	lr
	...

08002708 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b082      	sub	sp, #8
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	2b00      	cmp	r3, #0
 8002714:	d101      	bne.n	800271a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002716:	2301      	movs	r3, #1
 8002718:	e07f      	b.n	800281a <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002720:	b2db      	uxtb	r3, r3
 8002722:	2b00      	cmp	r3, #0
 8002724:	d106      	bne.n	8002734 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	2200      	movs	r2, #0
 800272a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800272e:	6878      	ldr	r0, [r7, #4]
 8002730:	f7ff f9be 	bl	8001ab0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	2224      	movs	r2, #36	; 0x24
 8002738:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	681a      	ldr	r2, [r3, #0]
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f022 0201 	bic.w	r2, r2, #1
 800274a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	685a      	ldr	r2, [r3, #4]
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002758:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	689a      	ldr	r2, [r3, #8]
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002768:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	68db      	ldr	r3, [r3, #12]
 800276e:	2b01      	cmp	r3, #1
 8002770:	d107      	bne.n	8002782 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	689a      	ldr	r2, [r3, #8]
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800277e:	609a      	str	r2, [r3, #8]
 8002780:	e006      	b.n	8002790 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	689a      	ldr	r2, [r3, #8]
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800278e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	68db      	ldr	r3, [r3, #12]
 8002794:	2b02      	cmp	r3, #2
 8002796:	d104      	bne.n	80027a2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80027a0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	6859      	ldr	r1, [r3, #4]
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681a      	ldr	r2, [r3, #0]
 80027ac:	4b1d      	ldr	r3, [pc, #116]	; (8002824 <HAL_I2C_Init+0x11c>)
 80027ae:	430b      	orrs	r3, r1
 80027b0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	68da      	ldr	r2, [r3, #12]
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80027c0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	691a      	ldr	r2, [r3, #16]
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	695b      	ldr	r3, [r3, #20]
 80027ca:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	699b      	ldr	r3, [r3, #24]
 80027d2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	430a      	orrs	r2, r1
 80027da:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	69d9      	ldr	r1, [r3, #28]
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6a1a      	ldr	r2, [r3, #32]
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	430a      	orrs	r2, r1
 80027ea:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	681a      	ldr	r2, [r3, #0]
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f042 0201 	orr.w	r2, r2, #1
 80027fa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2200      	movs	r2, #0
 8002800:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	2220      	movs	r2, #32
 8002806:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	2200      	movs	r2, #0
 800280e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2200      	movs	r2, #0
 8002814:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002818:	2300      	movs	r3, #0
}
 800281a:	4618      	mov	r0, r3
 800281c:	3708      	adds	r7, #8
 800281e:	46bd      	mov	sp, r7
 8002820:	bd80      	pop	{r7, pc}
 8002822:	bf00      	nop
 8002824:	02008000 	.word	0x02008000

08002828 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b088      	sub	sp, #32
 800282c:	af02      	add	r7, sp, #8
 800282e:	60f8      	str	r0, [r7, #12]
 8002830:	607a      	str	r2, [r7, #4]
 8002832:	461a      	mov	r2, r3
 8002834:	460b      	mov	r3, r1
 8002836:	817b      	strh	r3, [r7, #10]
 8002838:	4613      	mov	r3, r2
 800283a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002842:	b2db      	uxtb	r3, r3
 8002844:	2b20      	cmp	r3, #32
 8002846:	f040 80da 	bne.w	80029fe <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002850:	2b01      	cmp	r3, #1
 8002852:	d101      	bne.n	8002858 <HAL_I2C_Master_Transmit+0x30>
 8002854:	2302      	movs	r3, #2
 8002856:	e0d3      	b.n	8002a00 <HAL_I2C_Master_Transmit+0x1d8>
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	2201      	movs	r2, #1
 800285c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002860:	f7ff fc26 	bl	80020b0 <HAL_GetTick>
 8002864:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002866:	697b      	ldr	r3, [r7, #20]
 8002868:	9300      	str	r3, [sp, #0]
 800286a:	2319      	movs	r3, #25
 800286c:	2201      	movs	r2, #1
 800286e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002872:	68f8      	ldr	r0, [r7, #12]
 8002874:	f000 fcbc 	bl	80031f0 <I2C_WaitOnFlagUntilTimeout>
 8002878:	4603      	mov	r3, r0
 800287a:	2b00      	cmp	r3, #0
 800287c:	d001      	beq.n	8002882 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800287e:	2301      	movs	r3, #1
 8002880:	e0be      	b.n	8002a00 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	2221      	movs	r2, #33	; 0x21
 8002886:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	2210      	movs	r2, #16
 800288e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	2200      	movs	r2, #0
 8002896:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	687a      	ldr	r2, [r7, #4]
 800289c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	893a      	ldrh	r2, [r7, #8]
 80028a2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	2200      	movs	r2, #0
 80028a8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028ae:	b29b      	uxth	r3, r3
 80028b0:	2bff      	cmp	r3, #255	; 0xff
 80028b2:	d90e      	bls.n	80028d2 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	22ff      	movs	r2, #255	; 0xff
 80028b8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028be:	b2da      	uxtb	r2, r3
 80028c0:	8979      	ldrh	r1, [r7, #10]
 80028c2:	4b51      	ldr	r3, [pc, #324]	; (8002a08 <HAL_I2C_Master_Transmit+0x1e0>)
 80028c4:	9300      	str	r3, [sp, #0]
 80028c6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80028ca:	68f8      	ldr	r0, [r7, #12]
 80028cc:	f000 fea6 	bl	800361c <I2C_TransferConfig>
 80028d0:	e06c      	b.n	80029ac <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028d6:	b29a      	uxth	r2, r3
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028e0:	b2da      	uxtb	r2, r3
 80028e2:	8979      	ldrh	r1, [r7, #10]
 80028e4:	4b48      	ldr	r3, [pc, #288]	; (8002a08 <HAL_I2C_Master_Transmit+0x1e0>)
 80028e6:	9300      	str	r3, [sp, #0]
 80028e8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80028ec:	68f8      	ldr	r0, [r7, #12]
 80028ee:	f000 fe95 	bl	800361c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80028f2:	e05b      	b.n	80029ac <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80028f4:	697a      	ldr	r2, [r7, #20]
 80028f6:	6a39      	ldr	r1, [r7, #32]
 80028f8:	68f8      	ldr	r0, [r7, #12]
 80028fa:	f000 fcb9 	bl	8003270 <I2C_WaitOnTXISFlagUntilTimeout>
 80028fe:	4603      	mov	r3, r0
 8002900:	2b00      	cmp	r3, #0
 8002902:	d001      	beq.n	8002908 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8002904:	2301      	movs	r3, #1
 8002906:	e07b      	b.n	8002a00 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800290c:	781a      	ldrb	r2, [r3, #0]
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002918:	1c5a      	adds	r2, r3, #1
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002922:	b29b      	uxth	r3, r3
 8002924:	3b01      	subs	r3, #1
 8002926:	b29a      	uxth	r2, r3
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002930:	3b01      	subs	r3, #1
 8002932:	b29a      	uxth	r2, r3
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800293c:	b29b      	uxth	r3, r3
 800293e:	2b00      	cmp	r3, #0
 8002940:	d034      	beq.n	80029ac <HAL_I2C_Master_Transmit+0x184>
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002946:	2b00      	cmp	r3, #0
 8002948:	d130      	bne.n	80029ac <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800294a:	697b      	ldr	r3, [r7, #20]
 800294c:	9300      	str	r3, [sp, #0]
 800294e:	6a3b      	ldr	r3, [r7, #32]
 8002950:	2200      	movs	r2, #0
 8002952:	2180      	movs	r1, #128	; 0x80
 8002954:	68f8      	ldr	r0, [r7, #12]
 8002956:	f000 fc4b 	bl	80031f0 <I2C_WaitOnFlagUntilTimeout>
 800295a:	4603      	mov	r3, r0
 800295c:	2b00      	cmp	r3, #0
 800295e:	d001      	beq.n	8002964 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8002960:	2301      	movs	r3, #1
 8002962:	e04d      	b.n	8002a00 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002968:	b29b      	uxth	r3, r3
 800296a:	2bff      	cmp	r3, #255	; 0xff
 800296c:	d90e      	bls.n	800298c <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	22ff      	movs	r2, #255	; 0xff
 8002972:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002978:	b2da      	uxtb	r2, r3
 800297a:	8979      	ldrh	r1, [r7, #10]
 800297c:	2300      	movs	r3, #0
 800297e:	9300      	str	r3, [sp, #0]
 8002980:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002984:	68f8      	ldr	r0, [r7, #12]
 8002986:	f000 fe49 	bl	800361c <I2C_TransferConfig>
 800298a:	e00f      	b.n	80029ac <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002990:	b29a      	uxth	r2, r3
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800299a:	b2da      	uxtb	r2, r3
 800299c:	8979      	ldrh	r1, [r7, #10]
 800299e:	2300      	movs	r3, #0
 80029a0:	9300      	str	r3, [sp, #0]
 80029a2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80029a6:	68f8      	ldr	r0, [r7, #12]
 80029a8:	f000 fe38 	bl	800361c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029b0:	b29b      	uxth	r3, r3
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d19e      	bne.n	80028f4 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80029b6:	697a      	ldr	r2, [r7, #20]
 80029b8:	6a39      	ldr	r1, [r7, #32]
 80029ba:	68f8      	ldr	r0, [r7, #12]
 80029bc:	f000 fc98 	bl	80032f0 <I2C_WaitOnSTOPFlagUntilTimeout>
 80029c0:	4603      	mov	r3, r0
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d001      	beq.n	80029ca <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 80029c6:	2301      	movs	r3, #1
 80029c8:	e01a      	b.n	8002a00 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	2220      	movs	r2, #32
 80029d0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	6859      	ldr	r1, [r3, #4]
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	681a      	ldr	r2, [r3, #0]
 80029dc:	4b0b      	ldr	r3, [pc, #44]	; (8002a0c <HAL_I2C_Master_Transmit+0x1e4>)
 80029de:	400b      	ands	r3, r1
 80029e0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	2220      	movs	r2, #32
 80029e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	2200      	movs	r2, #0
 80029ee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	2200      	movs	r2, #0
 80029f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80029fa:	2300      	movs	r3, #0
 80029fc:	e000      	b.n	8002a00 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 80029fe:	2302      	movs	r3, #2
  }
}
 8002a00:	4618      	mov	r0, r3
 8002a02:	3718      	adds	r7, #24
 8002a04:	46bd      	mov	sp, r7
 8002a06:	bd80      	pop	{r7, pc}
 8002a08:	80002000 	.word	0x80002000
 8002a0c:	fe00e800 	.word	0xfe00e800

08002a10 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b088      	sub	sp, #32
 8002a14:	af02      	add	r7, sp, #8
 8002a16:	60f8      	str	r0, [r7, #12]
 8002a18:	607a      	str	r2, [r7, #4]
 8002a1a:	461a      	mov	r2, r3
 8002a1c:	460b      	mov	r3, r1
 8002a1e:	817b      	strh	r3, [r7, #10]
 8002a20:	4613      	mov	r3, r2
 8002a22:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a2a:	b2db      	uxtb	r3, r3
 8002a2c:	2b20      	cmp	r3, #32
 8002a2e:	f040 80db 	bne.w	8002be8 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002a38:	2b01      	cmp	r3, #1
 8002a3a:	d101      	bne.n	8002a40 <HAL_I2C_Master_Receive+0x30>
 8002a3c:	2302      	movs	r3, #2
 8002a3e:	e0d4      	b.n	8002bea <HAL_I2C_Master_Receive+0x1da>
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	2201      	movs	r2, #1
 8002a44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002a48:	f7ff fb32 	bl	80020b0 <HAL_GetTick>
 8002a4c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002a4e:	697b      	ldr	r3, [r7, #20]
 8002a50:	9300      	str	r3, [sp, #0]
 8002a52:	2319      	movs	r3, #25
 8002a54:	2201      	movs	r2, #1
 8002a56:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002a5a:	68f8      	ldr	r0, [r7, #12]
 8002a5c:	f000 fbc8 	bl	80031f0 <I2C_WaitOnFlagUntilTimeout>
 8002a60:	4603      	mov	r3, r0
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d001      	beq.n	8002a6a <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8002a66:	2301      	movs	r3, #1
 8002a68:	e0bf      	b.n	8002bea <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	2222      	movs	r2, #34	; 0x22
 8002a6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	2210      	movs	r2, #16
 8002a76:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	687a      	ldr	r2, [r7, #4]
 8002a84:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	893a      	ldrh	r2, [r7, #8]
 8002a8a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	2200      	movs	r2, #0
 8002a90:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a96:	b29b      	uxth	r3, r3
 8002a98:	2bff      	cmp	r3, #255	; 0xff
 8002a9a:	d90e      	bls.n	8002aba <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	22ff      	movs	r2, #255	; 0xff
 8002aa0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002aa6:	b2da      	uxtb	r2, r3
 8002aa8:	8979      	ldrh	r1, [r7, #10]
 8002aaa:	4b52      	ldr	r3, [pc, #328]	; (8002bf4 <HAL_I2C_Master_Receive+0x1e4>)
 8002aac:	9300      	str	r3, [sp, #0]
 8002aae:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002ab2:	68f8      	ldr	r0, [r7, #12]
 8002ab4:	f000 fdb2 	bl	800361c <I2C_TransferConfig>
 8002ab8:	e06d      	b.n	8002b96 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002abe:	b29a      	uxth	r2, r3
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ac8:	b2da      	uxtb	r2, r3
 8002aca:	8979      	ldrh	r1, [r7, #10]
 8002acc:	4b49      	ldr	r3, [pc, #292]	; (8002bf4 <HAL_I2C_Master_Receive+0x1e4>)
 8002ace:	9300      	str	r3, [sp, #0]
 8002ad0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002ad4:	68f8      	ldr	r0, [r7, #12]
 8002ad6:	f000 fda1 	bl	800361c <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8002ada:	e05c      	b.n	8002b96 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002adc:	697a      	ldr	r2, [r7, #20]
 8002ade:	6a39      	ldr	r1, [r7, #32]
 8002ae0:	68f8      	ldr	r0, [r7, #12]
 8002ae2:	f000 fc41 	bl	8003368 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002ae6:	4603      	mov	r3, r0
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d001      	beq.n	8002af0 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8002aec:	2301      	movs	r3, #1
 8002aee:	e07c      	b.n	8002bea <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002afa:	b2d2      	uxtb	r2, r2
 8002afc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b02:	1c5a      	adds	r2, r3, #1
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b0c:	3b01      	subs	r3, #1
 8002b0e:	b29a      	uxth	r2, r3
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b18:	b29b      	uxth	r3, r3
 8002b1a:	3b01      	subs	r3, #1
 8002b1c:	b29a      	uxth	r2, r3
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b26:	b29b      	uxth	r3, r3
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d034      	beq.n	8002b96 <HAL_I2C_Master_Receive+0x186>
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d130      	bne.n	8002b96 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002b34:	697b      	ldr	r3, [r7, #20]
 8002b36:	9300      	str	r3, [sp, #0]
 8002b38:	6a3b      	ldr	r3, [r7, #32]
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	2180      	movs	r1, #128	; 0x80
 8002b3e:	68f8      	ldr	r0, [r7, #12]
 8002b40:	f000 fb56 	bl	80031f0 <I2C_WaitOnFlagUntilTimeout>
 8002b44:	4603      	mov	r3, r0
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d001      	beq.n	8002b4e <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8002b4a:	2301      	movs	r3, #1
 8002b4c:	e04d      	b.n	8002bea <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b52:	b29b      	uxth	r3, r3
 8002b54:	2bff      	cmp	r3, #255	; 0xff
 8002b56:	d90e      	bls.n	8002b76 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	22ff      	movs	r2, #255	; 0xff
 8002b5c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b62:	b2da      	uxtb	r2, r3
 8002b64:	8979      	ldrh	r1, [r7, #10]
 8002b66:	2300      	movs	r3, #0
 8002b68:	9300      	str	r3, [sp, #0]
 8002b6a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002b6e:	68f8      	ldr	r0, [r7, #12]
 8002b70:	f000 fd54 	bl	800361c <I2C_TransferConfig>
 8002b74:	e00f      	b.n	8002b96 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b7a:	b29a      	uxth	r2, r3
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b84:	b2da      	uxtb	r2, r3
 8002b86:	8979      	ldrh	r1, [r7, #10]
 8002b88:	2300      	movs	r3, #0
 8002b8a:	9300      	str	r3, [sp, #0]
 8002b8c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002b90:	68f8      	ldr	r0, [r7, #12]
 8002b92:	f000 fd43 	bl	800361c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b9a:	b29b      	uxth	r3, r3
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d19d      	bne.n	8002adc <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ba0:	697a      	ldr	r2, [r7, #20]
 8002ba2:	6a39      	ldr	r1, [r7, #32]
 8002ba4:	68f8      	ldr	r0, [r7, #12]
 8002ba6:	f000 fba3 	bl	80032f0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002baa:	4603      	mov	r3, r0
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d001      	beq.n	8002bb4 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8002bb0:	2301      	movs	r3, #1
 8002bb2:	e01a      	b.n	8002bea <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	2220      	movs	r2, #32
 8002bba:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	6859      	ldr	r1, [r3, #4]
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	681a      	ldr	r2, [r3, #0]
 8002bc6:	4b0c      	ldr	r3, [pc, #48]	; (8002bf8 <HAL_I2C_Master_Receive+0x1e8>)
 8002bc8:	400b      	ands	r3, r1
 8002bca:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	2220      	movs	r2, #32
 8002bd0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	2200      	movs	r2, #0
 8002be0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002be4:	2300      	movs	r3, #0
 8002be6:	e000      	b.n	8002bea <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8002be8:	2302      	movs	r3, #2
  }
}
 8002bea:	4618      	mov	r0, r3
 8002bec:	3718      	adds	r7, #24
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	bd80      	pop	{r7, pc}
 8002bf2:	bf00      	nop
 8002bf4:	80002400 	.word	0x80002400
 8002bf8:	fe00e800 	.word	0xfe00e800

08002bfc <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b088      	sub	sp, #32
 8002c00:	af02      	add	r7, sp, #8
 8002c02:	60f8      	str	r0, [r7, #12]
 8002c04:	4608      	mov	r0, r1
 8002c06:	4611      	mov	r1, r2
 8002c08:	461a      	mov	r2, r3
 8002c0a:	4603      	mov	r3, r0
 8002c0c:	817b      	strh	r3, [r7, #10]
 8002c0e:	460b      	mov	r3, r1
 8002c10:	813b      	strh	r3, [r7, #8]
 8002c12:	4613      	mov	r3, r2
 8002c14:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c1c:	b2db      	uxtb	r3, r3
 8002c1e:	2b20      	cmp	r3, #32
 8002c20:	f040 80f9 	bne.w	8002e16 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002c24:	6a3b      	ldr	r3, [r7, #32]
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d002      	beq.n	8002c30 <HAL_I2C_Mem_Write+0x34>
 8002c2a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d105      	bne.n	8002c3c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002c36:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002c38:	2301      	movs	r3, #1
 8002c3a:	e0ed      	b.n	8002e18 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002c42:	2b01      	cmp	r3, #1
 8002c44:	d101      	bne.n	8002c4a <HAL_I2C_Mem_Write+0x4e>
 8002c46:	2302      	movs	r3, #2
 8002c48:	e0e6      	b.n	8002e18 <HAL_I2C_Mem_Write+0x21c>
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	2201      	movs	r2, #1
 8002c4e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002c52:	f7ff fa2d 	bl	80020b0 <HAL_GetTick>
 8002c56:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002c58:	697b      	ldr	r3, [r7, #20]
 8002c5a:	9300      	str	r3, [sp, #0]
 8002c5c:	2319      	movs	r3, #25
 8002c5e:	2201      	movs	r2, #1
 8002c60:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002c64:	68f8      	ldr	r0, [r7, #12]
 8002c66:	f000 fac3 	bl	80031f0 <I2C_WaitOnFlagUntilTimeout>
 8002c6a:	4603      	mov	r3, r0
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d001      	beq.n	8002c74 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002c70:	2301      	movs	r3, #1
 8002c72:	e0d1      	b.n	8002e18 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	2221      	movs	r2, #33	; 0x21
 8002c78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	2240      	movs	r2, #64	; 0x40
 8002c80:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	2200      	movs	r2, #0
 8002c88:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	6a3a      	ldr	r2, [r7, #32]
 8002c8e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002c94:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	2200      	movs	r2, #0
 8002c9a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002c9c:	88f8      	ldrh	r0, [r7, #6]
 8002c9e:	893a      	ldrh	r2, [r7, #8]
 8002ca0:	8979      	ldrh	r1, [r7, #10]
 8002ca2:	697b      	ldr	r3, [r7, #20]
 8002ca4:	9301      	str	r3, [sp, #4]
 8002ca6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ca8:	9300      	str	r3, [sp, #0]
 8002caa:	4603      	mov	r3, r0
 8002cac:	68f8      	ldr	r0, [r7, #12]
 8002cae:	f000 f9d3 	bl	8003058 <I2C_RequestMemoryWrite>
 8002cb2:	4603      	mov	r3, r0
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d005      	beq.n	8002cc4 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	2200      	movs	r2, #0
 8002cbc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002cc0:	2301      	movs	r3, #1
 8002cc2:	e0a9      	b.n	8002e18 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cc8:	b29b      	uxth	r3, r3
 8002cca:	2bff      	cmp	r3, #255	; 0xff
 8002ccc:	d90e      	bls.n	8002cec <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	22ff      	movs	r2, #255	; 0xff
 8002cd2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cd8:	b2da      	uxtb	r2, r3
 8002cda:	8979      	ldrh	r1, [r7, #10]
 8002cdc:	2300      	movs	r3, #0
 8002cde:	9300      	str	r3, [sp, #0]
 8002ce0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002ce4:	68f8      	ldr	r0, [r7, #12]
 8002ce6:	f000 fc99 	bl	800361c <I2C_TransferConfig>
 8002cea:	e00f      	b.n	8002d0c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cf0:	b29a      	uxth	r2, r3
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cfa:	b2da      	uxtb	r2, r3
 8002cfc:	8979      	ldrh	r1, [r7, #10]
 8002cfe:	2300      	movs	r3, #0
 8002d00:	9300      	str	r3, [sp, #0]
 8002d02:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002d06:	68f8      	ldr	r0, [r7, #12]
 8002d08:	f000 fc88 	bl	800361c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d0c:	697a      	ldr	r2, [r7, #20]
 8002d0e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002d10:	68f8      	ldr	r0, [r7, #12]
 8002d12:	f000 faad 	bl	8003270 <I2C_WaitOnTXISFlagUntilTimeout>
 8002d16:	4603      	mov	r3, r0
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d001      	beq.n	8002d20 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8002d1c:	2301      	movs	r3, #1
 8002d1e:	e07b      	b.n	8002e18 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d24:	781a      	ldrb	r2, [r3, #0]
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d30:	1c5a      	adds	r2, r3, #1
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d3a:	b29b      	uxth	r3, r3
 8002d3c:	3b01      	subs	r3, #1
 8002d3e:	b29a      	uxth	r2, r3
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d48:	3b01      	subs	r3, #1
 8002d4a:	b29a      	uxth	r2, r3
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d54:	b29b      	uxth	r3, r3
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d034      	beq.n	8002dc4 <HAL_I2C_Mem_Write+0x1c8>
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d130      	bne.n	8002dc4 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002d62:	697b      	ldr	r3, [r7, #20]
 8002d64:	9300      	str	r3, [sp, #0]
 8002d66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d68:	2200      	movs	r2, #0
 8002d6a:	2180      	movs	r1, #128	; 0x80
 8002d6c:	68f8      	ldr	r0, [r7, #12]
 8002d6e:	f000 fa3f 	bl	80031f0 <I2C_WaitOnFlagUntilTimeout>
 8002d72:	4603      	mov	r3, r0
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d001      	beq.n	8002d7c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8002d78:	2301      	movs	r3, #1
 8002d7a:	e04d      	b.n	8002e18 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d80:	b29b      	uxth	r3, r3
 8002d82:	2bff      	cmp	r3, #255	; 0xff
 8002d84:	d90e      	bls.n	8002da4 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	22ff      	movs	r2, #255	; 0xff
 8002d8a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d90:	b2da      	uxtb	r2, r3
 8002d92:	8979      	ldrh	r1, [r7, #10]
 8002d94:	2300      	movs	r3, #0
 8002d96:	9300      	str	r3, [sp, #0]
 8002d98:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002d9c:	68f8      	ldr	r0, [r7, #12]
 8002d9e:	f000 fc3d 	bl	800361c <I2C_TransferConfig>
 8002da2:	e00f      	b.n	8002dc4 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002da8:	b29a      	uxth	r2, r3
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002db2:	b2da      	uxtb	r2, r3
 8002db4:	8979      	ldrh	r1, [r7, #10]
 8002db6:	2300      	movs	r3, #0
 8002db8:	9300      	str	r3, [sp, #0]
 8002dba:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002dbe:	68f8      	ldr	r0, [r7, #12]
 8002dc0:	f000 fc2c 	bl	800361c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dc8:	b29b      	uxth	r3, r3
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d19e      	bne.n	8002d0c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002dce:	697a      	ldr	r2, [r7, #20]
 8002dd0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002dd2:	68f8      	ldr	r0, [r7, #12]
 8002dd4:	f000 fa8c 	bl	80032f0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002dd8:	4603      	mov	r3, r0
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d001      	beq.n	8002de2 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8002dde:	2301      	movs	r3, #1
 8002de0:	e01a      	b.n	8002e18 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	2220      	movs	r2, #32
 8002de8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	6859      	ldr	r1, [r3, #4]
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	681a      	ldr	r2, [r3, #0]
 8002df4:	4b0a      	ldr	r3, [pc, #40]	; (8002e20 <HAL_I2C_Mem_Write+0x224>)
 8002df6:	400b      	ands	r3, r1
 8002df8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	2220      	movs	r2, #32
 8002dfe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	2200      	movs	r2, #0
 8002e06:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002e12:	2300      	movs	r3, #0
 8002e14:	e000      	b.n	8002e18 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8002e16:	2302      	movs	r3, #2
  }
}
 8002e18:	4618      	mov	r0, r3
 8002e1a:	3718      	adds	r7, #24
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	bd80      	pop	{r7, pc}
 8002e20:	fe00e800 	.word	0xfe00e800

08002e24 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b088      	sub	sp, #32
 8002e28:	af02      	add	r7, sp, #8
 8002e2a:	60f8      	str	r0, [r7, #12]
 8002e2c:	4608      	mov	r0, r1
 8002e2e:	4611      	mov	r1, r2
 8002e30:	461a      	mov	r2, r3
 8002e32:	4603      	mov	r3, r0
 8002e34:	817b      	strh	r3, [r7, #10]
 8002e36:	460b      	mov	r3, r1
 8002e38:	813b      	strh	r3, [r7, #8]
 8002e3a:	4613      	mov	r3, r2
 8002e3c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e44:	b2db      	uxtb	r3, r3
 8002e46:	2b20      	cmp	r3, #32
 8002e48:	f040 80fd 	bne.w	8003046 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8002e4c:	6a3b      	ldr	r3, [r7, #32]
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d002      	beq.n	8002e58 <HAL_I2C_Mem_Read+0x34>
 8002e52:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d105      	bne.n	8002e64 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002e5e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002e60:	2301      	movs	r3, #1
 8002e62:	e0f1      	b.n	8003048 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002e6a:	2b01      	cmp	r3, #1
 8002e6c:	d101      	bne.n	8002e72 <HAL_I2C_Mem_Read+0x4e>
 8002e6e:	2302      	movs	r3, #2
 8002e70:	e0ea      	b.n	8003048 <HAL_I2C_Mem_Read+0x224>
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	2201      	movs	r2, #1
 8002e76:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002e7a:	f7ff f919 	bl	80020b0 <HAL_GetTick>
 8002e7e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002e80:	697b      	ldr	r3, [r7, #20]
 8002e82:	9300      	str	r3, [sp, #0]
 8002e84:	2319      	movs	r3, #25
 8002e86:	2201      	movs	r2, #1
 8002e88:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002e8c:	68f8      	ldr	r0, [r7, #12]
 8002e8e:	f000 f9af 	bl	80031f0 <I2C_WaitOnFlagUntilTimeout>
 8002e92:	4603      	mov	r3, r0
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d001      	beq.n	8002e9c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8002e98:	2301      	movs	r3, #1
 8002e9a:	e0d5      	b.n	8003048 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	2222      	movs	r2, #34	; 0x22
 8002ea0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	2240      	movs	r2, #64	; 0x40
 8002ea8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	2200      	movs	r2, #0
 8002eb0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	6a3a      	ldr	r2, [r7, #32]
 8002eb6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002ebc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002ec4:	88f8      	ldrh	r0, [r7, #6]
 8002ec6:	893a      	ldrh	r2, [r7, #8]
 8002ec8:	8979      	ldrh	r1, [r7, #10]
 8002eca:	697b      	ldr	r3, [r7, #20]
 8002ecc:	9301      	str	r3, [sp, #4]
 8002ece:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ed0:	9300      	str	r3, [sp, #0]
 8002ed2:	4603      	mov	r3, r0
 8002ed4:	68f8      	ldr	r0, [r7, #12]
 8002ed6:	f000 f913 	bl	8003100 <I2C_RequestMemoryRead>
 8002eda:	4603      	mov	r3, r0
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d005      	beq.n	8002eec <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002ee8:	2301      	movs	r3, #1
 8002eea:	e0ad      	b.n	8003048 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ef0:	b29b      	uxth	r3, r3
 8002ef2:	2bff      	cmp	r3, #255	; 0xff
 8002ef4:	d90e      	bls.n	8002f14 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	22ff      	movs	r2, #255	; 0xff
 8002efa:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f00:	b2da      	uxtb	r2, r3
 8002f02:	8979      	ldrh	r1, [r7, #10]
 8002f04:	4b52      	ldr	r3, [pc, #328]	; (8003050 <HAL_I2C_Mem_Read+0x22c>)
 8002f06:	9300      	str	r3, [sp, #0]
 8002f08:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002f0c:	68f8      	ldr	r0, [r7, #12]
 8002f0e:	f000 fb85 	bl	800361c <I2C_TransferConfig>
 8002f12:	e00f      	b.n	8002f34 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f18:	b29a      	uxth	r2, r3
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f22:	b2da      	uxtb	r2, r3
 8002f24:	8979      	ldrh	r1, [r7, #10]
 8002f26:	4b4a      	ldr	r3, [pc, #296]	; (8003050 <HAL_I2C_Mem_Read+0x22c>)
 8002f28:	9300      	str	r3, [sp, #0]
 8002f2a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002f2e:	68f8      	ldr	r0, [r7, #12]
 8002f30:	f000 fb74 	bl	800361c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002f34:	697b      	ldr	r3, [r7, #20]
 8002f36:	9300      	str	r3, [sp, #0]
 8002f38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	2104      	movs	r1, #4
 8002f3e:	68f8      	ldr	r0, [r7, #12]
 8002f40:	f000 f956 	bl	80031f0 <I2C_WaitOnFlagUntilTimeout>
 8002f44:	4603      	mov	r3, r0
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d001      	beq.n	8002f4e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8002f4a:	2301      	movs	r3, #1
 8002f4c:	e07c      	b.n	8003048 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f58:	b2d2      	uxtb	r2, r2
 8002f5a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f60:	1c5a      	adds	r2, r3, #1
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f6a:	3b01      	subs	r3, #1
 8002f6c:	b29a      	uxth	r2, r3
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f76:	b29b      	uxth	r3, r3
 8002f78:	3b01      	subs	r3, #1
 8002f7a:	b29a      	uxth	r2, r3
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f84:	b29b      	uxth	r3, r3
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d034      	beq.n	8002ff4 <HAL_I2C_Mem_Read+0x1d0>
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d130      	bne.n	8002ff4 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002f92:	697b      	ldr	r3, [r7, #20]
 8002f94:	9300      	str	r3, [sp, #0]
 8002f96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f98:	2200      	movs	r2, #0
 8002f9a:	2180      	movs	r1, #128	; 0x80
 8002f9c:	68f8      	ldr	r0, [r7, #12]
 8002f9e:	f000 f927 	bl	80031f0 <I2C_WaitOnFlagUntilTimeout>
 8002fa2:	4603      	mov	r3, r0
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d001      	beq.n	8002fac <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8002fa8:	2301      	movs	r3, #1
 8002faa:	e04d      	b.n	8003048 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fb0:	b29b      	uxth	r3, r3
 8002fb2:	2bff      	cmp	r3, #255	; 0xff
 8002fb4:	d90e      	bls.n	8002fd4 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	22ff      	movs	r2, #255	; 0xff
 8002fba:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fc0:	b2da      	uxtb	r2, r3
 8002fc2:	8979      	ldrh	r1, [r7, #10]
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	9300      	str	r3, [sp, #0]
 8002fc8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002fcc:	68f8      	ldr	r0, [r7, #12]
 8002fce:	f000 fb25 	bl	800361c <I2C_TransferConfig>
 8002fd2:	e00f      	b.n	8002ff4 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fd8:	b29a      	uxth	r2, r3
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fe2:	b2da      	uxtb	r2, r3
 8002fe4:	8979      	ldrh	r1, [r7, #10]
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	9300      	str	r3, [sp, #0]
 8002fea:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002fee:	68f8      	ldr	r0, [r7, #12]
 8002ff0:	f000 fb14 	bl	800361c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ff8:	b29b      	uxth	r3, r3
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d19a      	bne.n	8002f34 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ffe:	697a      	ldr	r2, [r7, #20]
 8003000:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003002:	68f8      	ldr	r0, [r7, #12]
 8003004:	f000 f974 	bl	80032f0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003008:	4603      	mov	r3, r0
 800300a:	2b00      	cmp	r3, #0
 800300c:	d001      	beq.n	8003012 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800300e:	2301      	movs	r3, #1
 8003010:	e01a      	b.n	8003048 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	2220      	movs	r2, #32
 8003018:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	6859      	ldr	r1, [r3, #4]
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	681a      	ldr	r2, [r3, #0]
 8003024:	4b0b      	ldr	r3, [pc, #44]	; (8003054 <HAL_I2C_Mem_Read+0x230>)
 8003026:	400b      	ands	r3, r1
 8003028:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	2220      	movs	r2, #32
 800302e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	2200      	movs	r2, #0
 8003036:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	2200      	movs	r2, #0
 800303e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003042:	2300      	movs	r3, #0
 8003044:	e000      	b.n	8003048 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8003046:	2302      	movs	r3, #2
  }
}
 8003048:	4618      	mov	r0, r3
 800304a:	3718      	adds	r7, #24
 800304c:	46bd      	mov	sp, r7
 800304e:	bd80      	pop	{r7, pc}
 8003050:	80002400 	.word	0x80002400
 8003054:	fe00e800 	.word	0xfe00e800

08003058 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8003058:	b580      	push	{r7, lr}
 800305a:	b086      	sub	sp, #24
 800305c:	af02      	add	r7, sp, #8
 800305e:	60f8      	str	r0, [r7, #12]
 8003060:	4608      	mov	r0, r1
 8003062:	4611      	mov	r1, r2
 8003064:	461a      	mov	r2, r3
 8003066:	4603      	mov	r3, r0
 8003068:	817b      	strh	r3, [r7, #10]
 800306a:	460b      	mov	r3, r1
 800306c:	813b      	strh	r3, [r7, #8]
 800306e:	4613      	mov	r3, r2
 8003070:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003072:	88fb      	ldrh	r3, [r7, #6]
 8003074:	b2da      	uxtb	r2, r3
 8003076:	8979      	ldrh	r1, [r7, #10]
 8003078:	4b20      	ldr	r3, [pc, #128]	; (80030fc <I2C_RequestMemoryWrite+0xa4>)
 800307a:	9300      	str	r3, [sp, #0]
 800307c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003080:	68f8      	ldr	r0, [r7, #12]
 8003082:	f000 facb 	bl	800361c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003086:	69fa      	ldr	r2, [r7, #28]
 8003088:	69b9      	ldr	r1, [r7, #24]
 800308a:	68f8      	ldr	r0, [r7, #12]
 800308c:	f000 f8f0 	bl	8003270 <I2C_WaitOnTXISFlagUntilTimeout>
 8003090:	4603      	mov	r3, r0
 8003092:	2b00      	cmp	r3, #0
 8003094:	d001      	beq.n	800309a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8003096:	2301      	movs	r3, #1
 8003098:	e02c      	b.n	80030f4 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800309a:	88fb      	ldrh	r3, [r7, #6]
 800309c:	2b01      	cmp	r3, #1
 800309e:	d105      	bne.n	80030ac <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80030a0:	893b      	ldrh	r3, [r7, #8]
 80030a2:	b2da      	uxtb	r2, r3
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	629a      	str	r2, [r3, #40]	; 0x28
 80030aa:	e015      	b.n	80030d8 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80030ac:	893b      	ldrh	r3, [r7, #8]
 80030ae:	0a1b      	lsrs	r3, r3, #8
 80030b0:	b29b      	uxth	r3, r3
 80030b2:	b2da      	uxtb	r2, r3
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80030ba:	69fa      	ldr	r2, [r7, #28]
 80030bc:	69b9      	ldr	r1, [r7, #24]
 80030be:	68f8      	ldr	r0, [r7, #12]
 80030c0:	f000 f8d6 	bl	8003270 <I2C_WaitOnTXISFlagUntilTimeout>
 80030c4:	4603      	mov	r3, r0
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d001      	beq.n	80030ce <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80030ca:	2301      	movs	r3, #1
 80030cc:	e012      	b.n	80030f4 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80030ce:	893b      	ldrh	r3, [r7, #8]
 80030d0:	b2da      	uxtb	r2, r3
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80030d8:	69fb      	ldr	r3, [r7, #28]
 80030da:	9300      	str	r3, [sp, #0]
 80030dc:	69bb      	ldr	r3, [r7, #24]
 80030de:	2200      	movs	r2, #0
 80030e0:	2180      	movs	r1, #128	; 0x80
 80030e2:	68f8      	ldr	r0, [r7, #12]
 80030e4:	f000 f884 	bl	80031f0 <I2C_WaitOnFlagUntilTimeout>
 80030e8:	4603      	mov	r3, r0
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d001      	beq.n	80030f2 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80030ee:	2301      	movs	r3, #1
 80030f0:	e000      	b.n	80030f4 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80030f2:	2300      	movs	r3, #0
}
 80030f4:	4618      	mov	r0, r3
 80030f6:	3710      	adds	r7, #16
 80030f8:	46bd      	mov	sp, r7
 80030fa:	bd80      	pop	{r7, pc}
 80030fc:	80002000 	.word	0x80002000

08003100 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8003100:	b580      	push	{r7, lr}
 8003102:	b086      	sub	sp, #24
 8003104:	af02      	add	r7, sp, #8
 8003106:	60f8      	str	r0, [r7, #12]
 8003108:	4608      	mov	r0, r1
 800310a:	4611      	mov	r1, r2
 800310c:	461a      	mov	r2, r3
 800310e:	4603      	mov	r3, r0
 8003110:	817b      	strh	r3, [r7, #10]
 8003112:	460b      	mov	r3, r1
 8003114:	813b      	strh	r3, [r7, #8]
 8003116:	4613      	mov	r3, r2
 8003118:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800311a:	88fb      	ldrh	r3, [r7, #6]
 800311c:	b2da      	uxtb	r2, r3
 800311e:	8979      	ldrh	r1, [r7, #10]
 8003120:	4b20      	ldr	r3, [pc, #128]	; (80031a4 <I2C_RequestMemoryRead+0xa4>)
 8003122:	9300      	str	r3, [sp, #0]
 8003124:	2300      	movs	r3, #0
 8003126:	68f8      	ldr	r0, [r7, #12]
 8003128:	f000 fa78 	bl	800361c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800312c:	69fa      	ldr	r2, [r7, #28]
 800312e:	69b9      	ldr	r1, [r7, #24]
 8003130:	68f8      	ldr	r0, [r7, #12]
 8003132:	f000 f89d 	bl	8003270 <I2C_WaitOnTXISFlagUntilTimeout>
 8003136:	4603      	mov	r3, r0
 8003138:	2b00      	cmp	r3, #0
 800313a:	d001      	beq.n	8003140 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800313c:	2301      	movs	r3, #1
 800313e:	e02c      	b.n	800319a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003140:	88fb      	ldrh	r3, [r7, #6]
 8003142:	2b01      	cmp	r3, #1
 8003144:	d105      	bne.n	8003152 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003146:	893b      	ldrh	r3, [r7, #8]
 8003148:	b2da      	uxtb	r2, r3
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	629a      	str	r2, [r3, #40]	; 0x28
 8003150:	e015      	b.n	800317e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003152:	893b      	ldrh	r3, [r7, #8]
 8003154:	0a1b      	lsrs	r3, r3, #8
 8003156:	b29b      	uxth	r3, r3
 8003158:	b2da      	uxtb	r2, r3
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003160:	69fa      	ldr	r2, [r7, #28]
 8003162:	69b9      	ldr	r1, [r7, #24]
 8003164:	68f8      	ldr	r0, [r7, #12]
 8003166:	f000 f883 	bl	8003270 <I2C_WaitOnTXISFlagUntilTimeout>
 800316a:	4603      	mov	r3, r0
 800316c:	2b00      	cmp	r3, #0
 800316e:	d001      	beq.n	8003174 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8003170:	2301      	movs	r3, #1
 8003172:	e012      	b.n	800319a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003174:	893b      	ldrh	r3, [r7, #8]
 8003176:	b2da      	uxtb	r2, r3
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800317e:	69fb      	ldr	r3, [r7, #28]
 8003180:	9300      	str	r3, [sp, #0]
 8003182:	69bb      	ldr	r3, [r7, #24]
 8003184:	2200      	movs	r2, #0
 8003186:	2140      	movs	r1, #64	; 0x40
 8003188:	68f8      	ldr	r0, [r7, #12]
 800318a:	f000 f831 	bl	80031f0 <I2C_WaitOnFlagUntilTimeout>
 800318e:	4603      	mov	r3, r0
 8003190:	2b00      	cmp	r3, #0
 8003192:	d001      	beq.n	8003198 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8003194:	2301      	movs	r3, #1
 8003196:	e000      	b.n	800319a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8003198:	2300      	movs	r3, #0
}
 800319a:	4618      	mov	r0, r3
 800319c:	3710      	adds	r7, #16
 800319e:	46bd      	mov	sp, r7
 80031a0:	bd80      	pop	{r7, pc}
 80031a2:	bf00      	nop
 80031a4:	80002000 	.word	0x80002000

080031a8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80031a8:	b480      	push	{r7}
 80031aa:	b083      	sub	sp, #12
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	699b      	ldr	r3, [r3, #24]
 80031b6:	f003 0302 	and.w	r3, r3, #2
 80031ba:	2b02      	cmp	r3, #2
 80031bc:	d103      	bne.n	80031c6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	2200      	movs	r2, #0
 80031c4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	699b      	ldr	r3, [r3, #24]
 80031cc:	f003 0301 	and.w	r3, r3, #1
 80031d0:	2b01      	cmp	r3, #1
 80031d2:	d007      	beq.n	80031e4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	699a      	ldr	r2, [r3, #24]
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f042 0201 	orr.w	r2, r2, #1
 80031e2:	619a      	str	r2, [r3, #24]
  }
}
 80031e4:	bf00      	nop
 80031e6:	370c      	adds	r7, #12
 80031e8:	46bd      	mov	sp, r7
 80031ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ee:	4770      	bx	lr

080031f0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80031f0:	b580      	push	{r7, lr}
 80031f2:	b084      	sub	sp, #16
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	60f8      	str	r0, [r7, #12]
 80031f8:	60b9      	str	r1, [r7, #8]
 80031fa:	603b      	str	r3, [r7, #0]
 80031fc:	4613      	mov	r3, r2
 80031fe:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003200:	e022      	b.n	8003248 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003202:	683b      	ldr	r3, [r7, #0]
 8003204:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003208:	d01e      	beq.n	8003248 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800320a:	f7fe ff51 	bl	80020b0 <HAL_GetTick>
 800320e:	4602      	mov	r2, r0
 8003210:	69bb      	ldr	r3, [r7, #24]
 8003212:	1ad3      	subs	r3, r2, r3
 8003214:	683a      	ldr	r2, [r7, #0]
 8003216:	429a      	cmp	r2, r3
 8003218:	d302      	bcc.n	8003220 <I2C_WaitOnFlagUntilTimeout+0x30>
 800321a:	683b      	ldr	r3, [r7, #0]
 800321c:	2b00      	cmp	r3, #0
 800321e:	d113      	bne.n	8003248 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003224:	f043 0220 	orr.w	r2, r3, #32
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	2220      	movs	r2, #32
 8003230:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	2200      	movs	r2, #0
 8003238:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	2200      	movs	r2, #0
 8003240:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8003244:	2301      	movs	r3, #1
 8003246:	e00f      	b.n	8003268 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	699a      	ldr	r2, [r3, #24]
 800324e:	68bb      	ldr	r3, [r7, #8]
 8003250:	4013      	ands	r3, r2
 8003252:	68ba      	ldr	r2, [r7, #8]
 8003254:	429a      	cmp	r2, r3
 8003256:	bf0c      	ite	eq
 8003258:	2301      	moveq	r3, #1
 800325a:	2300      	movne	r3, #0
 800325c:	b2db      	uxtb	r3, r3
 800325e:	461a      	mov	r2, r3
 8003260:	79fb      	ldrb	r3, [r7, #7]
 8003262:	429a      	cmp	r2, r3
 8003264:	d0cd      	beq.n	8003202 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003266:	2300      	movs	r3, #0
}
 8003268:	4618      	mov	r0, r3
 800326a:	3710      	adds	r7, #16
 800326c:	46bd      	mov	sp, r7
 800326e:	bd80      	pop	{r7, pc}

08003270 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003270:	b580      	push	{r7, lr}
 8003272:	b084      	sub	sp, #16
 8003274:	af00      	add	r7, sp, #0
 8003276:	60f8      	str	r0, [r7, #12]
 8003278:	60b9      	str	r1, [r7, #8]
 800327a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800327c:	e02c      	b.n	80032d8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800327e:	687a      	ldr	r2, [r7, #4]
 8003280:	68b9      	ldr	r1, [r7, #8]
 8003282:	68f8      	ldr	r0, [r7, #12]
 8003284:	f000 f8ea 	bl	800345c <I2C_IsErrorOccurred>
 8003288:	4603      	mov	r3, r0
 800328a:	2b00      	cmp	r3, #0
 800328c:	d001      	beq.n	8003292 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800328e:	2301      	movs	r3, #1
 8003290:	e02a      	b.n	80032e8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003292:	68bb      	ldr	r3, [r7, #8]
 8003294:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003298:	d01e      	beq.n	80032d8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800329a:	f7fe ff09 	bl	80020b0 <HAL_GetTick>
 800329e:	4602      	mov	r2, r0
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	1ad3      	subs	r3, r2, r3
 80032a4:	68ba      	ldr	r2, [r7, #8]
 80032a6:	429a      	cmp	r2, r3
 80032a8:	d302      	bcc.n	80032b0 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80032aa:	68bb      	ldr	r3, [r7, #8]
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d113      	bne.n	80032d8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032b4:	f043 0220 	orr.w	r2, r3, #32
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	2220      	movs	r2, #32
 80032c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	2200      	movs	r2, #0
 80032c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	2200      	movs	r2, #0
 80032d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80032d4:	2301      	movs	r3, #1
 80032d6:	e007      	b.n	80032e8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	699b      	ldr	r3, [r3, #24]
 80032de:	f003 0302 	and.w	r3, r3, #2
 80032e2:	2b02      	cmp	r3, #2
 80032e4:	d1cb      	bne.n	800327e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80032e6:	2300      	movs	r3, #0
}
 80032e8:	4618      	mov	r0, r3
 80032ea:	3710      	adds	r7, #16
 80032ec:	46bd      	mov	sp, r7
 80032ee:	bd80      	pop	{r7, pc}

080032f0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	b084      	sub	sp, #16
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	60f8      	str	r0, [r7, #12]
 80032f8:	60b9      	str	r1, [r7, #8]
 80032fa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80032fc:	e028      	b.n	8003350 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80032fe:	687a      	ldr	r2, [r7, #4]
 8003300:	68b9      	ldr	r1, [r7, #8]
 8003302:	68f8      	ldr	r0, [r7, #12]
 8003304:	f000 f8aa 	bl	800345c <I2C_IsErrorOccurred>
 8003308:	4603      	mov	r3, r0
 800330a:	2b00      	cmp	r3, #0
 800330c:	d001      	beq.n	8003312 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800330e:	2301      	movs	r3, #1
 8003310:	e026      	b.n	8003360 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003312:	f7fe fecd 	bl	80020b0 <HAL_GetTick>
 8003316:	4602      	mov	r2, r0
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	1ad3      	subs	r3, r2, r3
 800331c:	68ba      	ldr	r2, [r7, #8]
 800331e:	429a      	cmp	r2, r3
 8003320:	d302      	bcc.n	8003328 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003322:	68bb      	ldr	r3, [r7, #8]
 8003324:	2b00      	cmp	r3, #0
 8003326:	d113      	bne.n	8003350 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800332c:	f043 0220 	orr.w	r2, r3, #32
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	2220      	movs	r2, #32
 8003338:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	2200      	movs	r2, #0
 8003340:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	2200      	movs	r2, #0
 8003348:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800334c:	2301      	movs	r3, #1
 800334e:	e007      	b.n	8003360 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	699b      	ldr	r3, [r3, #24]
 8003356:	f003 0320 	and.w	r3, r3, #32
 800335a:	2b20      	cmp	r3, #32
 800335c:	d1cf      	bne.n	80032fe <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800335e:	2300      	movs	r3, #0
}
 8003360:	4618      	mov	r0, r3
 8003362:	3710      	adds	r7, #16
 8003364:	46bd      	mov	sp, r7
 8003366:	bd80      	pop	{r7, pc}

08003368 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003368:	b580      	push	{r7, lr}
 800336a:	b084      	sub	sp, #16
 800336c:	af00      	add	r7, sp, #0
 800336e:	60f8      	str	r0, [r7, #12]
 8003370:	60b9      	str	r1, [r7, #8]
 8003372:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003374:	e064      	b.n	8003440 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003376:	687a      	ldr	r2, [r7, #4]
 8003378:	68b9      	ldr	r1, [r7, #8]
 800337a:	68f8      	ldr	r0, [r7, #12]
 800337c:	f000 f86e 	bl	800345c <I2C_IsErrorOccurred>
 8003380:	4603      	mov	r3, r0
 8003382:	2b00      	cmp	r3, #0
 8003384:	d001      	beq.n	800338a <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003386:	2301      	movs	r3, #1
 8003388:	e062      	b.n	8003450 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	699b      	ldr	r3, [r3, #24]
 8003390:	f003 0320 	and.w	r3, r3, #32
 8003394:	2b20      	cmp	r3, #32
 8003396:	d138      	bne.n	800340a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	699b      	ldr	r3, [r3, #24]
 800339e:	f003 0304 	and.w	r3, r3, #4
 80033a2:	2b04      	cmp	r3, #4
 80033a4:	d105      	bne.n	80033b2 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d001      	beq.n	80033b2 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 80033ae:	2300      	movs	r3, #0
 80033b0:	e04e      	b.n	8003450 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	699b      	ldr	r3, [r3, #24]
 80033b8:	f003 0310 	and.w	r3, r3, #16
 80033bc:	2b10      	cmp	r3, #16
 80033be:	d107      	bne.n	80033d0 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	2210      	movs	r2, #16
 80033c6:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	2204      	movs	r2, #4
 80033cc:	645a      	str	r2, [r3, #68]	; 0x44
 80033ce:	e002      	b.n	80033d6 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	2200      	movs	r2, #0
 80033d4:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	2220      	movs	r2, #32
 80033dc:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	6859      	ldr	r1, [r3, #4]
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	681a      	ldr	r2, [r3, #0]
 80033e8:	4b1b      	ldr	r3, [pc, #108]	; (8003458 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 80033ea:	400b      	ands	r3, r1
 80033ec:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	2220      	movs	r2, #32
 80033f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	2200      	movs	r2, #0
 80033fa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	2200      	movs	r2, #0
 8003402:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003406:	2301      	movs	r3, #1
 8003408:	e022      	b.n	8003450 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800340a:	f7fe fe51 	bl	80020b0 <HAL_GetTick>
 800340e:	4602      	mov	r2, r0
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	1ad3      	subs	r3, r2, r3
 8003414:	68ba      	ldr	r2, [r7, #8]
 8003416:	429a      	cmp	r2, r3
 8003418:	d302      	bcc.n	8003420 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 800341a:	68bb      	ldr	r3, [r7, #8]
 800341c:	2b00      	cmp	r3, #0
 800341e:	d10f      	bne.n	8003440 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003424:	f043 0220 	orr.w	r2, r3, #32
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	2220      	movs	r2, #32
 8003430:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	2200      	movs	r2, #0
 8003438:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800343c:	2301      	movs	r3, #1
 800343e:	e007      	b.n	8003450 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	699b      	ldr	r3, [r3, #24]
 8003446:	f003 0304 	and.w	r3, r3, #4
 800344a:	2b04      	cmp	r3, #4
 800344c:	d193      	bne.n	8003376 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800344e:	2300      	movs	r3, #0
}
 8003450:	4618      	mov	r0, r3
 8003452:	3710      	adds	r7, #16
 8003454:	46bd      	mov	sp, r7
 8003456:	bd80      	pop	{r7, pc}
 8003458:	fe00e800 	.word	0xfe00e800

0800345c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800345c:	b580      	push	{r7, lr}
 800345e:	b08a      	sub	sp, #40	; 0x28
 8003460:	af00      	add	r7, sp, #0
 8003462:	60f8      	str	r0, [r7, #12]
 8003464:	60b9      	str	r1, [r7, #8]
 8003466:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003468:	2300      	movs	r3, #0
 800346a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	699b      	ldr	r3, [r3, #24]
 8003474:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003476:	2300      	movs	r3, #0
 8003478:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800347e:	69bb      	ldr	r3, [r7, #24]
 8003480:	f003 0310 	and.w	r3, r3, #16
 8003484:	2b00      	cmp	r3, #0
 8003486:	d068      	beq.n	800355a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	2210      	movs	r2, #16
 800348e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003490:	e049      	b.n	8003526 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003492:	68bb      	ldr	r3, [r7, #8]
 8003494:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003498:	d045      	beq.n	8003526 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800349a:	f7fe fe09 	bl	80020b0 <HAL_GetTick>
 800349e:	4602      	mov	r2, r0
 80034a0:	69fb      	ldr	r3, [r7, #28]
 80034a2:	1ad3      	subs	r3, r2, r3
 80034a4:	68ba      	ldr	r2, [r7, #8]
 80034a6:	429a      	cmp	r2, r3
 80034a8:	d302      	bcc.n	80034b0 <I2C_IsErrorOccurred+0x54>
 80034aa:	68bb      	ldr	r3, [r7, #8]
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d13a      	bne.n	8003526 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	685b      	ldr	r3, [r3, #4]
 80034b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80034ba:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80034c2:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	699b      	ldr	r3, [r3, #24]
 80034ca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80034ce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80034d2:	d121      	bne.n	8003518 <I2C_IsErrorOccurred+0xbc>
 80034d4:	697b      	ldr	r3, [r7, #20]
 80034d6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80034da:	d01d      	beq.n	8003518 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80034dc:	7cfb      	ldrb	r3, [r7, #19]
 80034de:	2b20      	cmp	r3, #32
 80034e0:	d01a      	beq.n	8003518 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	685a      	ldr	r2, [r3, #4]
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80034f0:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80034f2:	f7fe fddd 	bl	80020b0 <HAL_GetTick>
 80034f6:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80034f8:	e00e      	b.n	8003518 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80034fa:	f7fe fdd9 	bl	80020b0 <HAL_GetTick>
 80034fe:	4602      	mov	r2, r0
 8003500:	69fb      	ldr	r3, [r7, #28]
 8003502:	1ad3      	subs	r3, r2, r3
 8003504:	2b19      	cmp	r3, #25
 8003506:	d907      	bls.n	8003518 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 8003508:	6a3b      	ldr	r3, [r7, #32]
 800350a:	f043 0320 	orr.w	r3, r3, #32
 800350e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003510:	2301      	movs	r3, #1
 8003512:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8003516:	e006      	b.n	8003526 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	699b      	ldr	r3, [r3, #24]
 800351e:	f003 0320 	and.w	r3, r3, #32
 8003522:	2b20      	cmp	r3, #32
 8003524:	d1e9      	bne.n	80034fa <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	699b      	ldr	r3, [r3, #24]
 800352c:	f003 0320 	and.w	r3, r3, #32
 8003530:	2b20      	cmp	r3, #32
 8003532:	d003      	beq.n	800353c <I2C_IsErrorOccurred+0xe0>
 8003534:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003538:	2b00      	cmp	r3, #0
 800353a:	d0aa      	beq.n	8003492 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800353c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003540:	2b00      	cmp	r3, #0
 8003542:	d103      	bne.n	800354c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	2220      	movs	r2, #32
 800354a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800354c:	6a3b      	ldr	r3, [r7, #32]
 800354e:	f043 0304 	orr.w	r3, r3, #4
 8003552:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003554:	2301      	movs	r3, #1
 8003556:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	699b      	ldr	r3, [r3, #24]
 8003560:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003562:	69bb      	ldr	r3, [r7, #24]
 8003564:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003568:	2b00      	cmp	r3, #0
 800356a:	d00b      	beq.n	8003584 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800356c:	6a3b      	ldr	r3, [r7, #32]
 800356e:	f043 0301 	orr.w	r3, r3, #1
 8003572:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f44f 7280 	mov.w	r2, #256	; 0x100
 800357c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800357e:	2301      	movs	r3, #1
 8003580:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003584:	69bb      	ldr	r3, [r7, #24]
 8003586:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800358a:	2b00      	cmp	r3, #0
 800358c:	d00b      	beq.n	80035a6 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800358e:	6a3b      	ldr	r3, [r7, #32]
 8003590:	f043 0308 	orr.w	r3, r3, #8
 8003594:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800359e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80035a0:	2301      	movs	r3, #1
 80035a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80035a6:	69bb      	ldr	r3, [r7, #24]
 80035a8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d00b      	beq.n	80035c8 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80035b0:	6a3b      	ldr	r3, [r7, #32]
 80035b2:	f043 0302 	orr.w	r3, r3, #2
 80035b6:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80035c0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80035c2:	2301      	movs	r3, #1
 80035c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80035c8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d01c      	beq.n	800360a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80035d0:	68f8      	ldr	r0, [r7, #12]
 80035d2:	f7ff fde9 	bl	80031a8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	6859      	ldr	r1, [r3, #4]
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	681a      	ldr	r2, [r3, #0]
 80035e0:	4b0d      	ldr	r3, [pc, #52]	; (8003618 <I2C_IsErrorOccurred+0x1bc>)
 80035e2:	400b      	ands	r3, r1
 80035e4:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80035ea:	6a3b      	ldr	r3, [r7, #32]
 80035ec:	431a      	orrs	r2, r3
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	2220      	movs	r2, #32
 80035f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	2200      	movs	r2, #0
 80035fe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	2200      	movs	r2, #0
 8003606:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800360a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800360e:	4618      	mov	r0, r3
 8003610:	3728      	adds	r7, #40	; 0x28
 8003612:	46bd      	mov	sp, r7
 8003614:	bd80      	pop	{r7, pc}
 8003616:	bf00      	nop
 8003618:	fe00e800 	.word	0xfe00e800

0800361c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800361c:	b480      	push	{r7}
 800361e:	b087      	sub	sp, #28
 8003620:	af00      	add	r7, sp, #0
 8003622:	60f8      	str	r0, [r7, #12]
 8003624:	607b      	str	r3, [r7, #4]
 8003626:	460b      	mov	r3, r1
 8003628:	817b      	strh	r3, [r7, #10]
 800362a:	4613      	mov	r3, r2
 800362c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800362e:	897b      	ldrh	r3, [r7, #10]
 8003630:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003634:	7a7b      	ldrb	r3, [r7, #9]
 8003636:	041b      	lsls	r3, r3, #16
 8003638:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800363c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003642:	6a3b      	ldr	r3, [r7, #32]
 8003644:	4313      	orrs	r3, r2
 8003646:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800364a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	685a      	ldr	r2, [r3, #4]
 8003652:	6a3b      	ldr	r3, [r7, #32]
 8003654:	0d5b      	lsrs	r3, r3, #21
 8003656:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800365a:	4b08      	ldr	r3, [pc, #32]	; (800367c <I2C_TransferConfig+0x60>)
 800365c:	430b      	orrs	r3, r1
 800365e:	43db      	mvns	r3, r3
 8003660:	ea02 0103 	and.w	r1, r2, r3
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	697a      	ldr	r2, [r7, #20]
 800366a:	430a      	orrs	r2, r1
 800366c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800366e:	bf00      	nop
 8003670:	371c      	adds	r7, #28
 8003672:	46bd      	mov	sp, r7
 8003674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003678:	4770      	bx	lr
 800367a:	bf00      	nop
 800367c:	03ff63ff 	.word	0x03ff63ff

08003680 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003680:	b480      	push	{r7}
 8003682:	b083      	sub	sp, #12
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
 8003688:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003690:	b2db      	uxtb	r3, r3
 8003692:	2b20      	cmp	r3, #32
 8003694:	d138      	bne.n	8003708 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800369c:	2b01      	cmp	r3, #1
 800369e:	d101      	bne.n	80036a4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80036a0:	2302      	movs	r3, #2
 80036a2:	e032      	b.n	800370a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2201      	movs	r2, #1
 80036a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2224      	movs	r2, #36	; 0x24
 80036b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	681a      	ldr	r2, [r3, #0]
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f022 0201 	bic.w	r2, r2, #1
 80036c2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	681a      	ldr	r2, [r3, #0]
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80036d2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	6819      	ldr	r1, [r3, #0]
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	683a      	ldr	r2, [r7, #0]
 80036e0:	430a      	orrs	r2, r1
 80036e2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	681a      	ldr	r2, [r3, #0]
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f042 0201 	orr.w	r2, r2, #1
 80036f2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2220      	movs	r2, #32
 80036f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2200      	movs	r2, #0
 8003700:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003704:	2300      	movs	r3, #0
 8003706:	e000      	b.n	800370a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003708:	2302      	movs	r3, #2
  }
}
 800370a:	4618      	mov	r0, r3
 800370c:	370c      	adds	r7, #12
 800370e:	46bd      	mov	sp, r7
 8003710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003714:	4770      	bx	lr

08003716 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003716:	b480      	push	{r7}
 8003718:	b085      	sub	sp, #20
 800371a:	af00      	add	r7, sp, #0
 800371c:	6078      	str	r0, [r7, #4]
 800371e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003726:	b2db      	uxtb	r3, r3
 8003728:	2b20      	cmp	r3, #32
 800372a:	d139      	bne.n	80037a0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003732:	2b01      	cmp	r3, #1
 8003734:	d101      	bne.n	800373a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003736:	2302      	movs	r3, #2
 8003738:	e033      	b.n	80037a2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	2201      	movs	r2, #1
 800373e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2224      	movs	r2, #36	; 0x24
 8003746:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	681a      	ldr	r2, [r3, #0]
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f022 0201 	bic.w	r2, r2, #1
 8003758:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003768:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800376a:	683b      	ldr	r3, [r7, #0]
 800376c:	021b      	lsls	r3, r3, #8
 800376e:	68fa      	ldr	r2, [r7, #12]
 8003770:	4313      	orrs	r3, r2
 8003772:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	68fa      	ldr	r2, [r7, #12]
 800377a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	681a      	ldr	r2, [r3, #0]
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f042 0201 	orr.w	r2, r2, #1
 800378a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2220      	movs	r2, #32
 8003790:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2200      	movs	r2, #0
 8003798:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800379c:	2300      	movs	r3, #0
 800379e:	e000      	b.n	80037a2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80037a0:	2302      	movs	r3, #2
  }
}
 80037a2:	4618      	mov	r0, r3
 80037a4:	3714      	adds	r7, #20
 80037a6:	46bd      	mov	sp, r7
 80037a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ac:	4770      	bx	lr
	...

080037b0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b086      	sub	sp, #24
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80037b8:	2300      	movs	r3, #0
 80037ba:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d101      	bne.n	80037c6 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80037c2:	2301      	movs	r3, #1
 80037c4:	e291      	b.n	8003cea <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f003 0301 	and.w	r3, r3, #1
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	f000 8087 	beq.w	80038e2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80037d4:	4b96      	ldr	r3, [pc, #600]	; (8003a30 <HAL_RCC_OscConfig+0x280>)
 80037d6:	689b      	ldr	r3, [r3, #8]
 80037d8:	f003 030c 	and.w	r3, r3, #12
 80037dc:	2b04      	cmp	r3, #4
 80037de:	d00c      	beq.n	80037fa <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80037e0:	4b93      	ldr	r3, [pc, #588]	; (8003a30 <HAL_RCC_OscConfig+0x280>)
 80037e2:	689b      	ldr	r3, [r3, #8]
 80037e4:	f003 030c 	and.w	r3, r3, #12
 80037e8:	2b08      	cmp	r3, #8
 80037ea:	d112      	bne.n	8003812 <HAL_RCC_OscConfig+0x62>
 80037ec:	4b90      	ldr	r3, [pc, #576]	; (8003a30 <HAL_RCC_OscConfig+0x280>)
 80037ee:	685b      	ldr	r3, [r3, #4]
 80037f0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80037f4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80037f8:	d10b      	bne.n	8003812 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037fa:	4b8d      	ldr	r3, [pc, #564]	; (8003a30 <HAL_RCC_OscConfig+0x280>)
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003802:	2b00      	cmp	r3, #0
 8003804:	d06c      	beq.n	80038e0 <HAL_RCC_OscConfig+0x130>
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	685b      	ldr	r3, [r3, #4]
 800380a:	2b00      	cmp	r3, #0
 800380c:	d168      	bne.n	80038e0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800380e:	2301      	movs	r3, #1
 8003810:	e26b      	b.n	8003cea <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	685b      	ldr	r3, [r3, #4]
 8003816:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800381a:	d106      	bne.n	800382a <HAL_RCC_OscConfig+0x7a>
 800381c:	4b84      	ldr	r3, [pc, #528]	; (8003a30 <HAL_RCC_OscConfig+0x280>)
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	4a83      	ldr	r2, [pc, #524]	; (8003a30 <HAL_RCC_OscConfig+0x280>)
 8003822:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003826:	6013      	str	r3, [r2, #0]
 8003828:	e02e      	b.n	8003888 <HAL_RCC_OscConfig+0xd8>
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	685b      	ldr	r3, [r3, #4]
 800382e:	2b00      	cmp	r3, #0
 8003830:	d10c      	bne.n	800384c <HAL_RCC_OscConfig+0x9c>
 8003832:	4b7f      	ldr	r3, [pc, #508]	; (8003a30 <HAL_RCC_OscConfig+0x280>)
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	4a7e      	ldr	r2, [pc, #504]	; (8003a30 <HAL_RCC_OscConfig+0x280>)
 8003838:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800383c:	6013      	str	r3, [r2, #0]
 800383e:	4b7c      	ldr	r3, [pc, #496]	; (8003a30 <HAL_RCC_OscConfig+0x280>)
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	4a7b      	ldr	r2, [pc, #492]	; (8003a30 <HAL_RCC_OscConfig+0x280>)
 8003844:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003848:	6013      	str	r3, [r2, #0]
 800384a:	e01d      	b.n	8003888 <HAL_RCC_OscConfig+0xd8>
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	685b      	ldr	r3, [r3, #4]
 8003850:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003854:	d10c      	bne.n	8003870 <HAL_RCC_OscConfig+0xc0>
 8003856:	4b76      	ldr	r3, [pc, #472]	; (8003a30 <HAL_RCC_OscConfig+0x280>)
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	4a75      	ldr	r2, [pc, #468]	; (8003a30 <HAL_RCC_OscConfig+0x280>)
 800385c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003860:	6013      	str	r3, [r2, #0]
 8003862:	4b73      	ldr	r3, [pc, #460]	; (8003a30 <HAL_RCC_OscConfig+0x280>)
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	4a72      	ldr	r2, [pc, #456]	; (8003a30 <HAL_RCC_OscConfig+0x280>)
 8003868:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800386c:	6013      	str	r3, [r2, #0]
 800386e:	e00b      	b.n	8003888 <HAL_RCC_OscConfig+0xd8>
 8003870:	4b6f      	ldr	r3, [pc, #444]	; (8003a30 <HAL_RCC_OscConfig+0x280>)
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	4a6e      	ldr	r2, [pc, #440]	; (8003a30 <HAL_RCC_OscConfig+0x280>)
 8003876:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800387a:	6013      	str	r3, [r2, #0]
 800387c:	4b6c      	ldr	r3, [pc, #432]	; (8003a30 <HAL_RCC_OscConfig+0x280>)
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	4a6b      	ldr	r2, [pc, #428]	; (8003a30 <HAL_RCC_OscConfig+0x280>)
 8003882:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003886:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	685b      	ldr	r3, [r3, #4]
 800388c:	2b00      	cmp	r3, #0
 800388e:	d013      	beq.n	80038b8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003890:	f7fe fc0e 	bl	80020b0 <HAL_GetTick>
 8003894:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003896:	e008      	b.n	80038aa <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003898:	f7fe fc0a 	bl	80020b0 <HAL_GetTick>
 800389c:	4602      	mov	r2, r0
 800389e:	693b      	ldr	r3, [r7, #16]
 80038a0:	1ad3      	subs	r3, r2, r3
 80038a2:	2b64      	cmp	r3, #100	; 0x64
 80038a4:	d901      	bls.n	80038aa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80038a6:	2303      	movs	r3, #3
 80038a8:	e21f      	b.n	8003cea <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038aa:	4b61      	ldr	r3, [pc, #388]	; (8003a30 <HAL_RCC_OscConfig+0x280>)
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d0f0      	beq.n	8003898 <HAL_RCC_OscConfig+0xe8>
 80038b6:	e014      	b.n	80038e2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038b8:	f7fe fbfa 	bl	80020b0 <HAL_GetTick>
 80038bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80038be:	e008      	b.n	80038d2 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80038c0:	f7fe fbf6 	bl	80020b0 <HAL_GetTick>
 80038c4:	4602      	mov	r2, r0
 80038c6:	693b      	ldr	r3, [r7, #16]
 80038c8:	1ad3      	subs	r3, r2, r3
 80038ca:	2b64      	cmp	r3, #100	; 0x64
 80038cc:	d901      	bls.n	80038d2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80038ce:	2303      	movs	r3, #3
 80038d0:	e20b      	b.n	8003cea <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80038d2:	4b57      	ldr	r3, [pc, #348]	; (8003a30 <HAL_RCC_OscConfig+0x280>)
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d1f0      	bne.n	80038c0 <HAL_RCC_OscConfig+0x110>
 80038de:	e000      	b.n	80038e2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f003 0302 	and.w	r3, r3, #2
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d069      	beq.n	80039c2 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80038ee:	4b50      	ldr	r3, [pc, #320]	; (8003a30 <HAL_RCC_OscConfig+0x280>)
 80038f0:	689b      	ldr	r3, [r3, #8]
 80038f2:	f003 030c 	and.w	r3, r3, #12
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d00b      	beq.n	8003912 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80038fa:	4b4d      	ldr	r3, [pc, #308]	; (8003a30 <HAL_RCC_OscConfig+0x280>)
 80038fc:	689b      	ldr	r3, [r3, #8]
 80038fe:	f003 030c 	and.w	r3, r3, #12
 8003902:	2b08      	cmp	r3, #8
 8003904:	d11c      	bne.n	8003940 <HAL_RCC_OscConfig+0x190>
 8003906:	4b4a      	ldr	r3, [pc, #296]	; (8003a30 <HAL_RCC_OscConfig+0x280>)
 8003908:	685b      	ldr	r3, [r3, #4]
 800390a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800390e:	2b00      	cmp	r3, #0
 8003910:	d116      	bne.n	8003940 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003912:	4b47      	ldr	r3, [pc, #284]	; (8003a30 <HAL_RCC_OscConfig+0x280>)
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f003 0302 	and.w	r3, r3, #2
 800391a:	2b00      	cmp	r3, #0
 800391c:	d005      	beq.n	800392a <HAL_RCC_OscConfig+0x17a>
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	68db      	ldr	r3, [r3, #12]
 8003922:	2b01      	cmp	r3, #1
 8003924:	d001      	beq.n	800392a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003926:	2301      	movs	r3, #1
 8003928:	e1df      	b.n	8003cea <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800392a:	4b41      	ldr	r3, [pc, #260]	; (8003a30 <HAL_RCC_OscConfig+0x280>)
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	691b      	ldr	r3, [r3, #16]
 8003936:	00db      	lsls	r3, r3, #3
 8003938:	493d      	ldr	r1, [pc, #244]	; (8003a30 <HAL_RCC_OscConfig+0x280>)
 800393a:	4313      	orrs	r3, r2
 800393c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800393e:	e040      	b.n	80039c2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	68db      	ldr	r3, [r3, #12]
 8003944:	2b00      	cmp	r3, #0
 8003946:	d023      	beq.n	8003990 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003948:	4b39      	ldr	r3, [pc, #228]	; (8003a30 <HAL_RCC_OscConfig+0x280>)
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	4a38      	ldr	r2, [pc, #224]	; (8003a30 <HAL_RCC_OscConfig+0x280>)
 800394e:	f043 0301 	orr.w	r3, r3, #1
 8003952:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003954:	f7fe fbac 	bl	80020b0 <HAL_GetTick>
 8003958:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800395a:	e008      	b.n	800396e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800395c:	f7fe fba8 	bl	80020b0 <HAL_GetTick>
 8003960:	4602      	mov	r2, r0
 8003962:	693b      	ldr	r3, [r7, #16]
 8003964:	1ad3      	subs	r3, r2, r3
 8003966:	2b02      	cmp	r3, #2
 8003968:	d901      	bls.n	800396e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800396a:	2303      	movs	r3, #3
 800396c:	e1bd      	b.n	8003cea <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800396e:	4b30      	ldr	r3, [pc, #192]	; (8003a30 <HAL_RCC_OscConfig+0x280>)
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f003 0302 	and.w	r3, r3, #2
 8003976:	2b00      	cmp	r3, #0
 8003978:	d0f0      	beq.n	800395c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800397a:	4b2d      	ldr	r3, [pc, #180]	; (8003a30 <HAL_RCC_OscConfig+0x280>)
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	691b      	ldr	r3, [r3, #16]
 8003986:	00db      	lsls	r3, r3, #3
 8003988:	4929      	ldr	r1, [pc, #164]	; (8003a30 <HAL_RCC_OscConfig+0x280>)
 800398a:	4313      	orrs	r3, r2
 800398c:	600b      	str	r3, [r1, #0]
 800398e:	e018      	b.n	80039c2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003990:	4b27      	ldr	r3, [pc, #156]	; (8003a30 <HAL_RCC_OscConfig+0x280>)
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	4a26      	ldr	r2, [pc, #152]	; (8003a30 <HAL_RCC_OscConfig+0x280>)
 8003996:	f023 0301 	bic.w	r3, r3, #1
 800399a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800399c:	f7fe fb88 	bl	80020b0 <HAL_GetTick>
 80039a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80039a2:	e008      	b.n	80039b6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80039a4:	f7fe fb84 	bl	80020b0 <HAL_GetTick>
 80039a8:	4602      	mov	r2, r0
 80039aa:	693b      	ldr	r3, [r7, #16]
 80039ac:	1ad3      	subs	r3, r2, r3
 80039ae:	2b02      	cmp	r3, #2
 80039b0:	d901      	bls.n	80039b6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80039b2:	2303      	movs	r3, #3
 80039b4:	e199      	b.n	8003cea <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80039b6:	4b1e      	ldr	r3, [pc, #120]	; (8003a30 <HAL_RCC_OscConfig+0x280>)
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f003 0302 	and.w	r3, r3, #2
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d1f0      	bne.n	80039a4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f003 0308 	and.w	r3, r3, #8
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d038      	beq.n	8003a40 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	695b      	ldr	r3, [r3, #20]
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d019      	beq.n	8003a0a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80039d6:	4b16      	ldr	r3, [pc, #88]	; (8003a30 <HAL_RCC_OscConfig+0x280>)
 80039d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80039da:	4a15      	ldr	r2, [pc, #84]	; (8003a30 <HAL_RCC_OscConfig+0x280>)
 80039dc:	f043 0301 	orr.w	r3, r3, #1
 80039e0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039e2:	f7fe fb65 	bl	80020b0 <HAL_GetTick>
 80039e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80039e8:	e008      	b.n	80039fc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80039ea:	f7fe fb61 	bl	80020b0 <HAL_GetTick>
 80039ee:	4602      	mov	r2, r0
 80039f0:	693b      	ldr	r3, [r7, #16]
 80039f2:	1ad3      	subs	r3, r2, r3
 80039f4:	2b02      	cmp	r3, #2
 80039f6:	d901      	bls.n	80039fc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80039f8:	2303      	movs	r3, #3
 80039fa:	e176      	b.n	8003cea <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80039fc:	4b0c      	ldr	r3, [pc, #48]	; (8003a30 <HAL_RCC_OscConfig+0x280>)
 80039fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a00:	f003 0302 	and.w	r3, r3, #2
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d0f0      	beq.n	80039ea <HAL_RCC_OscConfig+0x23a>
 8003a08:	e01a      	b.n	8003a40 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003a0a:	4b09      	ldr	r3, [pc, #36]	; (8003a30 <HAL_RCC_OscConfig+0x280>)
 8003a0c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a0e:	4a08      	ldr	r2, [pc, #32]	; (8003a30 <HAL_RCC_OscConfig+0x280>)
 8003a10:	f023 0301 	bic.w	r3, r3, #1
 8003a14:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a16:	f7fe fb4b 	bl	80020b0 <HAL_GetTick>
 8003a1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a1c:	e00a      	b.n	8003a34 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a1e:	f7fe fb47 	bl	80020b0 <HAL_GetTick>
 8003a22:	4602      	mov	r2, r0
 8003a24:	693b      	ldr	r3, [r7, #16]
 8003a26:	1ad3      	subs	r3, r2, r3
 8003a28:	2b02      	cmp	r3, #2
 8003a2a:	d903      	bls.n	8003a34 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003a2c:	2303      	movs	r3, #3
 8003a2e:	e15c      	b.n	8003cea <HAL_RCC_OscConfig+0x53a>
 8003a30:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a34:	4b91      	ldr	r3, [pc, #580]	; (8003c7c <HAL_RCC_OscConfig+0x4cc>)
 8003a36:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a38:	f003 0302 	and.w	r3, r3, #2
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d1ee      	bne.n	8003a1e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f003 0304 	and.w	r3, r3, #4
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	f000 80a4 	beq.w	8003b96 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a4e:	4b8b      	ldr	r3, [pc, #556]	; (8003c7c <HAL_RCC_OscConfig+0x4cc>)
 8003a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d10d      	bne.n	8003a76 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a5a:	4b88      	ldr	r3, [pc, #544]	; (8003c7c <HAL_RCC_OscConfig+0x4cc>)
 8003a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a5e:	4a87      	ldr	r2, [pc, #540]	; (8003c7c <HAL_RCC_OscConfig+0x4cc>)
 8003a60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a64:	6413      	str	r3, [r2, #64]	; 0x40
 8003a66:	4b85      	ldr	r3, [pc, #532]	; (8003c7c <HAL_RCC_OscConfig+0x4cc>)
 8003a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a6e:	60bb      	str	r3, [r7, #8]
 8003a70:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a72:	2301      	movs	r3, #1
 8003a74:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003a76:	4b82      	ldr	r3, [pc, #520]	; (8003c80 <HAL_RCC_OscConfig+0x4d0>)
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d118      	bne.n	8003ab4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003a82:	4b7f      	ldr	r3, [pc, #508]	; (8003c80 <HAL_RCC_OscConfig+0x4d0>)
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	4a7e      	ldr	r2, [pc, #504]	; (8003c80 <HAL_RCC_OscConfig+0x4d0>)
 8003a88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a8c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a8e:	f7fe fb0f 	bl	80020b0 <HAL_GetTick>
 8003a92:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003a94:	e008      	b.n	8003aa8 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a96:	f7fe fb0b 	bl	80020b0 <HAL_GetTick>
 8003a9a:	4602      	mov	r2, r0
 8003a9c:	693b      	ldr	r3, [r7, #16]
 8003a9e:	1ad3      	subs	r3, r2, r3
 8003aa0:	2b64      	cmp	r3, #100	; 0x64
 8003aa2:	d901      	bls.n	8003aa8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003aa4:	2303      	movs	r3, #3
 8003aa6:	e120      	b.n	8003cea <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003aa8:	4b75      	ldr	r3, [pc, #468]	; (8003c80 <HAL_RCC_OscConfig+0x4d0>)
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d0f0      	beq.n	8003a96 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	689b      	ldr	r3, [r3, #8]
 8003ab8:	2b01      	cmp	r3, #1
 8003aba:	d106      	bne.n	8003aca <HAL_RCC_OscConfig+0x31a>
 8003abc:	4b6f      	ldr	r3, [pc, #444]	; (8003c7c <HAL_RCC_OscConfig+0x4cc>)
 8003abe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ac0:	4a6e      	ldr	r2, [pc, #440]	; (8003c7c <HAL_RCC_OscConfig+0x4cc>)
 8003ac2:	f043 0301 	orr.w	r3, r3, #1
 8003ac6:	6713      	str	r3, [r2, #112]	; 0x70
 8003ac8:	e02d      	b.n	8003b26 <HAL_RCC_OscConfig+0x376>
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	689b      	ldr	r3, [r3, #8]
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d10c      	bne.n	8003aec <HAL_RCC_OscConfig+0x33c>
 8003ad2:	4b6a      	ldr	r3, [pc, #424]	; (8003c7c <HAL_RCC_OscConfig+0x4cc>)
 8003ad4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ad6:	4a69      	ldr	r2, [pc, #420]	; (8003c7c <HAL_RCC_OscConfig+0x4cc>)
 8003ad8:	f023 0301 	bic.w	r3, r3, #1
 8003adc:	6713      	str	r3, [r2, #112]	; 0x70
 8003ade:	4b67      	ldr	r3, [pc, #412]	; (8003c7c <HAL_RCC_OscConfig+0x4cc>)
 8003ae0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ae2:	4a66      	ldr	r2, [pc, #408]	; (8003c7c <HAL_RCC_OscConfig+0x4cc>)
 8003ae4:	f023 0304 	bic.w	r3, r3, #4
 8003ae8:	6713      	str	r3, [r2, #112]	; 0x70
 8003aea:	e01c      	b.n	8003b26 <HAL_RCC_OscConfig+0x376>
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	689b      	ldr	r3, [r3, #8]
 8003af0:	2b05      	cmp	r3, #5
 8003af2:	d10c      	bne.n	8003b0e <HAL_RCC_OscConfig+0x35e>
 8003af4:	4b61      	ldr	r3, [pc, #388]	; (8003c7c <HAL_RCC_OscConfig+0x4cc>)
 8003af6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003af8:	4a60      	ldr	r2, [pc, #384]	; (8003c7c <HAL_RCC_OscConfig+0x4cc>)
 8003afa:	f043 0304 	orr.w	r3, r3, #4
 8003afe:	6713      	str	r3, [r2, #112]	; 0x70
 8003b00:	4b5e      	ldr	r3, [pc, #376]	; (8003c7c <HAL_RCC_OscConfig+0x4cc>)
 8003b02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b04:	4a5d      	ldr	r2, [pc, #372]	; (8003c7c <HAL_RCC_OscConfig+0x4cc>)
 8003b06:	f043 0301 	orr.w	r3, r3, #1
 8003b0a:	6713      	str	r3, [r2, #112]	; 0x70
 8003b0c:	e00b      	b.n	8003b26 <HAL_RCC_OscConfig+0x376>
 8003b0e:	4b5b      	ldr	r3, [pc, #364]	; (8003c7c <HAL_RCC_OscConfig+0x4cc>)
 8003b10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b12:	4a5a      	ldr	r2, [pc, #360]	; (8003c7c <HAL_RCC_OscConfig+0x4cc>)
 8003b14:	f023 0301 	bic.w	r3, r3, #1
 8003b18:	6713      	str	r3, [r2, #112]	; 0x70
 8003b1a:	4b58      	ldr	r3, [pc, #352]	; (8003c7c <HAL_RCC_OscConfig+0x4cc>)
 8003b1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b1e:	4a57      	ldr	r2, [pc, #348]	; (8003c7c <HAL_RCC_OscConfig+0x4cc>)
 8003b20:	f023 0304 	bic.w	r3, r3, #4
 8003b24:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	689b      	ldr	r3, [r3, #8]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d015      	beq.n	8003b5a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b2e:	f7fe fabf 	bl	80020b0 <HAL_GetTick>
 8003b32:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b34:	e00a      	b.n	8003b4c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b36:	f7fe fabb 	bl	80020b0 <HAL_GetTick>
 8003b3a:	4602      	mov	r2, r0
 8003b3c:	693b      	ldr	r3, [r7, #16]
 8003b3e:	1ad3      	subs	r3, r2, r3
 8003b40:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b44:	4293      	cmp	r3, r2
 8003b46:	d901      	bls.n	8003b4c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003b48:	2303      	movs	r3, #3
 8003b4a:	e0ce      	b.n	8003cea <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b4c:	4b4b      	ldr	r3, [pc, #300]	; (8003c7c <HAL_RCC_OscConfig+0x4cc>)
 8003b4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b50:	f003 0302 	and.w	r3, r3, #2
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d0ee      	beq.n	8003b36 <HAL_RCC_OscConfig+0x386>
 8003b58:	e014      	b.n	8003b84 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b5a:	f7fe faa9 	bl	80020b0 <HAL_GetTick>
 8003b5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b60:	e00a      	b.n	8003b78 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b62:	f7fe faa5 	bl	80020b0 <HAL_GetTick>
 8003b66:	4602      	mov	r2, r0
 8003b68:	693b      	ldr	r3, [r7, #16]
 8003b6a:	1ad3      	subs	r3, r2, r3
 8003b6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b70:	4293      	cmp	r3, r2
 8003b72:	d901      	bls.n	8003b78 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003b74:	2303      	movs	r3, #3
 8003b76:	e0b8      	b.n	8003cea <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b78:	4b40      	ldr	r3, [pc, #256]	; (8003c7c <HAL_RCC_OscConfig+0x4cc>)
 8003b7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b7c:	f003 0302 	and.w	r3, r3, #2
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d1ee      	bne.n	8003b62 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003b84:	7dfb      	ldrb	r3, [r7, #23]
 8003b86:	2b01      	cmp	r3, #1
 8003b88:	d105      	bne.n	8003b96 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b8a:	4b3c      	ldr	r3, [pc, #240]	; (8003c7c <HAL_RCC_OscConfig+0x4cc>)
 8003b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b8e:	4a3b      	ldr	r2, [pc, #236]	; (8003c7c <HAL_RCC_OscConfig+0x4cc>)
 8003b90:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b94:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	699b      	ldr	r3, [r3, #24]
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	f000 80a4 	beq.w	8003ce8 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003ba0:	4b36      	ldr	r3, [pc, #216]	; (8003c7c <HAL_RCC_OscConfig+0x4cc>)
 8003ba2:	689b      	ldr	r3, [r3, #8]
 8003ba4:	f003 030c 	and.w	r3, r3, #12
 8003ba8:	2b08      	cmp	r3, #8
 8003baa:	d06b      	beq.n	8003c84 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	699b      	ldr	r3, [r3, #24]
 8003bb0:	2b02      	cmp	r3, #2
 8003bb2:	d149      	bne.n	8003c48 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003bb4:	4b31      	ldr	r3, [pc, #196]	; (8003c7c <HAL_RCC_OscConfig+0x4cc>)
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	4a30      	ldr	r2, [pc, #192]	; (8003c7c <HAL_RCC_OscConfig+0x4cc>)
 8003bba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003bbe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bc0:	f7fe fa76 	bl	80020b0 <HAL_GetTick>
 8003bc4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003bc6:	e008      	b.n	8003bda <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003bc8:	f7fe fa72 	bl	80020b0 <HAL_GetTick>
 8003bcc:	4602      	mov	r2, r0
 8003bce:	693b      	ldr	r3, [r7, #16]
 8003bd0:	1ad3      	subs	r3, r2, r3
 8003bd2:	2b02      	cmp	r3, #2
 8003bd4:	d901      	bls.n	8003bda <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003bd6:	2303      	movs	r3, #3
 8003bd8:	e087      	b.n	8003cea <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003bda:	4b28      	ldr	r3, [pc, #160]	; (8003c7c <HAL_RCC_OscConfig+0x4cc>)
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d1f0      	bne.n	8003bc8 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	69da      	ldr	r2, [r3, #28]
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6a1b      	ldr	r3, [r3, #32]
 8003bee:	431a      	orrs	r2, r3
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bf4:	019b      	lsls	r3, r3, #6
 8003bf6:	431a      	orrs	r2, r3
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bfc:	085b      	lsrs	r3, r3, #1
 8003bfe:	3b01      	subs	r3, #1
 8003c00:	041b      	lsls	r3, r3, #16
 8003c02:	431a      	orrs	r2, r3
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c08:	061b      	lsls	r3, r3, #24
 8003c0a:	4313      	orrs	r3, r2
 8003c0c:	4a1b      	ldr	r2, [pc, #108]	; (8003c7c <HAL_RCC_OscConfig+0x4cc>)
 8003c0e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003c12:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003c14:	4b19      	ldr	r3, [pc, #100]	; (8003c7c <HAL_RCC_OscConfig+0x4cc>)
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	4a18      	ldr	r2, [pc, #96]	; (8003c7c <HAL_RCC_OscConfig+0x4cc>)
 8003c1a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003c1e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c20:	f7fe fa46 	bl	80020b0 <HAL_GetTick>
 8003c24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c26:	e008      	b.n	8003c3a <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c28:	f7fe fa42 	bl	80020b0 <HAL_GetTick>
 8003c2c:	4602      	mov	r2, r0
 8003c2e:	693b      	ldr	r3, [r7, #16]
 8003c30:	1ad3      	subs	r3, r2, r3
 8003c32:	2b02      	cmp	r3, #2
 8003c34:	d901      	bls.n	8003c3a <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8003c36:	2303      	movs	r3, #3
 8003c38:	e057      	b.n	8003cea <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c3a:	4b10      	ldr	r3, [pc, #64]	; (8003c7c <HAL_RCC_OscConfig+0x4cc>)
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d0f0      	beq.n	8003c28 <HAL_RCC_OscConfig+0x478>
 8003c46:	e04f      	b.n	8003ce8 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c48:	4b0c      	ldr	r3, [pc, #48]	; (8003c7c <HAL_RCC_OscConfig+0x4cc>)
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	4a0b      	ldr	r2, [pc, #44]	; (8003c7c <HAL_RCC_OscConfig+0x4cc>)
 8003c4e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003c52:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c54:	f7fe fa2c 	bl	80020b0 <HAL_GetTick>
 8003c58:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c5a:	e008      	b.n	8003c6e <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c5c:	f7fe fa28 	bl	80020b0 <HAL_GetTick>
 8003c60:	4602      	mov	r2, r0
 8003c62:	693b      	ldr	r3, [r7, #16]
 8003c64:	1ad3      	subs	r3, r2, r3
 8003c66:	2b02      	cmp	r3, #2
 8003c68:	d901      	bls.n	8003c6e <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8003c6a:	2303      	movs	r3, #3
 8003c6c:	e03d      	b.n	8003cea <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c6e:	4b03      	ldr	r3, [pc, #12]	; (8003c7c <HAL_RCC_OscConfig+0x4cc>)
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d1f0      	bne.n	8003c5c <HAL_RCC_OscConfig+0x4ac>
 8003c7a:	e035      	b.n	8003ce8 <HAL_RCC_OscConfig+0x538>
 8003c7c:	40023800 	.word	0x40023800
 8003c80:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003c84:	4b1b      	ldr	r3, [pc, #108]	; (8003cf4 <HAL_RCC_OscConfig+0x544>)
 8003c86:	685b      	ldr	r3, [r3, #4]
 8003c88:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	699b      	ldr	r3, [r3, #24]
 8003c8e:	2b01      	cmp	r3, #1
 8003c90:	d028      	beq.n	8003ce4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003c9c:	429a      	cmp	r2, r3
 8003c9e:	d121      	bne.n	8003ce4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003caa:	429a      	cmp	r2, r3
 8003cac:	d11a      	bne.n	8003ce4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003cae:	68fa      	ldr	r2, [r7, #12]
 8003cb0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003cb4:	4013      	ands	r3, r2
 8003cb6:	687a      	ldr	r2, [r7, #4]
 8003cb8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003cba:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003cbc:	4293      	cmp	r3, r2
 8003cbe:	d111      	bne.n	8003ce4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cca:	085b      	lsrs	r3, r3, #1
 8003ccc:	3b01      	subs	r3, #1
 8003cce:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003cd0:	429a      	cmp	r2, r3
 8003cd2:	d107      	bne.n	8003ce4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cde:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003ce0:	429a      	cmp	r2, r3
 8003ce2:	d001      	beq.n	8003ce8 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8003ce4:	2301      	movs	r3, #1
 8003ce6:	e000      	b.n	8003cea <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8003ce8:	2300      	movs	r3, #0
}
 8003cea:	4618      	mov	r0, r3
 8003cec:	3718      	adds	r7, #24
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	bd80      	pop	{r7, pc}
 8003cf2:	bf00      	nop
 8003cf4:	40023800 	.word	0x40023800

08003cf8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	b084      	sub	sp, #16
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
 8003d00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003d02:	2300      	movs	r3, #0
 8003d04:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d101      	bne.n	8003d10 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003d0c:	2301      	movs	r3, #1
 8003d0e:	e0d0      	b.n	8003eb2 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003d10:	4b6a      	ldr	r3, [pc, #424]	; (8003ebc <HAL_RCC_ClockConfig+0x1c4>)
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f003 030f 	and.w	r3, r3, #15
 8003d18:	683a      	ldr	r2, [r7, #0]
 8003d1a:	429a      	cmp	r2, r3
 8003d1c:	d910      	bls.n	8003d40 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d1e:	4b67      	ldr	r3, [pc, #412]	; (8003ebc <HAL_RCC_ClockConfig+0x1c4>)
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f023 020f 	bic.w	r2, r3, #15
 8003d26:	4965      	ldr	r1, [pc, #404]	; (8003ebc <HAL_RCC_ClockConfig+0x1c4>)
 8003d28:	683b      	ldr	r3, [r7, #0]
 8003d2a:	4313      	orrs	r3, r2
 8003d2c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d2e:	4b63      	ldr	r3, [pc, #396]	; (8003ebc <HAL_RCC_ClockConfig+0x1c4>)
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f003 030f 	and.w	r3, r3, #15
 8003d36:	683a      	ldr	r2, [r7, #0]
 8003d38:	429a      	cmp	r2, r3
 8003d3a:	d001      	beq.n	8003d40 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003d3c:	2301      	movs	r3, #1
 8003d3e:	e0b8      	b.n	8003eb2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f003 0302 	and.w	r3, r3, #2
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d020      	beq.n	8003d8e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f003 0304 	and.w	r3, r3, #4
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d005      	beq.n	8003d64 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003d58:	4b59      	ldr	r3, [pc, #356]	; (8003ec0 <HAL_RCC_ClockConfig+0x1c8>)
 8003d5a:	689b      	ldr	r3, [r3, #8]
 8003d5c:	4a58      	ldr	r2, [pc, #352]	; (8003ec0 <HAL_RCC_ClockConfig+0x1c8>)
 8003d5e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003d62:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f003 0308 	and.w	r3, r3, #8
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d005      	beq.n	8003d7c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003d70:	4b53      	ldr	r3, [pc, #332]	; (8003ec0 <HAL_RCC_ClockConfig+0x1c8>)
 8003d72:	689b      	ldr	r3, [r3, #8]
 8003d74:	4a52      	ldr	r2, [pc, #328]	; (8003ec0 <HAL_RCC_ClockConfig+0x1c8>)
 8003d76:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003d7a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d7c:	4b50      	ldr	r3, [pc, #320]	; (8003ec0 <HAL_RCC_ClockConfig+0x1c8>)
 8003d7e:	689b      	ldr	r3, [r3, #8]
 8003d80:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	689b      	ldr	r3, [r3, #8]
 8003d88:	494d      	ldr	r1, [pc, #308]	; (8003ec0 <HAL_RCC_ClockConfig+0x1c8>)
 8003d8a:	4313      	orrs	r3, r2
 8003d8c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f003 0301 	and.w	r3, r3, #1
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d040      	beq.n	8003e1c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	685b      	ldr	r3, [r3, #4]
 8003d9e:	2b01      	cmp	r3, #1
 8003da0:	d107      	bne.n	8003db2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003da2:	4b47      	ldr	r3, [pc, #284]	; (8003ec0 <HAL_RCC_ClockConfig+0x1c8>)
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d115      	bne.n	8003dda <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003dae:	2301      	movs	r3, #1
 8003db0:	e07f      	b.n	8003eb2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	685b      	ldr	r3, [r3, #4]
 8003db6:	2b02      	cmp	r3, #2
 8003db8:	d107      	bne.n	8003dca <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003dba:	4b41      	ldr	r3, [pc, #260]	; (8003ec0 <HAL_RCC_ClockConfig+0x1c8>)
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d109      	bne.n	8003dda <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003dc6:	2301      	movs	r3, #1
 8003dc8:	e073      	b.n	8003eb2 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003dca:	4b3d      	ldr	r3, [pc, #244]	; (8003ec0 <HAL_RCC_ClockConfig+0x1c8>)
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f003 0302 	and.w	r3, r3, #2
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d101      	bne.n	8003dda <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003dd6:	2301      	movs	r3, #1
 8003dd8:	e06b      	b.n	8003eb2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003dda:	4b39      	ldr	r3, [pc, #228]	; (8003ec0 <HAL_RCC_ClockConfig+0x1c8>)
 8003ddc:	689b      	ldr	r3, [r3, #8]
 8003dde:	f023 0203 	bic.w	r2, r3, #3
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	685b      	ldr	r3, [r3, #4]
 8003de6:	4936      	ldr	r1, [pc, #216]	; (8003ec0 <HAL_RCC_ClockConfig+0x1c8>)
 8003de8:	4313      	orrs	r3, r2
 8003dea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003dec:	f7fe f960 	bl	80020b0 <HAL_GetTick>
 8003df0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003df2:	e00a      	b.n	8003e0a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003df4:	f7fe f95c 	bl	80020b0 <HAL_GetTick>
 8003df8:	4602      	mov	r2, r0
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	1ad3      	subs	r3, r2, r3
 8003dfe:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e02:	4293      	cmp	r3, r2
 8003e04:	d901      	bls.n	8003e0a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003e06:	2303      	movs	r3, #3
 8003e08:	e053      	b.n	8003eb2 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e0a:	4b2d      	ldr	r3, [pc, #180]	; (8003ec0 <HAL_RCC_ClockConfig+0x1c8>)
 8003e0c:	689b      	ldr	r3, [r3, #8]
 8003e0e:	f003 020c 	and.w	r2, r3, #12
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	685b      	ldr	r3, [r3, #4]
 8003e16:	009b      	lsls	r3, r3, #2
 8003e18:	429a      	cmp	r2, r3
 8003e1a:	d1eb      	bne.n	8003df4 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003e1c:	4b27      	ldr	r3, [pc, #156]	; (8003ebc <HAL_RCC_ClockConfig+0x1c4>)
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f003 030f 	and.w	r3, r3, #15
 8003e24:	683a      	ldr	r2, [r7, #0]
 8003e26:	429a      	cmp	r2, r3
 8003e28:	d210      	bcs.n	8003e4c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e2a:	4b24      	ldr	r3, [pc, #144]	; (8003ebc <HAL_RCC_ClockConfig+0x1c4>)
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f023 020f 	bic.w	r2, r3, #15
 8003e32:	4922      	ldr	r1, [pc, #136]	; (8003ebc <HAL_RCC_ClockConfig+0x1c4>)
 8003e34:	683b      	ldr	r3, [r7, #0]
 8003e36:	4313      	orrs	r3, r2
 8003e38:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e3a:	4b20      	ldr	r3, [pc, #128]	; (8003ebc <HAL_RCC_ClockConfig+0x1c4>)
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f003 030f 	and.w	r3, r3, #15
 8003e42:	683a      	ldr	r2, [r7, #0]
 8003e44:	429a      	cmp	r2, r3
 8003e46:	d001      	beq.n	8003e4c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003e48:	2301      	movs	r3, #1
 8003e4a:	e032      	b.n	8003eb2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f003 0304 	and.w	r3, r3, #4
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d008      	beq.n	8003e6a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003e58:	4b19      	ldr	r3, [pc, #100]	; (8003ec0 <HAL_RCC_ClockConfig+0x1c8>)
 8003e5a:	689b      	ldr	r3, [r3, #8]
 8003e5c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	68db      	ldr	r3, [r3, #12]
 8003e64:	4916      	ldr	r1, [pc, #88]	; (8003ec0 <HAL_RCC_ClockConfig+0x1c8>)
 8003e66:	4313      	orrs	r3, r2
 8003e68:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f003 0308 	and.w	r3, r3, #8
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d009      	beq.n	8003e8a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003e76:	4b12      	ldr	r3, [pc, #72]	; (8003ec0 <HAL_RCC_ClockConfig+0x1c8>)
 8003e78:	689b      	ldr	r3, [r3, #8]
 8003e7a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	691b      	ldr	r3, [r3, #16]
 8003e82:	00db      	lsls	r3, r3, #3
 8003e84:	490e      	ldr	r1, [pc, #56]	; (8003ec0 <HAL_RCC_ClockConfig+0x1c8>)
 8003e86:	4313      	orrs	r3, r2
 8003e88:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003e8a:	f000 f821 	bl	8003ed0 <HAL_RCC_GetSysClockFreq>
 8003e8e:	4602      	mov	r2, r0
 8003e90:	4b0b      	ldr	r3, [pc, #44]	; (8003ec0 <HAL_RCC_ClockConfig+0x1c8>)
 8003e92:	689b      	ldr	r3, [r3, #8]
 8003e94:	091b      	lsrs	r3, r3, #4
 8003e96:	f003 030f 	and.w	r3, r3, #15
 8003e9a:	490a      	ldr	r1, [pc, #40]	; (8003ec4 <HAL_RCC_ClockConfig+0x1cc>)
 8003e9c:	5ccb      	ldrb	r3, [r1, r3]
 8003e9e:	fa22 f303 	lsr.w	r3, r2, r3
 8003ea2:	4a09      	ldr	r2, [pc, #36]	; (8003ec8 <HAL_RCC_ClockConfig+0x1d0>)
 8003ea4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003ea6:	4b09      	ldr	r3, [pc, #36]	; (8003ecc <HAL_RCC_ClockConfig+0x1d4>)
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	4618      	mov	r0, r3
 8003eac:	f7fe f8bc 	bl	8002028 <HAL_InitTick>

  return HAL_OK;
 8003eb0:	2300      	movs	r3, #0
}
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	3710      	adds	r7, #16
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	bd80      	pop	{r7, pc}
 8003eba:	bf00      	nop
 8003ebc:	40023c00 	.word	0x40023c00
 8003ec0:	40023800 	.word	0x40023800
 8003ec4:	08007e94 	.word	0x08007e94
 8003ec8:	20000008 	.word	0x20000008
 8003ecc:	2000000c 	.word	0x2000000c

08003ed0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ed0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003ed4:	b090      	sub	sp, #64	; 0x40
 8003ed6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003ed8:	2300      	movs	r3, #0
 8003eda:	637b      	str	r3, [r7, #52]	; 0x34
 8003edc:	2300      	movs	r3, #0
 8003ede:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003ee0:	2300      	movs	r3, #0
 8003ee2:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 8003ee4:	2300      	movs	r3, #0
 8003ee6:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003ee8:	4b59      	ldr	r3, [pc, #356]	; (8004050 <HAL_RCC_GetSysClockFreq+0x180>)
 8003eea:	689b      	ldr	r3, [r3, #8]
 8003eec:	f003 030c 	and.w	r3, r3, #12
 8003ef0:	2b08      	cmp	r3, #8
 8003ef2:	d00d      	beq.n	8003f10 <HAL_RCC_GetSysClockFreq+0x40>
 8003ef4:	2b08      	cmp	r3, #8
 8003ef6:	f200 80a1 	bhi.w	800403c <HAL_RCC_GetSysClockFreq+0x16c>
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d002      	beq.n	8003f04 <HAL_RCC_GetSysClockFreq+0x34>
 8003efe:	2b04      	cmp	r3, #4
 8003f00:	d003      	beq.n	8003f0a <HAL_RCC_GetSysClockFreq+0x3a>
 8003f02:	e09b      	b.n	800403c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003f04:	4b53      	ldr	r3, [pc, #332]	; (8004054 <HAL_RCC_GetSysClockFreq+0x184>)
 8003f06:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003f08:	e09b      	b.n	8004042 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003f0a:	4b53      	ldr	r3, [pc, #332]	; (8004058 <HAL_RCC_GetSysClockFreq+0x188>)
 8003f0c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003f0e:	e098      	b.n	8004042 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003f10:	4b4f      	ldr	r3, [pc, #316]	; (8004050 <HAL_RCC_GetSysClockFreq+0x180>)
 8003f12:	685b      	ldr	r3, [r3, #4]
 8003f14:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003f18:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003f1a:	4b4d      	ldr	r3, [pc, #308]	; (8004050 <HAL_RCC_GetSysClockFreq+0x180>)
 8003f1c:	685b      	ldr	r3, [r3, #4]
 8003f1e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d028      	beq.n	8003f78 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f26:	4b4a      	ldr	r3, [pc, #296]	; (8004050 <HAL_RCC_GetSysClockFreq+0x180>)
 8003f28:	685b      	ldr	r3, [r3, #4]
 8003f2a:	099b      	lsrs	r3, r3, #6
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	623b      	str	r3, [r7, #32]
 8003f30:	627a      	str	r2, [r7, #36]	; 0x24
 8003f32:	6a3b      	ldr	r3, [r7, #32]
 8003f34:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003f38:	2100      	movs	r1, #0
 8003f3a:	4b47      	ldr	r3, [pc, #284]	; (8004058 <HAL_RCC_GetSysClockFreq+0x188>)
 8003f3c:	fb03 f201 	mul.w	r2, r3, r1
 8003f40:	2300      	movs	r3, #0
 8003f42:	fb00 f303 	mul.w	r3, r0, r3
 8003f46:	4413      	add	r3, r2
 8003f48:	4a43      	ldr	r2, [pc, #268]	; (8004058 <HAL_RCC_GetSysClockFreq+0x188>)
 8003f4a:	fba0 1202 	umull	r1, r2, r0, r2
 8003f4e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003f50:	460a      	mov	r2, r1
 8003f52:	62ba      	str	r2, [r7, #40]	; 0x28
 8003f54:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003f56:	4413      	add	r3, r2
 8003f58:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003f5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f5c:	2200      	movs	r2, #0
 8003f5e:	61bb      	str	r3, [r7, #24]
 8003f60:	61fa      	str	r2, [r7, #28]
 8003f62:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003f66:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003f6a:	f7fc f9a1 	bl	80002b0 <__aeabi_uldivmod>
 8003f6e:	4602      	mov	r2, r0
 8003f70:	460b      	mov	r3, r1
 8003f72:	4613      	mov	r3, r2
 8003f74:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003f76:	e053      	b.n	8004020 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f78:	4b35      	ldr	r3, [pc, #212]	; (8004050 <HAL_RCC_GetSysClockFreq+0x180>)
 8003f7a:	685b      	ldr	r3, [r3, #4]
 8003f7c:	099b      	lsrs	r3, r3, #6
 8003f7e:	2200      	movs	r2, #0
 8003f80:	613b      	str	r3, [r7, #16]
 8003f82:	617a      	str	r2, [r7, #20]
 8003f84:	693b      	ldr	r3, [r7, #16]
 8003f86:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003f8a:	f04f 0b00 	mov.w	fp, #0
 8003f8e:	4652      	mov	r2, sl
 8003f90:	465b      	mov	r3, fp
 8003f92:	f04f 0000 	mov.w	r0, #0
 8003f96:	f04f 0100 	mov.w	r1, #0
 8003f9a:	0159      	lsls	r1, r3, #5
 8003f9c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003fa0:	0150      	lsls	r0, r2, #5
 8003fa2:	4602      	mov	r2, r0
 8003fa4:	460b      	mov	r3, r1
 8003fa6:	ebb2 080a 	subs.w	r8, r2, sl
 8003faa:	eb63 090b 	sbc.w	r9, r3, fp
 8003fae:	f04f 0200 	mov.w	r2, #0
 8003fb2:	f04f 0300 	mov.w	r3, #0
 8003fb6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003fba:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003fbe:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003fc2:	ebb2 0408 	subs.w	r4, r2, r8
 8003fc6:	eb63 0509 	sbc.w	r5, r3, r9
 8003fca:	f04f 0200 	mov.w	r2, #0
 8003fce:	f04f 0300 	mov.w	r3, #0
 8003fd2:	00eb      	lsls	r3, r5, #3
 8003fd4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003fd8:	00e2      	lsls	r2, r4, #3
 8003fda:	4614      	mov	r4, r2
 8003fdc:	461d      	mov	r5, r3
 8003fde:	eb14 030a 	adds.w	r3, r4, sl
 8003fe2:	603b      	str	r3, [r7, #0]
 8003fe4:	eb45 030b 	adc.w	r3, r5, fp
 8003fe8:	607b      	str	r3, [r7, #4]
 8003fea:	f04f 0200 	mov.w	r2, #0
 8003fee:	f04f 0300 	mov.w	r3, #0
 8003ff2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003ff6:	4629      	mov	r1, r5
 8003ff8:	028b      	lsls	r3, r1, #10
 8003ffa:	4621      	mov	r1, r4
 8003ffc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004000:	4621      	mov	r1, r4
 8004002:	028a      	lsls	r2, r1, #10
 8004004:	4610      	mov	r0, r2
 8004006:	4619      	mov	r1, r3
 8004008:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800400a:	2200      	movs	r2, #0
 800400c:	60bb      	str	r3, [r7, #8]
 800400e:	60fa      	str	r2, [r7, #12]
 8004010:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004014:	f7fc f94c 	bl	80002b0 <__aeabi_uldivmod>
 8004018:	4602      	mov	r2, r0
 800401a:	460b      	mov	r3, r1
 800401c:	4613      	mov	r3, r2
 800401e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8004020:	4b0b      	ldr	r3, [pc, #44]	; (8004050 <HAL_RCC_GetSysClockFreq+0x180>)
 8004022:	685b      	ldr	r3, [r3, #4]
 8004024:	0c1b      	lsrs	r3, r3, #16
 8004026:	f003 0303 	and.w	r3, r3, #3
 800402a:	3301      	adds	r3, #1
 800402c:	005b      	lsls	r3, r3, #1
 800402e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8004030:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004032:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004034:	fbb2 f3f3 	udiv	r3, r2, r3
 8004038:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800403a:	e002      	b.n	8004042 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800403c:	4b05      	ldr	r3, [pc, #20]	; (8004054 <HAL_RCC_GetSysClockFreq+0x184>)
 800403e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004040:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004042:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8004044:	4618      	mov	r0, r3
 8004046:	3740      	adds	r7, #64	; 0x40
 8004048:	46bd      	mov	sp, r7
 800404a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800404e:	bf00      	nop
 8004050:	40023800 	.word	0x40023800
 8004054:	00f42400 	.word	0x00f42400
 8004058:	017d7840 	.word	0x017d7840

0800405c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800405c:	b480      	push	{r7}
 800405e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004060:	4b03      	ldr	r3, [pc, #12]	; (8004070 <HAL_RCC_GetHCLKFreq+0x14>)
 8004062:	681b      	ldr	r3, [r3, #0]
}
 8004064:	4618      	mov	r0, r3
 8004066:	46bd      	mov	sp, r7
 8004068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406c:	4770      	bx	lr
 800406e:	bf00      	nop
 8004070:	20000008 	.word	0x20000008

08004074 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004074:	b580      	push	{r7, lr}
 8004076:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004078:	f7ff fff0 	bl	800405c <HAL_RCC_GetHCLKFreq>
 800407c:	4602      	mov	r2, r0
 800407e:	4b05      	ldr	r3, [pc, #20]	; (8004094 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004080:	689b      	ldr	r3, [r3, #8]
 8004082:	0a9b      	lsrs	r3, r3, #10
 8004084:	f003 0307 	and.w	r3, r3, #7
 8004088:	4903      	ldr	r1, [pc, #12]	; (8004098 <HAL_RCC_GetPCLK1Freq+0x24>)
 800408a:	5ccb      	ldrb	r3, [r1, r3]
 800408c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004090:	4618      	mov	r0, r3
 8004092:	bd80      	pop	{r7, pc}
 8004094:	40023800 	.word	0x40023800
 8004098:	08007ea4 	.word	0x08007ea4

0800409c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800409c:	b580      	push	{r7, lr}
 800409e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80040a0:	f7ff ffdc 	bl	800405c <HAL_RCC_GetHCLKFreq>
 80040a4:	4602      	mov	r2, r0
 80040a6:	4b05      	ldr	r3, [pc, #20]	; (80040bc <HAL_RCC_GetPCLK2Freq+0x20>)
 80040a8:	689b      	ldr	r3, [r3, #8]
 80040aa:	0b5b      	lsrs	r3, r3, #13
 80040ac:	f003 0307 	and.w	r3, r3, #7
 80040b0:	4903      	ldr	r1, [pc, #12]	; (80040c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80040b2:	5ccb      	ldrb	r3, [r1, r3]
 80040b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80040b8:	4618      	mov	r0, r3
 80040ba:	bd80      	pop	{r7, pc}
 80040bc:	40023800 	.word	0x40023800
 80040c0:	08007ea4 	.word	0x08007ea4

080040c4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80040c4:	b580      	push	{r7, lr}
 80040c6:	b088      	sub	sp, #32
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80040cc:	2300      	movs	r3, #0
 80040ce:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80040d0:	2300      	movs	r3, #0
 80040d2:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80040d4:	2300      	movs	r3, #0
 80040d6:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80040d8:	2300      	movs	r3, #0
 80040da:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80040dc:	2300      	movs	r3, #0
 80040de:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f003 0301 	and.w	r3, r3, #1
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d012      	beq.n	8004112 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80040ec:	4b69      	ldr	r3, [pc, #420]	; (8004294 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80040ee:	689b      	ldr	r3, [r3, #8]
 80040f0:	4a68      	ldr	r2, [pc, #416]	; (8004294 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80040f2:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80040f6:	6093      	str	r3, [r2, #8]
 80040f8:	4b66      	ldr	r3, [pc, #408]	; (8004294 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80040fa:	689a      	ldr	r2, [r3, #8]
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004100:	4964      	ldr	r1, [pc, #400]	; (8004294 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004102:	4313      	orrs	r3, r2
 8004104:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800410a:	2b00      	cmp	r3, #0
 800410c:	d101      	bne.n	8004112 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800410e:	2301      	movs	r3, #1
 8004110:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800411a:	2b00      	cmp	r3, #0
 800411c:	d017      	beq.n	800414e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800411e:	4b5d      	ldr	r3, [pc, #372]	; (8004294 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004120:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004124:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800412c:	4959      	ldr	r1, [pc, #356]	; (8004294 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800412e:	4313      	orrs	r3, r2
 8004130:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004138:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800413c:	d101      	bne.n	8004142 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800413e:	2301      	movs	r3, #1
 8004140:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004146:	2b00      	cmp	r3, #0
 8004148:	d101      	bne.n	800414e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800414a:	2301      	movs	r3, #1
 800414c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004156:	2b00      	cmp	r3, #0
 8004158:	d017      	beq.n	800418a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800415a:	4b4e      	ldr	r3, [pc, #312]	; (8004294 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800415c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004160:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004168:	494a      	ldr	r1, [pc, #296]	; (8004294 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800416a:	4313      	orrs	r3, r2
 800416c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004174:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004178:	d101      	bne.n	800417e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800417a:	2301      	movs	r3, #1
 800417c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004182:	2b00      	cmp	r3, #0
 8004184:	d101      	bne.n	800418a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8004186:	2301      	movs	r3, #1
 8004188:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004192:	2b00      	cmp	r3, #0
 8004194:	d001      	beq.n	800419a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8004196:	2301      	movs	r3, #1
 8004198:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f003 0320 	and.w	r3, r3, #32
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	f000 808b 	beq.w	80042be <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80041a8:	4b3a      	ldr	r3, [pc, #232]	; (8004294 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80041aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ac:	4a39      	ldr	r2, [pc, #228]	; (8004294 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80041ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041b2:	6413      	str	r3, [r2, #64]	; 0x40
 80041b4:	4b37      	ldr	r3, [pc, #220]	; (8004294 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80041b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041bc:	60bb      	str	r3, [r7, #8]
 80041be:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80041c0:	4b35      	ldr	r3, [pc, #212]	; (8004298 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	4a34      	ldr	r2, [pc, #208]	; (8004298 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80041c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041ca:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80041cc:	f7fd ff70 	bl	80020b0 <HAL_GetTick>
 80041d0:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80041d2:	e008      	b.n	80041e6 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80041d4:	f7fd ff6c 	bl	80020b0 <HAL_GetTick>
 80041d8:	4602      	mov	r2, r0
 80041da:	697b      	ldr	r3, [r7, #20]
 80041dc:	1ad3      	subs	r3, r2, r3
 80041de:	2b64      	cmp	r3, #100	; 0x64
 80041e0:	d901      	bls.n	80041e6 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80041e2:	2303      	movs	r3, #3
 80041e4:	e357      	b.n	8004896 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80041e6:	4b2c      	ldr	r3, [pc, #176]	; (8004298 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d0f0      	beq.n	80041d4 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80041f2:	4b28      	ldr	r3, [pc, #160]	; (8004294 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80041f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80041fa:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80041fc:	693b      	ldr	r3, [r7, #16]
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d035      	beq.n	800426e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004206:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800420a:	693a      	ldr	r2, [r7, #16]
 800420c:	429a      	cmp	r2, r3
 800420e:	d02e      	beq.n	800426e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004210:	4b20      	ldr	r3, [pc, #128]	; (8004294 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004212:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004214:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004218:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800421a:	4b1e      	ldr	r3, [pc, #120]	; (8004294 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800421c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800421e:	4a1d      	ldr	r2, [pc, #116]	; (8004294 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004220:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004224:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004226:	4b1b      	ldr	r3, [pc, #108]	; (8004294 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004228:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800422a:	4a1a      	ldr	r2, [pc, #104]	; (8004294 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800422c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004230:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8004232:	4a18      	ldr	r2, [pc, #96]	; (8004294 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004234:	693b      	ldr	r3, [r7, #16]
 8004236:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004238:	4b16      	ldr	r3, [pc, #88]	; (8004294 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800423a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800423c:	f003 0301 	and.w	r3, r3, #1
 8004240:	2b01      	cmp	r3, #1
 8004242:	d114      	bne.n	800426e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004244:	f7fd ff34 	bl	80020b0 <HAL_GetTick>
 8004248:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800424a:	e00a      	b.n	8004262 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800424c:	f7fd ff30 	bl	80020b0 <HAL_GetTick>
 8004250:	4602      	mov	r2, r0
 8004252:	697b      	ldr	r3, [r7, #20]
 8004254:	1ad3      	subs	r3, r2, r3
 8004256:	f241 3288 	movw	r2, #5000	; 0x1388
 800425a:	4293      	cmp	r3, r2
 800425c:	d901      	bls.n	8004262 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800425e:	2303      	movs	r3, #3
 8004260:	e319      	b.n	8004896 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004262:	4b0c      	ldr	r3, [pc, #48]	; (8004294 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004264:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004266:	f003 0302 	and.w	r3, r3, #2
 800426a:	2b00      	cmp	r3, #0
 800426c:	d0ee      	beq.n	800424c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004272:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004276:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800427a:	d111      	bne.n	80042a0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800427c:	4b05      	ldr	r3, [pc, #20]	; (8004294 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800427e:	689b      	ldr	r3, [r3, #8]
 8004280:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004288:	4b04      	ldr	r3, [pc, #16]	; (800429c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800428a:	400b      	ands	r3, r1
 800428c:	4901      	ldr	r1, [pc, #4]	; (8004294 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800428e:	4313      	orrs	r3, r2
 8004290:	608b      	str	r3, [r1, #8]
 8004292:	e00b      	b.n	80042ac <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004294:	40023800 	.word	0x40023800
 8004298:	40007000 	.word	0x40007000
 800429c:	0ffffcff 	.word	0x0ffffcff
 80042a0:	4baa      	ldr	r3, [pc, #680]	; (800454c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80042a2:	689b      	ldr	r3, [r3, #8]
 80042a4:	4aa9      	ldr	r2, [pc, #676]	; (800454c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80042a6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80042aa:	6093      	str	r3, [r2, #8]
 80042ac:	4ba7      	ldr	r3, [pc, #668]	; (800454c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80042ae:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80042b8:	49a4      	ldr	r1, [pc, #656]	; (800454c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80042ba:	4313      	orrs	r3, r2
 80042bc:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f003 0310 	and.w	r3, r3, #16
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d010      	beq.n	80042ec <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80042ca:	4ba0      	ldr	r3, [pc, #640]	; (800454c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80042cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80042d0:	4a9e      	ldr	r2, [pc, #632]	; (800454c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80042d2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80042d6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80042da:	4b9c      	ldr	r3, [pc, #624]	; (800454c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80042dc:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042e4:	4999      	ldr	r1, [pc, #612]	; (800454c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80042e6:	4313      	orrs	r3, r2
 80042e8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d00a      	beq.n	800430e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80042f8:	4b94      	ldr	r3, [pc, #592]	; (800454c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80042fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042fe:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004306:	4991      	ldr	r1, [pc, #580]	; (800454c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004308:	4313      	orrs	r3, r2
 800430a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004316:	2b00      	cmp	r3, #0
 8004318:	d00a      	beq.n	8004330 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800431a:	4b8c      	ldr	r3, [pc, #560]	; (800454c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800431c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004320:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004328:	4988      	ldr	r1, [pc, #544]	; (800454c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800432a:	4313      	orrs	r3, r2
 800432c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004338:	2b00      	cmp	r3, #0
 800433a:	d00a      	beq.n	8004352 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800433c:	4b83      	ldr	r3, [pc, #524]	; (800454c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800433e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004342:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800434a:	4980      	ldr	r1, [pc, #512]	; (800454c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800434c:	4313      	orrs	r3, r2
 800434e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800435a:	2b00      	cmp	r3, #0
 800435c:	d00a      	beq.n	8004374 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800435e:	4b7b      	ldr	r3, [pc, #492]	; (800454c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004360:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004364:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800436c:	4977      	ldr	r1, [pc, #476]	; (800454c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800436e:	4313      	orrs	r3, r2
 8004370:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800437c:	2b00      	cmp	r3, #0
 800437e:	d00a      	beq.n	8004396 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004380:	4b72      	ldr	r3, [pc, #456]	; (800454c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004382:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004386:	f023 0203 	bic.w	r2, r3, #3
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800438e:	496f      	ldr	r1, [pc, #444]	; (800454c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004390:	4313      	orrs	r3, r2
 8004392:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d00a      	beq.n	80043b8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80043a2:	4b6a      	ldr	r3, [pc, #424]	; (800454c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80043a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043a8:	f023 020c 	bic.w	r2, r3, #12
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80043b0:	4966      	ldr	r1, [pc, #408]	; (800454c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80043b2:	4313      	orrs	r3, r2
 80043b4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d00a      	beq.n	80043da <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80043c4:	4b61      	ldr	r3, [pc, #388]	; (800454c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80043c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043ca:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043d2:	495e      	ldr	r1, [pc, #376]	; (800454c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80043d4:	4313      	orrs	r3, r2
 80043d6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d00a      	beq.n	80043fc <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80043e6:	4b59      	ldr	r3, [pc, #356]	; (800454c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80043e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043ec:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043f4:	4955      	ldr	r1, [pc, #340]	; (800454c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80043f6:	4313      	orrs	r3, r2
 80043f8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004404:	2b00      	cmp	r3, #0
 8004406:	d00a      	beq.n	800441e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004408:	4b50      	ldr	r3, [pc, #320]	; (800454c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800440a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800440e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004416:	494d      	ldr	r1, [pc, #308]	; (800454c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004418:	4313      	orrs	r3, r2
 800441a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004426:	2b00      	cmp	r3, #0
 8004428:	d00a      	beq.n	8004440 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800442a:	4b48      	ldr	r3, [pc, #288]	; (800454c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800442c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004430:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004438:	4944      	ldr	r1, [pc, #272]	; (800454c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800443a:	4313      	orrs	r3, r2
 800443c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004448:	2b00      	cmp	r3, #0
 800444a:	d00a      	beq.n	8004462 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800444c:	4b3f      	ldr	r3, [pc, #252]	; (800454c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800444e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004452:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800445a:	493c      	ldr	r1, [pc, #240]	; (800454c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800445c:	4313      	orrs	r3, r2
 800445e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800446a:	2b00      	cmp	r3, #0
 800446c:	d00a      	beq.n	8004484 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800446e:	4b37      	ldr	r3, [pc, #220]	; (800454c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004470:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004474:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800447c:	4933      	ldr	r1, [pc, #204]	; (800454c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800447e:	4313      	orrs	r3, r2
 8004480:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800448c:	2b00      	cmp	r3, #0
 800448e:	d00a      	beq.n	80044a6 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004490:	4b2e      	ldr	r3, [pc, #184]	; (800454c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004492:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004496:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800449e:	492b      	ldr	r1, [pc, #172]	; (800454c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80044a0:	4313      	orrs	r3, r2
 80044a2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d011      	beq.n	80044d6 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80044b2:	4b26      	ldr	r3, [pc, #152]	; (800454c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80044b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044b8:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80044c0:	4922      	ldr	r1, [pc, #136]	; (800454c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80044c2:	4313      	orrs	r3, r2
 80044c4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80044cc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80044d0:	d101      	bne.n	80044d6 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80044d2:	2301      	movs	r3, #1
 80044d4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f003 0308 	and.w	r3, r3, #8
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d001      	beq.n	80044e6 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80044e2:	2301      	movs	r3, #1
 80044e4:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d00a      	beq.n	8004508 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80044f2:	4b16      	ldr	r3, [pc, #88]	; (800454c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80044f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044f8:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004500:	4912      	ldr	r1, [pc, #72]	; (800454c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004502:	4313      	orrs	r3, r2
 8004504:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004510:	2b00      	cmp	r3, #0
 8004512:	d00b      	beq.n	800452c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004514:	4b0d      	ldr	r3, [pc, #52]	; (800454c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004516:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800451a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004524:	4909      	ldr	r1, [pc, #36]	; (800454c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004526:	4313      	orrs	r3, r2
 8004528:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800452c:	69fb      	ldr	r3, [r7, #28]
 800452e:	2b01      	cmp	r3, #1
 8004530:	d006      	beq.n	8004540 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800453a:	2b00      	cmp	r3, #0
 800453c:	f000 80d9 	beq.w	80046f2 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004540:	4b02      	ldr	r3, [pc, #8]	; (800454c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	4a01      	ldr	r2, [pc, #4]	; (800454c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004546:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800454a:	e001      	b.n	8004550 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 800454c:	40023800 	.word	0x40023800
 8004550:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004552:	f7fd fdad 	bl	80020b0 <HAL_GetTick>
 8004556:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004558:	e008      	b.n	800456c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800455a:	f7fd fda9 	bl	80020b0 <HAL_GetTick>
 800455e:	4602      	mov	r2, r0
 8004560:	697b      	ldr	r3, [r7, #20]
 8004562:	1ad3      	subs	r3, r2, r3
 8004564:	2b64      	cmp	r3, #100	; 0x64
 8004566:	d901      	bls.n	800456c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004568:	2303      	movs	r3, #3
 800456a:	e194      	b.n	8004896 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800456c:	4b6c      	ldr	r3, [pc, #432]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004574:	2b00      	cmp	r3, #0
 8004576:	d1f0      	bne.n	800455a <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f003 0301 	and.w	r3, r3, #1
 8004580:	2b00      	cmp	r3, #0
 8004582:	d021      	beq.n	80045c8 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004588:	2b00      	cmp	r3, #0
 800458a:	d11d      	bne.n	80045c8 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800458c:	4b64      	ldr	r3, [pc, #400]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800458e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004592:	0c1b      	lsrs	r3, r3, #16
 8004594:	f003 0303 	and.w	r3, r3, #3
 8004598:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800459a:	4b61      	ldr	r3, [pc, #388]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800459c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80045a0:	0e1b      	lsrs	r3, r3, #24
 80045a2:	f003 030f 	and.w	r3, r3, #15
 80045a6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	685b      	ldr	r3, [r3, #4]
 80045ac:	019a      	lsls	r2, r3, #6
 80045ae:	693b      	ldr	r3, [r7, #16]
 80045b0:	041b      	lsls	r3, r3, #16
 80045b2:	431a      	orrs	r2, r3
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	061b      	lsls	r3, r3, #24
 80045b8:	431a      	orrs	r2, r3
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	689b      	ldr	r3, [r3, #8]
 80045be:	071b      	lsls	r3, r3, #28
 80045c0:	4957      	ldr	r1, [pc, #348]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80045c2:	4313      	orrs	r3, r2
 80045c4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d004      	beq.n	80045de <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045d8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80045dc:	d00a      	beq.n	80045f4 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d02e      	beq.n	8004648 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045ee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80045f2:	d129      	bne.n	8004648 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80045f4:	4b4a      	ldr	r3, [pc, #296]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80045f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80045fa:	0c1b      	lsrs	r3, r3, #16
 80045fc:	f003 0303 	and.w	r3, r3, #3
 8004600:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004602:	4b47      	ldr	r3, [pc, #284]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004604:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004608:	0f1b      	lsrs	r3, r3, #28
 800460a:	f003 0307 	and.w	r3, r3, #7
 800460e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	685b      	ldr	r3, [r3, #4]
 8004614:	019a      	lsls	r2, r3, #6
 8004616:	693b      	ldr	r3, [r7, #16]
 8004618:	041b      	lsls	r3, r3, #16
 800461a:	431a      	orrs	r2, r3
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	68db      	ldr	r3, [r3, #12]
 8004620:	061b      	lsls	r3, r3, #24
 8004622:	431a      	orrs	r2, r3
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	071b      	lsls	r3, r3, #28
 8004628:	493d      	ldr	r1, [pc, #244]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800462a:	4313      	orrs	r3, r2
 800462c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004630:	4b3b      	ldr	r3, [pc, #236]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004632:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004636:	f023 021f 	bic.w	r2, r3, #31
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800463e:	3b01      	subs	r3, #1
 8004640:	4937      	ldr	r1, [pc, #220]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004642:	4313      	orrs	r3, r2
 8004644:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004650:	2b00      	cmp	r3, #0
 8004652:	d01d      	beq.n	8004690 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004654:	4b32      	ldr	r3, [pc, #200]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004656:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800465a:	0e1b      	lsrs	r3, r3, #24
 800465c:	f003 030f 	and.w	r3, r3, #15
 8004660:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004662:	4b2f      	ldr	r3, [pc, #188]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004664:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004668:	0f1b      	lsrs	r3, r3, #28
 800466a:	f003 0307 	and.w	r3, r3, #7
 800466e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	685b      	ldr	r3, [r3, #4]
 8004674:	019a      	lsls	r2, r3, #6
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	691b      	ldr	r3, [r3, #16]
 800467a:	041b      	lsls	r3, r3, #16
 800467c:	431a      	orrs	r2, r3
 800467e:	693b      	ldr	r3, [r7, #16]
 8004680:	061b      	lsls	r3, r3, #24
 8004682:	431a      	orrs	r2, r3
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	071b      	lsls	r3, r3, #28
 8004688:	4925      	ldr	r1, [pc, #148]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800468a:	4313      	orrs	r3, r2
 800468c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004698:	2b00      	cmp	r3, #0
 800469a:	d011      	beq.n	80046c0 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	685b      	ldr	r3, [r3, #4]
 80046a0:	019a      	lsls	r2, r3, #6
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	691b      	ldr	r3, [r3, #16]
 80046a6:	041b      	lsls	r3, r3, #16
 80046a8:	431a      	orrs	r2, r3
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	68db      	ldr	r3, [r3, #12]
 80046ae:	061b      	lsls	r3, r3, #24
 80046b0:	431a      	orrs	r2, r3
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	689b      	ldr	r3, [r3, #8]
 80046b6:	071b      	lsls	r3, r3, #28
 80046b8:	4919      	ldr	r1, [pc, #100]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80046ba:	4313      	orrs	r3, r2
 80046bc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80046c0:	4b17      	ldr	r3, [pc, #92]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	4a16      	ldr	r2, [pc, #88]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80046c6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80046ca:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80046cc:	f7fd fcf0 	bl	80020b0 <HAL_GetTick>
 80046d0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80046d2:	e008      	b.n	80046e6 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80046d4:	f7fd fcec 	bl	80020b0 <HAL_GetTick>
 80046d8:	4602      	mov	r2, r0
 80046da:	697b      	ldr	r3, [r7, #20]
 80046dc:	1ad3      	subs	r3, r2, r3
 80046de:	2b64      	cmp	r3, #100	; 0x64
 80046e0:	d901      	bls.n	80046e6 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80046e2:	2303      	movs	r3, #3
 80046e4:	e0d7      	b.n	8004896 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80046e6:	4b0e      	ldr	r3, [pc, #56]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d0f0      	beq.n	80046d4 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80046f2:	69bb      	ldr	r3, [r7, #24]
 80046f4:	2b01      	cmp	r3, #1
 80046f6:	f040 80cd 	bne.w	8004894 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80046fa:	4b09      	ldr	r3, [pc, #36]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	4a08      	ldr	r2, [pc, #32]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004700:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004704:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004706:	f7fd fcd3 	bl	80020b0 <HAL_GetTick>
 800470a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800470c:	e00a      	b.n	8004724 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800470e:	f7fd fccf 	bl	80020b0 <HAL_GetTick>
 8004712:	4602      	mov	r2, r0
 8004714:	697b      	ldr	r3, [r7, #20]
 8004716:	1ad3      	subs	r3, r2, r3
 8004718:	2b64      	cmp	r3, #100	; 0x64
 800471a:	d903      	bls.n	8004724 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800471c:	2303      	movs	r3, #3
 800471e:	e0ba      	b.n	8004896 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8004720:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004724:	4b5e      	ldr	r3, [pc, #376]	; (80048a0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800472c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004730:	d0ed      	beq.n	800470e <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800473a:	2b00      	cmp	r3, #0
 800473c:	d003      	beq.n	8004746 <HAL_RCCEx_PeriphCLKConfig+0x682>
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004742:	2b00      	cmp	r3, #0
 8004744:	d009      	beq.n	800475a <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800474e:	2b00      	cmp	r3, #0
 8004750:	d02e      	beq.n	80047b0 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004756:	2b00      	cmp	r3, #0
 8004758:	d12a      	bne.n	80047b0 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800475a:	4b51      	ldr	r3, [pc, #324]	; (80048a0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800475c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004760:	0c1b      	lsrs	r3, r3, #16
 8004762:	f003 0303 	and.w	r3, r3, #3
 8004766:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004768:	4b4d      	ldr	r3, [pc, #308]	; (80048a0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800476a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800476e:	0f1b      	lsrs	r3, r3, #28
 8004770:	f003 0307 	and.w	r3, r3, #7
 8004774:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	695b      	ldr	r3, [r3, #20]
 800477a:	019a      	lsls	r2, r3, #6
 800477c:	693b      	ldr	r3, [r7, #16]
 800477e:	041b      	lsls	r3, r3, #16
 8004780:	431a      	orrs	r2, r3
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	699b      	ldr	r3, [r3, #24]
 8004786:	061b      	lsls	r3, r3, #24
 8004788:	431a      	orrs	r2, r3
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	071b      	lsls	r3, r3, #28
 800478e:	4944      	ldr	r1, [pc, #272]	; (80048a0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004790:	4313      	orrs	r3, r2
 8004792:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004796:	4b42      	ldr	r3, [pc, #264]	; (80048a0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004798:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800479c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047a4:	3b01      	subs	r3, #1
 80047a6:	021b      	lsls	r3, r3, #8
 80047a8:	493d      	ldr	r1, [pc, #244]	; (80048a0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80047aa:	4313      	orrs	r3, r2
 80047ac:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d022      	beq.n	8004802 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80047c0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80047c4:	d11d      	bne.n	8004802 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80047c6:	4b36      	ldr	r3, [pc, #216]	; (80048a0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80047c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047cc:	0e1b      	lsrs	r3, r3, #24
 80047ce:	f003 030f 	and.w	r3, r3, #15
 80047d2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80047d4:	4b32      	ldr	r3, [pc, #200]	; (80048a0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80047d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047da:	0f1b      	lsrs	r3, r3, #28
 80047dc:	f003 0307 	and.w	r3, r3, #7
 80047e0:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	695b      	ldr	r3, [r3, #20]
 80047e6:	019a      	lsls	r2, r3, #6
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	6a1b      	ldr	r3, [r3, #32]
 80047ec:	041b      	lsls	r3, r3, #16
 80047ee:	431a      	orrs	r2, r3
 80047f0:	693b      	ldr	r3, [r7, #16]
 80047f2:	061b      	lsls	r3, r3, #24
 80047f4:	431a      	orrs	r2, r3
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	071b      	lsls	r3, r3, #28
 80047fa:	4929      	ldr	r1, [pc, #164]	; (80048a0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80047fc:	4313      	orrs	r3, r2
 80047fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f003 0308 	and.w	r3, r3, #8
 800480a:	2b00      	cmp	r3, #0
 800480c:	d028      	beq.n	8004860 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800480e:	4b24      	ldr	r3, [pc, #144]	; (80048a0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004810:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004814:	0e1b      	lsrs	r3, r3, #24
 8004816:	f003 030f 	and.w	r3, r3, #15
 800481a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800481c:	4b20      	ldr	r3, [pc, #128]	; (80048a0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800481e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004822:	0c1b      	lsrs	r3, r3, #16
 8004824:	f003 0303 	and.w	r3, r3, #3
 8004828:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	695b      	ldr	r3, [r3, #20]
 800482e:	019a      	lsls	r2, r3, #6
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	041b      	lsls	r3, r3, #16
 8004834:	431a      	orrs	r2, r3
 8004836:	693b      	ldr	r3, [r7, #16]
 8004838:	061b      	lsls	r3, r3, #24
 800483a:	431a      	orrs	r2, r3
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	69db      	ldr	r3, [r3, #28]
 8004840:	071b      	lsls	r3, r3, #28
 8004842:	4917      	ldr	r1, [pc, #92]	; (80048a0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004844:	4313      	orrs	r3, r2
 8004846:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800484a:	4b15      	ldr	r3, [pc, #84]	; (80048a0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800484c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004850:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004858:	4911      	ldr	r1, [pc, #68]	; (80048a0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800485a:	4313      	orrs	r3, r2
 800485c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004860:	4b0f      	ldr	r3, [pc, #60]	; (80048a0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	4a0e      	ldr	r2, [pc, #56]	; (80048a0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004866:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800486a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800486c:	f7fd fc20 	bl	80020b0 <HAL_GetTick>
 8004870:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004872:	e008      	b.n	8004886 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004874:	f7fd fc1c 	bl	80020b0 <HAL_GetTick>
 8004878:	4602      	mov	r2, r0
 800487a:	697b      	ldr	r3, [r7, #20]
 800487c:	1ad3      	subs	r3, r2, r3
 800487e:	2b64      	cmp	r3, #100	; 0x64
 8004880:	d901      	bls.n	8004886 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004882:	2303      	movs	r3, #3
 8004884:	e007      	b.n	8004896 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004886:	4b06      	ldr	r3, [pc, #24]	; (80048a0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800488e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004892:	d1ef      	bne.n	8004874 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8004894:	2300      	movs	r3, #0
}
 8004896:	4618      	mov	r0, r3
 8004898:	3720      	adds	r7, #32
 800489a:	46bd      	mov	sp, r7
 800489c:	bd80      	pop	{r7, pc}
 800489e:	bf00      	nop
 80048a0:	40023800 	.word	0x40023800

080048a4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80048a4:	b580      	push	{r7, lr}
 80048a6:	b084      	sub	sp, #16
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d101      	bne.n	80048b6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80048b2:	2301      	movs	r3, #1
 80048b4:	e09d      	b.n	80049f2 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d108      	bne.n	80048d0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	685b      	ldr	r3, [r3, #4]
 80048c2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80048c6:	d009      	beq.n	80048dc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	2200      	movs	r2, #0
 80048cc:	61da      	str	r2, [r3, #28]
 80048ce:	e005      	b.n	80048dc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	2200      	movs	r2, #0
 80048d4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	2200      	movs	r2, #0
 80048da:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	2200      	movs	r2, #0
 80048e0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80048e8:	b2db      	uxtb	r3, r3
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d106      	bne.n	80048fc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	2200      	movs	r2, #0
 80048f2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80048f6:	6878      	ldr	r0, [r7, #4]
 80048f8:	f7fd f93a 	bl	8001b70 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2202      	movs	r2, #2
 8004900:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	681a      	ldr	r2, [r3, #0]
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004912:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	68db      	ldr	r3, [r3, #12]
 8004918:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800491c:	d902      	bls.n	8004924 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800491e:	2300      	movs	r3, #0
 8004920:	60fb      	str	r3, [r7, #12]
 8004922:	e002      	b.n	800492a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004924:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004928:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	68db      	ldr	r3, [r3, #12]
 800492e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004932:	d007      	beq.n	8004944 <HAL_SPI_Init+0xa0>
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	68db      	ldr	r3, [r3, #12]
 8004938:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800493c:	d002      	beq.n	8004944 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	2200      	movs	r2, #0
 8004942:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	685b      	ldr	r3, [r3, #4]
 8004948:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	689b      	ldr	r3, [r3, #8]
 8004950:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004954:	431a      	orrs	r2, r3
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	691b      	ldr	r3, [r3, #16]
 800495a:	f003 0302 	and.w	r3, r3, #2
 800495e:	431a      	orrs	r2, r3
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	695b      	ldr	r3, [r3, #20]
 8004964:	f003 0301 	and.w	r3, r3, #1
 8004968:	431a      	orrs	r2, r3
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	699b      	ldr	r3, [r3, #24]
 800496e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004972:	431a      	orrs	r2, r3
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	69db      	ldr	r3, [r3, #28]
 8004978:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800497c:	431a      	orrs	r2, r3
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	6a1b      	ldr	r3, [r3, #32]
 8004982:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004986:	ea42 0103 	orr.w	r1, r2, r3
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800498e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	430a      	orrs	r2, r1
 8004998:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	699b      	ldr	r3, [r3, #24]
 800499e:	0c1b      	lsrs	r3, r3, #16
 80049a0:	f003 0204 	and.w	r2, r3, #4
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049a8:	f003 0310 	and.w	r3, r3, #16
 80049ac:	431a      	orrs	r2, r3
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049b2:	f003 0308 	and.w	r3, r3, #8
 80049b6:	431a      	orrs	r2, r3
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	68db      	ldr	r3, [r3, #12]
 80049bc:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80049c0:	ea42 0103 	orr.w	r1, r2, r3
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	430a      	orrs	r2, r1
 80049d0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	69da      	ldr	r2, [r3, #28]
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80049e0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	2200      	movs	r2, #0
 80049e6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	2201      	movs	r2, #1
 80049ec:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80049f0:	2300      	movs	r3, #0
}
 80049f2:	4618      	mov	r0, r3
 80049f4:	3710      	adds	r7, #16
 80049f6:	46bd      	mov	sp, r7
 80049f8:	bd80      	pop	{r7, pc}

080049fa <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80049fa:	b580      	push	{r7, lr}
 80049fc:	b088      	sub	sp, #32
 80049fe:	af00      	add	r7, sp, #0
 8004a00:	60f8      	str	r0, [r7, #12]
 8004a02:	60b9      	str	r1, [r7, #8]
 8004a04:	603b      	str	r3, [r7, #0]
 8004a06:	4613      	mov	r3, r2
 8004a08:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004a0a:	2300      	movs	r3, #0
 8004a0c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004a14:	2b01      	cmp	r3, #1
 8004a16:	d101      	bne.n	8004a1c <HAL_SPI_Transmit+0x22>
 8004a18:	2302      	movs	r3, #2
 8004a1a:	e158      	b.n	8004cce <HAL_SPI_Transmit+0x2d4>
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	2201      	movs	r2, #1
 8004a20:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004a24:	f7fd fb44 	bl	80020b0 <HAL_GetTick>
 8004a28:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004a2a:	88fb      	ldrh	r3, [r7, #6]
 8004a2c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004a34:	b2db      	uxtb	r3, r3
 8004a36:	2b01      	cmp	r3, #1
 8004a38:	d002      	beq.n	8004a40 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004a3a:	2302      	movs	r3, #2
 8004a3c:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004a3e:	e13d      	b.n	8004cbc <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8004a40:	68bb      	ldr	r3, [r7, #8]
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d002      	beq.n	8004a4c <HAL_SPI_Transmit+0x52>
 8004a46:	88fb      	ldrh	r3, [r7, #6]
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d102      	bne.n	8004a52 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004a4c:	2301      	movs	r3, #1
 8004a4e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004a50:	e134      	b.n	8004cbc <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	2203      	movs	r2, #3
 8004a56:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	2200      	movs	r2, #0
 8004a5e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	68ba      	ldr	r2, [r7, #8]
 8004a64:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	88fa      	ldrh	r2, [r7, #6]
 8004a6a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	88fa      	ldrh	r2, [r7, #6]
 8004a70:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	2200      	movs	r2, #0
 8004a76:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	2200      	movs	r2, #0
 8004a7c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	2200      	movs	r2, #0
 8004a84:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	2200      	movs	r2, #0
 8004a8c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	2200      	movs	r2, #0
 8004a92:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	689b      	ldr	r3, [r3, #8]
 8004a98:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a9c:	d10f      	bne.n	8004abe <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	681a      	ldr	r2, [r3, #0]
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004aac:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	681a      	ldr	r2, [r3, #0]
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004abc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ac8:	2b40      	cmp	r3, #64	; 0x40
 8004aca:	d007      	beq.n	8004adc <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	681a      	ldr	r2, [r3, #0]
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004ada:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	68db      	ldr	r3, [r3, #12]
 8004ae0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004ae4:	d94b      	bls.n	8004b7e <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	685b      	ldr	r3, [r3, #4]
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d002      	beq.n	8004af4 <HAL_SPI_Transmit+0xfa>
 8004aee:	8afb      	ldrh	r3, [r7, #22]
 8004af0:	2b01      	cmp	r3, #1
 8004af2:	d13e      	bne.n	8004b72 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004af8:	881a      	ldrh	r2, [r3, #0]
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b04:	1c9a      	adds	r2, r3, #2
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b0e:	b29b      	uxth	r3, r3
 8004b10:	3b01      	subs	r3, #1
 8004b12:	b29a      	uxth	r2, r3
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004b18:	e02b      	b.n	8004b72 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	689b      	ldr	r3, [r3, #8]
 8004b20:	f003 0302 	and.w	r3, r3, #2
 8004b24:	2b02      	cmp	r3, #2
 8004b26:	d112      	bne.n	8004b4e <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b2c:	881a      	ldrh	r2, [r3, #0]
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b38:	1c9a      	adds	r2, r3, #2
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b42:	b29b      	uxth	r3, r3
 8004b44:	3b01      	subs	r3, #1
 8004b46:	b29a      	uxth	r2, r3
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004b4c:	e011      	b.n	8004b72 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004b4e:	f7fd faaf 	bl	80020b0 <HAL_GetTick>
 8004b52:	4602      	mov	r2, r0
 8004b54:	69bb      	ldr	r3, [r7, #24]
 8004b56:	1ad3      	subs	r3, r2, r3
 8004b58:	683a      	ldr	r2, [r7, #0]
 8004b5a:	429a      	cmp	r2, r3
 8004b5c:	d803      	bhi.n	8004b66 <HAL_SPI_Transmit+0x16c>
 8004b5e:	683b      	ldr	r3, [r7, #0]
 8004b60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b64:	d102      	bne.n	8004b6c <HAL_SPI_Transmit+0x172>
 8004b66:	683b      	ldr	r3, [r7, #0]
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d102      	bne.n	8004b72 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8004b6c:	2303      	movs	r3, #3
 8004b6e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004b70:	e0a4      	b.n	8004cbc <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b76:	b29b      	uxth	r3, r3
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d1ce      	bne.n	8004b1a <HAL_SPI_Transmit+0x120>
 8004b7c:	e07c      	b.n	8004c78 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	685b      	ldr	r3, [r3, #4]
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d002      	beq.n	8004b8c <HAL_SPI_Transmit+0x192>
 8004b86:	8afb      	ldrh	r3, [r7, #22]
 8004b88:	2b01      	cmp	r3, #1
 8004b8a:	d170      	bne.n	8004c6e <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b90:	b29b      	uxth	r3, r3
 8004b92:	2b01      	cmp	r3, #1
 8004b94:	d912      	bls.n	8004bbc <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b9a:	881a      	ldrh	r2, [r3, #0]
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ba6:	1c9a      	adds	r2, r3, #2
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004bb0:	b29b      	uxth	r3, r3
 8004bb2:	3b02      	subs	r3, #2
 8004bb4:	b29a      	uxth	r2, r3
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004bba:	e058      	b.n	8004c6e <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	330c      	adds	r3, #12
 8004bc6:	7812      	ldrb	r2, [r2, #0]
 8004bc8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bce:	1c5a      	adds	r2, r3, #1
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004bd8:	b29b      	uxth	r3, r3
 8004bda:	3b01      	subs	r3, #1
 8004bdc:	b29a      	uxth	r2, r3
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8004be2:	e044      	b.n	8004c6e <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	689b      	ldr	r3, [r3, #8]
 8004bea:	f003 0302 	and.w	r3, r3, #2
 8004bee:	2b02      	cmp	r3, #2
 8004bf0:	d12b      	bne.n	8004c4a <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004bf6:	b29b      	uxth	r3, r3
 8004bf8:	2b01      	cmp	r3, #1
 8004bfa:	d912      	bls.n	8004c22 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c00:	881a      	ldrh	r2, [r3, #0]
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c0c:	1c9a      	adds	r2, r3, #2
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c16:	b29b      	uxth	r3, r3
 8004c18:	3b02      	subs	r3, #2
 8004c1a:	b29a      	uxth	r2, r3
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004c20:	e025      	b.n	8004c6e <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	330c      	adds	r3, #12
 8004c2c:	7812      	ldrb	r2, [r2, #0]
 8004c2e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c34:	1c5a      	adds	r2, r3, #1
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c3e:	b29b      	uxth	r3, r3
 8004c40:	3b01      	subs	r3, #1
 8004c42:	b29a      	uxth	r2, r3
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004c48:	e011      	b.n	8004c6e <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004c4a:	f7fd fa31 	bl	80020b0 <HAL_GetTick>
 8004c4e:	4602      	mov	r2, r0
 8004c50:	69bb      	ldr	r3, [r7, #24]
 8004c52:	1ad3      	subs	r3, r2, r3
 8004c54:	683a      	ldr	r2, [r7, #0]
 8004c56:	429a      	cmp	r2, r3
 8004c58:	d803      	bhi.n	8004c62 <HAL_SPI_Transmit+0x268>
 8004c5a:	683b      	ldr	r3, [r7, #0]
 8004c5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c60:	d102      	bne.n	8004c68 <HAL_SPI_Transmit+0x26e>
 8004c62:	683b      	ldr	r3, [r7, #0]
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d102      	bne.n	8004c6e <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8004c68:	2303      	movs	r3, #3
 8004c6a:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004c6c:	e026      	b.n	8004cbc <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c72:	b29b      	uxth	r3, r3
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d1b5      	bne.n	8004be4 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004c78:	69ba      	ldr	r2, [r7, #24]
 8004c7a:	6839      	ldr	r1, [r7, #0]
 8004c7c:	68f8      	ldr	r0, [r7, #12]
 8004c7e:	f000 f949 	bl	8004f14 <SPI_EndRxTxTransaction>
 8004c82:	4603      	mov	r3, r0
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d002      	beq.n	8004c8e <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	2220      	movs	r2, #32
 8004c8c:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	689b      	ldr	r3, [r3, #8]
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d10a      	bne.n	8004cac <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004c96:	2300      	movs	r3, #0
 8004c98:	613b      	str	r3, [r7, #16]
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	68db      	ldr	r3, [r3, #12]
 8004ca0:	613b      	str	r3, [r7, #16]
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	689b      	ldr	r3, [r3, #8]
 8004ca8:	613b      	str	r3, [r7, #16]
 8004caa:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d002      	beq.n	8004cba <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8004cb4:	2301      	movs	r3, #1
 8004cb6:	77fb      	strb	r3, [r7, #31]
 8004cb8:	e000      	b.n	8004cbc <HAL_SPI_Transmit+0x2c2>
  }

error:
 8004cba:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	2201      	movs	r2, #1
 8004cc0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	2200      	movs	r2, #0
 8004cc8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004ccc:	7ffb      	ldrb	r3, [r7, #31]
}
 8004cce:	4618      	mov	r0, r3
 8004cd0:	3720      	adds	r7, #32
 8004cd2:	46bd      	mov	sp, r7
 8004cd4:	bd80      	pop	{r7, pc}
	...

08004cd8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004cd8:	b580      	push	{r7, lr}
 8004cda:	b088      	sub	sp, #32
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	60f8      	str	r0, [r7, #12]
 8004ce0:	60b9      	str	r1, [r7, #8]
 8004ce2:	603b      	str	r3, [r7, #0]
 8004ce4:	4613      	mov	r3, r2
 8004ce6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004ce8:	f7fd f9e2 	bl	80020b0 <HAL_GetTick>
 8004cec:	4602      	mov	r2, r0
 8004cee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cf0:	1a9b      	subs	r3, r3, r2
 8004cf2:	683a      	ldr	r2, [r7, #0]
 8004cf4:	4413      	add	r3, r2
 8004cf6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004cf8:	f7fd f9da 	bl	80020b0 <HAL_GetTick>
 8004cfc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004cfe:	4b39      	ldr	r3, [pc, #228]	; (8004de4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	015b      	lsls	r3, r3, #5
 8004d04:	0d1b      	lsrs	r3, r3, #20
 8004d06:	69fa      	ldr	r2, [r7, #28]
 8004d08:	fb02 f303 	mul.w	r3, r2, r3
 8004d0c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004d0e:	e054      	b.n	8004dba <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004d10:	683b      	ldr	r3, [r7, #0]
 8004d12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d16:	d050      	beq.n	8004dba <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004d18:	f7fd f9ca 	bl	80020b0 <HAL_GetTick>
 8004d1c:	4602      	mov	r2, r0
 8004d1e:	69bb      	ldr	r3, [r7, #24]
 8004d20:	1ad3      	subs	r3, r2, r3
 8004d22:	69fa      	ldr	r2, [r7, #28]
 8004d24:	429a      	cmp	r2, r3
 8004d26:	d902      	bls.n	8004d2e <SPI_WaitFlagStateUntilTimeout+0x56>
 8004d28:	69fb      	ldr	r3, [r7, #28]
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d13d      	bne.n	8004daa <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	685a      	ldr	r2, [r3, #4]
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004d3c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	685b      	ldr	r3, [r3, #4]
 8004d42:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004d46:	d111      	bne.n	8004d6c <SPI_WaitFlagStateUntilTimeout+0x94>
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	689b      	ldr	r3, [r3, #8]
 8004d4c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d50:	d004      	beq.n	8004d5c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	689b      	ldr	r3, [r3, #8]
 8004d56:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d5a:	d107      	bne.n	8004d6c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	681a      	ldr	r2, [r3, #0]
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d6a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d70:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d74:	d10f      	bne.n	8004d96 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	681a      	ldr	r2, [r3, #0]
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004d84:	601a      	str	r2, [r3, #0]
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	681a      	ldr	r2, [r3, #0]
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004d94:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	2201      	movs	r2, #1
 8004d9a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	2200      	movs	r2, #0
 8004da2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004da6:	2303      	movs	r3, #3
 8004da8:	e017      	b.n	8004dda <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004daa:	697b      	ldr	r3, [r7, #20]
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d101      	bne.n	8004db4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004db0:	2300      	movs	r3, #0
 8004db2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004db4:	697b      	ldr	r3, [r7, #20]
 8004db6:	3b01      	subs	r3, #1
 8004db8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	689a      	ldr	r2, [r3, #8]
 8004dc0:	68bb      	ldr	r3, [r7, #8]
 8004dc2:	4013      	ands	r3, r2
 8004dc4:	68ba      	ldr	r2, [r7, #8]
 8004dc6:	429a      	cmp	r2, r3
 8004dc8:	bf0c      	ite	eq
 8004dca:	2301      	moveq	r3, #1
 8004dcc:	2300      	movne	r3, #0
 8004dce:	b2db      	uxtb	r3, r3
 8004dd0:	461a      	mov	r2, r3
 8004dd2:	79fb      	ldrb	r3, [r7, #7]
 8004dd4:	429a      	cmp	r2, r3
 8004dd6:	d19b      	bne.n	8004d10 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004dd8:	2300      	movs	r3, #0
}
 8004dda:	4618      	mov	r0, r3
 8004ddc:	3720      	adds	r7, #32
 8004dde:	46bd      	mov	sp, r7
 8004de0:	bd80      	pop	{r7, pc}
 8004de2:	bf00      	nop
 8004de4:	20000008 	.word	0x20000008

08004de8 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004de8:	b580      	push	{r7, lr}
 8004dea:	b08a      	sub	sp, #40	; 0x28
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	60f8      	str	r0, [r7, #12]
 8004df0:	60b9      	str	r1, [r7, #8]
 8004df2:	607a      	str	r2, [r7, #4]
 8004df4:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8004df6:	2300      	movs	r3, #0
 8004df8:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004dfa:	f7fd f959 	bl	80020b0 <HAL_GetTick>
 8004dfe:	4602      	mov	r2, r0
 8004e00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e02:	1a9b      	subs	r3, r3, r2
 8004e04:	683a      	ldr	r2, [r7, #0]
 8004e06:	4413      	add	r3, r2
 8004e08:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8004e0a:	f7fd f951 	bl	80020b0 <HAL_GetTick>
 8004e0e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	330c      	adds	r3, #12
 8004e16:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004e18:	4b3d      	ldr	r3, [pc, #244]	; (8004f10 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8004e1a:	681a      	ldr	r2, [r3, #0]
 8004e1c:	4613      	mov	r3, r2
 8004e1e:	009b      	lsls	r3, r3, #2
 8004e20:	4413      	add	r3, r2
 8004e22:	00da      	lsls	r2, r3, #3
 8004e24:	1ad3      	subs	r3, r2, r3
 8004e26:	0d1b      	lsrs	r3, r3, #20
 8004e28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e2a:	fb02 f303 	mul.w	r3, r2, r3
 8004e2e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8004e30:	e060      	b.n	8004ef4 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004e32:	68bb      	ldr	r3, [r7, #8]
 8004e34:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004e38:	d107      	bne.n	8004e4a <SPI_WaitFifoStateUntilTimeout+0x62>
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d104      	bne.n	8004e4a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8004e40:	69fb      	ldr	r3, [r7, #28]
 8004e42:	781b      	ldrb	r3, [r3, #0]
 8004e44:	b2db      	uxtb	r3, r3
 8004e46:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8004e48:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004e4a:	683b      	ldr	r3, [r7, #0]
 8004e4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e50:	d050      	beq.n	8004ef4 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004e52:	f7fd f92d 	bl	80020b0 <HAL_GetTick>
 8004e56:	4602      	mov	r2, r0
 8004e58:	6a3b      	ldr	r3, [r7, #32]
 8004e5a:	1ad3      	subs	r3, r2, r3
 8004e5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e5e:	429a      	cmp	r2, r3
 8004e60:	d902      	bls.n	8004e68 <SPI_WaitFifoStateUntilTimeout+0x80>
 8004e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d13d      	bne.n	8004ee4 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	685a      	ldr	r2, [r3, #4]
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004e76:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	685b      	ldr	r3, [r3, #4]
 8004e7c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004e80:	d111      	bne.n	8004ea6 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	689b      	ldr	r3, [r3, #8]
 8004e86:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e8a:	d004      	beq.n	8004e96 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	689b      	ldr	r3, [r3, #8]
 8004e90:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e94:	d107      	bne.n	8004ea6 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	681a      	ldr	r2, [r3, #0]
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004ea4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004eaa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004eae:	d10f      	bne.n	8004ed0 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	681a      	ldr	r2, [r3, #0]
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004ebe:	601a      	str	r2, [r3, #0]
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	681a      	ldr	r2, [r3, #0]
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004ece:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	2201      	movs	r2, #1
 8004ed4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	2200      	movs	r2, #0
 8004edc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004ee0:	2303      	movs	r3, #3
 8004ee2:	e010      	b.n	8004f06 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004ee4:	69bb      	ldr	r3, [r7, #24]
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d101      	bne.n	8004eee <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8004eea:	2300      	movs	r3, #0
 8004eec:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8004eee:	69bb      	ldr	r3, [r7, #24]
 8004ef0:	3b01      	subs	r3, #1
 8004ef2:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	689a      	ldr	r2, [r3, #8]
 8004efa:	68bb      	ldr	r3, [r7, #8]
 8004efc:	4013      	ands	r3, r2
 8004efe:	687a      	ldr	r2, [r7, #4]
 8004f00:	429a      	cmp	r2, r3
 8004f02:	d196      	bne.n	8004e32 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8004f04:	2300      	movs	r3, #0
}
 8004f06:	4618      	mov	r0, r3
 8004f08:	3728      	adds	r7, #40	; 0x28
 8004f0a:	46bd      	mov	sp, r7
 8004f0c:	bd80      	pop	{r7, pc}
 8004f0e:	bf00      	nop
 8004f10:	20000008 	.word	0x20000008

08004f14 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004f14:	b580      	push	{r7, lr}
 8004f16:	b088      	sub	sp, #32
 8004f18:	af02      	add	r7, sp, #8
 8004f1a:	60f8      	str	r0, [r7, #12]
 8004f1c:	60b9      	str	r1, [r7, #8]
 8004f1e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	9300      	str	r3, [sp, #0]
 8004f24:	68bb      	ldr	r3, [r7, #8]
 8004f26:	2200      	movs	r2, #0
 8004f28:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8004f2c:	68f8      	ldr	r0, [r7, #12]
 8004f2e:	f7ff ff5b 	bl	8004de8 <SPI_WaitFifoStateUntilTimeout>
 8004f32:	4603      	mov	r3, r0
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d007      	beq.n	8004f48 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f3c:	f043 0220 	orr.w	r2, r3, #32
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004f44:	2303      	movs	r3, #3
 8004f46:	e046      	b.n	8004fd6 <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004f48:	4b25      	ldr	r3, [pc, #148]	; (8004fe0 <SPI_EndRxTxTransaction+0xcc>)
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	4a25      	ldr	r2, [pc, #148]	; (8004fe4 <SPI_EndRxTxTransaction+0xd0>)
 8004f4e:	fba2 2303 	umull	r2, r3, r2, r3
 8004f52:	0d5b      	lsrs	r3, r3, #21
 8004f54:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004f58:	fb02 f303 	mul.w	r3, r2, r3
 8004f5c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	685b      	ldr	r3, [r3, #4]
 8004f62:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004f66:	d112      	bne.n	8004f8e <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	9300      	str	r3, [sp, #0]
 8004f6c:	68bb      	ldr	r3, [r7, #8]
 8004f6e:	2200      	movs	r2, #0
 8004f70:	2180      	movs	r1, #128	; 0x80
 8004f72:	68f8      	ldr	r0, [r7, #12]
 8004f74:	f7ff feb0 	bl	8004cd8 <SPI_WaitFlagStateUntilTimeout>
 8004f78:	4603      	mov	r3, r0
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d016      	beq.n	8004fac <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f82:	f043 0220 	orr.w	r2, r3, #32
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8004f8a:	2303      	movs	r3, #3
 8004f8c:	e023      	b.n	8004fd6 <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004f8e:	697b      	ldr	r3, [r7, #20]
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d00a      	beq.n	8004faa <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 8004f94:	697b      	ldr	r3, [r7, #20]
 8004f96:	3b01      	subs	r3, #1
 8004f98:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	689b      	ldr	r3, [r3, #8]
 8004fa0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fa4:	2b80      	cmp	r3, #128	; 0x80
 8004fa6:	d0f2      	beq.n	8004f8e <SPI_EndRxTxTransaction+0x7a>
 8004fa8:	e000      	b.n	8004fac <SPI_EndRxTxTransaction+0x98>
        break;
 8004faa:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	9300      	str	r3, [sp, #0]
 8004fb0:	68bb      	ldr	r3, [r7, #8]
 8004fb2:	2200      	movs	r2, #0
 8004fb4:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004fb8:	68f8      	ldr	r0, [r7, #12]
 8004fba:	f7ff ff15 	bl	8004de8 <SPI_WaitFifoStateUntilTimeout>
 8004fbe:	4603      	mov	r3, r0
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d007      	beq.n	8004fd4 <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004fc8:	f043 0220 	orr.w	r2, r3, #32
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004fd0:	2303      	movs	r3, #3
 8004fd2:	e000      	b.n	8004fd6 <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 8004fd4:	2300      	movs	r3, #0
}
 8004fd6:	4618      	mov	r0, r3
 8004fd8:	3718      	adds	r7, #24
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	bd80      	pop	{r7, pc}
 8004fde:	bf00      	nop
 8004fe0:	20000008 	.word	0x20000008
 8004fe4:	165e9f81 	.word	0x165e9f81

08004fe8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004fe8:	b580      	push	{r7, lr}
 8004fea:	b082      	sub	sp, #8
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d101      	bne.n	8004ffa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004ff6:	2301      	movs	r3, #1
 8004ff8:	e049      	b.n	800508e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005000:	b2db      	uxtb	r3, r3
 8005002:	2b00      	cmp	r3, #0
 8005004:	d106      	bne.n	8005014 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	2200      	movs	r2, #0
 800500a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800500e:	6878      	ldr	r0, [r7, #4]
 8005010:	f7fc fe10 	bl	8001c34 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2202      	movs	r2, #2
 8005018:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681a      	ldr	r2, [r3, #0]
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	3304      	adds	r3, #4
 8005024:	4619      	mov	r1, r3
 8005026:	4610      	mov	r0, r2
 8005028:	f000 fb82 	bl	8005730 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	2201      	movs	r2, #1
 8005030:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	2201      	movs	r2, #1
 8005038:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	2201      	movs	r2, #1
 8005040:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	2201      	movs	r2, #1
 8005048:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	2201      	movs	r2, #1
 8005050:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	2201      	movs	r2, #1
 8005058:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2201      	movs	r2, #1
 8005060:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	2201      	movs	r2, #1
 8005068:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	2201      	movs	r2, #1
 8005070:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	2201      	movs	r2, #1
 8005078:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	2201      	movs	r2, #1
 8005080:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	2201      	movs	r2, #1
 8005088:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800508c:	2300      	movs	r3, #0
}
 800508e:	4618      	mov	r0, r3
 8005090:	3708      	adds	r7, #8
 8005092:	46bd      	mov	sp, r7
 8005094:	bd80      	pop	{r7, pc}
	...

08005098 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005098:	b480      	push	{r7}
 800509a:	b085      	sub	sp, #20
 800509c:	af00      	add	r7, sp, #0
 800509e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050a6:	b2db      	uxtb	r3, r3
 80050a8:	2b01      	cmp	r3, #1
 80050aa:	d001      	beq.n	80050b0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80050ac:	2301      	movs	r3, #1
 80050ae:	e04c      	b.n	800514a <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	2202      	movs	r2, #2
 80050b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	4a26      	ldr	r2, [pc, #152]	; (8005158 <HAL_TIM_Base_Start+0xc0>)
 80050be:	4293      	cmp	r3, r2
 80050c0:	d022      	beq.n	8005108 <HAL_TIM_Base_Start+0x70>
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050ca:	d01d      	beq.n	8005108 <HAL_TIM_Base_Start+0x70>
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	4a22      	ldr	r2, [pc, #136]	; (800515c <HAL_TIM_Base_Start+0xc4>)
 80050d2:	4293      	cmp	r3, r2
 80050d4:	d018      	beq.n	8005108 <HAL_TIM_Base_Start+0x70>
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	4a21      	ldr	r2, [pc, #132]	; (8005160 <HAL_TIM_Base_Start+0xc8>)
 80050dc:	4293      	cmp	r3, r2
 80050de:	d013      	beq.n	8005108 <HAL_TIM_Base_Start+0x70>
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	4a1f      	ldr	r2, [pc, #124]	; (8005164 <HAL_TIM_Base_Start+0xcc>)
 80050e6:	4293      	cmp	r3, r2
 80050e8:	d00e      	beq.n	8005108 <HAL_TIM_Base_Start+0x70>
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	4a1e      	ldr	r2, [pc, #120]	; (8005168 <HAL_TIM_Base_Start+0xd0>)
 80050f0:	4293      	cmp	r3, r2
 80050f2:	d009      	beq.n	8005108 <HAL_TIM_Base_Start+0x70>
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	4a1c      	ldr	r2, [pc, #112]	; (800516c <HAL_TIM_Base_Start+0xd4>)
 80050fa:	4293      	cmp	r3, r2
 80050fc:	d004      	beq.n	8005108 <HAL_TIM_Base_Start+0x70>
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	4a1b      	ldr	r2, [pc, #108]	; (8005170 <HAL_TIM_Base_Start+0xd8>)
 8005104:	4293      	cmp	r3, r2
 8005106:	d115      	bne.n	8005134 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	689a      	ldr	r2, [r3, #8]
 800510e:	4b19      	ldr	r3, [pc, #100]	; (8005174 <HAL_TIM_Base_Start+0xdc>)
 8005110:	4013      	ands	r3, r2
 8005112:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	2b06      	cmp	r3, #6
 8005118:	d015      	beq.n	8005146 <HAL_TIM_Base_Start+0xae>
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005120:	d011      	beq.n	8005146 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	681a      	ldr	r2, [r3, #0]
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	f042 0201 	orr.w	r2, r2, #1
 8005130:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005132:	e008      	b.n	8005146 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	681a      	ldr	r2, [r3, #0]
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	f042 0201 	orr.w	r2, r2, #1
 8005142:	601a      	str	r2, [r3, #0]
 8005144:	e000      	b.n	8005148 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005146:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005148:	2300      	movs	r3, #0
}
 800514a:	4618      	mov	r0, r3
 800514c:	3714      	adds	r7, #20
 800514e:	46bd      	mov	sp, r7
 8005150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005154:	4770      	bx	lr
 8005156:	bf00      	nop
 8005158:	40010000 	.word	0x40010000
 800515c:	40000400 	.word	0x40000400
 8005160:	40000800 	.word	0x40000800
 8005164:	40000c00 	.word	0x40000c00
 8005168:	40010400 	.word	0x40010400
 800516c:	40014000 	.word	0x40014000
 8005170:	40001800 	.word	0x40001800
 8005174:	00010007 	.word	0x00010007

08005178 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8005178:	b480      	push	{r7}
 800517a:	b083      	sub	sp, #12
 800517c:	af00      	add	r7, sp, #0
 800517e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	6a1a      	ldr	r2, [r3, #32]
 8005186:	f241 1311 	movw	r3, #4369	; 0x1111
 800518a:	4013      	ands	r3, r2
 800518c:	2b00      	cmp	r3, #0
 800518e:	d10f      	bne.n	80051b0 <HAL_TIM_Base_Stop+0x38>
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	6a1a      	ldr	r2, [r3, #32]
 8005196:	f240 4344 	movw	r3, #1092	; 0x444
 800519a:	4013      	ands	r3, r2
 800519c:	2b00      	cmp	r3, #0
 800519e:	d107      	bne.n	80051b0 <HAL_TIM_Base_Stop+0x38>
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	681a      	ldr	r2, [r3, #0]
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	f022 0201 	bic.w	r2, r2, #1
 80051ae:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	2201      	movs	r2, #1
 80051b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80051b8:	2300      	movs	r3, #0
}
 80051ba:	4618      	mov	r0, r3
 80051bc:	370c      	adds	r7, #12
 80051be:	46bd      	mov	sp, r7
 80051c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c4:	4770      	bx	lr

080051c6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80051c6:	b580      	push	{r7, lr}
 80051c8:	b082      	sub	sp, #8
 80051ca:	af00      	add	r7, sp, #0
 80051cc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d101      	bne.n	80051d8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80051d4:	2301      	movs	r3, #1
 80051d6:	e049      	b.n	800526c <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051de:	b2db      	uxtb	r3, r3
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d106      	bne.n	80051f2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	2200      	movs	r2, #0
 80051e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80051ec:	6878      	ldr	r0, [r7, #4]
 80051ee:	f7fc fd3f 	bl	8001c70 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	2202      	movs	r2, #2
 80051f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681a      	ldr	r2, [r3, #0]
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	3304      	adds	r3, #4
 8005202:	4619      	mov	r1, r3
 8005204:	4610      	mov	r0, r2
 8005206:	f000 fa93 	bl	8005730 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	2201      	movs	r2, #1
 800520e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	2201      	movs	r2, #1
 8005216:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	2201      	movs	r2, #1
 800521e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	2201      	movs	r2, #1
 8005226:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	2201      	movs	r2, #1
 800522e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	2201      	movs	r2, #1
 8005236:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	2201      	movs	r2, #1
 800523e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	2201      	movs	r2, #1
 8005246:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	2201      	movs	r2, #1
 800524e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	2201      	movs	r2, #1
 8005256:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	2201      	movs	r2, #1
 800525e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	2201      	movs	r2, #1
 8005266:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800526a:	2300      	movs	r3, #0
}
 800526c:	4618      	mov	r0, r3
 800526e:	3708      	adds	r7, #8
 8005270:	46bd      	mov	sp, r7
 8005272:	bd80      	pop	{r7, pc}

08005274 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005274:	b580      	push	{r7, lr}
 8005276:	b082      	sub	sp, #8
 8005278:	af00      	add	r7, sp, #0
 800527a:	6078      	str	r0, [r7, #4]
 800527c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	2200      	movs	r2, #0
 8005284:	6839      	ldr	r1, [r7, #0]
 8005286:	4618      	mov	r0, r3
 8005288:	f000 fdea 	bl	8005e60 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	4a36      	ldr	r2, [pc, #216]	; (800536c <HAL_TIM_PWM_Stop+0xf8>)
 8005292:	4293      	cmp	r3, r2
 8005294:	d004      	beq.n	80052a0 <HAL_TIM_PWM_Stop+0x2c>
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	4a35      	ldr	r2, [pc, #212]	; (8005370 <HAL_TIM_PWM_Stop+0xfc>)
 800529c:	4293      	cmp	r3, r2
 800529e:	d101      	bne.n	80052a4 <HAL_TIM_PWM_Stop+0x30>
 80052a0:	2301      	movs	r3, #1
 80052a2:	e000      	b.n	80052a6 <HAL_TIM_PWM_Stop+0x32>
 80052a4:	2300      	movs	r3, #0
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d017      	beq.n	80052da <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	6a1a      	ldr	r2, [r3, #32]
 80052b0:	f241 1311 	movw	r3, #4369	; 0x1111
 80052b4:	4013      	ands	r3, r2
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d10f      	bne.n	80052da <HAL_TIM_PWM_Stop+0x66>
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	6a1a      	ldr	r2, [r3, #32]
 80052c0:	f240 4344 	movw	r3, #1092	; 0x444
 80052c4:	4013      	ands	r3, r2
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d107      	bne.n	80052da <HAL_TIM_PWM_Stop+0x66>
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80052d8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	6a1a      	ldr	r2, [r3, #32]
 80052e0:	f241 1311 	movw	r3, #4369	; 0x1111
 80052e4:	4013      	ands	r3, r2
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d10f      	bne.n	800530a <HAL_TIM_PWM_Stop+0x96>
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	6a1a      	ldr	r2, [r3, #32]
 80052f0:	f240 4344 	movw	r3, #1092	; 0x444
 80052f4:	4013      	ands	r3, r2
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d107      	bne.n	800530a <HAL_TIM_PWM_Stop+0x96>
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	681a      	ldr	r2, [r3, #0]
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	f022 0201 	bic.w	r2, r2, #1
 8005308:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800530a:	683b      	ldr	r3, [r7, #0]
 800530c:	2b00      	cmp	r3, #0
 800530e:	d104      	bne.n	800531a <HAL_TIM_PWM_Stop+0xa6>
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	2201      	movs	r2, #1
 8005314:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005318:	e023      	b.n	8005362 <HAL_TIM_PWM_Stop+0xee>
 800531a:	683b      	ldr	r3, [r7, #0]
 800531c:	2b04      	cmp	r3, #4
 800531e:	d104      	bne.n	800532a <HAL_TIM_PWM_Stop+0xb6>
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	2201      	movs	r2, #1
 8005324:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005328:	e01b      	b.n	8005362 <HAL_TIM_PWM_Stop+0xee>
 800532a:	683b      	ldr	r3, [r7, #0]
 800532c:	2b08      	cmp	r3, #8
 800532e:	d104      	bne.n	800533a <HAL_TIM_PWM_Stop+0xc6>
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2201      	movs	r2, #1
 8005334:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005338:	e013      	b.n	8005362 <HAL_TIM_PWM_Stop+0xee>
 800533a:	683b      	ldr	r3, [r7, #0]
 800533c:	2b0c      	cmp	r3, #12
 800533e:	d104      	bne.n	800534a <HAL_TIM_PWM_Stop+0xd6>
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	2201      	movs	r2, #1
 8005344:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005348:	e00b      	b.n	8005362 <HAL_TIM_PWM_Stop+0xee>
 800534a:	683b      	ldr	r3, [r7, #0]
 800534c:	2b10      	cmp	r3, #16
 800534e:	d104      	bne.n	800535a <HAL_TIM_PWM_Stop+0xe6>
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	2201      	movs	r2, #1
 8005354:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005358:	e003      	b.n	8005362 <HAL_TIM_PWM_Stop+0xee>
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	2201      	movs	r2, #1
 800535e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 8005362:	2300      	movs	r3, #0
}
 8005364:	4618      	mov	r0, r3
 8005366:	3708      	adds	r7, #8
 8005368:	46bd      	mov	sp, r7
 800536a:	bd80      	pop	{r7, pc}
 800536c:	40010000 	.word	0x40010000
 8005370:	40010400 	.word	0x40010400

08005374 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005374:	b580      	push	{r7, lr}
 8005376:	b086      	sub	sp, #24
 8005378:	af00      	add	r7, sp, #0
 800537a:	60f8      	str	r0, [r7, #12]
 800537c:	60b9      	str	r1, [r7, #8]
 800537e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005380:	2300      	movs	r3, #0
 8005382:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800538a:	2b01      	cmp	r3, #1
 800538c:	d101      	bne.n	8005392 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800538e:	2302      	movs	r3, #2
 8005390:	e0ff      	b.n	8005592 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	2201      	movs	r2, #1
 8005396:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	2b14      	cmp	r3, #20
 800539e:	f200 80f0 	bhi.w	8005582 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80053a2:	a201      	add	r2, pc, #4	; (adr r2, 80053a8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80053a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053a8:	080053fd 	.word	0x080053fd
 80053ac:	08005583 	.word	0x08005583
 80053b0:	08005583 	.word	0x08005583
 80053b4:	08005583 	.word	0x08005583
 80053b8:	0800543d 	.word	0x0800543d
 80053bc:	08005583 	.word	0x08005583
 80053c0:	08005583 	.word	0x08005583
 80053c4:	08005583 	.word	0x08005583
 80053c8:	0800547f 	.word	0x0800547f
 80053cc:	08005583 	.word	0x08005583
 80053d0:	08005583 	.word	0x08005583
 80053d4:	08005583 	.word	0x08005583
 80053d8:	080054bf 	.word	0x080054bf
 80053dc:	08005583 	.word	0x08005583
 80053e0:	08005583 	.word	0x08005583
 80053e4:	08005583 	.word	0x08005583
 80053e8:	08005501 	.word	0x08005501
 80053ec:	08005583 	.word	0x08005583
 80053f0:	08005583 	.word	0x08005583
 80053f4:	08005583 	.word	0x08005583
 80053f8:	08005541 	.word	0x08005541
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	68b9      	ldr	r1, [r7, #8]
 8005402:	4618      	mov	r0, r3
 8005404:	f000 fa34 	bl	8005870 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	699a      	ldr	r2, [r3, #24]
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	f042 0208 	orr.w	r2, r2, #8
 8005416:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	699a      	ldr	r2, [r3, #24]
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	f022 0204 	bic.w	r2, r2, #4
 8005426:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	6999      	ldr	r1, [r3, #24]
 800542e:	68bb      	ldr	r3, [r7, #8]
 8005430:	691a      	ldr	r2, [r3, #16]
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	430a      	orrs	r2, r1
 8005438:	619a      	str	r2, [r3, #24]
      break;
 800543a:	e0a5      	b.n	8005588 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	68b9      	ldr	r1, [r7, #8]
 8005442:	4618      	mov	r0, r3
 8005444:	f000 fa86 	bl	8005954 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	699a      	ldr	r2, [r3, #24]
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005456:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	699a      	ldr	r2, [r3, #24]
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005466:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	6999      	ldr	r1, [r3, #24]
 800546e:	68bb      	ldr	r3, [r7, #8]
 8005470:	691b      	ldr	r3, [r3, #16]
 8005472:	021a      	lsls	r2, r3, #8
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	430a      	orrs	r2, r1
 800547a:	619a      	str	r2, [r3, #24]
      break;
 800547c:	e084      	b.n	8005588 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	68b9      	ldr	r1, [r7, #8]
 8005484:	4618      	mov	r0, r3
 8005486:	f000 fadd 	bl	8005a44 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	69da      	ldr	r2, [r3, #28]
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	f042 0208 	orr.w	r2, r2, #8
 8005498:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	69da      	ldr	r2, [r3, #28]
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	f022 0204 	bic.w	r2, r2, #4
 80054a8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	69d9      	ldr	r1, [r3, #28]
 80054b0:	68bb      	ldr	r3, [r7, #8]
 80054b2:	691a      	ldr	r2, [r3, #16]
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	430a      	orrs	r2, r1
 80054ba:	61da      	str	r2, [r3, #28]
      break;
 80054bc:	e064      	b.n	8005588 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	68b9      	ldr	r1, [r7, #8]
 80054c4:	4618      	mov	r0, r3
 80054c6:	f000 fb33 	bl	8005b30 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	69da      	ldr	r2, [r3, #28]
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80054d8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	69da      	ldr	r2, [r3, #28]
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80054e8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	69d9      	ldr	r1, [r3, #28]
 80054f0:	68bb      	ldr	r3, [r7, #8]
 80054f2:	691b      	ldr	r3, [r3, #16]
 80054f4:	021a      	lsls	r2, r3, #8
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	430a      	orrs	r2, r1
 80054fc:	61da      	str	r2, [r3, #28]
      break;
 80054fe:	e043      	b.n	8005588 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	68b9      	ldr	r1, [r7, #8]
 8005506:	4618      	mov	r0, r3
 8005508:	f000 fb6a 	bl	8005be0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	f042 0208 	orr.w	r2, r2, #8
 800551a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	f022 0204 	bic.w	r2, r2, #4
 800552a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005532:	68bb      	ldr	r3, [r7, #8]
 8005534:	691a      	ldr	r2, [r3, #16]
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	430a      	orrs	r2, r1
 800553c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800553e:	e023      	b.n	8005588 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	68b9      	ldr	r1, [r7, #8]
 8005546:	4618      	mov	r0, r3
 8005548:	f000 fb9c 	bl	8005c84 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800555a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800556a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005572:	68bb      	ldr	r3, [r7, #8]
 8005574:	691b      	ldr	r3, [r3, #16]
 8005576:	021a      	lsls	r2, r3, #8
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	430a      	orrs	r2, r1
 800557e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005580:	e002      	b.n	8005588 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005582:	2301      	movs	r3, #1
 8005584:	75fb      	strb	r3, [r7, #23]
      break;
 8005586:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	2200      	movs	r2, #0
 800558c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005590:	7dfb      	ldrb	r3, [r7, #23]
}
 8005592:	4618      	mov	r0, r3
 8005594:	3718      	adds	r7, #24
 8005596:	46bd      	mov	sp, r7
 8005598:	bd80      	pop	{r7, pc}
 800559a:	bf00      	nop

0800559c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800559c:	b580      	push	{r7, lr}
 800559e:	b084      	sub	sp, #16
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	6078      	str	r0, [r7, #4]
 80055a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80055a6:	2300      	movs	r3, #0
 80055a8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80055b0:	2b01      	cmp	r3, #1
 80055b2:	d101      	bne.n	80055b8 <HAL_TIM_ConfigClockSource+0x1c>
 80055b4:	2302      	movs	r3, #2
 80055b6:	e0b4      	b.n	8005722 <HAL_TIM_ConfigClockSource+0x186>
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	2201      	movs	r2, #1
 80055bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	2202      	movs	r2, #2
 80055c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	689b      	ldr	r3, [r3, #8]
 80055ce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80055d0:	68ba      	ldr	r2, [r7, #8]
 80055d2:	4b56      	ldr	r3, [pc, #344]	; (800572c <HAL_TIM_ConfigClockSource+0x190>)
 80055d4:	4013      	ands	r3, r2
 80055d6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80055d8:	68bb      	ldr	r3, [r7, #8]
 80055da:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80055de:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	68ba      	ldr	r2, [r7, #8]
 80055e6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80055e8:	683b      	ldr	r3, [r7, #0]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80055f0:	d03e      	beq.n	8005670 <HAL_TIM_ConfigClockSource+0xd4>
 80055f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80055f6:	f200 8087 	bhi.w	8005708 <HAL_TIM_ConfigClockSource+0x16c>
 80055fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80055fe:	f000 8086 	beq.w	800570e <HAL_TIM_ConfigClockSource+0x172>
 8005602:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005606:	d87f      	bhi.n	8005708 <HAL_TIM_ConfigClockSource+0x16c>
 8005608:	2b70      	cmp	r3, #112	; 0x70
 800560a:	d01a      	beq.n	8005642 <HAL_TIM_ConfigClockSource+0xa6>
 800560c:	2b70      	cmp	r3, #112	; 0x70
 800560e:	d87b      	bhi.n	8005708 <HAL_TIM_ConfigClockSource+0x16c>
 8005610:	2b60      	cmp	r3, #96	; 0x60
 8005612:	d050      	beq.n	80056b6 <HAL_TIM_ConfigClockSource+0x11a>
 8005614:	2b60      	cmp	r3, #96	; 0x60
 8005616:	d877      	bhi.n	8005708 <HAL_TIM_ConfigClockSource+0x16c>
 8005618:	2b50      	cmp	r3, #80	; 0x50
 800561a:	d03c      	beq.n	8005696 <HAL_TIM_ConfigClockSource+0xfa>
 800561c:	2b50      	cmp	r3, #80	; 0x50
 800561e:	d873      	bhi.n	8005708 <HAL_TIM_ConfigClockSource+0x16c>
 8005620:	2b40      	cmp	r3, #64	; 0x40
 8005622:	d058      	beq.n	80056d6 <HAL_TIM_ConfigClockSource+0x13a>
 8005624:	2b40      	cmp	r3, #64	; 0x40
 8005626:	d86f      	bhi.n	8005708 <HAL_TIM_ConfigClockSource+0x16c>
 8005628:	2b30      	cmp	r3, #48	; 0x30
 800562a:	d064      	beq.n	80056f6 <HAL_TIM_ConfigClockSource+0x15a>
 800562c:	2b30      	cmp	r3, #48	; 0x30
 800562e:	d86b      	bhi.n	8005708 <HAL_TIM_ConfigClockSource+0x16c>
 8005630:	2b20      	cmp	r3, #32
 8005632:	d060      	beq.n	80056f6 <HAL_TIM_ConfigClockSource+0x15a>
 8005634:	2b20      	cmp	r3, #32
 8005636:	d867      	bhi.n	8005708 <HAL_TIM_ConfigClockSource+0x16c>
 8005638:	2b00      	cmp	r3, #0
 800563a:	d05c      	beq.n	80056f6 <HAL_TIM_ConfigClockSource+0x15a>
 800563c:	2b10      	cmp	r3, #16
 800563e:	d05a      	beq.n	80056f6 <HAL_TIM_ConfigClockSource+0x15a>
 8005640:	e062      	b.n	8005708 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	6818      	ldr	r0, [r3, #0]
 8005646:	683b      	ldr	r3, [r7, #0]
 8005648:	6899      	ldr	r1, [r3, #8]
 800564a:	683b      	ldr	r3, [r7, #0]
 800564c:	685a      	ldr	r2, [r3, #4]
 800564e:	683b      	ldr	r3, [r7, #0]
 8005650:	68db      	ldr	r3, [r3, #12]
 8005652:	f000 fbe5 	bl	8005e20 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	689b      	ldr	r3, [r3, #8]
 800565c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800565e:	68bb      	ldr	r3, [r7, #8]
 8005660:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005664:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	68ba      	ldr	r2, [r7, #8]
 800566c:	609a      	str	r2, [r3, #8]
      break;
 800566e:	e04f      	b.n	8005710 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	6818      	ldr	r0, [r3, #0]
 8005674:	683b      	ldr	r3, [r7, #0]
 8005676:	6899      	ldr	r1, [r3, #8]
 8005678:	683b      	ldr	r3, [r7, #0]
 800567a:	685a      	ldr	r2, [r3, #4]
 800567c:	683b      	ldr	r3, [r7, #0]
 800567e:	68db      	ldr	r3, [r3, #12]
 8005680:	f000 fbce 	bl	8005e20 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	689a      	ldr	r2, [r3, #8]
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005692:	609a      	str	r2, [r3, #8]
      break;
 8005694:	e03c      	b.n	8005710 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	6818      	ldr	r0, [r3, #0]
 800569a:	683b      	ldr	r3, [r7, #0]
 800569c:	6859      	ldr	r1, [r3, #4]
 800569e:	683b      	ldr	r3, [r7, #0]
 80056a0:	68db      	ldr	r3, [r3, #12]
 80056a2:	461a      	mov	r2, r3
 80056a4:	f000 fb42 	bl	8005d2c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	2150      	movs	r1, #80	; 0x50
 80056ae:	4618      	mov	r0, r3
 80056b0:	f000 fb9b 	bl	8005dea <TIM_ITRx_SetConfig>
      break;
 80056b4:	e02c      	b.n	8005710 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	6818      	ldr	r0, [r3, #0]
 80056ba:	683b      	ldr	r3, [r7, #0]
 80056bc:	6859      	ldr	r1, [r3, #4]
 80056be:	683b      	ldr	r3, [r7, #0]
 80056c0:	68db      	ldr	r3, [r3, #12]
 80056c2:	461a      	mov	r2, r3
 80056c4:	f000 fb61 	bl	8005d8a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	2160      	movs	r1, #96	; 0x60
 80056ce:	4618      	mov	r0, r3
 80056d0:	f000 fb8b 	bl	8005dea <TIM_ITRx_SetConfig>
      break;
 80056d4:	e01c      	b.n	8005710 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	6818      	ldr	r0, [r3, #0]
 80056da:	683b      	ldr	r3, [r7, #0]
 80056dc:	6859      	ldr	r1, [r3, #4]
 80056de:	683b      	ldr	r3, [r7, #0]
 80056e0:	68db      	ldr	r3, [r3, #12]
 80056e2:	461a      	mov	r2, r3
 80056e4:	f000 fb22 	bl	8005d2c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	2140      	movs	r1, #64	; 0x40
 80056ee:	4618      	mov	r0, r3
 80056f0:	f000 fb7b 	bl	8005dea <TIM_ITRx_SetConfig>
      break;
 80056f4:	e00c      	b.n	8005710 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681a      	ldr	r2, [r3, #0]
 80056fa:	683b      	ldr	r3, [r7, #0]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	4619      	mov	r1, r3
 8005700:	4610      	mov	r0, r2
 8005702:	f000 fb72 	bl	8005dea <TIM_ITRx_SetConfig>
      break;
 8005706:	e003      	b.n	8005710 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005708:	2301      	movs	r3, #1
 800570a:	73fb      	strb	r3, [r7, #15]
      break;
 800570c:	e000      	b.n	8005710 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800570e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	2201      	movs	r2, #1
 8005714:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	2200      	movs	r2, #0
 800571c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005720:	7bfb      	ldrb	r3, [r7, #15]
}
 8005722:	4618      	mov	r0, r3
 8005724:	3710      	adds	r7, #16
 8005726:	46bd      	mov	sp, r7
 8005728:	bd80      	pop	{r7, pc}
 800572a:	bf00      	nop
 800572c:	fffeff88 	.word	0xfffeff88

08005730 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005730:	b480      	push	{r7}
 8005732:	b085      	sub	sp, #20
 8005734:	af00      	add	r7, sp, #0
 8005736:	6078      	str	r0, [r7, #4]
 8005738:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	4a40      	ldr	r2, [pc, #256]	; (8005844 <TIM_Base_SetConfig+0x114>)
 8005744:	4293      	cmp	r3, r2
 8005746:	d013      	beq.n	8005770 <TIM_Base_SetConfig+0x40>
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800574e:	d00f      	beq.n	8005770 <TIM_Base_SetConfig+0x40>
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	4a3d      	ldr	r2, [pc, #244]	; (8005848 <TIM_Base_SetConfig+0x118>)
 8005754:	4293      	cmp	r3, r2
 8005756:	d00b      	beq.n	8005770 <TIM_Base_SetConfig+0x40>
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	4a3c      	ldr	r2, [pc, #240]	; (800584c <TIM_Base_SetConfig+0x11c>)
 800575c:	4293      	cmp	r3, r2
 800575e:	d007      	beq.n	8005770 <TIM_Base_SetConfig+0x40>
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	4a3b      	ldr	r2, [pc, #236]	; (8005850 <TIM_Base_SetConfig+0x120>)
 8005764:	4293      	cmp	r3, r2
 8005766:	d003      	beq.n	8005770 <TIM_Base_SetConfig+0x40>
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	4a3a      	ldr	r2, [pc, #232]	; (8005854 <TIM_Base_SetConfig+0x124>)
 800576c:	4293      	cmp	r3, r2
 800576e:	d108      	bne.n	8005782 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005776:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005778:	683b      	ldr	r3, [r7, #0]
 800577a:	685b      	ldr	r3, [r3, #4]
 800577c:	68fa      	ldr	r2, [r7, #12]
 800577e:	4313      	orrs	r3, r2
 8005780:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	4a2f      	ldr	r2, [pc, #188]	; (8005844 <TIM_Base_SetConfig+0x114>)
 8005786:	4293      	cmp	r3, r2
 8005788:	d02b      	beq.n	80057e2 <TIM_Base_SetConfig+0xb2>
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005790:	d027      	beq.n	80057e2 <TIM_Base_SetConfig+0xb2>
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	4a2c      	ldr	r2, [pc, #176]	; (8005848 <TIM_Base_SetConfig+0x118>)
 8005796:	4293      	cmp	r3, r2
 8005798:	d023      	beq.n	80057e2 <TIM_Base_SetConfig+0xb2>
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	4a2b      	ldr	r2, [pc, #172]	; (800584c <TIM_Base_SetConfig+0x11c>)
 800579e:	4293      	cmp	r3, r2
 80057a0:	d01f      	beq.n	80057e2 <TIM_Base_SetConfig+0xb2>
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	4a2a      	ldr	r2, [pc, #168]	; (8005850 <TIM_Base_SetConfig+0x120>)
 80057a6:	4293      	cmp	r3, r2
 80057a8:	d01b      	beq.n	80057e2 <TIM_Base_SetConfig+0xb2>
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	4a29      	ldr	r2, [pc, #164]	; (8005854 <TIM_Base_SetConfig+0x124>)
 80057ae:	4293      	cmp	r3, r2
 80057b0:	d017      	beq.n	80057e2 <TIM_Base_SetConfig+0xb2>
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	4a28      	ldr	r2, [pc, #160]	; (8005858 <TIM_Base_SetConfig+0x128>)
 80057b6:	4293      	cmp	r3, r2
 80057b8:	d013      	beq.n	80057e2 <TIM_Base_SetConfig+0xb2>
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	4a27      	ldr	r2, [pc, #156]	; (800585c <TIM_Base_SetConfig+0x12c>)
 80057be:	4293      	cmp	r3, r2
 80057c0:	d00f      	beq.n	80057e2 <TIM_Base_SetConfig+0xb2>
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	4a26      	ldr	r2, [pc, #152]	; (8005860 <TIM_Base_SetConfig+0x130>)
 80057c6:	4293      	cmp	r3, r2
 80057c8:	d00b      	beq.n	80057e2 <TIM_Base_SetConfig+0xb2>
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	4a25      	ldr	r2, [pc, #148]	; (8005864 <TIM_Base_SetConfig+0x134>)
 80057ce:	4293      	cmp	r3, r2
 80057d0:	d007      	beq.n	80057e2 <TIM_Base_SetConfig+0xb2>
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	4a24      	ldr	r2, [pc, #144]	; (8005868 <TIM_Base_SetConfig+0x138>)
 80057d6:	4293      	cmp	r3, r2
 80057d8:	d003      	beq.n	80057e2 <TIM_Base_SetConfig+0xb2>
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	4a23      	ldr	r2, [pc, #140]	; (800586c <TIM_Base_SetConfig+0x13c>)
 80057de:	4293      	cmp	r3, r2
 80057e0:	d108      	bne.n	80057f4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80057e8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80057ea:	683b      	ldr	r3, [r7, #0]
 80057ec:	68db      	ldr	r3, [r3, #12]
 80057ee:	68fa      	ldr	r2, [r7, #12]
 80057f0:	4313      	orrs	r3, r2
 80057f2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80057fa:	683b      	ldr	r3, [r7, #0]
 80057fc:	695b      	ldr	r3, [r3, #20]
 80057fe:	4313      	orrs	r3, r2
 8005800:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	68fa      	ldr	r2, [r7, #12]
 8005806:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005808:	683b      	ldr	r3, [r7, #0]
 800580a:	689a      	ldr	r2, [r3, #8]
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005810:	683b      	ldr	r3, [r7, #0]
 8005812:	681a      	ldr	r2, [r3, #0]
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	4a0a      	ldr	r2, [pc, #40]	; (8005844 <TIM_Base_SetConfig+0x114>)
 800581c:	4293      	cmp	r3, r2
 800581e:	d003      	beq.n	8005828 <TIM_Base_SetConfig+0xf8>
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	4a0c      	ldr	r2, [pc, #48]	; (8005854 <TIM_Base_SetConfig+0x124>)
 8005824:	4293      	cmp	r3, r2
 8005826:	d103      	bne.n	8005830 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005828:	683b      	ldr	r3, [r7, #0]
 800582a:	691a      	ldr	r2, [r3, #16]
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	2201      	movs	r2, #1
 8005834:	615a      	str	r2, [r3, #20]
}
 8005836:	bf00      	nop
 8005838:	3714      	adds	r7, #20
 800583a:	46bd      	mov	sp, r7
 800583c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005840:	4770      	bx	lr
 8005842:	bf00      	nop
 8005844:	40010000 	.word	0x40010000
 8005848:	40000400 	.word	0x40000400
 800584c:	40000800 	.word	0x40000800
 8005850:	40000c00 	.word	0x40000c00
 8005854:	40010400 	.word	0x40010400
 8005858:	40014000 	.word	0x40014000
 800585c:	40014400 	.word	0x40014400
 8005860:	40014800 	.word	0x40014800
 8005864:	40001800 	.word	0x40001800
 8005868:	40001c00 	.word	0x40001c00
 800586c:	40002000 	.word	0x40002000

08005870 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005870:	b480      	push	{r7}
 8005872:	b087      	sub	sp, #28
 8005874:	af00      	add	r7, sp, #0
 8005876:	6078      	str	r0, [r7, #4]
 8005878:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	6a1b      	ldr	r3, [r3, #32]
 800587e:	f023 0201 	bic.w	r2, r3, #1
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	6a1b      	ldr	r3, [r3, #32]
 800588a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	685b      	ldr	r3, [r3, #4]
 8005890:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	699b      	ldr	r3, [r3, #24]
 8005896:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005898:	68fa      	ldr	r2, [r7, #12]
 800589a:	4b2b      	ldr	r3, [pc, #172]	; (8005948 <TIM_OC1_SetConfig+0xd8>)
 800589c:	4013      	ands	r3, r2
 800589e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	f023 0303 	bic.w	r3, r3, #3
 80058a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80058a8:	683b      	ldr	r3, [r7, #0]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	68fa      	ldr	r2, [r7, #12]
 80058ae:	4313      	orrs	r3, r2
 80058b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80058b2:	697b      	ldr	r3, [r7, #20]
 80058b4:	f023 0302 	bic.w	r3, r3, #2
 80058b8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80058ba:	683b      	ldr	r3, [r7, #0]
 80058bc:	689b      	ldr	r3, [r3, #8]
 80058be:	697a      	ldr	r2, [r7, #20]
 80058c0:	4313      	orrs	r3, r2
 80058c2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	4a21      	ldr	r2, [pc, #132]	; (800594c <TIM_OC1_SetConfig+0xdc>)
 80058c8:	4293      	cmp	r3, r2
 80058ca:	d003      	beq.n	80058d4 <TIM_OC1_SetConfig+0x64>
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	4a20      	ldr	r2, [pc, #128]	; (8005950 <TIM_OC1_SetConfig+0xe0>)
 80058d0:	4293      	cmp	r3, r2
 80058d2:	d10c      	bne.n	80058ee <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80058d4:	697b      	ldr	r3, [r7, #20]
 80058d6:	f023 0308 	bic.w	r3, r3, #8
 80058da:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80058dc:	683b      	ldr	r3, [r7, #0]
 80058de:	68db      	ldr	r3, [r3, #12]
 80058e0:	697a      	ldr	r2, [r7, #20]
 80058e2:	4313      	orrs	r3, r2
 80058e4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80058e6:	697b      	ldr	r3, [r7, #20]
 80058e8:	f023 0304 	bic.w	r3, r3, #4
 80058ec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	4a16      	ldr	r2, [pc, #88]	; (800594c <TIM_OC1_SetConfig+0xdc>)
 80058f2:	4293      	cmp	r3, r2
 80058f4:	d003      	beq.n	80058fe <TIM_OC1_SetConfig+0x8e>
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	4a15      	ldr	r2, [pc, #84]	; (8005950 <TIM_OC1_SetConfig+0xe0>)
 80058fa:	4293      	cmp	r3, r2
 80058fc:	d111      	bne.n	8005922 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80058fe:	693b      	ldr	r3, [r7, #16]
 8005900:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005904:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005906:	693b      	ldr	r3, [r7, #16]
 8005908:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800590c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800590e:	683b      	ldr	r3, [r7, #0]
 8005910:	695b      	ldr	r3, [r3, #20]
 8005912:	693a      	ldr	r2, [r7, #16]
 8005914:	4313      	orrs	r3, r2
 8005916:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005918:	683b      	ldr	r3, [r7, #0]
 800591a:	699b      	ldr	r3, [r3, #24]
 800591c:	693a      	ldr	r2, [r7, #16]
 800591e:	4313      	orrs	r3, r2
 8005920:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	693a      	ldr	r2, [r7, #16]
 8005926:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	68fa      	ldr	r2, [r7, #12]
 800592c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800592e:	683b      	ldr	r3, [r7, #0]
 8005930:	685a      	ldr	r2, [r3, #4]
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	697a      	ldr	r2, [r7, #20]
 800593a:	621a      	str	r2, [r3, #32]
}
 800593c:	bf00      	nop
 800593e:	371c      	adds	r7, #28
 8005940:	46bd      	mov	sp, r7
 8005942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005946:	4770      	bx	lr
 8005948:	fffeff8f 	.word	0xfffeff8f
 800594c:	40010000 	.word	0x40010000
 8005950:	40010400 	.word	0x40010400

08005954 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005954:	b480      	push	{r7}
 8005956:	b087      	sub	sp, #28
 8005958:	af00      	add	r7, sp, #0
 800595a:	6078      	str	r0, [r7, #4]
 800595c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	6a1b      	ldr	r3, [r3, #32]
 8005962:	f023 0210 	bic.w	r2, r3, #16
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	6a1b      	ldr	r3, [r3, #32]
 800596e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	685b      	ldr	r3, [r3, #4]
 8005974:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	699b      	ldr	r3, [r3, #24]
 800597a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800597c:	68fa      	ldr	r2, [r7, #12]
 800597e:	4b2e      	ldr	r3, [pc, #184]	; (8005a38 <TIM_OC2_SetConfig+0xe4>)
 8005980:	4013      	ands	r3, r2
 8005982:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800598a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800598c:	683b      	ldr	r3, [r7, #0]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	021b      	lsls	r3, r3, #8
 8005992:	68fa      	ldr	r2, [r7, #12]
 8005994:	4313      	orrs	r3, r2
 8005996:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005998:	697b      	ldr	r3, [r7, #20]
 800599a:	f023 0320 	bic.w	r3, r3, #32
 800599e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80059a0:	683b      	ldr	r3, [r7, #0]
 80059a2:	689b      	ldr	r3, [r3, #8]
 80059a4:	011b      	lsls	r3, r3, #4
 80059a6:	697a      	ldr	r2, [r7, #20]
 80059a8:	4313      	orrs	r3, r2
 80059aa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	4a23      	ldr	r2, [pc, #140]	; (8005a3c <TIM_OC2_SetConfig+0xe8>)
 80059b0:	4293      	cmp	r3, r2
 80059b2:	d003      	beq.n	80059bc <TIM_OC2_SetConfig+0x68>
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	4a22      	ldr	r2, [pc, #136]	; (8005a40 <TIM_OC2_SetConfig+0xec>)
 80059b8:	4293      	cmp	r3, r2
 80059ba:	d10d      	bne.n	80059d8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80059bc:	697b      	ldr	r3, [r7, #20]
 80059be:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80059c2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80059c4:	683b      	ldr	r3, [r7, #0]
 80059c6:	68db      	ldr	r3, [r3, #12]
 80059c8:	011b      	lsls	r3, r3, #4
 80059ca:	697a      	ldr	r2, [r7, #20]
 80059cc:	4313      	orrs	r3, r2
 80059ce:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80059d0:	697b      	ldr	r3, [r7, #20]
 80059d2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80059d6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	4a18      	ldr	r2, [pc, #96]	; (8005a3c <TIM_OC2_SetConfig+0xe8>)
 80059dc:	4293      	cmp	r3, r2
 80059de:	d003      	beq.n	80059e8 <TIM_OC2_SetConfig+0x94>
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	4a17      	ldr	r2, [pc, #92]	; (8005a40 <TIM_OC2_SetConfig+0xec>)
 80059e4:	4293      	cmp	r3, r2
 80059e6:	d113      	bne.n	8005a10 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80059e8:	693b      	ldr	r3, [r7, #16]
 80059ea:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80059ee:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80059f0:	693b      	ldr	r3, [r7, #16]
 80059f2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80059f6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80059f8:	683b      	ldr	r3, [r7, #0]
 80059fa:	695b      	ldr	r3, [r3, #20]
 80059fc:	009b      	lsls	r3, r3, #2
 80059fe:	693a      	ldr	r2, [r7, #16]
 8005a00:	4313      	orrs	r3, r2
 8005a02:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005a04:	683b      	ldr	r3, [r7, #0]
 8005a06:	699b      	ldr	r3, [r3, #24]
 8005a08:	009b      	lsls	r3, r3, #2
 8005a0a:	693a      	ldr	r2, [r7, #16]
 8005a0c:	4313      	orrs	r3, r2
 8005a0e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	693a      	ldr	r2, [r7, #16]
 8005a14:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	68fa      	ldr	r2, [r7, #12]
 8005a1a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005a1c:	683b      	ldr	r3, [r7, #0]
 8005a1e:	685a      	ldr	r2, [r3, #4]
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	697a      	ldr	r2, [r7, #20]
 8005a28:	621a      	str	r2, [r3, #32]
}
 8005a2a:	bf00      	nop
 8005a2c:	371c      	adds	r7, #28
 8005a2e:	46bd      	mov	sp, r7
 8005a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a34:	4770      	bx	lr
 8005a36:	bf00      	nop
 8005a38:	feff8fff 	.word	0xfeff8fff
 8005a3c:	40010000 	.word	0x40010000
 8005a40:	40010400 	.word	0x40010400

08005a44 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005a44:	b480      	push	{r7}
 8005a46:	b087      	sub	sp, #28
 8005a48:	af00      	add	r7, sp, #0
 8005a4a:	6078      	str	r0, [r7, #4]
 8005a4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	6a1b      	ldr	r3, [r3, #32]
 8005a52:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	6a1b      	ldr	r3, [r3, #32]
 8005a5e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	685b      	ldr	r3, [r3, #4]
 8005a64:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	69db      	ldr	r3, [r3, #28]
 8005a6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005a6c:	68fa      	ldr	r2, [r7, #12]
 8005a6e:	4b2d      	ldr	r3, [pc, #180]	; (8005b24 <TIM_OC3_SetConfig+0xe0>)
 8005a70:	4013      	ands	r3, r2
 8005a72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	f023 0303 	bic.w	r3, r3, #3
 8005a7a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005a7c:	683b      	ldr	r3, [r7, #0]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	68fa      	ldr	r2, [r7, #12]
 8005a82:	4313      	orrs	r3, r2
 8005a84:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005a86:	697b      	ldr	r3, [r7, #20]
 8005a88:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005a8c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005a8e:	683b      	ldr	r3, [r7, #0]
 8005a90:	689b      	ldr	r3, [r3, #8]
 8005a92:	021b      	lsls	r3, r3, #8
 8005a94:	697a      	ldr	r2, [r7, #20]
 8005a96:	4313      	orrs	r3, r2
 8005a98:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	4a22      	ldr	r2, [pc, #136]	; (8005b28 <TIM_OC3_SetConfig+0xe4>)
 8005a9e:	4293      	cmp	r3, r2
 8005aa0:	d003      	beq.n	8005aaa <TIM_OC3_SetConfig+0x66>
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	4a21      	ldr	r2, [pc, #132]	; (8005b2c <TIM_OC3_SetConfig+0xe8>)
 8005aa6:	4293      	cmp	r3, r2
 8005aa8:	d10d      	bne.n	8005ac6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005aaa:	697b      	ldr	r3, [r7, #20]
 8005aac:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005ab0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005ab2:	683b      	ldr	r3, [r7, #0]
 8005ab4:	68db      	ldr	r3, [r3, #12]
 8005ab6:	021b      	lsls	r3, r3, #8
 8005ab8:	697a      	ldr	r2, [r7, #20]
 8005aba:	4313      	orrs	r3, r2
 8005abc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005abe:	697b      	ldr	r3, [r7, #20]
 8005ac0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005ac4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	4a17      	ldr	r2, [pc, #92]	; (8005b28 <TIM_OC3_SetConfig+0xe4>)
 8005aca:	4293      	cmp	r3, r2
 8005acc:	d003      	beq.n	8005ad6 <TIM_OC3_SetConfig+0x92>
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	4a16      	ldr	r2, [pc, #88]	; (8005b2c <TIM_OC3_SetConfig+0xe8>)
 8005ad2:	4293      	cmp	r3, r2
 8005ad4:	d113      	bne.n	8005afe <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005ad6:	693b      	ldr	r3, [r7, #16]
 8005ad8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005adc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005ade:	693b      	ldr	r3, [r7, #16]
 8005ae0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005ae4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005ae6:	683b      	ldr	r3, [r7, #0]
 8005ae8:	695b      	ldr	r3, [r3, #20]
 8005aea:	011b      	lsls	r3, r3, #4
 8005aec:	693a      	ldr	r2, [r7, #16]
 8005aee:	4313      	orrs	r3, r2
 8005af0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005af2:	683b      	ldr	r3, [r7, #0]
 8005af4:	699b      	ldr	r3, [r3, #24]
 8005af6:	011b      	lsls	r3, r3, #4
 8005af8:	693a      	ldr	r2, [r7, #16]
 8005afa:	4313      	orrs	r3, r2
 8005afc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	693a      	ldr	r2, [r7, #16]
 8005b02:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	68fa      	ldr	r2, [r7, #12]
 8005b08:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005b0a:	683b      	ldr	r3, [r7, #0]
 8005b0c:	685a      	ldr	r2, [r3, #4]
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	697a      	ldr	r2, [r7, #20]
 8005b16:	621a      	str	r2, [r3, #32]
}
 8005b18:	bf00      	nop
 8005b1a:	371c      	adds	r7, #28
 8005b1c:	46bd      	mov	sp, r7
 8005b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b22:	4770      	bx	lr
 8005b24:	fffeff8f 	.word	0xfffeff8f
 8005b28:	40010000 	.word	0x40010000
 8005b2c:	40010400 	.word	0x40010400

08005b30 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005b30:	b480      	push	{r7}
 8005b32:	b087      	sub	sp, #28
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	6078      	str	r0, [r7, #4]
 8005b38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	6a1b      	ldr	r3, [r3, #32]
 8005b3e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	6a1b      	ldr	r3, [r3, #32]
 8005b4a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	685b      	ldr	r3, [r3, #4]
 8005b50:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	69db      	ldr	r3, [r3, #28]
 8005b56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005b58:	68fa      	ldr	r2, [r7, #12]
 8005b5a:	4b1e      	ldr	r3, [pc, #120]	; (8005bd4 <TIM_OC4_SetConfig+0xa4>)
 8005b5c:	4013      	ands	r3, r2
 8005b5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b66:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005b68:	683b      	ldr	r3, [r7, #0]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	021b      	lsls	r3, r3, #8
 8005b6e:	68fa      	ldr	r2, [r7, #12]
 8005b70:	4313      	orrs	r3, r2
 8005b72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005b74:	693b      	ldr	r3, [r7, #16]
 8005b76:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005b7a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005b7c:	683b      	ldr	r3, [r7, #0]
 8005b7e:	689b      	ldr	r3, [r3, #8]
 8005b80:	031b      	lsls	r3, r3, #12
 8005b82:	693a      	ldr	r2, [r7, #16]
 8005b84:	4313      	orrs	r3, r2
 8005b86:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	4a13      	ldr	r2, [pc, #76]	; (8005bd8 <TIM_OC4_SetConfig+0xa8>)
 8005b8c:	4293      	cmp	r3, r2
 8005b8e:	d003      	beq.n	8005b98 <TIM_OC4_SetConfig+0x68>
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	4a12      	ldr	r2, [pc, #72]	; (8005bdc <TIM_OC4_SetConfig+0xac>)
 8005b94:	4293      	cmp	r3, r2
 8005b96:	d109      	bne.n	8005bac <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005b98:	697b      	ldr	r3, [r7, #20]
 8005b9a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005b9e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005ba0:	683b      	ldr	r3, [r7, #0]
 8005ba2:	695b      	ldr	r3, [r3, #20]
 8005ba4:	019b      	lsls	r3, r3, #6
 8005ba6:	697a      	ldr	r2, [r7, #20]
 8005ba8:	4313      	orrs	r3, r2
 8005baa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	697a      	ldr	r2, [r7, #20]
 8005bb0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	68fa      	ldr	r2, [r7, #12]
 8005bb6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005bb8:	683b      	ldr	r3, [r7, #0]
 8005bba:	685a      	ldr	r2, [r3, #4]
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	693a      	ldr	r2, [r7, #16]
 8005bc4:	621a      	str	r2, [r3, #32]
}
 8005bc6:	bf00      	nop
 8005bc8:	371c      	adds	r7, #28
 8005bca:	46bd      	mov	sp, r7
 8005bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd0:	4770      	bx	lr
 8005bd2:	bf00      	nop
 8005bd4:	feff8fff 	.word	0xfeff8fff
 8005bd8:	40010000 	.word	0x40010000
 8005bdc:	40010400 	.word	0x40010400

08005be0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005be0:	b480      	push	{r7}
 8005be2:	b087      	sub	sp, #28
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	6078      	str	r0, [r7, #4]
 8005be8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	6a1b      	ldr	r3, [r3, #32]
 8005bee:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	6a1b      	ldr	r3, [r3, #32]
 8005bfa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	685b      	ldr	r3, [r3, #4]
 8005c00:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005c08:	68fa      	ldr	r2, [r7, #12]
 8005c0a:	4b1b      	ldr	r3, [pc, #108]	; (8005c78 <TIM_OC5_SetConfig+0x98>)
 8005c0c:	4013      	ands	r3, r2
 8005c0e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005c10:	683b      	ldr	r3, [r7, #0]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	68fa      	ldr	r2, [r7, #12]
 8005c16:	4313      	orrs	r3, r2
 8005c18:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005c1a:	693b      	ldr	r3, [r7, #16]
 8005c1c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005c20:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005c22:	683b      	ldr	r3, [r7, #0]
 8005c24:	689b      	ldr	r3, [r3, #8]
 8005c26:	041b      	lsls	r3, r3, #16
 8005c28:	693a      	ldr	r2, [r7, #16]
 8005c2a:	4313      	orrs	r3, r2
 8005c2c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	4a12      	ldr	r2, [pc, #72]	; (8005c7c <TIM_OC5_SetConfig+0x9c>)
 8005c32:	4293      	cmp	r3, r2
 8005c34:	d003      	beq.n	8005c3e <TIM_OC5_SetConfig+0x5e>
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	4a11      	ldr	r2, [pc, #68]	; (8005c80 <TIM_OC5_SetConfig+0xa0>)
 8005c3a:	4293      	cmp	r3, r2
 8005c3c:	d109      	bne.n	8005c52 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005c3e:	697b      	ldr	r3, [r7, #20]
 8005c40:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005c44:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005c46:	683b      	ldr	r3, [r7, #0]
 8005c48:	695b      	ldr	r3, [r3, #20]
 8005c4a:	021b      	lsls	r3, r3, #8
 8005c4c:	697a      	ldr	r2, [r7, #20]
 8005c4e:	4313      	orrs	r3, r2
 8005c50:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	697a      	ldr	r2, [r7, #20]
 8005c56:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	68fa      	ldr	r2, [r7, #12]
 8005c5c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005c5e:	683b      	ldr	r3, [r7, #0]
 8005c60:	685a      	ldr	r2, [r3, #4]
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	693a      	ldr	r2, [r7, #16]
 8005c6a:	621a      	str	r2, [r3, #32]
}
 8005c6c:	bf00      	nop
 8005c6e:	371c      	adds	r7, #28
 8005c70:	46bd      	mov	sp, r7
 8005c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c76:	4770      	bx	lr
 8005c78:	fffeff8f 	.word	0xfffeff8f
 8005c7c:	40010000 	.word	0x40010000
 8005c80:	40010400 	.word	0x40010400

08005c84 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005c84:	b480      	push	{r7}
 8005c86:	b087      	sub	sp, #28
 8005c88:	af00      	add	r7, sp, #0
 8005c8a:	6078      	str	r0, [r7, #4]
 8005c8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	6a1b      	ldr	r3, [r3, #32]
 8005c92:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	6a1b      	ldr	r3, [r3, #32]
 8005c9e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	685b      	ldr	r3, [r3, #4]
 8005ca4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005caa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005cac:	68fa      	ldr	r2, [r7, #12]
 8005cae:	4b1c      	ldr	r3, [pc, #112]	; (8005d20 <TIM_OC6_SetConfig+0x9c>)
 8005cb0:	4013      	ands	r3, r2
 8005cb2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005cb4:	683b      	ldr	r3, [r7, #0]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	021b      	lsls	r3, r3, #8
 8005cba:	68fa      	ldr	r2, [r7, #12]
 8005cbc:	4313      	orrs	r3, r2
 8005cbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005cc0:	693b      	ldr	r3, [r7, #16]
 8005cc2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005cc6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005cc8:	683b      	ldr	r3, [r7, #0]
 8005cca:	689b      	ldr	r3, [r3, #8]
 8005ccc:	051b      	lsls	r3, r3, #20
 8005cce:	693a      	ldr	r2, [r7, #16]
 8005cd0:	4313      	orrs	r3, r2
 8005cd2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	4a13      	ldr	r2, [pc, #76]	; (8005d24 <TIM_OC6_SetConfig+0xa0>)
 8005cd8:	4293      	cmp	r3, r2
 8005cda:	d003      	beq.n	8005ce4 <TIM_OC6_SetConfig+0x60>
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	4a12      	ldr	r2, [pc, #72]	; (8005d28 <TIM_OC6_SetConfig+0xa4>)
 8005ce0:	4293      	cmp	r3, r2
 8005ce2:	d109      	bne.n	8005cf8 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005ce4:	697b      	ldr	r3, [r7, #20]
 8005ce6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005cea:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005cec:	683b      	ldr	r3, [r7, #0]
 8005cee:	695b      	ldr	r3, [r3, #20]
 8005cf0:	029b      	lsls	r3, r3, #10
 8005cf2:	697a      	ldr	r2, [r7, #20]
 8005cf4:	4313      	orrs	r3, r2
 8005cf6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	697a      	ldr	r2, [r7, #20]
 8005cfc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	68fa      	ldr	r2, [r7, #12]
 8005d02:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005d04:	683b      	ldr	r3, [r7, #0]
 8005d06:	685a      	ldr	r2, [r3, #4]
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	693a      	ldr	r2, [r7, #16]
 8005d10:	621a      	str	r2, [r3, #32]
}
 8005d12:	bf00      	nop
 8005d14:	371c      	adds	r7, #28
 8005d16:	46bd      	mov	sp, r7
 8005d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d1c:	4770      	bx	lr
 8005d1e:	bf00      	nop
 8005d20:	feff8fff 	.word	0xfeff8fff
 8005d24:	40010000 	.word	0x40010000
 8005d28:	40010400 	.word	0x40010400

08005d2c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005d2c:	b480      	push	{r7}
 8005d2e:	b087      	sub	sp, #28
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	60f8      	str	r0, [r7, #12]
 8005d34:	60b9      	str	r1, [r7, #8]
 8005d36:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	6a1b      	ldr	r3, [r3, #32]
 8005d3c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	6a1b      	ldr	r3, [r3, #32]
 8005d42:	f023 0201 	bic.w	r2, r3, #1
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	699b      	ldr	r3, [r3, #24]
 8005d4e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005d50:	693b      	ldr	r3, [r7, #16]
 8005d52:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005d56:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	011b      	lsls	r3, r3, #4
 8005d5c:	693a      	ldr	r2, [r7, #16]
 8005d5e:	4313      	orrs	r3, r2
 8005d60:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005d62:	697b      	ldr	r3, [r7, #20]
 8005d64:	f023 030a 	bic.w	r3, r3, #10
 8005d68:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005d6a:	697a      	ldr	r2, [r7, #20]
 8005d6c:	68bb      	ldr	r3, [r7, #8]
 8005d6e:	4313      	orrs	r3, r2
 8005d70:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	693a      	ldr	r2, [r7, #16]
 8005d76:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	697a      	ldr	r2, [r7, #20]
 8005d7c:	621a      	str	r2, [r3, #32]
}
 8005d7e:	bf00      	nop
 8005d80:	371c      	adds	r7, #28
 8005d82:	46bd      	mov	sp, r7
 8005d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d88:	4770      	bx	lr

08005d8a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005d8a:	b480      	push	{r7}
 8005d8c:	b087      	sub	sp, #28
 8005d8e:	af00      	add	r7, sp, #0
 8005d90:	60f8      	str	r0, [r7, #12]
 8005d92:	60b9      	str	r1, [r7, #8]
 8005d94:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	6a1b      	ldr	r3, [r3, #32]
 8005d9a:	f023 0210 	bic.w	r2, r3, #16
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	699b      	ldr	r3, [r3, #24]
 8005da6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	6a1b      	ldr	r3, [r3, #32]
 8005dac:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005dae:	697b      	ldr	r3, [r7, #20]
 8005db0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005db4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	031b      	lsls	r3, r3, #12
 8005dba:	697a      	ldr	r2, [r7, #20]
 8005dbc:	4313      	orrs	r3, r2
 8005dbe:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005dc0:	693b      	ldr	r3, [r7, #16]
 8005dc2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005dc6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005dc8:	68bb      	ldr	r3, [r7, #8]
 8005dca:	011b      	lsls	r3, r3, #4
 8005dcc:	693a      	ldr	r2, [r7, #16]
 8005dce:	4313      	orrs	r3, r2
 8005dd0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	697a      	ldr	r2, [r7, #20]
 8005dd6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	693a      	ldr	r2, [r7, #16]
 8005ddc:	621a      	str	r2, [r3, #32]
}
 8005dde:	bf00      	nop
 8005de0:	371c      	adds	r7, #28
 8005de2:	46bd      	mov	sp, r7
 8005de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de8:	4770      	bx	lr

08005dea <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005dea:	b480      	push	{r7}
 8005dec:	b085      	sub	sp, #20
 8005dee:	af00      	add	r7, sp, #0
 8005df0:	6078      	str	r0, [r7, #4]
 8005df2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	689b      	ldr	r3, [r3, #8]
 8005df8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e00:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005e02:	683a      	ldr	r2, [r7, #0]
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	4313      	orrs	r3, r2
 8005e08:	f043 0307 	orr.w	r3, r3, #7
 8005e0c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	68fa      	ldr	r2, [r7, #12]
 8005e12:	609a      	str	r2, [r3, #8]
}
 8005e14:	bf00      	nop
 8005e16:	3714      	adds	r7, #20
 8005e18:	46bd      	mov	sp, r7
 8005e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e1e:	4770      	bx	lr

08005e20 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005e20:	b480      	push	{r7}
 8005e22:	b087      	sub	sp, #28
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	60f8      	str	r0, [r7, #12]
 8005e28:	60b9      	str	r1, [r7, #8]
 8005e2a:	607a      	str	r2, [r7, #4]
 8005e2c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	689b      	ldr	r3, [r3, #8]
 8005e32:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005e34:	697b      	ldr	r3, [r7, #20]
 8005e36:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005e3a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005e3c:	683b      	ldr	r3, [r7, #0]
 8005e3e:	021a      	lsls	r2, r3, #8
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	431a      	orrs	r2, r3
 8005e44:	68bb      	ldr	r3, [r7, #8]
 8005e46:	4313      	orrs	r3, r2
 8005e48:	697a      	ldr	r2, [r7, #20]
 8005e4a:	4313      	orrs	r3, r2
 8005e4c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	697a      	ldr	r2, [r7, #20]
 8005e52:	609a      	str	r2, [r3, #8]
}
 8005e54:	bf00      	nop
 8005e56:	371c      	adds	r7, #28
 8005e58:	46bd      	mov	sp, r7
 8005e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e5e:	4770      	bx	lr

08005e60 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005e60:	b480      	push	{r7}
 8005e62:	b087      	sub	sp, #28
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	60f8      	str	r0, [r7, #12]
 8005e68:	60b9      	str	r1, [r7, #8]
 8005e6a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005e6c:	68bb      	ldr	r3, [r7, #8]
 8005e6e:	f003 031f 	and.w	r3, r3, #31
 8005e72:	2201      	movs	r2, #1
 8005e74:	fa02 f303 	lsl.w	r3, r2, r3
 8005e78:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	6a1a      	ldr	r2, [r3, #32]
 8005e7e:	697b      	ldr	r3, [r7, #20]
 8005e80:	43db      	mvns	r3, r3
 8005e82:	401a      	ands	r2, r3
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	6a1a      	ldr	r2, [r3, #32]
 8005e8c:	68bb      	ldr	r3, [r7, #8]
 8005e8e:	f003 031f 	and.w	r3, r3, #31
 8005e92:	6879      	ldr	r1, [r7, #4]
 8005e94:	fa01 f303 	lsl.w	r3, r1, r3
 8005e98:	431a      	orrs	r2, r3
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	621a      	str	r2, [r3, #32]
}
 8005e9e:	bf00      	nop
 8005ea0:	371c      	adds	r7, #28
 8005ea2:	46bd      	mov	sp, r7
 8005ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea8:	4770      	bx	lr
	...

08005eac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005eac:	b480      	push	{r7}
 8005eae:	b085      	sub	sp, #20
 8005eb0:	af00      	add	r7, sp, #0
 8005eb2:	6078      	str	r0, [r7, #4]
 8005eb4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ebc:	2b01      	cmp	r3, #1
 8005ebe:	d101      	bne.n	8005ec4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005ec0:	2302      	movs	r3, #2
 8005ec2:	e06d      	b.n	8005fa0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	2201      	movs	r2, #1
 8005ec8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	2202      	movs	r2, #2
 8005ed0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	685b      	ldr	r3, [r3, #4]
 8005eda:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	689b      	ldr	r3, [r3, #8]
 8005ee2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	4a30      	ldr	r2, [pc, #192]	; (8005fac <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005eea:	4293      	cmp	r3, r2
 8005eec:	d004      	beq.n	8005ef8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	4a2f      	ldr	r2, [pc, #188]	; (8005fb0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005ef4:	4293      	cmp	r3, r2
 8005ef6:	d108      	bne.n	8005f0a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005efe:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005f00:	683b      	ldr	r3, [r7, #0]
 8005f02:	685b      	ldr	r3, [r3, #4]
 8005f04:	68fa      	ldr	r2, [r7, #12]
 8005f06:	4313      	orrs	r3, r2
 8005f08:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f10:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005f12:	683b      	ldr	r3, [r7, #0]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	68fa      	ldr	r2, [r7, #12]
 8005f18:	4313      	orrs	r3, r2
 8005f1a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	68fa      	ldr	r2, [r7, #12]
 8005f22:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	4a20      	ldr	r2, [pc, #128]	; (8005fac <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005f2a:	4293      	cmp	r3, r2
 8005f2c:	d022      	beq.n	8005f74 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f36:	d01d      	beq.n	8005f74 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	4a1d      	ldr	r2, [pc, #116]	; (8005fb4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005f3e:	4293      	cmp	r3, r2
 8005f40:	d018      	beq.n	8005f74 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	4a1c      	ldr	r2, [pc, #112]	; (8005fb8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005f48:	4293      	cmp	r3, r2
 8005f4a:	d013      	beq.n	8005f74 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	4a1a      	ldr	r2, [pc, #104]	; (8005fbc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005f52:	4293      	cmp	r3, r2
 8005f54:	d00e      	beq.n	8005f74 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	4a15      	ldr	r2, [pc, #84]	; (8005fb0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005f5c:	4293      	cmp	r3, r2
 8005f5e:	d009      	beq.n	8005f74 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	4a16      	ldr	r2, [pc, #88]	; (8005fc0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005f66:	4293      	cmp	r3, r2
 8005f68:	d004      	beq.n	8005f74 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	4a15      	ldr	r2, [pc, #84]	; (8005fc4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005f70:	4293      	cmp	r3, r2
 8005f72:	d10c      	bne.n	8005f8e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005f74:	68bb      	ldr	r3, [r7, #8]
 8005f76:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005f7a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005f7c:	683b      	ldr	r3, [r7, #0]
 8005f7e:	689b      	ldr	r3, [r3, #8]
 8005f80:	68ba      	ldr	r2, [r7, #8]
 8005f82:	4313      	orrs	r3, r2
 8005f84:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	68ba      	ldr	r2, [r7, #8]
 8005f8c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	2201      	movs	r2, #1
 8005f92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	2200      	movs	r2, #0
 8005f9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005f9e:	2300      	movs	r3, #0
}
 8005fa0:	4618      	mov	r0, r3
 8005fa2:	3714      	adds	r7, #20
 8005fa4:	46bd      	mov	sp, r7
 8005fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005faa:	4770      	bx	lr
 8005fac:	40010000 	.word	0x40010000
 8005fb0:	40010400 	.word	0x40010400
 8005fb4:	40000400 	.word	0x40000400
 8005fb8:	40000800 	.word	0x40000800
 8005fbc:	40000c00 	.word	0x40000c00
 8005fc0:	40014000 	.word	0x40014000
 8005fc4:	40001800 	.word	0x40001800

08005fc8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005fc8:	b580      	push	{r7, lr}
 8005fca:	b082      	sub	sp, #8
 8005fcc:	af00      	add	r7, sp, #0
 8005fce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d101      	bne.n	8005fda <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005fd6:	2301      	movs	r3, #1
 8005fd8:	e040      	b.n	800605c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d106      	bne.n	8005ff0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	2200      	movs	r2, #0
 8005fe6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005fea:	6878      	ldr	r0, [r7, #4]
 8005fec:	f7fb fe98 	bl	8001d20 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	2224      	movs	r2, #36	; 0x24
 8005ff4:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	681a      	ldr	r2, [r3, #0]
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	f022 0201 	bic.w	r2, r2, #1
 8006004:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006006:	6878      	ldr	r0, [r7, #4]
 8006008:	f000 f8b0 	bl	800616c <UART_SetConfig>
 800600c:	4603      	mov	r3, r0
 800600e:	2b01      	cmp	r3, #1
 8006010:	d101      	bne.n	8006016 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8006012:	2301      	movs	r3, #1
 8006014:	e022      	b.n	800605c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800601a:	2b00      	cmp	r3, #0
 800601c:	d002      	beq.n	8006024 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800601e:	6878      	ldr	r0, [r7, #4]
 8006020:	f000 fb08 	bl	8006634 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	685a      	ldr	r2, [r3, #4]
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006032:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	689a      	ldr	r2, [r3, #8]
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006042:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	681a      	ldr	r2, [r3, #0]
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	f042 0201 	orr.w	r2, r2, #1
 8006052:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006054:	6878      	ldr	r0, [r7, #4]
 8006056:	f000 fb8f 	bl	8006778 <UART_CheckIdleState>
 800605a:	4603      	mov	r3, r0
}
 800605c:	4618      	mov	r0, r3
 800605e:	3708      	adds	r7, #8
 8006060:	46bd      	mov	sp, r7
 8006062:	bd80      	pop	{r7, pc}

08006064 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006064:	b580      	push	{r7, lr}
 8006066:	b08a      	sub	sp, #40	; 0x28
 8006068:	af02      	add	r7, sp, #8
 800606a:	60f8      	str	r0, [r7, #12]
 800606c:	60b9      	str	r1, [r7, #8]
 800606e:	603b      	str	r3, [r7, #0]
 8006070:	4613      	mov	r3, r2
 8006072:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006078:	2b20      	cmp	r3, #32
 800607a:	d171      	bne.n	8006160 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 800607c:	68bb      	ldr	r3, [r7, #8]
 800607e:	2b00      	cmp	r3, #0
 8006080:	d002      	beq.n	8006088 <HAL_UART_Transmit+0x24>
 8006082:	88fb      	ldrh	r3, [r7, #6]
 8006084:	2b00      	cmp	r3, #0
 8006086:	d101      	bne.n	800608c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8006088:	2301      	movs	r3, #1
 800608a:	e06a      	b.n	8006162 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	2200      	movs	r2, #0
 8006090:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	2221      	movs	r2, #33	; 0x21
 8006098:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800609a:	f7fc f809 	bl	80020b0 <HAL_GetTick>
 800609e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	88fa      	ldrh	r2, [r7, #6]
 80060a4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	88fa      	ldrh	r2, [r7, #6]
 80060ac:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	689b      	ldr	r3, [r3, #8]
 80060b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80060b8:	d108      	bne.n	80060cc <HAL_UART_Transmit+0x68>
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	691b      	ldr	r3, [r3, #16]
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d104      	bne.n	80060cc <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80060c2:	2300      	movs	r3, #0
 80060c4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80060c6:	68bb      	ldr	r3, [r7, #8]
 80060c8:	61bb      	str	r3, [r7, #24]
 80060ca:	e003      	b.n	80060d4 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80060cc:	68bb      	ldr	r3, [r7, #8]
 80060ce:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80060d0:	2300      	movs	r3, #0
 80060d2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80060d4:	e02c      	b.n	8006130 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80060d6:	683b      	ldr	r3, [r7, #0]
 80060d8:	9300      	str	r3, [sp, #0]
 80060da:	697b      	ldr	r3, [r7, #20]
 80060dc:	2200      	movs	r2, #0
 80060de:	2180      	movs	r1, #128	; 0x80
 80060e0:	68f8      	ldr	r0, [r7, #12]
 80060e2:	f000 fb80 	bl	80067e6 <UART_WaitOnFlagUntilTimeout>
 80060e6:	4603      	mov	r3, r0
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d001      	beq.n	80060f0 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 80060ec:	2303      	movs	r3, #3
 80060ee:	e038      	b.n	8006162 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80060f0:	69fb      	ldr	r3, [r7, #28]
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d10b      	bne.n	800610e <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80060f6:	69bb      	ldr	r3, [r7, #24]
 80060f8:	881b      	ldrh	r3, [r3, #0]
 80060fa:	461a      	mov	r2, r3
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006104:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006106:	69bb      	ldr	r3, [r7, #24]
 8006108:	3302      	adds	r3, #2
 800610a:	61bb      	str	r3, [r7, #24]
 800610c:	e007      	b.n	800611e <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800610e:	69fb      	ldr	r3, [r7, #28]
 8006110:	781a      	ldrb	r2, [r3, #0]
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006118:	69fb      	ldr	r3, [r7, #28]
 800611a:	3301      	adds	r3, #1
 800611c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006124:	b29b      	uxth	r3, r3
 8006126:	3b01      	subs	r3, #1
 8006128:	b29a      	uxth	r2, r3
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006136:	b29b      	uxth	r3, r3
 8006138:	2b00      	cmp	r3, #0
 800613a:	d1cc      	bne.n	80060d6 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800613c:	683b      	ldr	r3, [r7, #0]
 800613e:	9300      	str	r3, [sp, #0]
 8006140:	697b      	ldr	r3, [r7, #20]
 8006142:	2200      	movs	r2, #0
 8006144:	2140      	movs	r1, #64	; 0x40
 8006146:	68f8      	ldr	r0, [r7, #12]
 8006148:	f000 fb4d 	bl	80067e6 <UART_WaitOnFlagUntilTimeout>
 800614c:	4603      	mov	r3, r0
 800614e:	2b00      	cmp	r3, #0
 8006150:	d001      	beq.n	8006156 <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 8006152:	2303      	movs	r3, #3
 8006154:	e005      	b.n	8006162 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	2220      	movs	r2, #32
 800615a:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800615c:	2300      	movs	r3, #0
 800615e:	e000      	b.n	8006162 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8006160:	2302      	movs	r3, #2
  }
}
 8006162:	4618      	mov	r0, r3
 8006164:	3720      	adds	r7, #32
 8006166:	46bd      	mov	sp, r7
 8006168:	bd80      	pop	{r7, pc}
	...

0800616c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800616c:	b580      	push	{r7, lr}
 800616e:	b088      	sub	sp, #32
 8006170:	af00      	add	r7, sp, #0
 8006172:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006174:	2300      	movs	r3, #0
 8006176:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	689a      	ldr	r2, [r3, #8]
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	691b      	ldr	r3, [r3, #16]
 8006180:	431a      	orrs	r2, r3
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	695b      	ldr	r3, [r3, #20]
 8006186:	431a      	orrs	r2, r3
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	69db      	ldr	r3, [r3, #28]
 800618c:	4313      	orrs	r3, r2
 800618e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	681a      	ldr	r2, [r3, #0]
 8006196:	4ba6      	ldr	r3, [pc, #664]	; (8006430 <UART_SetConfig+0x2c4>)
 8006198:	4013      	ands	r3, r2
 800619a:	687a      	ldr	r2, [r7, #4]
 800619c:	6812      	ldr	r2, [r2, #0]
 800619e:	6979      	ldr	r1, [r7, #20]
 80061a0:	430b      	orrs	r3, r1
 80061a2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	685b      	ldr	r3, [r3, #4]
 80061aa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	68da      	ldr	r2, [r3, #12]
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	430a      	orrs	r2, r1
 80061b8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	699b      	ldr	r3, [r3, #24]
 80061be:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	6a1b      	ldr	r3, [r3, #32]
 80061c4:	697a      	ldr	r2, [r7, #20]
 80061c6:	4313      	orrs	r3, r2
 80061c8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	689b      	ldr	r3, [r3, #8]
 80061d0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	697a      	ldr	r2, [r7, #20]
 80061da:	430a      	orrs	r2, r1
 80061dc:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	4a94      	ldr	r2, [pc, #592]	; (8006434 <UART_SetConfig+0x2c8>)
 80061e4:	4293      	cmp	r3, r2
 80061e6:	d120      	bne.n	800622a <UART_SetConfig+0xbe>
 80061e8:	4b93      	ldr	r3, [pc, #588]	; (8006438 <UART_SetConfig+0x2cc>)
 80061ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061ee:	f003 0303 	and.w	r3, r3, #3
 80061f2:	2b03      	cmp	r3, #3
 80061f4:	d816      	bhi.n	8006224 <UART_SetConfig+0xb8>
 80061f6:	a201      	add	r2, pc, #4	; (adr r2, 80061fc <UART_SetConfig+0x90>)
 80061f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061fc:	0800620d 	.word	0x0800620d
 8006200:	08006219 	.word	0x08006219
 8006204:	08006213 	.word	0x08006213
 8006208:	0800621f 	.word	0x0800621f
 800620c:	2301      	movs	r3, #1
 800620e:	77fb      	strb	r3, [r7, #31]
 8006210:	e150      	b.n	80064b4 <UART_SetConfig+0x348>
 8006212:	2302      	movs	r3, #2
 8006214:	77fb      	strb	r3, [r7, #31]
 8006216:	e14d      	b.n	80064b4 <UART_SetConfig+0x348>
 8006218:	2304      	movs	r3, #4
 800621a:	77fb      	strb	r3, [r7, #31]
 800621c:	e14a      	b.n	80064b4 <UART_SetConfig+0x348>
 800621e:	2308      	movs	r3, #8
 8006220:	77fb      	strb	r3, [r7, #31]
 8006222:	e147      	b.n	80064b4 <UART_SetConfig+0x348>
 8006224:	2310      	movs	r3, #16
 8006226:	77fb      	strb	r3, [r7, #31]
 8006228:	e144      	b.n	80064b4 <UART_SetConfig+0x348>
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	4a83      	ldr	r2, [pc, #524]	; (800643c <UART_SetConfig+0x2d0>)
 8006230:	4293      	cmp	r3, r2
 8006232:	d132      	bne.n	800629a <UART_SetConfig+0x12e>
 8006234:	4b80      	ldr	r3, [pc, #512]	; (8006438 <UART_SetConfig+0x2cc>)
 8006236:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800623a:	f003 030c 	and.w	r3, r3, #12
 800623e:	2b0c      	cmp	r3, #12
 8006240:	d828      	bhi.n	8006294 <UART_SetConfig+0x128>
 8006242:	a201      	add	r2, pc, #4	; (adr r2, 8006248 <UART_SetConfig+0xdc>)
 8006244:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006248:	0800627d 	.word	0x0800627d
 800624c:	08006295 	.word	0x08006295
 8006250:	08006295 	.word	0x08006295
 8006254:	08006295 	.word	0x08006295
 8006258:	08006289 	.word	0x08006289
 800625c:	08006295 	.word	0x08006295
 8006260:	08006295 	.word	0x08006295
 8006264:	08006295 	.word	0x08006295
 8006268:	08006283 	.word	0x08006283
 800626c:	08006295 	.word	0x08006295
 8006270:	08006295 	.word	0x08006295
 8006274:	08006295 	.word	0x08006295
 8006278:	0800628f 	.word	0x0800628f
 800627c:	2300      	movs	r3, #0
 800627e:	77fb      	strb	r3, [r7, #31]
 8006280:	e118      	b.n	80064b4 <UART_SetConfig+0x348>
 8006282:	2302      	movs	r3, #2
 8006284:	77fb      	strb	r3, [r7, #31]
 8006286:	e115      	b.n	80064b4 <UART_SetConfig+0x348>
 8006288:	2304      	movs	r3, #4
 800628a:	77fb      	strb	r3, [r7, #31]
 800628c:	e112      	b.n	80064b4 <UART_SetConfig+0x348>
 800628e:	2308      	movs	r3, #8
 8006290:	77fb      	strb	r3, [r7, #31]
 8006292:	e10f      	b.n	80064b4 <UART_SetConfig+0x348>
 8006294:	2310      	movs	r3, #16
 8006296:	77fb      	strb	r3, [r7, #31]
 8006298:	e10c      	b.n	80064b4 <UART_SetConfig+0x348>
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	4a68      	ldr	r2, [pc, #416]	; (8006440 <UART_SetConfig+0x2d4>)
 80062a0:	4293      	cmp	r3, r2
 80062a2:	d120      	bne.n	80062e6 <UART_SetConfig+0x17a>
 80062a4:	4b64      	ldr	r3, [pc, #400]	; (8006438 <UART_SetConfig+0x2cc>)
 80062a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062aa:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80062ae:	2b30      	cmp	r3, #48	; 0x30
 80062b0:	d013      	beq.n	80062da <UART_SetConfig+0x16e>
 80062b2:	2b30      	cmp	r3, #48	; 0x30
 80062b4:	d814      	bhi.n	80062e0 <UART_SetConfig+0x174>
 80062b6:	2b20      	cmp	r3, #32
 80062b8:	d009      	beq.n	80062ce <UART_SetConfig+0x162>
 80062ba:	2b20      	cmp	r3, #32
 80062bc:	d810      	bhi.n	80062e0 <UART_SetConfig+0x174>
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d002      	beq.n	80062c8 <UART_SetConfig+0x15c>
 80062c2:	2b10      	cmp	r3, #16
 80062c4:	d006      	beq.n	80062d4 <UART_SetConfig+0x168>
 80062c6:	e00b      	b.n	80062e0 <UART_SetConfig+0x174>
 80062c8:	2300      	movs	r3, #0
 80062ca:	77fb      	strb	r3, [r7, #31]
 80062cc:	e0f2      	b.n	80064b4 <UART_SetConfig+0x348>
 80062ce:	2302      	movs	r3, #2
 80062d0:	77fb      	strb	r3, [r7, #31]
 80062d2:	e0ef      	b.n	80064b4 <UART_SetConfig+0x348>
 80062d4:	2304      	movs	r3, #4
 80062d6:	77fb      	strb	r3, [r7, #31]
 80062d8:	e0ec      	b.n	80064b4 <UART_SetConfig+0x348>
 80062da:	2308      	movs	r3, #8
 80062dc:	77fb      	strb	r3, [r7, #31]
 80062de:	e0e9      	b.n	80064b4 <UART_SetConfig+0x348>
 80062e0:	2310      	movs	r3, #16
 80062e2:	77fb      	strb	r3, [r7, #31]
 80062e4:	e0e6      	b.n	80064b4 <UART_SetConfig+0x348>
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	4a56      	ldr	r2, [pc, #344]	; (8006444 <UART_SetConfig+0x2d8>)
 80062ec:	4293      	cmp	r3, r2
 80062ee:	d120      	bne.n	8006332 <UART_SetConfig+0x1c6>
 80062f0:	4b51      	ldr	r3, [pc, #324]	; (8006438 <UART_SetConfig+0x2cc>)
 80062f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062f6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80062fa:	2bc0      	cmp	r3, #192	; 0xc0
 80062fc:	d013      	beq.n	8006326 <UART_SetConfig+0x1ba>
 80062fe:	2bc0      	cmp	r3, #192	; 0xc0
 8006300:	d814      	bhi.n	800632c <UART_SetConfig+0x1c0>
 8006302:	2b80      	cmp	r3, #128	; 0x80
 8006304:	d009      	beq.n	800631a <UART_SetConfig+0x1ae>
 8006306:	2b80      	cmp	r3, #128	; 0x80
 8006308:	d810      	bhi.n	800632c <UART_SetConfig+0x1c0>
 800630a:	2b00      	cmp	r3, #0
 800630c:	d002      	beq.n	8006314 <UART_SetConfig+0x1a8>
 800630e:	2b40      	cmp	r3, #64	; 0x40
 8006310:	d006      	beq.n	8006320 <UART_SetConfig+0x1b4>
 8006312:	e00b      	b.n	800632c <UART_SetConfig+0x1c0>
 8006314:	2300      	movs	r3, #0
 8006316:	77fb      	strb	r3, [r7, #31]
 8006318:	e0cc      	b.n	80064b4 <UART_SetConfig+0x348>
 800631a:	2302      	movs	r3, #2
 800631c:	77fb      	strb	r3, [r7, #31]
 800631e:	e0c9      	b.n	80064b4 <UART_SetConfig+0x348>
 8006320:	2304      	movs	r3, #4
 8006322:	77fb      	strb	r3, [r7, #31]
 8006324:	e0c6      	b.n	80064b4 <UART_SetConfig+0x348>
 8006326:	2308      	movs	r3, #8
 8006328:	77fb      	strb	r3, [r7, #31]
 800632a:	e0c3      	b.n	80064b4 <UART_SetConfig+0x348>
 800632c:	2310      	movs	r3, #16
 800632e:	77fb      	strb	r3, [r7, #31]
 8006330:	e0c0      	b.n	80064b4 <UART_SetConfig+0x348>
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	4a44      	ldr	r2, [pc, #272]	; (8006448 <UART_SetConfig+0x2dc>)
 8006338:	4293      	cmp	r3, r2
 800633a:	d125      	bne.n	8006388 <UART_SetConfig+0x21c>
 800633c:	4b3e      	ldr	r3, [pc, #248]	; (8006438 <UART_SetConfig+0x2cc>)
 800633e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006342:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006346:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800634a:	d017      	beq.n	800637c <UART_SetConfig+0x210>
 800634c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006350:	d817      	bhi.n	8006382 <UART_SetConfig+0x216>
 8006352:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006356:	d00b      	beq.n	8006370 <UART_SetConfig+0x204>
 8006358:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800635c:	d811      	bhi.n	8006382 <UART_SetConfig+0x216>
 800635e:	2b00      	cmp	r3, #0
 8006360:	d003      	beq.n	800636a <UART_SetConfig+0x1fe>
 8006362:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006366:	d006      	beq.n	8006376 <UART_SetConfig+0x20a>
 8006368:	e00b      	b.n	8006382 <UART_SetConfig+0x216>
 800636a:	2300      	movs	r3, #0
 800636c:	77fb      	strb	r3, [r7, #31]
 800636e:	e0a1      	b.n	80064b4 <UART_SetConfig+0x348>
 8006370:	2302      	movs	r3, #2
 8006372:	77fb      	strb	r3, [r7, #31]
 8006374:	e09e      	b.n	80064b4 <UART_SetConfig+0x348>
 8006376:	2304      	movs	r3, #4
 8006378:	77fb      	strb	r3, [r7, #31]
 800637a:	e09b      	b.n	80064b4 <UART_SetConfig+0x348>
 800637c:	2308      	movs	r3, #8
 800637e:	77fb      	strb	r3, [r7, #31]
 8006380:	e098      	b.n	80064b4 <UART_SetConfig+0x348>
 8006382:	2310      	movs	r3, #16
 8006384:	77fb      	strb	r3, [r7, #31]
 8006386:	e095      	b.n	80064b4 <UART_SetConfig+0x348>
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	4a2f      	ldr	r2, [pc, #188]	; (800644c <UART_SetConfig+0x2e0>)
 800638e:	4293      	cmp	r3, r2
 8006390:	d125      	bne.n	80063de <UART_SetConfig+0x272>
 8006392:	4b29      	ldr	r3, [pc, #164]	; (8006438 <UART_SetConfig+0x2cc>)
 8006394:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006398:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800639c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80063a0:	d017      	beq.n	80063d2 <UART_SetConfig+0x266>
 80063a2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80063a6:	d817      	bhi.n	80063d8 <UART_SetConfig+0x26c>
 80063a8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80063ac:	d00b      	beq.n	80063c6 <UART_SetConfig+0x25a>
 80063ae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80063b2:	d811      	bhi.n	80063d8 <UART_SetConfig+0x26c>
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d003      	beq.n	80063c0 <UART_SetConfig+0x254>
 80063b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80063bc:	d006      	beq.n	80063cc <UART_SetConfig+0x260>
 80063be:	e00b      	b.n	80063d8 <UART_SetConfig+0x26c>
 80063c0:	2301      	movs	r3, #1
 80063c2:	77fb      	strb	r3, [r7, #31]
 80063c4:	e076      	b.n	80064b4 <UART_SetConfig+0x348>
 80063c6:	2302      	movs	r3, #2
 80063c8:	77fb      	strb	r3, [r7, #31]
 80063ca:	e073      	b.n	80064b4 <UART_SetConfig+0x348>
 80063cc:	2304      	movs	r3, #4
 80063ce:	77fb      	strb	r3, [r7, #31]
 80063d0:	e070      	b.n	80064b4 <UART_SetConfig+0x348>
 80063d2:	2308      	movs	r3, #8
 80063d4:	77fb      	strb	r3, [r7, #31]
 80063d6:	e06d      	b.n	80064b4 <UART_SetConfig+0x348>
 80063d8:	2310      	movs	r3, #16
 80063da:	77fb      	strb	r3, [r7, #31]
 80063dc:	e06a      	b.n	80064b4 <UART_SetConfig+0x348>
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	4a1b      	ldr	r2, [pc, #108]	; (8006450 <UART_SetConfig+0x2e4>)
 80063e4:	4293      	cmp	r3, r2
 80063e6:	d138      	bne.n	800645a <UART_SetConfig+0x2ee>
 80063e8:	4b13      	ldr	r3, [pc, #76]	; (8006438 <UART_SetConfig+0x2cc>)
 80063ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063ee:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80063f2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80063f6:	d017      	beq.n	8006428 <UART_SetConfig+0x2bc>
 80063f8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80063fc:	d82a      	bhi.n	8006454 <UART_SetConfig+0x2e8>
 80063fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006402:	d00b      	beq.n	800641c <UART_SetConfig+0x2b0>
 8006404:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006408:	d824      	bhi.n	8006454 <UART_SetConfig+0x2e8>
 800640a:	2b00      	cmp	r3, #0
 800640c:	d003      	beq.n	8006416 <UART_SetConfig+0x2aa>
 800640e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006412:	d006      	beq.n	8006422 <UART_SetConfig+0x2b6>
 8006414:	e01e      	b.n	8006454 <UART_SetConfig+0x2e8>
 8006416:	2300      	movs	r3, #0
 8006418:	77fb      	strb	r3, [r7, #31]
 800641a:	e04b      	b.n	80064b4 <UART_SetConfig+0x348>
 800641c:	2302      	movs	r3, #2
 800641e:	77fb      	strb	r3, [r7, #31]
 8006420:	e048      	b.n	80064b4 <UART_SetConfig+0x348>
 8006422:	2304      	movs	r3, #4
 8006424:	77fb      	strb	r3, [r7, #31]
 8006426:	e045      	b.n	80064b4 <UART_SetConfig+0x348>
 8006428:	2308      	movs	r3, #8
 800642a:	77fb      	strb	r3, [r7, #31]
 800642c:	e042      	b.n	80064b4 <UART_SetConfig+0x348>
 800642e:	bf00      	nop
 8006430:	efff69f3 	.word	0xefff69f3
 8006434:	40011000 	.word	0x40011000
 8006438:	40023800 	.word	0x40023800
 800643c:	40004400 	.word	0x40004400
 8006440:	40004800 	.word	0x40004800
 8006444:	40004c00 	.word	0x40004c00
 8006448:	40005000 	.word	0x40005000
 800644c:	40011400 	.word	0x40011400
 8006450:	40007800 	.word	0x40007800
 8006454:	2310      	movs	r3, #16
 8006456:	77fb      	strb	r3, [r7, #31]
 8006458:	e02c      	b.n	80064b4 <UART_SetConfig+0x348>
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	4a72      	ldr	r2, [pc, #456]	; (8006628 <UART_SetConfig+0x4bc>)
 8006460:	4293      	cmp	r3, r2
 8006462:	d125      	bne.n	80064b0 <UART_SetConfig+0x344>
 8006464:	4b71      	ldr	r3, [pc, #452]	; (800662c <UART_SetConfig+0x4c0>)
 8006466:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800646a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800646e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006472:	d017      	beq.n	80064a4 <UART_SetConfig+0x338>
 8006474:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006478:	d817      	bhi.n	80064aa <UART_SetConfig+0x33e>
 800647a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800647e:	d00b      	beq.n	8006498 <UART_SetConfig+0x32c>
 8006480:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006484:	d811      	bhi.n	80064aa <UART_SetConfig+0x33e>
 8006486:	2b00      	cmp	r3, #0
 8006488:	d003      	beq.n	8006492 <UART_SetConfig+0x326>
 800648a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800648e:	d006      	beq.n	800649e <UART_SetConfig+0x332>
 8006490:	e00b      	b.n	80064aa <UART_SetConfig+0x33e>
 8006492:	2300      	movs	r3, #0
 8006494:	77fb      	strb	r3, [r7, #31]
 8006496:	e00d      	b.n	80064b4 <UART_SetConfig+0x348>
 8006498:	2302      	movs	r3, #2
 800649a:	77fb      	strb	r3, [r7, #31]
 800649c:	e00a      	b.n	80064b4 <UART_SetConfig+0x348>
 800649e:	2304      	movs	r3, #4
 80064a0:	77fb      	strb	r3, [r7, #31]
 80064a2:	e007      	b.n	80064b4 <UART_SetConfig+0x348>
 80064a4:	2308      	movs	r3, #8
 80064a6:	77fb      	strb	r3, [r7, #31]
 80064a8:	e004      	b.n	80064b4 <UART_SetConfig+0x348>
 80064aa:	2310      	movs	r3, #16
 80064ac:	77fb      	strb	r3, [r7, #31]
 80064ae:	e001      	b.n	80064b4 <UART_SetConfig+0x348>
 80064b0:	2310      	movs	r3, #16
 80064b2:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	69db      	ldr	r3, [r3, #28]
 80064b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80064bc:	d15b      	bne.n	8006576 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80064be:	7ffb      	ldrb	r3, [r7, #31]
 80064c0:	2b08      	cmp	r3, #8
 80064c2:	d828      	bhi.n	8006516 <UART_SetConfig+0x3aa>
 80064c4:	a201      	add	r2, pc, #4	; (adr r2, 80064cc <UART_SetConfig+0x360>)
 80064c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064ca:	bf00      	nop
 80064cc:	080064f1 	.word	0x080064f1
 80064d0:	080064f9 	.word	0x080064f9
 80064d4:	08006501 	.word	0x08006501
 80064d8:	08006517 	.word	0x08006517
 80064dc:	08006507 	.word	0x08006507
 80064e0:	08006517 	.word	0x08006517
 80064e4:	08006517 	.word	0x08006517
 80064e8:	08006517 	.word	0x08006517
 80064ec:	0800650f 	.word	0x0800650f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80064f0:	f7fd fdc0 	bl	8004074 <HAL_RCC_GetPCLK1Freq>
 80064f4:	61b8      	str	r0, [r7, #24]
        break;
 80064f6:	e013      	b.n	8006520 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80064f8:	f7fd fdd0 	bl	800409c <HAL_RCC_GetPCLK2Freq>
 80064fc:	61b8      	str	r0, [r7, #24]
        break;
 80064fe:	e00f      	b.n	8006520 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006500:	4b4b      	ldr	r3, [pc, #300]	; (8006630 <UART_SetConfig+0x4c4>)
 8006502:	61bb      	str	r3, [r7, #24]
        break;
 8006504:	e00c      	b.n	8006520 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006506:	f7fd fce3 	bl	8003ed0 <HAL_RCC_GetSysClockFreq>
 800650a:	61b8      	str	r0, [r7, #24]
        break;
 800650c:	e008      	b.n	8006520 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800650e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006512:	61bb      	str	r3, [r7, #24]
        break;
 8006514:	e004      	b.n	8006520 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8006516:	2300      	movs	r3, #0
 8006518:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800651a:	2301      	movs	r3, #1
 800651c:	77bb      	strb	r3, [r7, #30]
        break;
 800651e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006520:	69bb      	ldr	r3, [r7, #24]
 8006522:	2b00      	cmp	r3, #0
 8006524:	d074      	beq.n	8006610 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006526:	69bb      	ldr	r3, [r7, #24]
 8006528:	005a      	lsls	r2, r3, #1
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	685b      	ldr	r3, [r3, #4]
 800652e:	085b      	lsrs	r3, r3, #1
 8006530:	441a      	add	r2, r3
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	685b      	ldr	r3, [r3, #4]
 8006536:	fbb2 f3f3 	udiv	r3, r2, r3
 800653a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800653c:	693b      	ldr	r3, [r7, #16]
 800653e:	2b0f      	cmp	r3, #15
 8006540:	d916      	bls.n	8006570 <UART_SetConfig+0x404>
 8006542:	693b      	ldr	r3, [r7, #16]
 8006544:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006548:	d212      	bcs.n	8006570 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800654a:	693b      	ldr	r3, [r7, #16]
 800654c:	b29b      	uxth	r3, r3
 800654e:	f023 030f 	bic.w	r3, r3, #15
 8006552:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006554:	693b      	ldr	r3, [r7, #16]
 8006556:	085b      	lsrs	r3, r3, #1
 8006558:	b29b      	uxth	r3, r3
 800655a:	f003 0307 	and.w	r3, r3, #7
 800655e:	b29a      	uxth	r2, r3
 8006560:	89fb      	ldrh	r3, [r7, #14]
 8006562:	4313      	orrs	r3, r2
 8006564:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	89fa      	ldrh	r2, [r7, #14]
 800656c:	60da      	str	r2, [r3, #12]
 800656e:	e04f      	b.n	8006610 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006570:	2301      	movs	r3, #1
 8006572:	77bb      	strb	r3, [r7, #30]
 8006574:	e04c      	b.n	8006610 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006576:	7ffb      	ldrb	r3, [r7, #31]
 8006578:	2b08      	cmp	r3, #8
 800657a:	d828      	bhi.n	80065ce <UART_SetConfig+0x462>
 800657c:	a201      	add	r2, pc, #4	; (adr r2, 8006584 <UART_SetConfig+0x418>)
 800657e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006582:	bf00      	nop
 8006584:	080065a9 	.word	0x080065a9
 8006588:	080065b1 	.word	0x080065b1
 800658c:	080065b9 	.word	0x080065b9
 8006590:	080065cf 	.word	0x080065cf
 8006594:	080065bf 	.word	0x080065bf
 8006598:	080065cf 	.word	0x080065cf
 800659c:	080065cf 	.word	0x080065cf
 80065a0:	080065cf 	.word	0x080065cf
 80065a4:	080065c7 	.word	0x080065c7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80065a8:	f7fd fd64 	bl	8004074 <HAL_RCC_GetPCLK1Freq>
 80065ac:	61b8      	str	r0, [r7, #24]
        break;
 80065ae:	e013      	b.n	80065d8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80065b0:	f7fd fd74 	bl	800409c <HAL_RCC_GetPCLK2Freq>
 80065b4:	61b8      	str	r0, [r7, #24]
        break;
 80065b6:	e00f      	b.n	80065d8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80065b8:	4b1d      	ldr	r3, [pc, #116]	; (8006630 <UART_SetConfig+0x4c4>)
 80065ba:	61bb      	str	r3, [r7, #24]
        break;
 80065bc:	e00c      	b.n	80065d8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80065be:	f7fd fc87 	bl	8003ed0 <HAL_RCC_GetSysClockFreq>
 80065c2:	61b8      	str	r0, [r7, #24]
        break;
 80065c4:	e008      	b.n	80065d8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80065c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80065ca:	61bb      	str	r3, [r7, #24]
        break;
 80065cc:	e004      	b.n	80065d8 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80065ce:	2300      	movs	r3, #0
 80065d0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80065d2:	2301      	movs	r3, #1
 80065d4:	77bb      	strb	r3, [r7, #30]
        break;
 80065d6:	bf00      	nop
    }

    if (pclk != 0U)
 80065d8:	69bb      	ldr	r3, [r7, #24]
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d018      	beq.n	8006610 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	685b      	ldr	r3, [r3, #4]
 80065e2:	085a      	lsrs	r2, r3, #1
 80065e4:	69bb      	ldr	r3, [r7, #24]
 80065e6:	441a      	add	r2, r3
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	685b      	ldr	r3, [r3, #4]
 80065ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80065f0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80065f2:	693b      	ldr	r3, [r7, #16]
 80065f4:	2b0f      	cmp	r3, #15
 80065f6:	d909      	bls.n	800660c <UART_SetConfig+0x4a0>
 80065f8:	693b      	ldr	r3, [r7, #16]
 80065fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80065fe:	d205      	bcs.n	800660c <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006600:	693b      	ldr	r3, [r7, #16]
 8006602:	b29a      	uxth	r2, r3
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	60da      	str	r2, [r3, #12]
 800660a:	e001      	b.n	8006610 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800660c:	2301      	movs	r3, #1
 800660e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	2200      	movs	r2, #0
 8006614:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	2200      	movs	r2, #0
 800661a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800661c:	7fbb      	ldrb	r3, [r7, #30]
}
 800661e:	4618      	mov	r0, r3
 8006620:	3720      	adds	r7, #32
 8006622:	46bd      	mov	sp, r7
 8006624:	bd80      	pop	{r7, pc}
 8006626:	bf00      	nop
 8006628:	40007c00 	.word	0x40007c00
 800662c:	40023800 	.word	0x40023800
 8006630:	00f42400 	.word	0x00f42400

08006634 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006634:	b480      	push	{r7}
 8006636:	b083      	sub	sp, #12
 8006638:	af00      	add	r7, sp, #0
 800663a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006640:	f003 0301 	and.w	r3, r3, #1
 8006644:	2b00      	cmp	r3, #0
 8006646:	d00a      	beq.n	800665e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	685b      	ldr	r3, [r3, #4]
 800664e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	430a      	orrs	r2, r1
 800665c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006662:	f003 0302 	and.w	r3, r3, #2
 8006666:	2b00      	cmp	r3, #0
 8006668:	d00a      	beq.n	8006680 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	685b      	ldr	r3, [r3, #4]
 8006670:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	430a      	orrs	r2, r1
 800667e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006684:	f003 0304 	and.w	r3, r3, #4
 8006688:	2b00      	cmp	r3, #0
 800668a:	d00a      	beq.n	80066a2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	685b      	ldr	r3, [r3, #4]
 8006692:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	430a      	orrs	r2, r1
 80066a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066a6:	f003 0308 	and.w	r3, r3, #8
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d00a      	beq.n	80066c4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	685b      	ldr	r3, [r3, #4]
 80066b4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	430a      	orrs	r2, r1
 80066c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066c8:	f003 0310 	and.w	r3, r3, #16
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d00a      	beq.n	80066e6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	689b      	ldr	r3, [r3, #8]
 80066d6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	430a      	orrs	r2, r1
 80066e4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066ea:	f003 0320 	and.w	r3, r3, #32
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d00a      	beq.n	8006708 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	689b      	ldr	r3, [r3, #8]
 80066f8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	430a      	orrs	r2, r1
 8006706:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800670c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006710:	2b00      	cmp	r3, #0
 8006712:	d01a      	beq.n	800674a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	685b      	ldr	r3, [r3, #4]
 800671a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	430a      	orrs	r2, r1
 8006728:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800672e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006732:	d10a      	bne.n	800674a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	685b      	ldr	r3, [r3, #4]
 800673a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	430a      	orrs	r2, r1
 8006748:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800674e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006752:	2b00      	cmp	r3, #0
 8006754:	d00a      	beq.n	800676c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	685b      	ldr	r3, [r3, #4]
 800675c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	430a      	orrs	r2, r1
 800676a:	605a      	str	r2, [r3, #4]
  }
}
 800676c:	bf00      	nop
 800676e:	370c      	adds	r7, #12
 8006770:	46bd      	mov	sp, r7
 8006772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006776:	4770      	bx	lr

08006778 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006778:	b580      	push	{r7, lr}
 800677a:	b086      	sub	sp, #24
 800677c:	af02      	add	r7, sp, #8
 800677e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	2200      	movs	r2, #0
 8006784:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006788:	f7fb fc92 	bl	80020b0 <HAL_GetTick>
 800678c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	f003 0308 	and.w	r3, r3, #8
 8006798:	2b08      	cmp	r3, #8
 800679a:	d10e      	bne.n	80067ba <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800679c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80067a0:	9300      	str	r3, [sp, #0]
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	2200      	movs	r2, #0
 80067a6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80067aa:	6878      	ldr	r0, [r7, #4]
 80067ac:	f000 f81b 	bl	80067e6 <UART_WaitOnFlagUntilTimeout>
 80067b0:	4603      	mov	r3, r0
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d001      	beq.n	80067ba <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80067b6:	2303      	movs	r3, #3
 80067b8:	e011      	b.n	80067de <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	2220      	movs	r2, #32
 80067be:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	2220      	movs	r2, #32
 80067c4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	2200      	movs	r2, #0
 80067cc:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	2200      	movs	r2, #0
 80067d2:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	2200      	movs	r2, #0
 80067d8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80067dc:	2300      	movs	r3, #0
}
 80067de:	4618      	mov	r0, r3
 80067e0:	3710      	adds	r7, #16
 80067e2:	46bd      	mov	sp, r7
 80067e4:	bd80      	pop	{r7, pc}

080067e6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80067e6:	b580      	push	{r7, lr}
 80067e8:	b09c      	sub	sp, #112	; 0x70
 80067ea:	af00      	add	r7, sp, #0
 80067ec:	60f8      	str	r0, [r7, #12]
 80067ee:	60b9      	str	r1, [r7, #8]
 80067f0:	603b      	str	r3, [r7, #0]
 80067f2:	4613      	mov	r3, r2
 80067f4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80067f6:	e0a7      	b.n	8006948 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80067f8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80067fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067fe:	f000 80a3 	beq.w	8006948 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006802:	f7fb fc55 	bl	80020b0 <HAL_GetTick>
 8006806:	4602      	mov	r2, r0
 8006808:	683b      	ldr	r3, [r7, #0]
 800680a:	1ad3      	subs	r3, r2, r3
 800680c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800680e:	429a      	cmp	r2, r3
 8006810:	d302      	bcc.n	8006818 <UART_WaitOnFlagUntilTimeout+0x32>
 8006812:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006814:	2b00      	cmp	r3, #0
 8006816:	d13f      	bne.n	8006898 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800681e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006820:	e853 3f00 	ldrex	r3, [r3]
 8006824:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006826:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006828:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800682c:	667b      	str	r3, [r7, #100]	; 0x64
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	461a      	mov	r2, r3
 8006834:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006836:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006838:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800683a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800683c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800683e:	e841 2300 	strex	r3, r2, [r1]
 8006842:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006844:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006846:	2b00      	cmp	r3, #0
 8006848:	d1e6      	bne.n	8006818 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	3308      	adds	r3, #8
 8006850:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006852:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006854:	e853 3f00 	ldrex	r3, [r3]
 8006858:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800685a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800685c:	f023 0301 	bic.w	r3, r3, #1
 8006860:	663b      	str	r3, [r7, #96]	; 0x60
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	3308      	adds	r3, #8
 8006868:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800686a:	64ba      	str	r2, [r7, #72]	; 0x48
 800686c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800686e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006870:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006872:	e841 2300 	strex	r3, r2, [r1]
 8006876:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006878:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800687a:	2b00      	cmp	r3, #0
 800687c:	d1e5      	bne.n	800684a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	2220      	movs	r2, #32
 8006882:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	2220      	movs	r2, #32
 8006888:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	2200      	movs	r2, #0
 8006890:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8006894:	2303      	movs	r3, #3
 8006896:	e068      	b.n	800696a <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	f003 0304 	and.w	r3, r3, #4
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d050      	beq.n	8006948 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	69db      	ldr	r3, [r3, #28]
 80068ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80068b0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80068b4:	d148      	bne.n	8006948 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80068be:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068c8:	e853 3f00 	ldrex	r3, [r3]
 80068cc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80068ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068d0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80068d4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	461a      	mov	r2, r3
 80068dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80068de:	637b      	str	r3, [r7, #52]	; 0x34
 80068e0:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068e2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80068e4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80068e6:	e841 2300 	strex	r3, r2, [r1]
 80068ea:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80068ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d1e6      	bne.n	80068c0 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	3308      	adds	r3, #8
 80068f8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068fa:	697b      	ldr	r3, [r7, #20]
 80068fc:	e853 3f00 	ldrex	r3, [r3]
 8006900:	613b      	str	r3, [r7, #16]
   return(result);
 8006902:	693b      	ldr	r3, [r7, #16]
 8006904:	f023 0301 	bic.w	r3, r3, #1
 8006908:	66bb      	str	r3, [r7, #104]	; 0x68
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	3308      	adds	r3, #8
 8006910:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006912:	623a      	str	r2, [r7, #32]
 8006914:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006916:	69f9      	ldr	r1, [r7, #28]
 8006918:	6a3a      	ldr	r2, [r7, #32]
 800691a:	e841 2300 	strex	r3, r2, [r1]
 800691e:	61bb      	str	r3, [r7, #24]
   return(result);
 8006920:	69bb      	ldr	r3, [r7, #24]
 8006922:	2b00      	cmp	r3, #0
 8006924:	d1e5      	bne.n	80068f2 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	2220      	movs	r2, #32
 800692a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	2220      	movs	r2, #32
 8006930:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	2220      	movs	r2, #32
 8006938:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	2200      	movs	r2, #0
 8006940:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8006944:	2303      	movs	r3, #3
 8006946:	e010      	b.n	800696a <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	69da      	ldr	r2, [r3, #28]
 800694e:	68bb      	ldr	r3, [r7, #8]
 8006950:	4013      	ands	r3, r2
 8006952:	68ba      	ldr	r2, [r7, #8]
 8006954:	429a      	cmp	r2, r3
 8006956:	bf0c      	ite	eq
 8006958:	2301      	moveq	r3, #1
 800695a:	2300      	movne	r3, #0
 800695c:	b2db      	uxtb	r3, r3
 800695e:	461a      	mov	r2, r3
 8006960:	79fb      	ldrb	r3, [r7, #7]
 8006962:	429a      	cmp	r2, r3
 8006964:	f43f af48 	beq.w	80067f8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006968:	2300      	movs	r3, #0
}
 800696a:	4618      	mov	r0, r3
 800696c:	3770      	adds	r7, #112	; 0x70
 800696e:	46bd      	mov	sp, r7
 8006970:	bd80      	pop	{r7, pc}
	...

08006974 <__errno>:
 8006974:	4b01      	ldr	r3, [pc, #4]	; (800697c <__errno+0x8>)
 8006976:	6818      	ldr	r0, [r3, #0]
 8006978:	4770      	bx	lr
 800697a:	bf00      	nop
 800697c:	20000014 	.word	0x20000014

08006980 <__libc_init_array>:
 8006980:	b570      	push	{r4, r5, r6, lr}
 8006982:	4d0d      	ldr	r5, [pc, #52]	; (80069b8 <__libc_init_array+0x38>)
 8006984:	4c0d      	ldr	r4, [pc, #52]	; (80069bc <__libc_init_array+0x3c>)
 8006986:	1b64      	subs	r4, r4, r5
 8006988:	10a4      	asrs	r4, r4, #2
 800698a:	2600      	movs	r6, #0
 800698c:	42a6      	cmp	r6, r4
 800698e:	d109      	bne.n	80069a4 <__libc_init_array+0x24>
 8006990:	4d0b      	ldr	r5, [pc, #44]	; (80069c0 <__libc_init_array+0x40>)
 8006992:	4c0c      	ldr	r4, [pc, #48]	; (80069c4 <__libc_init_array+0x44>)
 8006994:	f001 f824 	bl	80079e0 <_init>
 8006998:	1b64      	subs	r4, r4, r5
 800699a:	10a4      	asrs	r4, r4, #2
 800699c:	2600      	movs	r6, #0
 800699e:	42a6      	cmp	r6, r4
 80069a0:	d105      	bne.n	80069ae <__libc_init_array+0x2e>
 80069a2:	bd70      	pop	{r4, r5, r6, pc}
 80069a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80069a8:	4798      	blx	r3
 80069aa:	3601      	adds	r6, #1
 80069ac:	e7ee      	b.n	800698c <__libc_init_array+0xc>
 80069ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80069b2:	4798      	blx	r3
 80069b4:	3601      	adds	r6, #1
 80069b6:	e7f2      	b.n	800699e <__libc_init_array+0x1e>
 80069b8:	08007f4c 	.word	0x08007f4c
 80069bc:	08007f4c 	.word	0x08007f4c
 80069c0:	08007f4c 	.word	0x08007f4c
 80069c4:	08007f50 	.word	0x08007f50

080069c8 <memset>:
 80069c8:	4402      	add	r2, r0
 80069ca:	4603      	mov	r3, r0
 80069cc:	4293      	cmp	r3, r2
 80069ce:	d100      	bne.n	80069d2 <memset+0xa>
 80069d0:	4770      	bx	lr
 80069d2:	f803 1b01 	strb.w	r1, [r3], #1
 80069d6:	e7f9      	b.n	80069cc <memset+0x4>

080069d8 <iprintf>:
 80069d8:	b40f      	push	{r0, r1, r2, r3}
 80069da:	4b0a      	ldr	r3, [pc, #40]	; (8006a04 <iprintf+0x2c>)
 80069dc:	b513      	push	{r0, r1, r4, lr}
 80069de:	681c      	ldr	r4, [r3, #0]
 80069e0:	b124      	cbz	r4, 80069ec <iprintf+0x14>
 80069e2:	69a3      	ldr	r3, [r4, #24]
 80069e4:	b913      	cbnz	r3, 80069ec <iprintf+0x14>
 80069e6:	4620      	mov	r0, r4
 80069e8:	f000 fa5e 	bl	8006ea8 <__sinit>
 80069ec:	ab05      	add	r3, sp, #20
 80069ee:	9a04      	ldr	r2, [sp, #16]
 80069f0:	68a1      	ldr	r1, [r4, #8]
 80069f2:	9301      	str	r3, [sp, #4]
 80069f4:	4620      	mov	r0, r4
 80069f6:	f000 fc67 	bl	80072c8 <_vfiprintf_r>
 80069fa:	b002      	add	sp, #8
 80069fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006a00:	b004      	add	sp, #16
 8006a02:	4770      	bx	lr
 8006a04:	20000014 	.word	0x20000014

08006a08 <_puts_r>:
 8006a08:	b570      	push	{r4, r5, r6, lr}
 8006a0a:	460e      	mov	r6, r1
 8006a0c:	4605      	mov	r5, r0
 8006a0e:	b118      	cbz	r0, 8006a18 <_puts_r+0x10>
 8006a10:	6983      	ldr	r3, [r0, #24]
 8006a12:	b90b      	cbnz	r3, 8006a18 <_puts_r+0x10>
 8006a14:	f000 fa48 	bl	8006ea8 <__sinit>
 8006a18:	69ab      	ldr	r3, [r5, #24]
 8006a1a:	68ac      	ldr	r4, [r5, #8]
 8006a1c:	b913      	cbnz	r3, 8006a24 <_puts_r+0x1c>
 8006a1e:	4628      	mov	r0, r5
 8006a20:	f000 fa42 	bl	8006ea8 <__sinit>
 8006a24:	4b2c      	ldr	r3, [pc, #176]	; (8006ad8 <_puts_r+0xd0>)
 8006a26:	429c      	cmp	r4, r3
 8006a28:	d120      	bne.n	8006a6c <_puts_r+0x64>
 8006a2a:	686c      	ldr	r4, [r5, #4]
 8006a2c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006a2e:	07db      	lsls	r3, r3, #31
 8006a30:	d405      	bmi.n	8006a3e <_puts_r+0x36>
 8006a32:	89a3      	ldrh	r3, [r4, #12]
 8006a34:	0598      	lsls	r0, r3, #22
 8006a36:	d402      	bmi.n	8006a3e <_puts_r+0x36>
 8006a38:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006a3a:	f000 fad3 	bl	8006fe4 <__retarget_lock_acquire_recursive>
 8006a3e:	89a3      	ldrh	r3, [r4, #12]
 8006a40:	0719      	lsls	r1, r3, #28
 8006a42:	d51d      	bpl.n	8006a80 <_puts_r+0x78>
 8006a44:	6923      	ldr	r3, [r4, #16]
 8006a46:	b1db      	cbz	r3, 8006a80 <_puts_r+0x78>
 8006a48:	3e01      	subs	r6, #1
 8006a4a:	68a3      	ldr	r3, [r4, #8]
 8006a4c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006a50:	3b01      	subs	r3, #1
 8006a52:	60a3      	str	r3, [r4, #8]
 8006a54:	bb39      	cbnz	r1, 8006aa6 <_puts_r+0x9e>
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	da38      	bge.n	8006acc <_puts_r+0xc4>
 8006a5a:	4622      	mov	r2, r4
 8006a5c:	210a      	movs	r1, #10
 8006a5e:	4628      	mov	r0, r5
 8006a60:	f000 f848 	bl	8006af4 <__swbuf_r>
 8006a64:	3001      	adds	r0, #1
 8006a66:	d011      	beq.n	8006a8c <_puts_r+0x84>
 8006a68:	250a      	movs	r5, #10
 8006a6a:	e011      	b.n	8006a90 <_puts_r+0x88>
 8006a6c:	4b1b      	ldr	r3, [pc, #108]	; (8006adc <_puts_r+0xd4>)
 8006a6e:	429c      	cmp	r4, r3
 8006a70:	d101      	bne.n	8006a76 <_puts_r+0x6e>
 8006a72:	68ac      	ldr	r4, [r5, #8]
 8006a74:	e7da      	b.n	8006a2c <_puts_r+0x24>
 8006a76:	4b1a      	ldr	r3, [pc, #104]	; (8006ae0 <_puts_r+0xd8>)
 8006a78:	429c      	cmp	r4, r3
 8006a7a:	bf08      	it	eq
 8006a7c:	68ec      	ldreq	r4, [r5, #12]
 8006a7e:	e7d5      	b.n	8006a2c <_puts_r+0x24>
 8006a80:	4621      	mov	r1, r4
 8006a82:	4628      	mov	r0, r5
 8006a84:	f000 f888 	bl	8006b98 <__swsetup_r>
 8006a88:	2800      	cmp	r0, #0
 8006a8a:	d0dd      	beq.n	8006a48 <_puts_r+0x40>
 8006a8c:	f04f 35ff 	mov.w	r5, #4294967295
 8006a90:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006a92:	07da      	lsls	r2, r3, #31
 8006a94:	d405      	bmi.n	8006aa2 <_puts_r+0x9a>
 8006a96:	89a3      	ldrh	r3, [r4, #12]
 8006a98:	059b      	lsls	r3, r3, #22
 8006a9a:	d402      	bmi.n	8006aa2 <_puts_r+0x9a>
 8006a9c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006a9e:	f000 faa2 	bl	8006fe6 <__retarget_lock_release_recursive>
 8006aa2:	4628      	mov	r0, r5
 8006aa4:	bd70      	pop	{r4, r5, r6, pc}
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	da04      	bge.n	8006ab4 <_puts_r+0xac>
 8006aaa:	69a2      	ldr	r2, [r4, #24]
 8006aac:	429a      	cmp	r2, r3
 8006aae:	dc06      	bgt.n	8006abe <_puts_r+0xb6>
 8006ab0:	290a      	cmp	r1, #10
 8006ab2:	d004      	beq.n	8006abe <_puts_r+0xb6>
 8006ab4:	6823      	ldr	r3, [r4, #0]
 8006ab6:	1c5a      	adds	r2, r3, #1
 8006ab8:	6022      	str	r2, [r4, #0]
 8006aba:	7019      	strb	r1, [r3, #0]
 8006abc:	e7c5      	b.n	8006a4a <_puts_r+0x42>
 8006abe:	4622      	mov	r2, r4
 8006ac0:	4628      	mov	r0, r5
 8006ac2:	f000 f817 	bl	8006af4 <__swbuf_r>
 8006ac6:	3001      	adds	r0, #1
 8006ac8:	d1bf      	bne.n	8006a4a <_puts_r+0x42>
 8006aca:	e7df      	b.n	8006a8c <_puts_r+0x84>
 8006acc:	6823      	ldr	r3, [r4, #0]
 8006ace:	250a      	movs	r5, #10
 8006ad0:	1c5a      	adds	r2, r3, #1
 8006ad2:	6022      	str	r2, [r4, #0]
 8006ad4:	701d      	strb	r5, [r3, #0]
 8006ad6:	e7db      	b.n	8006a90 <_puts_r+0x88>
 8006ad8:	08007ed0 	.word	0x08007ed0
 8006adc:	08007ef0 	.word	0x08007ef0
 8006ae0:	08007eb0 	.word	0x08007eb0

08006ae4 <puts>:
 8006ae4:	4b02      	ldr	r3, [pc, #8]	; (8006af0 <puts+0xc>)
 8006ae6:	4601      	mov	r1, r0
 8006ae8:	6818      	ldr	r0, [r3, #0]
 8006aea:	f7ff bf8d 	b.w	8006a08 <_puts_r>
 8006aee:	bf00      	nop
 8006af0:	20000014 	.word	0x20000014

08006af4 <__swbuf_r>:
 8006af4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006af6:	460e      	mov	r6, r1
 8006af8:	4614      	mov	r4, r2
 8006afa:	4605      	mov	r5, r0
 8006afc:	b118      	cbz	r0, 8006b06 <__swbuf_r+0x12>
 8006afe:	6983      	ldr	r3, [r0, #24]
 8006b00:	b90b      	cbnz	r3, 8006b06 <__swbuf_r+0x12>
 8006b02:	f000 f9d1 	bl	8006ea8 <__sinit>
 8006b06:	4b21      	ldr	r3, [pc, #132]	; (8006b8c <__swbuf_r+0x98>)
 8006b08:	429c      	cmp	r4, r3
 8006b0a:	d12b      	bne.n	8006b64 <__swbuf_r+0x70>
 8006b0c:	686c      	ldr	r4, [r5, #4]
 8006b0e:	69a3      	ldr	r3, [r4, #24]
 8006b10:	60a3      	str	r3, [r4, #8]
 8006b12:	89a3      	ldrh	r3, [r4, #12]
 8006b14:	071a      	lsls	r2, r3, #28
 8006b16:	d52f      	bpl.n	8006b78 <__swbuf_r+0x84>
 8006b18:	6923      	ldr	r3, [r4, #16]
 8006b1a:	b36b      	cbz	r3, 8006b78 <__swbuf_r+0x84>
 8006b1c:	6923      	ldr	r3, [r4, #16]
 8006b1e:	6820      	ldr	r0, [r4, #0]
 8006b20:	1ac0      	subs	r0, r0, r3
 8006b22:	6963      	ldr	r3, [r4, #20]
 8006b24:	b2f6      	uxtb	r6, r6
 8006b26:	4283      	cmp	r3, r0
 8006b28:	4637      	mov	r7, r6
 8006b2a:	dc04      	bgt.n	8006b36 <__swbuf_r+0x42>
 8006b2c:	4621      	mov	r1, r4
 8006b2e:	4628      	mov	r0, r5
 8006b30:	f000 f926 	bl	8006d80 <_fflush_r>
 8006b34:	bb30      	cbnz	r0, 8006b84 <__swbuf_r+0x90>
 8006b36:	68a3      	ldr	r3, [r4, #8]
 8006b38:	3b01      	subs	r3, #1
 8006b3a:	60a3      	str	r3, [r4, #8]
 8006b3c:	6823      	ldr	r3, [r4, #0]
 8006b3e:	1c5a      	adds	r2, r3, #1
 8006b40:	6022      	str	r2, [r4, #0]
 8006b42:	701e      	strb	r6, [r3, #0]
 8006b44:	6963      	ldr	r3, [r4, #20]
 8006b46:	3001      	adds	r0, #1
 8006b48:	4283      	cmp	r3, r0
 8006b4a:	d004      	beq.n	8006b56 <__swbuf_r+0x62>
 8006b4c:	89a3      	ldrh	r3, [r4, #12]
 8006b4e:	07db      	lsls	r3, r3, #31
 8006b50:	d506      	bpl.n	8006b60 <__swbuf_r+0x6c>
 8006b52:	2e0a      	cmp	r6, #10
 8006b54:	d104      	bne.n	8006b60 <__swbuf_r+0x6c>
 8006b56:	4621      	mov	r1, r4
 8006b58:	4628      	mov	r0, r5
 8006b5a:	f000 f911 	bl	8006d80 <_fflush_r>
 8006b5e:	b988      	cbnz	r0, 8006b84 <__swbuf_r+0x90>
 8006b60:	4638      	mov	r0, r7
 8006b62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006b64:	4b0a      	ldr	r3, [pc, #40]	; (8006b90 <__swbuf_r+0x9c>)
 8006b66:	429c      	cmp	r4, r3
 8006b68:	d101      	bne.n	8006b6e <__swbuf_r+0x7a>
 8006b6a:	68ac      	ldr	r4, [r5, #8]
 8006b6c:	e7cf      	b.n	8006b0e <__swbuf_r+0x1a>
 8006b6e:	4b09      	ldr	r3, [pc, #36]	; (8006b94 <__swbuf_r+0xa0>)
 8006b70:	429c      	cmp	r4, r3
 8006b72:	bf08      	it	eq
 8006b74:	68ec      	ldreq	r4, [r5, #12]
 8006b76:	e7ca      	b.n	8006b0e <__swbuf_r+0x1a>
 8006b78:	4621      	mov	r1, r4
 8006b7a:	4628      	mov	r0, r5
 8006b7c:	f000 f80c 	bl	8006b98 <__swsetup_r>
 8006b80:	2800      	cmp	r0, #0
 8006b82:	d0cb      	beq.n	8006b1c <__swbuf_r+0x28>
 8006b84:	f04f 37ff 	mov.w	r7, #4294967295
 8006b88:	e7ea      	b.n	8006b60 <__swbuf_r+0x6c>
 8006b8a:	bf00      	nop
 8006b8c:	08007ed0 	.word	0x08007ed0
 8006b90:	08007ef0 	.word	0x08007ef0
 8006b94:	08007eb0 	.word	0x08007eb0

08006b98 <__swsetup_r>:
 8006b98:	4b32      	ldr	r3, [pc, #200]	; (8006c64 <__swsetup_r+0xcc>)
 8006b9a:	b570      	push	{r4, r5, r6, lr}
 8006b9c:	681d      	ldr	r5, [r3, #0]
 8006b9e:	4606      	mov	r6, r0
 8006ba0:	460c      	mov	r4, r1
 8006ba2:	b125      	cbz	r5, 8006bae <__swsetup_r+0x16>
 8006ba4:	69ab      	ldr	r3, [r5, #24]
 8006ba6:	b913      	cbnz	r3, 8006bae <__swsetup_r+0x16>
 8006ba8:	4628      	mov	r0, r5
 8006baa:	f000 f97d 	bl	8006ea8 <__sinit>
 8006bae:	4b2e      	ldr	r3, [pc, #184]	; (8006c68 <__swsetup_r+0xd0>)
 8006bb0:	429c      	cmp	r4, r3
 8006bb2:	d10f      	bne.n	8006bd4 <__swsetup_r+0x3c>
 8006bb4:	686c      	ldr	r4, [r5, #4]
 8006bb6:	89a3      	ldrh	r3, [r4, #12]
 8006bb8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006bbc:	0719      	lsls	r1, r3, #28
 8006bbe:	d42c      	bmi.n	8006c1a <__swsetup_r+0x82>
 8006bc0:	06dd      	lsls	r5, r3, #27
 8006bc2:	d411      	bmi.n	8006be8 <__swsetup_r+0x50>
 8006bc4:	2309      	movs	r3, #9
 8006bc6:	6033      	str	r3, [r6, #0]
 8006bc8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006bcc:	81a3      	strh	r3, [r4, #12]
 8006bce:	f04f 30ff 	mov.w	r0, #4294967295
 8006bd2:	e03e      	b.n	8006c52 <__swsetup_r+0xba>
 8006bd4:	4b25      	ldr	r3, [pc, #148]	; (8006c6c <__swsetup_r+0xd4>)
 8006bd6:	429c      	cmp	r4, r3
 8006bd8:	d101      	bne.n	8006bde <__swsetup_r+0x46>
 8006bda:	68ac      	ldr	r4, [r5, #8]
 8006bdc:	e7eb      	b.n	8006bb6 <__swsetup_r+0x1e>
 8006bde:	4b24      	ldr	r3, [pc, #144]	; (8006c70 <__swsetup_r+0xd8>)
 8006be0:	429c      	cmp	r4, r3
 8006be2:	bf08      	it	eq
 8006be4:	68ec      	ldreq	r4, [r5, #12]
 8006be6:	e7e6      	b.n	8006bb6 <__swsetup_r+0x1e>
 8006be8:	0758      	lsls	r0, r3, #29
 8006bea:	d512      	bpl.n	8006c12 <__swsetup_r+0x7a>
 8006bec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006bee:	b141      	cbz	r1, 8006c02 <__swsetup_r+0x6a>
 8006bf0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006bf4:	4299      	cmp	r1, r3
 8006bf6:	d002      	beq.n	8006bfe <__swsetup_r+0x66>
 8006bf8:	4630      	mov	r0, r6
 8006bfa:	f000 fa5b 	bl	80070b4 <_free_r>
 8006bfe:	2300      	movs	r3, #0
 8006c00:	6363      	str	r3, [r4, #52]	; 0x34
 8006c02:	89a3      	ldrh	r3, [r4, #12]
 8006c04:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006c08:	81a3      	strh	r3, [r4, #12]
 8006c0a:	2300      	movs	r3, #0
 8006c0c:	6063      	str	r3, [r4, #4]
 8006c0e:	6923      	ldr	r3, [r4, #16]
 8006c10:	6023      	str	r3, [r4, #0]
 8006c12:	89a3      	ldrh	r3, [r4, #12]
 8006c14:	f043 0308 	orr.w	r3, r3, #8
 8006c18:	81a3      	strh	r3, [r4, #12]
 8006c1a:	6923      	ldr	r3, [r4, #16]
 8006c1c:	b94b      	cbnz	r3, 8006c32 <__swsetup_r+0x9a>
 8006c1e:	89a3      	ldrh	r3, [r4, #12]
 8006c20:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006c24:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006c28:	d003      	beq.n	8006c32 <__swsetup_r+0x9a>
 8006c2a:	4621      	mov	r1, r4
 8006c2c:	4630      	mov	r0, r6
 8006c2e:	f000 fa01 	bl	8007034 <__smakebuf_r>
 8006c32:	89a0      	ldrh	r0, [r4, #12]
 8006c34:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006c38:	f010 0301 	ands.w	r3, r0, #1
 8006c3c:	d00a      	beq.n	8006c54 <__swsetup_r+0xbc>
 8006c3e:	2300      	movs	r3, #0
 8006c40:	60a3      	str	r3, [r4, #8]
 8006c42:	6963      	ldr	r3, [r4, #20]
 8006c44:	425b      	negs	r3, r3
 8006c46:	61a3      	str	r3, [r4, #24]
 8006c48:	6923      	ldr	r3, [r4, #16]
 8006c4a:	b943      	cbnz	r3, 8006c5e <__swsetup_r+0xc6>
 8006c4c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006c50:	d1ba      	bne.n	8006bc8 <__swsetup_r+0x30>
 8006c52:	bd70      	pop	{r4, r5, r6, pc}
 8006c54:	0781      	lsls	r1, r0, #30
 8006c56:	bf58      	it	pl
 8006c58:	6963      	ldrpl	r3, [r4, #20]
 8006c5a:	60a3      	str	r3, [r4, #8]
 8006c5c:	e7f4      	b.n	8006c48 <__swsetup_r+0xb0>
 8006c5e:	2000      	movs	r0, #0
 8006c60:	e7f7      	b.n	8006c52 <__swsetup_r+0xba>
 8006c62:	bf00      	nop
 8006c64:	20000014 	.word	0x20000014
 8006c68:	08007ed0 	.word	0x08007ed0
 8006c6c:	08007ef0 	.word	0x08007ef0
 8006c70:	08007eb0 	.word	0x08007eb0

08006c74 <__sflush_r>:
 8006c74:	898a      	ldrh	r2, [r1, #12]
 8006c76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006c7a:	4605      	mov	r5, r0
 8006c7c:	0710      	lsls	r0, r2, #28
 8006c7e:	460c      	mov	r4, r1
 8006c80:	d458      	bmi.n	8006d34 <__sflush_r+0xc0>
 8006c82:	684b      	ldr	r3, [r1, #4]
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	dc05      	bgt.n	8006c94 <__sflush_r+0x20>
 8006c88:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	dc02      	bgt.n	8006c94 <__sflush_r+0x20>
 8006c8e:	2000      	movs	r0, #0
 8006c90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006c94:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006c96:	2e00      	cmp	r6, #0
 8006c98:	d0f9      	beq.n	8006c8e <__sflush_r+0x1a>
 8006c9a:	2300      	movs	r3, #0
 8006c9c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006ca0:	682f      	ldr	r7, [r5, #0]
 8006ca2:	602b      	str	r3, [r5, #0]
 8006ca4:	d032      	beq.n	8006d0c <__sflush_r+0x98>
 8006ca6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006ca8:	89a3      	ldrh	r3, [r4, #12]
 8006caa:	075a      	lsls	r2, r3, #29
 8006cac:	d505      	bpl.n	8006cba <__sflush_r+0x46>
 8006cae:	6863      	ldr	r3, [r4, #4]
 8006cb0:	1ac0      	subs	r0, r0, r3
 8006cb2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006cb4:	b10b      	cbz	r3, 8006cba <__sflush_r+0x46>
 8006cb6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006cb8:	1ac0      	subs	r0, r0, r3
 8006cba:	2300      	movs	r3, #0
 8006cbc:	4602      	mov	r2, r0
 8006cbe:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006cc0:	6a21      	ldr	r1, [r4, #32]
 8006cc2:	4628      	mov	r0, r5
 8006cc4:	47b0      	blx	r6
 8006cc6:	1c43      	adds	r3, r0, #1
 8006cc8:	89a3      	ldrh	r3, [r4, #12]
 8006cca:	d106      	bne.n	8006cda <__sflush_r+0x66>
 8006ccc:	6829      	ldr	r1, [r5, #0]
 8006cce:	291d      	cmp	r1, #29
 8006cd0:	d82c      	bhi.n	8006d2c <__sflush_r+0xb8>
 8006cd2:	4a2a      	ldr	r2, [pc, #168]	; (8006d7c <__sflush_r+0x108>)
 8006cd4:	40ca      	lsrs	r2, r1
 8006cd6:	07d6      	lsls	r6, r2, #31
 8006cd8:	d528      	bpl.n	8006d2c <__sflush_r+0xb8>
 8006cda:	2200      	movs	r2, #0
 8006cdc:	6062      	str	r2, [r4, #4]
 8006cde:	04d9      	lsls	r1, r3, #19
 8006ce0:	6922      	ldr	r2, [r4, #16]
 8006ce2:	6022      	str	r2, [r4, #0]
 8006ce4:	d504      	bpl.n	8006cf0 <__sflush_r+0x7c>
 8006ce6:	1c42      	adds	r2, r0, #1
 8006ce8:	d101      	bne.n	8006cee <__sflush_r+0x7a>
 8006cea:	682b      	ldr	r3, [r5, #0]
 8006cec:	b903      	cbnz	r3, 8006cf0 <__sflush_r+0x7c>
 8006cee:	6560      	str	r0, [r4, #84]	; 0x54
 8006cf0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006cf2:	602f      	str	r7, [r5, #0]
 8006cf4:	2900      	cmp	r1, #0
 8006cf6:	d0ca      	beq.n	8006c8e <__sflush_r+0x1a>
 8006cf8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006cfc:	4299      	cmp	r1, r3
 8006cfe:	d002      	beq.n	8006d06 <__sflush_r+0x92>
 8006d00:	4628      	mov	r0, r5
 8006d02:	f000 f9d7 	bl	80070b4 <_free_r>
 8006d06:	2000      	movs	r0, #0
 8006d08:	6360      	str	r0, [r4, #52]	; 0x34
 8006d0a:	e7c1      	b.n	8006c90 <__sflush_r+0x1c>
 8006d0c:	6a21      	ldr	r1, [r4, #32]
 8006d0e:	2301      	movs	r3, #1
 8006d10:	4628      	mov	r0, r5
 8006d12:	47b0      	blx	r6
 8006d14:	1c41      	adds	r1, r0, #1
 8006d16:	d1c7      	bne.n	8006ca8 <__sflush_r+0x34>
 8006d18:	682b      	ldr	r3, [r5, #0]
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d0c4      	beq.n	8006ca8 <__sflush_r+0x34>
 8006d1e:	2b1d      	cmp	r3, #29
 8006d20:	d001      	beq.n	8006d26 <__sflush_r+0xb2>
 8006d22:	2b16      	cmp	r3, #22
 8006d24:	d101      	bne.n	8006d2a <__sflush_r+0xb6>
 8006d26:	602f      	str	r7, [r5, #0]
 8006d28:	e7b1      	b.n	8006c8e <__sflush_r+0x1a>
 8006d2a:	89a3      	ldrh	r3, [r4, #12]
 8006d2c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006d30:	81a3      	strh	r3, [r4, #12]
 8006d32:	e7ad      	b.n	8006c90 <__sflush_r+0x1c>
 8006d34:	690f      	ldr	r7, [r1, #16]
 8006d36:	2f00      	cmp	r7, #0
 8006d38:	d0a9      	beq.n	8006c8e <__sflush_r+0x1a>
 8006d3a:	0793      	lsls	r3, r2, #30
 8006d3c:	680e      	ldr	r6, [r1, #0]
 8006d3e:	bf08      	it	eq
 8006d40:	694b      	ldreq	r3, [r1, #20]
 8006d42:	600f      	str	r7, [r1, #0]
 8006d44:	bf18      	it	ne
 8006d46:	2300      	movne	r3, #0
 8006d48:	eba6 0807 	sub.w	r8, r6, r7
 8006d4c:	608b      	str	r3, [r1, #8]
 8006d4e:	f1b8 0f00 	cmp.w	r8, #0
 8006d52:	dd9c      	ble.n	8006c8e <__sflush_r+0x1a>
 8006d54:	6a21      	ldr	r1, [r4, #32]
 8006d56:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006d58:	4643      	mov	r3, r8
 8006d5a:	463a      	mov	r2, r7
 8006d5c:	4628      	mov	r0, r5
 8006d5e:	47b0      	blx	r6
 8006d60:	2800      	cmp	r0, #0
 8006d62:	dc06      	bgt.n	8006d72 <__sflush_r+0xfe>
 8006d64:	89a3      	ldrh	r3, [r4, #12]
 8006d66:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006d6a:	81a3      	strh	r3, [r4, #12]
 8006d6c:	f04f 30ff 	mov.w	r0, #4294967295
 8006d70:	e78e      	b.n	8006c90 <__sflush_r+0x1c>
 8006d72:	4407      	add	r7, r0
 8006d74:	eba8 0800 	sub.w	r8, r8, r0
 8006d78:	e7e9      	b.n	8006d4e <__sflush_r+0xda>
 8006d7a:	bf00      	nop
 8006d7c:	20400001 	.word	0x20400001

08006d80 <_fflush_r>:
 8006d80:	b538      	push	{r3, r4, r5, lr}
 8006d82:	690b      	ldr	r3, [r1, #16]
 8006d84:	4605      	mov	r5, r0
 8006d86:	460c      	mov	r4, r1
 8006d88:	b913      	cbnz	r3, 8006d90 <_fflush_r+0x10>
 8006d8a:	2500      	movs	r5, #0
 8006d8c:	4628      	mov	r0, r5
 8006d8e:	bd38      	pop	{r3, r4, r5, pc}
 8006d90:	b118      	cbz	r0, 8006d9a <_fflush_r+0x1a>
 8006d92:	6983      	ldr	r3, [r0, #24]
 8006d94:	b90b      	cbnz	r3, 8006d9a <_fflush_r+0x1a>
 8006d96:	f000 f887 	bl	8006ea8 <__sinit>
 8006d9a:	4b14      	ldr	r3, [pc, #80]	; (8006dec <_fflush_r+0x6c>)
 8006d9c:	429c      	cmp	r4, r3
 8006d9e:	d11b      	bne.n	8006dd8 <_fflush_r+0x58>
 8006da0:	686c      	ldr	r4, [r5, #4]
 8006da2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d0ef      	beq.n	8006d8a <_fflush_r+0xa>
 8006daa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006dac:	07d0      	lsls	r0, r2, #31
 8006dae:	d404      	bmi.n	8006dba <_fflush_r+0x3a>
 8006db0:	0599      	lsls	r1, r3, #22
 8006db2:	d402      	bmi.n	8006dba <_fflush_r+0x3a>
 8006db4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006db6:	f000 f915 	bl	8006fe4 <__retarget_lock_acquire_recursive>
 8006dba:	4628      	mov	r0, r5
 8006dbc:	4621      	mov	r1, r4
 8006dbe:	f7ff ff59 	bl	8006c74 <__sflush_r>
 8006dc2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006dc4:	07da      	lsls	r2, r3, #31
 8006dc6:	4605      	mov	r5, r0
 8006dc8:	d4e0      	bmi.n	8006d8c <_fflush_r+0xc>
 8006dca:	89a3      	ldrh	r3, [r4, #12]
 8006dcc:	059b      	lsls	r3, r3, #22
 8006dce:	d4dd      	bmi.n	8006d8c <_fflush_r+0xc>
 8006dd0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006dd2:	f000 f908 	bl	8006fe6 <__retarget_lock_release_recursive>
 8006dd6:	e7d9      	b.n	8006d8c <_fflush_r+0xc>
 8006dd8:	4b05      	ldr	r3, [pc, #20]	; (8006df0 <_fflush_r+0x70>)
 8006dda:	429c      	cmp	r4, r3
 8006ddc:	d101      	bne.n	8006de2 <_fflush_r+0x62>
 8006dde:	68ac      	ldr	r4, [r5, #8]
 8006de0:	e7df      	b.n	8006da2 <_fflush_r+0x22>
 8006de2:	4b04      	ldr	r3, [pc, #16]	; (8006df4 <_fflush_r+0x74>)
 8006de4:	429c      	cmp	r4, r3
 8006de6:	bf08      	it	eq
 8006de8:	68ec      	ldreq	r4, [r5, #12]
 8006dea:	e7da      	b.n	8006da2 <_fflush_r+0x22>
 8006dec:	08007ed0 	.word	0x08007ed0
 8006df0:	08007ef0 	.word	0x08007ef0
 8006df4:	08007eb0 	.word	0x08007eb0

08006df8 <std>:
 8006df8:	2300      	movs	r3, #0
 8006dfa:	b510      	push	{r4, lr}
 8006dfc:	4604      	mov	r4, r0
 8006dfe:	e9c0 3300 	strd	r3, r3, [r0]
 8006e02:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006e06:	6083      	str	r3, [r0, #8]
 8006e08:	8181      	strh	r1, [r0, #12]
 8006e0a:	6643      	str	r3, [r0, #100]	; 0x64
 8006e0c:	81c2      	strh	r2, [r0, #14]
 8006e0e:	6183      	str	r3, [r0, #24]
 8006e10:	4619      	mov	r1, r3
 8006e12:	2208      	movs	r2, #8
 8006e14:	305c      	adds	r0, #92	; 0x5c
 8006e16:	f7ff fdd7 	bl	80069c8 <memset>
 8006e1a:	4b05      	ldr	r3, [pc, #20]	; (8006e30 <std+0x38>)
 8006e1c:	6263      	str	r3, [r4, #36]	; 0x24
 8006e1e:	4b05      	ldr	r3, [pc, #20]	; (8006e34 <std+0x3c>)
 8006e20:	62a3      	str	r3, [r4, #40]	; 0x28
 8006e22:	4b05      	ldr	r3, [pc, #20]	; (8006e38 <std+0x40>)
 8006e24:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006e26:	4b05      	ldr	r3, [pc, #20]	; (8006e3c <std+0x44>)
 8006e28:	6224      	str	r4, [r4, #32]
 8006e2a:	6323      	str	r3, [r4, #48]	; 0x30
 8006e2c:	bd10      	pop	{r4, pc}
 8006e2e:	bf00      	nop
 8006e30:	08007871 	.word	0x08007871
 8006e34:	08007893 	.word	0x08007893
 8006e38:	080078cb 	.word	0x080078cb
 8006e3c:	080078ef 	.word	0x080078ef

08006e40 <_cleanup_r>:
 8006e40:	4901      	ldr	r1, [pc, #4]	; (8006e48 <_cleanup_r+0x8>)
 8006e42:	f000 b8af 	b.w	8006fa4 <_fwalk_reent>
 8006e46:	bf00      	nop
 8006e48:	08006d81 	.word	0x08006d81

08006e4c <__sfmoreglue>:
 8006e4c:	b570      	push	{r4, r5, r6, lr}
 8006e4e:	2268      	movs	r2, #104	; 0x68
 8006e50:	1e4d      	subs	r5, r1, #1
 8006e52:	4355      	muls	r5, r2
 8006e54:	460e      	mov	r6, r1
 8006e56:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006e5a:	f000 f997 	bl	800718c <_malloc_r>
 8006e5e:	4604      	mov	r4, r0
 8006e60:	b140      	cbz	r0, 8006e74 <__sfmoreglue+0x28>
 8006e62:	2100      	movs	r1, #0
 8006e64:	e9c0 1600 	strd	r1, r6, [r0]
 8006e68:	300c      	adds	r0, #12
 8006e6a:	60a0      	str	r0, [r4, #8]
 8006e6c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006e70:	f7ff fdaa 	bl	80069c8 <memset>
 8006e74:	4620      	mov	r0, r4
 8006e76:	bd70      	pop	{r4, r5, r6, pc}

08006e78 <__sfp_lock_acquire>:
 8006e78:	4801      	ldr	r0, [pc, #4]	; (8006e80 <__sfp_lock_acquire+0x8>)
 8006e7a:	f000 b8b3 	b.w	8006fe4 <__retarget_lock_acquire_recursive>
 8006e7e:	bf00      	nop
 8006e80:	200006cd 	.word	0x200006cd

08006e84 <__sfp_lock_release>:
 8006e84:	4801      	ldr	r0, [pc, #4]	; (8006e8c <__sfp_lock_release+0x8>)
 8006e86:	f000 b8ae 	b.w	8006fe6 <__retarget_lock_release_recursive>
 8006e8a:	bf00      	nop
 8006e8c:	200006cd 	.word	0x200006cd

08006e90 <__sinit_lock_acquire>:
 8006e90:	4801      	ldr	r0, [pc, #4]	; (8006e98 <__sinit_lock_acquire+0x8>)
 8006e92:	f000 b8a7 	b.w	8006fe4 <__retarget_lock_acquire_recursive>
 8006e96:	bf00      	nop
 8006e98:	200006ce 	.word	0x200006ce

08006e9c <__sinit_lock_release>:
 8006e9c:	4801      	ldr	r0, [pc, #4]	; (8006ea4 <__sinit_lock_release+0x8>)
 8006e9e:	f000 b8a2 	b.w	8006fe6 <__retarget_lock_release_recursive>
 8006ea2:	bf00      	nop
 8006ea4:	200006ce 	.word	0x200006ce

08006ea8 <__sinit>:
 8006ea8:	b510      	push	{r4, lr}
 8006eaa:	4604      	mov	r4, r0
 8006eac:	f7ff fff0 	bl	8006e90 <__sinit_lock_acquire>
 8006eb0:	69a3      	ldr	r3, [r4, #24]
 8006eb2:	b11b      	cbz	r3, 8006ebc <__sinit+0x14>
 8006eb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006eb8:	f7ff bff0 	b.w	8006e9c <__sinit_lock_release>
 8006ebc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006ec0:	6523      	str	r3, [r4, #80]	; 0x50
 8006ec2:	4b13      	ldr	r3, [pc, #76]	; (8006f10 <__sinit+0x68>)
 8006ec4:	4a13      	ldr	r2, [pc, #76]	; (8006f14 <__sinit+0x6c>)
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	62a2      	str	r2, [r4, #40]	; 0x28
 8006eca:	42a3      	cmp	r3, r4
 8006ecc:	bf04      	itt	eq
 8006ece:	2301      	moveq	r3, #1
 8006ed0:	61a3      	streq	r3, [r4, #24]
 8006ed2:	4620      	mov	r0, r4
 8006ed4:	f000 f820 	bl	8006f18 <__sfp>
 8006ed8:	6060      	str	r0, [r4, #4]
 8006eda:	4620      	mov	r0, r4
 8006edc:	f000 f81c 	bl	8006f18 <__sfp>
 8006ee0:	60a0      	str	r0, [r4, #8]
 8006ee2:	4620      	mov	r0, r4
 8006ee4:	f000 f818 	bl	8006f18 <__sfp>
 8006ee8:	2200      	movs	r2, #0
 8006eea:	60e0      	str	r0, [r4, #12]
 8006eec:	2104      	movs	r1, #4
 8006eee:	6860      	ldr	r0, [r4, #4]
 8006ef0:	f7ff ff82 	bl	8006df8 <std>
 8006ef4:	68a0      	ldr	r0, [r4, #8]
 8006ef6:	2201      	movs	r2, #1
 8006ef8:	2109      	movs	r1, #9
 8006efa:	f7ff ff7d 	bl	8006df8 <std>
 8006efe:	68e0      	ldr	r0, [r4, #12]
 8006f00:	2202      	movs	r2, #2
 8006f02:	2112      	movs	r1, #18
 8006f04:	f7ff ff78 	bl	8006df8 <std>
 8006f08:	2301      	movs	r3, #1
 8006f0a:	61a3      	str	r3, [r4, #24]
 8006f0c:	e7d2      	b.n	8006eb4 <__sinit+0xc>
 8006f0e:	bf00      	nop
 8006f10:	08007eac 	.word	0x08007eac
 8006f14:	08006e41 	.word	0x08006e41

08006f18 <__sfp>:
 8006f18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f1a:	4607      	mov	r7, r0
 8006f1c:	f7ff ffac 	bl	8006e78 <__sfp_lock_acquire>
 8006f20:	4b1e      	ldr	r3, [pc, #120]	; (8006f9c <__sfp+0x84>)
 8006f22:	681e      	ldr	r6, [r3, #0]
 8006f24:	69b3      	ldr	r3, [r6, #24]
 8006f26:	b913      	cbnz	r3, 8006f2e <__sfp+0x16>
 8006f28:	4630      	mov	r0, r6
 8006f2a:	f7ff ffbd 	bl	8006ea8 <__sinit>
 8006f2e:	3648      	adds	r6, #72	; 0x48
 8006f30:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006f34:	3b01      	subs	r3, #1
 8006f36:	d503      	bpl.n	8006f40 <__sfp+0x28>
 8006f38:	6833      	ldr	r3, [r6, #0]
 8006f3a:	b30b      	cbz	r3, 8006f80 <__sfp+0x68>
 8006f3c:	6836      	ldr	r6, [r6, #0]
 8006f3e:	e7f7      	b.n	8006f30 <__sfp+0x18>
 8006f40:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006f44:	b9d5      	cbnz	r5, 8006f7c <__sfp+0x64>
 8006f46:	4b16      	ldr	r3, [pc, #88]	; (8006fa0 <__sfp+0x88>)
 8006f48:	60e3      	str	r3, [r4, #12]
 8006f4a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006f4e:	6665      	str	r5, [r4, #100]	; 0x64
 8006f50:	f000 f847 	bl	8006fe2 <__retarget_lock_init_recursive>
 8006f54:	f7ff ff96 	bl	8006e84 <__sfp_lock_release>
 8006f58:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006f5c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006f60:	6025      	str	r5, [r4, #0]
 8006f62:	61a5      	str	r5, [r4, #24]
 8006f64:	2208      	movs	r2, #8
 8006f66:	4629      	mov	r1, r5
 8006f68:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006f6c:	f7ff fd2c 	bl	80069c8 <memset>
 8006f70:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006f74:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006f78:	4620      	mov	r0, r4
 8006f7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006f7c:	3468      	adds	r4, #104	; 0x68
 8006f7e:	e7d9      	b.n	8006f34 <__sfp+0x1c>
 8006f80:	2104      	movs	r1, #4
 8006f82:	4638      	mov	r0, r7
 8006f84:	f7ff ff62 	bl	8006e4c <__sfmoreglue>
 8006f88:	4604      	mov	r4, r0
 8006f8a:	6030      	str	r0, [r6, #0]
 8006f8c:	2800      	cmp	r0, #0
 8006f8e:	d1d5      	bne.n	8006f3c <__sfp+0x24>
 8006f90:	f7ff ff78 	bl	8006e84 <__sfp_lock_release>
 8006f94:	230c      	movs	r3, #12
 8006f96:	603b      	str	r3, [r7, #0]
 8006f98:	e7ee      	b.n	8006f78 <__sfp+0x60>
 8006f9a:	bf00      	nop
 8006f9c:	08007eac 	.word	0x08007eac
 8006fa0:	ffff0001 	.word	0xffff0001

08006fa4 <_fwalk_reent>:
 8006fa4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006fa8:	4606      	mov	r6, r0
 8006faa:	4688      	mov	r8, r1
 8006fac:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006fb0:	2700      	movs	r7, #0
 8006fb2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006fb6:	f1b9 0901 	subs.w	r9, r9, #1
 8006fba:	d505      	bpl.n	8006fc8 <_fwalk_reent+0x24>
 8006fbc:	6824      	ldr	r4, [r4, #0]
 8006fbe:	2c00      	cmp	r4, #0
 8006fc0:	d1f7      	bne.n	8006fb2 <_fwalk_reent+0xe>
 8006fc2:	4638      	mov	r0, r7
 8006fc4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006fc8:	89ab      	ldrh	r3, [r5, #12]
 8006fca:	2b01      	cmp	r3, #1
 8006fcc:	d907      	bls.n	8006fde <_fwalk_reent+0x3a>
 8006fce:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006fd2:	3301      	adds	r3, #1
 8006fd4:	d003      	beq.n	8006fde <_fwalk_reent+0x3a>
 8006fd6:	4629      	mov	r1, r5
 8006fd8:	4630      	mov	r0, r6
 8006fda:	47c0      	blx	r8
 8006fdc:	4307      	orrs	r7, r0
 8006fde:	3568      	adds	r5, #104	; 0x68
 8006fe0:	e7e9      	b.n	8006fb6 <_fwalk_reent+0x12>

08006fe2 <__retarget_lock_init_recursive>:
 8006fe2:	4770      	bx	lr

08006fe4 <__retarget_lock_acquire_recursive>:
 8006fe4:	4770      	bx	lr

08006fe6 <__retarget_lock_release_recursive>:
 8006fe6:	4770      	bx	lr

08006fe8 <__swhatbuf_r>:
 8006fe8:	b570      	push	{r4, r5, r6, lr}
 8006fea:	460e      	mov	r6, r1
 8006fec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ff0:	2900      	cmp	r1, #0
 8006ff2:	b096      	sub	sp, #88	; 0x58
 8006ff4:	4614      	mov	r4, r2
 8006ff6:	461d      	mov	r5, r3
 8006ff8:	da08      	bge.n	800700c <__swhatbuf_r+0x24>
 8006ffa:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8006ffe:	2200      	movs	r2, #0
 8007000:	602a      	str	r2, [r5, #0]
 8007002:	061a      	lsls	r2, r3, #24
 8007004:	d410      	bmi.n	8007028 <__swhatbuf_r+0x40>
 8007006:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800700a:	e00e      	b.n	800702a <__swhatbuf_r+0x42>
 800700c:	466a      	mov	r2, sp
 800700e:	f000 fc95 	bl	800793c <_fstat_r>
 8007012:	2800      	cmp	r0, #0
 8007014:	dbf1      	blt.n	8006ffa <__swhatbuf_r+0x12>
 8007016:	9a01      	ldr	r2, [sp, #4]
 8007018:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800701c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007020:	425a      	negs	r2, r3
 8007022:	415a      	adcs	r2, r3
 8007024:	602a      	str	r2, [r5, #0]
 8007026:	e7ee      	b.n	8007006 <__swhatbuf_r+0x1e>
 8007028:	2340      	movs	r3, #64	; 0x40
 800702a:	2000      	movs	r0, #0
 800702c:	6023      	str	r3, [r4, #0]
 800702e:	b016      	add	sp, #88	; 0x58
 8007030:	bd70      	pop	{r4, r5, r6, pc}
	...

08007034 <__smakebuf_r>:
 8007034:	898b      	ldrh	r3, [r1, #12]
 8007036:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007038:	079d      	lsls	r5, r3, #30
 800703a:	4606      	mov	r6, r0
 800703c:	460c      	mov	r4, r1
 800703e:	d507      	bpl.n	8007050 <__smakebuf_r+0x1c>
 8007040:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007044:	6023      	str	r3, [r4, #0]
 8007046:	6123      	str	r3, [r4, #16]
 8007048:	2301      	movs	r3, #1
 800704a:	6163      	str	r3, [r4, #20]
 800704c:	b002      	add	sp, #8
 800704e:	bd70      	pop	{r4, r5, r6, pc}
 8007050:	ab01      	add	r3, sp, #4
 8007052:	466a      	mov	r2, sp
 8007054:	f7ff ffc8 	bl	8006fe8 <__swhatbuf_r>
 8007058:	9900      	ldr	r1, [sp, #0]
 800705a:	4605      	mov	r5, r0
 800705c:	4630      	mov	r0, r6
 800705e:	f000 f895 	bl	800718c <_malloc_r>
 8007062:	b948      	cbnz	r0, 8007078 <__smakebuf_r+0x44>
 8007064:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007068:	059a      	lsls	r2, r3, #22
 800706a:	d4ef      	bmi.n	800704c <__smakebuf_r+0x18>
 800706c:	f023 0303 	bic.w	r3, r3, #3
 8007070:	f043 0302 	orr.w	r3, r3, #2
 8007074:	81a3      	strh	r3, [r4, #12]
 8007076:	e7e3      	b.n	8007040 <__smakebuf_r+0xc>
 8007078:	4b0d      	ldr	r3, [pc, #52]	; (80070b0 <__smakebuf_r+0x7c>)
 800707a:	62b3      	str	r3, [r6, #40]	; 0x28
 800707c:	89a3      	ldrh	r3, [r4, #12]
 800707e:	6020      	str	r0, [r4, #0]
 8007080:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007084:	81a3      	strh	r3, [r4, #12]
 8007086:	9b00      	ldr	r3, [sp, #0]
 8007088:	6163      	str	r3, [r4, #20]
 800708a:	9b01      	ldr	r3, [sp, #4]
 800708c:	6120      	str	r0, [r4, #16]
 800708e:	b15b      	cbz	r3, 80070a8 <__smakebuf_r+0x74>
 8007090:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007094:	4630      	mov	r0, r6
 8007096:	f000 fc63 	bl	8007960 <_isatty_r>
 800709a:	b128      	cbz	r0, 80070a8 <__smakebuf_r+0x74>
 800709c:	89a3      	ldrh	r3, [r4, #12]
 800709e:	f023 0303 	bic.w	r3, r3, #3
 80070a2:	f043 0301 	orr.w	r3, r3, #1
 80070a6:	81a3      	strh	r3, [r4, #12]
 80070a8:	89a0      	ldrh	r0, [r4, #12]
 80070aa:	4305      	orrs	r5, r0
 80070ac:	81a5      	strh	r5, [r4, #12]
 80070ae:	e7cd      	b.n	800704c <__smakebuf_r+0x18>
 80070b0:	08006e41 	.word	0x08006e41

080070b4 <_free_r>:
 80070b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80070b6:	2900      	cmp	r1, #0
 80070b8:	d044      	beq.n	8007144 <_free_r+0x90>
 80070ba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80070be:	9001      	str	r0, [sp, #4]
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	f1a1 0404 	sub.w	r4, r1, #4
 80070c6:	bfb8      	it	lt
 80070c8:	18e4      	addlt	r4, r4, r3
 80070ca:	f000 fc6b 	bl	80079a4 <__malloc_lock>
 80070ce:	4a1e      	ldr	r2, [pc, #120]	; (8007148 <_free_r+0x94>)
 80070d0:	9801      	ldr	r0, [sp, #4]
 80070d2:	6813      	ldr	r3, [r2, #0]
 80070d4:	b933      	cbnz	r3, 80070e4 <_free_r+0x30>
 80070d6:	6063      	str	r3, [r4, #4]
 80070d8:	6014      	str	r4, [r2, #0]
 80070da:	b003      	add	sp, #12
 80070dc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80070e0:	f000 bc66 	b.w	80079b0 <__malloc_unlock>
 80070e4:	42a3      	cmp	r3, r4
 80070e6:	d908      	bls.n	80070fa <_free_r+0x46>
 80070e8:	6825      	ldr	r5, [r4, #0]
 80070ea:	1961      	adds	r1, r4, r5
 80070ec:	428b      	cmp	r3, r1
 80070ee:	bf01      	itttt	eq
 80070f0:	6819      	ldreq	r1, [r3, #0]
 80070f2:	685b      	ldreq	r3, [r3, #4]
 80070f4:	1949      	addeq	r1, r1, r5
 80070f6:	6021      	streq	r1, [r4, #0]
 80070f8:	e7ed      	b.n	80070d6 <_free_r+0x22>
 80070fa:	461a      	mov	r2, r3
 80070fc:	685b      	ldr	r3, [r3, #4]
 80070fe:	b10b      	cbz	r3, 8007104 <_free_r+0x50>
 8007100:	42a3      	cmp	r3, r4
 8007102:	d9fa      	bls.n	80070fa <_free_r+0x46>
 8007104:	6811      	ldr	r1, [r2, #0]
 8007106:	1855      	adds	r5, r2, r1
 8007108:	42a5      	cmp	r5, r4
 800710a:	d10b      	bne.n	8007124 <_free_r+0x70>
 800710c:	6824      	ldr	r4, [r4, #0]
 800710e:	4421      	add	r1, r4
 8007110:	1854      	adds	r4, r2, r1
 8007112:	42a3      	cmp	r3, r4
 8007114:	6011      	str	r1, [r2, #0]
 8007116:	d1e0      	bne.n	80070da <_free_r+0x26>
 8007118:	681c      	ldr	r4, [r3, #0]
 800711a:	685b      	ldr	r3, [r3, #4]
 800711c:	6053      	str	r3, [r2, #4]
 800711e:	4421      	add	r1, r4
 8007120:	6011      	str	r1, [r2, #0]
 8007122:	e7da      	b.n	80070da <_free_r+0x26>
 8007124:	d902      	bls.n	800712c <_free_r+0x78>
 8007126:	230c      	movs	r3, #12
 8007128:	6003      	str	r3, [r0, #0]
 800712a:	e7d6      	b.n	80070da <_free_r+0x26>
 800712c:	6825      	ldr	r5, [r4, #0]
 800712e:	1961      	adds	r1, r4, r5
 8007130:	428b      	cmp	r3, r1
 8007132:	bf04      	itt	eq
 8007134:	6819      	ldreq	r1, [r3, #0]
 8007136:	685b      	ldreq	r3, [r3, #4]
 8007138:	6063      	str	r3, [r4, #4]
 800713a:	bf04      	itt	eq
 800713c:	1949      	addeq	r1, r1, r5
 800713e:	6021      	streq	r1, [r4, #0]
 8007140:	6054      	str	r4, [r2, #4]
 8007142:	e7ca      	b.n	80070da <_free_r+0x26>
 8007144:	b003      	add	sp, #12
 8007146:	bd30      	pop	{r4, r5, pc}
 8007148:	200006d0 	.word	0x200006d0

0800714c <sbrk_aligned>:
 800714c:	b570      	push	{r4, r5, r6, lr}
 800714e:	4e0e      	ldr	r6, [pc, #56]	; (8007188 <sbrk_aligned+0x3c>)
 8007150:	460c      	mov	r4, r1
 8007152:	6831      	ldr	r1, [r6, #0]
 8007154:	4605      	mov	r5, r0
 8007156:	b911      	cbnz	r1, 800715e <sbrk_aligned+0x12>
 8007158:	f000 fb7a 	bl	8007850 <_sbrk_r>
 800715c:	6030      	str	r0, [r6, #0]
 800715e:	4621      	mov	r1, r4
 8007160:	4628      	mov	r0, r5
 8007162:	f000 fb75 	bl	8007850 <_sbrk_r>
 8007166:	1c43      	adds	r3, r0, #1
 8007168:	d00a      	beq.n	8007180 <sbrk_aligned+0x34>
 800716a:	1cc4      	adds	r4, r0, #3
 800716c:	f024 0403 	bic.w	r4, r4, #3
 8007170:	42a0      	cmp	r0, r4
 8007172:	d007      	beq.n	8007184 <sbrk_aligned+0x38>
 8007174:	1a21      	subs	r1, r4, r0
 8007176:	4628      	mov	r0, r5
 8007178:	f000 fb6a 	bl	8007850 <_sbrk_r>
 800717c:	3001      	adds	r0, #1
 800717e:	d101      	bne.n	8007184 <sbrk_aligned+0x38>
 8007180:	f04f 34ff 	mov.w	r4, #4294967295
 8007184:	4620      	mov	r0, r4
 8007186:	bd70      	pop	{r4, r5, r6, pc}
 8007188:	200006d4 	.word	0x200006d4

0800718c <_malloc_r>:
 800718c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007190:	1ccd      	adds	r5, r1, #3
 8007192:	f025 0503 	bic.w	r5, r5, #3
 8007196:	3508      	adds	r5, #8
 8007198:	2d0c      	cmp	r5, #12
 800719a:	bf38      	it	cc
 800719c:	250c      	movcc	r5, #12
 800719e:	2d00      	cmp	r5, #0
 80071a0:	4607      	mov	r7, r0
 80071a2:	db01      	blt.n	80071a8 <_malloc_r+0x1c>
 80071a4:	42a9      	cmp	r1, r5
 80071a6:	d905      	bls.n	80071b4 <_malloc_r+0x28>
 80071a8:	230c      	movs	r3, #12
 80071aa:	603b      	str	r3, [r7, #0]
 80071ac:	2600      	movs	r6, #0
 80071ae:	4630      	mov	r0, r6
 80071b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80071b4:	4e2e      	ldr	r6, [pc, #184]	; (8007270 <_malloc_r+0xe4>)
 80071b6:	f000 fbf5 	bl	80079a4 <__malloc_lock>
 80071ba:	6833      	ldr	r3, [r6, #0]
 80071bc:	461c      	mov	r4, r3
 80071be:	bb34      	cbnz	r4, 800720e <_malloc_r+0x82>
 80071c0:	4629      	mov	r1, r5
 80071c2:	4638      	mov	r0, r7
 80071c4:	f7ff ffc2 	bl	800714c <sbrk_aligned>
 80071c8:	1c43      	adds	r3, r0, #1
 80071ca:	4604      	mov	r4, r0
 80071cc:	d14d      	bne.n	800726a <_malloc_r+0xde>
 80071ce:	6834      	ldr	r4, [r6, #0]
 80071d0:	4626      	mov	r6, r4
 80071d2:	2e00      	cmp	r6, #0
 80071d4:	d140      	bne.n	8007258 <_malloc_r+0xcc>
 80071d6:	6823      	ldr	r3, [r4, #0]
 80071d8:	4631      	mov	r1, r6
 80071da:	4638      	mov	r0, r7
 80071dc:	eb04 0803 	add.w	r8, r4, r3
 80071e0:	f000 fb36 	bl	8007850 <_sbrk_r>
 80071e4:	4580      	cmp	r8, r0
 80071e6:	d13a      	bne.n	800725e <_malloc_r+0xd2>
 80071e8:	6821      	ldr	r1, [r4, #0]
 80071ea:	3503      	adds	r5, #3
 80071ec:	1a6d      	subs	r5, r5, r1
 80071ee:	f025 0503 	bic.w	r5, r5, #3
 80071f2:	3508      	adds	r5, #8
 80071f4:	2d0c      	cmp	r5, #12
 80071f6:	bf38      	it	cc
 80071f8:	250c      	movcc	r5, #12
 80071fa:	4629      	mov	r1, r5
 80071fc:	4638      	mov	r0, r7
 80071fe:	f7ff ffa5 	bl	800714c <sbrk_aligned>
 8007202:	3001      	adds	r0, #1
 8007204:	d02b      	beq.n	800725e <_malloc_r+0xd2>
 8007206:	6823      	ldr	r3, [r4, #0]
 8007208:	442b      	add	r3, r5
 800720a:	6023      	str	r3, [r4, #0]
 800720c:	e00e      	b.n	800722c <_malloc_r+0xa0>
 800720e:	6822      	ldr	r2, [r4, #0]
 8007210:	1b52      	subs	r2, r2, r5
 8007212:	d41e      	bmi.n	8007252 <_malloc_r+0xc6>
 8007214:	2a0b      	cmp	r2, #11
 8007216:	d916      	bls.n	8007246 <_malloc_r+0xba>
 8007218:	1961      	adds	r1, r4, r5
 800721a:	42a3      	cmp	r3, r4
 800721c:	6025      	str	r5, [r4, #0]
 800721e:	bf18      	it	ne
 8007220:	6059      	strne	r1, [r3, #4]
 8007222:	6863      	ldr	r3, [r4, #4]
 8007224:	bf08      	it	eq
 8007226:	6031      	streq	r1, [r6, #0]
 8007228:	5162      	str	r2, [r4, r5]
 800722a:	604b      	str	r3, [r1, #4]
 800722c:	4638      	mov	r0, r7
 800722e:	f104 060b 	add.w	r6, r4, #11
 8007232:	f000 fbbd 	bl	80079b0 <__malloc_unlock>
 8007236:	f026 0607 	bic.w	r6, r6, #7
 800723a:	1d23      	adds	r3, r4, #4
 800723c:	1af2      	subs	r2, r6, r3
 800723e:	d0b6      	beq.n	80071ae <_malloc_r+0x22>
 8007240:	1b9b      	subs	r3, r3, r6
 8007242:	50a3      	str	r3, [r4, r2]
 8007244:	e7b3      	b.n	80071ae <_malloc_r+0x22>
 8007246:	6862      	ldr	r2, [r4, #4]
 8007248:	42a3      	cmp	r3, r4
 800724a:	bf0c      	ite	eq
 800724c:	6032      	streq	r2, [r6, #0]
 800724e:	605a      	strne	r2, [r3, #4]
 8007250:	e7ec      	b.n	800722c <_malloc_r+0xa0>
 8007252:	4623      	mov	r3, r4
 8007254:	6864      	ldr	r4, [r4, #4]
 8007256:	e7b2      	b.n	80071be <_malloc_r+0x32>
 8007258:	4634      	mov	r4, r6
 800725a:	6876      	ldr	r6, [r6, #4]
 800725c:	e7b9      	b.n	80071d2 <_malloc_r+0x46>
 800725e:	230c      	movs	r3, #12
 8007260:	603b      	str	r3, [r7, #0]
 8007262:	4638      	mov	r0, r7
 8007264:	f000 fba4 	bl	80079b0 <__malloc_unlock>
 8007268:	e7a1      	b.n	80071ae <_malloc_r+0x22>
 800726a:	6025      	str	r5, [r4, #0]
 800726c:	e7de      	b.n	800722c <_malloc_r+0xa0>
 800726e:	bf00      	nop
 8007270:	200006d0 	.word	0x200006d0

08007274 <__sfputc_r>:
 8007274:	6893      	ldr	r3, [r2, #8]
 8007276:	3b01      	subs	r3, #1
 8007278:	2b00      	cmp	r3, #0
 800727a:	b410      	push	{r4}
 800727c:	6093      	str	r3, [r2, #8]
 800727e:	da08      	bge.n	8007292 <__sfputc_r+0x1e>
 8007280:	6994      	ldr	r4, [r2, #24]
 8007282:	42a3      	cmp	r3, r4
 8007284:	db01      	blt.n	800728a <__sfputc_r+0x16>
 8007286:	290a      	cmp	r1, #10
 8007288:	d103      	bne.n	8007292 <__sfputc_r+0x1e>
 800728a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800728e:	f7ff bc31 	b.w	8006af4 <__swbuf_r>
 8007292:	6813      	ldr	r3, [r2, #0]
 8007294:	1c58      	adds	r0, r3, #1
 8007296:	6010      	str	r0, [r2, #0]
 8007298:	7019      	strb	r1, [r3, #0]
 800729a:	4608      	mov	r0, r1
 800729c:	f85d 4b04 	ldr.w	r4, [sp], #4
 80072a0:	4770      	bx	lr

080072a2 <__sfputs_r>:
 80072a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072a4:	4606      	mov	r6, r0
 80072a6:	460f      	mov	r7, r1
 80072a8:	4614      	mov	r4, r2
 80072aa:	18d5      	adds	r5, r2, r3
 80072ac:	42ac      	cmp	r4, r5
 80072ae:	d101      	bne.n	80072b4 <__sfputs_r+0x12>
 80072b0:	2000      	movs	r0, #0
 80072b2:	e007      	b.n	80072c4 <__sfputs_r+0x22>
 80072b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80072b8:	463a      	mov	r2, r7
 80072ba:	4630      	mov	r0, r6
 80072bc:	f7ff ffda 	bl	8007274 <__sfputc_r>
 80072c0:	1c43      	adds	r3, r0, #1
 80072c2:	d1f3      	bne.n	80072ac <__sfputs_r+0xa>
 80072c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080072c8 <_vfiprintf_r>:
 80072c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072cc:	460d      	mov	r5, r1
 80072ce:	b09d      	sub	sp, #116	; 0x74
 80072d0:	4614      	mov	r4, r2
 80072d2:	4698      	mov	r8, r3
 80072d4:	4606      	mov	r6, r0
 80072d6:	b118      	cbz	r0, 80072e0 <_vfiprintf_r+0x18>
 80072d8:	6983      	ldr	r3, [r0, #24]
 80072da:	b90b      	cbnz	r3, 80072e0 <_vfiprintf_r+0x18>
 80072dc:	f7ff fde4 	bl	8006ea8 <__sinit>
 80072e0:	4b89      	ldr	r3, [pc, #548]	; (8007508 <_vfiprintf_r+0x240>)
 80072e2:	429d      	cmp	r5, r3
 80072e4:	d11b      	bne.n	800731e <_vfiprintf_r+0x56>
 80072e6:	6875      	ldr	r5, [r6, #4]
 80072e8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80072ea:	07d9      	lsls	r1, r3, #31
 80072ec:	d405      	bmi.n	80072fa <_vfiprintf_r+0x32>
 80072ee:	89ab      	ldrh	r3, [r5, #12]
 80072f0:	059a      	lsls	r2, r3, #22
 80072f2:	d402      	bmi.n	80072fa <_vfiprintf_r+0x32>
 80072f4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80072f6:	f7ff fe75 	bl	8006fe4 <__retarget_lock_acquire_recursive>
 80072fa:	89ab      	ldrh	r3, [r5, #12]
 80072fc:	071b      	lsls	r3, r3, #28
 80072fe:	d501      	bpl.n	8007304 <_vfiprintf_r+0x3c>
 8007300:	692b      	ldr	r3, [r5, #16]
 8007302:	b9eb      	cbnz	r3, 8007340 <_vfiprintf_r+0x78>
 8007304:	4629      	mov	r1, r5
 8007306:	4630      	mov	r0, r6
 8007308:	f7ff fc46 	bl	8006b98 <__swsetup_r>
 800730c:	b1c0      	cbz	r0, 8007340 <_vfiprintf_r+0x78>
 800730e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007310:	07dc      	lsls	r4, r3, #31
 8007312:	d50e      	bpl.n	8007332 <_vfiprintf_r+0x6a>
 8007314:	f04f 30ff 	mov.w	r0, #4294967295
 8007318:	b01d      	add	sp, #116	; 0x74
 800731a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800731e:	4b7b      	ldr	r3, [pc, #492]	; (800750c <_vfiprintf_r+0x244>)
 8007320:	429d      	cmp	r5, r3
 8007322:	d101      	bne.n	8007328 <_vfiprintf_r+0x60>
 8007324:	68b5      	ldr	r5, [r6, #8]
 8007326:	e7df      	b.n	80072e8 <_vfiprintf_r+0x20>
 8007328:	4b79      	ldr	r3, [pc, #484]	; (8007510 <_vfiprintf_r+0x248>)
 800732a:	429d      	cmp	r5, r3
 800732c:	bf08      	it	eq
 800732e:	68f5      	ldreq	r5, [r6, #12]
 8007330:	e7da      	b.n	80072e8 <_vfiprintf_r+0x20>
 8007332:	89ab      	ldrh	r3, [r5, #12]
 8007334:	0598      	lsls	r0, r3, #22
 8007336:	d4ed      	bmi.n	8007314 <_vfiprintf_r+0x4c>
 8007338:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800733a:	f7ff fe54 	bl	8006fe6 <__retarget_lock_release_recursive>
 800733e:	e7e9      	b.n	8007314 <_vfiprintf_r+0x4c>
 8007340:	2300      	movs	r3, #0
 8007342:	9309      	str	r3, [sp, #36]	; 0x24
 8007344:	2320      	movs	r3, #32
 8007346:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800734a:	f8cd 800c 	str.w	r8, [sp, #12]
 800734e:	2330      	movs	r3, #48	; 0x30
 8007350:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007514 <_vfiprintf_r+0x24c>
 8007354:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007358:	f04f 0901 	mov.w	r9, #1
 800735c:	4623      	mov	r3, r4
 800735e:	469a      	mov	sl, r3
 8007360:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007364:	b10a      	cbz	r2, 800736a <_vfiprintf_r+0xa2>
 8007366:	2a25      	cmp	r2, #37	; 0x25
 8007368:	d1f9      	bne.n	800735e <_vfiprintf_r+0x96>
 800736a:	ebba 0b04 	subs.w	fp, sl, r4
 800736e:	d00b      	beq.n	8007388 <_vfiprintf_r+0xc0>
 8007370:	465b      	mov	r3, fp
 8007372:	4622      	mov	r2, r4
 8007374:	4629      	mov	r1, r5
 8007376:	4630      	mov	r0, r6
 8007378:	f7ff ff93 	bl	80072a2 <__sfputs_r>
 800737c:	3001      	adds	r0, #1
 800737e:	f000 80aa 	beq.w	80074d6 <_vfiprintf_r+0x20e>
 8007382:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007384:	445a      	add	r2, fp
 8007386:	9209      	str	r2, [sp, #36]	; 0x24
 8007388:	f89a 3000 	ldrb.w	r3, [sl]
 800738c:	2b00      	cmp	r3, #0
 800738e:	f000 80a2 	beq.w	80074d6 <_vfiprintf_r+0x20e>
 8007392:	2300      	movs	r3, #0
 8007394:	f04f 32ff 	mov.w	r2, #4294967295
 8007398:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800739c:	f10a 0a01 	add.w	sl, sl, #1
 80073a0:	9304      	str	r3, [sp, #16]
 80073a2:	9307      	str	r3, [sp, #28]
 80073a4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80073a8:	931a      	str	r3, [sp, #104]	; 0x68
 80073aa:	4654      	mov	r4, sl
 80073ac:	2205      	movs	r2, #5
 80073ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 80073b2:	4858      	ldr	r0, [pc, #352]	; (8007514 <_vfiprintf_r+0x24c>)
 80073b4:	f7f8 ff2c 	bl	8000210 <memchr>
 80073b8:	9a04      	ldr	r2, [sp, #16]
 80073ba:	b9d8      	cbnz	r0, 80073f4 <_vfiprintf_r+0x12c>
 80073bc:	06d1      	lsls	r1, r2, #27
 80073be:	bf44      	itt	mi
 80073c0:	2320      	movmi	r3, #32
 80073c2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80073c6:	0713      	lsls	r3, r2, #28
 80073c8:	bf44      	itt	mi
 80073ca:	232b      	movmi	r3, #43	; 0x2b
 80073cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80073d0:	f89a 3000 	ldrb.w	r3, [sl]
 80073d4:	2b2a      	cmp	r3, #42	; 0x2a
 80073d6:	d015      	beq.n	8007404 <_vfiprintf_r+0x13c>
 80073d8:	9a07      	ldr	r2, [sp, #28]
 80073da:	4654      	mov	r4, sl
 80073dc:	2000      	movs	r0, #0
 80073de:	f04f 0c0a 	mov.w	ip, #10
 80073e2:	4621      	mov	r1, r4
 80073e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80073e8:	3b30      	subs	r3, #48	; 0x30
 80073ea:	2b09      	cmp	r3, #9
 80073ec:	d94e      	bls.n	800748c <_vfiprintf_r+0x1c4>
 80073ee:	b1b0      	cbz	r0, 800741e <_vfiprintf_r+0x156>
 80073f0:	9207      	str	r2, [sp, #28]
 80073f2:	e014      	b.n	800741e <_vfiprintf_r+0x156>
 80073f4:	eba0 0308 	sub.w	r3, r0, r8
 80073f8:	fa09 f303 	lsl.w	r3, r9, r3
 80073fc:	4313      	orrs	r3, r2
 80073fe:	9304      	str	r3, [sp, #16]
 8007400:	46a2      	mov	sl, r4
 8007402:	e7d2      	b.n	80073aa <_vfiprintf_r+0xe2>
 8007404:	9b03      	ldr	r3, [sp, #12]
 8007406:	1d19      	adds	r1, r3, #4
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	9103      	str	r1, [sp, #12]
 800740c:	2b00      	cmp	r3, #0
 800740e:	bfbb      	ittet	lt
 8007410:	425b      	neglt	r3, r3
 8007412:	f042 0202 	orrlt.w	r2, r2, #2
 8007416:	9307      	strge	r3, [sp, #28]
 8007418:	9307      	strlt	r3, [sp, #28]
 800741a:	bfb8      	it	lt
 800741c:	9204      	strlt	r2, [sp, #16]
 800741e:	7823      	ldrb	r3, [r4, #0]
 8007420:	2b2e      	cmp	r3, #46	; 0x2e
 8007422:	d10c      	bne.n	800743e <_vfiprintf_r+0x176>
 8007424:	7863      	ldrb	r3, [r4, #1]
 8007426:	2b2a      	cmp	r3, #42	; 0x2a
 8007428:	d135      	bne.n	8007496 <_vfiprintf_r+0x1ce>
 800742a:	9b03      	ldr	r3, [sp, #12]
 800742c:	1d1a      	adds	r2, r3, #4
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	9203      	str	r2, [sp, #12]
 8007432:	2b00      	cmp	r3, #0
 8007434:	bfb8      	it	lt
 8007436:	f04f 33ff 	movlt.w	r3, #4294967295
 800743a:	3402      	adds	r4, #2
 800743c:	9305      	str	r3, [sp, #20]
 800743e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007524 <_vfiprintf_r+0x25c>
 8007442:	7821      	ldrb	r1, [r4, #0]
 8007444:	2203      	movs	r2, #3
 8007446:	4650      	mov	r0, sl
 8007448:	f7f8 fee2 	bl	8000210 <memchr>
 800744c:	b140      	cbz	r0, 8007460 <_vfiprintf_r+0x198>
 800744e:	2340      	movs	r3, #64	; 0x40
 8007450:	eba0 000a 	sub.w	r0, r0, sl
 8007454:	fa03 f000 	lsl.w	r0, r3, r0
 8007458:	9b04      	ldr	r3, [sp, #16]
 800745a:	4303      	orrs	r3, r0
 800745c:	3401      	adds	r4, #1
 800745e:	9304      	str	r3, [sp, #16]
 8007460:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007464:	482c      	ldr	r0, [pc, #176]	; (8007518 <_vfiprintf_r+0x250>)
 8007466:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800746a:	2206      	movs	r2, #6
 800746c:	f7f8 fed0 	bl	8000210 <memchr>
 8007470:	2800      	cmp	r0, #0
 8007472:	d03f      	beq.n	80074f4 <_vfiprintf_r+0x22c>
 8007474:	4b29      	ldr	r3, [pc, #164]	; (800751c <_vfiprintf_r+0x254>)
 8007476:	bb1b      	cbnz	r3, 80074c0 <_vfiprintf_r+0x1f8>
 8007478:	9b03      	ldr	r3, [sp, #12]
 800747a:	3307      	adds	r3, #7
 800747c:	f023 0307 	bic.w	r3, r3, #7
 8007480:	3308      	adds	r3, #8
 8007482:	9303      	str	r3, [sp, #12]
 8007484:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007486:	443b      	add	r3, r7
 8007488:	9309      	str	r3, [sp, #36]	; 0x24
 800748a:	e767      	b.n	800735c <_vfiprintf_r+0x94>
 800748c:	fb0c 3202 	mla	r2, ip, r2, r3
 8007490:	460c      	mov	r4, r1
 8007492:	2001      	movs	r0, #1
 8007494:	e7a5      	b.n	80073e2 <_vfiprintf_r+0x11a>
 8007496:	2300      	movs	r3, #0
 8007498:	3401      	adds	r4, #1
 800749a:	9305      	str	r3, [sp, #20]
 800749c:	4619      	mov	r1, r3
 800749e:	f04f 0c0a 	mov.w	ip, #10
 80074a2:	4620      	mov	r0, r4
 80074a4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80074a8:	3a30      	subs	r2, #48	; 0x30
 80074aa:	2a09      	cmp	r2, #9
 80074ac:	d903      	bls.n	80074b6 <_vfiprintf_r+0x1ee>
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d0c5      	beq.n	800743e <_vfiprintf_r+0x176>
 80074b2:	9105      	str	r1, [sp, #20]
 80074b4:	e7c3      	b.n	800743e <_vfiprintf_r+0x176>
 80074b6:	fb0c 2101 	mla	r1, ip, r1, r2
 80074ba:	4604      	mov	r4, r0
 80074bc:	2301      	movs	r3, #1
 80074be:	e7f0      	b.n	80074a2 <_vfiprintf_r+0x1da>
 80074c0:	ab03      	add	r3, sp, #12
 80074c2:	9300      	str	r3, [sp, #0]
 80074c4:	462a      	mov	r2, r5
 80074c6:	4b16      	ldr	r3, [pc, #88]	; (8007520 <_vfiprintf_r+0x258>)
 80074c8:	a904      	add	r1, sp, #16
 80074ca:	4630      	mov	r0, r6
 80074cc:	f3af 8000 	nop.w
 80074d0:	4607      	mov	r7, r0
 80074d2:	1c78      	adds	r0, r7, #1
 80074d4:	d1d6      	bne.n	8007484 <_vfiprintf_r+0x1bc>
 80074d6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80074d8:	07d9      	lsls	r1, r3, #31
 80074da:	d405      	bmi.n	80074e8 <_vfiprintf_r+0x220>
 80074dc:	89ab      	ldrh	r3, [r5, #12]
 80074de:	059a      	lsls	r2, r3, #22
 80074e0:	d402      	bmi.n	80074e8 <_vfiprintf_r+0x220>
 80074e2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80074e4:	f7ff fd7f 	bl	8006fe6 <__retarget_lock_release_recursive>
 80074e8:	89ab      	ldrh	r3, [r5, #12]
 80074ea:	065b      	lsls	r3, r3, #25
 80074ec:	f53f af12 	bmi.w	8007314 <_vfiprintf_r+0x4c>
 80074f0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80074f2:	e711      	b.n	8007318 <_vfiprintf_r+0x50>
 80074f4:	ab03      	add	r3, sp, #12
 80074f6:	9300      	str	r3, [sp, #0]
 80074f8:	462a      	mov	r2, r5
 80074fa:	4b09      	ldr	r3, [pc, #36]	; (8007520 <_vfiprintf_r+0x258>)
 80074fc:	a904      	add	r1, sp, #16
 80074fe:	4630      	mov	r0, r6
 8007500:	f000 f880 	bl	8007604 <_printf_i>
 8007504:	e7e4      	b.n	80074d0 <_vfiprintf_r+0x208>
 8007506:	bf00      	nop
 8007508:	08007ed0 	.word	0x08007ed0
 800750c:	08007ef0 	.word	0x08007ef0
 8007510:	08007eb0 	.word	0x08007eb0
 8007514:	08007f10 	.word	0x08007f10
 8007518:	08007f1a 	.word	0x08007f1a
 800751c:	00000000 	.word	0x00000000
 8007520:	080072a3 	.word	0x080072a3
 8007524:	08007f16 	.word	0x08007f16

08007528 <_printf_common>:
 8007528:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800752c:	4616      	mov	r6, r2
 800752e:	4699      	mov	r9, r3
 8007530:	688a      	ldr	r2, [r1, #8]
 8007532:	690b      	ldr	r3, [r1, #16]
 8007534:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007538:	4293      	cmp	r3, r2
 800753a:	bfb8      	it	lt
 800753c:	4613      	movlt	r3, r2
 800753e:	6033      	str	r3, [r6, #0]
 8007540:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007544:	4607      	mov	r7, r0
 8007546:	460c      	mov	r4, r1
 8007548:	b10a      	cbz	r2, 800754e <_printf_common+0x26>
 800754a:	3301      	adds	r3, #1
 800754c:	6033      	str	r3, [r6, #0]
 800754e:	6823      	ldr	r3, [r4, #0]
 8007550:	0699      	lsls	r1, r3, #26
 8007552:	bf42      	ittt	mi
 8007554:	6833      	ldrmi	r3, [r6, #0]
 8007556:	3302      	addmi	r3, #2
 8007558:	6033      	strmi	r3, [r6, #0]
 800755a:	6825      	ldr	r5, [r4, #0]
 800755c:	f015 0506 	ands.w	r5, r5, #6
 8007560:	d106      	bne.n	8007570 <_printf_common+0x48>
 8007562:	f104 0a19 	add.w	sl, r4, #25
 8007566:	68e3      	ldr	r3, [r4, #12]
 8007568:	6832      	ldr	r2, [r6, #0]
 800756a:	1a9b      	subs	r3, r3, r2
 800756c:	42ab      	cmp	r3, r5
 800756e:	dc26      	bgt.n	80075be <_printf_common+0x96>
 8007570:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007574:	1e13      	subs	r3, r2, #0
 8007576:	6822      	ldr	r2, [r4, #0]
 8007578:	bf18      	it	ne
 800757a:	2301      	movne	r3, #1
 800757c:	0692      	lsls	r2, r2, #26
 800757e:	d42b      	bmi.n	80075d8 <_printf_common+0xb0>
 8007580:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007584:	4649      	mov	r1, r9
 8007586:	4638      	mov	r0, r7
 8007588:	47c0      	blx	r8
 800758a:	3001      	adds	r0, #1
 800758c:	d01e      	beq.n	80075cc <_printf_common+0xa4>
 800758e:	6823      	ldr	r3, [r4, #0]
 8007590:	68e5      	ldr	r5, [r4, #12]
 8007592:	6832      	ldr	r2, [r6, #0]
 8007594:	f003 0306 	and.w	r3, r3, #6
 8007598:	2b04      	cmp	r3, #4
 800759a:	bf08      	it	eq
 800759c:	1aad      	subeq	r5, r5, r2
 800759e:	68a3      	ldr	r3, [r4, #8]
 80075a0:	6922      	ldr	r2, [r4, #16]
 80075a2:	bf0c      	ite	eq
 80075a4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80075a8:	2500      	movne	r5, #0
 80075aa:	4293      	cmp	r3, r2
 80075ac:	bfc4      	itt	gt
 80075ae:	1a9b      	subgt	r3, r3, r2
 80075b0:	18ed      	addgt	r5, r5, r3
 80075b2:	2600      	movs	r6, #0
 80075b4:	341a      	adds	r4, #26
 80075b6:	42b5      	cmp	r5, r6
 80075b8:	d11a      	bne.n	80075f0 <_printf_common+0xc8>
 80075ba:	2000      	movs	r0, #0
 80075bc:	e008      	b.n	80075d0 <_printf_common+0xa8>
 80075be:	2301      	movs	r3, #1
 80075c0:	4652      	mov	r2, sl
 80075c2:	4649      	mov	r1, r9
 80075c4:	4638      	mov	r0, r7
 80075c6:	47c0      	blx	r8
 80075c8:	3001      	adds	r0, #1
 80075ca:	d103      	bne.n	80075d4 <_printf_common+0xac>
 80075cc:	f04f 30ff 	mov.w	r0, #4294967295
 80075d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80075d4:	3501      	adds	r5, #1
 80075d6:	e7c6      	b.n	8007566 <_printf_common+0x3e>
 80075d8:	18e1      	adds	r1, r4, r3
 80075da:	1c5a      	adds	r2, r3, #1
 80075dc:	2030      	movs	r0, #48	; 0x30
 80075de:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80075e2:	4422      	add	r2, r4
 80075e4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80075e8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80075ec:	3302      	adds	r3, #2
 80075ee:	e7c7      	b.n	8007580 <_printf_common+0x58>
 80075f0:	2301      	movs	r3, #1
 80075f2:	4622      	mov	r2, r4
 80075f4:	4649      	mov	r1, r9
 80075f6:	4638      	mov	r0, r7
 80075f8:	47c0      	blx	r8
 80075fa:	3001      	adds	r0, #1
 80075fc:	d0e6      	beq.n	80075cc <_printf_common+0xa4>
 80075fe:	3601      	adds	r6, #1
 8007600:	e7d9      	b.n	80075b6 <_printf_common+0x8e>
	...

08007604 <_printf_i>:
 8007604:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007608:	7e0f      	ldrb	r7, [r1, #24]
 800760a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800760c:	2f78      	cmp	r7, #120	; 0x78
 800760e:	4691      	mov	r9, r2
 8007610:	4680      	mov	r8, r0
 8007612:	460c      	mov	r4, r1
 8007614:	469a      	mov	sl, r3
 8007616:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800761a:	d807      	bhi.n	800762c <_printf_i+0x28>
 800761c:	2f62      	cmp	r7, #98	; 0x62
 800761e:	d80a      	bhi.n	8007636 <_printf_i+0x32>
 8007620:	2f00      	cmp	r7, #0
 8007622:	f000 80d8 	beq.w	80077d6 <_printf_i+0x1d2>
 8007626:	2f58      	cmp	r7, #88	; 0x58
 8007628:	f000 80a3 	beq.w	8007772 <_printf_i+0x16e>
 800762c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007630:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007634:	e03a      	b.n	80076ac <_printf_i+0xa8>
 8007636:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800763a:	2b15      	cmp	r3, #21
 800763c:	d8f6      	bhi.n	800762c <_printf_i+0x28>
 800763e:	a101      	add	r1, pc, #4	; (adr r1, 8007644 <_printf_i+0x40>)
 8007640:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007644:	0800769d 	.word	0x0800769d
 8007648:	080076b1 	.word	0x080076b1
 800764c:	0800762d 	.word	0x0800762d
 8007650:	0800762d 	.word	0x0800762d
 8007654:	0800762d 	.word	0x0800762d
 8007658:	0800762d 	.word	0x0800762d
 800765c:	080076b1 	.word	0x080076b1
 8007660:	0800762d 	.word	0x0800762d
 8007664:	0800762d 	.word	0x0800762d
 8007668:	0800762d 	.word	0x0800762d
 800766c:	0800762d 	.word	0x0800762d
 8007670:	080077bd 	.word	0x080077bd
 8007674:	080076e1 	.word	0x080076e1
 8007678:	0800779f 	.word	0x0800779f
 800767c:	0800762d 	.word	0x0800762d
 8007680:	0800762d 	.word	0x0800762d
 8007684:	080077df 	.word	0x080077df
 8007688:	0800762d 	.word	0x0800762d
 800768c:	080076e1 	.word	0x080076e1
 8007690:	0800762d 	.word	0x0800762d
 8007694:	0800762d 	.word	0x0800762d
 8007698:	080077a7 	.word	0x080077a7
 800769c:	682b      	ldr	r3, [r5, #0]
 800769e:	1d1a      	adds	r2, r3, #4
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	602a      	str	r2, [r5, #0]
 80076a4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80076a8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80076ac:	2301      	movs	r3, #1
 80076ae:	e0a3      	b.n	80077f8 <_printf_i+0x1f4>
 80076b0:	6820      	ldr	r0, [r4, #0]
 80076b2:	6829      	ldr	r1, [r5, #0]
 80076b4:	0606      	lsls	r6, r0, #24
 80076b6:	f101 0304 	add.w	r3, r1, #4
 80076ba:	d50a      	bpl.n	80076d2 <_printf_i+0xce>
 80076bc:	680e      	ldr	r6, [r1, #0]
 80076be:	602b      	str	r3, [r5, #0]
 80076c0:	2e00      	cmp	r6, #0
 80076c2:	da03      	bge.n	80076cc <_printf_i+0xc8>
 80076c4:	232d      	movs	r3, #45	; 0x2d
 80076c6:	4276      	negs	r6, r6
 80076c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80076cc:	485e      	ldr	r0, [pc, #376]	; (8007848 <_printf_i+0x244>)
 80076ce:	230a      	movs	r3, #10
 80076d0:	e019      	b.n	8007706 <_printf_i+0x102>
 80076d2:	680e      	ldr	r6, [r1, #0]
 80076d4:	602b      	str	r3, [r5, #0]
 80076d6:	f010 0f40 	tst.w	r0, #64	; 0x40
 80076da:	bf18      	it	ne
 80076dc:	b236      	sxthne	r6, r6
 80076de:	e7ef      	b.n	80076c0 <_printf_i+0xbc>
 80076e0:	682b      	ldr	r3, [r5, #0]
 80076e2:	6820      	ldr	r0, [r4, #0]
 80076e4:	1d19      	adds	r1, r3, #4
 80076e6:	6029      	str	r1, [r5, #0]
 80076e8:	0601      	lsls	r1, r0, #24
 80076ea:	d501      	bpl.n	80076f0 <_printf_i+0xec>
 80076ec:	681e      	ldr	r6, [r3, #0]
 80076ee:	e002      	b.n	80076f6 <_printf_i+0xf2>
 80076f0:	0646      	lsls	r6, r0, #25
 80076f2:	d5fb      	bpl.n	80076ec <_printf_i+0xe8>
 80076f4:	881e      	ldrh	r6, [r3, #0]
 80076f6:	4854      	ldr	r0, [pc, #336]	; (8007848 <_printf_i+0x244>)
 80076f8:	2f6f      	cmp	r7, #111	; 0x6f
 80076fa:	bf0c      	ite	eq
 80076fc:	2308      	moveq	r3, #8
 80076fe:	230a      	movne	r3, #10
 8007700:	2100      	movs	r1, #0
 8007702:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007706:	6865      	ldr	r5, [r4, #4]
 8007708:	60a5      	str	r5, [r4, #8]
 800770a:	2d00      	cmp	r5, #0
 800770c:	bfa2      	ittt	ge
 800770e:	6821      	ldrge	r1, [r4, #0]
 8007710:	f021 0104 	bicge.w	r1, r1, #4
 8007714:	6021      	strge	r1, [r4, #0]
 8007716:	b90e      	cbnz	r6, 800771c <_printf_i+0x118>
 8007718:	2d00      	cmp	r5, #0
 800771a:	d04d      	beq.n	80077b8 <_printf_i+0x1b4>
 800771c:	4615      	mov	r5, r2
 800771e:	fbb6 f1f3 	udiv	r1, r6, r3
 8007722:	fb03 6711 	mls	r7, r3, r1, r6
 8007726:	5dc7      	ldrb	r7, [r0, r7]
 8007728:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800772c:	4637      	mov	r7, r6
 800772e:	42bb      	cmp	r3, r7
 8007730:	460e      	mov	r6, r1
 8007732:	d9f4      	bls.n	800771e <_printf_i+0x11a>
 8007734:	2b08      	cmp	r3, #8
 8007736:	d10b      	bne.n	8007750 <_printf_i+0x14c>
 8007738:	6823      	ldr	r3, [r4, #0]
 800773a:	07de      	lsls	r6, r3, #31
 800773c:	d508      	bpl.n	8007750 <_printf_i+0x14c>
 800773e:	6923      	ldr	r3, [r4, #16]
 8007740:	6861      	ldr	r1, [r4, #4]
 8007742:	4299      	cmp	r1, r3
 8007744:	bfde      	ittt	le
 8007746:	2330      	movle	r3, #48	; 0x30
 8007748:	f805 3c01 	strble.w	r3, [r5, #-1]
 800774c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007750:	1b52      	subs	r2, r2, r5
 8007752:	6122      	str	r2, [r4, #16]
 8007754:	f8cd a000 	str.w	sl, [sp]
 8007758:	464b      	mov	r3, r9
 800775a:	aa03      	add	r2, sp, #12
 800775c:	4621      	mov	r1, r4
 800775e:	4640      	mov	r0, r8
 8007760:	f7ff fee2 	bl	8007528 <_printf_common>
 8007764:	3001      	adds	r0, #1
 8007766:	d14c      	bne.n	8007802 <_printf_i+0x1fe>
 8007768:	f04f 30ff 	mov.w	r0, #4294967295
 800776c:	b004      	add	sp, #16
 800776e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007772:	4835      	ldr	r0, [pc, #212]	; (8007848 <_printf_i+0x244>)
 8007774:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007778:	6829      	ldr	r1, [r5, #0]
 800777a:	6823      	ldr	r3, [r4, #0]
 800777c:	f851 6b04 	ldr.w	r6, [r1], #4
 8007780:	6029      	str	r1, [r5, #0]
 8007782:	061d      	lsls	r5, r3, #24
 8007784:	d514      	bpl.n	80077b0 <_printf_i+0x1ac>
 8007786:	07df      	lsls	r7, r3, #31
 8007788:	bf44      	itt	mi
 800778a:	f043 0320 	orrmi.w	r3, r3, #32
 800778e:	6023      	strmi	r3, [r4, #0]
 8007790:	b91e      	cbnz	r6, 800779a <_printf_i+0x196>
 8007792:	6823      	ldr	r3, [r4, #0]
 8007794:	f023 0320 	bic.w	r3, r3, #32
 8007798:	6023      	str	r3, [r4, #0]
 800779a:	2310      	movs	r3, #16
 800779c:	e7b0      	b.n	8007700 <_printf_i+0xfc>
 800779e:	6823      	ldr	r3, [r4, #0]
 80077a0:	f043 0320 	orr.w	r3, r3, #32
 80077a4:	6023      	str	r3, [r4, #0]
 80077a6:	2378      	movs	r3, #120	; 0x78
 80077a8:	4828      	ldr	r0, [pc, #160]	; (800784c <_printf_i+0x248>)
 80077aa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80077ae:	e7e3      	b.n	8007778 <_printf_i+0x174>
 80077b0:	0659      	lsls	r1, r3, #25
 80077b2:	bf48      	it	mi
 80077b4:	b2b6      	uxthmi	r6, r6
 80077b6:	e7e6      	b.n	8007786 <_printf_i+0x182>
 80077b8:	4615      	mov	r5, r2
 80077ba:	e7bb      	b.n	8007734 <_printf_i+0x130>
 80077bc:	682b      	ldr	r3, [r5, #0]
 80077be:	6826      	ldr	r6, [r4, #0]
 80077c0:	6961      	ldr	r1, [r4, #20]
 80077c2:	1d18      	adds	r0, r3, #4
 80077c4:	6028      	str	r0, [r5, #0]
 80077c6:	0635      	lsls	r5, r6, #24
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	d501      	bpl.n	80077d0 <_printf_i+0x1cc>
 80077cc:	6019      	str	r1, [r3, #0]
 80077ce:	e002      	b.n	80077d6 <_printf_i+0x1d2>
 80077d0:	0670      	lsls	r0, r6, #25
 80077d2:	d5fb      	bpl.n	80077cc <_printf_i+0x1c8>
 80077d4:	8019      	strh	r1, [r3, #0]
 80077d6:	2300      	movs	r3, #0
 80077d8:	6123      	str	r3, [r4, #16]
 80077da:	4615      	mov	r5, r2
 80077dc:	e7ba      	b.n	8007754 <_printf_i+0x150>
 80077de:	682b      	ldr	r3, [r5, #0]
 80077e0:	1d1a      	adds	r2, r3, #4
 80077e2:	602a      	str	r2, [r5, #0]
 80077e4:	681d      	ldr	r5, [r3, #0]
 80077e6:	6862      	ldr	r2, [r4, #4]
 80077e8:	2100      	movs	r1, #0
 80077ea:	4628      	mov	r0, r5
 80077ec:	f7f8 fd10 	bl	8000210 <memchr>
 80077f0:	b108      	cbz	r0, 80077f6 <_printf_i+0x1f2>
 80077f2:	1b40      	subs	r0, r0, r5
 80077f4:	6060      	str	r0, [r4, #4]
 80077f6:	6863      	ldr	r3, [r4, #4]
 80077f8:	6123      	str	r3, [r4, #16]
 80077fa:	2300      	movs	r3, #0
 80077fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007800:	e7a8      	b.n	8007754 <_printf_i+0x150>
 8007802:	6923      	ldr	r3, [r4, #16]
 8007804:	462a      	mov	r2, r5
 8007806:	4649      	mov	r1, r9
 8007808:	4640      	mov	r0, r8
 800780a:	47d0      	blx	sl
 800780c:	3001      	adds	r0, #1
 800780e:	d0ab      	beq.n	8007768 <_printf_i+0x164>
 8007810:	6823      	ldr	r3, [r4, #0]
 8007812:	079b      	lsls	r3, r3, #30
 8007814:	d413      	bmi.n	800783e <_printf_i+0x23a>
 8007816:	68e0      	ldr	r0, [r4, #12]
 8007818:	9b03      	ldr	r3, [sp, #12]
 800781a:	4298      	cmp	r0, r3
 800781c:	bfb8      	it	lt
 800781e:	4618      	movlt	r0, r3
 8007820:	e7a4      	b.n	800776c <_printf_i+0x168>
 8007822:	2301      	movs	r3, #1
 8007824:	4632      	mov	r2, r6
 8007826:	4649      	mov	r1, r9
 8007828:	4640      	mov	r0, r8
 800782a:	47d0      	blx	sl
 800782c:	3001      	adds	r0, #1
 800782e:	d09b      	beq.n	8007768 <_printf_i+0x164>
 8007830:	3501      	adds	r5, #1
 8007832:	68e3      	ldr	r3, [r4, #12]
 8007834:	9903      	ldr	r1, [sp, #12]
 8007836:	1a5b      	subs	r3, r3, r1
 8007838:	42ab      	cmp	r3, r5
 800783a:	dcf2      	bgt.n	8007822 <_printf_i+0x21e>
 800783c:	e7eb      	b.n	8007816 <_printf_i+0x212>
 800783e:	2500      	movs	r5, #0
 8007840:	f104 0619 	add.w	r6, r4, #25
 8007844:	e7f5      	b.n	8007832 <_printf_i+0x22e>
 8007846:	bf00      	nop
 8007848:	08007f21 	.word	0x08007f21
 800784c:	08007f32 	.word	0x08007f32

08007850 <_sbrk_r>:
 8007850:	b538      	push	{r3, r4, r5, lr}
 8007852:	4d06      	ldr	r5, [pc, #24]	; (800786c <_sbrk_r+0x1c>)
 8007854:	2300      	movs	r3, #0
 8007856:	4604      	mov	r4, r0
 8007858:	4608      	mov	r0, r1
 800785a:	602b      	str	r3, [r5, #0]
 800785c:	f7fa fb66 	bl	8001f2c <_sbrk>
 8007860:	1c43      	adds	r3, r0, #1
 8007862:	d102      	bne.n	800786a <_sbrk_r+0x1a>
 8007864:	682b      	ldr	r3, [r5, #0]
 8007866:	b103      	cbz	r3, 800786a <_sbrk_r+0x1a>
 8007868:	6023      	str	r3, [r4, #0]
 800786a:	bd38      	pop	{r3, r4, r5, pc}
 800786c:	200006d8 	.word	0x200006d8

08007870 <__sread>:
 8007870:	b510      	push	{r4, lr}
 8007872:	460c      	mov	r4, r1
 8007874:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007878:	f000 f8a0 	bl	80079bc <_read_r>
 800787c:	2800      	cmp	r0, #0
 800787e:	bfab      	itete	ge
 8007880:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007882:	89a3      	ldrhlt	r3, [r4, #12]
 8007884:	181b      	addge	r3, r3, r0
 8007886:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800788a:	bfac      	ite	ge
 800788c:	6563      	strge	r3, [r4, #84]	; 0x54
 800788e:	81a3      	strhlt	r3, [r4, #12]
 8007890:	bd10      	pop	{r4, pc}

08007892 <__swrite>:
 8007892:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007896:	461f      	mov	r7, r3
 8007898:	898b      	ldrh	r3, [r1, #12]
 800789a:	05db      	lsls	r3, r3, #23
 800789c:	4605      	mov	r5, r0
 800789e:	460c      	mov	r4, r1
 80078a0:	4616      	mov	r6, r2
 80078a2:	d505      	bpl.n	80078b0 <__swrite+0x1e>
 80078a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80078a8:	2302      	movs	r3, #2
 80078aa:	2200      	movs	r2, #0
 80078ac:	f000 f868 	bl	8007980 <_lseek_r>
 80078b0:	89a3      	ldrh	r3, [r4, #12]
 80078b2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80078b6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80078ba:	81a3      	strh	r3, [r4, #12]
 80078bc:	4632      	mov	r2, r6
 80078be:	463b      	mov	r3, r7
 80078c0:	4628      	mov	r0, r5
 80078c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80078c6:	f000 b817 	b.w	80078f8 <_write_r>

080078ca <__sseek>:
 80078ca:	b510      	push	{r4, lr}
 80078cc:	460c      	mov	r4, r1
 80078ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80078d2:	f000 f855 	bl	8007980 <_lseek_r>
 80078d6:	1c43      	adds	r3, r0, #1
 80078d8:	89a3      	ldrh	r3, [r4, #12]
 80078da:	bf15      	itete	ne
 80078dc:	6560      	strne	r0, [r4, #84]	; 0x54
 80078de:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80078e2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80078e6:	81a3      	strheq	r3, [r4, #12]
 80078e8:	bf18      	it	ne
 80078ea:	81a3      	strhne	r3, [r4, #12]
 80078ec:	bd10      	pop	{r4, pc}

080078ee <__sclose>:
 80078ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80078f2:	f000 b813 	b.w	800791c <_close_r>
	...

080078f8 <_write_r>:
 80078f8:	b538      	push	{r3, r4, r5, lr}
 80078fa:	4d07      	ldr	r5, [pc, #28]	; (8007918 <_write_r+0x20>)
 80078fc:	4604      	mov	r4, r0
 80078fe:	4608      	mov	r0, r1
 8007900:	4611      	mov	r1, r2
 8007902:	2200      	movs	r2, #0
 8007904:	602a      	str	r2, [r5, #0]
 8007906:	461a      	mov	r2, r3
 8007908:	f7f9 fdf6 	bl	80014f8 <_write>
 800790c:	1c43      	adds	r3, r0, #1
 800790e:	d102      	bne.n	8007916 <_write_r+0x1e>
 8007910:	682b      	ldr	r3, [r5, #0]
 8007912:	b103      	cbz	r3, 8007916 <_write_r+0x1e>
 8007914:	6023      	str	r3, [r4, #0]
 8007916:	bd38      	pop	{r3, r4, r5, pc}
 8007918:	200006d8 	.word	0x200006d8

0800791c <_close_r>:
 800791c:	b538      	push	{r3, r4, r5, lr}
 800791e:	4d06      	ldr	r5, [pc, #24]	; (8007938 <_close_r+0x1c>)
 8007920:	2300      	movs	r3, #0
 8007922:	4604      	mov	r4, r0
 8007924:	4608      	mov	r0, r1
 8007926:	602b      	str	r3, [r5, #0]
 8007928:	f7fa facc 	bl	8001ec4 <_close>
 800792c:	1c43      	adds	r3, r0, #1
 800792e:	d102      	bne.n	8007936 <_close_r+0x1a>
 8007930:	682b      	ldr	r3, [r5, #0]
 8007932:	b103      	cbz	r3, 8007936 <_close_r+0x1a>
 8007934:	6023      	str	r3, [r4, #0]
 8007936:	bd38      	pop	{r3, r4, r5, pc}
 8007938:	200006d8 	.word	0x200006d8

0800793c <_fstat_r>:
 800793c:	b538      	push	{r3, r4, r5, lr}
 800793e:	4d07      	ldr	r5, [pc, #28]	; (800795c <_fstat_r+0x20>)
 8007940:	2300      	movs	r3, #0
 8007942:	4604      	mov	r4, r0
 8007944:	4608      	mov	r0, r1
 8007946:	4611      	mov	r1, r2
 8007948:	602b      	str	r3, [r5, #0]
 800794a:	f7fa fac7 	bl	8001edc <_fstat>
 800794e:	1c43      	adds	r3, r0, #1
 8007950:	d102      	bne.n	8007958 <_fstat_r+0x1c>
 8007952:	682b      	ldr	r3, [r5, #0]
 8007954:	b103      	cbz	r3, 8007958 <_fstat_r+0x1c>
 8007956:	6023      	str	r3, [r4, #0]
 8007958:	bd38      	pop	{r3, r4, r5, pc}
 800795a:	bf00      	nop
 800795c:	200006d8 	.word	0x200006d8

08007960 <_isatty_r>:
 8007960:	b538      	push	{r3, r4, r5, lr}
 8007962:	4d06      	ldr	r5, [pc, #24]	; (800797c <_isatty_r+0x1c>)
 8007964:	2300      	movs	r3, #0
 8007966:	4604      	mov	r4, r0
 8007968:	4608      	mov	r0, r1
 800796a:	602b      	str	r3, [r5, #0]
 800796c:	f7fa fac6 	bl	8001efc <_isatty>
 8007970:	1c43      	adds	r3, r0, #1
 8007972:	d102      	bne.n	800797a <_isatty_r+0x1a>
 8007974:	682b      	ldr	r3, [r5, #0]
 8007976:	b103      	cbz	r3, 800797a <_isatty_r+0x1a>
 8007978:	6023      	str	r3, [r4, #0]
 800797a:	bd38      	pop	{r3, r4, r5, pc}
 800797c:	200006d8 	.word	0x200006d8

08007980 <_lseek_r>:
 8007980:	b538      	push	{r3, r4, r5, lr}
 8007982:	4d07      	ldr	r5, [pc, #28]	; (80079a0 <_lseek_r+0x20>)
 8007984:	4604      	mov	r4, r0
 8007986:	4608      	mov	r0, r1
 8007988:	4611      	mov	r1, r2
 800798a:	2200      	movs	r2, #0
 800798c:	602a      	str	r2, [r5, #0]
 800798e:	461a      	mov	r2, r3
 8007990:	f7fa fabf 	bl	8001f12 <_lseek>
 8007994:	1c43      	adds	r3, r0, #1
 8007996:	d102      	bne.n	800799e <_lseek_r+0x1e>
 8007998:	682b      	ldr	r3, [r5, #0]
 800799a:	b103      	cbz	r3, 800799e <_lseek_r+0x1e>
 800799c:	6023      	str	r3, [r4, #0]
 800799e:	bd38      	pop	{r3, r4, r5, pc}
 80079a0:	200006d8 	.word	0x200006d8

080079a4 <__malloc_lock>:
 80079a4:	4801      	ldr	r0, [pc, #4]	; (80079ac <__malloc_lock+0x8>)
 80079a6:	f7ff bb1d 	b.w	8006fe4 <__retarget_lock_acquire_recursive>
 80079aa:	bf00      	nop
 80079ac:	200006cc 	.word	0x200006cc

080079b0 <__malloc_unlock>:
 80079b0:	4801      	ldr	r0, [pc, #4]	; (80079b8 <__malloc_unlock+0x8>)
 80079b2:	f7ff bb18 	b.w	8006fe6 <__retarget_lock_release_recursive>
 80079b6:	bf00      	nop
 80079b8:	200006cc 	.word	0x200006cc

080079bc <_read_r>:
 80079bc:	b538      	push	{r3, r4, r5, lr}
 80079be:	4d07      	ldr	r5, [pc, #28]	; (80079dc <_read_r+0x20>)
 80079c0:	4604      	mov	r4, r0
 80079c2:	4608      	mov	r0, r1
 80079c4:	4611      	mov	r1, r2
 80079c6:	2200      	movs	r2, #0
 80079c8:	602a      	str	r2, [r5, #0]
 80079ca:	461a      	mov	r2, r3
 80079cc:	f7fa fa5d 	bl	8001e8a <_read>
 80079d0:	1c43      	adds	r3, r0, #1
 80079d2:	d102      	bne.n	80079da <_read_r+0x1e>
 80079d4:	682b      	ldr	r3, [r5, #0]
 80079d6:	b103      	cbz	r3, 80079da <_read_r+0x1e>
 80079d8:	6023      	str	r3, [r4, #0]
 80079da:	bd38      	pop	{r3, r4, r5, pc}
 80079dc:	200006d8 	.word	0x200006d8

080079e0 <_init>:
 80079e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079e2:	bf00      	nop
 80079e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80079e6:	bc08      	pop	{r3}
 80079e8:	469e      	mov	lr, r3
 80079ea:	4770      	bx	lr

080079ec <_fini>:
 80079ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079ee:	bf00      	nop
 80079f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80079f2:	bc08      	pop	{r3}
 80079f4:	469e      	mov	lr, r3
 80079f6:	4770      	bx	lr
