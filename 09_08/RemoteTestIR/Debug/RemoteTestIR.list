
RemoteTestIR.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006774  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000029e0  08006904  08006904  00016904  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080092e4  080092e4  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  080092e4  080092e4  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  080092e4  080092e4  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080092e4  080092e4  000192e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080092e8  080092e8  000192e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  080092ec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000620  20000078  08009364  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000698  08009364  00020698  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011b6a  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002475  00000000  00000000  00031c12  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fd8  00000000  00000000  00034088  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ef0  00000000  00000000  00035060  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001768a  00000000  00000000  00035f50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012c53  00000000  00000000  0004d5da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008ce93  00000000  00000000  0006022d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ed0c0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004a50  00000000  00000000  000ed110  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000078 	.word	0x20000078
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080068ec 	.word	0x080068ec

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	080068ec 	.word	0x080068ec

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <InitTouch>:
uint8_t NoSignal = 1;
uint8_t lengte_signaal_gevonden = 0;
uint16_t lengte_signaal[60];

void InitTouch()
{
 8000270:	b480      	push	{r7}
 8000272:	af00      	add	r7, sp, #0
//	uint16_t device_address_write = 0xBA;
//	uint16_t device_address_read = 0xBB;
//	uint8_t dataWrite[] = {0x81,0x40};
//	uint8_t ontvangen[11];

}
 8000274:	bf00      	nop
 8000276:	46bd      	mov	sp, r7
 8000278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800027c:	4770      	bx	lr

0800027e <All_Carl_Inits>:
void All_Carl_Inits()
{
 800027e:	b580      	push	{r7, lr}
 8000280:	af00      	add	r7, sp, #0
		for(uint16_t y=0; y<500; y++)
		{
		tijd[x][y]=0;
		}
	}*/
	InitTouch();
 8000282:	f7ff fff5 	bl	8000270 <InitTouch>
	DisplayBegin();
 8000286:	f000 fb6f 	bl	8000968 <DisplayBegin>
	IR_Carrier_OFF();
 800028a:	f000 f84f 	bl	800032c <IR_Carrier_OFF>
	//logo();
	mainscreen();
 800028e:	f000 fa75 	bl	800077c <mainscreen>
}
 8000292:	bf00      	nop
 8000294:	bd80      	pop	{r7, pc}
	...

08000298 <Interrupt_flank>:
//	uint8_t buffer1[0];
//	uint16_t X_waarde;
//	uint16_t Y_waarde;
}
void Interrupt_flank()
{
 8000298:	b598      	push	{r3, r4, r7, lr}
 800029a:	af00      	add	r7, sp, #0

	if(IR_READ_flag == 1)
 800029c:	4b17      	ldr	r3, [pc, #92]	; (80002fc <Interrupt_flank+0x64>)
 800029e:	781b      	ldrb	r3, [r3, #0]
 80002a0:	2b01      	cmp	r3, #1
 80002a2:	d126      	bne.n	80002f2 <Interrupt_flank+0x5a>
	{
		HAL_TIM_Base_Stop(&TIM_1us); //timer stoppen
 80002a4:	4816      	ldr	r0, [pc, #88]	; (8000300 <Interrupt_flank+0x68>)
 80002a6:	f003 fe45 	bl	8003f34 <HAL_TIM_Base_Stop>
		//timer in het begin is steeds nul maar deze hebben we niet nodig

		tijd[commando][pulsecounter] = TIM_1us.Instance -> CNT; //timer opslaan
 80002aa:	4b15      	ldr	r3, [pc, #84]	; (8000300 <Interrupt_flank+0x68>)
 80002ac:	681b      	ldr	r3, [r3, #0]
 80002ae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80002b0:	4b14      	ldr	r3, [pc, #80]	; (8000304 <Interrupt_flank+0x6c>)
 80002b2:	781b      	ldrb	r3, [r3, #0]
 80002b4:	461c      	mov	r4, r3
 80002b6:	4b14      	ldr	r3, [pc, #80]	; (8000308 <Interrupt_flank+0x70>)
 80002b8:	881b      	ldrh	r3, [r3, #0]
 80002ba:	4618      	mov	r0, r3
 80002bc:	b291      	uxth	r1, r2
 80002be:	4a13      	ldr	r2, [pc, #76]	; (800030c <Interrupt_flank+0x74>)
 80002c0:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80002c4:	fb04 f303 	mul.w	r3, r4, r3
 80002c8:	4403      	add	r3, r0
 80002ca:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		lengte = pulsecounter;
 80002ce:	4b0e      	ldr	r3, [pc, #56]	; (8000308 <Interrupt_flank+0x70>)
 80002d0:	881a      	ldrh	r2, [r3, #0]
 80002d2:	4b0f      	ldr	r3, [pc, #60]	; (8000310 <Interrupt_flank+0x78>)
 80002d4:	801a      	strh	r2, [r3, #0]
		pulsecounter++;
 80002d6:	4b0c      	ldr	r3, [pc, #48]	; (8000308 <Interrupt_flank+0x70>)
 80002d8:	881b      	ldrh	r3, [r3, #0]
 80002da:	3301      	adds	r3, #1
 80002dc:	b29a      	uxth	r2, r3
 80002de:	4b0a      	ldr	r3, [pc, #40]	; (8000308 <Interrupt_flank+0x70>)
 80002e0:	801a      	strh	r2, [r3, #0]
		TIM_1us.Instance -> CNT = 0;
 80002e2:	4b07      	ldr	r3, [pc, #28]	; (8000300 <Interrupt_flank+0x68>)
 80002e4:	681b      	ldr	r3, [r3, #0]
 80002e6:	2200      	movs	r2, #0
 80002e8:	625a      	str	r2, [r3, #36]	; 0x24
		HAL_TIM_Base_Start(&TIM_1us);
 80002ea:	4805      	ldr	r0, [pc, #20]	; (8000300 <Interrupt_flank+0x68>)
 80002ec:	f003 fdd6 	bl	8003e9c <HAL_TIM_Base_Start>
	else
	{
		printf("ik kan niet werken, aangezien ik uit sta\r\n");
	}

}
 80002f0:	e002      	b.n	80002f8 <Interrupt_flank+0x60>
		printf("ik kan niet werken, aangezien ik uit sta\r\n");
 80002f2:	4808      	ldr	r0, [pc, #32]	; (8000314 <Interrupt_flank+0x7c>)
 80002f4:	f005 fb7c 	bl	80059f0 <puts>
}
 80002f8:	bf00      	nop
 80002fa:	bd98      	pop	{r3, r4, r7, pc}
 80002fc:	2000047d 	.word	0x2000047d
 8000300:	200005ac 	.word	0x200005ac
 8000304:	2000047c 	.word	0x2000047c
 8000308:	20000000 	.word	0x20000000
 800030c:	20000094 	.word	0x20000094
 8000310:	2000047e 	.word	0x2000047e
 8000314:	08006904 	.word	0x08006904

08000318 <IR_Carrier_ON>:
void IR_Carrier_ON()
{
 8000318:	b580      	push	{r7, lr}
 800031a:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&TIM_PWM_CARRIER, TIM_PWM_CARRIER_CHANNEL);
 800031c:	2100      	movs	r1, #0
 800031e:	4802      	ldr	r0, [pc, #8]	; (8000328 <IR_Carrier_ON+0x10>)
 8000320:	f003 fe86 	bl	8004030 <HAL_TIM_PWM_Start>
}
 8000324:	bf00      	nop
 8000326:	bd80      	pop	{r7, pc}
 8000328:	20000560 	.word	0x20000560

0800032c <IR_Carrier_OFF>:
void IR_Carrier_OFF()
{
 800032c:	b580      	push	{r7, lr}
 800032e:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Stop(&TIM_PWM_CARRIER, TIM_PWM_CARRIER_CHANNEL);
 8000330:	2100      	movs	r1, #0
 8000332:	4802      	ldr	r0, [pc, #8]	; (800033c <IR_Carrier_OFF+0x10>)
 8000334:	f003 ff62 	bl	80041fc <HAL_TIM_PWM_Stop>
}
 8000338:	bf00      	nop
 800033a:	bd80      	pop	{r7, pc}
 800033c:	20000560 	.word	0x20000560

08000340 <IR_Read>:
void IR_Read()
{
 8000340:	b480      	push	{r7}
 8000342:	af00      	add	r7, sp, #0
	IR_READ_flag = 1 ;
 8000344:	4b03      	ldr	r3, [pc, #12]	; (8000354 <IR_Read+0x14>)
 8000346:	2201      	movs	r2, #1
 8000348:	701a      	strb	r2, [r3, #0]
}
 800034a:	bf00      	nop
 800034c:	46bd      	mov	sp, r7
 800034e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000352:	4770      	bx	lr
 8000354:	2000047d 	.word	0x2000047d

08000358 <IR_UNDERSTAND>:

void IR_UNDERSTAND()
{
 8000358:	b580      	push	{r7, lr}
 800035a:	b082      	sub	sp, #8
 800035c:	af00      	add	r7, sp, #0
	//Is er wel iets gemeten?
	//5 metingen test
	uint8_t measurement = 0;
 800035e:	2300      	movs	r3, #0
 8000360:	71fb      	strb	r3, [r7, #7]
	for(uint8_t five_measurements = 0; five_measurements < 5; five_measurements++)
 8000362:	2300      	movs	r3, #0
 8000364:	71bb      	strb	r3, [r7, #6]
 8000366:	e013      	b.n	8000390 <IR_UNDERSTAND+0x38>
	{

		if(tijd[commando][five_measurements] == 0)
 8000368:	4b33      	ldr	r3, [pc, #204]	; (8000438 <IR_UNDERSTAND+0xe0>)
 800036a:	781b      	ldrb	r3, [r3, #0]
 800036c:	4618      	mov	r0, r3
 800036e:	79bb      	ldrb	r3, [r7, #6]
 8000370:	4932      	ldr	r1, [pc, #200]	; (800043c <IR_UNDERSTAND+0xe4>)
 8000372:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000376:	fb00 f202 	mul.w	r2, r0, r2
 800037a:	4413      	add	r3, r2
 800037c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000380:	2b00      	cmp	r3, #0
 8000382:	d102      	bne.n	800038a <IR_UNDERSTAND+0x32>
		{
			measurement++;
 8000384:	79fb      	ldrb	r3, [r7, #7]
 8000386:	3301      	adds	r3, #1
 8000388:	71fb      	strb	r3, [r7, #7]
	for(uint8_t five_measurements = 0; five_measurements < 5; five_measurements++)
 800038a:	79bb      	ldrb	r3, [r7, #6]
 800038c:	3301      	adds	r3, #1
 800038e:	71bb      	strb	r3, [r7, #6]
 8000390:	79bb      	ldrb	r3, [r7, #6]
 8000392:	2b04      	cmp	r3, #4
 8000394:	d9e8      	bls.n	8000368 <IR_UNDERSTAND+0x10>
		}
	}
	if(measurement == 5)
 8000396:	79fb      	ldrb	r3, [r7, #7]
 8000398:	2b05      	cmp	r3, #5
 800039a:	d106      	bne.n	80003aa <IR_UNDERSTAND+0x52>
		{
			printf("Er is niks gemeten \r\n");
 800039c:	4828      	ldr	r0, [pc, #160]	; (8000440 <IR_UNDERSTAND+0xe8>)
 800039e:	f005 fb27 	bl	80059f0 <puts>
			NoSignal = 1;
 80003a2:	4b28      	ldr	r3, [pc, #160]	; (8000444 <IR_UNDERSTAND+0xec>)
 80003a4:	2201      	movs	r2, #1
 80003a6:	701a      	strb	r2, [r3, #0]
 80003a8:	e00c      	b.n	80003c4 <IR_UNDERSTAND+0x6c>
		}
	else
	{
		printf("Er is iets gemeten %d \r\n", lengte_signaal[commando]);
 80003aa:	4b23      	ldr	r3, [pc, #140]	; (8000438 <IR_UNDERSTAND+0xe0>)
 80003ac:	781b      	ldrb	r3, [r3, #0]
 80003ae:	461a      	mov	r2, r3
 80003b0:	4b25      	ldr	r3, [pc, #148]	; (8000448 <IR_UNDERSTAND+0xf0>)
 80003b2:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80003b6:	4619      	mov	r1, r3
 80003b8:	4824      	ldr	r0, [pc, #144]	; (800044c <IR_UNDERSTAND+0xf4>)
 80003ba:	f005 fa93 	bl	80058e4 <iprintf>
		NoSignal = 0;
 80003be:	4b21      	ldr	r3, [pc, #132]	; (8000444 <IR_UNDERSTAND+0xec>)
 80003c0:	2200      	movs	r2, #0
 80003c2:	701a      	strb	r2, [r3, #0]
	}
	if(NoSignal == 0) //Enkel als er een signaal is
 80003c4:	4b1f      	ldr	r3, [pc, #124]	; (8000444 <IR_UNDERSTAND+0xec>)
 80003c6:	781b      	ldrb	r3, [r3, #0]
 80003c8:	2b00      	cmp	r3, #0
 80003ca:	d130      	bne.n	800042e <IR_UNDERSTAND+0xd6>
	{

		IR_Debug();
 80003cc:	f000 f8b4 	bl	8000538 <IR_Debug>
		//IR_READ_flag = 0; //stoppen met leesInterrupt
		//Hoe lang is het signaal?
		if(lengte_signaal_gevonden == 0)
 80003d0:	4b1f      	ldr	r3, [pc, #124]	; (8000450 <IR_UNDERSTAND+0xf8>)
 80003d2:	781b      	ldrb	r3, [r3, #0]
 80003d4:	2b00      	cmp	r3, #0
 80003d6:	d12a      	bne.n	800042e <IR_UNDERSTAND+0xd6>
		{
			uint16_t waarde = 499;
 80003d8:	f240 13f3 	movw	r3, #499	; 0x1f3
 80003dc:	80bb      	strh	r3, [r7, #4]
			while(tijd[commando][waarde] == 0)
 80003de:	e002      	b.n	80003e6 <IR_UNDERSTAND+0x8e>
			{
				waarde--;
 80003e0:	88bb      	ldrh	r3, [r7, #4]
 80003e2:	3b01      	subs	r3, #1
 80003e4:	80bb      	strh	r3, [r7, #4]
			while(tijd[commando][waarde] == 0)
 80003e6:	4b14      	ldr	r3, [pc, #80]	; (8000438 <IR_UNDERSTAND+0xe0>)
 80003e8:	781b      	ldrb	r3, [r3, #0]
 80003ea:	4618      	mov	r0, r3
 80003ec:	88bb      	ldrh	r3, [r7, #4]
 80003ee:	4913      	ldr	r1, [pc, #76]	; (800043c <IR_UNDERSTAND+0xe4>)
 80003f0:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80003f4:	fb00 f202 	mul.w	r2, r0, r2
 80003f8:	4413      	add	r3, r2
 80003fa:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80003fe:	2b00      	cmp	r3, #0
 8000400:	d0ee      	beq.n	80003e0 <IR_UNDERSTAND+0x88>
			}
			lengte_signaal[commando] = waarde;
 8000402:	4b0d      	ldr	r3, [pc, #52]	; (8000438 <IR_UNDERSTAND+0xe0>)
 8000404:	781b      	ldrb	r3, [r3, #0]
 8000406:	4619      	mov	r1, r3
 8000408:	4a0f      	ldr	r2, [pc, #60]	; (8000448 <IR_UNDERSTAND+0xf0>)
 800040a:	88bb      	ldrh	r3, [r7, #4]
 800040c:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
			printf("lengte signaal = %d\r\n", lengte_signaal[commando]);
 8000410:	4b09      	ldr	r3, [pc, #36]	; (8000438 <IR_UNDERSTAND+0xe0>)
 8000412:	781b      	ldrb	r3, [r3, #0]
 8000414:	461a      	mov	r2, r3
 8000416:	4b0c      	ldr	r3, [pc, #48]	; (8000448 <IR_UNDERSTAND+0xf0>)
 8000418:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800041c:	4619      	mov	r1, r3
 800041e:	480d      	ldr	r0, [pc, #52]	; (8000454 <IR_UNDERSTAND+0xfc>)
 8000420:	f005 fa60 	bl	80058e4 <iprintf>
			lengte_signaal_gevonden = 1;
 8000424:	4b0a      	ldr	r3, [pc, #40]	; (8000450 <IR_UNDERSTAND+0xf8>)
 8000426:	2201      	movs	r2, #1
 8000428:	701a      	strb	r2, [r3, #0]
			IR_Debug();
 800042a:	f000 f885 	bl	8000538 <IR_Debug>
		}

	}


}
 800042e:	bf00      	nop
 8000430:	3708      	adds	r7, #8
 8000432:	46bd      	mov	sp, r7
 8000434:	bd80      	pop	{r7, pc}
 8000436:	bf00      	nop
 8000438:	2000047c 	.word	0x2000047c
 800043c:	20000094 	.word	0x20000094
 8000440:	08006930 	.word	0x08006930
 8000444:	20000002 	.word	0x20000002
 8000448:	20000484 	.word	0x20000484
 800044c:	08006948 	.word	0x08006948
 8000450:	20000480 	.word	0x20000480
 8000454:	08006964 	.word	0x08006964

08000458 <IR_sent>:



void IR_sent()
{
 8000458:	b590      	push	{r4, r7, lr}
 800045a:	b083      	sub	sp, #12
 800045c:	af00      	add	r7, sp, #0
	if(NoSignal == 0)
 800045e:	4b30      	ldr	r3, [pc, #192]	; (8000520 <IR_sent+0xc8>)
 8000460:	781b      	ldrb	r3, [r3, #0]
 8000462:	2b00      	cmp	r3, #0
 8000464:	d157      	bne.n	8000516 <IR_sent+0xbe>
	{
    IR_READ_flag = 0; //er kan niks meer ingelezen worden
 8000466:	4b2f      	ldr	r3, [pc, #188]	; (8000524 <IR_sent+0xcc>)
 8000468:	2200      	movs	r2, #0
 800046a:	701a      	strb	r2, [r3, #0]
   for(uint8_t i = 0; i <= lengte_signaal[commando]; i++)
 800046c:	2300      	movs	r3, #0
 800046e:	71fb      	strb	r3, [r7, #7]
 8000470:	e045      	b.n	80004fe <IR_sent+0xa6>
   {

	   if((i%2)==0)
 8000472:	79fb      	ldrb	r3, [r7, #7]
 8000474:	f003 0301 	and.w	r3, r3, #1
 8000478:	b2db      	uxtb	r3, r3
 800047a:	2b00      	cmp	r3, #0
 800047c:	d11e      	bne.n	80004bc <IR_sent+0x64>
	   {
		   HAL_TIM_Base_Stop(&TIM_1us);
 800047e:	482a      	ldr	r0, [pc, #168]	; (8000528 <IR_sent+0xd0>)
 8000480:	f003 fd58 	bl	8003f34 <HAL_TIM_Base_Stop>
		   TIM_1us.Instance->CNT = 0;
 8000484:	4b28      	ldr	r3, [pc, #160]	; (8000528 <IR_sent+0xd0>)
 8000486:	681b      	ldr	r3, [r3, #0]
 8000488:	2200      	movs	r2, #0
 800048a:	625a      	str	r2, [r3, #36]	; 0x24
		   HAL_TIM_Base_Start(&TIM_1us);
 800048c:	4826      	ldr	r0, [pc, #152]	; (8000528 <IR_sent+0xd0>)
 800048e:	f003 fd05 	bl	8003e9c <HAL_TIM_Base_Start>
		   IR_Carrier_ON();
 8000492:	f7ff ff41 	bl	8000318 <IR_Carrier_ON>
		   while((TIM_1us.Instance->CNT) <= tijd[commando][i]){}
 8000496:	bf00      	nop
 8000498:	4b23      	ldr	r3, [pc, #140]	; (8000528 <IR_sent+0xd0>)
 800049a:	681b      	ldr	r3, [r3, #0]
 800049c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800049e:	4a23      	ldr	r2, [pc, #140]	; (800052c <IR_sent+0xd4>)
 80004a0:	7812      	ldrb	r2, [r2, #0]
 80004a2:	4614      	mov	r4, r2
 80004a4:	79fa      	ldrb	r2, [r7, #7]
 80004a6:	4822      	ldr	r0, [pc, #136]	; (8000530 <IR_sent+0xd8>)
 80004a8:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80004ac:	fb04 f101 	mul.w	r1, r4, r1
 80004b0:	440a      	add	r2, r1
 80004b2:	f830 2012 	ldrh.w	r2, [r0, r2, lsl #1]
 80004b6:	4293      	cmp	r3, r2
 80004b8:	d9ee      	bls.n	8000498 <IR_sent+0x40>
 80004ba:	e01d      	b.n	80004f8 <IR_sent+0xa0>
	   }
	   else
	   {
		   HAL_TIM_Base_Stop(&TIM_1us);
 80004bc:	481a      	ldr	r0, [pc, #104]	; (8000528 <IR_sent+0xd0>)
 80004be:	f003 fd39 	bl	8003f34 <HAL_TIM_Base_Stop>
		   TIM_1us.Instance->CNT = 0;
 80004c2:	4b19      	ldr	r3, [pc, #100]	; (8000528 <IR_sent+0xd0>)
 80004c4:	681b      	ldr	r3, [r3, #0]
 80004c6:	2200      	movs	r2, #0
 80004c8:	625a      	str	r2, [r3, #36]	; 0x24
		   HAL_TIM_Base_Start(&TIM_1us);
 80004ca:	4817      	ldr	r0, [pc, #92]	; (8000528 <IR_sent+0xd0>)
 80004cc:	f003 fce6 	bl	8003e9c <HAL_TIM_Base_Start>
		   IR_Carrier_OFF();
 80004d0:	f7ff ff2c 	bl	800032c <IR_Carrier_OFF>
		   while((TIM_1us.Instance->CNT) <= tijd[commando][i]){}
 80004d4:	bf00      	nop
 80004d6:	4b14      	ldr	r3, [pc, #80]	; (8000528 <IR_sent+0xd0>)
 80004d8:	681b      	ldr	r3, [r3, #0]
 80004da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80004dc:	4a13      	ldr	r2, [pc, #76]	; (800052c <IR_sent+0xd4>)
 80004de:	7812      	ldrb	r2, [r2, #0]
 80004e0:	4614      	mov	r4, r2
 80004e2:	79fa      	ldrb	r2, [r7, #7]
 80004e4:	4812      	ldr	r0, [pc, #72]	; (8000530 <IR_sent+0xd8>)
 80004e6:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80004ea:	fb04 f101 	mul.w	r1, r4, r1
 80004ee:	440a      	add	r2, r1
 80004f0:	f830 2012 	ldrh.w	r2, [r0, r2, lsl #1]
 80004f4:	4293      	cmp	r3, r2
 80004f6:	d9ee      	bls.n	80004d6 <IR_sent+0x7e>
   for(uint8_t i = 0; i <= lengte_signaal[commando]; i++)
 80004f8:	79fb      	ldrb	r3, [r7, #7]
 80004fa:	3301      	adds	r3, #1
 80004fc:	71fb      	strb	r3, [r7, #7]
 80004fe:	79fb      	ldrb	r3, [r7, #7]
 8000500:	b29a      	uxth	r2, r3
 8000502:	4b0a      	ldr	r3, [pc, #40]	; (800052c <IR_sent+0xd4>)
 8000504:	781b      	ldrb	r3, [r3, #0]
 8000506:	4619      	mov	r1, r3
 8000508:	4b0a      	ldr	r3, [pc, #40]	; (8000534 <IR_sent+0xdc>)
 800050a:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 800050e:	429a      	cmp	r2, r3
 8000510:	d9af      	bls.n	8000472 <IR_sent+0x1a>

	   }
   }
   IR_Carrier_OFF();
 8000512:	f7ff ff0b 	bl	800032c <IR_Carrier_OFF>


}
}
 8000516:	bf00      	nop
 8000518:	370c      	adds	r7, #12
 800051a:	46bd      	mov	sp, r7
 800051c:	bd90      	pop	{r4, r7, pc}
 800051e:	bf00      	nop
 8000520:	20000002 	.word	0x20000002
 8000524:	2000047d 	.word	0x2000047d
 8000528:	200005ac 	.word	0x200005ac
 800052c:	2000047c 	.word	0x2000047c
 8000530:	20000094 	.word	0x20000094
 8000534:	20000484 	.word	0x20000484

08000538 <IR_Debug>:
void IR_Debug() //hier lees ik de waarde uit, om te zien wat er effectief aan het gebeuren is
{
 8000538:	b5b0      	push	{r4, r5, r7, lr}
 800053a:	b082      	sub	sp, #8
 800053c:	af00      	add	r7, sp, #0
	if(lengte_signaal_gevonden == 0)  //als de lengte van het signaal nog niet bepaald is
 800053e:	4b29      	ldr	r3, [pc, #164]	; (80005e4 <IR_Debug+0xac>)
 8000540:	781b      	ldrb	r3, [r3, #0]
 8000542:	2b00      	cmp	r3, #0
 8000544:	d125      	bne.n	8000592 <IR_Debug+0x5a>
	{
		printf("Commando %d\r\n", commando);
 8000546:	4b28      	ldr	r3, [pc, #160]	; (80005e8 <IR_Debug+0xb0>)
 8000548:	781b      	ldrb	r3, [r3, #0]
 800054a:	4619      	mov	r1, r3
 800054c:	4827      	ldr	r0, [pc, #156]	; (80005ec <IR_Debug+0xb4>)
 800054e:	f005 f9c9 	bl	80058e4 <iprintf>

		for(uint16_t debugwaarde = 0; debugwaarde < 500; debugwaarde++)
 8000552:	2300      	movs	r3, #0
 8000554:	80fb      	strh	r3, [r7, #6]
 8000556:	e017      	b.n	8000588 <IR_Debug+0x50>
		{
		printf("tijd[%d][%d] = %d \r\n", commando, debugwaarde, tijd[commando][debugwaarde]);
 8000558:	4b23      	ldr	r3, [pc, #140]	; (80005e8 <IR_Debug+0xb0>)
 800055a:	781b      	ldrb	r3, [r3, #0]
 800055c:	461d      	mov	r5, r3
 800055e:	88f9      	ldrh	r1, [r7, #6]
 8000560:	4b21      	ldr	r3, [pc, #132]	; (80005e8 <IR_Debug+0xb0>)
 8000562:	781b      	ldrb	r3, [r3, #0]
 8000564:	461c      	mov	r4, r3
 8000566:	88fb      	ldrh	r3, [r7, #6]
 8000568:	4821      	ldr	r0, [pc, #132]	; (80005f0 <IR_Debug+0xb8>)
 800056a:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800056e:	fb04 f202 	mul.w	r2, r4, r2
 8000572:	4413      	add	r3, r2
 8000574:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8000578:	460a      	mov	r2, r1
 800057a:	4629      	mov	r1, r5
 800057c:	481d      	ldr	r0, [pc, #116]	; (80005f4 <IR_Debug+0xbc>)
 800057e:	f005 f9b1 	bl	80058e4 <iprintf>
		for(uint16_t debugwaarde = 0; debugwaarde < 500; debugwaarde++)
 8000582:	88fb      	ldrh	r3, [r7, #6]
 8000584:	3301      	adds	r3, #1
 8000586:	80fb      	strh	r3, [r7, #6]
 8000588:	88fb      	ldrh	r3, [r7, #6]
 800058a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800058e:	d3e3      	bcc.n	8000558 <IR_Debug+0x20>
			{
			printf("tijd[%d][%d] = %d \r\n", commando, debugwaarde, tijd[commando][debugwaarde]);
			}
	}

}
 8000590:	e023      	b.n	80005da <IR_Debug+0xa2>
		for(uint16_t debugwaarde = 0; debugwaarde <= lengte_signaal[commando] ; debugwaarde++)
 8000592:	2300      	movs	r3, #0
 8000594:	80bb      	strh	r3, [r7, #4]
 8000596:	e017      	b.n	80005c8 <IR_Debug+0x90>
			printf("tijd[%d][%d] = %d \r\n", commando, debugwaarde, tijd[commando][debugwaarde]);
 8000598:	4b13      	ldr	r3, [pc, #76]	; (80005e8 <IR_Debug+0xb0>)
 800059a:	781b      	ldrb	r3, [r3, #0]
 800059c:	461d      	mov	r5, r3
 800059e:	88b9      	ldrh	r1, [r7, #4]
 80005a0:	4b11      	ldr	r3, [pc, #68]	; (80005e8 <IR_Debug+0xb0>)
 80005a2:	781b      	ldrb	r3, [r3, #0]
 80005a4:	461c      	mov	r4, r3
 80005a6:	88bb      	ldrh	r3, [r7, #4]
 80005a8:	4811      	ldr	r0, [pc, #68]	; (80005f0 <IR_Debug+0xb8>)
 80005aa:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80005ae:	fb04 f202 	mul.w	r2, r4, r2
 80005b2:	4413      	add	r3, r2
 80005b4:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 80005b8:	460a      	mov	r2, r1
 80005ba:	4629      	mov	r1, r5
 80005bc:	480d      	ldr	r0, [pc, #52]	; (80005f4 <IR_Debug+0xbc>)
 80005be:	f005 f991 	bl	80058e4 <iprintf>
		for(uint16_t debugwaarde = 0; debugwaarde <= lengte_signaal[commando] ; debugwaarde++)
 80005c2:	88bb      	ldrh	r3, [r7, #4]
 80005c4:	3301      	adds	r3, #1
 80005c6:	80bb      	strh	r3, [r7, #4]
 80005c8:	4b07      	ldr	r3, [pc, #28]	; (80005e8 <IR_Debug+0xb0>)
 80005ca:	781b      	ldrb	r3, [r3, #0]
 80005cc:	461a      	mov	r2, r3
 80005ce:	4b0a      	ldr	r3, [pc, #40]	; (80005f8 <IR_Debug+0xc0>)
 80005d0:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80005d4:	88ba      	ldrh	r2, [r7, #4]
 80005d6:	429a      	cmp	r2, r3
 80005d8:	d9de      	bls.n	8000598 <IR_Debug+0x60>
}
 80005da:	bf00      	nop
 80005dc:	3708      	adds	r7, #8
 80005de:	46bd      	mov	sp, r7
 80005e0:	bdb0      	pop	{r4, r5, r7, pc}
 80005e2:	bf00      	nop
 80005e4:	20000480 	.word	0x20000480
 80005e8:	2000047c 	.word	0x2000047c
 80005ec:	0800697c 	.word	0x0800697c
 80005f0:	20000094 	.word	0x20000094
 80005f4:	0800698c 	.word	0x0800698c
 80005f8:	20000484 	.word	0x20000484

080005fc <DrawRectangle>:


void DrawRectangle(uint16_t x, uint16_t y, uint16_t h, uint16_t w, uint16_t color, uint16_t contentcolor, uint8_t border)
{
 80005fc:	b590      	push	{r4, r7, lr}
 80005fe:	b089      	sub	sp, #36	; 0x24
 8000600:	af02      	add	r7, sp, #8
 8000602:	4604      	mov	r4, r0
 8000604:	4608      	mov	r0, r1
 8000606:	4611      	mov	r1, r2
 8000608:	461a      	mov	r2, r3
 800060a:	4623      	mov	r3, r4
 800060c:	80fb      	strh	r3, [r7, #6]
 800060e:	4603      	mov	r3, r0
 8000610:	80bb      	strh	r3, [r7, #4]
 8000612:	460b      	mov	r3, r1
 8000614:	807b      	strh	r3, [r7, #2]
 8000616:	4613      	mov	r3, r2
 8000618:	803b      	strh	r3, [r7, #0]

	//lijntje horizontaal 1
	for(uint8_t j = 0; j <= border; j++)
 800061a:	2300      	movs	r3, #0
 800061c:	75fb      	strb	r3, [r7, #23]
 800061e:	e018      	b.n	8000652 <DrawRectangle+0x56>
	{
		for(uint16_t i = x; i <= (x+w); i++)
 8000620:	88fb      	ldrh	r3, [r7, #6]
 8000622:	82bb      	strh	r3, [r7, #20]
 8000624:	e00c      	b.n	8000640 <DrawRectangle+0x44>
		{
			drawPixel(i, y+j, color);
 8000626:	7dfb      	ldrb	r3, [r7, #23]
 8000628:	b29a      	uxth	r2, r3
 800062a:	88bb      	ldrh	r3, [r7, #4]
 800062c:	4413      	add	r3, r2
 800062e:	b299      	uxth	r1, r3
 8000630:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8000632:	8abb      	ldrh	r3, [r7, #20]
 8000634:	4618      	mov	r0, r3
 8000636:	f000 fb07 	bl	8000c48 <drawPixel>
		for(uint16_t i = x; i <= (x+w); i++)
 800063a:	8abb      	ldrh	r3, [r7, #20]
 800063c:	3301      	adds	r3, #1
 800063e:	82bb      	strh	r3, [r7, #20]
 8000640:	8aba      	ldrh	r2, [r7, #20]
 8000642:	88f9      	ldrh	r1, [r7, #6]
 8000644:	883b      	ldrh	r3, [r7, #0]
 8000646:	440b      	add	r3, r1
 8000648:	429a      	cmp	r2, r3
 800064a:	ddec      	ble.n	8000626 <DrawRectangle+0x2a>
	for(uint8_t j = 0; j <= border; j++)
 800064c:	7dfb      	ldrb	r3, [r7, #23]
 800064e:	3301      	adds	r3, #1
 8000650:	75fb      	strb	r3, [r7, #23]
 8000652:	7dfa      	ldrb	r2, [r7, #23]
 8000654:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8000658:	429a      	cmp	r2, r3
 800065a:	d9e1      	bls.n	8000620 <DrawRectangle+0x24>
		}
	}

//lijntje verticaal 1
for(uint8_t j = 0; j <= border; j++)
 800065c:	2300      	movs	r3, #0
 800065e:	74fb      	strb	r3, [r7, #19]
 8000660:	e018      	b.n	8000694 <DrawRectangle+0x98>
{
	for(uint16_t i = y; i <= (y+h); i++)
 8000662:	88bb      	ldrh	r3, [r7, #4]
 8000664:	823b      	strh	r3, [r7, #16]
 8000666:	e00c      	b.n	8000682 <DrawRectangle+0x86>
	{
		drawPixel(x+j, i, color);
 8000668:	7cfb      	ldrb	r3, [r7, #19]
 800066a:	b29a      	uxth	r2, r3
 800066c:	88fb      	ldrh	r3, [r7, #6]
 800066e:	4413      	add	r3, r2
 8000670:	b29b      	uxth	r3, r3
 8000672:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8000674:	8a39      	ldrh	r1, [r7, #16]
 8000676:	4618      	mov	r0, r3
 8000678:	f000 fae6 	bl	8000c48 <drawPixel>
	for(uint16_t i = y; i <= (y+h); i++)
 800067c:	8a3b      	ldrh	r3, [r7, #16]
 800067e:	3301      	adds	r3, #1
 8000680:	823b      	strh	r3, [r7, #16]
 8000682:	8a3a      	ldrh	r2, [r7, #16]
 8000684:	88b9      	ldrh	r1, [r7, #4]
 8000686:	887b      	ldrh	r3, [r7, #2]
 8000688:	440b      	add	r3, r1
 800068a:	429a      	cmp	r2, r3
 800068c:	ddec      	ble.n	8000668 <DrawRectangle+0x6c>
for(uint8_t j = 0; j <= border; j++)
 800068e:	7cfb      	ldrb	r3, [r7, #19]
 8000690:	3301      	adds	r3, #1
 8000692:	74fb      	strb	r3, [r7, #19]
 8000694:	7cfa      	ldrb	r2, [r7, #19]
 8000696:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800069a:	429a      	cmp	r2, r3
 800069c:	d9e1      	bls.n	8000662 <DrawRectangle+0x66>
	}
}
//lijntje verticaal 2
for(uint8_t j = 0; j <= border; j++)
 800069e:	2300      	movs	r3, #0
 80006a0:	73fb      	strb	r3, [r7, #15]
 80006a2:	e01b      	b.n	80006dc <DrawRectangle+0xe0>
{
	for(uint16_t i = y; i <= (y+h); i++)
 80006a4:	88bb      	ldrh	r3, [r7, #4]
 80006a6:	81bb      	strh	r3, [r7, #12]
 80006a8:	e00f      	b.n	80006ca <DrawRectangle+0xce>
	{
		drawPixel((x+w)-j, i, color);
 80006aa:	88fa      	ldrh	r2, [r7, #6]
 80006ac:	883b      	ldrh	r3, [r7, #0]
 80006ae:	4413      	add	r3, r2
 80006b0:	b29a      	uxth	r2, r3
 80006b2:	7bfb      	ldrb	r3, [r7, #15]
 80006b4:	b29b      	uxth	r3, r3
 80006b6:	1ad3      	subs	r3, r2, r3
 80006b8:	b29b      	uxth	r3, r3
 80006ba:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80006bc:	89b9      	ldrh	r1, [r7, #12]
 80006be:	4618      	mov	r0, r3
 80006c0:	f000 fac2 	bl	8000c48 <drawPixel>
	for(uint16_t i = y; i <= (y+h); i++)
 80006c4:	89bb      	ldrh	r3, [r7, #12]
 80006c6:	3301      	adds	r3, #1
 80006c8:	81bb      	strh	r3, [r7, #12]
 80006ca:	89ba      	ldrh	r2, [r7, #12]
 80006cc:	88b9      	ldrh	r1, [r7, #4]
 80006ce:	887b      	ldrh	r3, [r7, #2]
 80006d0:	440b      	add	r3, r1
 80006d2:	429a      	cmp	r2, r3
 80006d4:	dde9      	ble.n	80006aa <DrawRectangle+0xae>
for(uint8_t j = 0; j <= border; j++)
 80006d6:	7bfb      	ldrb	r3, [r7, #15]
 80006d8:	3301      	adds	r3, #1
 80006da:	73fb      	strb	r3, [r7, #15]
 80006dc:	7bfa      	ldrb	r2, [r7, #15]
 80006de:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80006e2:	429a      	cmp	r2, r3
 80006e4:	d9de      	bls.n	80006a4 <DrawRectangle+0xa8>
	}
}

//lijntje horizontaal 2
for(uint8_t j = 0; j <= border; j++)
 80006e6:	2300      	movs	r3, #0
 80006e8:	72fb      	strb	r3, [r7, #11]
 80006ea:	e01b      	b.n	8000724 <DrawRectangle+0x128>
{
	for(uint16_t i = x; i <= (x+w); i++)
 80006ec:	88fb      	ldrh	r3, [r7, #6]
 80006ee:	813b      	strh	r3, [r7, #8]
 80006f0:	e00f      	b.n	8000712 <DrawRectangle+0x116>
	{
		drawPixel(i, (y+h)-j, color);
 80006f2:	88ba      	ldrh	r2, [r7, #4]
 80006f4:	887b      	ldrh	r3, [r7, #2]
 80006f6:	4413      	add	r3, r2
 80006f8:	b29a      	uxth	r2, r3
 80006fa:	7afb      	ldrb	r3, [r7, #11]
 80006fc:	b29b      	uxth	r3, r3
 80006fe:	1ad3      	subs	r3, r2, r3
 8000700:	b299      	uxth	r1, r3
 8000702:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8000704:	893b      	ldrh	r3, [r7, #8]
 8000706:	4618      	mov	r0, r3
 8000708:	f000 fa9e 	bl	8000c48 <drawPixel>
	for(uint16_t i = x; i <= (x+w); i++)
 800070c:	893b      	ldrh	r3, [r7, #8]
 800070e:	3301      	adds	r3, #1
 8000710:	813b      	strh	r3, [r7, #8]
 8000712:	893a      	ldrh	r2, [r7, #8]
 8000714:	88f9      	ldrh	r1, [r7, #6]
 8000716:	883b      	ldrh	r3, [r7, #0]
 8000718:	440b      	add	r3, r1
 800071a:	429a      	cmp	r2, r3
 800071c:	dde9      	ble.n	80006f2 <DrawRectangle+0xf6>
for(uint8_t j = 0; j <= border; j++)
 800071e:	7afb      	ldrb	r3, [r7, #11]
 8000720:	3301      	adds	r3, #1
 8000722:	72fb      	strb	r3, [r7, #11]
 8000724:	7afa      	ldrb	r2, [r7, #11]
 8000726:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800072a:	429a      	cmp	r2, r3
 800072c:	d9de      	bls.n	80006ec <DrawRectangle+0xf0>
	}
}
//contentcolor
fillRect(x+border, y+border, w-(border*2), h-(border*2), contentcolor);
 800072e:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8000732:	b29a      	uxth	r2, r3
 8000734:	88fb      	ldrh	r3, [r7, #6]
 8000736:	4413      	add	r3, r2
 8000738:	b298      	uxth	r0, r3
 800073a:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800073e:	b29a      	uxth	r2, r3
 8000740:	88bb      	ldrh	r3, [r7, #4]
 8000742:	4413      	add	r3, r2
 8000744:	b299      	uxth	r1, r3
 8000746:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800074a:	b29b      	uxth	r3, r3
 800074c:	005b      	lsls	r3, r3, #1
 800074e:	b29b      	uxth	r3, r3
 8000750:	883a      	ldrh	r2, [r7, #0]
 8000752:	1ad3      	subs	r3, r2, r3
 8000754:	b29c      	uxth	r4, r3
 8000756:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800075a:	b29b      	uxth	r3, r3
 800075c:	005b      	lsls	r3, r3, #1
 800075e:	b29b      	uxth	r3, r3
 8000760:	887a      	ldrh	r2, [r7, #2]
 8000762:	1ad3      	subs	r3, r2, r3
 8000764:	b29a      	uxth	r2, r3
 8000766:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8000768:	9300      	str	r3, [sp, #0]
 800076a:	4613      	mov	r3, r2
 800076c:	4622      	mov	r2, r4
 800076e:	f000 fb23 	bl	8000db8 <fillRect>



}
 8000772:	bf00      	nop
 8000774:	371c      	adds	r7, #28
 8000776:	46bd      	mov	sp, r7
 8000778:	bd90      	pop	{r4, r7, pc}
	...

0800077c <mainscreen>:
void DrawVolumebuttonDown()
{

}
void mainscreen()
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b084      	sub	sp, #16
 8000780:	af04      	add	r7, sp, #16
	fillRect(0, 0, 320, 480, 0x0000);
 8000782:	2300      	movs	r3, #0
 8000784:	9300      	str	r3, [sp, #0]
 8000786:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 800078a:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800078e:	2100      	movs	r1, #0
 8000790:	2000      	movs	r0, #0
 8000792:	f000 fb11 	bl	8000db8 <fillRect>
	DrawImage(0, 0, POWERBUTTON_DATA_X_PIXEL, POWERBUTTON_DATA_Y_PIXEL, POWERBUTTON_DATA);
 8000796:	4b45      	ldr	r3, [pc, #276]	; (80008ac <mainscreen+0x130>)
 8000798:	9300      	str	r3, [sp, #0]
 800079a:	2345      	movs	r3, #69	; 0x45
 800079c:	224b      	movs	r2, #75	; 0x4b
 800079e:	2100      	movs	r1, #0
 80007a0:	2000      	movs	r0, #0
 80007a2:	f000 fa99 	bl	8000cd8 <DrawImage>
	DrawRectangle(25, 150, 75, 69, 0xffff, 0x001F , 5);
 80007a6:	2305      	movs	r3, #5
 80007a8:	9302      	str	r3, [sp, #8]
 80007aa:	231f      	movs	r3, #31
 80007ac:	9301      	str	r3, [sp, #4]
 80007ae:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80007b2:	9300      	str	r3, [sp, #0]
 80007b4:	2345      	movs	r3, #69	; 0x45
 80007b6:	224b      	movs	r2, #75	; 0x4b
 80007b8:	2196      	movs	r1, #150	; 0x96
 80007ba:	2019      	movs	r0, #25
 80007bc:	f7ff ff1e 	bl	80005fc <DrawRectangle>
	DrawRectangle(25, 250, 75, 69, 0xffff, 0x0F1F , 5);
 80007c0:	2305      	movs	r3, #5
 80007c2:	9302      	str	r3, [sp, #8]
 80007c4:	f640 731f 	movw	r3, #3871	; 0xf1f
 80007c8:	9301      	str	r3, [sp, #4]
 80007ca:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80007ce:	9300      	str	r3, [sp, #0]
 80007d0:	2345      	movs	r3, #69	; 0x45
 80007d2:	224b      	movs	r2, #75	; 0x4b
 80007d4:	21fa      	movs	r1, #250	; 0xfa
 80007d6:	2019      	movs	r0, #25
 80007d8:	f7ff ff10 	bl	80005fc <DrawRectangle>
	DrawRectangle(25, 350, 75, 69, 0xffff, 0xC01F , 5);
 80007dc:	2305      	movs	r3, #5
 80007de:	9302      	str	r3, [sp, #8]
 80007e0:	f24c 031f 	movw	r3, #49183	; 0xc01f
 80007e4:	9301      	str	r3, [sp, #4]
 80007e6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80007ea:	9300      	str	r3, [sp, #0]
 80007ec:	2345      	movs	r3, #69	; 0x45
 80007ee:	224b      	movs	r2, #75	; 0x4b
 80007f0:	f44f 71af 	mov.w	r1, #350	; 0x15e
 80007f4:	2019      	movs	r0, #25
 80007f6:	f7ff ff01 	bl	80005fc <DrawRectangle>

	DrawRectangle(125, 150, 75, 69, 0xffff, 0x0A1F , 5);
 80007fa:	2305      	movs	r3, #5
 80007fc:	9302      	str	r3, [sp, #8]
 80007fe:	f640 231f 	movw	r3, #2591	; 0xa1f
 8000802:	9301      	str	r3, [sp, #4]
 8000804:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000808:	9300      	str	r3, [sp, #0]
 800080a:	2345      	movs	r3, #69	; 0x45
 800080c:	224b      	movs	r2, #75	; 0x4b
 800080e:	2196      	movs	r1, #150	; 0x96
 8000810:	207d      	movs	r0, #125	; 0x7d
 8000812:	f7ff fef3 	bl	80005fc <DrawRectangle>
	DrawRectangle(125, 250, 75, 69, 0xffff, 0x9F5F , 5);
 8000816:	2305      	movs	r3, #5
 8000818:	9302      	str	r3, [sp, #8]
 800081a:	f649 735f 	movw	r3, #40799	; 0x9f5f
 800081e:	9301      	str	r3, [sp, #4]
 8000820:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000824:	9300      	str	r3, [sp, #0]
 8000826:	2345      	movs	r3, #69	; 0x45
 8000828:	224b      	movs	r2, #75	; 0x4b
 800082a:	21fa      	movs	r1, #250	; 0xfa
 800082c:	207d      	movs	r0, #125	; 0x7d
 800082e:	f7ff fee5 	bl	80005fc <DrawRectangle>
	DrawRectangle(125, 350, 75, 69, 0xffff, 0xF800 , 5);
 8000832:	2305      	movs	r3, #5
 8000834:	9302      	str	r3, [sp, #8]
 8000836:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800083a:	9301      	str	r3, [sp, #4]
 800083c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000840:	9300      	str	r3, [sp, #0]
 8000842:	2345      	movs	r3, #69	; 0x45
 8000844:	224b      	movs	r2, #75	; 0x4b
 8000846:	f44f 71af 	mov.w	r1, #350	; 0x15e
 800084a:	207d      	movs	r0, #125	; 0x7d
 800084c:	f7ff fed6 	bl	80005fc <DrawRectangle>

	DrawRectangle(225, 150, 75, 69, 0xffff, 0xABCD , 5);
 8000850:	2305      	movs	r3, #5
 8000852:	9302      	str	r3, [sp, #8]
 8000854:	f64a 33cd 	movw	r3, #43981	; 0xabcd
 8000858:	9301      	str	r3, [sp, #4]
 800085a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800085e:	9300      	str	r3, [sp, #0]
 8000860:	2345      	movs	r3, #69	; 0x45
 8000862:	224b      	movs	r2, #75	; 0x4b
 8000864:	2196      	movs	r1, #150	; 0x96
 8000866:	20e1      	movs	r0, #225	; 0xe1
 8000868:	f7ff fec8 	bl	80005fc <DrawRectangle>
	DrawRectangle(225, 250, 75, 69, 0xffff, 0x1234 , 5);
 800086c:	2305      	movs	r3, #5
 800086e:	9302      	str	r3, [sp, #8]
 8000870:	f241 2334 	movw	r3, #4660	; 0x1234
 8000874:	9301      	str	r3, [sp, #4]
 8000876:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800087a:	9300      	str	r3, [sp, #0]
 800087c:	2345      	movs	r3, #69	; 0x45
 800087e:	224b      	movs	r2, #75	; 0x4b
 8000880:	21fa      	movs	r1, #250	; 0xfa
 8000882:	20e1      	movs	r0, #225	; 0xe1
 8000884:	f7ff feba 	bl	80005fc <DrawRectangle>
	DrawRectangle(225, 350, 75, 69, 0xffff, 0x0E80 , 5);
 8000888:	2305      	movs	r3, #5
 800088a:	9302      	str	r3, [sp, #8]
 800088c:	f44f 6368 	mov.w	r3, #3712	; 0xe80
 8000890:	9301      	str	r3, [sp, #4]
 8000892:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000896:	9300      	str	r3, [sp, #0]
 8000898:	2345      	movs	r3, #69	; 0x45
 800089a:	224b      	movs	r2, #75	; 0x4b
 800089c:	f44f 71af 	mov.w	r1, #350	; 0x15e
 80008a0:	20e1      	movs	r0, #225	; 0xe1
 80008a2:	f7ff feab 	bl	80005fc <DrawRectangle>
}
 80008a6:	bf00      	nop
 80008a8:	46bd      	mov	sp, r7
 80008aa:	bd80      	pop	{r7, pc}
 80008ac:	080069a4 	.word	0x080069a4

080008b0 <whilelus>:
	  DrawImage(110, 135, LOGO_DATA_X_PIXEL, LOGO_DATA_Y_PIXEL, LOGO_DATA);
	  HAL_Delay(3000);
	  fillRect(110, 135, LOGO_DATA_X_PIXEL, LOGO_DATA_Y_PIXEL, 0x0000);
	  mainscreen();
}
void whilelus(){
 80008b0:	b580      	push	{r7, lr}
 80008b2:	af00      	add	r7, sp, #0
	{
		printf("no\r\n");
	}*/


	 	 if(NoSignal == 1)
 80008b4:	4b0d      	ldr	r3, [pc, #52]	; (80008ec <whilelus+0x3c>)
 80008b6:	781b      	ldrb	r3, [r3, #0]
 80008b8:	2b01      	cmp	r3, #1
 80008ba:	d104      	bne.n	80008c6 <whilelus+0x16>
	 	 {
		 IR_Read();
 80008bc:	f7ff fd40 	bl	8000340 <IR_Read>
		 IR_UNDERSTAND();
 80008c0:	f7ff fd4a 	bl	8000358 <IR_UNDERSTAND>
	 			IR_Carrier_OFF();
	 		 }

	 	 }

}
 80008c4:	e00f      	b.n	80008e6 <whilelus+0x36>
	 		 if(HAL_GPIO_ReadPin(Button_GPIO_Port, Button_Pin)==0)
 80008c6:	2110      	movs	r1, #16
 80008c8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008cc:	f001 fabe 	bl	8001e4c <HAL_GPIO_ReadPin>
 80008d0:	4603      	mov	r3, r0
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d105      	bne.n	80008e2 <whilelus+0x32>
	 			IR_sent();
 80008d6:	f7ff fdbf 	bl	8000458 <IR_sent>
	 			HAL_Delay(100);
 80008da:	2064      	movs	r0, #100	; 0x64
 80008dc:	f001 f80e 	bl	80018fc <HAL_Delay>
}
 80008e0:	e001      	b.n	80008e6 <whilelus+0x36>
	 			IR_Carrier_OFF();
 80008e2:	f7ff fd23 	bl	800032c <IR_Carrier_OFF>
}
 80008e6:	bf00      	nop
 80008e8:	bd80      	pop	{r7, pc}
 80008ea:	bf00      	nop
 80008ec:	20000002 	.word	0x20000002

080008f0 <CS_HIGH>:
#define ILI9488_GREENYELLOW 	0xAFE5      /* 173, 255,  47 */
#define ILI9488_PINK        			0xF81F

/* Some Easy Functions */ 
void CS_HIGH() //High = The chip is not selected and not accessible pg23
{HAL_GPIO_WritePin(CS_Port, CS_Pin, 1);}
 80008f0:	b580      	push	{r7, lr}
 80008f2:	af00      	add	r7, sp, #0
 80008f4:	2201      	movs	r2, #1
 80008f6:	2120      	movs	r1, #32
 80008f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008fc:	f001 fabe 	bl	8001e7c <HAL_GPIO_WritePin>
 8000900:	bf00      	nop
 8000902:	bd80      	pop	{r7, pc}

08000904 <CS_LOW>:
void CS_LOW()  //Low = The chip is selected and accessible pg23
{HAL_GPIO_WritePin(CS_Port, CS_Pin, 0);}
 8000904:	b580      	push	{r7, lr}
 8000906:	af00      	add	r7, sp, #0
 8000908:	2200      	movs	r2, #0
 800090a:	2120      	movs	r1, #32
 800090c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000910:	f001 fab4 	bl	8001e7c <HAL_GPIO_WritePin>
 8000914:	bf00      	nop
 8000916:	bd80      	pop	{r7, pc}

08000918 <DC_HIGH>:
void DC_HIGH() //High = Parameter pg23
{HAL_GPIO_WritePin(DC_Port, DC_Pin, 1);}
 8000918:	b580      	push	{r7, lr}
 800091a:	af00      	add	r7, sp, #0
 800091c:	2201      	movs	r2, #1
 800091e:	2180      	movs	r1, #128	; 0x80
 8000920:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000924:	f001 faaa 	bl	8001e7c <HAL_GPIO_WritePin>
 8000928:	bf00      	nop
 800092a:	bd80      	pop	{r7, pc}

0800092c <DC_LOW>:
void DC_LOW()  //Low = command pg23
{HAL_GPIO_WritePin(DC_Port, DC_Pin, 0);}
 800092c:	b580      	push	{r7, lr}
 800092e:	af00      	add	r7, sp, #0
 8000930:	2200      	movs	r2, #0
 8000932:	2180      	movs	r1, #128	; 0x80
 8000934:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000938:	f001 faa0 	bl	8001e7c <HAL_GPIO_WritePin>
 800093c:	bf00      	nop
 800093e:	bd80      	pop	{r7, pc}

08000940 <RST_HIGH>:
void RST_HIGH() 
{HAL_GPIO_WritePin(RST_Port, RST_Pin, 1);}
 8000940:	b580      	push	{r7, lr}
 8000942:	af00      	add	r7, sp, #0
 8000944:	2201      	movs	r2, #1
 8000946:	2140      	movs	r1, #64	; 0x40
 8000948:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800094c:	f001 fa96 	bl	8001e7c <HAL_GPIO_WritePin>
 8000950:	bf00      	nop
 8000952:	bd80      	pop	{r7, pc}

08000954 <RST_LOW>:
void RST_LOW() //initialize with a low input pg23
{HAL_GPIO_WritePin(RST_Port, RST_Pin, 0);}
 8000954:	b580      	push	{r7, lr}
 8000956:	af00      	add	r7, sp, #0
 8000958:	2200      	movs	r2, #0
 800095a:	2140      	movs	r1, #64	; 0x40
 800095c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000960:	f001 fa8c 	bl	8001e7c <HAL_GPIO_WritePin>
 8000964:	bf00      	nop
 8000966:	bd80      	pop	{r7, pc}

08000968 <DisplayBegin>:
	
}
*/

void DisplayBegin(void)		//DRFRobot
{
 8000968:	b580      	push	{r7, lr}
 800096a:	af00      	add	r7, sp, #0
	RST_HIGH(); //init
 800096c:	f7ff ffe8 	bl	8000940 <RST_HIGH>
	CS_HIGH();  //init
 8000970:	f7ff ffbe 	bl	80008f0 <CS_HIGH>
	RST_HIGH(); //init
 8000974:	f7ff ffe4 	bl	8000940 <RST_HIGH>
	HAL_Delay(100);
 8000978:	2064      	movs	r0, #100	; 0x64
 800097a:	f000 ffbf 	bl	80018fc <HAL_Delay>
	RST_LOW(); //initialize with a low input pg23
 800097e:	f7ff ffe9 	bl	8000954 <RST_LOW>
	HAL_Delay(500); //langere delay
 8000982:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000986:	f000 ffb9 	bl	80018fc <HAL_Delay>
	RST_HIGH();
 800098a:	f7ff ffd9 	bl	8000940 <RST_HIGH>
	HAL_Delay(500);  //langere delay
 800098e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000992:	f000 ffb3 	bl	80018fc <HAL_Delay>
	writecommand(0xF7);
 8000996:	20f7      	movs	r0, #247	; 0xf7
 8000998:	f000 f8d2 	bl	8000b40 <writecommand>
		writedata(0xA9);
 800099c:	20a9      	movs	r0, #169	; 0xa9
 800099e:	f000 f8eb 	bl	8000b78 <writedata>
		writedata(0x51);
 80009a2:	2051      	movs	r0, #81	; 0x51
 80009a4:	f000 f8e8 	bl	8000b78 <writedata>
		writedata(0x2C);
 80009a8:	202c      	movs	r0, #44	; 0x2c
 80009aa:	f000 f8e5 	bl	8000b78 <writedata>
		writedata(0x82);
 80009ae:	2082      	movs	r0, #130	; 0x82
 80009b0:	f000 f8e2 	bl	8000b78 <writedata>
	writecommand(0xC0);
 80009b4:	20c0      	movs	r0, #192	; 0xc0
 80009b6:	f000 f8c3 	bl	8000b40 <writecommand>
		writedata(0x11);
 80009ba:	2011      	movs	r0, #17
 80009bc:	f000 f8dc 	bl	8000b78 <writedata>
		writedata(0x09);
 80009c0:	2009      	movs	r0, #9
 80009c2:	f000 f8d9 	bl	8000b78 <writedata>
	writecommand(0xC1);
 80009c6:	20c1      	movs	r0, #193	; 0xc1
 80009c8:	f000 f8ba 	bl	8000b40 <writecommand>
		writedata(0x41);
 80009cc:	2041      	movs	r0, #65	; 0x41
 80009ce:	f000 f8d3 	bl	8000b78 <writedata>
	writecommand(0xC5);
 80009d2:	20c5      	movs	r0, #197	; 0xc5
 80009d4:	f000 f8b4 	bl	8000b40 <writecommand>
		writedata(0x00);
 80009d8:	2000      	movs	r0, #0
 80009da:	f000 f8cd 	bl	8000b78 <writedata>
		writedata(0x0A);
 80009de:	200a      	movs	r0, #10
 80009e0:	f000 f8ca 	bl	8000b78 <writedata>
		writedata(0x80);
 80009e4:	2080      	movs	r0, #128	; 0x80
 80009e6:	f000 f8c7 	bl	8000b78 <writedata>
	writecommand(0xB1);
 80009ea:	20b1      	movs	r0, #177	; 0xb1
 80009ec:	f000 f8a8 	bl	8000b40 <writecommand>
		writedata(0xB0);
 80009f0:	20b0      	movs	r0, #176	; 0xb0
 80009f2:	f000 f8c1 	bl	8000b78 <writedata>
		writedata(0x11);
 80009f6:	2011      	movs	r0, #17
 80009f8:	f000 f8be 	bl	8000b78 <writedata>
	writecommand(0xB4);
 80009fc:	20b4      	movs	r0, #180	; 0xb4
 80009fe:	f000 f89f 	bl	8000b40 <writecommand>
		writedata(0x02);
 8000a02:	2002      	movs	r0, #2
 8000a04:	f000 f8b8 	bl	8000b78 <writedata>
	writecommand(0xB6);
 8000a08:	20b6      	movs	r0, #182	; 0xb6
 8000a0a:	f000 f899 	bl	8000b40 <writecommand>
		writedata(0x02);
 8000a0e:	2002      	movs	r0, #2
 8000a10:	f000 f8b2 	bl	8000b78 <writedata>
		writedata(0x22);
 8000a14:	2022      	movs	r0, #34	; 0x22
 8000a16:	f000 f8af 	bl	8000b78 <writedata>
	writecommand(0xB7);
 8000a1a:	20b7      	movs	r0, #183	; 0xb7
 8000a1c:	f000 f890 	bl	8000b40 <writecommand>
		writedata(0xc6);
 8000a20:	20c6      	movs	r0, #198	; 0xc6
 8000a22:	f000 f8a9 	bl	8000b78 <writedata>
	writecommand(0xBE);
 8000a26:	20be      	movs	r0, #190	; 0xbe
 8000a28:	f000 f88a 	bl	8000b40 <writecommand>
		writedata(0x00);
 8000a2c:	2000      	movs	r0, #0
 8000a2e:	f000 f8a3 	bl	8000b78 <writedata>
		writedata(0x04);
 8000a32:	2004      	movs	r0, #4
 8000a34:	f000 f8a0 	bl	8000b78 <writedata>
	writecommand(0xE9);
 8000a38:	20e9      	movs	r0, #233	; 0xe9
 8000a3a:	f000 f881 	bl	8000b40 <writecommand>
		writedata(0x00);
 8000a3e:	2000      	movs	r0, #0
 8000a40:	f000 f89a 	bl	8000b78 <writedata>
	writecommand(0x36);
 8000a44:	2036      	movs	r0, #54	; 0x36
 8000a46:	f000 f87b 	bl	8000b40 <writecommand>
		writedata(0x08);
 8000a4a:	2008      	movs	r0, #8
 8000a4c:	f000 f894 	bl	8000b78 <writedata>
	writecommand(0x3A);
 8000a50:	203a      	movs	r0, #58	; 0x3a
 8000a52:	f000 f875 	bl	8000b40 <writecommand>
		writedata(0x66);
 8000a56:	2066      	movs	r0, #102	; 0x66
 8000a58:	f000 f88e 	bl	8000b78 <writedata>
	writecommand(0xE0);
 8000a5c:	20e0      	movs	r0, #224	; 0xe0
 8000a5e:	f000 f86f 	bl	8000b40 <writecommand>
		writedata(0x00);
 8000a62:	2000      	movs	r0, #0
 8000a64:	f000 f888 	bl	8000b78 <writedata>
		writedata(0x07);
 8000a68:	2007      	movs	r0, #7
 8000a6a:	f000 f885 	bl	8000b78 <writedata>
		writedata(0x10);
 8000a6e:	2010      	movs	r0, #16
 8000a70:	f000 f882 	bl	8000b78 <writedata>
		writedata(0x09);
 8000a74:	2009      	movs	r0, #9
 8000a76:	f000 f87f 	bl	8000b78 <writedata>
		writedata(0x17);
 8000a7a:	2017      	movs	r0, #23
 8000a7c:	f000 f87c 	bl	8000b78 <writedata>
		writedata(0x0B);
 8000a80:	200b      	movs	r0, #11
 8000a82:	f000 f879 	bl	8000b78 <writedata>
		writedata(0x41);
 8000a86:	2041      	movs	r0, #65	; 0x41
 8000a88:	f000 f876 	bl	8000b78 <writedata>
		writedata(0x89);
 8000a8c:	2089      	movs	r0, #137	; 0x89
 8000a8e:	f000 f873 	bl	8000b78 <writedata>
		writedata(0x4B);
 8000a92:	204b      	movs	r0, #75	; 0x4b
 8000a94:	f000 f870 	bl	8000b78 <writedata>
		writedata(0x0A);
 8000a98:	200a      	movs	r0, #10
 8000a9a:	f000 f86d 	bl	8000b78 <writedata>
		writedata(0x0C);
 8000a9e:	200c      	movs	r0, #12
 8000aa0:	f000 f86a 	bl	8000b78 <writedata>
		writedata(0x0E);
 8000aa4:	200e      	movs	r0, #14
 8000aa6:	f000 f867 	bl	8000b78 <writedata>
		writedata(0x18);
 8000aaa:	2018      	movs	r0, #24
 8000aac:	f000 f864 	bl	8000b78 <writedata>
		writedata(0x1B);
 8000ab0:	201b      	movs	r0, #27
 8000ab2:	f000 f861 	bl	8000b78 <writedata>
		writedata(0x0F);
 8000ab6:	200f      	movs	r0, #15
 8000ab8:	f000 f85e 	bl	8000b78 <writedata>

	writecommand(0XE1);
 8000abc:	20e1      	movs	r0, #225	; 0xe1
 8000abe:	f000 f83f 	bl	8000b40 <writecommand>
		writedata(0x00);
 8000ac2:	2000      	movs	r0, #0
 8000ac4:	f000 f858 	bl	8000b78 <writedata>
		writedata(0x17);
 8000ac8:	2017      	movs	r0, #23
 8000aca:	f000 f855 	bl	8000b78 <writedata>
		writedata(0x1A);
 8000ace:	201a      	movs	r0, #26
 8000ad0:	f000 f852 	bl	8000b78 <writedata>
		writedata(0x04);
 8000ad4:	2004      	movs	r0, #4
 8000ad6:	f000 f84f 	bl	8000b78 <writedata>
		writedata(0x0E);
 8000ada:	200e      	movs	r0, #14
 8000adc:	f000 f84c 	bl	8000b78 <writedata>
		writedata(0x06);
 8000ae0:	2006      	movs	r0, #6
 8000ae2:	f000 f849 	bl	8000b78 <writedata>
		writedata(0x2F);
 8000ae6:	202f      	movs	r0, #47	; 0x2f
 8000ae8:	f000 f846 	bl	8000b78 <writedata>
		writedata(0x45);
 8000aec:	2045      	movs	r0, #69	; 0x45
 8000aee:	f000 f843 	bl	8000b78 <writedata>
		writedata(0x43);
 8000af2:	2043      	movs	r0, #67	; 0x43
 8000af4:	f000 f840 	bl	8000b78 <writedata>
		writedata(0x02);
 8000af8:	2002      	movs	r0, #2
 8000afa:	f000 f83d 	bl	8000b78 <writedata>
		writedata(0x0A);
 8000afe:	200a      	movs	r0, #10
 8000b00:	f000 f83a 	bl	8000b78 <writedata>
		writedata(0x09);
 8000b04:	2009      	movs	r0, #9
 8000b06:	f000 f837 	bl	8000b78 <writedata>
		writedata(0x32);
 8000b0a:	2032      	movs	r0, #50	; 0x32
 8000b0c:	f000 f834 	bl	8000b78 <writedata>
		writedata(0x36);
 8000b10:	2036      	movs	r0, #54	; 0x36
 8000b12:	f000 f831 	bl	8000b78 <writedata>
		writedata(0x0F);
 8000b16:	200f      	movs	r0, #15
 8000b18:	f000 f82e 	bl	8000b78 <writedata>

	writecommand(Display_ExitSleep);    //Exit Sleep
 8000b1c:	2011      	movs	r0, #17
 8000b1e:	f000 f80f 	bl	8000b40 <writecommand>

	HAL_Delay(120);
 8000b22:	2078      	movs	r0, #120	; 0x78
 8000b24:	f000 feea 	bl	80018fc <HAL_Delay>
	writecommand(0x20);
 8000b28:	2020      	movs	r0, #32
 8000b2a:	f000 f809 	bl	8000b40 <writecommand>
	writecommand(Display_On);    //Display on
 8000b2e:	2029      	movs	r0, #41	; 0x29
 8000b30:	f000 f806 	bl	8000b40 <writecommand>
		writedata(0xB0);
 8000b34:	20b0      	movs	r0, #176	; 0xb0
 8000b36:	f000 f81f 	bl	8000b78 <writedata>


}
 8000b3a:	bf00      	nop
 8000b3c:	bd80      	pop	{r7, pc}
	...

08000b40 <writecommand>:
  HAL_SPI_STATE_BUSY_TX_RX = 0x05U,    //!< Data Transmission and Reception process is ongoing
  HAL_SPI_STATE_ERROR      = 0x06U,    //!< SPI error state
  HAL_SPI_STATE_ABORT      = 0x07U     //!< SPI abort is ongoing
  */
void writecommand(uint8_t cmdo)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b084      	sub	sp, #16
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	4603      	mov	r3, r0
 8000b48:	71fb      	strb	r3, [r7, #7]
	uint8_t commando = cmdo;
 8000b4a:	79fb      	ldrb	r3, [r7, #7]
 8000b4c:	73fb      	strb	r3, [r7, #15]
	DC_LOW(); //Low = command pg23
 8000b4e:	f7ff feed 	bl	800092c <DC_LOW>
	CS_LOW(); //The chip is selected and accessible pg23
 8000b52:	f7ff fed7 	bl	8000904 <CS_LOW>
	HAL_SPI_Transmit(&mySPI, &commando, 1, HAL_MAX_DELAY); //Size = bytes
 8000b56:	f107 010f 	add.w	r1, r7, #15
 8000b5a:	f04f 33ff 	mov.w	r3, #4294967295
 8000b5e:	2201      	movs	r2, #1
 8000b60:	4804      	ldr	r0, [pc, #16]	; (8000b74 <writecommand+0x34>)
 8000b62:	f002 fe6a 	bl	800383a <HAL_SPI_Transmit>
	CS_HIGH(); //The chip is not selected and not accessible pg23
 8000b66:	f7ff fec3 	bl	80008f0 <CS_HIGH>
	


}
 8000b6a:	bf00      	nop
 8000b6c:	3710      	adds	r7, #16
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bd80      	pop	{r7, pc}
 8000b72:	bf00      	nop
 8000b74:	200004fc 	.word	0x200004fc

08000b78 <writedata>:
void writedata(uint8_t dta )
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b084      	sub	sp, #16
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	4603      	mov	r3, r0
 8000b80:	71fb      	strb	r3, [r7, #7]
	uint8_t data = dta;
 8000b82:	79fb      	ldrb	r3, [r7, #7]
 8000b84:	73fb      	strb	r3, [r7, #15]
	DC_HIGH(); //High = Parameter pg23
 8000b86:	f7ff fec7 	bl	8000918 <DC_HIGH>
	CS_LOW(); //The chip is selected and accessible pg23
 8000b8a:	f7ff febb 	bl	8000904 <CS_LOW>
	HAL_SPI_Transmit(&mySPI, &data, 1, HAL_MAX_DELAY); //Size = bytes
 8000b8e:	f107 010f 	add.w	r1, r7, #15
 8000b92:	f04f 33ff 	mov.w	r3, #4294967295
 8000b96:	2201      	movs	r2, #1
 8000b98:	4804      	ldr	r0, [pc, #16]	; (8000bac <writedata+0x34>)
 8000b9a:	f002 fe4e 	bl	800383a <HAL_SPI_Transmit>
	CS_HIGH(); //The chip is not selected and not accessible pg23
 8000b9e:	f7ff fea7 	bl	80008f0 <CS_HIGH>
	//als ik het scherm uitschakel, krijg ik ook geen errors
	//wel leuk om optimistisch te zijn, maar dit doet niks
	//uint8_t StateSpiHulp = HAL_SPI_GetState(&hspi2);
	//uint8_t ErrorSpiHulp = HAL_SPI_GetError(&hspi2);
	//printf("    data: 0x %x Spi_State:%d Error: %d\r\n", dta, StateSpiHulp, ErrorSpiHulp);
}
 8000ba2:	bf00      	nop
 8000ba4:	3710      	adds	r7, #16
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bd80      	pop	{r7, pc}
 8000baa:	bf00      	nop
 8000bac:	200004fc 	.word	0x200004fc

08000bb0 <setAddrWindow>:
void setAddrWindow(uint16_t x0,uint16_t y0,uint16_t x1,uint16_t y1)
{
 8000bb0:	b590      	push	{r4, r7, lr}
 8000bb2:	b083      	sub	sp, #12
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	4604      	mov	r4, r0
 8000bb8:	4608      	mov	r0, r1
 8000bba:	4611      	mov	r1, r2
 8000bbc:	461a      	mov	r2, r3
 8000bbe:	4623      	mov	r3, r4
 8000bc0:	80fb      	strh	r3, [r7, #6]
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	80bb      	strh	r3, [r7, #4]
 8000bc6:	460b      	mov	r3, r1
 8000bc8:	807b      	strh	r3, [r7, #2]
 8000bca:	4613      	mov	r3, r2
 8000bcc:	803b      	strh	r3, [r7, #0]
	//pg 175 -> Column Address Set = 2Ah
	writecommand(0x2A);
 8000bce:	202a      	movs	r0, #42	; 0x2a
 8000bd0:	f7ff ffb6 	bl	8000b40 <writecommand>
	
	writedata(x0 >> 8); //?
 8000bd4:	88fb      	ldrh	r3, [r7, #6]
 8000bd6:	0a1b      	lsrs	r3, r3, #8
 8000bd8:	b29b      	uxth	r3, r3
 8000bda:	b2db      	uxtb	r3, r3
 8000bdc:	4618      	mov	r0, r3
 8000bde:	f7ff ffcb 	bl	8000b78 <writedata>
	writedata(x0 & 0xFF);     // XSTART ?
 8000be2:	88fb      	ldrh	r3, [r7, #6]
 8000be4:	b2db      	uxtb	r3, r3
 8000be6:	4618      	mov	r0, r3
 8000be8:	f7ff ffc6 	bl	8000b78 <writedata>
	writedata(x1 >> 8); //?
 8000bec:	887b      	ldrh	r3, [r7, #2]
 8000bee:	0a1b      	lsrs	r3, r3, #8
 8000bf0:	b29b      	uxth	r3, r3
 8000bf2:	b2db      	uxtb	r3, r3
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	f7ff ffbf 	bl	8000b78 <writedata>
	writedata(x1 & 0xFF);     // XEND //?
 8000bfa:	887b      	ldrh	r3, [r7, #2]
 8000bfc:	b2db      	uxtb	r3, r3
 8000bfe:	4618      	mov	r0, r3
 8000c00:	f7ff ffba 	bl	8000b78 <writedata>
	
	//pg 177 -> Page Address Set = 2Bh = Row Address Set 
	writecommand(0x2B); // Row addr set
 8000c04:	202b      	movs	r0, #43	; 0x2b
 8000c06:	f7ff ff9b 	bl	8000b40 <writecommand>
	writedata(y0 >> 8); //?
 8000c0a:	88bb      	ldrh	r3, [r7, #4]
 8000c0c:	0a1b      	lsrs	r3, r3, #8
 8000c0e:	b29b      	uxth	r3, r3
 8000c10:	b2db      	uxtb	r3, r3
 8000c12:	4618      	mov	r0, r3
 8000c14:	f7ff ffb0 	bl	8000b78 <writedata>
	writedata(y0 & 0xff);     // YSTART   ?
 8000c18:	88bb      	ldrh	r3, [r7, #4]
 8000c1a:	b2db      	uxtb	r3, r3
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	f7ff ffab 	bl	8000b78 <writedata>
	writedata(y1 >> 8); // ?
 8000c22:	883b      	ldrh	r3, [r7, #0]
 8000c24:	0a1b      	lsrs	r3, r3, #8
 8000c26:	b29b      	uxth	r3, r3
 8000c28:	b2db      	uxtb	r3, r3
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	f7ff ffa4 	bl	8000b78 <writedata>
	writedata(y1 & 0xff);     // YEND //?
 8000c30:	883b      	ldrh	r3, [r7, #0]
 8000c32:	b2db      	uxtb	r3, r3
 8000c34:	4618      	mov	r0, r3
 8000c36:	f7ff ff9f 	bl	8000b78 <writedata>
	writecommand(Display_Write_To_RAM);
 8000c3a:	202c      	movs	r0, #44	; 0x2c
 8000c3c:	f7ff ff80 	bl	8000b40 <writecommand>
	
}
 8000c40:	bf00      	nop
 8000c42:	370c      	adds	r7, #12
 8000c44:	46bd      	mov	sp, r7
 8000c46:	bd90      	pop	{r4, r7, pc}

08000c48 <drawPixel>:
void drawPixel(uint16_t x, uint16_t y, uint16_t color)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b082      	sub	sp, #8
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	4603      	mov	r3, r0
 8000c50:	80fb      	strh	r3, [r7, #6]
 8000c52:	460b      	mov	r3, r1
 8000c54:	80bb      	strh	r3, [r7, #4]
 8000c56:	4613      	mov	r3, r2
 8000c58:	807b      	strh	r3, [r7, #2]
	setAddrWindow(x, y, x + 1, y + 1);
 8000c5a:	88fb      	ldrh	r3, [r7, #6]
 8000c5c:	3301      	adds	r3, #1
 8000c5e:	b29a      	uxth	r2, r3
 8000c60:	88bb      	ldrh	r3, [r7, #4]
 8000c62:	3301      	adds	r3, #1
 8000c64:	b29b      	uxth	r3, r3
 8000c66:	88b9      	ldrh	r1, [r7, #4]
 8000c68:	88f8      	ldrh	r0, [r7, #6]
 8000c6a:	f7ff ffa1 	bl	8000bb0 <setAddrWindow>
	DC_HIGH();
 8000c6e:	f7ff fe53 	bl	8000918 <DC_HIGH>
	CS_LOW();
 8000c72:	f7ff fe47 	bl	8000904 <CS_LOW>
	write16BitColor(color);
 8000c76:	887b      	ldrh	r3, [r7, #2]
 8000c78:	4618      	mov	r0, r3
 8000c7a:	f000 f806 	bl	8000c8a <write16BitColor>
	CS_HIGH();
 8000c7e:	f7ff fe37 	bl	80008f0 <CS_HIGH>
}
 8000c82:	bf00      	nop
 8000c84:	3708      	adds	r7, #8
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bd80      	pop	{r7, pc}

08000c8a <write16BitColor>:

void write16BitColor(uint16_t color){
 8000c8a:	b580      	push	{r7, lr}
 8000c8c:	b084      	sub	sp, #16
 8000c8e:	af00      	add	r7, sp, #0
 8000c90:	4603      	mov	r3, r0
 8000c92:	80fb      	strh	r3, [r7, #6]
	//565  = rrrr rggg gggb bbbb
	//F800 = 1111 1000 0000 0000 //11 nullekes
	//07E0 = 0000 0111 1110 0000 //5 nulleks
	//001F = 0000 0000 0001 1111
	 uint8_t r = (color >> 8) & 0Xf8; //& 0xF800) >> 11;
 8000c94:	88fb      	ldrh	r3, [r7, #6]
 8000c96:	0a1b      	lsrs	r3, r3, #8
 8000c98:	b29b      	uxth	r3, r3
 8000c9a:	b2db      	uxtb	r3, r3
 8000c9c:	f023 0307 	bic.w	r3, r3, #7
 8000ca0:	73fb      	strb	r3, [r7, #15]
	 uint8_t g = (color >> 3) & 0Xfc; //& 0x07E0) >> 5;
 8000ca2:	88fb      	ldrh	r3, [r7, #6]
 8000ca4:	08db      	lsrs	r3, r3, #3
 8000ca6:	b29b      	uxth	r3, r3
 8000ca8:	b2db      	uxtb	r3, r3
 8000caa:	f023 0303 	bic.w	r3, r3, #3
 8000cae:	73bb      	strb	r3, [r7, #14]
	 uint8_t b = (color <<3); //& 0x001F;
 8000cb0:	88fb      	ldrh	r3, [r7, #6]
 8000cb2:	b2db      	uxtb	r3, r3
 8000cb4:	00db      	lsls	r3, r3, #3
 8000cb6:	737b      	strb	r3, [r7, #13]
	 //2^6 = 64  (0 tot 63)
	 //2^5 = 32 (0 tot 31)
	  //r = (r * 255) / 31;
	  //g = (g * 255) / 63;
	  //b = (b * 255) / 31;
	  lcd_write_data(r);
 8000cb8:	7bfb      	ldrb	r3, [r7, #15]
 8000cba:	4618      	mov	r0, r3
 8000cbc:	f000 f8e4 	bl	8000e88 <lcd_write_data>
	 lcd_write_data(g);
 8000cc0:	7bbb      	ldrb	r3, [r7, #14]
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	f000 f8e0 	bl	8000e88 <lcd_write_data>
	 lcd_write_data(b);
 8000cc8:	7b7b      	ldrb	r3, [r7, #13]
 8000cca:	4618      	mov	r0, r3
 8000ccc:	f000 f8dc 	bl	8000e88 <lcd_write_data>
	  //HAL_SPI_Transmit(&mySPI, &r, 1, HAL_MAX_DELAY); //Size = bytes
	  //HAL_SPI_Transmit(&mySPI, &g, 1, HAL_MAX_DELAY); //Size = bytes
	  //HAL_SPI_Transmit(&mySPI, &b, 1, HAL_MAX_DELAY); //Size = bytes
}
 8000cd0:	bf00      	nop
 8000cd2:	3710      	adds	r7, #16
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	bd80      	pop	{r7, pc}

08000cd8 <DrawImage>:

void DrawImage(uint16_t x, uint16_t y , uint16_t w , uint16_t h, uint16_t *Image)
{
 8000cd8:	b590      	push	{r4, r7, lr}
 8000cda:	b085      	sub	sp, #20
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	4604      	mov	r4, r0
 8000ce0:	4608      	mov	r0, r1
 8000ce2:	4611      	mov	r1, r2
 8000ce4:	461a      	mov	r2, r3
 8000ce6:	4623      	mov	r3, r4
 8000ce8:	80fb      	strh	r3, [r7, #6]
 8000cea:	4603      	mov	r3, r0
 8000cec:	80bb      	strh	r3, [r7, #4]
 8000cee:	460b      	mov	r3, r1
 8000cf0:	807b      	strh	r3, [r7, #2]
 8000cf2:	4613      	mov	r3, r2
 8000cf4:	803b      	strh	r3, [r7, #0]
	uint32_t PixelIndex = 0;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	60fb      	str	r3, [r7, #12]

	if ((x >= Display_width) || (y >= Display_height))
 8000cfa:	4b2d      	ldr	r3, [pc, #180]	; (8000db0 <DrawImage+0xd8>)
 8000cfc:	881b      	ldrh	r3, [r3, #0]
 8000cfe:	88fa      	ldrh	r2, [r7, #6]
 8000d00:	429a      	cmp	r2, r3
 8000d02:	d251      	bcs.n	8000da8 <DrawImage+0xd0>
 8000d04:	4b2b      	ldr	r3, [pc, #172]	; (8000db4 <DrawImage+0xdc>)
 8000d06:	881b      	ldrh	r3, [r3, #0]
 8000d08:	88ba      	ldrh	r2, [r7, #4]
 8000d0a:	429a      	cmp	r2, r3
 8000d0c:	d24c      	bcs.n	8000da8 <DrawImage+0xd0>
		return;
	if ((x + w - 1) >= Display_width)
 8000d0e:	88fa      	ldrh	r2, [r7, #6]
 8000d10:	887b      	ldrh	r3, [r7, #2]
 8000d12:	4413      	add	r3, r2
 8000d14:	4a26      	ldr	r2, [pc, #152]	; (8000db0 <DrawImage+0xd8>)
 8000d16:	8812      	ldrh	r2, [r2, #0]
 8000d18:	4293      	cmp	r3, r2
 8000d1a:	dd04      	ble.n	8000d26 <DrawImage+0x4e>
		w = Display_width - x;
 8000d1c:	4b24      	ldr	r3, [pc, #144]	; (8000db0 <DrawImage+0xd8>)
 8000d1e:	881a      	ldrh	r2, [r3, #0]
 8000d20:	88fb      	ldrh	r3, [r7, #6]
 8000d22:	1ad3      	subs	r3, r2, r3
 8000d24:	807b      	strh	r3, [r7, #2]
	if ((y + h - 1) >= Display_height)
 8000d26:	88ba      	ldrh	r2, [r7, #4]
 8000d28:	883b      	ldrh	r3, [r7, #0]
 8000d2a:	4413      	add	r3, r2
 8000d2c:	4a21      	ldr	r2, [pc, #132]	; (8000db4 <DrawImage+0xdc>)
 8000d2e:	8812      	ldrh	r2, [r2, #0]
 8000d30:	4293      	cmp	r3, r2
 8000d32:	dd04      	ble.n	8000d3e <DrawImage+0x66>
		h = Display_height - y;
 8000d34:	4b1f      	ldr	r3, [pc, #124]	; (8000db4 <DrawImage+0xdc>)
 8000d36:	881a      	ldrh	r2, [r3, #0]
 8000d38:	88bb      	ldrh	r3, [r7, #4]
 8000d3a:	1ad3      	subs	r3, r2, r3
 8000d3c:	803b      	strh	r3, [r7, #0]

	setAddrWindow(x, y, x + w - 1, y + h - 1);
 8000d3e:	88fa      	ldrh	r2, [r7, #6]
 8000d40:	887b      	ldrh	r3, [r7, #2]
 8000d42:	4413      	add	r3, r2
 8000d44:	b29b      	uxth	r3, r3
 8000d46:	3b01      	subs	r3, #1
 8000d48:	b29c      	uxth	r4, r3
 8000d4a:	88ba      	ldrh	r2, [r7, #4]
 8000d4c:	883b      	ldrh	r3, [r7, #0]
 8000d4e:	4413      	add	r3, r2
 8000d50:	b29b      	uxth	r3, r3
 8000d52:	3b01      	subs	r3, #1
 8000d54:	b29b      	uxth	r3, r3
 8000d56:	88b9      	ldrh	r1, [r7, #4]
 8000d58:	88f8      	ldrh	r0, [r7, #6]
 8000d5a:	4622      	mov	r2, r4
 8000d5c:	f7ff ff28 	bl	8000bb0 <setAddrWindow>

	DC_HIGH();
 8000d60:	f7ff fdda 	bl	8000918 <DC_HIGH>
	CS_LOW();
 8000d64:	f7ff fdce 	bl	8000904 <CS_LOW>

	for (y = h; y > 0; y--) {
 8000d68:	883b      	ldrh	r3, [r7, #0]
 8000d6a:	80bb      	strh	r3, [r7, #4]
 8000d6c:	e016      	b.n	8000d9c <DrawImage+0xc4>
		for (x = w; x > 0; x--) {
 8000d6e:	887b      	ldrh	r3, [r7, #2]
 8000d70:	80fb      	strh	r3, [r7, #6]
 8000d72:	e00d      	b.n	8000d90 <DrawImage+0xb8>

			write16BitColor(Image[PixelIndex]);
 8000d74:	68fb      	ldr	r3, [r7, #12]
 8000d76:	005b      	lsls	r3, r3, #1
 8000d78:	6a3a      	ldr	r2, [r7, #32]
 8000d7a:	4413      	add	r3, r2
 8000d7c:	881b      	ldrh	r3, [r3, #0]
 8000d7e:	4618      	mov	r0, r3
 8000d80:	f7ff ff83 	bl	8000c8a <write16BitColor>
			PixelIndex++;
 8000d84:	68fb      	ldr	r3, [r7, #12]
 8000d86:	3301      	adds	r3, #1
 8000d88:	60fb      	str	r3, [r7, #12]
		for (x = w; x > 0; x--) {
 8000d8a:	88fb      	ldrh	r3, [r7, #6]
 8000d8c:	3b01      	subs	r3, #1
 8000d8e:	80fb      	strh	r3, [r7, #6]
 8000d90:	88fb      	ldrh	r3, [r7, #6]
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d1ee      	bne.n	8000d74 <DrawImage+0x9c>
	for (y = h; y > 0; y--) {
 8000d96:	88bb      	ldrh	r3, [r7, #4]
 8000d98:	3b01      	subs	r3, #1
 8000d9a:	80bb      	strh	r3, [r7, #4]
 8000d9c:	88bb      	ldrh	r3, [r7, #4]
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d1e5      	bne.n	8000d6e <DrawImage+0x96>
		}
	}

	CS_HIGH();
 8000da2:	f7ff fda5 	bl	80008f0 <CS_HIGH>
 8000da6:	e000      	b.n	8000daa <DrawImage+0xd2>
		return;
 8000da8:	bf00      	nop



}
 8000daa:	3714      	adds	r7, #20
 8000dac:	46bd      	mov	sp, r7
 8000dae:	bd90      	pop	{r4, r7, pc}
 8000db0:	20000004 	.word	0x20000004
 8000db4:	20000006 	.word	0x20000006

08000db8 <fillRect>:
void fillRect(uint16_t x, uint16_t y , uint16_t w , uint16_t h, uint16_t color)
{
 8000db8:	b590      	push	{r4, r7, lr}
 8000dba:	b083      	sub	sp, #12
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	4604      	mov	r4, r0
 8000dc0:	4608      	mov	r0, r1
 8000dc2:	4611      	mov	r1, r2
 8000dc4:	461a      	mov	r2, r3
 8000dc6:	4623      	mov	r3, r4
 8000dc8:	80fb      	strh	r3, [r7, #6]
 8000dca:	4603      	mov	r3, r0
 8000dcc:	80bb      	strh	r3, [r7, #4]
 8000dce:	460b      	mov	r3, r1
 8000dd0:	807b      	strh	r3, [r7, #2]
 8000dd2:	4613      	mov	r3, r2
 8000dd4:	803b      	strh	r3, [r7, #0]
	if ((x >= Display_width) || (y >= Display_height))
 8000dd6:	4b2a      	ldr	r3, [pc, #168]	; (8000e80 <fillRect+0xc8>)
 8000dd8:	881b      	ldrh	r3, [r3, #0]
 8000dda:	88fa      	ldrh	r2, [r7, #6]
 8000ddc:	429a      	cmp	r2, r3
 8000dde:	d24a      	bcs.n	8000e76 <fillRect+0xbe>
 8000de0:	4b28      	ldr	r3, [pc, #160]	; (8000e84 <fillRect+0xcc>)
 8000de2:	881b      	ldrh	r3, [r3, #0]
 8000de4:	88ba      	ldrh	r2, [r7, #4]
 8000de6:	429a      	cmp	r2, r3
 8000de8:	d245      	bcs.n	8000e76 <fillRect+0xbe>
		return;
	if ((x + w - 1) >= Display_width)
 8000dea:	88fa      	ldrh	r2, [r7, #6]
 8000dec:	887b      	ldrh	r3, [r7, #2]
 8000dee:	4413      	add	r3, r2
 8000df0:	4a23      	ldr	r2, [pc, #140]	; (8000e80 <fillRect+0xc8>)
 8000df2:	8812      	ldrh	r2, [r2, #0]
 8000df4:	4293      	cmp	r3, r2
 8000df6:	dd04      	ble.n	8000e02 <fillRect+0x4a>
		w = Display_width - x;
 8000df8:	4b21      	ldr	r3, [pc, #132]	; (8000e80 <fillRect+0xc8>)
 8000dfa:	881a      	ldrh	r2, [r3, #0]
 8000dfc:	88fb      	ldrh	r3, [r7, #6]
 8000dfe:	1ad3      	subs	r3, r2, r3
 8000e00:	807b      	strh	r3, [r7, #2]
	if ((y + h - 1) >= Display_height)
 8000e02:	88ba      	ldrh	r2, [r7, #4]
 8000e04:	883b      	ldrh	r3, [r7, #0]
 8000e06:	4413      	add	r3, r2
 8000e08:	4a1e      	ldr	r2, [pc, #120]	; (8000e84 <fillRect+0xcc>)
 8000e0a:	8812      	ldrh	r2, [r2, #0]
 8000e0c:	4293      	cmp	r3, r2
 8000e0e:	dd04      	ble.n	8000e1a <fillRect+0x62>
		h = Display_height - y;
 8000e10:	4b1c      	ldr	r3, [pc, #112]	; (8000e84 <fillRect+0xcc>)
 8000e12:	881a      	ldrh	r2, [r3, #0]
 8000e14:	88bb      	ldrh	r3, [r7, #4]
 8000e16:	1ad3      	subs	r3, r2, r3
 8000e18:	803b      	strh	r3, [r7, #0]

	setAddrWindow(x, y, x + w - 1, y + h - 1);
 8000e1a:	88fa      	ldrh	r2, [r7, #6]
 8000e1c:	887b      	ldrh	r3, [r7, #2]
 8000e1e:	4413      	add	r3, r2
 8000e20:	b29b      	uxth	r3, r3
 8000e22:	3b01      	subs	r3, #1
 8000e24:	b29c      	uxth	r4, r3
 8000e26:	88ba      	ldrh	r2, [r7, #4]
 8000e28:	883b      	ldrh	r3, [r7, #0]
 8000e2a:	4413      	add	r3, r2
 8000e2c:	b29b      	uxth	r3, r3
 8000e2e:	3b01      	subs	r3, #1
 8000e30:	b29b      	uxth	r3, r3
 8000e32:	88b9      	ldrh	r1, [r7, #4]
 8000e34:	88f8      	ldrh	r0, [r7, #6]
 8000e36:	4622      	mov	r2, r4
 8000e38:	f7ff feba 	bl	8000bb0 <setAddrWindow>

	DC_HIGH();
 8000e3c:	f7ff fd6c 	bl	8000918 <DC_HIGH>
	CS_LOW();
 8000e40:	f7ff fd60 	bl	8000904 <CS_LOW>

	for (y = h; y > 0; y--) {
 8000e44:	883b      	ldrh	r3, [r7, #0]
 8000e46:	80bb      	strh	r3, [r7, #4]
 8000e48:	e00f      	b.n	8000e6a <fillRect+0xb2>
		for (x = w; x > 0; x--) {
 8000e4a:	887b      	ldrh	r3, [r7, #2]
 8000e4c:	80fb      	strh	r3, [r7, #6]
 8000e4e:	e006      	b.n	8000e5e <fillRect+0xa6>

			write16BitColor(color);
 8000e50:	8b3b      	ldrh	r3, [r7, #24]
 8000e52:	4618      	mov	r0, r3
 8000e54:	f7ff ff19 	bl	8000c8a <write16BitColor>
		for (x = w; x > 0; x--) {
 8000e58:	88fb      	ldrh	r3, [r7, #6]
 8000e5a:	3b01      	subs	r3, #1
 8000e5c:	80fb      	strh	r3, [r7, #6]
 8000e5e:	88fb      	ldrh	r3, [r7, #6]
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d1f5      	bne.n	8000e50 <fillRect+0x98>
	for (y = h; y > 0; y--) {
 8000e64:	88bb      	ldrh	r3, [r7, #4]
 8000e66:	3b01      	subs	r3, #1
 8000e68:	80bb      	strh	r3, [r7, #4]
 8000e6a:	88bb      	ldrh	r3, [r7, #4]
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d1ec      	bne.n	8000e4a <fillRect+0x92>
		}
	}

	CS_HIGH();
 8000e70:	f7ff fd3e 	bl	80008f0 <CS_HIGH>
 8000e74:	e000      	b.n	8000e78 <fillRect+0xc0>
		return;
 8000e76:	bf00      	nop



}
 8000e78:	370c      	adds	r7, #12
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bd90      	pop	{r4, r7, pc}
 8000e7e:	bf00      	nop
 8000e80:	20000004 	.word	0x20000004
 8000e84:	20000006 	.word	0x20000006

08000e88 <lcd_write_data>:

	HAL_Delay(120);
	lcd_write_command(0x29);
}
void lcd_write_data(uint8_t dta )
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b084      	sub	sp, #16
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	4603      	mov	r3, r0
 8000e90:	71fb      	strb	r3, [r7, #7]
	uint8_t data = dta;
 8000e92:	79fb      	ldrb	r3, [r7, #7]
 8000e94:	73fb      	strb	r3, [r7, #15]
	DC_HIGH(); //High = Parameter pg23
 8000e96:	f7ff fd3f 	bl	8000918 <DC_HIGH>
	CS_LOW(); //The chip is selected and accessible pg23
 8000e9a:	f7ff fd33 	bl	8000904 <CS_LOW>
	HAL_SPI_Transmit(&mySPI, &data, 1, HAL_MAX_DELAY); //Size = bytes
 8000e9e:	f107 010f 	add.w	r1, r7, #15
 8000ea2:	f04f 33ff 	mov.w	r3, #4294967295
 8000ea6:	2201      	movs	r2, #1
 8000ea8:	4804      	ldr	r0, [pc, #16]	; (8000ebc <lcd_write_data+0x34>)
 8000eaa:	f002 fcc6 	bl	800383a <HAL_SPI_Transmit>
	CS_HIGH(); //The chip is not selected and not accessible pg23
 8000eae:	f7ff fd1f 	bl	80008f0 <CS_HIGH>
	//als ik het scherm uitschakel, krijg ik ook geen errors
	//wel leuk om optimistisch te zijn, maar dit doet niks
	//uint8_t StateSpiHulp = HAL_SPI_GetState(&hspi2);
	//uint8_t ErrorSpiHulp = HAL_SPI_GetError(&hspi2);
	//printf("    data: 0x %x Spi_State:%d Error: %d\r\n", dta, StateSpiHulp, ErrorSpiHulp);
}
 8000eb2:	bf00      	nop
 8000eb4:	3710      	adds	r7, #16
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bd80      	pop	{r7, pc}
 8000eba:	bf00      	nop
 8000ebc:	200004fc 	.word	0x200004fc

08000ec0 <_write>:
/* USER CODE BEGIN 0 */
#include <errno.h>
#include <sys/stat.h>
#include <sys/times.h>
#include <sys/unistd.h>
int _write(int file, char *ptr, int len) {
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b086      	sub	sp, #24
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	60f8      	str	r0, [r7, #12]
 8000ec8:	60b9      	str	r1, [r7, #8]
 8000eca:	607a      	str	r2, [r7, #4]
    HAL_StatusTypeDef xStatus;
    switch (file) {
 8000ecc:	68fb      	ldr	r3, [r7, #12]
 8000ece:	2b01      	cmp	r3, #1
 8000ed0:	d003      	beq.n	8000eda <_write+0x1a>
 8000ed2:	68fb      	ldr	r3, [r7, #12]
 8000ed4:	2b02      	cmp	r3, #2
 8000ed6:	d015      	beq.n	8000f04 <_write+0x44>
 8000ed8:	e029      	b.n	8000f2e <_write+0x6e>
    case STDOUT_FILENO: /*stdout*/
		xStatus = HAL_UART_Transmit(&huart1, (uint8_t*)ptr, len, HAL_MAX_DELAY);
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	b29a      	uxth	r2, r3
 8000ede:	f04f 33ff 	mov.w	r3, #4294967295
 8000ee2:	68b9      	ldr	r1, [r7, #8]
 8000ee4:	481a      	ldr	r0, [pc, #104]	; (8000f50 <_write+0x90>)
 8000ee6:	f004 f8f5 	bl	80050d4 <HAL_UART_Transmit>
 8000eea:	4603      	mov	r3, r0
 8000eec:	75fb      	strb	r3, [r7, #23]
		if (xStatus != HAL_OK) {
 8000eee:	7dfb      	ldrb	r3, [r7, #23]
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d024      	beq.n	8000f3e <_write+0x7e>
			errno = EIO;
 8000ef4:	f004 fcc4 	bl	8005880 <__errno>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	2205      	movs	r2, #5
 8000efc:	601a      	str	r2, [r3, #0]
			return -1;
 8000efe:	f04f 33ff 	mov.w	r3, #4294967295
 8000f02:	e020      	b.n	8000f46 <_write+0x86>
		}
        break;
    case STDERR_FILENO: /* stderr */
		xStatus = HAL_UART_Transmit(&huart1, (uint8_t*)ptr, len, HAL_MAX_DELAY);
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	b29a      	uxth	r2, r3
 8000f08:	f04f 33ff 	mov.w	r3, #4294967295
 8000f0c:	68b9      	ldr	r1, [r7, #8]
 8000f0e:	4810      	ldr	r0, [pc, #64]	; (8000f50 <_write+0x90>)
 8000f10:	f004 f8e0 	bl	80050d4 <HAL_UART_Transmit>
 8000f14:	4603      	mov	r3, r0
 8000f16:	75fb      	strb	r3, [r7, #23]
		if (xStatus != HAL_OK) {
 8000f18:	7dfb      	ldrb	r3, [r7, #23]
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d011      	beq.n	8000f42 <_write+0x82>
			errno = EIO;
 8000f1e:	f004 fcaf 	bl	8005880 <__errno>
 8000f22:	4603      	mov	r3, r0
 8000f24:	2205      	movs	r2, #5
 8000f26:	601a      	str	r2, [r3, #0]
			return -1;
 8000f28:	f04f 33ff 	mov.w	r3, #4294967295
 8000f2c:	e00b      	b.n	8000f46 <_write+0x86>
		}
        break;
    default:
        errno = EBADF;
 8000f2e:	f004 fca7 	bl	8005880 <__errno>
 8000f32:	4603      	mov	r3, r0
 8000f34:	2209      	movs	r2, #9
 8000f36:	601a      	str	r2, [r3, #0]
        return -1;
 8000f38:	f04f 33ff 	mov.w	r3, #4294967295
 8000f3c:	e003      	b.n	8000f46 <_write+0x86>
        break;
 8000f3e:	bf00      	nop
 8000f40:	e000      	b.n	8000f44 <_write+0x84>
        break;
 8000f42:	bf00      	nop
    }
    return len;
 8000f44:	687b      	ldr	r3, [r7, #4]
}
 8000f46:	4618      	mov	r0, r3
 8000f48:	3718      	adds	r7, #24
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bd80      	pop	{r7, pc}
 8000f4e:	bf00      	nop
 8000f50:	200005f8 	.word	0x200005f8

08000f54 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f58:	f000 fc6a 	bl	8001830 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f5c:	f000 f810 	bl	8000f80 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f60:	f000 f9ba 	bl	80012d8 <MX_GPIO_Init>
  MX_TIM1_Init();
 8000f64:	f000 f8a6 	bl	80010b4 <MX_TIM1_Init>
  MX_TIM15_Init();
 8000f68:	f000 f934 	bl	80011d4 <MX_TIM15_Init>
  MX_USART1_UART_Init();
 8000f6c:	f000 f984 	bl	8001278 <MX_USART1_UART_Init>
  MX_SPI2_Init();
 8000f70:	f000 f862 	bl	8001038 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  All_Carl_Inits();
 8000f74:	f7ff f983 	bl	800027e <All_Carl_Inits>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  whilelus();
 8000f78:	f7ff fc9a 	bl	80008b0 <whilelus>
 8000f7c:	e7fc      	b.n	8000f78 <main+0x24>
	...

08000f80 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b09c      	sub	sp, #112	; 0x70
 8000f84:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f86:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000f8a:	2228      	movs	r2, #40	; 0x28
 8000f8c:	2100      	movs	r1, #0
 8000f8e:	4618      	mov	r0, r3
 8000f90:	f004 fca0 	bl	80058d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f94:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000f98:	2200      	movs	r2, #0
 8000f9a:	601a      	str	r2, [r3, #0]
 8000f9c:	605a      	str	r2, [r3, #4]
 8000f9e:	609a      	str	r2, [r3, #8]
 8000fa0:	60da      	str	r2, [r3, #12]
 8000fa2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000fa4:	1d3b      	adds	r3, r7, #4
 8000fa6:	2230      	movs	r2, #48	; 0x30
 8000fa8:	2100      	movs	r1, #0
 8000faa:	4618      	mov	r0, r3
 8000fac:	f004 fc92 	bl	80058d4 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000fb0:	2302      	movs	r3, #2
 8000fb2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000fb4:	2301      	movs	r3, #1
 8000fb6:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000fb8:	2310      	movs	r3, #16
 8000fba:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fbc:	2302      	movs	r3, #2
 8000fbe:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000fc4:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000fc8:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fca:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000fce:	4618      	mov	r0, r3
 8000fd0:	f000 ff90 	bl	8001ef4 <HAL_RCC_OscConfig>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d001      	beq.n	8000fde <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8000fda:	f000 f9eb 	bl	80013b4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fde:	230f      	movs	r3, #15
 8000fe0:	637b      	str	r3, [r7, #52]	; 0x34
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fe2:	2302      	movs	r3, #2
 8000fe4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000fea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000fee:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	647b      	str	r3, [r7, #68]	; 0x44

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000ff4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000ff8:	2102      	movs	r1, #2
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	f001 ffb8 	bl	8002f70 <HAL_RCC_ClockConfig>
 8001000:	4603      	mov	r3, r0
 8001002:	2b00      	cmp	r3, #0
 8001004:	d001      	beq.n	800100a <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8001006:	f000 f9d5 	bl	80013b4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_TIM1
 800100a:	4b0a      	ldr	r3, [pc, #40]	; (8001034 <SystemClock_Config+0xb4>)
 800100c:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_TIM15;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 800100e:	2300      	movs	r3, #0
 8001010:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 8001012:	2300      	movs	r3, #0
 8001014:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInit.Tim15ClockSelection = RCC_TIM15CLK_HCLK;
 8001016:	2300      	movs	r3, #0
 8001018:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800101a:	1d3b      	adds	r3, r7, #4
 800101c:	4618      	mov	r0, r3
 800101e:	f002 f9dd 	bl	80033dc <HAL_RCCEx_PeriphCLKConfig>
 8001022:	4603      	mov	r3, r0
 8001024:	2b00      	cmp	r3, #0
 8001026:	d001      	beq.n	800102c <SystemClock_Config+0xac>
  {
    Error_Handler();
 8001028:	f000 f9c4 	bl	80013b4 <Error_Handler>
  }
}
 800102c:	bf00      	nop
 800102e:	3770      	adds	r7, #112	; 0x70
 8001030:	46bd      	mov	sp, r7
 8001032:	bd80      	pop	{r7, pc}
 8001034:	00041001 	.word	0x00041001

08001038 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800103c:	4b1b      	ldr	r3, [pc, #108]	; (80010ac <MX_SPI2_Init+0x74>)
 800103e:	4a1c      	ldr	r2, [pc, #112]	; (80010b0 <MX_SPI2_Init+0x78>)
 8001040:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001042:	4b1a      	ldr	r3, [pc, #104]	; (80010ac <MX_SPI2_Init+0x74>)
 8001044:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001048:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800104a:	4b18      	ldr	r3, [pc, #96]	; (80010ac <MX_SPI2_Init+0x74>)
 800104c:	2200      	movs	r2, #0
 800104e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001050:	4b16      	ldr	r3, [pc, #88]	; (80010ac <MX_SPI2_Init+0x74>)
 8001052:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001056:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001058:	4b14      	ldr	r3, [pc, #80]	; (80010ac <MX_SPI2_Init+0x74>)
 800105a:	2200      	movs	r2, #0
 800105c:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800105e:	4b13      	ldr	r3, [pc, #76]	; (80010ac <MX_SPI2_Init+0x74>)
 8001060:	2200      	movs	r2, #0
 8001062:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001064:	4b11      	ldr	r3, [pc, #68]	; (80010ac <MX_SPI2_Init+0x74>)
 8001066:	f44f 7200 	mov.w	r2, #512	; 0x200
 800106a:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800106c:	4b0f      	ldr	r3, [pc, #60]	; (80010ac <MX_SPI2_Init+0x74>)
 800106e:	2200      	movs	r2, #0
 8001070:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001072:	4b0e      	ldr	r3, [pc, #56]	; (80010ac <MX_SPI2_Init+0x74>)
 8001074:	2200      	movs	r2, #0
 8001076:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001078:	4b0c      	ldr	r3, [pc, #48]	; (80010ac <MX_SPI2_Init+0x74>)
 800107a:	2200      	movs	r2, #0
 800107c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800107e:	4b0b      	ldr	r3, [pc, #44]	; (80010ac <MX_SPI2_Init+0x74>)
 8001080:	2200      	movs	r2, #0
 8001082:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8001084:	4b09      	ldr	r3, [pc, #36]	; (80010ac <MX_SPI2_Init+0x74>)
 8001086:	2207      	movs	r2, #7
 8001088:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800108a:	4b08      	ldr	r3, [pc, #32]	; (80010ac <MX_SPI2_Init+0x74>)
 800108c:	2200      	movs	r2, #0
 800108e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001090:	4b06      	ldr	r3, [pc, #24]	; (80010ac <MX_SPI2_Init+0x74>)
 8001092:	2208      	movs	r2, #8
 8001094:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001096:	4805      	ldr	r0, [pc, #20]	; (80010ac <MX_SPI2_Init+0x74>)
 8001098:	f002 fb24 	bl	80036e4 <HAL_SPI_Init>
 800109c:	4603      	mov	r3, r0
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d001      	beq.n	80010a6 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 80010a2:	f000 f987 	bl	80013b4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80010a6:	bf00      	nop
 80010a8:	bd80      	pop	{r7, pc}
 80010aa:	bf00      	nop
 80010ac:	200004fc 	.word	0x200004fc
 80010b0:	40003800 	.word	0x40003800

080010b4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b096      	sub	sp, #88	; 0x58
 80010b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010ba:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80010be:	2200      	movs	r2, #0
 80010c0:	601a      	str	r2, [r3, #0]
 80010c2:	605a      	str	r2, [r3, #4]
 80010c4:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80010c6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80010ca:	2200      	movs	r2, #0
 80010cc:	601a      	str	r2, [r3, #0]
 80010ce:	605a      	str	r2, [r3, #4]
 80010d0:	609a      	str	r2, [r3, #8]
 80010d2:	60da      	str	r2, [r3, #12]
 80010d4:	611a      	str	r2, [r3, #16]
 80010d6:	615a      	str	r2, [r3, #20]
 80010d8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80010da:	1d3b      	adds	r3, r7, #4
 80010dc:	222c      	movs	r2, #44	; 0x2c
 80010de:	2100      	movs	r1, #0
 80010e0:	4618      	mov	r0, r3
 80010e2:	f004 fbf7 	bl	80058d4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80010e6:	4b39      	ldr	r3, [pc, #228]	; (80011cc <MX_TIM1_Init+0x118>)
 80010e8:	4a39      	ldr	r2, [pc, #228]	; (80011d0 <MX_TIM1_Init+0x11c>)
 80010ea:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 4-1;
 80010ec:	4b37      	ldr	r3, [pc, #220]	; (80011cc <MX_TIM1_Init+0x118>)
 80010ee:	2203      	movs	r2, #3
 80010f0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010f2:	4b36      	ldr	r3, [pc, #216]	; (80011cc <MX_TIM1_Init+0x118>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 422-1;
 80010f8:	4b34      	ldr	r3, [pc, #208]	; (80011cc <MX_TIM1_Init+0x118>)
 80010fa:	f240 12a5 	movw	r2, #421	; 0x1a5
 80010fe:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001100:	4b32      	ldr	r3, [pc, #200]	; (80011cc <MX_TIM1_Init+0x118>)
 8001102:	2200      	movs	r2, #0
 8001104:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001106:	4b31      	ldr	r3, [pc, #196]	; (80011cc <MX_TIM1_Init+0x118>)
 8001108:	2200      	movs	r2, #0
 800110a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800110c:	4b2f      	ldr	r3, [pc, #188]	; (80011cc <MX_TIM1_Init+0x118>)
 800110e:	2280      	movs	r2, #128	; 0x80
 8001110:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001112:	482e      	ldr	r0, [pc, #184]	; (80011cc <MX_TIM1_Init+0x118>)
 8001114:	f002 ff35 	bl	8003f82 <HAL_TIM_PWM_Init>
 8001118:	4603      	mov	r3, r0
 800111a:	2b00      	cmp	r3, #0
 800111c:	d001      	beq.n	8001122 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 800111e:	f000 f949 	bl	80013b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001122:	2300      	movs	r3, #0
 8001124:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001126:	2300      	movs	r3, #0
 8001128:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800112a:	2300      	movs	r3, #0
 800112c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800112e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001132:	4619      	mov	r1, r3
 8001134:	4825      	ldr	r0, [pc, #148]	; (80011cc <MX_TIM1_Init+0x118>)
 8001136:	f003 fea1 	bl	8004e7c <HAL_TIMEx_MasterConfigSynchronization>
 800113a:	4603      	mov	r3, r0
 800113c:	2b00      	cmp	r3, #0
 800113e:	d001      	beq.n	8001144 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001140:	f000 f938 	bl	80013b4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001144:	2360      	movs	r3, #96	; 0x60
 8001146:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 211-1;
 8001148:	23d2      	movs	r3, #210	; 0xd2
 800114a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800114c:	2300      	movs	r3, #0
 800114e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001150:	2300      	movs	r3, #0
 8001152:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001154:	2300      	movs	r3, #0
 8001156:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001158:	2300      	movs	r3, #0
 800115a:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800115c:	2300      	movs	r3, #0
 800115e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001160:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001164:	2200      	movs	r2, #0
 8001166:	4619      	mov	r1, r3
 8001168:	4818      	ldr	r0, [pc, #96]	; (80011cc <MX_TIM1_Init+0x118>)
 800116a:	f003 f8d5 	bl	8004318 <HAL_TIM_PWM_ConfigChannel>
 800116e:	4603      	mov	r3, r0
 8001170:	2b00      	cmp	r3, #0
 8001172:	d001      	beq.n	8001178 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001174:	f000 f91e 	bl	80013b4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001178:	2300      	movs	r3, #0
 800117a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800117c:	2300      	movs	r3, #0
 800117e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001180:	2300      	movs	r3, #0
 8001182:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001184:	2300      	movs	r3, #0
 8001186:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001188:	2300      	movs	r3, #0
 800118a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800118c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001190:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001192:	2300      	movs	r3, #0
 8001194:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001196:	2300      	movs	r3, #0
 8001198:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800119a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800119e:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80011a0:	2300      	movs	r3, #0
 80011a2:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80011a4:	2300      	movs	r3, #0
 80011a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80011a8:	1d3b      	adds	r3, r7, #4
 80011aa:	4619      	mov	r1, r3
 80011ac:	4807      	ldr	r0, [pc, #28]	; (80011cc <MX_TIM1_Init+0x118>)
 80011ae:	f003 fecb 	bl	8004f48 <HAL_TIMEx_ConfigBreakDeadTime>
 80011b2:	4603      	mov	r3, r0
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d001      	beq.n	80011bc <MX_TIM1_Init+0x108>
  {
    Error_Handler();
 80011b8:	f000 f8fc 	bl	80013b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80011bc:	4803      	ldr	r0, [pc, #12]	; (80011cc <MX_TIM1_Init+0x118>)
 80011be:	f000 f9c5 	bl	800154c <HAL_TIM_MspPostInit>

}
 80011c2:	bf00      	nop
 80011c4:	3758      	adds	r7, #88	; 0x58
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}
 80011ca:	bf00      	nop
 80011cc:	20000560 	.word	0x20000560
 80011d0:	40012c00 	.word	0x40012c00

080011d4 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b088      	sub	sp, #32
 80011d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011da:	f107 0310 	add.w	r3, r7, #16
 80011de:	2200      	movs	r2, #0
 80011e0:	601a      	str	r2, [r3, #0]
 80011e2:	605a      	str	r2, [r3, #4]
 80011e4:	609a      	str	r2, [r3, #8]
 80011e6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011e8:	1d3b      	adds	r3, r7, #4
 80011ea:	2200      	movs	r2, #0
 80011ec:	601a      	str	r2, [r3, #0]
 80011ee:	605a      	str	r2, [r3, #4]
 80011f0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 80011f2:	4b1f      	ldr	r3, [pc, #124]	; (8001270 <MX_TIM15_Init+0x9c>)
 80011f4:	4a1f      	ldr	r2, [pc, #124]	; (8001274 <MX_TIM15_Init+0xa0>)
 80011f6:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 64;
 80011f8:	4b1d      	ldr	r3, [pc, #116]	; (8001270 <MX_TIM15_Init+0x9c>)
 80011fa:	2240      	movs	r2, #64	; 0x40
 80011fc:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011fe:	4b1c      	ldr	r3, [pc, #112]	; (8001270 <MX_TIM15_Init+0x9c>)
 8001200:	2200      	movs	r2, #0
 8001202:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 8001204:	4b1a      	ldr	r3, [pc, #104]	; (8001270 <MX_TIM15_Init+0x9c>)
 8001206:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800120a:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800120c:	4b18      	ldr	r3, [pc, #96]	; (8001270 <MX_TIM15_Init+0x9c>)
 800120e:	2200      	movs	r2, #0
 8001210:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8001212:	4b17      	ldr	r3, [pc, #92]	; (8001270 <MX_TIM15_Init+0x9c>)
 8001214:	2200      	movs	r2, #0
 8001216:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001218:	4b15      	ldr	r3, [pc, #84]	; (8001270 <MX_TIM15_Init+0x9c>)
 800121a:	2280      	movs	r2, #128	; 0x80
 800121c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 800121e:	4814      	ldr	r0, [pc, #80]	; (8001270 <MX_TIM15_Init+0x9c>)
 8001220:	f002 fde4 	bl	8003dec <HAL_TIM_Base_Init>
 8001224:	4603      	mov	r3, r0
 8001226:	2b00      	cmp	r3, #0
 8001228:	d001      	beq.n	800122e <MX_TIM15_Init+0x5a>
  {
    Error_Handler();
 800122a:	f000 f8c3 	bl	80013b4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800122e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001232:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8001234:	f107 0310 	add.w	r3, r7, #16
 8001238:	4619      	mov	r1, r3
 800123a:	480d      	ldr	r0, [pc, #52]	; (8001270 <MX_TIM15_Init+0x9c>)
 800123c:	f003 f980 	bl	8004540 <HAL_TIM_ConfigClockSource>
 8001240:	4603      	mov	r3, r0
 8001242:	2b00      	cmp	r3, #0
 8001244:	d001      	beq.n	800124a <MX_TIM15_Init+0x76>
  {
    Error_Handler();
 8001246:	f000 f8b5 	bl	80013b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800124a:	2300      	movs	r3, #0
 800124c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800124e:	2300      	movs	r3, #0
 8001250:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8001252:	1d3b      	adds	r3, r7, #4
 8001254:	4619      	mov	r1, r3
 8001256:	4806      	ldr	r0, [pc, #24]	; (8001270 <MX_TIM15_Init+0x9c>)
 8001258:	f003 fe10 	bl	8004e7c <HAL_TIMEx_MasterConfigSynchronization>
 800125c:	4603      	mov	r3, r0
 800125e:	2b00      	cmp	r3, #0
 8001260:	d001      	beq.n	8001266 <MX_TIM15_Init+0x92>
  {
    Error_Handler();
 8001262:	f000 f8a7 	bl	80013b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 8001266:	bf00      	nop
 8001268:	3720      	adds	r7, #32
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}
 800126e:	bf00      	nop
 8001270:	200005ac 	.word	0x200005ac
 8001274:	40014000 	.word	0x40014000

08001278 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800127c:	4b14      	ldr	r3, [pc, #80]	; (80012d0 <MX_USART1_UART_Init+0x58>)
 800127e:	4a15      	ldr	r2, [pc, #84]	; (80012d4 <MX_USART1_UART_Init+0x5c>)
 8001280:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001282:	4b13      	ldr	r3, [pc, #76]	; (80012d0 <MX_USART1_UART_Init+0x58>)
 8001284:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001288:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800128a:	4b11      	ldr	r3, [pc, #68]	; (80012d0 <MX_USART1_UART_Init+0x58>)
 800128c:	2200      	movs	r2, #0
 800128e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001290:	4b0f      	ldr	r3, [pc, #60]	; (80012d0 <MX_USART1_UART_Init+0x58>)
 8001292:	2200      	movs	r2, #0
 8001294:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001296:	4b0e      	ldr	r3, [pc, #56]	; (80012d0 <MX_USART1_UART_Init+0x58>)
 8001298:	2200      	movs	r2, #0
 800129a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800129c:	4b0c      	ldr	r3, [pc, #48]	; (80012d0 <MX_USART1_UART_Init+0x58>)
 800129e:	220c      	movs	r2, #12
 80012a0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012a2:	4b0b      	ldr	r3, [pc, #44]	; (80012d0 <MX_USART1_UART_Init+0x58>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80012a8:	4b09      	ldr	r3, [pc, #36]	; (80012d0 <MX_USART1_UART_Init+0x58>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80012ae:	4b08      	ldr	r3, [pc, #32]	; (80012d0 <MX_USART1_UART_Init+0x58>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80012b4:	4b06      	ldr	r3, [pc, #24]	; (80012d0 <MX_USART1_UART_Init+0x58>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80012ba:	4805      	ldr	r0, [pc, #20]	; (80012d0 <MX_USART1_UART_Init+0x58>)
 80012bc:	f003 febc 	bl	8005038 <HAL_UART_Init>
 80012c0:	4603      	mov	r3, r0
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d001      	beq.n	80012ca <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80012c6:	f000 f875 	bl	80013b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80012ca:	bf00      	nop
 80012cc:	bd80      	pop	{r7, pc}
 80012ce:	bf00      	nop
 80012d0:	200005f8 	.word	0x200005f8
 80012d4:	40013800 	.word	0x40013800

080012d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b088      	sub	sp, #32
 80012dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012de:	f107 030c 	add.w	r3, r7, #12
 80012e2:	2200      	movs	r2, #0
 80012e4:	601a      	str	r2, [r3, #0]
 80012e6:	605a      	str	r2, [r3, #4]
 80012e8:	609a      	str	r2, [r3, #8]
 80012ea:	60da      	str	r2, [r3, #12]
 80012ec:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80012ee:	4b30      	ldr	r3, [pc, #192]	; (80013b0 <MX_GPIO_Init+0xd8>)
 80012f0:	695b      	ldr	r3, [r3, #20]
 80012f2:	4a2f      	ldr	r2, [pc, #188]	; (80013b0 <MX_GPIO_Init+0xd8>)
 80012f4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80012f8:	6153      	str	r3, [r2, #20]
 80012fa:	4b2d      	ldr	r3, [pc, #180]	; (80013b0 <MX_GPIO_Init+0xd8>)
 80012fc:	695b      	ldr	r3, [r3, #20]
 80012fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001302:	60bb      	str	r3, [r7, #8]
 8001304:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001306:	4b2a      	ldr	r3, [pc, #168]	; (80013b0 <MX_GPIO_Init+0xd8>)
 8001308:	695b      	ldr	r3, [r3, #20]
 800130a:	4a29      	ldr	r2, [pc, #164]	; (80013b0 <MX_GPIO_Init+0xd8>)
 800130c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001310:	6153      	str	r3, [r2, #20]
 8001312:	4b27      	ldr	r3, [pc, #156]	; (80013b0 <MX_GPIO_Init+0xd8>)
 8001314:	695b      	ldr	r3, [r3, #20]
 8001316:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800131a:	607b      	str	r3, [r7, #4]
 800131c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800131e:	4b24      	ldr	r3, [pc, #144]	; (80013b0 <MX_GPIO_Init+0xd8>)
 8001320:	695b      	ldr	r3, [r3, #20]
 8001322:	4a23      	ldr	r2, [pc, #140]	; (80013b0 <MX_GPIO_Init+0xd8>)
 8001324:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001328:	6153      	str	r3, [r2, #20]
 800132a:	4b21      	ldr	r3, [pc, #132]	; (80013b0 <MX_GPIO_Init+0xd8>)
 800132c:	695b      	ldr	r3, [r3, #20]
 800132e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001332:	603b      	str	r3, [r7, #0]
 8001334:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DISPLAY_CS_Pin|DISPLAY_RESET_Pin|DISPLAY_DC_Pin, GPIO_PIN_RESET);
 8001336:	2200      	movs	r2, #0
 8001338:	21e0      	movs	r1, #224	; 0xe0
 800133a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800133e:	f000 fd9d 	bl	8001e7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : ReadIR_Pin */
  GPIO_InitStruct.Pin = ReadIR_Pin;
 8001342:	2308      	movs	r3, #8
 8001344:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001346:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 800134a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800134c:	2300      	movs	r3, #0
 800134e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(ReadIR_GPIO_Port, &GPIO_InitStruct);
 8001350:	f107 030c 	add.w	r3, r7, #12
 8001354:	4619      	mov	r1, r3
 8001356:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800135a:	f000 fc05 	bl	8001b68 <HAL_GPIO_Init>

  /*Configure GPIO pin : Button_Pin */
  GPIO_InitStruct.Pin = Button_Pin;
 800135e:	2310      	movs	r3, #16
 8001360:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001362:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001366:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001368:	2301      	movs	r3, #1
 800136a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(Button_GPIO_Port, &GPIO_InitStruct);
 800136c:	f107 030c 	add.w	r3, r7, #12
 8001370:	4619      	mov	r1, r3
 8001372:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001376:	f000 fbf7 	bl	8001b68 <HAL_GPIO_Init>

  /*Configure GPIO pins : DISPLAY_CS_Pin DISPLAY_RESET_Pin DISPLAY_DC_Pin */
  GPIO_InitStruct.Pin = DISPLAY_CS_Pin|DISPLAY_RESET_Pin|DISPLAY_DC_Pin;
 800137a:	23e0      	movs	r3, #224	; 0xe0
 800137c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800137e:	2301      	movs	r3, #1
 8001380:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001382:	2300      	movs	r3, #0
 8001384:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001386:	2300      	movs	r3, #0
 8001388:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800138a:	f107 030c 	add.w	r3, r7, #12
 800138e:	4619      	mov	r1, r3
 8001390:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001394:	f000 fbe8 	bl	8001b68 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8001398:	2200      	movs	r2, #0
 800139a:	2100      	movs	r1, #0
 800139c:	2009      	movs	r0, #9
 800139e:	f000 fbac 	bl	8001afa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80013a2:	2009      	movs	r0, #9
 80013a4:	f000 fbc5 	bl	8001b32 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80013a8:	bf00      	nop
 80013aa:	3720      	adds	r7, #32
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bd80      	pop	{r7, pc}
 80013b0:	40021000 	.word	0x40021000

080013b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013b4:	b480      	push	{r7}
 80013b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013b8:	b672      	cpsid	i
}
 80013ba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013bc:	e7fe      	b.n	80013bc <Error_Handler+0x8>
	...

080013c0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013c0:	b480      	push	{r7}
 80013c2:	b083      	sub	sp, #12
 80013c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013c6:	4b0f      	ldr	r3, [pc, #60]	; (8001404 <HAL_MspInit+0x44>)
 80013c8:	699b      	ldr	r3, [r3, #24]
 80013ca:	4a0e      	ldr	r2, [pc, #56]	; (8001404 <HAL_MspInit+0x44>)
 80013cc:	f043 0301 	orr.w	r3, r3, #1
 80013d0:	6193      	str	r3, [r2, #24]
 80013d2:	4b0c      	ldr	r3, [pc, #48]	; (8001404 <HAL_MspInit+0x44>)
 80013d4:	699b      	ldr	r3, [r3, #24]
 80013d6:	f003 0301 	and.w	r3, r3, #1
 80013da:	607b      	str	r3, [r7, #4]
 80013dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013de:	4b09      	ldr	r3, [pc, #36]	; (8001404 <HAL_MspInit+0x44>)
 80013e0:	69db      	ldr	r3, [r3, #28]
 80013e2:	4a08      	ldr	r2, [pc, #32]	; (8001404 <HAL_MspInit+0x44>)
 80013e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013e8:	61d3      	str	r3, [r2, #28]
 80013ea:	4b06      	ldr	r3, [pc, #24]	; (8001404 <HAL_MspInit+0x44>)
 80013ec:	69db      	ldr	r3, [r3, #28]
 80013ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013f2:	603b      	str	r3, [r7, #0]
 80013f4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013f6:	bf00      	nop
 80013f8:	370c      	adds	r7, #12
 80013fa:	46bd      	mov	sp, r7
 80013fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001400:	4770      	bx	lr
 8001402:	bf00      	nop
 8001404:	40021000 	.word	0x40021000

08001408 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b08a      	sub	sp, #40	; 0x28
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001410:	f107 0314 	add.w	r3, r7, #20
 8001414:	2200      	movs	r2, #0
 8001416:	601a      	str	r2, [r3, #0]
 8001418:	605a      	str	r2, [r3, #4]
 800141a:	609a      	str	r2, [r3, #8]
 800141c:	60da      	str	r2, [r3, #12]
 800141e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	4a25      	ldr	r2, [pc, #148]	; (80014bc <HAL_SPI_MspInit+0xb4>)
 8001426:	4293      	cmp	r3, r2
 8001428:	d144      	bne.n	80014b4 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800142a:	4b25      	ldr	r3, [pc, #148]	; (80014c0 <HAL_SPI_MspInit+0xb8>)
 800142c:	69db      	ldr	r3, [r3, #28]
 800142e:	4a24      	ldr	r2, [pc, #144]	; (80014c0 <HAL_SPI_MspInit+0xb8>)
 8001430:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001434:	61d3      	str	r3, [r2, #28]
 8001436:	4b22      	ldr	r3, [pc, #136]	; (80014c0 <HAL_SPI_MspInit+0xb8>)
 8001438:	69db      	ldr	r3, [r3, #28]
 800143a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800143e:	613b      	str	r3, [r7, #16]
 8001440:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001442:	4b1f      	ldr	r3, [pc, #124]	; (80014c0 <HAL_SPI_MspInit+0xb8>)
 8001444:	695b      	ldr	r3, [r3, #20]
 8001446:	4a1e      	ldr	r2, [pc, #120]	; (80014c0 <HAL_SPI_MspInit+0xb8>)
 8001448:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800144c:	6153      	str	r3, [r2, #20]
 800144e:	4b1c      	ldr	r3, [pc, #112]	; (80014c0 <HAL_SPI_MspInit+0xb8>)
 8001450:	695b      	ldr	r3, [r3, #20]
 8001452:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001456:	60fb      	str	r3, [r7, #12]
 8001458:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800145a:	4b19      	ldr	r3, [pc, #100]	; (80014c0 <HAL_SPI_MspInit+0xb8>)
 800145c:	695b      	ldr	r3, [r3, #20]
 800145e:	4a18      	ldr	r2, [pc, #96]	; (80014c0 <HAL_SPI_MspInit+0xb8>)
 8001460:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001464:	6153      	str	r3, [r2, #20]
 8001466:	4b16      	ldr	r3, [pc, #88]	; (80014c0 <HAL_SPI_MspInit+0xb8>)
 8001468:	695b      	ldr	r3, [r3, #20]
 800146a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800146e:	60bb      	str	r3, [r7, #8]
 8001470:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PF1-OSC_OUT     ------> SPI2_SCK
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001472:	2302      	movs	r3, #2
 8001474:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001476:	2302      	movs	r3, #2
 8001478:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800147a:	2300      	movs	r3, #0
 800147c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800147e:	2303      	movs	r3, #3
 8001480:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001482:	2305      	movs	r3, #5
 8001484:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001486:	f107 0314 	add.w	r3, r7, #20
 800148a:	4619      	mov	r1, r3
 800148c:	480d      	ldr	r0, [pc, #52]	; (80014c4 <HAL_SPI_MspInit+0xbc>)
 800148e:	f000 fb6b 	bl	8001b68 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001492:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001496:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001498:	2302      	movs	r3, #2
 800149a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800149c:	2300      	movs	r3, #0
 800149e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80014a0:	2303      	movs	r3, #3
 80014a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80014a4:	2305      	movs	r3, #5
 80014a6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014a8:	f107 0314 	add.w	r3, r7, #20
 80014ac:	4619      	mov	r1, r3
 80014ae:	4806      	ldr	r0, [pc, #24]	; (80014c8 <HAL_SPI_MspInit+0xc0>)
 80014b0:	f000 fb5a 	bl	8001b68 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80014b4:	bf00      	nop
 80014b6:	3728      	adds	r7, #40	; 0x28
 80014b8:	46bd      	mov	sp, r7
 80014ba:	bd80      	pop	{r7, pc}
 80014bc:	40003800 	.word	0x40003800
 80014c0:	40021000 	.word	0x40021000
 80014c4:	48001400 	.word	0x48001400
 80014c8:	48000400 	.word	0x48000400

080014cc <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80014cc:	b480      	push	{r7}
 80014ce:	b085      	sub	sp, #20
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	4a0a      	ldr	r2, [pc, #40]	; (8001504 <HAL_TIM_PWM_MspInit+0x38>)
 80014da:	4293      	cmp	r3, r2
 80014dc:	d10b      	bne.n	80014f6 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80014de:	4b0a      	ldr	r3, [pc, #40]	; (8001508 <HAL_TIM_PWM_MspInit+0x3c>)
 80014e0:	699b      	ldr	r3, [r3, #24]
 80014e2:	4a09      	ldr	r2, [pc, #36]	; (8001508 <HAL_TIM_PWM_MspInit+0x3c>)
 80014e4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80014e8:	6193      	str	r3, [r2, #24]
 80014ea:	4b07      	ldr	r3, [pc, #28]	; (8001508 <HAL_TIM_PWM_MspInit+0x3c>)
 80014ec:	699b      	ldr	r3, [r3, #24]
 80014ee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80014f2:	60fb      	str	r3, [r7, #12]
 80014f4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80014f6:	bf00      	nop
 80014f8:	3714      	adds	r7, #20
 80014fa:	46bd      	mov	sp, r7
 80014fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001500:	4770      	bx	lr
 8001502:	bf00      	nop
 8001504:	40012c00 	.word	0x40012c00
 8001508:	40021000 	.word	0x40021000

0800150c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800150c:	b480      	push	{r7}
 800150e:	b085      	sub	sp, #20
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM15)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	4a0a      	ldr	r2, [pc, #40]	; (8001544 <HAL_TIM_Base_MspInit+0x38>)
 800151a:	4293      	cmp	r3, r2
 800151c:	d10b      	bne.n	8001536 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM15_MspInit 0 */

  /* USER CODE END TIM15_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM15_CLK_ENABLE();
 800151e:	4b0a      	ldr	r3, [pc, #40]	; (8001548 <HAL_TIM_Base_MspInit+0x3c>)
 8001520:	699b      	ldr	r3, [r3, #24]
 8001522:	4a09      	ldr	r2, [pc, #36]	; (8001548 <HAL_TIM_Base_MspInit+0x3c>)
 8001524:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001528:	6193      	str	r3, [r2, #24]
 800152a:	4b07      	ldr	r3, [pc, #28]	; (8001548 <HAL_TIM_Base_MspInit+0x3c>)
 800152c:	699b      	ldr	r3, [r3, #24]
 800152e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001532:	60fb      	str	r3, [r7, #12]
 8001534:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 8001536:	bf00      	nop
 8001538:	3714      	adds	r7, #20
 800153a:	46bd      	mov	sp, r7
 800153c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001540:	4770      	bx	lr
 8001542:	bf00      	nop
 8001544:	40014000 	.word	0x40014000
 8001548:	40021000 	.word	0x40021000

0800154c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b088      	sub	sp, #32
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001554:	f107 030c 	add.w	r3, r7, #12
 8001558:	2200      	movs	r2, #0
 800155a:	601a      	str	r2, [r3, #0]
 800155c:	605a      	str	r2, [r3, #4]
 800155e:	609a      	str	r2, [r3, #8]
 8001560:	60da      	str	r2, [r3, #12]
 8001562:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	4a12      	ldr	r2, [pc, #72]	; (80015b4 <HAL_TIM_MspPostInit+0x68>)
 800156a:	4293      	cmp	r3, r2
 800156c:	d11d      	bne.n	80015aa <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800156e:	4b12      	ldr	r3, [pc, #72]	; (80015b8 <HAL_TIM_MspPostInit+0x6c>)
 8001570:	695b      	ldr	r3, [r3, #20]
 8001572:	4a11      	ldr	r2, [pc, #68]	; (80015b8 <HAL_TIM_MspPostInit+0x6c>)
 8001574:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001578:	6153      	str	r3, [r2, #20]
 800157a:	4b0f      	ldr	r3, [pc, #60]	; (80015b8 <HAL_TIM_MspPostInit+0x6c>)
 800157c:	695b      	ldr	r3, [r3, #20]
 800157e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001582:	60bb      	str	r3, [r7, #8]
 8001584:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001586:	f44f 7380 	mov.w	r3, #256	; 0x100
 800158a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800158c:	2302      	movs	r3, #2
 800158e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001590:	2300      	movs	r3, #0
 8001592:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001594:	2300      	movs	r3, #0
 8001596:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001598:	2306      	movs	r3, #6
 800159a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800159c:	f107 030c 	add.w	r3, r7, #12
 80015a0:	4619      	mov	r1, r3
 80015a2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015a6:	f000 fadf 	bl	8001b68 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80015aa:	bf00      	nop
 80015ac:	3720      	adds	r7, #32
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}
 80015b2:	bf00      	nop
 80015b4:	40012c00 	.word	0x40012c00
 80015b8:	40021000 	.word	0x40021000

080015bc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b08a      	sub	sp, #40	; 0x28
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015c4:	f107 0314 	add.w	r3, r7, #20
 80015c8:	2200      	movs	r2, #0
 80015ca:	601a      	str	r2, [r3, #0]
 80015cc:	605a      	str	r2, [r3, #4]
 80015ce:	609a      	str	r2, [r3, #8]
 80015d0:	60da      	str	r2, [r3, #12]
 80015d2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	4a18      	ldr	r2, [pc, #96]	; (800163c <HAL_UART_MspInit+0x80>)
 80015da:	4293      	cmp	r3, r2
 80015dc:	d129      	bne.n	8001632 <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80015de:	4b18      	ldr	r3, [pc, #96]	; (8001640 <HAL_UART_MspInit+0x84>)
 80015e0:	699b      	ldr	r3, [r3, #24]
 80015e2:	4a17      	ldr	r2, [pc, #92]	; (8001640 <HAL_UART_MspInit+0x84>)
 80015e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015e8:	6193      	str	r3, [r2, #24]
 80015ea:	4b15      	ldr	r3, [pc, #84]	; (8001640 <HAL_UART_MspInit+0x84>)
 80015ec:	699b      	ldr	r3, [r3, #24]
 80015ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015f2:	613b      	str	r3, [r7, #16]
 80015f4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015f6:	4b12      	ldr	r3, [pc, #72]	; (8001640 <HAL_UART_MspInit+0x84>)
 80015f8:	695b      	ldr	r3, [r3, #20]
 80015fa:	4a11      	ldr	r2, [pc, #68]	; (8001640 <HAL_UART_MspInit+0x84>)
 80015fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001600:	6153      	str	r3, [r2, #20]
 8001602:	4b0f      	ldr	r3, [pc, #60]	; (8001640 <HAL_UART_MspInit+0x84>)
 8001604:	695b      	ldr	r3, [r3, #20]
 8001606:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800160a:	60fb      	str	r3, [r7, #12]
 800160c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800160e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001612:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001614:	2302      	movs	r3, #2
 8001616:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001618:	2300      	movs	r3, #0
 800161a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800161c:	2303      	movs	r3, #3
 800161e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001620:	2307      	movs	r3, #7
 8001622:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001624:	f107 0314 	add.w	r3, r7, #20
 8001628:	4619      	mov	r1, r3
 800162a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800162e:	f000 fa9b 	bl	8001b68 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001632:	bf00      	nop
 8001634:	3728      	adds	r7, #40	; 0x28
 8001636:	46bd      	mov	sp, r7
 8001638:	bd80      	pop	{r7, pc}
 800163a:	bf00      	nop
 800163c:	40013800 	.word	0x40013800
 8001640:	40021000 	.word	0x40021000

08001644 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001644:	b480      	push	{r7}
 8001646:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001648:	e7fe      	b.n	8001648 <NMI_Handler+0x4>

0800164a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800164a:	b480      	push	{r7}
 800164c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800164e:	e7fe      	b.n	800164e <HardFault_Handler+0x4>

08001650 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001650:	b480      	push	{r7}
 8001652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001654:	e7fe      	b.n	8001654 <MemManage_Handler+0x4>

08001656 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001656:	b480      	push	{r7}
 8001658:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800165a:	e7fe      	b.n	800165a <BusFault_Handler+0x4>

0800165c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800165c:	b480      	push	{r7}
 800165e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001660:	e7fe      	b.n	8001660 <UsageFault_Handler+0x4>

08001662 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001662:	b480      	push	{r7}
 8001664:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001666:	bf00      	nop
 8001668:	46bd      	mov	sp, r7
 800166a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166e:	4770      	bx	lr

08001670 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001670:	b480      	push	{r7}
 8001672:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001674:	bf00      	nop
 8001676:	46bd      	mov	sp, r7
 8001678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167c:	4770      	bx	lr

0800167e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800167e:	b480      	push	{r7}
 8001680:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001682:	bf00      	nop
 8001684:	46bd      	mov	sp, r7
 8001686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168a:	4770      	bx	lr

0800168c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001690:	f000 f914 	bl	80018bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001694:	bf00      	nop
 8001696:	bd80      	pop	{r7, pc}

08001698 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */
	Interrupt_flank();
 800169c:	f7fe fdfc 	bl	8000298 <Interrupt_flank>
  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ReadIR_Pin);
 80016a0:	2008      	movs	r0, #8
 80016a2:	f000 fc03 	bl	8001eac <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 80016a6:	bf00      	nop
 80016a8:	bd80      	pop	{r7, pc}

080016aa <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80016aa:	b580      	push	{r7, lr}
 80016ac:	b086      	sub	sp, #24
 80016ae:	af00      	add	r7, sp, #0
 80016b0:	60f8      	str	r0, [r7, #12]
 80016b2:	60b9      	str	r1, [r7, #8]
 80016b4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016b6:	2300      	movs	r3, #0
 80016b8:	617b      	str	r3, [r7, #20]
 80016ba:	e00a      	b.n	80016d2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80016bc:	f3af 8000 	nop.w
 80016c0:	4601      	mov	r1, r0
 80016c2:	68bb      	ldr	r3, [r7, #8]
 80016c4:	1c5a      	adds	r2, r3, #1
 80016c6:	60ba      	str	r2, [r7, #8]
 80016c8:	b2ca      	uxtb	r2, r1
 80016ca:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016cc:	697b      	ldr	r3, [r7, #20]
 80016ce:	3301      	adds	r3, #1
 80016d0:	617b      	str	r3, [r7, #20]
 80016d2:	697a      	ldr	r2, [r7, #20]
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	429a      	cmp	r2, r3
 80016d8:	dbf0      	blt.n	80016bc <_read+0x12>
  }

  return len;
 80016da:	687b      	ldr	r3, [r7, #4]
}
 80016dc:	4618      	mov	r0, r3
 80016de:	3718      	adds	r7, #24
 80016e0:	46bd      	mov	sp, r7
 80016e2:	bd80      	pop	{r7, pc}

080016e4 <_close>:
  }
  return len;
}

int _close(int file)
{
 80016e4:	b480      	push	{r7}
 80016e6:	b083      	sub	sp, #12
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80016ec:	f04f 33ff 	mov.w	r3, #4294967295
}
 80016f0:	4618      	mov	r0, r3
 80016f2:	370c      	adds	r7, #12
 80016f4:	46bd      	mov	sp, r7
 80016f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fa:	4770      	bx	lr

080016fc <_fstat>:


int _fstat(int file, struct stat *st)
{
 80016fc:	b480      	push	{r7}
 80016fe:	b083      	sub	sp, #12
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
 8001704:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001706:	683b      	ldr	r3, [r7, #0]
 8001708:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800170c:	605a      	str	r2, [r3, #4]
  return 0;
 800170e:	2300      	movs	r3, #0
}
 8001710:	4618      	mov	r0, r3
 8001712:	370c      	adds	r7, #12
 8001714:	46bd      	mov	sp, r7
 8001716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171a:	4770      	bx	lr

0800171c <_isatty>:

int _isatty(int file)
{
 800171c:	b480      	push	{r7}
 800171e:	b083      	sub	sp, #12
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001724:	2301      	movs	r3, #1
}
 8001726:	4618      	mov	r0, r3
 8001728:	370c      	adds	r7, #12
 800172a:	46bd      	mov	sp, r7
 800172c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001730:	4770      	bx	lr

08001732 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001732:	b480      	push	{r7}
 8001734:	b085      	sub	sp, #20
 8001736:	af00      	add	r7, sp, #0
 8001738:	60f8      	str	r0, [r7, #12]
 800173a:	60b9      	str	r1, [r7, #8]
 800173c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800173e:	2300      	movs	r3, #0
}
 8001740:	4618      	mov	r0, r3
 8001742:	3714      	adds	r7, #20
 8001744:	46bd      	mov	sp, r7
 8001746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174a:	4770      	bx	lr

0800174c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b086      	sub	sp, #24
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001754:	4a14      	ldr	r2, [pc, #80]	; (80017a8 <_sbrk+0x5c>)
 8001756:	4b15      	ldr	r3, [pc, #84]	; (80017ac <_sbrk+0x60>)
 8001758:	1ad3      	subs	r3, r2, r3
 800175a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800175c:	697b      	ldr	r3, [r7, #20]
 800175e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001760:	4b13      	ldr	r3, [pc, #76]	; (80017b0 <_sbrk+0x64>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	2b00      	cmp	r3, #0
 8001766:	d102      	bne.n	800176e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001768:	4b11      	ldr	r3, [pc, #68]	; (80017b0 <_sbrk+0x64>)
 800176a:	4a12      	ldr	r2, [pc, #72]	; (80017b4 <_sbrk+0x68>)
 800176c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800176e:	4b10      	ldr	r3, [pc, #64]	; (80017b0 <_sbrk+0x64>)
 8001770:	681a      	ldr	r2, [r3, #0]
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	4413      	add	r3, r2
 8001776:	693a      	ldr	r2, [r7, #16]
 8001778:	429a      	cmp	r2, r3
 800177a:	d207      	bcs.n	800178c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800177c:	f004 f880 	bl	8005880 <__errno>
 8001780:	4603      	mov	r3, r0
 8001782:	220c      	movs	r2, #12
 8001784:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001786:	f04f 33ff 	mov.w	r3, #4294967295
 800178a:	e009      	b.n	80017a0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800178c:	4b08      	ldr	r3, [pc, #32]	; (80017b0 <_sbrk+0x64>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001792:	4b07      	ldr	r3, [pc, #28]	; (80017b0 <_sbrk+0x64>)
 8001794:	681a      	ldr	r2, [r3, #0]
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	4413      	add	r3, r2
 800179a:	4a05      	ldr	r2, [pc, #20]	; (80017b0 <_sbrk+0x64>)
 800179c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800179e:	68fb      	ldr	r3, [r7, #12]
}
 80017a0:	4618      	mov	r0, r3
 80017a2:	3718      	adds	r7, #24
 80017a4:	46bd      	mov	sp, r7
 80017a6:	bd80      	pop	{r7, pc}
 80017a8:	20004000 	.word	0x20004000
 80017ac:	00000400 	.word	0x00000400
 80017b0:	20000680 	.word	0x20000680
 80017b4:	20000698 	.word	0x20000698

080017b8 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80017b8:	b480      	push	{r7}
 80017ba:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80017bc:	4b06      	ldr	r3, [pc, #24]	; (80017d8 <SystemInit+0x20>)
 80017be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80017c2:	4a05      	ldr	r2, [pc, #20]	; (80017d8 <SystemInit+0x20>)
 80017c4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80017c8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80017cc:	bf00      	nop
 80017ce:	46bd      	mov	sp, r7
 80017d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d4:	4770      	bx	lr
 80017d6:	bf00      	nop
 80017d8:	e000ed00 	.word	0xe000ed00

080017dc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80017dc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001814 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80017e0:	f7ff ffea 	bl	80017b8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80017e4:	480c      	ldr	r0, [pc, #48]	; (8001818 <LoopForever+0x6>)
  ldr r1, =_edata
 80017e6:	490d      	ldr	r1, [pc, #52]	; (800181c <LoopForever+0xa>)
  ldr r2, =_sidata
 80017e8:	4a0d      	ldr	r2, [pc, #52]	; (8001820 <LoopForever+0xe>)
  movs r3, #0
 80017ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017ec:	e002      	b.n	80017f4 <LoopCopyDataInit>

080017ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017f2:	3304      	adds	r3, #4

080017f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017f8:	d3f9      	bcc.n	80017ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017fa:	4a0a      	ldr	r2, [pc, #40]	; (8001824 <LoopForever+0x12>)
  ldr r4, =_ebss
 80017fc:	4c0a      	ldr	r4, [pc, #40]	; (8001828 <LoopForever+0x16>)
  movs r3, #0
 80017fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001800:	e001      	b.n	8001806 <LoopFillZerobss>

08001802 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001802:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001804:	3204      	adds	r2, #4

08001806 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001806:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001808:	d3fb      	bcc.n	8001802 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800180a:	f004 f83f 	bl	800588c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800180e:	f7ff fba1 	bl	8000f54 <main>

08001812 <LoopForever>:

LoopForever:
    b LoopForever
 8001812:	e7fe      	b.n	8001812 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001814:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8001818:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800181c:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8001820:	080092ec 	.word	0x080092ec
  ldr r2, =_sbss
 8001824:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8001828:	20000698 	.word	0x20000698

0800182c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800182c:	e7fe      	b.n	800182c <ADC1_IRQHandler>
	...

08001830 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001834:	4b08      	ldr	r3, [pc, #32]	; (8001858 <HAL_Init+0x28>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	4a07      	ldr	r2, [pc, #28]	; (8001858 <HAL_Init+0x28>)
 800183a:	f043 0310 	orr.w	r3, r3, #16
 800183e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001840:	2003      	movs	r0, #3
 8001842:	f000 f94f 	bl	8001ae4 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001846:	200f      	movs	r0, #15
 8001848:	f000 f808 	bl	800185c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800184c:	f7ff fdb8 	bl	80013c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001850:	2300      	movs	r3, #0
}
 8001852:	4618      	mov	r0, r3
 8001854:	bd80      	pop	{r7, pc}
 8001856:	bf00      	nop
 8001858:	40022000 	.word	0x40022000

0800185c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b082      	sub	sp, #8
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001864:	4b12      	ldr	r3, [pc, #72]	; (80018b0 <HAL_InitTick+0x54>)
 8001866:	681a      	ldr	r2, [r3, #0]
 8001868:	4b12      	ldr	r3, [pc, #72]	; (80018b4 <HAL_InitTick+0x58>)
 800186a:	781b      	ldrb	r3, [r3, #0]
 800186c:	4619      	mov	r1, r3
 800186e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001872:	fbb3 f3f1 	udiv	r3, r3, r1
 8001876:	fbb2 f3f3 	udiv	r3, r2, r3
 800187a:	4618      	mov	r0, r3
 800187c:	f000 f967 	bl	8001b4e <HAL_SYSTICK_Config>
 8001880:	4603      	mov	r3, r0
 8001882:	2b00      	cmp	r3, #0
 8001884:	d001      	beq.n	800188a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001886:	2301      	movs	r3, #1
 8001888:	e00e      	b.n	80018a8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	2b0f      	cmp	r3, #15
 800188e:	d80a      	bhi.n	80018a6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001890:	2200      	movs	r2, #0
 8001892:	6879      	ldr	r1, [r7, #4]
 8001894:	f04f 30ff 	mov.w	r0, #4294967295
 8001898:	f000 f92f 	bl	8001afa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800189c:	4a06      	ldr	r2, [pc, #24]	; (80018b8 <HAL_InitTick+0x5c>)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80018a2:	2300      	movs	r3, #0
 80018a4:	e000      	b.n	80018a8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80018a6:	2301      	movs	r3, #1
}
 80018a8:	4618      	mov	r0, r3
 80018aa:	3708      	adds	r7, #8
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bd80      	pop	{r7, pc}
 80018b0:	20000008 	.word	0x20000008
 80018b4:	20000010 	.word	0x20000010
 80018b8:	2000000c 	.word	0x2000000c

080018bc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018bc:	b480      	push	{r7}
 80018be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80018c0:	4b06      	ldr	r3, [pc, #24]	; (80018dc <HAL_IncTick+0x20>)
 80018c2:	781b      	ldrb	r3, [r3, #0]
 80018c4:	461a      	mov	r2, r3
 80018c6:	4b06      	ldr	r3, [pc, #24]	; (80018e0 <HAL_IncTick+0x24>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	4413      	add	r3, r2
 80018cc:	4a04      	ldr	r2, [pc, #16]	; (80018e0 <HAL_IncTick+0x24>)
 80018ce:	6013      	str	r3, [r2, #0]
}
 80018d0:	bf00      	nop
 80018d2:	46bd      	mov	sp, r7
 80018d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d8:	4770      	bx	lr
 80018da:	bf00      	nop
 80018dc:	20000010 	.word	0x20000010
 80018e0:	20000684 	.word	0x20000684

080018e4 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018e4:	b480      	push	{r7}
 80018e6:	af00      	add	r7, sp, #0
  return uwTick;  
 80018e8:	4b03      	ldr	r3, [pc, #12]	; (80018f8 <HAL_GetTick+0x14>)
 80018ea:	681b      	ldr	r3, [r3, #0]
}
 80018ec:	4618      	mov	r0, r3
 80018ee:	46bd      	mov	sp, r7
 80018f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f4:	4770      	bx	lr
 80018f6:	bf00      	nop
 80018f8:	20000684 	.word	0x20000684

080018fc <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b084      	sub	sp, #16
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001904:	f7ff ffee 	bl	80018e4 <HAL_GetTick>
 8001908:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001914:	d005      	beq.n	8001922 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001916:	4b0a      	ldr	r3, [pc, #40]	; (8001940 <HAL_Delay+0x44>)
 8001918:	781b      	ldrb	r3, [r3, #0]
 800191a:	461a      	mov	r2, r3
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	4413      	add	r3, r2
 8001920:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001922:	bf00      	nop
 8001924:	f7ff ffde 	bl	80018e4 <HAL_GetTick>
 8001928:	4602      	mov	r2, r0
 800192a:	68bb      	ldr	r3, [r7, #8]
 800192c:	1ad3      	subs	r3, r2, r3
 800192e:	68fa      	ldr	r2, [r7, #12]
 8001930:	429a      	cmp	r2, r3
 8001932:	d8f7      	bhi.n	8001924 <HAL_Delay+0x28>
  {
  }
}
 8001934:	bf00      	nop
 8001936:	bf00      	nop
 8001938:	3710      	adds	r7, #16
 800193a:	46bd      	mov	sp, r7
 800193c:	bd80      	pop	{r7, pc}
 800193e:	bf00      	nop
 8001940:	20000010 	.word	0x20000010

08001944 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001944:	b480      	push	{r7}
 8001946:	b085      	sub	sp, #20
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	f003 0307 	and.w	r3, r3, #7
 8001952:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001954:	4b0c      	ldr	r3, [pc, #48]	; (8001988 <__NVIC_SetPriorityGrouping+0x44>)
 8001956:	68db      	ldr	r3, [r3, #12]
 8001958:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800195a:	68ba      	ldr	r2, [r7, #8]
 800195c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001960:	4013      	ands	r3, r2
 8001962:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001968:	68bb      	ldr	r3, [r7, #8]
 800196a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800196c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001970:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001974:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001976:	4a04      	ldr	r2, [pc, #16]	; (8001988 <__NVIC_SetPriorityGrouping+0x44>)
 8001978:	68bb      	ldr	r3, [r7, #8]
 800197a:	60d3      	str	r3, [r2, #12]
}
 800197c:	bf00      	nop
 800197e:	3714      	adds	r7, #20
 8001980:	46bd      	mov	sp, r7
 8001982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001986:	4770      	bx	lr
 8001988:	e000ed00 	.word	0xe000ed00

0800198c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800198c:	b480      	push	{r7}
 800198e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001990:	4b04      	ldr	r3, [pc, #16]	; (80019a4 <__NVIC_GetPriorityGrouping+0x18>)
 8001992:	68db      	ldr	r3, [r3, #12]
 8001994:	0a1b      	lsrs	r3, r3, #8
 8001996:	f003 0307 	and.w	r3, r3, #7
}
 800199a:	4618      	mov	r0, r3
 800199c:	46bd      	mov	sp, r7
 800199e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a2:	4770      	bx	lr
 80019a4:	e000ed00 	.word	0xe000ed00

080019a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019a8:	b480      	push	{r7}
 80019aa:	b083      	sub	sp, #12
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	4603      	mov	r3, r0
 80019b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	db0b      	blt.n	80019d2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019ba:	79fb      	ldrb	r3, [r7, #7]
 80019bc:	f003 021f 	and.w	r2, r3, #31
 80019c0:	4907      	ldr	r1, [pc, #28]	; (80019e0 <__NVIC_EnableIRQ+0x38>)
 80019c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019c6:	095b      	lsrs	r3, r3, #5
 80019c8:	2001      	movs	r0, #1
 80019ca:	fa00 f202 	lsl.w	r2, r0, r2
 80019ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80019d2:	bf00      	nop
 80019d4:	370c      	adds	r7, #12
 80019d6:	46bd      	mov	sp, r7
 80019d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019dc:	4770      	bx	lr
 80019de:	bf00      	nop
 80019e0:	e000e100 	.word	0xe000e100

080019e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019e4:	b480      	push	{r7}
 80019e6:	b083      	sub	sp, #12
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	4603      	mov	r3, r0
 80019ec:	6039      	str	r1, [r7, #0]
 80019ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	db0a      	blt.n	8001a0e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	b2da      	uxtb	r2, r3
 80019fc:	490c      	ldr	r1, [pc, #48]	; (8001a30 <__NVIC_SetPriority+0x4c>)
 80019fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a02:	0112      	lsls	r2, r2, #4
 8001a04:	b2d2      	uxtb	r2, r2
 8001a06:	440b      	add	r3, r1
 8001a08:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a0c:	e00a      	b.n	8001a24 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a0e:	683b      	ldr	r3, [r7, #0]
 8001a10:	b2da      	uxtb	r2, r3
 8001a12:	4908      	ldr	r1, [pc, #32]	; (8001a34 <__NVIC_SetPriority+0x50>)
 8001a14:	79fb      	ldrb	r3, [r7, #7]
 8001a16:	f003 030f 	and.w	r3, r3, #15
 8001a1a:	3b04      	subs	r3, #4
 8001a1c:	0112      	lsls	r2, r2, #4
 8001a1e:	b2d2      	uxtb	r2, r2
 8001a20:	440b      	add	r3, r1
 8001a22:	761a      	strb	r2, [r3, #24]
}
 8001a24:	bf00      	nop
 8001a26:	370c      	adds	r7, #12
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2e:	4770      	bx	lr
 8001a30:	e000e100 	.word	0xe000e100
 8001a34:	e000ed00 	.word	0xe000ed00

08001a38 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	b089      	sub	sp, #36	; 0x24
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	60f8      	str	r0, [r7, #12]
 8001a40:	60b9      	str	r1, [r7, #8]
 8001a42:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	f003 0307 	and.w	r3, r3, #7
 8001a4a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a4c:	69fb      	ldr	r3, [r7, #28]
 8001a4e:	f1c3 0307 	rsb	r3, r3, #7
 8001a52:	2b04      	cmp	r3, #4
 8001a54:	bf28      	it	cs
 8001a56:	2304      	movcs	r3, #4
 8001a58:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a5a:	69fb      	ldr	r3, [r7, #28]
 8001a5c:	3304      	adds	r3, #4
 8001a5e:	2b06      	cmp	r3, #6
 8001a60:	d902      	bls.n	8001a68 <NVIC_EncodePriority+0x30>
 8001a62:	69fb      	ldr	r3, [r7, #28]
 8001a64:	3b03      	subs	r3, #3
 8001a66:	e000      	b.n	8001a6a <NVIC_EncodePriority+0x32>
 8001a68:	2300      	movs	r3, #0
 8001a6a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a6c:	f04f 32ff 	mov.w	r2, #4294967295
 8001a70:	69bb      	ldr	r3, [r7, #24]
 8001a72:	fa02 f303 	lsl.w	r3, r2, r3
 8001a76:	43da      	mvns	r2, r3
 8001a78:	68bb      	ldr	r3, [r7, #8]
 8001a7a:	401a      	ands	r2, r3
 8001a7c:	697b      	ldr	r3, [r7, #20]
 8001a7e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a80:	f04f 31ff 	mov.w	r1, #4294967295
 8001a84:	697b      	ldr	r3, [r7, #20]
 8001a86:	fa01 f303 	lsl.w	r3, r1, r3
 8001a8a:	43d9      	mvns	r1, r3
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a90:	4313      	orrs	r3, r2
         );
}
 8001a92:	4618      	mov	r0, r3
 8001a94:	3724      	adds	r7, #36	; 0x24
 8001a96:	46bd      	mov	sp, r7
 8001a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9c:	4770      	bx	lr
	...

08001aa0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b082      	sub	sp, #8
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	3b01      	subs	r3, #1
 8001aac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ab0:	d301      	bcc.n	8001ab6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	e00f      	b.n	8001ad6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ab6:	4a0a      	ldr	r2, [pc, #40]	; (8001ae0 <SysTick_Config+0x40>)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	3b01      	subs	r3, #1
 8001abc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001abe:	210f      	movs	r1, #15
 8001ac0:	f04f 30ff 	mov.w	r0, #4294967295
 8001ac4:	f7ff ff8e 	bl	80019e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ac8:	4b05      	ldr	r3, [pc, #20]	; (8001ae0 <SysTick_Config+0x40>)
 8001aca:	2200      	movs	r2, #0
 8001acc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ace:	4b04      	ldr	r3, [pc, #16]	; (8001ae0 <SysTick_Config+0x40>)
 8001ad0:	2207      	movs	r2, #7
 8001ad2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ad4:	2300      	movs	r3, #0
}
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	3708      	adds	r7, #8
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bd80      	pop	{r7, pc}
 8001ade:	bf00      	nop
 8001ae0:	e000e010 	.word	0xe000e010

08001ae4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b082      	sub	sp, #8
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001aec:	6878      	ldr	r0, [r7, #4]
 8001aee:	f7ff ff29 	bl	8001944 <__NVIC_SetPriorityGrouping>
}
 8001af2:	bf00      	nop
 8001af4:	3708      	adds	r7, #8
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bd80      	pop	{r7, pc}

08001afa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001afa:	b580      	push	{r7, lr}
 8001afc:	b086      	sub	sp, #24
 8001afe:	af00      	add	r7, sp, #0
 8001b00:	4603      	mov	r3, r0
 8001b02:	60b9      	str	r1, [r7, #8]
 8001b04:	607a      	str	r2, [r7, #4]
 8001b06:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b0c:	f7ff ff3e 	bl	800198c <__NVIC_GetPriorityGrouping>
 8001b10:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b12:	687a      	ldr	r2, [r7, #4]
 8001b14:	68b9      	ldr	r1, [r7, #8]
 8001b16:	6978      	ldr	r0, [r7, #20]
 8001b18:	f7ff ff8e 	bl	8001a38 <NVIC_EncodePriority>
 8001b1c:	4602      	mov	r2, r0
 8001b1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b22:	4611      	mov	r1, r2
 8001b24:	4618      	mov	r0, r3
 8001b26:	f7ff ff5d 	bl	80019e4 <__NVIC_SetPriority>
}
 8001b2a:	bf00      	nop
 8001b2c:	3718      	adds	r7, #24
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bd80      	pop	{r7, pc}

08001b32 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b32:	b580      	push	{r7, lr}
 8001b34:	b082      	sub	sp, #8
 8001b36:	af00      	add	r7, sp, #0
 8001b38:	4603      	mov	r3, r0
 8001b3a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b40:	4618      	mov	r0, r3
 8001b42:	f7ff ff31 	bl	80019a8 <__NVIC_EnableIRQ>
}
 8001b46:	bf00      	nop
 8001b48:	3708      	adds	r7, #8
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bd80      	pop	{r7, pc}

08001b4e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b4e:	b580      	push	{r7, lr}
 8001b50:	b082      	sub	sp, #8
 8001b52:	af00      	add	r7, sp, #0
 8001b54:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b56:	6878      	ldr	r0, [r7, #4]
 8001b58:	f7ff ffa2 	bl	8001aa0 <SysTick_Config>
 8001b5c:	4603      	mov	r3, r0
}
 8001b5e:	4618      	mov	r0, r3
 8001b60:	3708      	adds	r7, #8
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bd80      	pop	{r7, pc}
	...

08001b68 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	b087      	sub	sp, #28
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
 8001b70:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001b72:	2300      	movs	r3, #0
 8001b74:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b76:	e14e      	b.n	8001e16 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	681a      	ldr	r2, [r3, #0]
 8001b7c:	2101      	movs	r1, #1
 8001b7e:	697b      	ldr	r3, [r7, #20]
 8001b80:	fa01 f303 	lsl.w	r3, r1, r3
 8001b84:	4013      	ands	r3, r2
 8001b86:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	f000 8140 	beq.w	8001e10 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	685b      	ldr	r3, [r3, #4]
 8001b94:	f003 0303 	and.w	r3, r3, #3
 8001b98:	2b01      	cmp	r3, #1
 8001b9a:	d005      	beq.n	8001ba8 <HAL_GPIO_Init+0x40>
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	685b      	ldr	r3, [r3, #4]
 8001ba0:	f003 0303 	and.w	r3, r3, #3
 8001ba4:	2b02      	cmp	r3, #2
 8001ba6:	d130      	bne.n	8001c0a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	689b      	ldr	r3, [r3, #8]
 8001bac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001bae:	697b      	ldr	r3, [r7, #20]
 8001bb0:	005b      	lsls	r3, r3, #1
 8001bb2:	2203      	movs	r2, #3
 8001bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb8:	43db      	mvns	r3, r3
 8001bba:	693a      	ldr	r2, [r7, #16]
 8001bbc:	4013      	ands	r3, r2
 8001bbe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	68da      	ldr	r2, [r3, #12]
 8001bc4:	697b      	ldr	r3, [r7, #20]
 8001bc6:	005b      	lsls	r3, r3, #1
 8001bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bcc:	693a      	ldr	r2, [r7, #16]
 8001bce:	4313      	orrs	r3, r2
 8001bd0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	693a      	ldr	r2, [r7, #16]
 8001bd6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	685b      	ldr	r3, [r3, #4]
 8001bdc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001bde:	2201      	movs	r2, #1
 8001be0:	697b      	ldr	r3, [r7, #20]
 8001be2:	fa02 f303 	lsl.w	r3, r2, r3
 8001be6:	43db      	mvns	r3, r3
 8001be8:	693a      	ldr	r2, [r7, #16]
 8001bea:	4013      	ands	r3, r2
 8001bec:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	685b      	ldr	r3, [r3, #4]
 8001bf2:	091b      	lsrs	r3, r3, #4
 8001bf4:	f003 0201 	and.w	r2, r3, #1
 8001bf8:	697b      	ldr	r3, [r7, #20]
 8001bfa:	fa02 f303 	lsl.w	r3, r2, r3
 8001bfe:	693a      	ldr	r2, [r7, #16]
 8001c00:	4313      	orrs	r3, r2
 8001c02:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	693a      	ldr	r2, [r7, #16]
 8001c08:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c0a:	683b      	ldr	r3, [r7, #0]
 8001c0c:	685b      	ldr	r3, [r3, #4]
 8001c0e:	f003 0303 	and.w	r3, r3, #3
 8001c12:	2b03      	cmp	r3, #3
 8001c14:	d017      	beq.n	8001c46 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	68db      	ldr	r3, [r3, #12]
 8001c1a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001c1c:	697b      	ldr	r3, [r7, #20]
 8001c1e:	005b      	lsls	r3, r3, #1
 8001c20:	2203      	movs	r2, #3
 8001c22:	fa02 f303 	lsl.w	r3, r2, r3
 8001c26:	43db      	mvns	r3, r3
 8001c28:	693a      	ldr	r2, [r7, #16]
 8001c2a:	4013      	ands	r3, r2
 8001c2c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	689a      	ldr	r2, [r3, #8]
 8001c32:	697b      	ldr	r3, [r7, #20]
 8001c34:	005b      	lsls	r3, r3, #1
 8001c36:	fa02 f303 	lsl.w	r3, r2, r3
 8001c3a:	693a      	ldr	r2, [r7, #16]
 8001c3c:	4313      	orrs	r3, r2
 8001c3e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	693a      	ldr	r2, [r7, #16]
 8001c44:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	685b      	ldr	r3, [r3, #4]
 8001c4a:	f003 0303 	and.w	r3, r3, #3
 8001c4e:	2b02      	cmp	r3, #2
 8001c50:	d123      	bne.n	8001c9a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001c52:	697b      	ldr	r3, [r7, #20]
 8001c54:	08da      	lsrs	r2, r3, #3
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	3208      	adds	r2, #8
 8001c5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c5e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001c60:	697b      	ldr	r3, [r7, #20]
 8001c62:	f003 0307 	and.w	r3, r3, #7
 8001c66:	009b      	lsls	r3, r3, #2
 8001c68:	220f      	movs	r2, #15
 8001c6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c6e:	43db      	mvns	r3, r3
 8001c70:	693a      	ldr	r2, [r7, #16]
 8001c72:	4013      	ands	r3, r2
 8001c74:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	691a      	ldr	r2, [r3, #16]
 8001c7a:	697b      	ldr	r3, [r7, #20]
 8001c7c:	f003 0307 	and.w	r3, r3, #7
 8001c80:	009b      	lsls	r3, r3, #2
 8001c82:	fa02 f303 	lsl.w	r3, r2, r3
 8001c86:	693a      	ldr	r2, [r7, #16]
 8001c88:	4313      	orrs	r3, r2
 8001c8a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001c8c:	697b      	ldr	r3, [r7, #20]
 8001c8e:	08da      	lsrs	r2, r3, #3
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	3208      	adds	r2, #8
 8001c94:	6939      	ldr	r1, [r7, #16]
 8001c96:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001ca0:	697b      	ldr	r3, [r7, #20]
 8001ca2:	005b      	lsls	r3, r3, #1
 8001ca4:	2203      	movs	r2, #3
 8001ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8001caa:	43db      	mvns	r3, r3
 8001cac:	693a      	ldr	r2, [r7, #16]
 8001cae:	4013      	ands	r3, r2
 8001cb0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	685b      	ldr	r3, [r3, #4]
 8001cb6:	f003 0203 	and.w	r2, r3, #3
 8001cba:	697b      	ldr	r3, [r7, #20]
 8001cbc:	005b      	lsls	r3, r3, #1
 8001cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc2:	693a      	ldr	r2, [r7, #16]
 8001cc4:	4313      	orrs	r3, r2
 8001cc6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	693a      	ldr	r2, [r7, #16]
 8001ccc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	685b      	ldr	r3, [r3, #4]
 8001cd2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	f000 809a 	beq.w	8001e10 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cdc:	4b55      	ldr	r3, [pc, #340]	; (8001e34 <HAL_GPIO_Init+0x2cc>)
 8001cde:	699b      	ldr	r3, [r3, #24]
 8001ce0:	4a54      	ldr	r2, [pc, #336]	; (8001e34 <HAL_GPIO_Init+0x2cc>)
 8001ce2:	f043 0301 	orr.w	r3, r3, #1
 8001ce6:	6193      	str	r3, [r2, #24]
 8001ce8:	4b52      	ldr	r3, [pc, #328]	; (8001e34 <HAL_GPIO_Init+0x2cc>)
 8001cea:	699b      	ldr	r3, [r3, #24]
 8001cec:	f003 0301 	and.w	r3, r3, #1
 8001cf0:	60bb      	str	r3, [r7, #8]
 8001cf2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001cf4:	4a50      	ldr	r2, [pc, #320]	; (8001e38 <HAL_GPIO_Init+0x2d0>)
 8001cf6:	697b      	ldr	r3, [r7, #20]
 8001cf8:	089b      	lsrs	r3, r3, #2
 8001cfa:	3302      	adds	r3, #2
 8001cfc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d00:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001d02:	697b      	ldr	r3, [r7, #20]
 8001d04:	f003 0303 	and.w	r3, r3, #3
 8001d08:	009b      	lsls	r3, r3, #2
 8001d0a:	220f      	movs	r2, #15
 8001d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d10:	43db      	mvns	r3, r3
 8001d12:	693a      	ldr	r2, [r7, #16]
 8001d14:	4013      	ands	r3, r2
 8001d16:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001d1e:	d013      	beq.n	8001d48 <HAL_GPIO_Init+0x1e0>
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	4a46      	ldr	r2, [pc, #280]	; (8001e3c <HAL_GPIO_Init+0x2d4>)
 8001d24:	4293      	cmp	r3, r2
 8001d26:	d00d      	beq.n	8001d44 <HAL_GPIO_Init+0x1dc>
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	4a45      	ldr	r2, [pc, #276]	; (8001e40 <HAL_GPIO_Init+0x2d8>)
 8001d2c:	4293      	cmp	r3, r2
 8001d2e:	d007      	beq.n	8001d40 <HAL_GPIO_Init+0x1d8>
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	4a44      	ldr	r2, [pc, #272]	; (8001e44 <HAL_GPIO_Init+0x2dc>)
 8001d34:	4293      	cmp	r3, r2
 8001d36:	d101      	bne.n	8001d3c <HAL_GPIO_Init+0x1d4>
 8001d38:	2303      	movs	r3, #3
 8001d3a:	e006      	b.n	8001d4a <HAL_GPIO_Init+0x1e2>
 8001d3c:	2305      	movs	r3, #5
 8001d3e:	e004      	b.n	8001d4a <HAL_GPIO_Init+0x1e2>
 8001d40:	2302      	movs	r3, #2
 8001d42:	e002      	b.n	8001d4a <HAL_GPIO_Init+0x1e2>
 8001d44:	2301      	movs	r3, #1
 8001d46:	e000      	b.n	8001d4a <HAL_GPIO_Init+0x1e2>
 8001d48:	2300      	movs	r3, #0
 8001d4a:	697a      	ldr	r2, [r7, #20]
 8001d4c:	f002 0203 	and.w	r2, r2, #3
 8001d50:	0092      	lsls	r2, r2, #2
 8001d52:	4093      	lsls	r3, r2
 8001d54:	693a      	ldr	r2, [r7, #16]
 8001d56:	4313      	orrs	r3, r2
 8001d58:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001d5a:	4937      	ldr	r1, [pc, #220]	; (8001e38 <HAL_GPIO_Init+0x2d0>)
 8001d5c:	697b      	ldr	r3, [r7, #20]
 8001d5e:	089b      	lsrs	r3, r3, #2
 8001d60:	3302      	adds	r3, #2
 8001d62:	693a      	ldr	r2, [r7, #16]
 8001d64:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d68:	4b37      	ldr	r3, [pc, #220]	; (8001e48 <HAL_GPIO_Init+0x2e0>)
 8001d6a:	689b      	ldr	r3, [r3, #8]
 8001d6c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	43db      	mvns	r3, r3
 8001d72:	693a      	ldr	r2, [r7, #16]
 8001d74:	4013      	ands	r3, r2
 8001d76:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	685b      	ldr	r3, [r3, #4]
 8001d7c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d003      	beq.n	8001d8c <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8001d84:	693a      	ldr	r2, [r7, #16]
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	4313      	orrs	r3, r2
 8001d8a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001d8c:	4a2e      	ldr	r2, [pc, #184]	; (8001e48 <HAL_GPIO_Init+0x2e0>)
 8001d8e:	693b      	ldr	r3, [r7, #16]
 8001d90:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001d92:	4b2d      	ldr	r3, [pc, #180]	; (8001e48 <HAL_GPIO_Init+0x2e0>)
 8001d94:	68db      	ldr	r3, [r3, #12]
 8001d96:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	43db      	mvns	r3, r3
 8001d9c:	693a      	ldr	r2, [r7, #16]
 8001d9e:	4013      	ands	r3, r2
 8001da0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001da2:	683b      	ldr	r3, [r7, #0]
 8001da4:	685b      	ldr	r3, [r3, #4]
 8001da6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d003      	beq.n	8001db6 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8001dae:	693a      	ldr	r2, [r7, #16]
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	4313      	orrs	r3, r2
 8001db4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001db6:	4a24      	ldr	r2, [pc, #144]	; (8001e48 <HAL_GPIO_Init+0x2e0>)
 8001db8:	693b      	ldr	r3, [r7, #16]
 8001dba:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001dbc:	4b22      	ldr	r3, [pc, #136]	; (8001e48 <HAL_GPIO_Init+0x2e0>)
 8001dbe:	685b      	ldr	r3, [r3, #4]
 8001dc0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	43db      	mvns	r3, r3
 8001dc6:	693a      	ldr	r2, [r7, #16]
 8001dc8:	4013      	ands	r3, r2
 8001dca:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	685b      	ldr	r3, [r3, #4]
 8001dd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d003      	beq.n	8001de0 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8001dd8:	693a      	ldr	r2, [r7, #16]
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	4313      	orrs	r3, r2
 8001dde:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001de0:	4a19      	ldr	r2, [pc, #100]	; (8001e48 <HAL_GPIO_Init+0x2e0>)
 8001de2:	693b      	ldr	r3, [r7, #16]
 8001de4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001de6:	4b18      	ldr	r3, [pc, #96]	; (8001e48 <HAL_GPIO_Init+0x2e0>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	43db      	mvns	r3, r3
 8001df0:	693a      	ldr	r2, [r7, #16]
 8001df2:	4013      	ands	r3, r2
 8001df4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	685b      	ldr	r3, [r3, #4]
 8001dfa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d003      	beq.n	8001e0a <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8001e02:	693a      	ldr	r2, [r7, #16]
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	4313      	orrs	r3, r2
 8001e08:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001e0a:	4a0f      	ldr	r2, [pc, #60]	; (8001e48 <HAL_GPIO_Init+0x2e0>)
 8001e0c:	693b      	ldr	r3, [r7, #16]
 8001e0e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001e10:	697b      	ldr	r3, [r7, #20]
 8001e12:	3301      	adds	r3, #1
 8001e14:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	681a      	ldr	r2, [r3, #0]
 8001e1a:	697b      	ldr	r3, [r7, #20]
 8001e1c:	fa22 f303 	lsr.w	r3, r2, r3
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	f47f aea9 	bne.w	8001b78 <HAL_GPIO_Init+0x10>
  }
}
 8001e26:	bf00      	nop
 8001e28:	bf00      	nop
 8001e2a:	371c      	adds	r7, #28
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e32:	4770      	bx	lr
 8001e34:	40021000 	.word	0x40021000
 8001e38:	40010000 	.word	0x40010000
 8001e3c:	48000400 	.word	0x48000400
 8001e40:	48000800 	.word	0x48000800
 8001e44:	48000c00 	.word	0x48000c00
 8001e48:	40010400 	.word	0x40010400

08001e4c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	b085      	sub	sp, #20
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
 8001e54:	460b      	mov	r3, r1
 8001e56:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	691a      	ldr	r2, [r3, #16]
 8001e5c:	887b      	ldrh	r3, [r7, #2]
 8001e5e:	4013      	ands	r3, r2
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d002      	beq.n	8001e6a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001e64:	2301      	movs	r3, #1
 8001e66:	73fb      	strb	r3, [r7, #15]
 8001e68:	e001      	b.n	8001e6e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001e6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e70:	4618      	mov	r0, r3
 8001e72:	3714      	adds	r7, #20
 8001e74:	46bd      	mov	sp, r7
 8001e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7a:	4770      	bx	lr

08001e7c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	b083      	sub	sp, #12
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
 8001e84:	460b      	mov	r3, r1
 8001e86:	807b      	strh	r3, [r7, #2]
 8001e88:	4613      	mov	r3, r2
 8001e8a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001e8c:	787b      	ldrb	r3, [r7, #1]
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d003      	beq.n	8001e9a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001e92:	887a      	ldrh	r2, [r7, #2]
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001e98:	e002      	b.n	8001ea0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001e9a:	887a      	ldrh	r2, [r7, #2]
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001ea0:	bf00      	nop
 8001ea2:	370c      	adds	r7, #12
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eaa:	4770      	bx	lr

08001eac <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b082      	sub	sp, #8
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001eb6:	4b08      	ldr	r3, [pc, #32]	; (8001ed8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001eb8:	695a      	ldr	r2, [r3, #20]
 8001eba:	88fb      	ldrh	r3, [r7, #6]
 8001ebc:	4013      	ands	r3, r2
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d006      	beq.n	8001ed0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001ec2:	4a05      	ldr	r2, [pc, #20]	; (8001ed8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001ec4:	88fb      	ldrh	r3, [r7, #6]
 8001ec6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001ec8:	88fb      	ldrh	r3, [r7, #6]
 8001eca:	4618      	mov	r0, r3
 8001ecc:	f000 f806 	bl	8001edc <HAL_GPIO_EXTI_Callback>
  }
}
 8001ed0:	bf00      	nop
 8001ed2:	3708      	adds	r7, #8
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	bd80      	pop	{r7, pc}
 8001ed8:	40010400 	.word	0x40010400

08001edc <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001edc:	b480      	push	{r7}
 8001ede:	b083      	sub	sp, #12
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001ee6:	bf00      	nop
 8001ee8:	370c      	adds	r7, #12
 8001eea:	46bd      	mov	sp, r7
 8001eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef0:	4770      	bx	lr
	...

08001ef4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8001efa:	af00      	add	r7, sp, #0
 8001efc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f00:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001f04:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001f06:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f0a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d102      	bne.n	8001f1a <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001f14:	2301      	movs	r3, #1
 8001f16:	f001 b823 	b.w	8002f60 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f1a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f1e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f003 0301 	and.w	r3, r3, #1
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	f000 817d 	beq.w	800222a <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001f30:	4bbc      	ldr	r3, [pc, #752]	; (8002224 <HAL_RCC_OscConfig+0x330>)
 8001f32:	685b      	ldr	r3, [r3, #4]
 8001f34:	f003 030c 	and.w	r3, r3, #12
 8001f38:	2b04      	cmp	r3, #4
 8001f3a:	d00c      	beq.n	8001f56 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001f3c:	4bb9      	ldr	r3, [pc, #740]	; (8002224 <HAL_RCC_OscConfig+0x330>)
 8001f3e:	685b      	ldr	r3, [r3, #4]
 8001f40:	f003 030c 	and.w	r3, r3, #12
 8001f44:	2b08      	cmp	r3, #8
 8001f46:	d15c      	bne.n	8002002 <HAL_RCC_OscConfig+0x10e>
 8001f48:	4bb6      	ldr	r3, [pc, #728]	; (8002224 <HAL_RCC_OscConfig+0x330>)
 8001f4a:	685b      	ldr	r3, [r3, #4]
 8001f4c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f54:	d155      	bne.n	8002002 <HAL_RCC_OscConfig+0x10e>
 8001f56:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001f5a:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f5e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8001f62:	fa93 f3a3 	rbit	r3, r3
 8001f66:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001f6a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f6e:	fab3 f383 	clz	r3, r3
 8001f72:	b2db      	uxtb	r3, r3
 8001f74:	095b      	lsrs	r3, r3, #5
 8001f76:	b2db      	uxtb	r3, r3
 8001f78:	f043 0301 	orr.w	r3, r3, #1
 8001f7c:	b2db      	uxtb	r3, r3
 8001f7e:	2b01      	cmp	r3, #1
 8001f80:	d102      	bne.n	8001f88 <HAL_RCC_OscConfig+0x94>
 8001f82:	4ba8      	ldr	r3, [pc, #672]	; (8002224 <HAL_RCC_OscConfig+0x330>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	e015      	b.n	8001fb4 <HAL_RCC_OscConfig+0xc0>
 8001f88:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001f8c:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f90:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8001f94:	fa93 f3a3 	rbit	r3, r3
 8001f98:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001f9c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001fa0:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001fa4:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8001fa8:	fa93 f3a3 	rbit	r3, r3
 8001fac:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8001fb0:	4b9c      	ldr	r3, [pc, #624]	; (8002224 <HAL_RCC_OscConfig+0x330>)
 8001fb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fb4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001fb8:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8001fbc:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001fc0:	fa92 f2a2 	rbit	r2, r2
 8001fc4:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8001fc8:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8001fcc:	fab2 f282 	clz	r2, r2
 8001fd0:	b2d2      	uxtb	r2, r2
 8001fd2:	f042 0220 	orr.w	r2, r2, #32
 8001fd6:	b2d2      	uxtb	r2, r2
 8001fd8:	f002 021f 	and.w	r2, r2, #31
 8001fdc:	2101      	movs	r1, #1
 8001fde:	fa01 f202 	lsl.w	r2, r1, r2
 8001fe2:	4013      	ands	r3, r2
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	f000 811f 	beq.w	8002228 <HAL_RCC_OscConfig+0x334>
 8001fea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fee:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	685b      	ldr	r3, [r3, #4]
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	f040 8116 	bne.w	8002228 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8001ffc:	2301      	movs	r3, #1
 8001ffe:	f000 bfaf 	b.w	8002f60 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002002:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002006:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	685b      	ldr	r3, [r3, #4]
 800200e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002012:	d106      	bne.n	8002022 <HAL_RCC_OscConfig+0x12e>
 8002014:	4b83      	ldr	r3, [pc, #524]	; (8002224 <HAL_RCC_OscConfig+0x330>)
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	4a82      	ldr	r2, [pc, #520]	; (8002224 <HAL_RCC_OscConfig+0x330>)
 800201a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800201e:	6013      	str	r3, [r2, #0]
 8002020:	e036      	b.n	8002090 <HAL_RCC_OscConfig+0x19c>
 8002022:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002026:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	685b      	ldr	r3, [r3, #4]
 800202e:	2b00      	cmp	r3, #0
 8002030:	d10c      	bne.n	800204c <HAL_RCC_OscConfig+0x158>
 8002032:	4b7c      	ldr	r3, [pc, #496]	; (8002224 <HAL_RCC_OscConfig+0x330>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	4a7b      	ldr	r2, [pc, #492]	; (8002224 <HAL_RCC_OscConfig+0x330>)
 8002038:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800203c:	6013      	str	r3, [r2, #0]
 800203e:	4b79      	ldr	r3, [pc, #484]	; (8002224 <HAL_RCC_OscConfig+0x330>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	4a78      	ldr	r2, [pc, #480]	; (8002224 <HAL_RCC_OscConfig+0x330>)
 8002044:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002048:	6013      	str	r3, [r2, #0]
 800204a:	e021      	b.n	8002090 <HAL_RCC_OscConfig+0x19c>
 800204c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002050:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	685b      	ldr	r3, [r3, #4]
 8002058:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800205c:	d10c      	bne.n	8002078 <HAL_RCC_OscConfig+0x184>
 800205e:	4b71      	ldr	r3, [pc, #452]	; (8002224 <HAL_RCC_OscConfig+0x330>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	4a70      	ldr	r2, [pc, #448]	; (8002224 <HAL_RCC_OscConfig+0x330>)
 8002064:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002068:	6013      	str	r3, [r2, #0]
 800206a:	4b6e      	ldr	r3, [pc, #440]	; (8002224 <HAL_RCC_OscConfig+0x330>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	4a6d      	ldr	r2, [pc, #436]	; (8002224 <HAL_RCC_OscConfig+0x330>)
 8002070:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002074:	6013      	str	r3, [r2, #0]
 8002076:	e00b      	b.n	8002090 <HAL_RCC_OscConfig+0x19c>
 8002078:	4b6a      	ldr	r3, [pc, #424]	; (8002224 <HAL_RCC_OscConfig+0x330>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	4a69      	ldr	r2, [pc, #420]	; (8002224 <HAL_RCC_OscConfig+0x330>)
 800207e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002082:	6013      	str	r3, [r2, #0]
 8002084:	4b67      	ldr	r3, [pc, #412]	; (8002224 <HAL_RCC_OscConfig+0x330>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	4a66      	ldr	r2, [pc, #408]	; (8002224 <HAL_RCC_OscConfig+0x330>)
 800208a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800208e:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002090:	4b64      	ldr	r3, [pc, #400]	; (8002224 <HAL_RCC_OscConfig+0x330>)
 8002092:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002094:	f023 020f 	bic.w	r2, r3, #15
 8002098:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800209c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	689b      	ldr	r3, [r3, #8]
 80020a4:	495f      	ldr	r1, [pc, #380]	; (8002224 <HAL_RCC_OscConfig+0x330>)
 80020a6:	4313      	orrs	r3, r2
 80020a8:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80020aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020ae:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	685b      	ldr	r3, [r3, #4]
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d059      	beq.n	800216e <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020ba:	f7ff fc13 	bl	80018e4 <HAL_GetTick>
 80020be:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020c2:	e00a      	b.n	80020da <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80020c4:	f7ff fc0e 	bl	80018e4 <HAL_GetTick>
 80020c8:	4602      	mov	r2, r0
 80020ca:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80020ce:	1ad3      	subs	r3, r2, r3
 80020d0:	2b64      	cmp	r3, #100	; 0x64
 80020d2:	d902      	bls.n	80020da <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 80020d4:	2303      	movs	r3, #3
 80020d6:	f000 bf43 	b.w	8002f60 <HAL_RCC_OscConfig+0x106c>
 80020da:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80020de:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020e2:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80020e6:	fa93 f3a3 	rbit	r3, r3
 80020ea:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 80020ee:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020f2:	fab3 f383 	clz	r3, r3
 80020f6:	b2db      	uxtb	r3, r3
 80020f8:	095b      	lsrs	r3, r3, #5
 80020fa:	b2db      	uxtb	r3, r3
 80020fc:	f043 0301 	orr.w	r3, r3, #1
 8002100:	b2db      	uxtb	r3, r3
 8002102:	2b01      	cmp	r3, #1
 8002104:	d102      	bne.n	800210c <HAL_RCC_OscConfig+0x218>
 8002106:	4b47      	ldr	r3, [pc, #284]	; (8002224 <HAL_RCC_OscConfig+0x330>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	e015      	b.n	8002138 <HAL_RCC_OscConfig+0x244>
 800210c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002110:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002114:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8002118:	fa93 f3a3 	rbit	r3, r3
 800211c:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8002120:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002124:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8002128:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 800212c:	fa93 f3a3 	rbit	r3, r3
 8002130:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8002134:	4b3b      	ldr	r3, [pc, #236]	; (8002224 <HAL_RCC_OscConfig+0x330>)
 8002136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002138:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800213c:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8002140:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8002144:	fa92 f2a2 	rbit	r2, r2
 8002148:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 800214c:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8002150:	fab2 f282 	clz	r2, r2
 8002154:	b2d2      	uxtb	r2, r2
 8002156:	f042 0220 	orr.w	r2, r2, #32
 800215a:	b2d2      	uxtb	r2, r2
 800215c:	f002 021f 	and.w	r2, r2, #31
 8002160:	2101      	movs	r1, #1
 8002162:	fa01 f202 	lsl.w	r2, r1, r2
 8002166:	4013      	ands	r3, r2
 8002168:	2b00      	cmp	r3, #0
 800216a:	d0ab      	beq.n	80020c4 <HAL_RCC_OscConfig+0x1d0>
 800216c:	e05d      	b.n	800222a <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800216e:	f7ff fbb9 	bl	80018e4 <HAL_GetTick>
 8002172:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002176:	e00a      	b.n	800218e <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002178:	f7ff fbb4 	bl	80018e4 <HAL_GetTick>
 800217c:	4602      	mov	r2, r0
 800217e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002182:	1ad3      	subs	r3, r2, r3
 8002184:	2b64      	cmp	r3, #100	; 0x64
 8002186:	d902      	bls.n	800218e <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8002188:	2303      	movs	r3, #3
 800218a:	f000 bee9 	b.w	8002f60 <HAL_RCC_OscConfig+0x106c>
 800218e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002192:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002196:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800219a:	fa93 f3a3 	rbit	r3, r3
 800219e:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 80021a2:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021a6:	fab3 f383 	clz	r3, r3
 80021aa:	b2db      	uxtb	r3, r3
 80021ac:	095b      	lsrs	r3, r3, #5
 80021ae:	b2db      	uxtb	r3, r3
 80021b0:	f043 0301 	orr.w	r3, r3, #1
 80021b4:	b2db      	uxtb	r3, r3
 80021b6:	2b01      	cmp	r3, #1
 80021b8:	d102      	bne.n	80021c0 <HAL_RCC_OscConfig+0x2cc>
 80021ba:	4b1a      	ldr	r3, [pc, #104]	; (8002224 <HAL_RCC_OscConfig+0x330>)
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	e015      	b.n	80021ec <HAL_RCC_OscConfig+0x2f8>
 80021c0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80021c4:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021c8:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80021cc:	fa93 f3a3 	rbit	r3, r3
 80021d0:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80021d4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80021d8:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80021dc:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80021e0:	fa93 f3a3 	rbit	r3, r3
 80021e4:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 80021e8:	4b0e      	ldr	r3, [pc, #56]	; (8002224 <HAL_RCC_OscConfig+0x330>)
 80021ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021ec:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80021f0:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 80021f4:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80021f8:	fa92 f2a2 	rbit	r2, r2
 80021fc:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8002200:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8002204:	fab2 f282 	clz	r2, r2
 8002208:	b2d2      	uxtb	r2, r2
 800220a:	f042 0220 	orr.w	r2, r2, #32
 800220e:	b2d2      	uxtb	r2, r2
 8002210:	f002 021f 	and.w	r2, r2, #31
 8002214:	2101      	movs	r1, #1
 8002216:	fa01 f202 	lsl.w	r2, r1, r2
 800221a:	4013      	ands	r3, r2
 800221c:	2b00      	cmp	r3, #0
 800221e:	d1ab      	bne.n	8002178 <HAL_RCC_OscConfig+0x284>
 8002220:	e003      	b.n	800222a <HAL_RCC_OscConfig+0x336>
 8002222:	bf00      	nop
 8002224:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002228:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800222a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800222e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f003 0302 	and.w	r3, r3, #2
 800223a:	2b00      	cmp	r3, #0
 800223c:	f000 817d 	beq.w	800253a <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002240:	4ba6      	ldr	r3, [pc, #664]	; (80024dc <HAL_RCC_OscConfig+0x5e8>)
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	f003 030c 	and.w	r3, r3, #12
 8002248:	2b00      	cmp	r3, #0
 800224a:	d00b      	beq.n	8002264 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800224c:	4ba3      	ldr	r3, [pc, #652]	; (80024dc <HAL_RCC_OscConfig+0x5e8>)
 800224e:	685b      	ldr	r3, [r3, #4]
 8002250:	f003 030c 	and.w	r3, r3, #12
 8002254:	2b08      	cmp	r3, #8
 8002256:	d172      	bne.n	800233e <HAL_RCC_OscConfig+0x44a>
 8002258:	4ba0      	ldr	r3, [pc, #640]	; (80024dc <HAL_RCC_OscConfig+0x5e8>)
 800225a:	685b      	ldr	r3, [r3, #4]
 800225c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002260:	2b00      	cmp	r3, #0
 8002262:	d16c      	bne.n	800233e <HAL_RCC_OscConfig+0x44a>
 8002264:	2302      	movs	r3, #2
 8002266:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800226a:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800226e:	fa93 f3a3 	rbit	r3, r3
 8002272:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8002276:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800227a:	fab3 f383 	clz	r3, r3
 800227e:	b2db      	uxtb	r3, r3
 8002280:	095b      	lsrs	r3, r3, #5
 8002282:	b2db      	uxtb	r3, r3
 8002284:	f043 0301 	orr.w	r3, r3, #1
 8002288:	b2db      	uxtb	r3, r3
 800228a:	2b01      	cmp	r3, #1
 800228c:	d102      	bne.n	8002294 <HAL_RCC_OscConfig+0x3a0>
 800228e:	4b93      	ldr	r3, [pc, #588]	; (80024dc <HAL_RCC_OscConfig+0x5e8>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	e013      	b.n	80022bc <HAL_RCC_OscConfig+0x3c8>
 8002294:	2302      	movs	r3, #2
 8002296:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800229a:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 800229e:	fa93 f3a3 	rbit	r3, r3
 80022a2:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80022a6:	2302      	movs	r3, #2
 80022a8:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80022ac:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80022b0:	fa93 f3a3 	rbit	r3, r3
 80022b4:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80022b8:	4b88      	ldr	r3, [pc, #544]	; (80024dc <HAL_RCC_OscConfig+0x5e8>)
 80022ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022bc:	2202      	movs	r2, #2
 80022be:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 80022c2:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80022c6:	fa92 f2a2 	rbit	r2, r2
 80022ca:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 80022ce:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 80022d2:	fab2 f282 	clz	r2, r2
 80022d6:	b2d2      	uxtb	r2, r2
 80022d8:	f042 0220 	orr.w	r2, r2, #32
 80022dc:	b2d2      	uxtb	r2, r2
 80022de:	f002 021f 	and.w	r2, r2, #31
 80022e2:	2101      	movs	r1, #1
 80022e4:	fa01 f202 	lsl.w	r2, r1, r2
 80022e8:	4013      	ands	r3, r2
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d00a      	beq.n	8002304 <HAL_RCC_OscConfig+0x410>
 80022ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022f2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	691b      	ldr	r3, [r3, #16]
 80022fa:	2b01      	cmp	r3, #1
 80022fc:	d002      	beq.n	8002304 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 80022fe:	2301      	movs	r3, #1
 8002300:	f000 be2e 	b.w	8002f60 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002304:	4b75      	ldr	r3, [pc, #468]	; (80024dc <HAL_RCC_OscConfig+0x5e8>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800230c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002310:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	695b      	ldr	r3, [r3, #20]
 8002318:	21f8      	movs	r1, #248	; 0xf8
 800231a:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800231e:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8002322:	fa91 f1a1 	rbit	r1, r1
 8002326:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 800232a:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 800232e:	fab1 f181 	clz	r1, r1
 8002332:	b2c9      	uxtb	r1, r1
 8002334:	408b      	lsls	r3, r1
 8002336:	4969      	ldr	r1, [pc, #420]	; (80024dc <HAL_RCC_OscConfig+0x5e8>)
 8002338:	4313      	orrs	r3, r2
 800233a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800233c:	e0fd      	b.n	800253a <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800233e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002342:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	691b      	ldr	r3, [r3, #16]
 800234a:	2b00      	cmp	r3, #0
 800234c:	f000 8088 	beq.w	8002460 <HAL_RCC_OscConfig+0x56c>
 8002350:	2301      	movs	r3, #1
 8002352:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002356:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 800235a:	fa93 f3a3 	rbit	r3, r3
 800235e:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8002362:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002366:	fab3 f383 	clz	r3, r3
 800236a:	b2db      	uxtb	r3, r3
 800236c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002370:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002374:	009b      	lsls	r3, r3, #2
 8002376:	461a      	mov	r2, r3
 8002378:	2301      	movs	r3, #1
 800237a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800237c:	f7ff fab2 	bl	80018e4 <HAL_GetTick>
 8002380:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002384:	e00a      	b.n	800239c <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002386:	f7ff faad 	bl	80018e4 <HAL_GetTick>
 800238a:	4602      	mov	r2, r0
 800238c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002390:	1ad3      	subs	r3, r2, r3
 8002392:	2b02      	cmp	r3, #2
 8002394:	d902      	bls.n	800239c <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8002396:	2303      	movs	r3, #3
 8002398:	f000 bde2 	b.w	8002f60 <HAL_RCC_OscConfig+0x106c>
 800239c:	2302      	movs	r3, #2
 800239e:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023a2:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80023a6:	fa93 f3a3 	rbit	r3, r3
 80023aa:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 80023ae:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023b2:	fab3 f383 	clz	r3, r3
 80023b6:	b2db      	uxtb	r3, r3
 80023b8:	095b      	lsrs	r3, r3, #5
 80023ba:	b2db      	uxtb	r3, r3
 80023bc:	f043 0301 	orr.w	r3, r3, #1
 80023c0:	b2db      	uxtb	r3, r3
 80023c2:	2b01      	cmp	r3, #1
 80023c4:	d102      	bne.n	80023cc <HAL_RCC_OscConfig+0x4d8>
 80023c6:	4b45      	ldr	r3, [pc, #276]	; (80024dc <HAL_RCC_OscConfig+0x5e8>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	e013      	b.n	80023f4 <HAL_RCC_OscConfig+0x500>
 80023cc:	2302      	movs	r3, #2
 80023ce:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023d2:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80023d6:	fa93 f3a3 	rbit	r3, r3
 80023da:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80023de:	2302      	movs	r3, #2
 80023e0:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80023e4:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80023e8:	fa93 f3a3 	rbit	r3, r3
 80023ec:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 80023f0:	4b3a      	ldr	r3, [pc, #232]	; (80024dc <HAL_RCC_OscConfig+0x5e8>)
 80023f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023f4:	2202      	movs	r2, #2
 80023f6:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 80023fa:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80023fe:	fa92 f2a2 	rbit	r2, r2
 8002402:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8002406:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 800240a:	fab2 f282 	clz	r2, r2
 800240e:	b2d2      	uxtb	r2, r2
 8002410:	f042 0220 	orr.w	r2, r2, #32
 8002414:	b2d2      	uxtb	r2, r2
 8002416:	f002 021f 	and.w	r2, r2, #31
 800241a:	2101      	movs	r1, #1
 800241c:	fa01 f202 	lsl.w	r2, r1, r2
 8002420:	4013      	ands	r3, r2
 8002422:	2b00      	cmp	r3, #0
 8002424:	d0af      	beq.n	8002386 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002426:	4b2d      	ldr	r3, [pc, #180]	; (80024dc <HAL_RCC_OscConfig+0x5e8>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800242e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002432:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	695b      	ldr	r3, [r3, #20]
 800243a:	21f8      	movs	r1, #248	; 0xf8
 800243c:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002440:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8002444:	fa91 f1a1 	rbit	r1, r1
 8002448:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 800244c:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8002450:	fab1 f181 	clz	r1, r1
 8002454:	b2c9      	uxtb	r1, r1
 8002456:	408b      	lsls	r3, r1
 8002458:	4920      	ldr	r1, [pc, #128]	; (80024dc <HAL_RCC_OscConfig+0x5e8>)
 800245a:	4313      	orrs	r3, r2
 800245c:	600b      	str	r3, [r1, #0]
 800245e:	e06c      	b.n	800253a <HAL_RCC_OscConfig+0x646>
 8002460:	2301      	movs	r3, #1
 8002462:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002466:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800246a:	fa93 f3a3 	rbit	r3, r3
 800246e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8002472:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002476:	fab3 f383 	clz	r3, r3
 800247a:	b2db      	uxtb	r3, r3
 800247c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002480:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002484:	009b      	lsls	r3, r3, #2
 8002486:	461a      	mov	r2, r3
 8002488:	2300      	movs	r3, #0
 800248a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800248c:	f7ff fa2a 	bl	80018e4 <HAL_GetTick>
 8002490:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002494:	e00a      	b.n	80024ac <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002496:	f7ff fa25 	bl	80018e4 <HAL_GetTick>
 800249a:	4602      	mov	r2, r0
 800249c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80024a0:	1ad3      	subs	r3, r2, r3
 80024a2:	2b02      	cmp	r3, #2
 80024a4:	d902      	bls.n	80024ac <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 80024a6:	2303      	movs	r3, #3
 80024a8:	f000 bd5a 	b.w	8002f60 <HAL_RCC_OscConfig+0x106c>
 80024ac:	2302      	movs	r3, #2
 80024ae:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024b2:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80024b6:	fa93 f3a3 	rbit	r3, r3
 80024ba:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 80024be:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024c2:	fab3 f383 	clz	r3, r3
 80024c6:	b2db      	uxtb	r3, r3
 80024c8:	095b      	lsrs	r3, r3, #5
 80024ca:	b2db      	uxtb	r3, r3
 80024cc:	f043 0301 	orr.w	r3, r3, #1
 80024d0:	b2db      	uxtb	r3, r3
 80024d2:	2b01      	cmp	r3, #1
 80024d4:	d104      	bne.n	80024e0 <HAL_RCC_OscConfig+0x5ec>
 80024d6:	4b01      	ldr	r3, [pc, #4]	; (80024dc <HAL_RCC_OscConfig+0x5e8>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	e015      	b.n	8002508 <HAL_RCC_OscConfig+0x614>
 80024dc:	40021000 	.word	0x40021000
 80024e0:	2302      	movs	r3, #2
 80024e2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024e6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80024ea:	fa93 f3a3 	rbit	r3, r3
 80024ee:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80024f2:	2302      	movs	r3, #2
 80024f4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80024f8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80024fc:	fa93 f3a3 	rbit	r3, r3
 8002500:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8002504:	4bc8      	ldr	r3, [pc, #800]	; (8002828 <HAL_RCC_OscConfig+0x934>)
 8002506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002508:	2202      	movs	r2, #2
 800250a:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 800250e:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8002512:	fa92 f2a2 	rbit	r2, r2
 8002516:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 800251a:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800251e:	fab2 f282 	clz	r2, r2
 8002522:	b2d2      	uxtb	r2, r2
 8002524:	f042 0220 	orr.w	r2, r2, #32
 8002528:	b2d2      	uxtb	r2, r2
 800252a:	f002 021f 	and.w	r2, r2, #31
 800252e:	2101      	movs	r1, #1
 8002530:	fa01 f202 	lsl.w	r2, r1, r2
 8002534:	4013      	ands	r3, r2
 8002536:	2b00      	cmp	r3, #0
 8002538:	d1ad      	bne.n	8002496 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800253a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800253e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f003 0308 	and.w	r3, r3, #8
 800254a:	2b00      	cmp	r3, #0
 800254c:	f000 8110 	beq.w	8002770 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002550:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002554:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	699b      	ldr	r3, [r3, #24]
 800255c:	2b00      	cmp	r3, #0
 800255e:	d079      	beq.n	8002654 <HAL_RCC_OscConfig+0x760>
 8002560:	2301      	movs	r3, #1
 8002562:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002566:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800256a:	fa93 f3a3 	rbit	r3, r3
 800256e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8002572:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002576:	fab3 f383 	clz	r3, r3
 800257a:	b2db      	uxtb	r3, r3
 800257c:	461a      	mov	r2, r3
 800257e:	4bab      	ldr	r3, [pc, #684]	; (800282c <HAL_RCC_OscConfig+0x938>)
 8002580:	4413      	add	r3, r2
 8002582:	009b      	lsls	r3, r3, #2
 8002584:	461a      	mov	r2, r3
 8002586:	2301      	movs	r3, #1
 8002588:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800258a:	f7ff f9ab 	bl	80018e4 <HAL_GetTick>
 800258e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002592:	e00a      	b.n	80025aa <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002594:	f7ff f9a6 	bl	80018e4 <HAL_GetTick>
 8002598:	4602      	mov	r2, r0
 800259a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800259e:	1ad3      	subs	r3, r2, r3
 80025a0:	2b02      	cmp	r3, #2
 80025a2:	d902      	bls.n	80025aa <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 80025a4:	2303      	movs	r3, #3
 80025a6:	f000 bcdb 	b.w	8002f60 <HAL_RCC_OscConfig+0x106c>
 80025aa:	2302      	movs	r3, #2
 80025ac:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025b0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80025b4:	fa93 f3a3 	rbit	r3, r3
 80025b8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80025bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025c0:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80025c4:	2202      	movs	r2, #2
 80025c6:	601a      	str	r2, [r3, #0]
 80025c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025cc:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	fa93 f2a3 	rbit	r2, r3
 80025d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025da:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80025de:	601a      	str	r2, [r3, #0]
 80025e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025e4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80025e8:	2202      	movs	r2, #2
 80025ea:	601a      	str	r2, [r3, #0]
 80025ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025f0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	fa93 f2a3 	rbit	r2, r3
 80025fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025fe:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002602:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002604:	4b88      	ldr	r3, [pc, #544]	; (8002828 <HAL_RCC_OscConfig+0x934>)
 8002606:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002608:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800260c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002610:	2102      	movs	r1, #2
 8002612:	6019      	str	r1, [r3, #0]
 8002614:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002618:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	fa93 f1a3 	rbit	r1, r3
 8002622:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002626:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800262a:	6019      	str	r1, [r3, #0]
  return result;
 800262c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002630:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	fab3 f383 	clz	r3, r3
 800263a:	b2db      	uxtb	r3, r3
 800263c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002640:	b2db      	uxtb	r3, r3
 8002642:	f003 031f 	and.w	r3, r3, #31
 8002646:	2101      	movs	r1, #1
 8002648:	fa01 f303 	lsl.w	r3, r1, r3
 800264c:	4013      	ands	r3, r2
 800264e:	2b00      	cmp	r3, #0
 8002650:	d0a0      	beq.n	8002594 <HAL_RCC_OscConfig+0x6a0>
 8002652:	e08d      	b.n	8002770 <HAL_RCC_OscConfig+0x87c>
 8002654:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002658:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800265c:	2201      	movs	r2, #1
 800265e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002660:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002664:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	fa93 f2a3 	rbit	r2, r3
 800266e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002672:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002676:	601a      	str	r2, [r3, #0]
  return result;
 8002678:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800267c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002680:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002682:	fab3 f383 	clz	r3, r3
 8002686:	b2db      	uxtb	r3, r3
 8002688:	461a      	mov	r2, r3
 800268a:	4b68      	ldr	r3, [pc, #416]	; (800282c <HAL_RCC_OscConfig+0x938>)
 800268c:	4413      	add	r3, r2
 800268e:	009b      	lsls	r3, r3, #2
 8002690:	461a      	mov	r2, r3
 8002692:	2300      	movs	r3, #0
 8002694:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002696:	f7ff f925 	bl	80018e4 <HAL_GetTick>
 800269a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800269e:	e00a      	b.n	80026b6 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80026a0:	f7ff f920 	bl	80018e4 <HAL_GetTick>
 80026a4:	4602      	mov	r2, r0
 80026a6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80026aa:	1ad3      	subs	r3, r2, r3
 80026ac:	2b02      	cmp	r3, #2
 80026ae:	d902      	bls.n	80026b6 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 80026b0:	2303      	movs	r3, #3
 80026b2:	f000 bc55 	b.w	8002f60 <HAL_RCC_OscConfig+0x106c>
 80026b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026ba:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80026be:	2202      	movs	r2, #2
 80026c0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026c6:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	fa93 f2a3 	rbit	r2, r3
 80026d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026d4:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80026d8:	601a      	str	r2, [r3, #0]
 80026da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026de:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80026e2:	2202      	movs	r2, #2
 80026e4:	601a      	str	r2, [r3, #0]
 80026e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026ea:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	fa93 f2a3 	rbit	r2, r3
 80026f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026f8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80026fc:	601a      	str	r2, [r3, #0]
 80026fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002702:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002706:	2202      	movs	r2, #2
 8002708:	601a      	str	r2, [r3, #0]
 800270a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800270e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	fa93 f2a3 	rbit	r2, r3
 8002718:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800271c:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002720:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002722:	4b41      	ldr	r3, [pc, #260]	; (8002828 <HAL_RCC_OscConfig+0x934>)
 8002724:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002726:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800272a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800272e:	2102      	movs	r1, #2
 8002730:	6019      	str	r1, [r3, #0]
 8002732:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002736:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	fa93 f1a3 	rbit	r1, r3
 8002740:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002744:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002748:	6019      	str	r1, [r3, #0]
  return result;
 800274a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800274e:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	fab3 f383 	clz	r3, r3
 8002758:	b2db      	uxtb	r3, r3
 800275a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800275e:	b2db      	uxtb	r3, r3
 8002760:	f003 031f 	and.w	r3, r3, #31
 8002764:	2101      	movs	r1, #1
 8002766:	fa01 f303 	lsl.w	r3, r1, r3
 800276a:	4013      	ands	r3, r2
 800276c:	2b00      	cmp	r3, #0
 800276e:	d197      	bne.n	80026a0 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002770:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002774:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f003 0304 	and.w	r3, r3, #4
 8002780:	2b00      	cmp	r3, #0
 8002782:	f000 81a1 	beq.w	8002ac8 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002786:	2300      	movs	r3, #0
 8002788:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800278c:	4b26      	ldr	r3, [pc, #152]	; (8002828 <HAL_RCC_OscConfig+0x934>)
 800278e:	69db      	ldr	r3, [r3, #28]
 8002790:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002794:	2b00      	cmp	r3, #0
 8002796:	d116      	bne.n	80027c6 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002798:	4b23      	ldr	r3, [pc, #140]	; (8002828 <HAL_RCC_OscConfig+0x934>)
 800279a:	69db      	ldr	r3, [r3, #28]
 800279c:	4a22      	ldr	r2, [pc, #136]	; (8002828 <HAL_RCC_OscConfig+0x934>)
 800279e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027a2:	61d3      	str	r3, [r2, #28]
 80027a4:	4b20      	ldr	r3, [pc, #128]	; (8002828 <HAL_RCC_OscConfig+0x934>)
 80027a6:	69db      	ldr	r3, [r3, #28]
 80027a8:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80027ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027b0:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80027b4:	601a      	str	r2, [r3, #0]
 80027b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027ba:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80027be:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80027c0:	2301      	movs	r3, #1
 80027c2:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027c6:	4b1a      	ldr	r3, [pc, #104]	; (8002830 <HAL_RCC_OscConfig+0x93c>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d11a      	bne.n	8002808 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80027d2:	4b17      	ldr	r3, [pc, #92]	; (8002830 <HAL_RCC_OscConfig+0x93c>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	4a16      	ldr	r2, [pc, #88]	; (8002830 <HAL_RCC_OscConfig+0x93c>)
 80027d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027dc:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80027de:	f7ff f881 	bl	80018e4 <HAL_GetTick>
 80027e2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027e6:	e009      	b.n	80027fc <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027e8:	f7ff f87c 	bl	80018e4 <HAL_GetTick>
 80027ec:	4602      	mov	r2, r0
 80027ee:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80027f2:	1ad3      	subs	r3, r2, r3
 80027f4:	2b64      	cmp	r3, #100	; 0x64
 80027f6:	d901      	bls.n	80027fc <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 80027f8:	2303      	movs	r3, #3
 80027fa:	e3b1      	b.n	8002f60 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027fc:	4b0c      	ldr	r3, [pc, #48]	; (8002830 <HAL_RCC_OscConfig+0x93c>)
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002804:	2b00      	cmp	r3, #0
 8002806:	d0ef      	beq.n	80027e8 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002808:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800280c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	68db      	ldr	r3, [r3, #12]
 8002814:	2b01      	cmp	r3, #1
 8002816:	d10d      	bne.n	8002834 <HAL_RCC_OscConfig+0x940>
 8002818:	4b03      	ldr	r3, [pc, #12]	; (8002828 <HAL_RCC_OscConfig+0x934>)
 800281a:	6a1b      	ldr	r3, [r3, #32]
 800281c:	4a02      	ldr	r2, [pc, #8]	; (8002828 <HAL_RCC_OscConfig+0x934>)
 800281e:	f043 0301 	orr.w	r3, r3, #1
 8002822:	6213      	str	r3, [r2, #32]
 8002824:	e03c      	b.n	80028a0 <HAL_RCC_OscConfig+0x9ac>
 8002826:	bf00      	nop
 8002828:	40021000 	.word	0x40021000
 800282c:	10908120 	.word	0x10908120
 8002830:	40007000 	.word	0x40007000
 8002834:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002838:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	68db      	ldr	r3, [r3, #12]
 8002840:	2b00      	cmp	r3, #0
 8002842:	d10c      	bne.n	800285e <HAL_RCC_OscConfig+0x96a>
 8002844:	4bc1      	ldr	r3, [pc, #772]	; (8002b4c <HAL_RCC_OscConfig+0xc58>)
 8002846:	6a1b      	ldr	r3, [r3, #32]
 8002848:	4ac0      	ldr	r2, [pc, #768]	; (8002b4c <HAL_RCC_OscConfig+0xc58>)
 800284a:	f023 0301 	bic.w	r3, r3, #1
 800284e:	6213      	str	r3, [r2, #32]
 8002850:	4bbe      	ldr	r3, [pc, #760]	; (8002b4c <HAL_RCC_OscConfig+0xc58>)
 8002852:	6a1b      	ldr	r3, [r3, #32]
 8002854:	4abd      	ldr	r2, [pc, #756]	; (8002b4c <HAL_RCC_OscConfig+0xc58>)
 8002856:	f023 0304 	bic.w	r3, r3, #4
 800285a:	6213      	str	r3, [r2, #32]
 800285c:	e020      	b.n	80028a0 <HAL_RCC_OscConfig+0x9ac>
 800285e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002862:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	68db      	ldr	r3, [r3, #12]
 800286a:	2b05      	cmp	r3, #5
 800286c:	d10c      	bne.n	8002888 <HAL_RCC_OscConfig+0x994>
 800286e:	4bb7      	ldr	r3, [pc, #732]	; (8002b4c <HAL_RCC_OscConfig+0xc58>)
 8002870:	6a1b      	ldr	r3, [r3, #32]
 8002872:	4ab6      	ldr	r2, [pc, #728]	; (8002b4c <HAL_RCC_OscConfig+0xc58>)
 8002874:	f043 0304 	orr.w	r3, r3, #4
 8002878:	6213      	str	r3, [r2, #32]
 800287a:	4bb4      	ldr	r3, [pc, #720]	; (8002b4c <HAL_RCC_OscConfig+0xc58>)
 800287c:	6a1b      	ldr	r3, [r3, #32]
 800287e:	4ab3      	ldr	r2, [pc, #716]	; (8002b4c <HAL_RCC_OscConfig+0xc58>)
 8002880:	f043 0301 	orr.w	r3, r3, #1
 8002884:	6213      	str	r3, [r2, #32]
 8002886:	e00b      	b.n	80028a0 <HAL_RCC_OscConfig+0x9ac>
 8002888:	4bb0      	ldr	r3, [pc, #704]	; (8002b4c <HAL_RCC_OscConfig+0xc58>)
 800288a:	6a1b      	ldr	r3, [r3, #32]
 800288c:	4aaf      	ldr	r2, [pc, #700]	; (8002b4c <HAL_RCC_OscConfig+0xc58>)
 800288e:	f023 0301 	bic.w	r3, r3, #1
 8002892:	6213      	str	r3, [r2, #32]
 8002894:	4bad      	ldr	r3, [pc, #692]	; (8002b4c <HAL_RCC_OscConfig+0xc58>)
 8002896:	6a1b      	ldr	r3, [r3, #32]
 8002898:	4aac      	ldr	r2, [pc, #688]	; (8002b4c <HAL_RCC_OscConfig+0xc58>)
 800289a:	f023 0304 	bic.w	r3, r3, #4
 800289e:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80028a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028a4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	68db      	ldr	r3, [r3, #12]
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	f000 8081 	beq.w	80029b4 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028b2:	f7ff f817 	bl	80018e4 <HAL_GetTick>
 80028b6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028ba:	e00b      	b.n	80028d4 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80028bc:	f7ff f812 	bl	80018e4 <HAL_GetTick>
 80028c0:	4602      	mov	r2, r0
 80028c2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80028c6:	1ad3      	subs	r3, r2, r3
 80028c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80028cc:	4293      	cmp	r3, r2
 80028ce:	d901      	bls.n	80028d4 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 80028d0:	2303      	movs	r3, #3
 80028d2:	e345      	b.n	8002f60 <HAL_RCC_OscConfig+0x106c>
 80028d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028d8:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80028dc:	2202      	movs	r2, #2
 80028de:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028e4:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	fa93 f2a3 	rbit	r2, r3
 80028ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028f2:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80028f6:	601a      	str	r2, [r3, #0]
 80028f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028fc:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002900:	2202      	movs	r2, #2
 8002902:	601a      	str	r2, [r3, #0]
 8002904:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002908:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	fa93 f2a3 	rbit	r2, r3
 8002912:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002916:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800291a:	601a      	str	r2, [r3, #0]
  return result;
 800291c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002920:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002924:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002926:	fab3 f383 	clz	r3, r3
 800292a:	b2db      	uxtb	r3, r3
 800292c:	095b      	lsrs	r3, r3, #5
 800292e:	b2db      	uxtb	r3, r3
 8002930:	f043 0302 	orr.w	r3, r3, #2
 8002934:	b2db      	uxtb	r3, r3
 8002936:	2b02      	cmp	r3, #2
 8002938:	d102      	bne.n	8002940 <HAL_RCC_OscConfig+0xa4c>
 800293a:	4b84      	ldr	r3, [pc, #528]	; (8002b4c <HAL_RCC_OscConfig+0xc58>)
 800293c:	6a1b      	ldr	r3, [r3, #32]
 800293e:	e013      	b.n	8002968 <HAL_RCC_OscConfig+0xa74>
 8002940:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002944:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002948:	2202      	movs	r2, #2
 800294a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800294c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002950:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	fa93 f2a3 	rbit	r2, r3
 800295a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800295e:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8002962:	601a      	str	r2, [r3, #0]
 8002964:	4b79      	ldr	r3, [pc, #484]	; (8002b4c <HAL_RCC_OscConfig+0xc58>)
 8002966:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002968:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800296c:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8002970:	2102      	movs	r1, #2
 8002972:	6011      	str	r1, [r2, #0]
 8002974:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002978:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 800297c:	6812      	ldr	r2, [r2, #0]
 800297e:	fa92 f1a2 	rbit	r1, r2
 8002982:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002986:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800298a:	6011      	str	r1, [r2, #0]
  return result;
 800298c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002990:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8002994:	6812      	ldr	r2, [r2, #0]
 8002996:	fab2 f282 	clz	r2, r2
 800299a:	b2d2      	uxtb	r2, r2
 800299c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80029a0:	b2d2      	uxtb	r2, r2
 80029a2:	f002 021f 	and.w	r2, r2, #31
 80029a6:	2101      	movs	r1, #1
 80029a8:	fa01 f202 	lsl.w	r2, r1, r2
 80029ac:	4013      	ands	r3, r2
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d084      	beq.n	80028bc <HAL_RCC_OscConfig+0x9c8>
 80029b2:	e07f      	b.n	8002ab4 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029b4:	f7fe ff96 	bl	80018e4 <HAL_GetTick>
 80029b8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029bc:	e00b      	b.n	80029d6 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80029be:	f7fe ff91 	bl	80018e4 <HAL_GetTick>
 80029c2:	4602      	mov	r2, r0
 80029c4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80029c8:	1ad3      	subs	r3, r2, r3
 80029ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80029ce:	4293      	cmp	r3, r2
 80029d0:	d901      	bls.n	80029d6 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 80029d2:	2303      	movs	r3, #3
 80029d4:	e2c4      	b.n	8002f60 <HAL_RCC_OscConfig+0x106c>
 80029d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029da:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80029de:	2202      	movs	r2, #2
 80029e0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029e6:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	fa93 f2a3 	rbit	r2, r3
 80029f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029f4:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80029f8:	601a      	str	r2, [r3, #0]
 80029fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029fe:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8002a02:	2202      	movs	r2, #2
 8002a04:	601a      	str	r2, [r3, #0]
 8002a06:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a0a:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	fa93 f2a3 	rbit	r2, r3
 8002a14:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a18:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002a1c:	601a      	str	r2, [r3, #0]
  return result;
 8002a1e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a22:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002a26:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a28:	fab3 f383 	clz	r3, r3
 8002a2c:	b2db      	uxtb	r3, r3
 8002a2e:	095b      	lsrs	r3, r3, #5
 8002a30:	b2db      	uxtb	r3, r3
 8002a32:	f043 0302 	orr.w	r3, r3, #2
 8002a36:	b2db      	uxtb	r3, r3
 8002a38:	2b02      	cmp	r3, #2
 8002a3a:	d102      	bne.n	8002a42 <HAL_RCC_OscConfig+0xb4e>
 8002a3c:	4b43      	ldr	r3, [pc, #268]	; (8002b4c <HAL_RCC_OscConfig+0xc58>)
 8002a3e:	6a1b      	ldr	r3, [r3, #32]
 8002a40:	e013      	b.n	8002a6a <HAL_RCC_OscConfig+0xb76>
 8002a42:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a46:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002a4a:	2202      	movs	r2, #2
 8002a4c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a4e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a52:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	fa93 f2a3 	rbit	r2, r3
 8002a5c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a60:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8002a64:	601a      	str	r2, [r3, #0]
 8002a66:	4b39      	ldr	r3, [pc, #228]	; (8002b4c <HAL_RCC_OscConfig+0xc58>)
 8002a68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a6a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002a6e:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8002a72:	2102      	movs	r1, #2
 8002a74:	6011      	str	r1, [r2, #0]
 8002a76:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002a7a:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8002a7e:	6812      	ldr	r2, [r2, #0]
 8002a80:	fa92 f1a2 	rbit	r1, r2
 8002a84:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002a88:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002a8c:	6011      	str	r1, [r2, #0]
  return result;
 8002a8e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002a92:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002a96:	6812      	ldr	r2, [r2, #0]
 8002a98:	fab2 f282 	clz	r2, r2
 8002a9c:	b2d2      	uxtb	r2, r2
 8002a9e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002aa2:	b2d2      	uxtb	r2, r2
 8002aa4:	f002 021f 	and.w	r2, r2, #31
 8002aa8:	2101      	movs	r1, #1
 8002aaa:	fa01 f202 	lsl.w	r2, r1, r2
 8002aae:	4013      	ands	r3, r2
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d184      	bne.n	80029be <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002ab4:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8002ab8:	2b01      	cmp	r3, #1
 8002aba:	d105      	bne.n	8002ac8 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002abc:	4b23      	ldr	r3, [pc, #140]	; (8002b4c <HAL_RCC_OscConfig+0xc58>)
 8002abe:	69db      	ldr	r3, [r3, #28]
 8002ac0:	4a22      	ldr	r2, [pc, #136]	; (8002b4c <HAL_RCC_OscConfig+0xc58>)
 8002ac2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ac6:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ac8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002acc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	69db      	ldr	r3, [r3, #28]
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	f000 8242 	beq.w	8002f5e <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002ada:	4b1c      	ldr	r3, [pc, #112]	; (8002b4c <HAL_RCC_OscConfig+0xc58>)
 8002adc:	685b      	ldr	r3, [r3, #4]
 8002ade:	f003 030c 	and.w	r3, r3, #12
 8002ae2:	2b08      	cmp	r3, #8
 8002ae4:	f000 8213 	beq.w	8002f0e <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002ae8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002aec:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	69db      	ldr	r3, [r3, #28]
 8002af4:	2b02      	cmp	r3, #2
 8002af6:	f040 8162 	bne.w	8002dbe <HAL_RCC_OscConfig+0xeca>
 8002afa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002afe:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8002b02:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002b06:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b08:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b0c:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	fa93 f2a3 	rbit	r2, r3
 8002b16:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b1a:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002b1e:	601a      	str	r2, [r3, #0]
  return result;
 8002b20:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b24:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002b28:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b2a:	fab3 f383 	clz	r3, r3
 8002b2e:	b2db      	uxtb	r3, r3
 8002b30:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002b34:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002b38:	009b      	lsls	r3, r3, #2
 8002b3a:	461a      	mov	r2, r3
 8002b3c:	2300      	movs	r3, #0
 8002b3e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b40:	f7fe fed0 	bl	80018e4 <HAL_GetTick>
 8002b44:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b48:	e00c      	b.n	8002b64 <HAL_RCC_OscConfig+0xc70>
 8002b4a:	bf00      	nop
 8002b4c:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b50:	f7fe fec8 	bl	80018e4 <HAL_GetTick>
 8002b54:	4602      	mov	r2, r0
 8002b56:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002b5a:	1ad3      	subs	r3, r2, r3
 8002b5c:	2b02      	cmp	r3, #2
 8002b5e:	d901      	bls.n	8002b64 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8002b60:	2303      	movs	r3, #3
 8002b62:	e1fd      	b.n	8002f60 <HAL_RCC_OscConfig+0x106c>
 8002b64:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b68:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002b6c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002b70:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b72:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b76:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	fa93 f2a3 	rbit	r2, r3
 8002b80:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b84:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002b88:	601a      	str	r2, [r3, #0]
  return result;
 8002b8a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b8e:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002b92:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b94:	fab3 f383 	clz	r3, r3
 8002b98:	b2db      	uxtb	r3, r3
 8002b9a:	095b      	lsrs	r3, r3, #5
 8002b9c:	b2db      	uxtb	r3, r3
 8002b9e:	f043 0301 	orr.w	r3, r3, #1
 8002ba2:	b2db      	uxtb	r3, r3
 8002ba4:	2b01      	cmp	r3, #1
 8002ba6:	d102      	bne.n	8002bae <HAL_RCC_OscConfig+0xcba>
 8002ba8:	4bb0      	ldr	r3, [pc, #704]	; (8002e6c <HAL_RCC_OscConfig+0xf78>)
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	e027      	b.n	8002bfe <HAL_RCC_OscConfig+0xd0a>
 8002bae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bb2:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002bb6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002bba:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bbc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bc0:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	fa93 f2a3 	rbit	r2, r3
 8002bca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bce:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8002bd2:	601a      	str	r2, [r3, #0]
 8002bd4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bd8:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8002bdc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002be0:	601a      	str	r2, [r3, #0]
 8002be2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002be6:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	fa93 f2a3 	rbit	r2, r3
 8002bf0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bf4:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8002bf8:	601a      	str	r2, [r3, #0]
 8002bfa:	4b9c      	ldr	r3, [pc, #624]	; (8002e6c <HAL_RCC_OscConfig+0xf78>)
 8002bfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bfe:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002c02:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8002c06:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002c0a:	6011      	str	r1, [r2, #0]
 8002c0c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002c10:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8002c14:	6812      	ldr	r2, [r2, #0]
 8002c16:	fa92 f1a2 	rbit	r1, r2
 8002c1a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002c1e:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002c22:	6011      	str	r1, [r2, #0]
  return result;
 8002c24:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002c28:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002c2c:	6812      	ldr	r2, [r2, #0]
 8002c2e:	fab2 f282 	clz	r2, r2
 8002c32:	b2d2      	uxtb	r2, r2
 8002c34:	f042 0220 	orr.w	r2, r2, #32
 8002c38:	b2d2      	uxtb	r2, r2
 8002c3a:	f002 021f 	and.w	r2, r2, #31
 8002c3e:	2101      	movs	r1, #1
 8002c40:	fa01 f202 	lsl.w	r2, r1, r2
 8002c44:	4013      	ands	r3, r2
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d182      	bne.n	8002b50 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002c4a:	4b88      	ldr	r3, [pc, #544]	; (8002e6c <HAL_RCC_OscConfig+0xf78>)
 8002c4c:	685b      	ldr	r3, [r3, #4]
 8002c4e:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002c52:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c56:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002c5e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c62:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	6a1b      	ldr	r3, [r3, #32]
 8002c6a:	430b      	orrs	r3, r1
 8002c6c:	497f      	ldr	r1, [pc, #508]	; (8002e6c <HAL_RCC_OscConfig+0xf78>)
 8002c6e:	4313      	orrs	r3, r2
 8002c70:	604b      	str	r3, [r1, #4]
 8002c72:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c76:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8002c7a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002c7e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c80:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c84:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	fa93 f2a3 	rbit	r2, r3
 8002c8e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c92:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002c96:	601a      	str	r2, [r3, #0]
  return result;
 8002c98:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c9c:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002ca0:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ca2:	fab3 f383 	clz	r3, r3
 8002ca6:	b2db      	uxtb	r3, r3
 8002ca8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002cac:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002cb0:	009b      	lsls	r3, r3, #2
 8002cb2:	461a      	mov	r2, r3
 8002cb4:	2301      	movs	r3, #1
 8002cb6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cb8:	f7fe fe14 	bl	80018e4 <HAL_GetTick>
 8002cbc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002cc0:	e009      	b.n	8002cd6 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002cc2:	f7fe fe0f 	bl	80018e4 <HAL_GetTick>
 8002cc6:	4602      	mov	r2, r0
 8002cc8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002ccc:	1ad3      	subs	r3, r2, r3
 8002cce:	2b02      	cmp	r3, #2
 8002cd0:	d901      	bls.n	8002cd6 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8002cd2:	2303      	movs	r3, #3
 8002cd4:	e144      	b.n	8002f60 <HAL_RCC_OscConfig+0x106c>
 8002cd6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cda:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002cde:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002ce2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ce4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ce8:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	fa93 f2a3 	rbit	r2, r3
 8002cf2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cf6:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002cfa:	601a      	str	r2, [r3, #0]
  return result;
 8002cfc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d00:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002d04:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002d06:	fab3 f383 	clz	r3, r3
 8002d0a:	b2db      	uxtb	r3, r3
 8002d0c:	095b      	lsrs	r3, r3, #5
 8002d0e:	b2db      	uxtb	r3, r3
 8002d10:	f043 0301 	orr.w	r3, r3, #1
 8002d14:	b2db      	uxtb	r3, r3
 8002d16:	2b01      	cmp	r3, #1
 8002d18:	d102      	bne.n	8002d20 <HAL_RCC_OscConfig+0xe2c>
 8002d1a:	4b54      	ldr	r3, [pc, #336]	; (8002e6c <HAL_RCC_OscConfig+0xf78>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	e027      	b.n	8002d70 <HAL_RCC_OscConfig+0xe7c>
 8002d20:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d24:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002d28:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002d2c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d2e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d32:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	fa93 f2a3 	rbit	r2, r3
 8002d3c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d40:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8002d44:	601a      	str	r2, [r3, #0]
 8002d46:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d4a:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8002d4e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002d52:	601a      	str	r2, [r3, #0]
 8002d54:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d58:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	fa93 f2a3 	rbit	r2, r3
 8002d62:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d66:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8002d6a:	601a      	str	r2, [r3, #0]
 8002d6c:	4b3f      	ldr	r3, [pc, #252]	; (8002e6c <HAL_RCC_OscConfig+0xf78>)
 8002d6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d70:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002d74:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8002d78:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002d7c:	6011      	str	r1, [r2, #0]
 8002d7e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002d82:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8002d86:	6812      	ldr	r2, [r2, #0]
 8002d88:	fa92 f1a2 	rbit	r1, r2
 8002d8c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002d90:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002d94:	6011      	str	r1, [r2, #0]
  return result;
 8002d96:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002d9a:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002d9e:	6812      	ldr	r2, [r2, #0]
 8002da0:	fab2 f282 	clz	r2, r2
 8002da4:	b2d2      	uxtb	r2, r2
 8002da6:	f042 0220 	orr.w	r2, r2, #32
 8002daa:	b2d2      	uxtb	r2, r2
 8002dac:	f002 021f 	and.w	r2, r2, #31
 8002db0:	2101      	movs	r1, #1
 8002db2:	fa01 f202 	lsl.w	r2, r1, r2
 8002db6:	4013      	ands	r3, r2
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d082      	beq.n	8002cc2 <HAL_RCC_OscConfig+0xdce>
 8002dbc:	e0cf      	b.n	8002f5e <HAL_RCC_OscConfig+0x106a>
 8002dbe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002dc2:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8002dc6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002dca:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dcc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002dd0:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	fa93 f2a3 	rbit	r2, r3
 8002dda:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002dde:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002de2:	601a      	str	r2, [r3, #0]
  return result;
 8002de4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002de8:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002dec:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002dee:	fab3 f383 	clz	r3, r3
 8002df2:	b2db      	uxtb	r3, r3
 8002df4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002df8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002dfc:	009b      	lsls	r3, r3, #2
 8002dfe:	461a      	mov	r2, r3
 8002e00:	2300      	movs	r3, #0
 8002e02:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e04:	f7fe fd6e 	bl	80018e4 <HAL_GetTick>
 8002e08:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e0c:	e009      	b.n	8002e22 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e0e:	f7fe fd69 	bl	80018e4 <HAL_GetTick>
 8002e12:	4602      	mov	r2, r0
 8002e14:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002e18:	1ad3      	subs	r3, r2, r3
 8002e1a:	2b02      	cmp	r3, #2
 8002e1c:	d901      	bls.n	8002e22 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8002e1e:	2303      	movs	r3, #3
 8002e20:	e09e      	b.n	8002f60 <HAL_RCC_OscConfig+0x106c>
 8002e22:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e26:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002e2a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002e2e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e30:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e34:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	fa93 f2a3 	rbit	r2, r3
 8002e3e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e42:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002e46:	601a      	str	r2, [r3, #0]
  return result;
 8002e48:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e4c:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002e50:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e52:	fab3 f383 	clz	r3, r3
 8002e56:	b2db      	uxtb	r3, r3
 8002e58:	095b      	lsrs	r3, r3, #5
 8002e5a:	b2db      	uxtb	r3, r3
 8002e5c:	f043 0301 	orr.w	r3, r3, #1
 8002e60:	b2db      	uxtb	r3, r3
 8002e62:	2b01      	cmp	r3, #1
 8002e64:	d104      	bne.n	8002e70 <HAL_RCC_OscConfig+0xf7c>
 8002e66:	4b01      	ldr	r3, [pc, #4]	; (8002e6c <HAL_RCC_OscConfig+0xf78>)
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	e029      	b.n	8002ec0 <HAL_RCC_OscConfig+0xfcc>
 8002e6c:	40021000 	.word	0x40021000
 8002e70:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e74:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002e78:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002e7c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e7e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e82:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	fa93 f2a3 	rbit	r2, r3
 8002e8c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e90:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8002e94:	601a      	str	r2, [r3, #0]
 8002e96:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e9a:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8002e9e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002ea2:	601a      	str	r2, [r3, #0]
 8002ea4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ea8:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	fa93 f2a3 	rbit	r2, r3
 8002eb2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002eb6:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8002eba:	601a      	str	r2, [r3, #0]
 8002ebc:	4b2b      	ldr	r3, [pc, #172]	; (8002f6c <HAL_RCC_OscConfig+0x1078>)
 8002ebe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ec0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002ec4:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8002ec8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002ecc:	6011      	str	r1, [r2, #0]
 8002ece:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002ed2:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8002ed6:	6812      	ldr	r2, [r2, #0]
 8002ed8:	fa92 f1a2 	rbit	r1, r2
 8002edc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002ee0:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002ee4:	6011      	str	r1, [r2, #0]
  return result;
 8002ee6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002eea:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002eee:	6812      	ldr	r2, [r2, #0]
 8002ef0:	fab2 f282 	clz	r2, r2
 8002ef4:	b2d2      	uxtb	r2, r2
 8002ef6:	f042 0220 	orr.w	r2, r2, #32
 8002efa:	b2d2      	uxtb	r2, r2
 8002efc:	f002 021f 	and.w	r2, r2, #31
 8002f00:	2101      	movs	r1, #1
 8002f02:	fa01 f202 	lsl.w	r2, r1, r2
 8002f06:	4013      	ands	r3, r2
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d180      	bne.n	8002e0e <HAL_RCC_OscConfig+0xf1a>
 8002f0c:	e027      	b.n	8002f5e <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002f0e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f12:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	69db      	ldr	r3, [r3, #28]
 8002f1a:	2b01      	cmp	r3, #1
 8002f1c:	d101      	bne.n	8002f22 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8002f1e:	2301      	movs	r3, #1
 8002f20:	e01e      	b.n	8002f60 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002f22:	4b12      	ldr	r3, [pc, #72]	; (8002f6c <HAL_RCC_OscConfig+0x1078>)
 8002f24:	685b      	ldr	r3, [r3, #4]
 8002f26:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002f2a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002f2e:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002f32:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f36:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	6a1b      	ldr	r3, [r3, #32]
 8002f3e:	429a      	cmp	r2, r3
 8002f40:	d10b      	bne.n	8002f5a <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8002f42:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002f46:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002f4a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f4e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002f56:	429a      	cmp	r2, r3
 8002f58:	d001      	beq.n	8002f5e <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8002f5a:	2301      	movs	r3, #1
 8002f5c:	e000      	b.n	8002f60 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8002f5e:	2300      	movs	r3, #0
}
 8002f60:	4618      	mov	r0, r3
 8002f62:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8002f66:	46bd      	mov	sp, r7
 8002f68:	bd80      	pop	{r7, pc}
 8002f6a:	bf00      	nop
 8002f6c:	40021000 	.word	0x40021000

08002f70 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	b09e      	sub	sp, #120	; 0x78
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
 8002f78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d101      	bne.n	8002f88 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002f84:	2301      	movs	r3, #1
 8002f86:	e162      	b.n	800324e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002f88:	4b90      	ldr	r3, [pc, #576]	; (80031cc <HAL_RCC_ClockConfig+0x25c>)
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f003 0307 	and.w	r3, r3, #7
 8002f90:	683a      	ldr	r2, [r7, #0]
 8002f92:	429a      	cmp	r2, r3
 8002f94:	d910      	bls.n	8002fb8 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f96:	4b8d      	ldr	r3, [pc, #564]	; (80031cc <HAL_RCC_ClockConfig+0x25c>)
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f023 0207 	bic.w	r2, r3, #7
 8002f9e:	498b      	ldr	r1, [pc, #556]	; (80031cc <HAL_RCC_ClockConfig+0x25c>)
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	4313      	orrs	r3, r2
 8002fa4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fa6:	4b89      	ldr	r3, [pc, #548]	; (80031cc <HAL_RCC_ClockConfig+0x25c>)
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f003 0307 	and.w	r3, r3, #7
 8002fae:	683a      	ldr	r2, [r7, #0]
 8002fb0:	429a      	cmp	r2, r3
 8002fb2:	d001      	beq.n	8002fb8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002fb4:	2301      	movs	r3, #1
 8002fb6:	e14a      	b.n	800324e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f003 0302 	and.w	r3, r3, #2
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d008      	beq.n	8002fd6 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002fc4:	4b82      	ldr	r3, [pc, #520]	; (80031d0 <HAL_RCC_ClockConfig+0x260>)
 8002fc6:	685b      	ldr	r3, [r3, #4]
 8002fc8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	689b      	ldr	r3, [r3, #8]
 8002fd0:	497f      	ldr	r1, [pc, #508]	; (80031d0 <HAL_RCC_ClockConfig+0x260>)
 8002fd2:	4313      	orrs	r3, r2
 8002fd4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f003 0301 	and.w	r3, r3, #1
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	f000 80dc 	beq.w	800319c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	685b      	ldr	r3, [r3, #4]
 8002fe8:	2b01      	cmp	r3, #1
 8002fea:	d13c      	bne.n	8003066 <HAL_RCC_ClockConfig+0xf6>
 8002fec:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002ff0:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ff2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002ff4:	fa93 f3a3 	rbit	r3, r3
 8002ff8:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002ffa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ffc:	fab3 f383 	clz	r3, r3
 8003000:	b2db      	uxtb	r3, r3
 8003002:	095b      	lsrs	r3, r3, #5
 8003004:	b2db      	uxtb	r3, r3
 8003006:	f043 0301 	orr.w	r3, r3, #1
 800300a:	b2db      	uxtb	r3, r3
 800300c:	2b01      	cmp	r3, #1
 800300e:	d102      	bne.n	8003016 <HAL_RCC_ClockConfig+0xa6>
 8003010:	4b6f      	ldr	r3, [pc, #444]	; (80031d0 <HAL_RCC_ClockConfig+0x260>)
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	e00f      	b.n	8003036 <HAL_RCC_ClockConfig+0xc6>
 8003016:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800301a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800301c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800301e:	fa93 f3a3 	rbit	r3, r3
 8003022:	667b      	str	r3, [r7, #100]	; 0x64
 8003024:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003028:	663b      	str	r3, [r7, #96]	; 0x60
 800302a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800302c:	fa93 f3a3 	rbit	r3, r3
 8003030:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003032:	4b67      	ldr	r3, [pc, #412]	; (80031d0 <HAL_RCC_ClockConfig+0x260>)
 8003034:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003036:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800303a:	65ba      	str	r2, [r7, #88]	; 0x58
 800303c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800303e:	fa92 f2a2 	rbit	r2, r2
 8003042:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8003044:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003046:	fab2 f282 	clz	r2, r2
 800304a:	b2d2      	uxtb	r2, r2
 800304c:	f042 0220 	orr.w	r2, r2, #32
 8003050:	b2d2      	uxtb	r2, r2
 8003052:	f002 021f 	and.w	r2, r2, #31
 8003056:	2101      	movs	r1, #1
 8003058:	fa01 f202 	lsl.w	r2, r1, r2
 800305c:	4013      	ands	r3, r2
 800305e:	2b00      	cmp	r3, #0
 8003060:	d17b      	bne.n	800315a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003062:	2301      	movs	r3, #1
 8003064:	e0f3      	b.n	800324e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	685b      	ldr	r3, [r3, #4]
 800306a:	2b02      	cmp	r3, #2
 800306c:	d13c      	bne.n	80030e8 <HAL_RCC_ClockConfig+0x178>
 800306e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003072:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003074:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003076:	fa93 f3a3 	rbit	r3, r3
 800307a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800307c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800307e:	fab3 f383 	clz	r3, r3
 8003082:	b2db      	uxtb	r3, r3
 8003084:	095b      	lsrs	r3, r3, #5
 8003086:	b2db      	uxtb	r3, r3
 8003088:	f043 0301 	orr.w	r3, r3, #1
 800308c:	b2db      	uxtb	r3, r3
 800308e:	2b01      	cmp	r3, #1
 8003090:	d102      	bne.n	8003098 <HAL_RCC_ClockConfig+0x128>
 8003092:	4b4f      	ldr	r3, [pc, #316]	; (80031d0 <HAL_RCC_ClockConfig+0x260>)
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	e00f      	b.n	80030b8 <HAL_RCC_ClockConfig+0x148>
 8003098:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800309c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800309e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80030a0:	fa93 f3a3 	rbit	r3, r3
 80030a4:	647b      	str	r3, [r7, #68]	; 0x44
 80030a6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80030aa:	643b      	str	r3, [r7, #64]	; 0x40
 80030ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80030ae:	fa93 f3a3 	rbit	r3, r3
 80030b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80030b4:	4b46      	ldr	r3, [pc, #280]	; (80031d0 <HAL_RCC_ClockConfig+0x260>)
 80030b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030b8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80030bc:	63ba      	str	r2, [r7, #56]	; 0x38
 80030be:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80030c0:	fa92 f2a2 	rbit	r2, r2
 80030c4:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80030c6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80030c8:	fab2 f282 	clz	r2, r2
 80030cc:	b2d2      	uxtb	r2, r2
 80030ce:	f042 0220 	orr.w	r2, r2, #32
 80030d2:	b2d2      	uxtb	r2, r2
 80030d4:	f002 021f 	and.w	r2, r2, #31
 80030d8:	2101      	movs	r1, #1
 80030da:	fa01 f202 	lsl.w	r2, r1, r2
 80030de:	4013      	ands	r3, r2
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d13a      	bne.n	800315a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80030e4:	2301      	movs	r3, #1
 80030e6:	e0b2      	b.n	800324e <HAL_RCC_ClockConfig+0x2de>
 80030e8:	2302      	movs	r3, #2
 80030ea:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030ee:	fa93 f3a3 	rbit	r3, r3
 80030f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80030f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030f6:	fab3 f383 	clz	r3, r3
 80030fa:	b2db      	uxtb	r3, r3
 80030fc:	095b      	lsrs	r3, r3, #5
 80030fe:	b2db      	uxtb	r3, r3
 8003100:	f043 0301 	orr.w	r3, r3, #1
 8003104:	b2db      	uxtb	r3, r3
 8003106:	2b01      	cmp	r3, #1
 8003108:	d102      	bne.n	8003110 <HAL_RCC_ClockConfig+0x1a0>
 800310a:	4b31      	ldr	r3, [pc, #196]	; (80031d0 <HAL_RCC_ClockConfig+0x260>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	e00d      	b.n	800312c <HAL_RCC_ClockConfig+0x1bc>
 8003110:	2302      	movs	r3, #2
 8003112:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003114:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003116:	fa93 f3a3 	rbit	r3, r3
 800311a:	627b      	str	r3, [r7, #36]	; 0x24
 800311c:	2302      	movs	r3, #2
 800311e:	623b      	str	r3, [r7, #32]
 8003120:	6a3b      	ldr	r3, [r7, #32]
 8003122:	fa93 f3a3 	rbit	r3, r3
 8003126:	61fb      	str	r3, [r7, #28]
 8003128:	4b29      	ldr	r3, [pc, #164]	; (80031d0 <HAL_RCC_ClockConfig+0x260>)
 800312a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800312c:	2202      	movs	r2, #2
 800312e:	61ba      	str	r2, [r7, #24]
 8003130:	69ba      	ldr	r2, [r7, #24]
 8003132:	fa92 f2a2 	rbit	r2, r2
 8003136:	617a      	str	r2, [r7, #20]
  return result;
 8003138:	697a      	ldr	r2, [r7, #20]
 800313a:	fab2 f282 	clz	r2, r2
 800313e:	b2d2      	uxtb	r2, r2
 8003140:	f042 0220 	orr.w	r2, r2, #32
 8003144:	b2d2      	uxtb	r2, r2
 8003146:	f002 021f 	and.w	r2, r2, #31
 800314a:	2101      	movs	r1, #1
 800314c:	fa01 f202 	lsl.w	r2, r1, r2
 8003150:	4013      	ands	r3, r2
 8003152:	2b00      	cmp	r3, #0
 8003154:	d101      	bne.n	800315a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003156:	2301      	movs	r3, #1
 8003158:	e079      	b.n	800324e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800315a:	4b1d      	ldr	r3, [pc, #116]	; (80031d0 <HAL_RCC_ClockConfig+0x260>)
 800315c:	685b      	ldr	r3, [r3, #4]
 800315e:	f023 0203 	bic.w	r2, r3, #3
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	685b      	ldr	r3, [r3, #4]
 8003166:	491a      	ldr	r1, [pc, #104]	; (80031d0 <HAL_RCC_ClockConfig+0x260>)
 8003168:	4313      	orrs	r3, r2
 800316a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800316c:	f7fe fbba 	bl	80018e4 <HAL_GetTick>
 8003170:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003172:	e00a      	b.n	800318a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003174:	f7fe fbb6 	bl	80018e4 <HAL_GetTick>
 8003178:	4602      	mov	r2, r0
 800317a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800317c:	1ad3      	subs	r3, r2, r3
 800317e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003182:	4293      	cmp	r3, r2
 8003184:	d901      	bls.n	800318a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8003186:	2303      	movs	r3, #3
 8003188:	e061      	b.n	800324e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800318a:	4b11      	ldr	r3, [pc, #68]	; (80031d0 <HAL_RCC_ClockConfig+0x260>)
 800318c:	685b      	ldr	r3, [r3, #4]
 800318e:	f003 020c 	and.w	r2, r3, #12
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	685b      	ldr	r3, [r3, #4]
 8003196:	009b      	lsls	r3, r3, #2
 8003198:	429a      	cmp	r2, r3
 800319a:	d1eb      	bne.n	8003174 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800319c:	4b0b      	ldr	r3, [pc, #44]	; (80031cc <HAL_RCC_ClockConfig+0x25c>)
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f003 0307 	and.w	r3, r3, #7
 80031a4:	683a      	ldr	r2, [r7, #0]
 80031a6:	429a      	cmp	r2, r3
 80031a8:	d214      	bcs.n	80031d4 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031aa:	4b08      	ldr	r3, [pc, #32]	; (80031cc <HAL_RCC_ClockConfig+0x25c>)
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f023 0207 	bic.w	r2, r3, #7
 80031b2:	4906      	ldr	r1, [pc, #24]	; (80031cc <HAL_RCC_ClockConfig+0x25c>)
 80031b4:	683b      	ldr	r3, [r7, #0]
 80031b6:	4313      	orrs	r3, r2
 80031b8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80031ba:	4b04      	ldr	r3, [pc, #16]	; (80031cc <HAL_RCC_ClockConfig+0x25c>)
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f003 0307 	and.w	r3, r3, #7
 80031c2:	683a      	ldr	r2, [r7, #0]
 80031c4:	429a      	cmp	r2, r3
 80031c6:	d005      	beq.n	80031d4 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80031c8:	2301      	movs	r3, #1
 80031ca:	e040      	b.n	800324e <HAL_RCC_ClockConfig+0x2de>
 80031cc:	40022000 	.word	0x40022000
 80031d0:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f003 0304 	and.w	r3, r3, #4
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d008      	beq.n	80031f2 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80031e0:	4b1d      	ldr	r3, [pc, #116]	; (8003258 <HAL_RCC_ClockConfig+0x2e8>)
 80031e2:	685b      	ldr	r3, [r3, #4]
 80031e4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	68db      	ldr	r3, [r3, #12]
 80031ec:	491a      	ldr	r1, [pc, #104]	; (8003258 <HAL_RCC_ClockConfig+0x2e8>)
 80031ee:	4313      	orrs	r3, r2
 80031f0:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f003 0308 	and.w	r3, r3, #8
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d009      	beq.n	8003212 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80031fe:	4b16      	ldr	r3, [pc, #88]	; (8003258 <HAL_RCC_ClockConfig+0x2e8>)
 8003200:	685b      	ldr	r3, [r3, #4]
 8003202:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	691b      	ldr	r3, [r3, #16]
 800320a:	00db      	lsls	r3, r3, #3
 800320c:	4912      	ldr	r1, [pc, #72]	; (8003258 <HAL_RCC_ClockConfig+0x2e8>)
 800320e:	4313      	orrs	r3, r2
 8003210:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003212:	f000 f829 	bl	8003268 <HAL_RCC_GetSysClockFreq>
 8003216:	4601      	mov	r1, r0
 8003218:	4b0f      	ldr	r3, [pc, #60]	; (8003258 <HAL_RCC_ClockConfig+0x2e8>)
 800321a:	685b      	ldr	r3, [r3, #4]
 800321c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003220:	22f0      	movs	r2, #240	; 0xf0
 8003222:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003224:	693a      	ldr	r2, [r7, #16]
 8003226:	fa92 f2a2 	rbit	r2, r2
 800322a:	60fa      	str	r2, [r7, #12]
  return result;
 800322c:	68fa      	ldr	r2, [r7, #12]
 800322e:	fab2 f282 	clz	r2, r2
 8003232:	b2d2      	uxtb	r2, r2
 8003234:	40d3      	lsrs	r3, r2
 8003236:	4a09      	ldr	r2, [pc, #36]	; (800325c <HAL_RCC_ClockConfig+0x2ec>)
 8003238:	5cd3      	ldrb	r3, [r2, r3]
 800323a:	fa21 f303 	lsr.w	r3, r1, r3
 800323e:	4a08      	ldr	r2, [pc, #32]	; (8003260 <HAL_RCC_ClockConfig+0x2f0>)
 8003240:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003242:	4b08      	ldr	r3, [pc, #32]	; (8003264 <HAL_RCC_ClockConfig+0x2f4>)
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	4618      	mov	r0, r3
 8003248:	f7fe fb08 	bl	800185c <HAL_InitTick>
  
  return HAL_OK;
 800324c:	2300      	movs	r3, #0
}
 800324e:	4618      	mov	r0, r3
 8003250:	3778      	adds	r7, #120	; 0x78
 8003252:	46bd      	mov	sp, r7
 8003254:	bd80      	pop	{r7, pc}
 8003256:	bf00      	nop
 8003258:	40021000 	.word	0x40021000
 800325c:	08009214 	.word	0x08009214
 8003260:	20000008 	.word	0x20000008
 8003264:	2000000c 	.word	0x2000000c

08003268 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003268:	b480      	push	{r7}
 800326a:	b08b      	sub	sp, #44	; 0x2c
 800326c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800326e:	2300      	movs	r3, #0
 8003270:	61fb      	str	r3, [r7, #28]
 8003272:	2300      	movs	r3, #0
 8003274:	61bb      	str	r3, [r7, #24]
 8003276:	2300      	movs	r3, #0
 8003278:	627b      	str	r3, [r7, #36]	; 0x24
 800327a:	2300      	movs	r3, #0
 800327c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800327e:	2300      	movs	r3, #0
 8003280:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8003282:	4b29      	ldr	r3, [pc, #164]	; (8003328 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003284:	685b      	ldr	r3, [r3, #4]
 8003286:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003288:	69fb      	ldr	r3, [r7, #28]
 800328a:	f003 030c 	and.w	r3, r3, #12
 800328e:	2b04      	cmp	r3, #4
 8003290:	d002      	beq.n	8003298 <HAL_RCC_GetSysClockFreq+0x30>
 8003292:	2b08      	cmp	r3, #8
 8003294:	d003      	beq.n	800329e <HAL_RCC_GetSysClockFreq+0x36>
 8003296:	e03c      	b.n	8003312 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003298:	4b24      	ldr	r3, [pc, #144]	; (800332c <HAL_RCC_GetSysClockFreq+0xc4>)
 800329a:	623b      	str	r3, [r7, #32]
      break;
 800329c:	e03c      	b.n	8003318 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800329e:	69fb      	ldr	r3, [r7, #28]
 80032a0:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80032a4:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80032a8:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032aa:	68ba      	ldr	r2, [r7, #8]
 80032ac:	fa92 f2a2 	rbit	r2, r2
 80032b0:	607a      	str	r2, [r7, #4]
  return result;
 80032b2:	687a      	ldr	r2, [r7, #4]
 80032b4:	fab2 f282 	clz	r2, r2
 80032b8:	b2d2      	uxtb	r2, r2
 80032ba:	40d3      	lsrs	r3, r2
 80032bc:	4a1c      	ldr	r2, [pc, #112]	; (8003330 <HAL_RCC_GetSysClockFreq+0xc8>)
 80032be:	5cd3      	ldrb	r3, [r2, r3]
 80032c0:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80032c2:	4b19      	ldr	r3, [pc, #100]	; (8003328 <HAL_RCC_GetSysClockFreq+0xc0>)
 80032c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032c6:	f003 030f 	and.w	r3, r3, #15
 80032ca:	220f      	movs	r2, #15
 80032cc:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032ce:	693a      	ldr	r2, [r7, #16]
 80032d0:	fa92 f2a2 	rbit	r2, r2
 80032d4:	60fa      	str	r2, [r7, #12]
  return result;
 80032d6:	68fa      	ldr	r2, [r7, #12]
 80032d8:	fab2 f282 	clz	r2, r2
 80032dc:	b2d2      	uxtb	r2, r2
 80032de:	40d3      	lsrs	r3, r2
 80032e0:	4a14      	ldr	r2, [pc, #80]	; (8003334 <HAL_RCC_GetSysClockFreq+0xcc>)
 80032e2:	5cd3      	ldrb	r3, [r2, r3]
 80032e4:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80032e6:	69fb      	ldr	r3, [r7, #28]
 80032e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d008      	beq.n	8003302 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80032f0:	4a0e      	ldr	r2, [pc, #56]	; (800332c <HAL_RCC_GetSysClockFreq+0xc4>)
 80032f2:	69bb      	ldr	r3, [r7, #24]
 80032f4:	fbb2 f2f3 	udiv	r2, r2, r3
 80032f8:	697b      	ldr	r3, [r7, #20]
 80032fa:	fb02 f303 	mul.w	r3, r2, r3
 80032fe:	627b      	str	r3, [r7, #36]	; 0x24
 8003300:	e004      	b.n	800330c <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8003302:	697b      	ldr	r3, [r7, #20]
 8003304:	4a0c      	ldr	r2, [pc, #48]	; (8003338 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003306:	fb02 f303 	mul.w	r3, r2, r3
 800330a:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 800330c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800330e:	623b      	str	r3, [r7, #32]
      break;
 8003310:	e002      	b.n	8003318 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003312:	4b06      	ldr	r3, [pc, #24]	; (800332c <HAL_RCC_GetSysClockFreq+0xc4>)
 8003314:	623b      	str	r3, [r7, #32]
      break;
 8003316:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003318:	6a3b      	ldr	r3, [r7, #32]
}
 800331a:	4618      	mov	r0, r3
 800331c:	372c      	adds	r7, #44	; 0x2c
 800331e:	46bd      	mov	sp, r7
 8003320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003324:	4770      	bx	lr
 8003326:	bf00      	nop
 8003328:	40021000 	.word	0x40021000
 800332c:	007a1200 	.word	0x007a1200
 8003330:	0800922c 	.word	0x0800922c
 8003334:	0800923c 	.word	0x0800923c
 8003338:	003d0900 	.word	0x003d0900

0800333c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800333c:	b480      	push	{r7}
 800333e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003340:	4b03      	ldr	r3, [pc, #12]	; (8003350 <HAL_RCC_GetHCLKFreq+0x14>)
 8003342:	681b      	ldr	r3, [r3, #0]
}
 8003344:	4618      	mov	r0, r3
 8003346:	46bd      	mov	sp, r7
 8003348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334c:	4770      	bx	lr
 800334e:	bf00      	nop
 8003350:	20000008 	.word	0x20000008

08003354 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003354:	b580      	push	{r7, lr}
 8003356:	b082      	sub	sp, #8
 8003358:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800335a:	f7ff ffef 	bl	800333c <HAL_RCC_GetHCLKFreq>
 800335e:	4601      	mov	r1, r0
 8003360:	4b0b      	ldr	r3, [pc, #44]	; (8003390 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8003362:	685b      	ldr	r3, [r3, #4]
 8003364:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003368:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800336c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800336e:	687a      	ldr	r2, [r7, #4]
 8003370:	fa92 f2a2 	rbit	r2, r2
 8003374:	603a      	str	r2, [r7, #0]
  return result;
 8003376:	683a      	ldr	r2, [r7, #0]
 8003378:	fab2 f282 	clz	r2, r2
 800337c:	b2d2      	uxtb	r2, r2
 800337e:	40d3      	lsrs	r3, r2
 8003380:	4a04      	ldr	r2, [pc, #16]	; (8003394 <HAL_RCC_GetPCLK1Freq+0x40>)
 8003382:	5cd3      	ldrb	r3, [r2, r3]
 8003384:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8003388:	4618      	mov	r0, r3
 800338a:	3708      	adds	r7, #8
 800338c:	46bd      	mov	sp, r7
 800338e:	bd80      	pop	{r7, pc}
 8003390:	40021000 	.word	0x40021000
 8003394:	08009224 	.word	0x08009224

08003398 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	b082      	sub	sp, #8
 800339c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800339e:	f7ff ffcd 	bl	800333c <HAL_RCC_GetHCLKFreq>
 80033a2:	4601      	mov	r1, r0
 80033a4:	4b0b      	ldr	r3, [pc, #44]	; (80033d4 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80033a6:	685b      	ldr	r3, [r3, #4]
 80033a8:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80033ac:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80033b0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033b2:	687a      	ldr	r2, [r7, #4]
 80033b4:	fa92 f2a2 	rbit	r2, r2
 80033b8:	603a      	str	r2, [r7, #0]
  return result;
 80033ba:	683a      	ldr	r2, [r7, #0]
 80033bc:	fab2 f282 	clz	r2, r2
 80033c0:	b2d2      	uxtb	r2, r2
 80033c2:	40d3      	lsrs	r3, r2
 80033c4:	4a04      	ldr	r2, [pc, #16]	; (80033d8 <HAL_RCC_GetPCLK2Freq+0x40>)
 80033c6:	5cd3      	ldrb	r3, [r2, r3]
 80033c8:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80033cc:	4618      	mov	r0, r3
 80033ce:	3708      	adds	r7, #8
 80033d0:	46bd      	mov	sp, r7
 80033d2:	bd80      	pop	{r7, pc}
 80033d4:	40021000 	.word	0x40021000
 80033d8:	08009224 	.word	0x08009224

080033dc <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	b092      	sub	sp, #72	; 0x48
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80033e4:	2300      	movs	r3, #0
 80033e6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80033e8:	2300      	movs	r3, #0
 80033ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80033ec:	2300      	movs	r3, #0
 80033ee:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	f000 80d4 	beq.w	80035a8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003400:	4b4e      	ldr	r3, [pc, #312]	; (800353c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003402:	69db      	ldr	r3, [r3, #28]
 8003404:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003408:	2b00      	cmp	r3, #0
 800340a:	d10e      	bne.n	800342a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800340c:	4b4b      	ldr	r3, [pc, #300]	; (800353c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800340e:	69db      	ldr	r3, [r3, #28]
 8003410:	4a4a      	ldr	r2, [pc, #296]	; (800353c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003412:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003416:	61d3      	str	r3, [r2, #28]
 8003418:	4b48      	ldr	r3, [pc, #288]	; (800353c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800341a:	69db      	ldr	r3, [r3, #28]
 800341c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003420:	60bb      	str	r3, [r7, #8]
 8003422:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003424:	2301      	movs	r3, #1
 8003426:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800342a:	4b45      	ldr	r3, [pc, #276]	; (8003540 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003432:	2b00      	cmp	r3, #0
 8003434:	d118      	bne.n	8003468 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003436:	4b42      	ldr	r3, [pc, #264]	; (8003540 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	4a41      	ldr	r2, [pc, #260]	; (8003540 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800343c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003440:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003442:	f7fe fa4f 	bl	80018e4 <HAL_GetTick>
 8003446:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003448:	e008      	b.n	800345c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800344a:	f7fe fa4b 	bl	80018e4 <HAL_GetTick>
 800344e:	4602      	mov	r2, r0
 8003450:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003452:	1ad3      	subs	r3, r2, r3
 8003454:	2b64      	cmp	r3, #100	; 0x64
 8003456:	d901      	bls.n	800345c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003458:	2303      	movs	r3, #3
 800345a:	e13c      	b.n	80036d6 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800345c:	4b38      	ldr	r3, [pc, #224]	; (8003540 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003464:	2b00      	cmp	r3, #0
 8003466:	d0f0      	beq.n	800344a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003468:	4b34      	ldr	r3, [pc, #208]	; (800353c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800346a:	6a1b      	ldr	r3, [r3, #32]
 800346c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003470:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003472:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003474:	2b00      	cmp	r3, #0
 8003476:	f000 8084 	beq.w	8003582 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	685b      	ldr	r3, [r3, #4]
 800347e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003482:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003484:	429a      	cmp	r2, r3
 8003486:	d07c      	beq.n	8003582 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003488:	4b2c      	ldr	r3, [pc, #176]	; (800353c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800348a:	6a1b      	ldr	r3, [r3, #32]
 800348c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003490:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003492:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003496:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003498:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800349a:	fa93 f3a3 	rbit	r3, r3
 800349e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80034a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80034a2:	fab3 f383 	clz	r3, r3
 80034a6:	b2db      	uxtb	r3, r3
 80034a8:	461a      	mov	r2, r3
 80034aa:	4b26      	ldr	r3, [pc, #152]	; (8003544 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80034ac:	4413      	add	r3, r2
 80034ae:	009b      	lsls	r3, r3, #2
 80034b0:	461a      	mov	r2, r3
 80034b2:	2301      	movs	r3, #1
 80034b4:	6013      	str	r3, [r2, #0]
 80034b6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80034ba:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034be:	fa93 f3a3 	rbit	r3, r3
 80034c2:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80034c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80034c6:	fab3 f383 	clz	r3, r3
 80034ca:	b2db      	uxtb	r3, r3
 80034cc:	461a      	mov	r2, r3
 80034ce:	4b1d      	ldr	r3, [pc, #116]	; (8003544 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80034d0:	4413      	add	r3, r2
 80034d2:	009b      	lsls	r3, r3, #2
 80034d4:	461a      	mov	r2, r3
 80034d6:	2300      	movs	r3, #0
 80034d8:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80034da:	4a18      	ldr	r2, [pc, #96]	; (800353c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80034de:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80034e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80034e2:	f003 0301 	and.w	r3, r3, #1
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d04b      	beq.n	8003582 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034ea:	f7fe f9fb 	bl	80018e4 <HAL_GetTick>
 80034ee:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034f0:	e00a      	b.n	8003508 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034f2:	f7fe f9f7 	bl	80018e4 <HAL_GetTick>
 80034f6:	4602      	mov	r2, r0
 80034f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80034fa:	1ad3      	subs	r3, r2, r3
 80034fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003500:	4293      	cmp	r3, r2
 8003502:	d901      	bls.n	8003508 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8003504:	2303      	movs	r3, #3
 8003506:	e0e6      	b.n	80036d6 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
 8003508:	2302      	movs	r3, #2
 800350a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800350c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800350e:	fa93 f3a3 	rbit	r3, r3
 8003512:	627b      	str	r3, [r7, #36]	; 0x24
 8003514:	2302      	movs	r3, #2
 8003516:	623b      	str	r3, [r7, #32]
 8003518:	6a3b      	ldr	r3, [r7, #32]
 800351a:	fa93 f3a3 	rbit	r3, r3
 800351e:	61fb      	str	r3, [r7, #28]
  return result;
 8003520:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003522:	fab3 f383 	clz	r3, r3
 8003526:	b2db      	uxtb	r3, r3
 8003528:	095b      	lsrs	r3, r3, #5
 800352a:	b2db      	uxtb	r3, r3
 800352c:	f043 0302 	orr.w	r3, r3, #2
 8003530:	b2db      	uxtb	r3, r3
 8003532:	2b02      	cmp	r3, #2
 8003534:	d108      	bne.n	8003548 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8003536:	4b01      	ldr	r3, [pc, #4]	; (800353c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003538:	6a1b      	ldr	r3, [r3, #32]
 800353a:	e00d      	b.n	8003558 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 800353c:	40021000 	.word	0x40021000
 8003540:	40007000 	.word	0x40007000
 8003544:	10908100 	.word	0x10908100
 8003548:	2302      	movs	r3, #2
 800354a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800354c:	69bb      	ldr	r3, [r7, #24]
 800354e:	fa93 f3a3 	rbit	r3, r3
 8003552:	617b      	str	r3, [r7, #20]
 8003554:	4b62      	ldr	r3, [pc, #392]	; (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003556:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003558:	2202      	movs	r2, #2
 800355a:	613a      	str	r2, [r7, #16]
 800355c:	693a      	ldr	r2, [r7, #16]
 800355e:	fa92 f2a2 	rbit	r2, r2
 8003562:	60fa      	str	r2, [r7, #12]
  return result;
 8003564:	68fa      	ldr	r2, [r7, #12]
 8003566:	fab2 f282 	clz	r2, r2
 800356a:	b2d2      	uxtb	r2, r2
 800356c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003570:	b2d2      	uxtb	r2, r2
 8003572:	f002 021f 	and.w	r2, r2, #31
 8003576:	2101      	movs	r1, #1
 8003578:	fa01 f202 	lsl.w	r2, r1, r2
 800357c:	4013      	ands	r3, r2
 800357e:	2b00      	cmp	r3, #0
 8003580:	d0b7      	beq.n	80034f2 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003582:	4b57      	ldr	r3, [pc, #348]	; (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003584:	6a1b      	ldr	r3, [r3, #32]
 8003586:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	685b      	ldr	r3, [r3, #4]
 800358e:	4954      	ldr	r1, [pc, #336]	; (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003590:	4313      	orrs	r3, r2
 8003592:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003594:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003598:	2b01      	cmp	r3, #1
 800359a:	d105      	bne.n	80035a8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800359c:	4b50      	ldr	r3, [pc, #320]	; (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800359e:	69db      	ldr	r3, [r3, #28]
 80035a0:	4a4f      	ldr	r2, [pc, #316]	; (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80035a2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80035a6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f003 0301 	and.w	r3, r3, #1
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d008      	beq.n	80035c6 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80035b4:	4b4a      	ldr	r3, [pc, #296]	; (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80035b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035b8:	f023 0203 	bic.w	r2, r3, #3
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	689b      	ldr	r3, [r3, #8]
 80035c0:	4947      	ldr	r1, [pc, #284]	; (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80035c2:	4313      	orrs	r3, r2
 80035c4:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f003 0320 	and.w	r3, r3, #32
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d008      	beq.n	80035e4 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80035d2:	4b43      	ldr	r3, [pc, #268]	; (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80035d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035d6:	f023 0210 	bic.w	r2, r3, #16
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	68db      	ldr	r3, [r3, #12]
 80035de:	4940      	ldr	r1, [pc, #256]	; (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80035e0:	4313      	orrs	r3, r2
 80035e2:	630b      	str	r3, [r1, #48]	; 0x30
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d008      	beq.n	8003602 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80035f0:	4b3b      	ldr	r3, [pc, #236]	; (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80035f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035f4:	f023 0220 	bic.w	r2, r3, #32
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	691b      	ldr	r3, [r3, #16]
 80035fc:	4938      	ldr	r1, [pc, #224]	; (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80035fe:	4313      	orrs	r3, r2
 8003600:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800360a:	2b00      	cmp	r3, #0
 800360c:	d008      	beq.n	8003620 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800360e:	4b34      	ldr	r3, [pc, #208]	; (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003612:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	695b      	ldr	r3, [r3, #20]
 800361a:	4931      	ldr	r1, [pc, #196]	; (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800361c:	4313      	orrs	r3, r2
 800361e:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003628:	2b00      	cmp	r3, #0
 800362a:	d008      	beq.n	800363e <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800362c:	4b2c      	ldr	r3, [pc, #176]	; (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800362e:	685b      	ldr	r3, [r3, #4]
 8003630:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	69db      	ldr	r3, [r3, #28]
 8003638:	4929      	ldr	r1, [pc, #164]	; (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800363a:	4313      	orrs	r3, r2
 800363c:	604b      	str	r3, [r1, #4]
       /* STM32F301x8 || STM32F302x8 || STM32F318xx    */
  
#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
      
  /*------------------------------ ADC1 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC1) == RCC_PERIPHCLK_ADC1)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003646:	2b00      	cmp	r3, #0
 8003648:	d008      	beq.n	800365c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC1PLLCLK_DIV(PeriphClkInit->Adc1ClockSelection));
    
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC1_CONFIG(PeriphClkInit->Adc1ClockSelection);
 800364a:	4b25      	ldr	r3, [pc, #148]	; (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800364c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800364e:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	699b      	ldr	r3, [r3, #24]
 8003656:	4922      	ldr	r1, [pc, #136]	; (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003658:	4313      	orrs	r3, r2
 800365a:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003664:	2b00      	cmp	r3, #0
 8003666:	d008      	beq.n	800367a <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003668:	4b1d      	ldr	r3, [pc, #116]	; (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800366a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800366c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	6a1b      	ldr	r3, [r3, #32]
 8003674:	491a      	ldr	r1, [pc, #104]	; (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003676:	4313      	orrs	r3, r2
 8003678:	630b      	str	r3, [r1, #48]	; 0x30
       /* STM32F303xC || STM32F358xx    */

#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM15 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003682:	2b00      	cmp	r3, #0
 8003684:	d008      	beq.n	8003698 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8003686:	4b16      	ldr	r3, [pc, #88]	; (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800368a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003692:	4913      	ldr	r1, [pc, #76]	; (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003694:	4313      	orrs	r3, r2
 8003696:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d008      	beq.n	80036b6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the TIM16 clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 80036a4:	4b0e      	ldr	r3, [pc, #56]	; (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80036a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036a8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036b0:	490b      	ldr	r1, [pc, #44]	; (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80036b2:	4313      	orrs	r3, r2
 80036b4:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d008      	beq.n	80036d4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the TIM17 clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 80036c2:	4b07      	ldr	r3, [pc, #28]	; (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80036c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036c6:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036ce:	4904      	ldr	r1, [pc, #16]	; (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80036d0:	4313      	orrs	r3, r2
 80036d2:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80036d4:	2300      	movs	r3, #0
}
 80036d6:	4618      	mov	r0, r3
 80036d8:	3748      	adds	r7, #72	; 0x48
 80036da:	46bd      	mov	sp, r7
 80036dc:	bd80      	pop	{r7, pc}
 80036de:	bf00      	nop
 80036e0:	40021000 	.word	0x40021000

080036e4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b084      	sub	sp, #16
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d101      	bne.n	80036f6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80036f2:	2301      	movs	r3, #1
 80036f4:	e09d      	b.n	8003832 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d108      	bne.n	8003710 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	685b      	ldr	r3, [r3, #4]
 8003702:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003706:	d009      	beq.n	800371c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2200      	movs	r2, #0
 800370c:	61da      	str	r2, [r3, #28]
 800370e:	e005      	b.n	800371c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2200      	movs	r2, #0
 8003714:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	2200      	movs	r2, #0
 800371a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2200      	movs	r2, #0
 8003720:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003728:	b2db      	uxtb	r3, r3
 800372a:	2b00      	cmp	r3, #0
 800372c:	d106      	bne.n	800373c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	2200      	movs	r2, #0
 8003732:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003736:	6878      	ldr	r0, [r7, #4]
 8003738:	f7fd fe66 	bl	8001408 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2202      	movs	r2, #2
 8003740:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	681a      	ldr	r2, [r3, #0]
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003752:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	68db      	ldr	r3, [r3, #12]
 8003758:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800375c:	d902      	bls.n	8003764 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800375e:	2300      	movs	r3, #0
 8003760:	60fb      	str	r3, [r7, #12]
 8003762:	e002      	b.n	800376a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003764:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003768:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	68db      	ldr	r3, [r3, #12]
 800376e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003772:	d007      	beq.n	8003784 <HAL_SPI_Init+0xa0>
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	68db      	ldr	r3, [r3, #12]
 8003778:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800377c:	d002      	beq.n	8003784 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	2200      	movs	r2, #0
 8003782:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	685b      	ldr	r3, [r3, #4]
 8003788:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	689b      	ldr	r3, [r3, #8]
 8003790:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003794:	431a      	orrs	r2, r3
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	691b      	ldr	r3, [r3, #16]
 800379a:	f003 0302 	and.w	r3, r3, #2
 800379e:	431a      	orrs	r2, r3
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	695b      	ldr	r3, [r3, #20]
 80037a4:	f003 0301 	and.w	r3, r3, #1
 80037a8:	431a      	orrs	r2, r3
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	699b      	ldr	r3, [r3, #24]
 80037ae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80037b2:	431a      	orrs	r2, r3
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	69db      	ldr	r3, [r3, #28]
 80037b8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80037bc:	431a      	orrs	r2, r3
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6a1b      	ldr	r3, [r3, #32]
 80037c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037c6:	ea42 0103 	orr.w	r1, r2, r3
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037ce:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	430a      	orrs	r2, r1
 80037d8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	699b      	ldr	r3, [r3, #24]
 80037de:	0c1b      	lsrs	r3, r3, #16
 80037e0:	f003 0204 	and.w	r2, r3, #4
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037e8:	f003 0310 	and.w	r3, r3, #16
 80037ec:	431a      	orrs	r2, r3
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037f2:	f003 0308 	and.w	r3, r3, #8
 80037f6:	431a      	orrs	r2, r3
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	68db      	ldr	r3, [r3, #12]
 80037fc:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003800:	ea42 0103 	orr.w	r1, r2, r3
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	430a      	orrs	r2, r1
 8003810:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	69da      	ldr	r2, [r3, #28]
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003820:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	2200      	movs	r2, #0
 8003826:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2201      	movs	r2, #1
 800382c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003830:	2300      	movs	r3, #0
}
 8003832:	4618      	mov	r0, r3
 8003834:	3710      	adds	r7, #16
 8003836:	46bd      	mov	sp, r7
 8003838:	bd80      	pop	{r7, pc}

0800383a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800383a:	b580      	push	{r7, lr}
 800383c:	b088      	sub	sp, #32
 800383e:	af00      	add	r7, sp, #0
 8003840:	60f8      	str	r0, [r7, #12]
 8003842:	60b9      	str	r1, [r7, #8]
 8003844:	603b      	str	r3, [r7, #0]
 8003846:	4613      	mov	r3, r2
 8003848:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800384a:	2300      	movs	r3, #0
 800384c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003854:	2b01      	cmp	r3, #1
 8003856:	d101      	bne.n	800385c <HAL_SPI_Transmit+0x22>
 8003858:	2302      	movs	r3, #2
 800385a:	e15f      	b.n	8003b1c <HAL_SPI_Transmit+0x2e2>
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	2201      	movs	r2, #1
 8003860:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003864:	f7fe f83e 	bl	80018e4 <HAL_GetTick>
 8003868:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800386a:	88fb      	ldrh	r3, [r7, #6]
 800386c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003874:	b2db      	uxtb	r3, r3
 8003876:	2b01      	cmp	r3, #1
 8003878:	d002      	beq.n	8003880 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800387a:	2302      	movs	r3, #2
 800387c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800387e:	e148      	b.n	8003b12 <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 8003880:	68bb      	ldr	r3, [r7, #8]
 8003882:	2b00      	cmp	r3, #0
 8003884:	d002      	beq.n	800388c <HAL_SPI_Transmit+0x52>
 8003886:	88fb      	ldrh	r3, [r7, #6]
 8003888:	2b00      	cmp	r3, #0
 800388a:	d102      	bne.n	8003892 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800388c:	2301      	movs	r3, #1
 800388e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003890:	e13f      	b.n	8003b12 <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	2203      	movs	r2, #3
 8003896:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	2200      	movs	r2, #0
 800389e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	68ba      	ldr	r2, [r7, #8]
 80038a4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	88fa      	ldrh	r2, [r7, #6]
 80038aa:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	88fa      	ldrh	r2, [r7, #6]
 80038b0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	2200      	movs	r2, #0
 80038b6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	2200      	movs	r2, #0
 80038bc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	2200      	movs	r2, #0
 80038c4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	2200      	movs	r2, #0
 80038cc:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	2200      	movs	r2, #0
 80038d2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	689b      	ldr	r3, [r3, #8]
 80038d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80038dc:	d10f      	bne.n	80038fe <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	681a      	ldr	r2, [r3, #0]
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80038ec:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	681a      	ldr	r2, [r3, #0]
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80038fc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003908:	2b40      	cmp	r3, #64	; 0x40
 800390a:	d007      	beq.n	800391c <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	681a      	ldr	r2, [r3, #0]
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800391a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	68db      	ldr	r3, [r3, #12]
 8003920:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003924:	d94f      	bls.n	80039c6 <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	685b      	ldr	r3, [r3, #4]
 800392a:	2b00      	cmp	r3, #0
 800392c:	d002      	beq.n	8003934 <HAL_SPI_Transmit+0xfa>
 800392e:	8afb      	ldrh	r3, [r7, #22]
 8003930:	2b01      	cmp	r3, #1
 8003932:	d142      	bne.n	80039ba <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003938:	881a      	ldrh	r2, [r3, #0]
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003944:	1c9a      	adds	r2, r3, #2
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800394e:	b29b      	uxth	r3, r3
 8003950:	3b01      	subs	r3, #1
 8003952:	b29a      	uxth	r2, r3
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003958:	e02f      	b.n	80039ba <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	689b      	ldr	r3, [r3, #8]
 8003960:	f003 0302 	and.w	r3, r3, #2
 8003964:	2b02      	cmp	r3, #2
 8003966:	d112      	bne.n	800398e <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800396c:	881a      	ldrh	r2, [r3, #0]
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003978:	1c9a      	adds	r2, r3, #2
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003982:	b29b      	uxth	r3, r3
 8003984:	3b01      	subs	r3, #1
 8003986:	b29a      	uxth	r2, r3
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800398c:	e015      	b.n	80039ba <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800398e:	f7fd ffa9 	bl	80018e4 <HAL_GetTick>
 8003992:	4602      	mov	r2, r0
 8003994:	69bb      	ldr	r3, [r7, #24]
 8003996:	1ad3      	subs	r3, r2, r3
 8003998:	683a      	ldr	r2, [r7, #0]
 800399a:	429a      	cmp	r2, r3
 800399c:	d803      	bhi.n	80039a6 <HAL_SPI_Transmit+0x16c>
 800399e:	683b      	ldr	r3, [r7, #0]
 80039a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039a4:	d102      	bne.n	80039ac <HAL_SPI_Transmit+0x172>
 80039a6:	683b      	ldr	r3, [r7, #0]
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d106      	bne.n	80039ba <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 80039ac:	2303      	movs	r3, #3
 80039ae:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	2201      	movs	r2, #1
 80039b4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 80039b8:	e0ab      	b.n	8003b12 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80039be:	b29b      	uxth	r3, r3
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d1ca      	bne.n	800395a <HAL_SPI_Transmit+0x120>
 80039c4:	e080      	b.n	8003ac8 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	685b      	ldr	r3, [r3, #4]
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d002      	beq.n	80039d4 <HAL_SPI_Transmit+0x19a>
 80039ce:	8afb      	ldrh	r3, [r7, #22]
 80039d0:	2b01      	cmp	r3, #1
 80039d2:	d174      	bne.n	8003abe <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80039d8:	b29b      	uxth	r3, r3
 80039da:	2b01      	cmp	r3, #1
 80039dc:	d912      	bls.n	8003a04 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039e2:	881a      	ldrh	r2, [r3, #0]
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039ee:	1c9a      	adds	r2, r3, #2
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80039f8:	b29b      	uxth	r3, r3
 80039fa:	3b02      	subs	r3, #2
 80039fc:	b29a      	uxth	r2, r3
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003a02:	e05c      	b.n	8003abe <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	330c      	adds	r3, #12
 8003a0e:	7812      	ldrb	r2, [r2, #0]
 8003a10:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a16:	1c5a      	adds	r2, r3, #1
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a20:	b29b      	uxth	r3, r3
 8003a22:	3b01      	subs	r3, #1
 8003a24:	b29a      	uxth	r2, r3
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8003a2a:	e048      	b.n	8003abe <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	689b      	ldr	r3, [r3, #8]
 8003a32:	f003 0302 	and.w	r3, r3, #2
 8003a36:	2b02      	cmp	r3, #2
 8003a38:	d12b      	bne.n	8003a92 <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a3e:	b29b      	uxth	r3, r3
 8003a40:	2b01      	cmp	r3, #1
 8003a42:	d912      	bls.n	8003a6a <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a48:	881a      	ldrh	r2, [r3, #0]
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a54:	1c9a      	adds	r2, r3, #2
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a5e:	b29b      	uxth	r3, r3
 8003a60:	3b02      	subs	r3, #2
 8003a62:	b29a      	uxth	r2, r3
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003a68:	e029      	b.n	8003abe <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	330c      	adds	r3, #12
 8003a74:	7812      	ldrb	r2, [r2, #0]
 8003a76:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a7c:	1c5a      	adds	r2, r3, #1
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a86:	b29b      	uxth	r3, r3
 8003a88:	3b01      	subs	r3, #1
 8003a8a:	b29a      	uxth	r2, r3
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003a90:	e015      	b.n	8003abe <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003a92:	f7fd ff27 	bl	80018e4 <HAL_GetTick>
 8003a96:	4602      	mov	r2, r0
 8003a98:	69bb      	ldr	r3, [r7, #24]
 8003a9a:	1ad3      	subs	r3, r2, r3
 8003a9c:	683a      	ldr	r2, [r7, #0]
 8003a9e:	429a      	cmp	r2, r3
 8003aa0:	d803      	bhi.n	8003aaa <HAL_SPI_Transmit+0x270>
 8003aa2:	683b      	ldr	r3, [r7, #0]
 8003aa4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003aa8:	d102      	bne.n	8003ab0 <HAL_SPI_Transmit+0x276>
 8003aaa:	683b      	ldr	r3, [r7, #0]
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d106      	bne.n	8003abe <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8003ab0:	2303      	movs	r3, #3
 8003ab2:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	2201      	movs	r2, #1
 8003ab8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8003abc:	e029      	b.n	8003b12 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ac2:	b29b      	uxth	r3, r3
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d1b1      	bne.n	8003a2c <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003ac8:	69ba      	ldr	r2, [r7, #24]
 8003aca:	6839      	ldr	r1, [r7, #0]
 8003acc:	68f8      	ldr	r0, [r7, #12]
 8003ace:	f000 f947 	bl	8003d60 <SPI_EndRxTxTransaction>
 8003ad2:	4603      	mov	r3, r0
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d002      	beq.n	8003ade <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	2220      	movs	r2, #32
 8003adc:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	689b      	ldr	r3, [r3, #8]
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d10a      	bne.n	8003afc <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003ae6:	2300      	movs	r3, #0
 8003ae8:	613b      	str	r3, [r7, #16]
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	68db      	ldr	r3, [r3, #12]
 8003af0:	613b      	str	r3, [r7, #16]
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	689b      	ldr	r3, [r3, #8]
 8003af8:	613b      	str	r3, [r7, #16]
 8003afa:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d002      	beq.n	8003b0a <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8003b04:	2301      	movs	r3, #1
 8003b06:	77fb      	strb	r3, [r7, #31]
 8003b08:	e003      	b.n	8003b12 <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	2201      	movs	r2, #1
 8003b0e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	2200      	movs	r2, #0
 8003b16:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003b1a:	7ffb      	ldrb	r3, [r7, #31]
}
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	3720      	adds	r7, #32
 8003b20:	46bd      	mov	sp, r7
 8003b22:	bd80      	pop	{r7, pc}

08003b24 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003b24:	b580      	push	{r7, lr}
 8003b26:	b088      	sub	sp, #32
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	60f8      	str	r0, [r7, #12]
 8003b2c:	60b9      	str	r1, [r7, #8]
 8003b2e:	603b      	str	r3, [r7, #0]
 8003b30:	4613      	mov	r3, r2
 8003b32:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003b34:	f7fd fed6 	bl	80018e4 <HAL_GetTick>
 8003b38:	4602      	mov	r2, r0
 8003b3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b3c:	1a9b      	subs	r3, r3, r2
 8003b3e:	683a      	ldr	r2, [r7, #0]
 8003b40:	4413      	add	r3, r2
 8003b42:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003b44:	f7fd fece 	bl	80018e4 <HAL_GetTick>
 8003b48:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003b4a:	4b39      	ldr	r3, [pc, #228]	; (8003c30 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	015b      	lsls	r3, r3, #5
 8003b50:	0d1b      	lsrs	r3, r3, #20
 8003b52:	69fa      	ldr	r2, [r7, #28]
 8003b54:	fb02 f303 	mul.w	r3, r2, r3
 8003b58:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003b5a:	e054      	b.n	8003c06 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003b5c:	683b      	ldr	r3, [r7, #0]
 8003b5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b62:	d050      	beq.n	8003c06 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003b64:	f7fd febe 	bl	80018e4 <HAL_GetTick>
 8003b68:	4602      	mov	r2, r0
 8003b6a:	69bb      	ldr	r3, [r7, #24]
 8003b6c:	1ad3      	subs	r3, r2, r3
 8003b6e:	69fa      	ldr	r2, [r7, #28]
 8003b70:	429a      	cmp	r2, r3
 8003b72:	d902      	bls.n	8003b7a <SPI_WaitFlagStateUntilTimeout+0x56>
 8003b74:	69fb      	ldr	r3, [r7, #28]
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d13d      	bne.n	8003bf6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	685a      	ldr	r2, [r3, #4]
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003b88:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	685b      	ldr	r3, [r3, #4]
 8003b8e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003b92:	d111      	bne.n	8003bb8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	689b      	ldr	r3, [r3, #8]
 8003b98:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b9c:	d004      	beq.n	8003ba8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	689b      	ldr	r3, [r3, #8]
 8003ba2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ba6:	d107      	bne.n	8003bb8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	681a      	ldr	r2, [r3, #0]
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003bb6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bbc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003bc0:	d10f      	bne.n	8003be2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	681a      	ldr	r2, [r3, #0]
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003bd0:	601a      	str	r2, [r3, #0]
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	681a      	ldr	r2, [r3, #0]
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003be0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	2201      	movs	r2, #1
 8003be6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	2200      	movs	r2, #0
 8003bee:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003bf2:	2303      	movs	r3, #3
 8003bf4:	e017      	b.n	8003c26 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003bf6:	697b      	ldr	r3, [r7, #20]
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d101      	bne.n	8003c00 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003bfc:	2300      	movs	r3, #0
 8003bfe:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003c00:	697b      	ldr	r3, [r7, #20]
 8003c02:	3b01      	subs	r3, #1
 8003c04:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	689a      	ldr	r2, [r3, #8]
 8003c0c:	68bb      	ldr	r3, [r7, #8]
 8003c0e:	4013      	ands	r3, r2
 8003c10:	68ba      	ldr	r2, [r7, #8]
 8003c12:	429a      	cmp	r2, r3
 8003c14:	bf0c      	ite	eq
 8003c16:	2301      	moveq	r3, #1
 8003c18:	2300      	movne	r3, #0
 8003c1a:	b2db      	uxtb	r3, r3
 8003c1c:	461a      	mov	r2, r3
 8003c1e:	79fb      	ldrb	r3, [r7, #7]
 8003c20:	429a      	cmp	r2, r3
 8003c22:	d19b      	bne.n	8003b5c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003c24:	2300      	movs	r3, #0
}
 8003c26:	4618      	mov	r0, r3
 8003c28:	3720      	adds	r7, #32
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	bd80      	pop	{r7, pc}
 8003c2e:	bf00      	nop
 8003c30:	20000008 	.word	0x20000008

08003c34 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003c34:	b580      	push	{r7, lr}
 8003c36:	b08a      	sub	sp, #40	; 0x28
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	60f8      	str	r0, [r7, #12]
 8003c3c:	60b9      	str	r1, [r7, #8]
 8003c3e:	607a      	str	r2, [r7, #4]
 8003c40:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8003c42:	2300      	movs	r3, #0
 8003c44:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003c46:	f7fd fe4d 	bl	80018e4 <HAL_GetTick>
 8003c4a:	4602      	mov	r2, r0
 8003c4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c4e:	1a9b      	subs	r3, r3, r2
 8003c50:	683a      	ldr	r2, [r7, #0]
 8003c52:	4413      	add	r3, r2
 8003c54:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8003c56:	f7fd fe45 	bl	80018e4 <HAL_GetTick>
 8003c5a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	330c      	adds	r3, #12
 8003c62:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003c64:	4b3d      	ldr	r3, [pc, #244]	; (8003d5c <SPI_WaitFifoStateUntilTimeout+0x128>)
 8003c66:	681a      	ldr	r2, [r3, #0]
 8003c68:	4613      	mov	r3, r2
 8003c6a:	009b      	lsls	r3, r3, #2
 8003c6c:	4413      	add	r3, r2
 8003c6e:	00da      	lsls	r2, r3, #3
 8003c70:	1ad3      	subs	r3, r2, r3
 8003c72:	0d1b      	lsrs	r3, r3, #20
 8003c74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c76:	fb02 f303 	mul.w	r3, r2, r3
 8003c7a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003c7c:	e060      	b.n	8003d40 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003c7e:	68bb      	ldr	r3, [r7, #8]
 8003c80:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003c84:	d107      	bne.n	8003c96 <SPI_WaitFifoStateUntilTimeout+0x62>
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d104      	bne.n	8003c96 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003c8c:	69fb      	ldr	r3, [r7, #28]
 8003c8e:	781b      	ldrb	r3, [r3, #0]
 8003c90:	b2db      	uxtb	r3, r3
 8003c92:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003c94:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003c96:	683b      	ldr	r3, [r7, #0]
 8003c98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c9c:	d050      	beq.n	8003d40 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003c9e:	f7fd fe21 	bl	80018e4 <HAL_GetTick>
 8003ca2:	4602      	mov	r2, r0
 8003ca4:	6a3b      	ldr	r3, [r7, #32]
 8003ca6:	1ad3      	subs	r3, r2, r3
 8003ca8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003caa:	429a      	cmp	r2, r3
 8003cac:	d902      	bls.n	8003cb4 <SPI_WaitFifoStateUntilTimeout+0x80>
 8003cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d13d      	bne.n	8003d30 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	685a      	ldr	r2, [r3, #4]
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003cc2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	685b      	ldr	r3, [r3, #4]
 8003cc8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003ccc:	d111      	bne.n	8003cf2 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	689b      	ldr	r3, [r3, #8]
 8003cd2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003cd6:	d004      	beq.n	8003ce2 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	689b      	ldr	r3, [r3, #8]
 8003cdc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ce0:	d107      	bne.n	8003cf2 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	681a      	ldr	r2, [r3, #0]
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003cf0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cf6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003cfa:	d10f      	bne.n	8003d1c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	681a      	ldr	r2, [r3, #0]
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003d0a:	601a      	str	r2, [r3, #0]
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	681a      	ldr	r2, [r3, #0]
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003d1a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	2201      	movs	r2, #1
 8003d20:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	2200      	movs	r2, #0
 8003d28:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003d2c:	2303      	movs	r3, #3
 8003d2e:	e010      	b.n	8003d52 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003d30:	69bb      	ldr	r3, [r7, #24]
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d101      	bne.n	8003d3a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8003d36:	2300      	movs	r3, #0
 8003d38:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8003d3a:	69bb      	ldr	r3, [r7, #24]
 8003d3c:	3b01      	subs	r3, #1
 8003d3e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	689a      	ldr	r2, [r3, #8]
 8003d46:	68bb      	ldr	r3, [r7, #8]
 8003d48:	4013      	ands	r3, r2
 8003d4a:	687a      	ldr	r2, [r7, #4]
 8003d4c:	429a      	cmp	r2, r3
 8003d4e:	d196      	bne.n	8003c7e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8003d50:	2300      	movs	r3, #0
}
 8003d52:	4618      	mov	r0, r3
 8003d54:	3728      	adds	r7, #40	; 0x28
 8003d56:	46bd      	mov	sp, r7
 8003d58:	bd80      	pop	{r7, pc}
 8003d5a:	bf00      	nop
 8003d5c:	20000008 	.word	0x20000008

08003d60 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003d60:	b580      	push	{r7, lr}
 8003d62:	b086      	sub	sp, #24
 8003d64:	af02      	add	r7, sp, #8
 8003d66:	60f8      	str	r0, [r7, #12]
 8003d68:	60b9      	str	r1, [r7, #8]
 8003d6a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	9300      	str	r3, [sp, #0]
 8003d70:	68bb      	ldr	r3, [r7, #8]
 8003d72:	2200      	movs	r2, #0
 8003d74:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8003d78:	68f8      	ldr	r0, [r7, #12]
 8003d7a:	f7ff ff5b 	bl	8003c34 <SPI_WaitFifoStateUntilTimeout>
 8003d7e:	4603      	mov	r3, r0
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d007      	beq.n	8003d94 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d88:	f043 0220 	orr.w	r2, r3, #32
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003d90:	2303      	movs	r3, #3
 8003d92:	e027      	b.n	8003de4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	9300      	str	r3, [sp, #0]
 8003d98:	68bb      	ldr	r3, [r7, #8]
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	2180      	movs	r1, #128	; 0x80
 8003d9e:	68f8      	ldr	r0, [r7, #12]
 8003da0:	f7ff fec0 	bl	8003b24 <SPI_WaitFlagStateUntilTimeout>
 8003da4:	4603      	mov	r3, r0
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d007      	beq.n	8003dba <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003dae:	f043 0220 	orr.w	r2, r3, #32
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003db6:	2303      	movs	r3, #3
 8003db8:	e014      	b.n	8003de4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	9300      	str	r3, [sp, #0]
 8003dbe:	68bb      	ldr	r3, [r7, #8]
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8003dc6:	68f8      	ldr	r0, [r7, #12]
 8003dc8:	f7ff ff34 	bl	8003c34 <SPI_WaitFifoStateUntilTimeout>
 8003dcc:	4603      	mov	r3, r0
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d007      	beq.n	8003de2 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003dd6:	f043 0220 	orr.w	r2, r3, #32
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003dde:	2303      	movs	r3, #3
 8003de0:	e000      	b.n	8003de4 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8003de2:	2300      	movs	r3, #0
}
 8003de4:	4618      	mov	r0, r3
 8003de6:	3710      	adds	r7, #16
 8003de8:	46bd      	mov	sp, r7
 8003dea:	bd80      	pop	{r7, pc}

08003dec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003dec:	b580      	push	{r7, lr}
 8003dee:	b082      	sub	sp, #8
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d101      	bne.n	8003dfe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003dfa:	2301      	movs	r3, #1
 8003dfc:	e049      	b.n	8003e92 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e04:	b2db      	uxtb	r3, r3
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d106      	bne.n	8003e18 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003e12:	6878      	ldr	r0, [r7, #4]
 8003e14:	f7fd fb7a 	bl	800150c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2202      	movs	r2, #2
 8003e1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681a      	ldr	r2, [r3, #0]
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	3304      	adds	r3, #4
 8003e28:	4619      	mov	r1, r3
 8003e2a:	4610      	mov	r0, r2
 8003e2c:	f000 fc52 	bl	80046d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2201      	movs	r2, #1
 8003e34:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2201      	movs	r2, #1
 8003e3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2201      	movs	r2, #1
 8003e44:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	2201      	movs	r2, #1
 8003e4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	2201      	movs	r2, #1
 8003e54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2201      	movs	r2, #1
 8003e5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2201      	movs	r2, #1
 8003e64:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2201      	movs	r2, #1
 8003e6c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2201      	movs	r2, #1
 8003e74:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2201      	movs	r2, #1
 8003e7c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2201      	movs	r2, #1
 8003e84:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2201      	movs	r2, #1
 8003e8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003e90:	2300      	movs	r3, #0
}
 8003e92:	4618      	mov	r0, r3
 8003e94:	3708      	adds	r7, #8
 8003e96:	46bd      	mov	sp, r7
 8003e98:	bd80      	pop	{r7, pc}
	...

08003e9c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003e9c:	b480      	push	{r7}
 8003e9e:	b085      	sub	sp, #20
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003eaa:	b2db      	uxtb	r3, r3
 8003eac:	2b01      	cmp	r3, #1
 8003eae:	d001      	beq.n	8003eb4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003eb0:	2301      	movs	r3, #1
 8003eb2:	e033      	b.n	8003f1c <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2202      	movs	r2, #2
 8003eb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	4a19      	ldr	r2, [pc, #100]	; (8003f28 <HAL_TIM_Base_Start+0x8c>)
 8003ec2:	4293      	cmp	r3, r2
 8003ec4:	d009      	beq.n	8003eda <HAL_TIM_Base_Start+0x3e>
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ece:	d004      	beq.n	8003eda <HAL_TIM_Base_Start+0x3e>
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	4a15      	ldr	r2, [pc, #84]	; (8003f2c <HAL_TIM_Base_Start+0x90>)
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	d115      	bne.n	8003f06 <HAL_TIM_Base_Start+0x6a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	689a      	ldr	r2, [r3, #8]
 8003ee0:	4b13      	ldr	r3, [pc, #76]	; (8003f30 <HAL_TIM_Base_Start+0x94>)
 8003ee2:	4013      	ands	r3, r2
 8003ee4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	2b06      	cmp	r3, #6
 8003eea:	d015      	beq.n	8003f18 <HAL_TIM_Base_Start+0x7c>
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ef2:	d011      	beq.n	8003f18 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	681a      	ldr	r2, [r3, #0]
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f042 0201 	orr.w	r2, r2, #1
 8003f02:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f04:	e008      	b.n	8003f18 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	681a      	ldr	r2, [r3, #0]
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f042 0201 	orr.w	r2, r2, #1
 8003f14:	601a      	str	r2, [r3, #0]
 8003f16:	e000      	b.n	8003f1a <HAL_TIM_Base_Start+0x7e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f18:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003f1a:	2300      	movs	r3, #0
}
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	3714      	adds	r7, #20
 8003f20:	46bd      	mov	sp, r7
 8003f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f26:	4770      	bx	lr
 8003f28:	40012c00 	.word	0x40012c00
 8003f2c:	40014000 	.word	0x40014000
 8003f30:	00010007 	.word	0x00010007

08003f34 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8003f34:	b480      	push	{r7}
 8003f36:	b083      	sub	sp, #12
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	6a1a      	ldr	r2, [r3, #32]
 8003f42:	f241 1311 	movw	r3, #4369	; 0x1111
 8003f46:	4013      	ands	r3, r2
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d10f      	bne.n	8003f6c <HAL_TIM_Base_Stop+0x38>
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	6a1a      	ldr	r2, [r3, #32]
 8003f52:	f240 4344 	movw	r3, #1092	; 0x444
 8003f56:	4013      	ands	r3, r2
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d107      	bne.n	8003f6c <HAL_TIM_Base_Stop+0x38>
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	681a      	ldr	r2, [r3, #0]
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f022 0201 	bic.w	r2, r2, #1
 8003f6a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2201      	movs	r2, #1
 8003f70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8003f74:	2300      	movs	r3, #0
}
 8003f76:	4618      	mov	r0, r3
 8003f78:	370c      	adds	r7, #12
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f80:	4770      	bx	lr

08003f82 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003f82:	b580      	push	{r7, lr}
 8003f84:	b082      	sub	sp, #8
 8003f86:	af00      	add	r7, sp, #0
 8003f88:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d101      	bne.n	8003f94 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003f90:	2301      	movs	r3, #1
 8003f92:	e049      	b.n	8004028 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f9a:	b2db      	uxtb	r3, r3
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d106      	bne.n	8003fae <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003fa8:	6878      	ldr	r0, [r7, #4]
 8003faa:	f7fd fa8f 	bl	80014cc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	2202      	movs	r2, #2
 8003fb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681a      	ldr	r2, [r3, #0]
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	3304      	adds	r3, #4
 8003fbe:	4619      	mov	r1, r3
 8003fc0:	4610      	mov	r0, r2
 8003fc2:	f000 fb87 	bl	80046d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	2201      	movs	r2, #1
 8003fca:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	2201      	movs	r2, #1
 8003fd2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	2201      	movs	r2, #1
 8003fda:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	2201      	movs	r2, #1
 8003fe2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	2201      	movs	r2, #1
 8003fea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	2201      	movs	r2, #1
 8003ff2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	2201      	movs	r2, #1
 8003ffa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	2201      	movs	r2, #1
 8004002:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	2201      	movs	r2, #1
 800400a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	2201      	movs	r2, #1
 8004012:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	2201      	movs	r2, #1
 800401a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	2201      	movs	r2, #1
 8004022:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004026:	2300      	movs	r3, #0
}
 8004028:	4618      	mov	r0, r3
 800402a:	3708      	adds	r7, #8
 800402c:	46bd      	mov	sp, r7
 800402e:	bd80      	pop	{r7, pc}

08004030 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004030:	b580      	push	{r7, lr}
 8004032:	b084      	sub	sp, #16
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
 8004038:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800403a:	683b      	ldr	r3, [r7, #0]
 800403c:	2b00      	cmp	r3, #0
 800403e:	d109      	bne.n	8004054 <HAL_TIM_PWM_Start+0x24>
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004046:	b2db      	uxtb	r3, r3
 8004048:	2b01      	cmp	r3, #1
 800404a:	bf14      	ite	ne
 800404c:	2301      	movne	r3, #1
 800404e:	2300      	moveq	r3, #0
 8004050:	b2db      	uxtb	r3, r3
 8004052:	e03c      	b.n	80040ce <HAL_TIM_PWM_Start+0x9e>
 8004054:	683b      	ldr	r3, [r7, #0]
 8004056:	2b04      	cmp	r3, #4
 8004058:	d109      	bne.n	800406e <HAL_TIM_PWM_Start+0x3e>
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004060:	b2db      	uxtb	r3, r3
 8004062:	2b01      	cmp	r3, #1
 8004064:	bf14      	ite	ne
 8004066:	2301      	movne	r3, #1
 8004068:	2300      	moveq	r3, #0
 800406a:	b2db      	uxtb	r3, r3
 800406c:	e02f      	b.n	80040ce <HAL_TIM_PWM_Start+0x9e>
 800406e:	683b      	ldr	r3, [r7, #0]
 8004070:	2b08      	cmp	r3, #8
 8004072:	d109      	bne.n	8004088 <HAL_TIM_PWM_Start+0x58>
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800407a:	b2db      	uxtb	r3, r3
 800407c:	2b01      	cmp	r3, #1
 800407e:	bf14      	ite	ne
 8004080:	2301      	movne	r3, #1
 8004082:	2300      	moveq	r3, #0
 8004084:	b2db      	uxtb	r3, r3
 8004086:	e022      	b.n	80040ce <HAL_TIM_PWM_Start+0x9e>
 8004088:	683b      	ldr	r3, [r7, #0]
 800408a:	2b0c      	cmp	r3, #12
 800408c:	d109      	bne.n	80040a2 <HAL_TIM_PWM_Start+0x72>
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004094:	b2db      	uxtb	r3, r3
 8004096:	2b01      	cmp	r3, #1
 8004098:	bf14      	ite	ne
 800409a:	2301      	movne	r3, #1
 800409c:	2300      	moveq	r3, #0
 800409e:	b2db      	uxtb	r3, r3
 80040a0:	e015      	b.n	80040ce <HAL_TIM_PWM_Start+0x9e>
 80040a2:	683b      	ldr	r3, [r7, #0]
 80040a4:	2b10      	cmp	r3, #16
 80040a6:	d109      	bne.n	80040bc <HAL_TIM_PWM_Start+0x8c>
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80040ae:	b2db      	uxtb	r3, r3
 80040b0:	2b01      	cmp	r3, #1
 80040b2:	bf14      	ite	ne
 80040b4:	2301      	movne	r3, #1
 80040b6:	2300      	moveq	r3, #0
 80040b8:	b2db      	uxtb	r3, r3
 80040ba:	e008      	b.n	80040ce <HAL_TIM_PWM_Start+0x9e>
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80040c2:	b2db      	uxtb	r3, r3
 80040c4:	2b01      	cmp	r3, #1
 80040c6:	bf14      	ite	ne
 80040c8:	2301      	movne	r3, #1
 80040ca:	2300      	moveq	r3, #0
 80040cc:	b2db      	uxtb	r3, r3
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d001      	beq.n	80040d6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80040d2:	2301      	movs	r3, #1
 80040d4:	e083      	b.n	80041de <HAL_TIM_PWM_Start+0x1ae>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80040d6:	683b      	ldr	r3, [r7, #0]
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d104      	bne.n	80040e6 <HAL_TIM_PWM_Start+0xb6>
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2202      	movs	r2, #2
 80040e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80040e4:	e023      	b.n	800412e <HAL_TIM_PWM_Start+0xfe>
 80040e6:	683b      	ldr	r3, [r7, #0]
 80040e8:	2b04      	cmp	r3, #4
 80040ea:	d104      	bne.n	80040f6 <HAL_TIM_PWM_Start+0xc6>
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2202      	movs	r2, #2
 80040f0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80040f4:	e01b      	b.n	800412e <HAL_TIM_PWM_Start+0xfe>
 80040f6:	683b      	ldr	r3, [r7, #0]
 80040f8:	2b08      	cmp	r3, #8
 80040fa:	d104      	bne.n	8004106 <HAL_TIM_PWM_Start+0xd6>
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2202      	movs	r2, #2
 8004100:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004104:	e013      	b.n	800412e <HAL_TIM_PWM_Start+0xfe>
 8004106:	683b      	ldr	r3, [r7, #0]
 8004108:	2b0c      	cmp	r3, #12
 800410a:	d104      	bne.n	8004116 <HAL_TIM_PWM_Start+0xe6>
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	2202      	movs	r2, #2
 8004110:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004114:	e00b      	b.n	800412e <HAL_TIM_PWM_Start+0xfe>
 8004116:	683b      	ldr	r3, [r7, #0]
 8004118:	2b10      	cmp	r3, #16
 800411a:	d104      	bne.n	8004126 <HAL_TIM_PWM_Start+0xf6>
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2202      	movs	r2, #2
 8004120:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004124:	e003      	b.n	800412e <HAL_TIM_PWM_Start+0xfe>
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	2202      	movs	r2, #2
 800412a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	2201      	movs	r2, #1
 8004134:	6839      	ldr	r1, [r7, #0]
 8004136:	4618      	mov	r0, r3
 8004138:	f000 fe7a 	bl	8004e30 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	4a29      	ldr	r2, [pc, #164]	; (80041e8 <HAL_TIM_PWM_Start+0x1b8>)
 8004142:	4293      	cmp	r3, r2
 8004144:	d00e      	beq.n	8004164 <HAL_TIM_PWM_Start+0x134>
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	4a28      	ldr	r2, [pc, #160]	; (80041ec <HAL_TIM_PWM_Start+0x1bc>)
 800414c:	4293      	cmp	r3, r2
 800414e:	d009      	beq.n	8004164 <HAL_TIM_PWM_Start+0x134>
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	4a26      	ldr	r2, [pc, #152]	; (80041f0 <HAL_TIM_PWM_Start+0x1c0>)
 8004156:	4293      	cmp	r3, r2
 8004158:	d004      	beq.n	8004164 <HAL_TIM_PWM_Start+0x134>
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	4a25      	ldr	r2, [pc, #148]	; (80041f4 <HAL_TIM_PWM_Start+0x1c4>)
 8004160:	4293      	cmp	r3, r2
 8004162:	d101      	bne.n	8004168 <HAL_TIM_PWM_Start+0x138>
 8004164:	2301      	movs	r3, #1
 8004166:	e000      	b.n	800416a <HAL_TIM_PWM_Start+0x13a>
 8004168:	2300      	movs	r3, #0
 800416a:	2b00      	cmp	r3, #0
 800416c:	d007      	beq.n	800417e <HAL_TIM_PWM_Start+0x14e>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800417c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	4a19      	ldr	r2, [pc, #100]	; (80041e8 <HAL_TIM_PWM_Start+0x1b8>)
 8004184:	4293      	cmp	r3, r2
 8004186:	d009      	beq.n	800419c <HAL_TIM_PWM_Start+0x16c>
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004190:	d004      	beq.n	800419c <HAL_TIM_PWM_Start+0x16c>
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	4a15      	ldr	r2, [pc, #84]	; (80041ec <HAL_TIM_PWM_Start+0x1bc>)
 8004198:	4293      	cmp	r3, r2
 800419a:	d115      	bne.n	80041c8 <HAL_TIM_PWM_Start+0x198>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	689a      	ldr	r2, [r3, #8]
 80041a2:	4b15      	ldr	r3, [pc, #84]	; (80041f8 <HAL_TIM_PWM_Start+0x1c8>)
 80041a4:	4013      	ands	r3, r2
 80041a6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	2b06      	cmp	r3, #6
 80041ac:	d015      	beq.n	80041da <HAL_TIM_PWM_Start+0x1aa>
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041b4:	d011      	beq.n	80041da <HAL_TIM_PWM_Start+0x1aa>
    {
      __HAL_TIM_ENABLE(htim);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	681a      	ldr	r2, [r3, #0]
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f042 0201 	orr.w	r2, r2, #1
 80041c4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80041c6:	e008      	b.n	80041da <HAL_TIM_PWM_Start+0x1aa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	681a      	ldr	r2, [r3, #0]
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f042 0201 	orr.w	r2, r2, #1
 80041d6:	601a      	str	r2, [r3, #0]
 80041d8:	e000      	b.n	80041dc <HAL_TIM_PWM_Start+0x1ac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80041da:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80041dc:	2300      	movs	r3, #0
}
 80041de:	4618      	mov	r0, r3
 80041e0:	3710      	adds	r7, #16
 80041e2:	46bd      	mov	sp, r7
 80041e4:	bd80      	pop	{r7, pc}
 80041e6:	bf00      	nop
 80041e8:	40012c00 	.word	0x40012c00
 80041ec:	40014000 	.word	0x40014000
 80041f0:	40014400 	.word	0x40014400
 80041f4:	40014800 	.word	0x40014800
 80041f8:	00010007 	.word	0x00010007

080041fc <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80041fc:	b580      	push	{r7, lr}
 80041fe:	b082      	sub	sp, #8
 8004200:	af00      	add	r7, sp, #0
 8004202:	6078      	str	r0, [r7, #4]
 8004204:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	2200      	movs	r2, #0
 800420c:	6839      	ldr	r1, [r7, #0]
 800420e:	4618      	mov	r0, r3
 8004210:	f000 fe0e 	bl	8004e30 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	4a3b      	ldr	r2, [pc, #236]	; (8004308 <HAL_TIM_PWM_Stop+0x10c>)
 800421a:	4293      	cmp	r3, r2
 800421c:	d00e      	beq.n	800423c <HAL_TIM_PWM_Stop+0x40>
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	4a3a      	ldr	r2, [pc, #232]	; (800430c <HAL_TIM_PWM_Stop+0x110>)
 8004224:	4293      	cmp	r3, r2
 8004226:	d009      	beq.n	800423c <HAL_TIM_PWM_Stop+0x40>
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	4a38      	ldr	r2, [pc, #224]	; (8004310 <HAL_TIM_PWM_Stop+0x114>)
 800422e:	4293      	cmp	r3, r2
 8004230:	d004      	beq.n	800423c <HAL_TIM_PWM_Stop+0x40>
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	4a37      	ldr	r2, [pc, #220]	; (8004314 <HAL_TIM_PWM_Stop+0x118>)
 8004238:	4293      	cmp	r3, r2
 800423a:	d101      	bne.n	8004240 <HAL_TIM_PWM_Stop+0x44>
 800423c:	2301      	movs	r3, #1
 800423e:	e000      	b.n	8004242 <HAL_TIM_PWM_Stop+0x46>
 8004240:	2300      	movs	r3, #0
 8004242:	2b00      	cmp	r3, #0
 8004244:	d017      	beq.n	8004276 <HAL_TIM_PWM_Stop+0x7a>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	6a1a      	ldr	r2, [r3, #32]
 800424c:	f241 1311 	movw	r3, #4369	; 0x1111
 8004250:	4013      	ands	r3, r2
 8004252:	2b00      	cmp	r3, #0
 8004254:	d10f      	bne.n	8004276 <HAL_TIM_PWM_Stop+0x7a>
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	6a1a      	ldr	r2, [r3, #32]
 800425c:	f240 4344 	movw	r3, #1092	; 0x444
 8004260:	4013      	ands	r3, r2
 8004262:	2b00      	cmp	r3, #0
 8004264:	d107      	bne.n	8004276 <HAL_TIM_PWM_Stop+0x7a>
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004274:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	6a1a      	ldr	r2, [r3, #32]
 800427c:	f241 1311 	movw	r3, #4369	; 0x1111
 8004280:	4013      	ands	r3, r2
 8004282:	2b00      	cmp	r3, #0
 8004284:	d10f      	bne.n	80042a6 <HAL_TIM_PWM_Stop+0xaa>
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	6a1a      	ldr	r2, [r3, #32]
 800428c:	f240 4344 	movw	r3, #1092	; 0x444
 8004290:	4013      	ands	r3, r2
 8004292:	2b00      	cmp	r3, #0
 8004294:	d107      	bne.n	80042a6 <HAL_TIM_PWM_Stop+0xaa>
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	681a      	ldr	r2, [r3, #0]
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f022 0201 	bic.w	r2, r2, #1
 80042a4:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80042a6:	683b      	ldr	r3, [r7, #0]
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d104      	bne.n	80042b6 <HAL_TIM_PWM_Stop+0xba>
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2201      	movs	r2, #1
 80042b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80042b4:	e023      	b.n	80042fe <HAL_TIM_PWM_Stop+0x102>
 80042b6:	683b      	ldr	r3, [r7, #0]
 80042b8:	2b04      	cmp	r3, #4
 80042ba:	d104      	bne.n	80042c6 <HAL_TIM_PWM_Stop+0xca>
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2201      	movs	r2, #1
 80042c0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80042c4:	e01b      	b.n	80042fe <HAL_TIM_PWM_Stop+0x102>
 80042c6:	683b      	ldr	r3, [r7, #0]
 80042c8:	2b08      	cmp	r3, #8
 80042ca:	d104      	bne.n	80042d6 <HAL_TIM_PWM_Stop+0xda>
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2201      	movs	r2, #1
 80042d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80042d4:	e013      	b.n	80042fe <HAL_TIM_PWM_Stop+0x102>
 80042d6:	683b      	ldr	r3, [r7, #0]
 80042d8:	2b0c      	cmp	r3, #12
 80042da:	d104      	bne.n	80042e6 <HAL_TIM_PWM_Stop+0xea>
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2201      	movs	r2, #1
 80042e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80042e4:	e00b      	b.n	80042fe <HAL_TIM_PWM_Stop+0x102>
 80042e6:	683b      	ldr	r3, [r7, #0]
 80042e8:	2b10      	cmp	r3, #16
 80042ea:	d104      	bne.n	80042f6 <HAL_TIM_PWM_Stop+0xfa>
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2201      	movs	r2, #1
 80042f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80042f4:	e003      	b.n	80042fe <HAL_TIM_PWM_Stop+0x102>
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	2201      	movs	r2, #1
 80042fa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 80042fe:	2300      	movs	r3, #0
}
 8004300:	4618      	mov	r0, r3
 8004302:	3708      	adds	r7, #8
 8004304:	46bd      	mov	sp, r7
 8004306:	bd80      	pop	{r7, pc}
 8004308:	40012c00 	.word	0x40012c00
 800430c:	40014000 	.word	0x40014000
 8004310:	40014400 	.word	0x40014400
 8004314:	40014800 	.word	0x40014800

08004318 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004318:	b580      	push	{r7, lr}
 800431a:	b086      	sub	sp, #24
 800431c:	af00      	add	r7, sp, #0
 800431e:	60f8      	str	r0, [r7, #12]
 8004320:	60b9      	str	r1, [r7, #8]
 8004322:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004324:	2300      	movs	r3, #0
 8004326:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800432e:	2b01      	cmp	r3, #1
 8004330:	d101      	bne.n	8004336 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004332:	2302      	movs	r3, #2
 8004334:	e0ff      	b.n	8004536 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	2201      	movs	r2, #1
 800433a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	2b14      	cmp	r3, #20
 8004342:	f200 80f0 	bhi.w	8004526 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004346:	a201      	add	r2, pc, #4	; (adr r2, 800434c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004348:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800434c:	080043a1 	.word	0x080043a1
 8004350:	08004527 	.word	0x08004527
 8004354:	08004527 	.word	0x08004527
 8004358:	08004527 	.word	0x08004527
 800435c:	080043e1 	.word	0x080043e1
 8004360:	08004527 	.word	0x08004527
 8004364:	08004527 	.word	0x08004527
 8004368:	08004527 	.word	0x08004527
 800436c:	08004423 	.word	0x08004423
 8004370:	08004527 	.word	0x08004527
 8004374:	08004527 	.word	0x08004527
 8004378:	08004527 	.word	0x08004527
 800437c:	08004463 	.word	0x08004463
 8004380:	08004527 	.word	0x08004527
 8004384:	08004527 	.word	0x08004527
 8004388:	08004527 	.word	0x08004527
 800438c:	080044a5 	.word	0x080044a5
 8004390:	08004527 	.word	0x08004527
 8004394:	08004527 	.word	0x08004527
 8004398:	08004527 	.word	0x08004527
 800439c:	080044e5 	.word	0x080044e5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	68b9      	ldr	r1, [r7, #8]
 80043a6:	4618      	mov	r0, r3
 80043a8:	f000 fa02 	bl	80047b0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	699a      	ldr	r2, [r3, #24]
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f042 0208 	orr.w	r2, r2, #8
 80043ba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	699a      	ldr	r2, [r3, #24]
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f022 0204 	bic.w	r2, r2, #4
 80043ca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	6999      	ldr	r1, [r3, #24]
 80043d2:	68bb      	ldr	r3, [r7, #8]
 80043d4:	691a      	ldr	r2, [r3, #16]
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	430a      	orrs	r2, r1
 80043dc:	619a      	str	r2, [r3, #24]
      break;
 80043de:	e0a5      	b.n	800452c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	68b9      	ldr	r1, [r7, #8]
 80043e6:	4618      	mov	r0, r3
 80043e8:	f000 fa68 	bl	80048bc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	699a      	ldr	r2, [r3, #24]
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80043fa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	699a      	ldr	r2, [r3, #24]
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800440a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	6999      	ldr	r1, [r3, #24]
 8004412:	68bb      	ldr	r3, [r7, #8]
 8004414:	691b      	ldr	r3, [r3, #16]
 8004416:	021a      	lsls	r2, r3, #8
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	430a      	orrs	r2, r1
 800441e:	619a      	str	r2, [r3, #24]
      break;
 8004420:	e084      	b.n	800452c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	68b9      	ldr	r1, [r7, #8]
 8004428:	4618      	mov	r0, r3
 800442a:	f000 fac7 	bl	80049bc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	69da      	ldr	r2, [r3, #28]
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f042 0208 	orr.w	r2, r2, #8
 800443c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	69da      	ldr	r2, [r3, #28]
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f022 0204 	bic.w	r2, r2, #4
 800444c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	69d9      	ldr	r1, [r3, #28]
 8004454:	68bb      	ldr	r3, [r7, #8]
 8004456:	691a      	ldr	r2, [r3, #16]
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	430a      	orrs	r2, r1
 800445e:	61da      	str	r2, [r3, #28]
      break;
 8004460:	e064      	b.n	800452c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	68b9      	ldr	r1, [r7, #8]
 8004468:	4618      	mov	r0, r3
 800446a:	f000 fb25 	bl	8004ab8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	69da      	ldr	r2, [r3, #28]
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800447c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	69da      	ldr	r2, [r3, #28]
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800448c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	69d9      	ldr	r1, [r3, #28]
 8004494:	68bb      	ldr	r3, [r7, #8]
 8004496:	691b      	ldr	r3, [r3, #16]
 8004498:	021a      	lsls	r2, r3, #8
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	430a      	orrs	r2, r1
 80044a0:	61da      	str	r2, [r3, #28]
      break;
 80044a2:	e043      	b.n	800452c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	68b9      	ldr	r1, [r7, #8]
 80044aa:	4618      	mov	r0, r3
 80044ac:	f000 fb68 	bl	8004b80 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f042 0208 	orr.w	r2, r2, #8
 80044be:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f022 0204 	bic.w	r2, r2, #4
 80044ce:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80044d6:	68bb      	ldr	r3, [r7, #8]
 80044d8:	691a      	ldr	r2, [r3, #16]
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	430a      	orrs	r2, r1
 80044e0:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80044e2:	e023      	b.n	800452c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	68b9      	ldr	r1, [r7, #8]
 80044ea:	4618      	mov	r0, r3
 80044ec:	f000 fba6 	bl	8004c3c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80044fe:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800450e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004516:	68bb      	ldr	r3, [r7, #8]
 8004518:	691b      	ldr	r3, [r3, #16]
 800451a:	021a      	lsls	r2, r3, #8
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	430a      	orrs	r2, r1
 8004522:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004524:	e002      	b.n	800452c <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8004526:	2301      	movs	r3, #1
 8004528:	75fb      	strb	r3, [r7, #23]
      break;
 800452a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	2200      	movs	r2, #0
 8004530:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004534:	7dfb      	ldrb	r3, [r7, #23]
}
 8004536:	4618      	mov	r0, r3
 8004538:	3718      	adds	r7, #24
 800453a:	46bd      	mov	sp, r7
 800453c:	bd80      	pop	{r7, pc}
 800453e:	bf00      	nop

08004540 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004540:	b580      	push	{r7, lr}
 8004542:	b084      	sub	sp, #16
 8004544:	af00      	add	r7, sp, #0
 8004546:	6078      	str	r0, [r7, #4]
 8004548:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800454a:	2300      	movs	r3, #0
 800454c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004554:	2b01      	cmp	r3, #1
 8004556:	d101      	bne.n	800455c <HAL_TIM_ConfigClockSource+0x1c>
 8004558:	2302      	movs	r3, #2
 800455a:	e0b6      	b.n	80046ca <HAL_TIM_ConfigClockSource+0x18a>
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	2201      	movs	r2, #1
 8004560:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	2202      	movs	r2, #2
 8004568:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	689b      	ldr	r3, [r3, #8]
 8004572:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004574:	68bb      	ldr	r3, [r7, #8]
 8004576:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800457a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800457e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004580:	68bb      	ldr	r3, [r7, #8]
 8004582:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004586:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	68ba      	ldr	r2, [r7, #8]
 800458e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004590:	683b      	ldr	r3, [r7, #0]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004598:	d03e      	beq.n	8004618 <HAL_TIM_ConfigClockSource+0xd8>
 800459a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800459e:	f200 8087 	bhi.w	80046b0 <HAL_TIM_ConfigClockSource+0x170>
 80045a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80045a6:	f000 8086 	beq.w	80046b6 <HAL_TIM_ConfigClockSource+0x176>
 80045aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80045ae:	d87f      	bhi.n	80046b0 <HAL_TIM_ConfigClockSource+0x170>
 80045b0:	2b70      	cmp	r3, #112	; 0x70
 80045b2:	d01a      	beq.n	80045ea <HAL_TIM_ConfigClockSource+0xaa>
 80045b4:	2b70      	cmp	r3, #112	; 0x70
 80045b6:	d87b      	bhi.n	80046b0 <HAL_TIM_ConfigClockSource+0x170>
 80045b8:	2b60      	cmp	r3, #96	; 0x60
 80045ba:	d050      	beq.n	800465e <HAL_TIM_ConfigClockSource+0x11e>
 80045bc:	2b60      	cmp	r3, #96	; 0x60
 80045be:	d877      	bhi.n	80046b0 <HAL_TIM_ConfigClockSource+0x170>
 80045c0:	2b50      	cmp	r3, #80	; 0x50
 80045c2:	d03c      	beq.n	800463e <HAL_TIM_ConfigClockSource+0xfe>
 80045c4:	2b50      	cmp	r3, #80	; 0x50
 80045c6:	d873      	bhi.n	80046b0 <HAL_TIM_ConfigClockSource+0x170>
 80045c8:	2b40      	cmp	r3, #64	; 0x40
 80045ca:	d058      	beq.n	800467e <HAL_TIM_ConfigClockSource+0x13e>
 80045cc:	2b40      	cmp	r3, #64	; 0x40
 80045ce:	d86f      	bhi.n	80046b0 <HAL_TIM_ConfigClockSource+0x170>
 80045d0:	2b30      	cmp	r3, #48	; 0x30
 80045d2:	d064      	beq.n	800469e <HAL_TIM_ConfigClockSource+0x15e>
 80045d4:	2b30      	cmp	r3, #48	; 0x30
 80045d6:	d86b      	bhi.n	80046b0 <HAL_TIM_ConfigClockSource+0x170>
 80045d8:	2b20      	cmp	r3, #32
 80045da:	d060      	beq.n	800469e <HAL_TIM_ConfigClockSource+0x15e>
 80045dc:	2b20      	cmp	r3, #32
 80045de:	d867      	bhi.n	80046b0 <HAL_TIM_ConfigClockSource+0x170>
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d05c      	beq.n	800469e <HAL_TIM_ConfigClockSource+0x15e>
 80045e4:	2b10      	cmp	r3, #16
 80045e6:	d05a      	beq.n	800469e <HAL_TIM_ConfigClockSource+0x15e>
 80045e8:	e062      	b.n	80046b0 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	6818      	ldr	r0, [r3, #0]
 80045ee:	683b      	ldr	r3, [r7, #0]
 80045f0:	6899      	ldr	r1, [r3, #8]
 80045f2:	683b      	ldr	r3, [r7, #0]
 80045f4:	685a      	ldr	r2, [r3, #4]
 80045f6:	683b      	ldr	r3, [r7, #0]
 80045f8:	68db      	ldr	r3, [r3, #12]
 80045fa:	f000 fbf9 	bl	8004df0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	689b      	ldr	r3, [r3, #8]
 8004604:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004606:	68bb      	ldr	r3, [r7, #8]
 8004608:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800460c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	68ba      	ldr	r2, [r7, #8]
 8004614:	609a      	str	r2, [r3, #8]
      break;
 8004616:	e04f      	b.n	80046b8 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	6818      	ldr	r0, [r3, #0]
 800461c:	683b      	ldr	r3, [r7, #0]
 800461e:	6899      	ldr	r1, [r3, #8]
 8004620:	683b      	ldr	r3, [r7, #0]
 8004622:	685a      	ldr	r2, [r3, #4]
 8004624:	683b      	ldr	r3, [r7, #0]
 8004626:	68db      	ldr	r3, [r3, #12]
 8004628:	f000 fbe2 	bl	8004df0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	689a      	ldr	r2, [r3, #8]
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800463a:	609a      	str	r2, [r3, #8]
      break;
 800463c:	e03c      	b.n	80046b8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	6818      	ldr	r0, [r3, #0]
 8004642:	683b      	ldr	r3, [r7, #0]
 8004644:	6859      	ldr	r1, [r3, #4]
 8004646:	683b      	ldr	r3, [r7, #0]
 8004648:	68db      	ldr	r3, [r3, #12]
 800464a:	461a      	mov	r2, r3
 800464c:	f000 fb56 	bl	8004cfc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	2150      	movs	r1, #80	; 0x50
 8004656:	4618      	mov	r0, r3
 8004658:	f000 fbaf 	bl	8004dba <TIM_ITRx_SetConfig>
      break;
 800465c:	e02c      	b.n	80046b8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	6818      	ldr	r0, [r3, #0]
 8004662:	683b      	ldr	r3, [r7, #0]
 8004664:	6859      	ldr	r1, [r3, #4]
 8004666:	683b      	ldr	r3, [r7, #0]
 8004668:	68db      	ldr	r3, [r3, #12]
 800466a:	461a      	mov	r2, r3
 800466c:	f000 fb75 	bl	8004d5a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	2160      	movs	r1, #96	; 0x60
 8004676:	4618      	mov	r0, r3
 8004678:	f000 fb9f 	bl	8004dba <TIM_ITRx_SetConfig>
      break;
 800467c:	e01c      	b.n	80046b8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	6818      	ldr	r0, [r3, #0]
 8004682:	683b      	ldr	r3, [r7, #0]
 8004684:	6859      	ldr	r1, [r3, #4]
 8004686:	683b      	ldr	r3, [r7, #0]
 8004688:	68db      	ldr	r3, [r3, #12]
 800468a:	461a      	mov	r2, r3
 800468c:	f000 fb36 	bl	8004cfc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	2140      	movs	r1, #64	; 0x40
 8004696:	4618      	mov	r0, r3
 8004698:	f000 fb8f 	bl	8004dba <TIM_ITRx_SetConfig>
      break;
 800469c:	e00c      	b.n	80046b8 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681a      	ldr	r2, [r3, #0]
 80046a2:	683b      	ldr	r3, [r7, #0]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	4619      	mov	r1, r3
 80046a8:	4610      	mov	r0, r2
 80046aa:	f000 fb86 	bl	8004dba <TIM_ITRx_SetConfig>
      break;
 80046ae:	e003      	b.n	80046b8 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80046b0:	2301      	movs	r3, #1
 80046b2:	73fb      	strb	r3, [r7, #15]
      break;
 80046b4:	e000      	b.n	80046b8 <HAL_TIM_ConfigClockSource+0x178>
      break;
 80046b6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2201      	movs	r2, #1
 80046bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	2200      	movs	r2, #0
 80046c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80046c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80046ca:	4618      	mov	r0, r3
 80046cc:	3710      	adds	r7, #16
 80046ce:	46bd      	mov	sp, r7
 80046d0:	bd80      	pop	{r7, pc}
	...

080046d4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80046d4:	b480      	push	{r7}
 80046d6:	b085      	sub	sp, #20
 80046d8:	af00      	add	r7, sp, #0
 80046da:	6078      	str	r0, [r7, #4]
 80046dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	4a2e      	ldr	r2, [pc, #184]	; (80047a0 <TIM_Base_SetConfig+0xcc>)
 80046e8:	4293      	cmp	r3, r2
 80046ea:	d003      	beq.n	80046f4 <TIM_Base_SetConfig+0x20>
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046f2:	d108      	bne.n	8004706 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046fa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80046fc:	683b      	ldr	r3, [r7, #0]
 80046fe:	685b      	ldr	r3, [r3, #4]
 8004700:	68fa      	ldr	r2, [r7, #12]
 8004702:	4313      	orrs	r3, r2
 8004704:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	4a25      	ldr	r2, [pc, #148]	; (80047a0 <TIM_Base_SetConfig+0xcc>)
 800470a:	4293      	cmp	r3, r2
 800470c:	d00f      	beq.n	800472e <TIM_Base_SetConfig+0x5a>
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004714:	d00b      	beq.n	800472e <TIM_Base_SetConfig+0x5a>
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	4a22      	ldr	r2, [pc, #136]	; (80047a4 <TIM_Base_SetConfig+0xd0>)
 800471a:	4293      	cmp	r3, r2
 800471c:	d007      	beq.n	800472e <TIM_Base_SetConfig+0x5a>
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	4a21      	ldr	r2, [pc, #132]	; (80047a8 <TIM_Base_SetConfig+0xd4>)
 8004722:	4293      	cmp	r3, r2
 8004724:	d003      	beq.n	800472e <TIM_Base_SetConfig+0x5a>
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	4a20      	ldr	r2, [pc, #128]	; (80047ac <TIM_Base_SetConfig+0xd8>)
 800472a:	4293      	cmp	r3, r2
 800472c:	d108      	bne.n	8004740 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004734:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004736:	683b      	ldr	r3, [r7, #0]
 8004738:	68db      	ldr	r3, [r3, #12]
 800473a:	68fa      	ldr	r2, [r7, #12]
 800473c:	4313      	orrs	r3, r2
 800473e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004746:	683b      	ldr	r3, [r7, #0]
 8004748:	695b      	ldr	r3, [r3, #20]
 800474a:	4313      	orrs	r3, r2
 800474c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	68fa      	ldr	r2, [r7, #12]
 8004752:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004754:	683b      	ldr	r3, [r7, #0]
 8004756:	689a      	ldr	r2, [r3, #8]
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800475c:	683b      	ldr	r3, [r7, #0]
 800475e:	681a      	ldr	r2, [r3, #0]
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	4a0e      	ldr	r2, [pc, #56]	; (80047a0 <TIM_Base_SetConfig+0xcc>)
 8004768:	4293      	cmp	r3, r2
 800476a:	d00b      	beq.n	8004784 <TIM_Base_SetConfig+0xb0>
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	4a0d      	ldr	r2, [pc, #52]	; (80047a4 <TIM_Base_SetConfig+0xd0>)
 8004770:	4293      	cmp	r3, r2
 8004772:	d007      	beq.n	8004784 <TIM_Base_SetConfig+0xb0>
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	4a0c      	ldr	r2, [pc, #48]	; (80047a8 <TIM_Base_SetConfig+0xd4>)
 8004778:	4293      	cmp	r3, r2
 800477a:	d003      	beq.n	8004784 <TIM_Base_SetConfig+0xb0>
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	4a0b      	ldr	r2, [pc, #44]	; (80047ac <TIM_Base_SetConfig+0xd8>)
 8004780:	4293      	cmp	r3, r2
 8004782:	d103      	bne.n	800478c <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004784:	683b      	ldr	r3, [r7, #0]
 8004786:	691a      	ldr	r2, [r3, #16]
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2201      	movs	r2, #1
 8004790:	615a      	str	r2, [r3, #20]
}
 8004792:	bf00      	nop
 8004794:	3714      	adds	r7, #20
 8004796:	46bd      	mov	sp, r7
 8004798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479c:	4770      	bx	lr
 800479e:	bf00      	nop
 80047a0:	40012c00 	.word	0x40012c00
 80047a4:	40014000 	.word	0x40014000
 80047a8:	40014400 	.word	0x40014400
 80047ac:	40014800 	.word	0x40014800

080047b0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80047b0:	b480      	push	{r7}
 80047b2:	b087      	sub	sp, #28
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
 80047b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	6a1b      	ldr	r3, [r3, #32]
 80047be:	f023 0201 	bic.w	r2, r3, #1
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	6a1b      	ldr	r3, [r3, #32]
 80047ca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	685b      	ldr	r3, [r3, #4]
 80047d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	699b      	ldr	r3, [r3, #24]
 80047d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80047de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	f023 0303 	bic.w	r3, r3, #3
 80047ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80047ec:	683b      	ldr	r3, [r7, #0]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	68fa      	ldr	r2, [r7, #12]
 80047f2:	4313      	orrs	r3, r2
 80047f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80047f6:	697b      	ldr	r3, [r7, #20]
 80047f8:	f023 0302 	bic.w	r3, r3, #2
 80047fc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80047fe:	683b      	ldr	r3, [r7, #0]
 8004800:	689b      	ldr	r3, [r3, #8]
 8004802:	697a      	ldr	r2, [r7, #20]
 8004804:	4313      	orrs	r3, r2
 8004806:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	4a28      	ldr	r2, [pc, #160]	; (80048ac <TIM_OC1_SetConfig+0xfc>)
 800480c:	4293      	cmp	r3, r2
 800480e:	d00b      	beq.n	8004828 <TIM_OC1_SetConfig+0x78>
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	4a27      	ldr	r2, [pc, #156]	; (80048b0 <TIM_OC1_SetConfig+0x100>)
 8004814:	4293      	cmp	r3, r2
 8004816:	d007      	beq.n	8004828 <TIM_OC1_SetConfig+0x78>
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	4a26      	ldr	r2, [pc, #152]	; (80048b4 <TIM_OC1_SetConfig+0x104>)
 800481c:	4293      	cmp	r3, r2
 800481e:	d003      	beq.n	8004828 <TIM_OC1_SetConfig+0x78>
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	4a25      	ldr	r2, [pc, #148]	; (80048b8 <TIM_OC1_SetConfig+0x108>)
 8004824:	4293      	cmp	r3, r2
 8004826:	d10c      	bne.n	8004842 <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004828:	697b      	ldr	r3, [r7, #20]
 800482a:	f023 0308 	bic.w	r3, r3, #8
 800482e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004830:	683b      	ldr	r3, [r7, #0]
 8004832:	68db      	ldr	r3, [r3, #12]
 8004834:	697a      	ldr	r2, [r7, #20]
 8004836:	4313      	orrs	r3, r2
 8004838:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800483a:	697b      	ldr	r3, [r7, #20]
 800483c:	f023 0304 	bic.w	r3, r3, #4
 8004840:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	4a19      	ldr	r2, [pc, #100]	; (80048ac <TIM_OC1_SetConfig+0xfc>)
 8004846:	4293      	cmp	r3, r2
 8004848:	d00b      	beq.n	8004862 <TIM_OC1_SetConfig+0xb2>
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	4a18      	ldr	r2, [pc, #96]	; (80048b0 <TIM_OC1_SetConfig+0x100>)
 800484e:	4293      	cmp	r3, r2
 8004850:	d007      	beq.n	8004862 <TIM_OC1_SetConfig+0xb2>
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	4a17      	ldr	r2, [pc, #92]	; (80048b4 <TIM_OC1_SetConfig+0x104>)
 8004856:	4293      	cmp	r3, r2
 8004858:	d003      	beq.n	8004862 <TIM_OC1_SetConfig+0xb2>
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	4a16      	ldr	r2, [pc, #88]	; (80048b8 <TIM_OC1_SetConfig+0x108>)
 800485e:	4293      	cmp	r3, r2
 8004860:	d111      	bne.n	8004886 <TIM_OC1_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004862:	693b      	ldr	r3, [r7, #16]
 8004864:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004868:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800486a:	693b      	ldr	r3, [r7, #16]
 800486c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004870:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004872:	683b      	ldr	r3, [r7, #0]
 8004874:	695b      	ldr	r3, [r3, #20]
 8004876:	693a      	ldr	r2, [r7, #16]
 8004878:	4313      	orrs	r3, r2
 800487a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800487c:	683b      	ldr	r3, [r7, #0]
 800487e:	699b      	ldr	r3, [r3, #24]
 8004880:	693a      	ldr	r2, [r7, #16]
 8004882:	4313      	orrs	r3, r2
 8004884:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	693a      	ldr	r2, [r7, #16]
 800488a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	68fa      	ldr	r2, [r7, #12]
 8004890:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004892:	683b      	ldr	r3, [r7, #0]
 8004894:	685a      	ldr	r2, [r3, #4]
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	697a      	ldr	r2, [r7, #20]
 800489e:	621a      	str	r2, [r3, #32]
}
 80048a0:	bf00      	nop
 80048a2:	371c      	adds	r7, #28
 80048a4:	46bd      	mov	sp, r7
 80048a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048aa:	4770      	bx	lr
 80048ac:	40012c00 	.word	0x40012c00
 80048b0:	40014000 	.word	0x40014000
 80048b4:	40014400 	.word	0x40014400
 80048b8:	40014800 	.word	0x40014800

080048bc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80048bc:	b480      	push	{r7}
 80048be:	b087      	sub	sp, #28
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	6078      	str	r0, [r7, #4]
 80048c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	6a1b      	ldr	r3, [r3, #32]
 80048ca:	f023 0210 	bic.w	r2, r3, #16
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	6a1b      	ldr	r3, [r3, #32]
 80048d6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	685b      	ldr	r3, [r3, #4]
 80048dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	699b      	ldr	r3, [r3, #24]
 80048e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80048ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80048ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80048f6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80048f8:	683b      	ldr	r3, [r7, #0]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	021b      	lsls	r3, r3, #8
 80048fe:	68fa      	ldr	r2, [r7, #12]
 8004900:	4313      	orrs	r3, r2
 8004902:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004904:	697b      	ldr	r3, [r7, #20]
 8004906:	f023 0320 	bic.w	r3, r3, #32
 800490a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800490c:	683b      	ldr	r3, [r7, #0]
 800490e:	689b      	ldr	r3, [r3, #8]
 8004910:	011b      	lsls	r3, r3, #4
 8004912:	697a      	ldr	r2, [r7, #20]
 8004914:	4313      	orrs	r3, r2
 8004916:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	4a24      	ldr	r2, [pc, #144]	; (80049ac <TIM_OC2_SetConfig+0xf0>)
 800491c:	4293      	cmp	r3, r2
 800491e:	d10d      	bne.n	800493c <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004920:	697b      	ldr	r3, [r7, #20]
 8004922:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004926:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004928:	683b      	ldr	r3, [r7, #0]
 800492a:	68db      	ldr	r3, [r3, #12]
 800492c:	011b      	lsls	r3, r3, #4
 800492e:	697a      	ldr	r2, [r7, #20]
 8004930:	4313      	orrs	r3, r2
 8004932:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004934:	697b      	ldr	r3, [r7, #20]
 8004936:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800493a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	4a1b      	ldr	r2, [pc, #108]	; (80049ac <TIM_OC2_SetConfig+0xf0>)
 8004940:	4293      	cmp	r3, r2
 8004942:	d00b      	beq.n	800495c <TIM_OC2_SetConfig+0xa0>
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	4a1a      	ldr	r2, [pc, #104]	; (80049b0 <TIM_OC2_SetConfig+0xf4>)
 8004948:	4293      	cmp	r3, r2
 800494a:	d007      	beq.n	800495c <TIM_OC2_SetConfig+0xa0>
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	4a19      	ldr	r2, [pc, #100]	; (80049b4 <TIM_OC2_SetConfig+0xf8>)
 8004950:	4293      	cmp	r3, r2
 8004952:	d003      	beq.n	800495c <TIM_OC2_SetConfig+0xa0>
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	4a18      	ldr	r2, [pc, #96]	; (80049b8 <TIM_OC2_SetConfig+0xfc>)
 8004958:	4293      	cmp	r3, r2
 800495a:	d113      	bne.n	8004984 <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800495c:	693b      	ldr	r3, [r7, #16]
 800495e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004962:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004964:	693b      	ldr	r3, [r7, #16]
 8004966:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800496a:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800496c:	683b      	ldr	r3, [r7, #0]
 800496e:	695b      	ldr	r3, [r3, #20]
 8004970:	009b      	lsls	r3, r3, #2
 8004972:	693a      	ldr	r2, [r7, #16]
 8004974:	4313      	orrs	r3, r2
 8004976:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004978:	683b      	ldr	r3, [r7, #0]
 800497a:	699b      	ldr	r3, [r3, #24]
 800497c:	009b      	lsls	r3, r3, #2
 800497e:	693a      	ldr	r2, [r7, #16]
 8004980:	4313      	orrs	r3, r2
 8004982:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	693a      	ldr	r2, [r7, #16]
 8004988:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	68fa      	ldr	r2, [r7, #12]
 800498e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004990:	683b      	ldr	r3, [r7, #0]
 8004992:	685a      	ldr	r2, [r3, #4]
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	697a      	ldr	r2, [r7, #20]
 800499c:	621a      	str	r2, [r3, #32]
}
 800499e:	bf00      	nop
 80049a0:	371c      	adds	r7, #28
 80049a2:	46bd      	mov	sp, r7
 80049a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a8:	4770      	bx	lr
 80049aa:	bf00      	nop
 80049ac:	40012c00 	.word	0x40012c00
 80049b0:	40014000 	.word	0x40014000
 80049b4:	40014400 	.word	0x40014400
 80049b8:	40014800 	.word	0x40014800

080049bc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80049bc:	b480      	push	{r7}
 80049be:	b087      	sub	sp, #28
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	6078      	str	r0, [r7, #4]
 80049c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	6a1b      	ldr	r3, [r3, #32]
 80049ca:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	6a1b      	ldr	r3, [r3, #32]
 80049d6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	685b      	ldr	r3, [r3, #4]
 80049dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	69db      	ldr	r3, [r3, #28]
 80049e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80049ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	f023 0303 	bic.w	r3, r3, #3
 80049f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80049f8:	683b      	ldr	r3, [r7, #0]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	68fa      	ldr	r2, [r7, #12]
 80049fe:	4313      	orrs	r3, r2
 8004a00:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004a02:	697b      	ldr	r3, [r7, #20]
 8004a04:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004a08:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004a0a:	683b      	ldr	r3, [r7, #0]
 8004a0c:	689b      	ldr	r3, [r3, #8]
 8004a0e:	021b      	lsls	r3, r3, #8
 8004a10:	697a      	ldr	r2, [r7, #20]
 8004a12:	4313      	orrs	r3, r2
 8004a14:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	4a23      	ldr	r2, [pc, #140]	; (8004aa8 <TIM_OC3_SetConfig+0xec>)
 8004a1a:	4293      	cmp	r3, r2
 8004a1c:	d10d      	bne.n	8004a3a <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004a1e:	697b      	ldr	r3, [r7, #20]
 8004a20:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004a24:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004a26:	683b      	ldr	r3, [r7, #0]
 8004a28:	68db      	ldr	r3, [r3, #12]
 8004a2a:	021b      	lsls	r3, r3, #8
 8004a2c:	697a      	ldr	r2, [r7, #20]
 8004a2e:	4313      	orrs	r3, r2
 8004a30:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004a32:	697b      	ldr	r3, [r7, #20]
 8004a34:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004a38:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	4a1a      	ldr	r2, [pc, #104]	; (8004aa8 <TIM_OC3_SetConfig+0xec>)
 8004a3e:	4293      	cmp	r3, r2
 8004a40:	d00b      	beq.n	8004a5a <TIM_OC3_SetConfig+0x9e>
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	4a19      	ldr	r2, [pc, #100]	; (8004aac <TIM_OC3_SetConfig+0xf0>)
 8004a46:	4293      	cmp	r3, r2
 8004a48:	d007      	beq.n	8004a5a <TIM_OC3_SetConfig+0x9e>
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	4a18      	ldr	r2, [pc, #96]	; (8004ab0 <TIM_OC3_SetConfig+0xf4>)
 8004a4e:	4293      	cmp	r3, r2
 8004a50:	d003      	beq.n	8004a5a <TIM_OC3_SetConfig+0x9e>
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	4a17      	ldr	r2, [pc, #92]	; (8004ab4 <TIM_OC3_SetConfig+0xf8>)
 8004a56:	4293      	cmp	r3, r2
 8004a58:	d113      	bne.n	8004a82 <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004a5a:	693b      	ldr	r3, [r7, #16]
 8004a5c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004a60:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004a62:	693b      	ldr	r3, [r7, #16]
 8004a64:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004a68:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004a6a:	683b      	ldr	r3, [r7, #0]
 8004a6c:	695b      	ldr	r3, [r3, #20]
 8004a6e:	011b      	lsls	r3, r3, #4
 8004a70:	693a      	ldr	r2, [r7, #16]
 8004a72:	4313      	orrs	r3, r2
 8004a74:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004a76:	683b      	ldr	r3, [r7, #0]
 8004a78:	699b      	ldr	r3, [r3, #24]
 8004a7a:	011b      	lsls	r3, r3, #4
 8004a7c:	693a      	ldr	r2, [r7, #16]
 8004a7e:	4313      	orrs	r3, r2
 8004a80:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	693a      	ldr	r2, [r7, #16]
 8004a86:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	68fa      	ldr	r2, [r7, #12]
 8004a8c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004a8e:	683b      	ldr	r3, [r7, #0]
 8004a90:	685a      	ldr	r2, [r3, #4]
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	697a      	ldr	r2, [r7, #20]
 8004a9a:	621a      	str	r2, [r3, #32]
}
 8004a9c:	bf00      	nop
 8004a9e:	371c      	adds	r7, #28
 8004aa0:	46bd      	mov	sp, r7
 8004aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa6:	4770      	bx	lr
 8004aa8:	40012c00 	.word	0x40012c00
 8004aac:	40014000 	.word	0x40014000
 8004ab0:	40014400 	.word	0x40014400
 8004ab4:	40014800 	.word	0x40014800

08004ab8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004ab8:	b480      	push	{r7}
 8004aba:	b087      	sub	sp, #28
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	6078      	str	r0, [r7, #4]
 8004ac0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	6a1b      	ldr	r3, [r3, #32]
 8004ac6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	6a1b      	ldr	r3, [r3, #32]
 8004ad2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	685b      	ldr	r3, [r3, #4]
 8004ad8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	69db      	ldr	r3, [r3, #28]
 8004ade:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004ae6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004aea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004af2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004af4:	683b      	ldr	r3, [r7, #0]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	021b      	lsls	r3, r3, #8
 8004afa:	68fa      	ldr	r2, [r7, #12]
 8004afc:	4313      	orrs	r3, r2
 8004afe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004b00:	693b      	ldr	r3, [r7, #16]
 8004b02:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004b06:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004b08:	683b      	ldr	r3, [r7, #0]
 8004b0a:	689b      	ldr	r3, [r3, #8]
 8004b0c:	031b      	lsls	r3, r3, #12
 8004b0e:	693a      	ldr	r2, [r7, #16]
 8004b10:	4313      	orrs	r3, r2
 8004b12:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	4a16      	ldr	r2, [pc, #88]	; (8004b70 <TIM_OC4_SetConfig+0xb8>)
 8004b18:	4293      	cmp	r3, r2
 8004b1a:	d00b      	beq.n	8004b34 <TIM_OC4_SetConfig+0x7c>
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	4a15      	ldr	r2, [pc, #84]	; (8004b74 <TIM_OC4_SetConfig+0xbc>)
 8004b20:	4293      	cmp	r3, r2
 8004b22:	d007      	beq.n	8004b34 <TIM_OC4_SetConfig+0x7c>
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	4a14      	ldr	r2, [pc, #80]	; (8004b78 <TIM_OC4_SetConfig+0xc0>)
 8004b28:	4293      	cmp	r3, r2
 8004b2a:	d003      	beq.n	8004b34 <TIM_OC4_SetConfig+0x7c>
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	4a13      	ldr	r2, [pc, #76]	; (8004b7c <TIM_OC4_SetConfig+0xc4>)
 8004b30:	4293      	cmp	r3, r2
 8004b32:	d109      	bne.n	8004b48 <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004b34:	697b      	ldr	r3, [r7, #20]
 8004b36:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004b3a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004b3c:	683b      	ldr	r3, [r7, #0]
 8004b3e:	695b      	ldr	r3, [r3, #20]
 8004b40:	019b      	lsls	r3, r3, #6
 8004b42:	697a      	ldr	r2, [r7, #20]
 8004b44:	4313      	orrs	r3, r2
 8004b46:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	697a      	ldr	r2, [r7, #20]
 8004b4c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	68fa      	ldr	r2, [r7, #12]
 8004b52:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004b54:	683b      	ldr	r3, [r7, #0]
 8004b56:	685a      	ldr	r2, [r3, #4]
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	693a      	ldr	r2, [r7, #16]
 8004b60:	621a      	str	r2, [r3, #32]
}
 8004b62:	bf00      	nop
 8004b64:	371c      	adds	r7, #28
 8004b66:	46bd      	mov	sp, r7
 8004b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6c:	4770      	bx	lr
 8004b6e:	bf00      	nop
 8004b70:	40012c00 	.word	0x40012c00
 8004b74:	40014000 	.word	0x40014000
 8004b78:	40014400 	.word	0x40014400
 8004b7c:	40014800 	.word	0x40014800

08004b80 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004b80:	b480      	push	{r7}
 8004b82:	b087      	sub	sp, #28
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	6078      	str	r0, [r7, #4]
 8004b88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	6a1b      	ldr	r3, [r3, #32]
 8004b8e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	6a1b      	ldr	r3, [r3, #32]
 8004b9a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	685b      	ldr	r3, [r3, #4]
 8004ba0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ba6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004bae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bb2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004bb4:	683b      	ldr	r3, [r7, #0]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	68fa      	ldr	r2, [r7, #12]
 8004bba:	4313      	orrs	r3, r2
 8004bbc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004bbe:	693b      	ldr	r3, [r7, #16]
 8004bc0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004bc4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004bc6:	683b      	ldr	r3, [r7, #0]
 8004bc8:	689b      	ldr	r3, [r3, #8]
 8004bca:	041b      	lsls	r3, r3, #16
 8004bcc:	693a      	ldr	r2, [r7, #16]
 8004bce:	4313      	orrs	r3, r2
 8004bd0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	4a15      	ldr	r2, [pc, #84]	; (8004c2c <TIM_OC5_SetConfig+0xac>)
 8004bd6:	4293      	cmp	r3, r2
 8004bd8:	d00b      	beq.n	8004bf2 <TIM_OC5_SetConfig+0x72>
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	4a14      	ldr	r2, [pc, #80]	; (8004c30 <TIM_OC5_SetConfig+0xb0>)
 8004bde:	4293      	cmp	r3, r2
 8004be0:	d007      	beq.n	8004bf2 <TIM_OC5_SetConfig+0x72>
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	4a13      	ldr	r2, [pc, #76]	; (8004c34 <TIM_OC5_SetConfig+0xb4>)
 8004be6:	4293      	cmp	r3, r2
 8004be8:	d003      	beq.n	8004bf2 <TIM_OC5_SetConfig+0x72>
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	4a12      	ldr	r2, [pc, #72]	; (8004c38 <TIM_OC5_SetConfig+0xb8>)
 8004bee:	4293      	cmp	r3, r2
 8004bf0:	d109      	bne.n	8004c06 <TIM_OC5_SetConfig+0x86>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004bf2:	697b      	ldr	r3, [r7, #20]
 8004bf4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004bf8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004bfa:	683b      	ldr	r3, [r7, #0]
 8004bfc:	695b      	ldr	r3, [r3, #20]
 8004bfe:	021b      	lsls	r3, r3, #8
 8004c00:	697a      	ldr	r2, [r7, #20]
 8004c02:	4313      	orrs	r3, r2
 8004c04:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	697a      	ldr	r2, [r7, #20]
 8004c0a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	68fa      	ldr	r2, [r7, #12]
 8004c10:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004c12:	683b      	ldr	r3, [r7, #0]
 8004c14:	685a      	ldr	r2, [r3, #4]
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	693a      	ldr	r2, [r7, #16]
 8004c1e:	621a      	str	r2, [r3, #32]
}
 8004c20:	bf00      	nop
 8004c22:	371c      	adds	r7, #28
 8004c24:	46bd      	mov	sp, r7
 8004c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2a:	4770      	bx	lr
 8004c2c:	40012c00 	.word	0x40012c00
 8004c30:	40014000 	.word	0x40014000
 8004c34:	40014400 	.word	0x40014400
 8004c38:	40014800 	.word	0x40014800

08004c3c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004c3c:	b480      	push	{r7}
 8004c3e:	b087      	sub	sp, #28
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	6078      	str	r0, [r7, #4]
 8004c44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	6a1b      	ldr	r3, [r3, #32]
 8004c4a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	6a1b      	ldr	r3, [r3, #32]
 8004c56:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	685b      	ldr	r3, [r3, #4]
 8004c5c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004c6a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c6e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004c70:	683b      	ldr	r3, [r7, #0]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	021b      	lsls	r3, r3, #8
 8004c76:	68fa      	ldr	r2, [r7, #12]
 8004c78:	4313      	orrs	r3, r2
 8004c7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004c7c:	693b      	ldr	r3, [r7, #16]
 8004c7e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004c82:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004c84:	683b      	ldr	r3, [r7, #0]
 8004c86:	689b      	ldr	r3, [r3, #8]
 8004c88:	051b      	lsls	r3, r3, #20
 8004c8a:	693a      	ldr	r2, [r7, #16]
 8004c8c:	4313      	orrs	r3, r2
 8004c8e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	4a16      	ldr	r2, [pc, #88]	; (8004cec <TIM_OC6_SetConfig+0xb0>)
 8004c94:	4293      	cmp	r3, r2
 8004c96:	d00b      	beq.n	8004cb0 <TIM_OC6_SetConfig+0x74>
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	4a15      	ldr	r2, [pc, #84]	; (8004cf0 <TIM_OC6_SetConfig+0xb4>)
 8004c9c:	4293      	cmp	r3, r2
 8004c9e:	d007      	beq.n	8004cb0 <TIM_OC6_SetConfig+0x74>
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	4a14      	ldr	r2, [pc, #80]	; (8004cf4 <TIM_OC6_SetConfig+0xb8>)
 8004ca4:	4293      	cmp	r3, r2
 8004ca6:	d003      	beq.n	8004cb0 <TIM_OC6_SetConfig+0x74>
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	4a13      	ldr	r2, [pc, #76]	; (8004cf8 <TIM_OC6_SetConfig+0xbc>)
 8004cac:	4293      	cmp	r3, r2
 8004cae:	d109      	bne.n	8004cc4 <TIM_OC6_SetConfig+0x88>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004cb0:	697b      	ldr	r3, [r7, #20]
 8004cb2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004cb6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004cb8:	683b      	ldr	r3, [r7, #0]
 8004cba:	695b      	ldr	r3, [r3, #20]
 8004cbc:	029b      	lsls	r3, r3, #10
 8004cbe:	697a      	ldr	r2, [r7, #20]
 8004cc0:	4313      	orrs	r3, r2
 8004cc2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	697a      	ldr	r2, [r7, #20]
 8004cc8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	68fa      	ldr	r2, [r7, #12]
 8004cce:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004cd0:	683b      	ldr	r3, [r7, #0]
 8004cd2:	685a      	ldr	r2, [r3, #4]
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	693a      	ldr	r2, [r7, #16]
 8004cdc:	621a      	str	r2, [r3, #32]
}
 8004cde:	bf00      	nop
 8004ce0:	371c      	adds	r7, #28
 8004ce2:	46bd      	mov	sp, r7
 8004ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce8:	4770      	bx	lr
 8004cea:	bf00      	nop
 8004cec:	40012c00 	.word	0x40012c00
 8004cf0:	40014000 	.word	0x40014000
 8004cf4:	40014400 	.word	0x40014400
 8004cf8:	40014800 	.word	0x40014800

08004cfc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004cfc:	b480      	push	{r7}
 8004cfe:	b087      	sub	sp, #28
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	60f8      	str	r0, [r7, #12]
 8004d04:	60b9      	str	r1, [r7, #8]
 8004d06:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	6a1b      	ldr	r3, [r3, #32]
 8004d0c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	6a1b      	ldr	r3, [r3, #32]
 8004d12:	f023 0201 	bic.w	r2, r3, #1
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	699b      	ldr	r3, [r3, #24]
 8004d1e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004d20:	693b      	ldr	r3, [r7, #16]
 8004d22:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004d26:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	011b      	lsls	r3, r3, #4
 8004d2c:	693a      	ldr	r2, [r7, #16]
 8004d2e:	4313      	orrs	r3, r2
 8004d30:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004d32:	697b      	ldr	r3, [r7, #20]
 8004d34:	f023 030a 	bic.w	r3, r3, #10
 8004d38:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004d3a:	697a      	ldr	r2, [r7, #20]
 8004d3c:	68bb      	ldr	r3, [r7, #8]
 8004d3e:	4313      	orrs	r3, r2
 8004d40:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	693a      	ldr	r2, [r7, #16]
 8004d46:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	697a      	ldr	r2, [r7, #20]
 8004d4c:	621a      	str	r2, [r3, #32]
}
 8004d4e:	bf00      	nop
 8004d50:	371c      	adds	r7, #28
 8004d52:	46bd      	mov	sp, r7
 8004d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d58:	4770      	bx	lr

08004d5a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004d5a:	b480      	push	{r7}
 8004d5c:	b087      	sub	sp, #28
 8004d5e:	af00      	add	r7, sp, #0
 8004d60:	60f8      	str	r0, [r7, #12]
 8004d62:	60b9      	str	r1, [r7, #8]
 8004d64:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	6a1b      	ldr	r3, [r3, #32]
 8004d6a:	f023 0210 	bic.w	r2, r3, #16
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	699b      	ldr	r3, [r3, #24]
 8004d76:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	6a1b      	ldr	r3, [r3, #32]
 8004d7c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004d7e:	697b      	ldr	r3, [r7, #20]
 8004d80:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004d84:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	031b      	lsls	r3, r3, #12
 8004d8a:	697a      	ldr	r2, [r7, #20]
 8004d8c:	4313      	orrs	r3, r2
 8004d8e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004d90:	693b      	ldr	r3, [r7, #16]
 8004d92:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004d96:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004d98:	68bb      	ldr	r3, [r7, #8]
 8004d9a:	011b      	lsls	r3, r3, #4
 8004d9c:	693a      	ldr	r2, [r7, #16]
 8004d9e:	4313      	orrs	r3, r2
 8004da0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	697a      	ldr	r2, [r7, #20]
 8004da6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	693a      	ldr	r2, [r7, #16]
 8004dac:	621a      	str	r2, [r3, #32]
}
 8004dae:	bf00      	nop
 8004db0:	371c      	adds	r7, #28
 8004db2:	46bd      	mov	sp, r7
 8004db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db8:	4770      	bx	lr

08004dba <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004dba:	b480      	push	{r7}
 8004dbc:	b085      	sub	sp, #20
 8004dbe:	af00      	add	r7, sp, #0
 8004dc0:	6078      	str	r0, [r7, #4]
 8004dc2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	689b      	ldr	r3, [r3, #8]
 8004dc8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004dd0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004dd2:	683a      	ldr	r2, [r7, #0]
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	4313      	orrs	r3, r2
 8004dd8:	f043 0307 	orr.w	r3, r3, #7
 8004ddc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	68fa      	ldr	r2, [r7, #12]
 8004de2:	609a      	str	r2, [r3, #8]
}
 8004de4:	bf00      	nop
 8004de6:	3714      	adds	r7, #20
 8004de8:	46bd      	mov	sp, r7
 8004dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dee:	4770      	bx	lr

08004df0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004df0:	b480      	push	{r7}
 8004df2:	b087      	sub	sp, #28
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	60f8      	str	r0, [r7, #12]
 8004df8:	60b9      	str	r1, [r7, #8]
 8004dfa:	607a      	str	r2, [r7, #4]
 8004dfc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	689b      	ldr	r3, [r3, #8]
 8004e02:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004e04:	697b      	ldr	r3, [r7, #20]
 8004e06:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004e0a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004e0c:	683b      	ldr	r3, [r7, #0]
 8004e0e:	021a      	lsls	r2, r3, #8
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	431a      	orrs	r2, r3
 8004e14:	68bb      	ldr	r3, [r7, #8]
 8004e16:	4313      	orrs	r3, r2
 8004e18:	697a      	ldr	r2, [r7, #20]
 8004e1a:	4313      	orrs	r3, r2
 8004e1c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	697a      	ldr	r2, [r7, #20]
 8004e22:	609a      	str	r2, [r3, #8]
}
 8004e24:	bf00      	nop
 8004e26:	371c      	adds	r7, #28
 8004e28:	46bd      	mov	sp, r7
 8004e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2e:	4770      	bx	lr

08004e30 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004e30:	b480      	push	{r7}
 8004e32:	b087      	sub	sp, #28
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	60f8      	str	r0, [r7, #12]
 8004e38:	60b9      	str	r1, [r7, #8]
 8004e3a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004e3c:	68bb      	ldr	r3, [r7, #8]
 8004e3e:	f003 031f 	and.w	r3, r3, #31
 8004e42:	2201      	movs	r2, #1
 8004e44:	fa02 f303 	lsl.w	r3, r2, r3
 8004e48:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	6a1a      	ldr	r2, [r3, #32]
 8004e4e:	697b      	ldr	r3, [r7, #20]
 8004e50:	43db      	mvns	r3, r3
 8004e52:	401a      	ands	r2, r3
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	6a1a      	ldr	r2, [r3, #32]
 8004e5c:	68bb      	ldr	r3, [r7, #8]
 8004e5e:	f003 031f 	and.w	r3, r3, #31
 8004e62:	6879      	ldr	r1, [r7, #4]
 8004e64:	fa01 f303 	lsl.w	r3, r1, r3
 8004e68:	431a      	orrs	r2, r3
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	621a      	str	r2, [r3, #32]
}
 8004e6e:	bf00      	nop
 8004e70:	371c      	adds	r7, #28
 8004e72:	46bd      	mov	sp, r7
 8004e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e78:	4770      	bx	lr
	...

08004e7c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004e7c:	b480      	push	{r7}
 8004e7e:	b085      	sub	sp, #20
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	6078      	str	r0, [r7, #4]
 8004e84:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e8c:	2b01      	cmp	r3, #1
 8004e8e:	d101      	bne.n	8004e94 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004e90:	2302      	movs	r3, #2
 8004e92:	e04f      	b.n	8004f34 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	2201      	movs	r2, #1
 8004e98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	2202      	movs	r2, #2
 8004ea0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	685b      	ldr	r3, [r3, #4]
 8004eaa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	689b      	ldr	r3, [r3, #8]
 8004eb2:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	4a21      	ldr	r2, [pc, #132]	; (8004f40 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8004eba:	4293      	cmp	r3, r2
 8004ebc:	d108      	bne.n	8004ed0 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004ec4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004ec6:	683b      	ldr	r3, [r7, #0]
 8004ec8:	685b      	ldr	r3, [r3, #4]
 8004eca:	68fa      	ldr	r2, [r7, #12]
 8004ecc:	4313      	orrs	r3, r2
 8004ece:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ed6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004ed8:	683b      	ldr	r3, [r7, #0]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	68fa      	ldr	r2, [r7, #12]
 8004ede:	4313      	orrs	r3, r2
 8004ee0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	68fa      	ldr	r2, [r7, #12]
 8004ee8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	4a14      	ldr	r2, [pc, #80]	; (8004f40 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8004ef0:	4293      	cmp	r3, r2
 8004ef2:	d009      	beq.n	8004f08 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004efc:	d004      	beq.n	8004f08 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	4a10      	ldr	r2, [pc, #64]	; (8004f44 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004f04:	4293      	cmp	r3, r2
 8004f06:	d10c      	bne.n	8004f22 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004f08:	68bb      	ldr	r3, [r7, #8]
 8004f0a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004f0e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004f10:	683b      	ldr	r3, [r7, #0]
 8004f12:	689b      	ldr	r3, [r3, #8]
 8004f14:	68ba      	ldr	r2, [r7, #8]
 8004f16:	4313      	orrs	r3, r2
 8004f18:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	68ba      	ldr	r2, [r7, #8]
 8004f20:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	2201      	movs	r2, #1
 8004f26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	2200      	movs	r2, #0
 8004f2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004f32:	2300      	movs	r3, #0
}
 8004f34:	4618      	mov	r0, r3
 8004f36:	3714      	adds	r7, #20
 8004f38:	46bd      	mov	sp, r7
 8004f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3e:	4770      	bx	lr
 8004f40:	40012c00 	.word	0x40012c00
 8004f44:	40014000 	.word	0x40014000

08004f48 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004f48:	b480      	push	{r7}
 8004f4a:	b085      	sub	sp, #20
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	6078      	str	r0, [r7, #4]
 8004f50:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004f52:	2300      	movs	r3, #0
 8004f54:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f5c:	2b01      	cmp	r3, #1
 8004f5e:	d101      	bne.n	8004f64 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004f60:	2302      	movs	r3, #2
 8004f62:	e060      	b.n	8005026 <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	2201      	movs	r2, #1
 8004f68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004f72:	683b      	ldr	r3, [r7, #0]
 8004f74:	68db      	ldr	r3, [r3, #12]
 8004f76:	4313      	orrs	r3, r2
 8004f78:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004f80:	683b      	ldr	r3, [r7, #0]
 8004f82:	689b      	ldr	r3, [r3, #8]
 8004f84:	4313      	orrs	r3, r2
 8004f86:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004f8e:	683b      	ldr	r3, [r7, #0]
 8004f90:	685b      	ldr	r3, [r3, #4]
 8004f92:	4313      	orrs	r3, r2
 8004f94:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004f9c:	683b      	ldr	r3, [r7, #0]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	4313      	orrs	r3, r2
 8004fa2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004faa:	683b      	ldr	r3, [r7, #0]
 8004fac:	691b      	ldr	r3, [r3, #16]
 8004fae:	4313      	orrs	r3, r2
 8004fb0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004fb8:	683b      	ldr	r3, [r7, #0]
 8004fba:	695b      	ldr	r3, [r3, #20]
 8004fbc:	4313      	orrs	r3, r2
 8004fbe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004fc6:	683b      	ldr	r3, [r7, #0]
 8004fc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fca:	4313      	orrs	r3, r2
 8004fcc:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8004fd4:	683b      	ldr	r3, [r7, #0]
 8004fd6:	699b      	ldr	r3, [r3, #24]
 8004fd8:	041b      	lsls	r3, r3, #16
 8004fda:	4313      	orrs	r3, r2
 8004fdc:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	4a14      	ldr	r2, [pc, #80]	; (8005034 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8004fe4:	4293      	cmp	r3, r2
 8004fe6:	d115      	bne.n	8005014 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8004fee:	683b      	ldr	r3, [r7, #0]
 8004ff0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ff2:	051b      	lsls	r3, r3, #20
 8004ff4:	4313      	orrs	r3, r2
 8004ff6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004ffe:	683b      	ldr	r3, [r7, #0]
 8005000:	69db      	ldr	r3, [r3, #28]
 8005002:	4313      	orrs	r3, r2
 8005004:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800500c:	683b      	ldr	r3, [r7, #0]
 800500e:	6a1b      	ldr	r3, [r3, #32]
 8005010:	4313      	orrs	r3, r2
 8005012:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	68fa      	ldr	r2, [r7, #12]
 800501a:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	2200      	movs	r2, #0
 8005020:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005024:	2300      	movs	r3, #0
}
 8005026:	4618      	mov	r0, r3
 8005028:	3714      	adds	r7, #20
 800502a:	46bd      	mov	sp, r7
 800502c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005030:	4770      	bx	lr
 8005032:	bf00      	nop
 8005034:	40012c00 	.word	0x40012c00

08005038 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005038:	b580      	push	{r7, lr}
 800503a:	b082      	sub	sp, #8
 800503c:	af00      	add	r7, sp, #0
 800503e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	2b00      	cmp	r3, #0
 8005044:	d101      	bne.n	800504a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005046:	2301      	movs	r3, #1
 8005048:	e040      	b.n	80050cc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800504e:	2b00      	cmp	r3, #0
 8005050:	d106      	bne.n	8005060 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	2200      	movs	r2, #0
 8005056:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800505a:	6878      	ldr	r0, [r7, #4]
 800505c:	f7fc faae 	bl	80015bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	2224      	movs	r2, #36	; 0x24
 8005064:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	681a      	ldr	r2, [r3, #0]
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	f022 0201 	bic.w	r2, r2, #1
 8005074:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005076:	6878      	ldr	r0, [r7, #4]
 8005078:	f000 f8b6 	bl	80051e8 <UART_SetConfig>
 800507c:	4603      	mov	r3, r0
 800507e:	2b01      	cmp	r3, #1
 8005080:	d101      	bne.n	8005086 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005082:	2301      	movs	r3, #1
 8005084:	e022      	b.n	80050cc <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800508a:	2b00      	cmp	r3, #0
 800508c:	d002      	beq.n	8005094 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800508e:	6878      	ldr	r0, [r7, #4]
 8005090:	f000 f9e0 	bl	8005454 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	685a      	ldr	r2, [r3, #4]
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80050a2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	689a      	ldr	r2, [r3, #8]
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80050b2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	681a      	ldr	r2, [r3, #0]
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f042 0201 	orr.w	r2, r2, #1
 80050c2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80050c4:	6878      	ldr	r0, [r7, #4]
 80050c6:	f000 fa67 	bl	8005598 <UART_CheckIdleState>
 80050ca:	4603      	mov	r3, r0
}
 80050cc:	4618      	mov	r0, r3
 80050ce:	3708      	adds	r7, #8
 80050d0:	46bd      	mov	sp, r7
 80050d2:	bd80      	pop	{r7, pc}

080050d4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80050d4:	b580      	push	{r7, lr}
 80050d6:	b08a      	sub	sp, #40	; 0x28
 80050d8:	af02      	add	r7, sp, #8
 80050da:	60f8      	str	r0, [r7, #12]
 80050dc:	60b9      	str	r1, [r7, #8]
 80050de:	603b      	str	r3, [r7, #0]
 80050e0:	4613      	mov	r3, r2
 80050e2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80050e8:	2b20      	cmp	r3, #32
 80050ea:	d178      	bne.n	80051de <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 80050ec:	68bb      	ldr	r3, [r7, #8]
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d002      	beq.n	80050f8 <HAL_UART_Transmit+0x24>
 80050f2:	88fb      	ldrh	r3, [r7, #6]
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d101      	bne.n	80050fc <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80050f8:	2301      	movs	r3, #1
 80050fa:	e071      	b.n	80051e0 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	2200      	movs	r2, #0
 8005100:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	2221      	movs	r2, #33	; 0x21
 8005108:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800510a:	f7fc fbeb 	bl	80018e4 <HAL_GetTick>
 800510e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	88fa      	ldrh	r2, [r7, #6]
 8005114:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	88fa      	ldrh	r2, [r7, #6]
 800511c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	689b      	ldr	r3, [r3, #8]
 8005124:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005128:	d108      	bne.n	800513c <HAL_UART_Transmit+0x68>
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	691b      	ldr	r3, [r3, #16]
 800512e:	2b00      	cmp	r3, #0
 8005130:	d104      	bne.n	800513c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8005132:	2300      	movs	r3, #0
 8005134:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005136:	68bb      	ldr	r3, [r7, #8]
 8005138:	61bb      	str	r3, [r7, #24]
 800513a:	e003      	b.n	8005144 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800513c:	68bb      	ldr	r3, [r7, #8]
 800513e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005140:	2300      	movs	r3, #0
 8005142:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005144:	e030      	b.n	80051a8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005146:	683b      	ldr	r3, [r7, #0]
 8005148:	9300      	str	r3, [sp, #0]
 800514a:	697b      	ldr	r3, [r7, #20]
 800514c:	2200      	movs	r2, #0
 800514e:	2180      	movs	r1, #128	; 0x80
 8005150:	68f8      	ldr	r0, [r7, #12]
 8005152:	f000 fac9 	bl	80056e8 <UART_WaitOnFlagUntilTimeout>
 8005156:	4603      	mov	r3, r0
 8005158:	2b00      	cmp	r3, #0
 800515a:	d004      	beq.n	8005166 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	2220      	movs	r2, #32
 8005160:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8005162:	2303      	movs	r3, #3
 8005164:	e03c      	b.n	80051e0 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8005166:	69fb      	ldr	r3, [r7, #28]
 8005168:	2b00      	cmp	r3, #0
 800516a:	d10b      	bne.n	8005184 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800516c:	69bb      	ldr	r3, [r7, #24]
 800516e:	881a      	ldrh	r2, [r3, #0]
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005178:	b292      	uxth	r2, r2
 800517a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800517c:	69bb      	ldr	r3, [r7, #24]
 800517e:	3302      	adds	r3, #2
 8005180:	61bb      	str	r3, [r7, #24]
 8005182:	e008      	b.n	8005196 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005184:	69fb      	ldr	r3, [r7, #28]
 8005186:	781a      	ldrb	r2, [r3, #0]
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	b292      	uxth	r2, r2
 800518e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005190:	69fb      	ldr	r3, [r7, #28]
 8005192:	3301      	adds	r3, #1
 8005194:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800519c:	b29b      	uxth	r3, r3
 800519e:	3b01      	subs	r3, #1
 80051a0:	b29a      	uxth	r2, r3
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80051ae:	b29b      	uxth	r3, r3
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d1c8      	bne.n	8005146 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80051b4:	683b      	ldr	r3, [r7, #0]
 80051b6:	9300      	str	r3, [sp, #0]
 80051b8:	697b      	ldr	r3, [r7, #20]
 80051ba:	2200      	movs	r2, #0
 80051bc:	2140      	movs	r1, #64	; 0x40
 80051be:	68f8      	ldr	r0, [r7, #12]
 80051c0:	f000 fa92 	bl	80056e8 <UART_WaitOnFlagUntilTimeout>
 80051c4:	4603      	mov	r3, r0
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d004      	beq.n	80051d4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	2220      	movs	r2, #32
 80051ce:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 80051d0:	2303      	movs	r3, #3
 80051d2:	e005      	b.n	80051e0 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	2220      	movs	r2, #32
 80051d8:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80051da:	2300      	movs	r3, #0
 80051dc:	e000      	b.n	80051e0 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 80051de:	2302      	movs	r3, #2
  }
}
 80051e0:	4618      	mov	r0, r3
 80051e2:	3720      	adds	r7, #32
 80051e4:	46bd      	mov	sp, r7
 80051e6:	bd80      	pop	{r7, pc}

080051e8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80051e8:	b580      	push	{r7, lr}
 80051ea:	b088      	sub	sp, #32
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80051f0:	2300      	movs	r3, #0
 80051f2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	689a      	ldr	r2, [r3, #8]
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	691b      	ldr	r3, [r3, #16]
 80051fc:	431a      	orrs	r2, r3
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	695b      	ldr	r3, [r3, #20]
 8005202:	431a      	orrs	r2, r3
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	69db      	ldr	r3, [r3, #28]
 8005208:	4313      	orrs	r3, r2
 800520a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	681a      	ldr	r2, [r3, #0]
 8005212:	4b8a      	ldr	r3, [pc, #552]	; (800543c <UART_SetConfig+0x254>)
 8005214:	4013      	ands	r3, r2
 8005216:	687a      	ldr	r2, [r7, #4]
 8005218:	6812      	ldr	r2, [r2, #0]
 800521a:	6979      	ldr	r1, [r7, #20]
 800521c:	430b      	orrs	r3, r1
 800521e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	685b      	ldr	r3, [r3, #4]
 8005226:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	68da      	ldr	r2, [r3, #12]
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	430a      	orrs	r2, r1
 8005234:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	699b      	ldr	r3, [r3, #24]
 800523a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	6a1b      	ldr	r3, [r3, #32]
 8005240:	697a      	ldr	r2, [r7, #20]
 8005242:	4313      	orrs	r3, r2
 8005244:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	689b      	ldr	r3, [r3, #8]
 800524c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	697a      	ldr	r2, [r7, #20]
 8005256:	430a      	orrs	r2, r1
 8005258:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	4a78      	ldr	r2, [pc, #480]	; (8005440 <UART_SetConfig+0x258>)
 8005260:	4293      	cmp	r3, r2
 8005262:	d120      	bne.n	80052a6 <UART_SetConfig+0xbe>
 8005264:	4b77      	ldr	r3, [pc, #476]	; (8005444 <UART_SetConfig+0x25c>)
 8005266:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005268:	f003 0303 	and.w	r3, r3, #3
 800526c:	2b03      	cmp	r3, #3
 800526e:	d817      	bhi.n	80052a0 <UART_SetConfig+0xb8>
 8005270:	a201      	add	r2, pc, #4	; (adr r2, 8005278 <UART_SetConfig+0x90>)
 8005272:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005276:	bf00      	nop
 8005278:	08005289 	.word	0x08005289
 800527c:	08005295 	.word	0x08005295
 8005280:	0800529b 	.word	0x0800529b
 8005284:	0800528f 	.word	0x0800528f
 8005288:	2300      	movs	r3, #0
 800528a:	77fb      	strb	r3, [r7, #31]
 800528c:	e01d      	b.n	80052ca <UART_SetConfig+0xe2>
 800528e:	2302      	movs	r3, #2
 8005290:	77fb      	strb	r3, [r7, #31]
 8005292:	e01a      	b.n	80052ca <UART_SetConfig+0xe2>
 8005294:	2304      	movs	r3, #4
 8005296:	77fb      	strb	r3, [r7, #31]
 8005298:	e017      	b.n	80052ca <UART_SetConfig+0xe2>
 800529a:	2308      	movs	r3, #8
 800529c:	77fb      	strb	r3, [r7, #31]
 800529e:	e014      	b.n	80052ca <UART_SetConfig+0xe2>
 80052a0:	2310      	movs	r3, #16
 80052a2:	77fb      	strb	r3, [r7, #31]
 80052a4:	e011      	b.n	80052ca <UART_SetConfig+0xe2>
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	4a67      	ldr	r2, [pc, #412]	; (8005448 <UART_SetConfig+0x260>)
 80052ac:	4293      	cmp	r3, r2
 80052ae:	d102      	bne.n	80052b6 <UART_SetConfig+0xce>
 80052b0:	2300      	movs	r3, #0
 80052b2:	77fb      	strb	r3, [r7, #31]
 80052b4:	e009      	b.n	80052ca <UART_SetConfig+0xe2>
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	4a64      	ldr	r2, [pc, #400]	; (800544c <UART_SetConfig+0x264>)
 80052bc:	4293      	cmp	r3, r2
 80052be:	d102      	bne.n	80052c6 <UART_SetConfig+0xde>
 80052c0:	2300      	movs	r3, #0
 80052c2:	77fb      	strb	r3, [r7, #31]
 80052c4:	e001      	b.n	80052ca <UART_SetConfig+0xe2>
 80052c6:	2310      	movs	r3, #16
 80052c8:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	69db      	ldr	r3, [r3, #28]
 80052ce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80052d2:	d15a      	bne.n	800538a <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 80052d4:	7ffb      	ldrb	r3, [r7, #31]
 80052d6:	2b08      	cmp	r3, #8
 80052d8:	d827      	bhi.n	800532a <UART_SetConfig+0x142>
 80052da:	a201      	add	r2, pc, #4	; (adr r2, 80052e0 <UART_SetConfig+0xf8>)
 80052dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052e0:	08005305 	.word	0x08005305
 80052e4:	0800530d 	.word	0x0800530d
 80052e8:	08005315 	.word	0x08005315
 80052ec:	0800532b 	.word	0x0800532b
 80052f0:	0800531b 	.word	0x0800531b
 80052f4:	0800532b 	.word	0x0800532b
 80052f8:	0800532b 	.word	0x0800532b
 80052fc:	0800532b 	.word	0x0800532b
 8005300:	08005323 	.word	0x08005323
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005304:	f7fe f826 	bl	8003354 <HAL_RCC_GetPCLK1Freq>
 8005308:	61b8      	str	r0, [r7, #24]
        break;
 800530a:	e013      	b.n	8005334 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800530c:	f7fe f844 	bl	8003398 <HAL_RCC_GetPCLK2Freq>
 8005310:	61b8      	str	r0, [r7, #24]
        break;
 8005312:	e00f      	b.n	8005334 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005314:	4b4e      	ldr	r3, [pc, #312]	; (8005450 <UART_SetConfig+0x268>)
 8005316:	61bb      	str	r3, [r7, #24]
        break;
 8005318:	e00c      	b.n	8005334 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800531a:	f7fd ffa5 	bl	8003268 <HAL_RCC_GetSysClockFreq>
 800531e:	61b8      	str	r0, [r7, #24]
        break;
 8005320:	e008      	b.n	8005334 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005322:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005326:	61bb      	str	r3, [r7, #24]
        break;
 8005328:	e004      	b.n	8005334 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 800532a:	2300      	movs	r3, #0
 800532c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800532e:	2301      	movs	r3, #1
 8005330:	77bb      	strb	r3, [r7, #30]
        break;
 8005332:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005334:	69bb      	ldr	r3, [r7, #24]
 8005336:	2b00      	cmp	r3, #0
 8005338:	d074      	beq.n	8005424 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800533a:	69bb      	ldr	r3, [r7, #24]
 800533c:	005a      	lsls	r2, r3, #1
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	685b      	ldr	r3, [r3, #4]
 8005342:	085b      	lsrs	r3, r3, #1
 8005344:	441a      	add	r2, r3
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	685b      	ldr	r3, [r3, #4]
 800534a:	fbb2 f3f3 	udiv	r3, r2, r3
 800534e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005350:	693b      	ldr	r3, [r7, #16]
 8005352:	2b0f      	cmp	r3, #15
 8005354:	d916      	bls.n	8005384 <UART_SetConfig+0x19c>
 8005356:	693b      	ldr	r3, [r7, #16]
 8005358:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800535c:	d212      	bcs.n	8005384 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800535e:	693b      	ldr	r3, [r7, #16]
 8005360:	b29b      	uxth	r3, r3
 8005362:	f023 030f 	bic.w	r3, r3, #15
 8005366:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005368:	693b      	ldr	r3, [r7, #16]
 800536a:	085b      	lsrs	r3, r3, #1
 800536c:	b29b      	uxth	r3, r3
 800536e:	f003 0307 	and.w	r3, r3, #7
 8005372:	b29a      	uxth	r2, r3
 8005374:	89fb      	ldrh	r3, [r7, #14]
 8005376:	4313      	orrs	r3, r2
 8005378:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	89fa      	ldrh	r2, [r7, #14]
 8005380:	60da      	str	r2, [r3, #12]
 8005382:	e04f      	b.n	8005424 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8005384:	2301      	movs	r3, #1
 8005386:	77bb      	strb	r3, [r7, #30]
 8005388:	e04c      	b.n	8005424 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800538a:	7ffb      	ldrb	r3, [r7, #31]
 800538c:	2b08      	cmp	r3, #8
 800538e:	d828      	bhi.n	80053e2 <UART_SetConfig+0x1fa>
 8005390:	a201      	add	r2, pc, #4	; (adr r2, 8005398 <UART_SetConfig+0x1b0>)
 8005392:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005396:	bf00      	nop
 8005398:	080053bd 	.word	0x080053bd
 800539c:	080053c5 	.word	0x080053c5
 80053a0:	080053cd 	.word	0x080053cd
 80053a4:	080053e3 	.word	0x080053e3
 80053a8:	080053d3 	.word	0x080053d3
 80053ac:	080053e3 	.word	0x080053e3
 80053b0:	080053e3 	.word	0x080053e3
 80053b4:	080053e3 	.word	0x080053e3
 80053b8:	080053db 	.word	0x080053db
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80053bc:	f7fd ffca 	bl	8003354 <HAL_RCC_GetPCLK1Freq>
 80053c0:	61b8      	str	r0, [r7, #24]
        break;
 80053c2:	e013      	b.n	80053ec <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80053c4:	f7fd ffe8 	bl	8003398 <HAL_RCC_GetPCLK2Freq>
 80053c8:	61b8      	str	r0, [r7, #24]
        break;
 80053ca:	e00f      	b.n	80053ec <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80053cc:	4b20      	ldr	r3, [pc, #128]	; (8005450 <UART_SetConfig+0x268>)
 80053ce:	61bb      	str	r3, [r7, #24]
        break;
 80053d0:	e00c      	b.n	80053ec <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80053d2:	f7fd ff49 	bl	8003268 <HAL_RCC_GetSysClockFreq>
 80053d6:	61b8      	str	r0, [r7, #24]
        break;
 80053d8:	e008      	b.n	80053ec <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80053da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80053de:	61bb      	str	r3, [r7, #24]
        break;
 80053e0:	e004      	b.n	80053ec <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 80053e2:	2300      	movs	r3, #0
 80053e4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80053e6:	2301      	movs	r3, #1
 80053e8:	77bb      	strb	r3, [r7, #30]
        break;
 80053ea:	bf00      	nop
    }

    if (pclk != 0U)
 80053ec:	69bb      	ldr	r3, [r7, #24]
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d018      	beq.n	8005424 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	685b      	ldr	r3, [r3, #4]
 80053f6:	085a      	lsrs	r2, r3, #1
 80053f8:	69bb      	ldr	r3, [r7, #24]
 80053fa:	441a      	add	r2, r3
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	685b      	ldr	r3, [r3, #4]
 8005400:	fbb2 f3f3 	udiv	r3, r2, r3
 8005404:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005406:	693b      	ldr	r3, [r7, #16]
 8005408:	2b0f      	cmp	r3, #15
 800540a:	d909      	bls.n	8005420 <UART_SetConfig+0x238>
 800540c:	693b      	ldr	r3, [r7, #16]
 800540e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005412:	d205      	bcs.n	8005420 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005414:	693b      	ldr	r3, [r7, #16]
 8005416:	b29a      	uxth	r2, r3
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	60da      	str	r2, [r3, #12]
 800541e:	e001      	b.n	8005424 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8005420:	2301      	movs	r3, #1
 8005422:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	2200      	movs	r2, #0
 8005428:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	2200      	movs	r2, #0
 800542e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8005430:	7fbb      	ldrb	r3, [r7, #30]
}
 8005432:	4618      	mov	r0, r3
 8005434:	3720      	adds	r7, #32
 8005436:	46bd      	mov	sp, r7
 8005438:	bd80      	pop	{r7, pc}
 800543a:	bf00      	nop
 800543c:	efff69f3 	.word	0xefff69f3
 8005440:	40013800 	.word	0x40013800
 8005444:	40021000 	.word	0x40021000
 8005448:	40004400 	.word	0x40004400
 800544c:	40004800 	.word	0x40004800
 8005450:	007a1200 	.word	0x007a1200

08005454 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005454:	b480      	push	{r7}
 8005456:	b083      	sub	sp, #12
 8005458:	af00      	add	r7, sp, #0
 800545a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005460:	f003 0301 	and.w	r3, r3, #1
 8005464:	2b00      	cmp	r3, #0
 8005466:	d00a      	beq.n	800547e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	685b      	ldr	r3, [r3, #4]
 800546e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	430a      	orrs	r2, r1
 800547c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005482:	f003 0302 	and.w	r3, r3, #2
 8005486:	2b00      	cmp	r3, #0
 8005488:	d00a      	beq.n	80054a0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	685b      	ldr	r3, [r3, #4]
 8005490:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	430a      	orrs	r2, r1
 800549e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054a4:	f003 0304 	and.w	r3, r3, #4
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d00a      	beq.n	80054c2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	685b      	ldr	r3, [r3, #4]
 80054b2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	430a      	orrs	r2, r1
 80054c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054c6:	f003 0308 	and.w	r3, r3, #8
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d00a      	beq.n	80054e4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	685b      	ldr	r3, [r3, #4]
 80054d4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	430a      	orrs	r2, r1
 80054e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054e8:	f003 0310 	and.w	r3, r3, #16
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d00a      	beq.n	8005506 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	689b      	ldr	r3, [r3, #8]
 80054f6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	430a      	orrs	r2, r1
 8005504:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800550a:	f003 0320 	and.w	r3, r3, #32
 800550e:	2b00      	cmp	r3, #0
 8005510:	d00a      	beq.n	8005528 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	689b      	ldr	r3, [r3, #8]
 8005518:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	430a      	orrs	r2, r1
 8005526:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800552c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005530:	2b00      	cmp	r3, #0
 8005532:	d01a      	beq.n	800556a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	685b      	ldr	r3, [r3, #4]
 800553a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	430a      	orrs	r2, r1
 8005548:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800554e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005552:	d10a      	bne.n	800556a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	685b      	ldr	r3, [r3, #4]
 800555a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	430a      	orrs	r2, r1
 8005568:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800556e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005572:	2b00      	cmp	r3, #0
 8005574:	d00a      	beq.n	800558c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	685b      	ldr	r3, [r3, #4]
 800557c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	430a      	orrs	r2, r1
 800558a:	605a      	str	r2, [r3, #4]
  }
}
 800558c:	bf00      	nop
 800558e:	370c      	adds	r7, #12
 8005590:	46bd      	mov	sp, r7
 8005592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005596:	4770      	bx	lr

08005598 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005598:	b580      	push	{r7, lr}
 800559a:	b098      	sub	sp, #96	; 0x60
 800559c:	af02      	add	r7, sp, #8
 800559e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	2200      	movs	r2, #0
 80055a4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80055a8:	f7fc f99c 	bl	80018e4 <HAL_GetTick>
 80055ac:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	f003 0308 	and.w	r3, r3, #8
 80055b8:	2b08      	cmp	r3, #8
 80055ba:	d12e      	bne.n	800561a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80055bc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80055c0:	9300      	str	r3, [sp, #0]
 80055c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80055c4:	2200      	movs	r2, #0
 80055c6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80055ca:	6878      	ldr	r0, [r7, #4]
 80055cc:	f000 f88c 	bl	80056e8 <UART_WaitOnFlagUntilTimeout>
 80055d0:	4603      	mov	r3, r0
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d021      	beq.n	800561a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055de:	e853 3f00 	ldrex	r3, [r3]
 80055e2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80055e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055e6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80055ea:	653b      	str	r3, [r7, #80]	; 0x50
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	461a      	mov	r2, r3
 80055f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80055f4:	647b      	str	r3, [r7, #68]	; 0x44
 80055f6:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055f8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80055fa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80055fc:	e841 2300 	strex	r3, r2, [r1]
 8005600:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005602:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005604:	2b00      	cmp	r3, #0
 8005606:	d1e6      	bne.n	80055d6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	2220      	movs	r2, #32
 800560c:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	2200      	movs	r2, #0
 8005612:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005616:	2303      	movs	r3, #3
 8005618:	e062      	b.n	80056e0 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	f003 0304 	and.w	r3, r3, #4
 8005624:	2b04      	cmp	r3, #4
 8005626:	d149      	bne.n	80056bc <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005628:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800562c:	9300      	str	r3, [sp, #0]
 800562e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005630:	2200      	movs	r2, #0
 8005632:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005636:	6878      	ldr	r0, [r7, #4]
 8005638:	f000 f856 	bl	80056e8 <UART_WaitOnFlagUntilTimeout>
 800563c:	4603      	mov	r3, r0
 800563e:	2b00      	cmp	r3, #0
 8005640:	d03c      	beq.n	80056bc <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800564a:	e853 3f00 	ldrex	r3, [r3]
 800564e:	623b      	str	r3, [r7, #32]
   return(result);
 8005650:	6a3b      	ldr	r3, [r7, #32]
 8005652:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005656:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	461a      	mov	r2, r3
 800565e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005660:	633b      	str	r3, [r7, #48]	; 0x30
 8005662:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005664:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005666:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005668:	e841 2300 	strex	r3, r2, [r1]
 800566c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800566e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005670:	2b00      	cmp	r3, #0
 8005672:	d1e6      	bne.n	8005642 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	3308      	adds	r3, #8
 800567a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800567c:	693b      	ldr	r3, [r7, #16]
 800567e:	e853 3f00 	ldrex	r3, [r3]
 8005682:	60fb      	str	r3, [r7, #12]
   return(result);
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	f023 0301 	bic.w	r3, r3, #1
 800568a:	64bb      	str	r3, [r7, #72]	; 0x48
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	3308      	adds	r3, #8
 8005692:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005694:	61fa      	str	r2, [r7, #28]
 8005696:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005698:	69b9      	ldr	r1, [r7, #24]
 800569a:	69fa      	ldr	r2, [r7, #28]
 800569c:	e841 2300 	strex	r3, r2, [r1]
 80056a0:	617b      	str	r3, [r7, #20]
   return(result);
 80056a2:	697b      	ldr	r3, [r7, #20]
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d1e5      	bne.n	8005674 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	2220      	movs	r2, #32
 80056ac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	2200      	movs	r2, #0
 80056b4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80056b8:	2303      	movs	r3, #3
 80056ba:	e011      	b.n	80056e0 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	2220      	movs	r2, #32
 80056c0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	2220      	movs	r2, #32
 80056c6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	2200      	movs	r2, #0
 80056ce:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	2200      	movs	r2, #0
 80056d4:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	2200      	movs	r2, #0
 80056da:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80056de:	2300      	movs	r3, #0
}
 80056e0:	4618      	mov	r0, r3
 80056e2:	3758      	adds	r7, #88	; 0x58
 80056e4:	46bd      	mov	sp, r7
 80056e6:	bd80      	pop	{r7, pc}

080056e8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80056e8:	b580      	push	{r7, lr}
 80056ea:	b084      	sub	sp, #16
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	60f8      	str	r0, [r7, #12]
 80056f0:	60b9      	str	r1, [r7, #8]
 80056f2:	603b      	str	r3, [r7, #0]
 80056f4:	4613      	mov	r3, r2
 80056f6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80056f8:	e049      	b.n	800578e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80056fa:	69bb      	ldr	r3, [r7, #24]
 80056fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005700:	d045      	beq.n	800578e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005702:	f7fc f8ef 	bl	80018e4 <HAL_GetTick>
 8005706:	4602      	mov	r2, r0
 8005708:	683b      	ldr	r3, [r7, #0]
 800570a:	1ad3      	subs	r3, r2, r3
 800570c:	69ba      	ldr	r2, [r7, #24]
 800570e:	429a      	cmp	r2, r3
 8005710:	d302      	bcc.n	8005718 <UART_WaitOnFlagUntilTimeout+0x30>
 8005712:	69bb      	ldr	r3, [r7, #24]
 8005714:	2b00      	cmp	r3, #0
 8005716:	d101      	bne.n	800571c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005718:	2303      	movs	r3, #3
 800571a:	e048      	b.n	80057ae <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	f003 0304 	and.w	r3, r3, #4
 8005726:	2b00      	cmp	r3, #0
 8005728:	d031      	beq.n	800578e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	69db      	ldr	r3, [r3, #28]
 8005730:	f003 0308 	and.w	r3, r3, #8
 8005734:	2b08      	cmp	r3, #8
 8005736:	d110      	bne.n	800575a <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	2208      	movs	r2, #8
 800573e:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8005740:	68f8      	ldr	r0, [r7, #12]
 8005742:	f000 f838 	bl	80057b6 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	2208      	movs	r2, #8
 800574a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	2200      	movs	r2, #0
 8005752:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 8005756:	2301      	movs	r3, #1
 8005758:	e029      	b.n	80057ae <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	69db      	ldr	r3, [r3, #28]
 8005760:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005764:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005768:	d111      	bne.n	800578e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005772:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005774:	68f8      	ldr	r0, [r7, #12]
 8005776:	f000 f81e 	bl	80057b6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	2220      	movs	r2, #32
 800577e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	2200      	movs	r2, #0
 8005786:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800578a:	2303      	movs	r3, #3
 800578c:	e00f      	b.n	80057ae <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	69da      	ldr	r2, [r3, #28]
 8005794:	68bb      	ldr	r3, [r7, #8]
 8005796:	4013      	ands	r3, r2
 8005798:	68ba      	ldr	r2, [r7, #8]
 800579a:	429a      	cmp	r2, r3
 800579c:	bf0c      	ite	eq
 800579e:	2301      	moveq	r3, #1
 80057a0:	2300      	movne	r3, #0
 80057a2:	b2db      	uxtb	r3, r3
 80057a4:	461a      	mov	r2, r3
 80057a6:	79fb      	ldrb	r3, [r7, #7]
 80057a8:	429a      	cmp	r2, r3
 80057aa:	d0a6      	beq.n	80056fa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80057ac:	2300      	movs	r3, #0
}
 80057ae:	4618      	mov	r0, r3
 80057b0:	3710      	adds	r7, #16
 80057b2:	46bd      	mov	sp, r7
 80057b4:	bd80      	pop	{r7, pc}

080057b6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80057b6:	b480      	push	{r7}
 80057b8:	b095      	sub	sp, #84	; 0x54
 80057ba:	af00      	add	r7, sp, #0
 80057bc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057c6:	e853 3f00 	ldrex	r3, [r3]
 80057ca:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80057cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057ce:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80057d2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	461a      	mov	r2, r3
 80057da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80057dc:	643b      	str	r3, [r7, #64]	; 0x40
 80057de:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057e0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80057e2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80057e4:	e841 2300 	strex	r3, r2, [r1]
 80057e8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80057ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d1e6      	bne.n	80057be <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	3308      	adds	r3, #8
 80057f6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057f8:	6a3b      	ldr	r3, [r7, #32]
 80057fa:	e853 3f00 	ldrex	r3, [r3]
 80057fe:	61fb      	str	r3, [r7, #28]
   return(result);
 8005800:	69fb      	ldr	r3, [r7, #28]
 8005802:	f023 0301 	bic.w	r3, r3, #1
 8005806:	64bb      	str	r3, [r7, #72]	; 0x48
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	3308      	adds	r3, #8
 800580e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005810:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005812:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005814:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005816:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005818:	e841 2300 	strex	r3, r2, [r1]
 800581c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800581e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005820:	2b00      	cmp	r3, #0
 8005822:	d1e5      	bne.n	80057f0 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005828:	2b01      	cmp	r3, #1
 800582a:	d118      	bne.n	800585e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	e853 3f00 	ldrex	r3, [r3]
 8005838:	60bb      	str	r3, [r7, #8]
   return(result);
 800583a:	68bb      	ldr	r3, [r7, #8]
 800583c:	f023 0310 	bic.w	r3, r3, #16
 8005840:	647b      	str	r3, [r7, #68]	; 0x44
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	461a      	mov	r2, r3
 8005848:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800584a:	61bb      	str	r3, [r7, #24]
 800584c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800584e:	6979      	ldr	r1, [r7, #20]
 8005850:	69ba      	ldr	r2, [r7, #24]
 8005852:	e841 2300 	strex	r3, r2, [r1]
 8005856:	613b      	str	r3, [r7, #16]
   return(result);
 8005858:	693b      	ldr	r3, [r7, #16]
 800585a:	2b00      	cmp	r3, #0
 800585c:	d1e6      	bne.n	800582c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	2220      	movs	r2, #32
 8005862:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	2200      	movs	r2, #0
 800586a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	2200      	movs	r2, #0
 8005870:	669a      	str	r2, [r3, #104]	; 0x68
}
 8005872:	bf00      	nop
 8005874:	3754      	adds	r7, #84	; 0x54
 8005876:	46bd      	mov	sp, r7
 8005878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800587c:	4770      	bx	lr
	...

08005880 <__errno>:
 8005880:	4b01      	ldr	r3, [pc, #4]	; (8005888 <__errno+0x8>)
 8005882:	6818      	ldr	r0, [r3, #0]
 8005884:	4770      	bx	lr
 8005886:	bf00      	nop
 8005888:	20000014 	.word	0x20000014

0800588c <__libc_init_array>:
 800588c:	b570      	push	{r4, r5, r6, lr}
 800588e:	4d0d      	ldr	r5, [pc, #52]	; (80058c4 <__libc_init_array+0x38>)
 8005890:	4c0d      	ldr	r4, [pc, #52]	; (80058c8 <__libc_init_array+0x3c>)
 8005892:	1b64      	subs	r4, r4, r5
 8005894:	10a4      	asrs	r4, r4, #2
 8005896:	2600      	movs	r6, #0
 8005898:	42a6      	cmp	r6, r4
 800589a:	d109      	bne.n	80058b0 <__libc_init_array+0x24>
 800589c:	4d0b      	ldr	r5, [pc, #44]	; (80058cc <__libc_init_array+0x40>)
 800589e:	4c0c      	ldr	r4, [pc, #48]	; (80058d0 <__libc_init_array+0x44>)
 80058a0:	f001 f824 	bl	80068ec <_init>
 80058a4:	1b64      	subs	r4, r4, r5
 80058a6:	10a4      	asrs	r4, r4, #2
 80058a8:	2600      	movs	r6, #0
 80058aa:	42a6      	cmp	r6, r4
 80058ac:	d105      	bne.n	80058ba <__libc_init_array+0x2e>
 80058ae:	bd70      	pop	{r4, r5, r6, pc}
 80058b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80058b4:	4798      	blx	r3
 80058b6:	3601      	adds	r6, #1
 80058b8:	e7ee      	b.n	8005898 <__libc_init_array+0xc>
 80058ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80058be:	4798      	blx	r3
 80058c0:	3601      	adds	r6, #1
 80058c2:	e7f2      	b.n	80058aa <__libc_init_array+0x1e>
 80058c4:	080092e4 	.word	0x080092e4
 80058c8:	080092e4 	.word	0x080092e4
 80058cc:	080092e4 	.word	0x080092e4
 80058d0:	080092e8 	.word	0x080092e8

080058d4 <memset>:
 80058d4:	4402      	add	r2, r0
 80058d6:	4603      	mov	r3, r0
 80058d8:	4293      	cmp	r3, r2
 80058da:	d100      	bne.n	80058de <memset+0xa>
 80058dc:	4770      	bx	lr
 80058de:	f803 1b01 	strb.w	r1, [r3], #1
 80058e2:	e7f9      	b.n	80058d8 <memset+0x4>

080058e4 <iprintf>:
 80058e4:	b40f      	push	{r0, r1, r2, r3}
 80058e6:	4b0a      	ldr	r3, [pc, #40]	; (8005910 <iprintf+0x2c>)
 80058e8:	b513      	push	{r0, r1, r4, lr}
 80058ea:	681c      	ldr	r4, [r3, #0]
 80058ec:	b124      	cbz	r4, 80058f8 <iprintf+0x14>
 80058ee:	69a3      	ldr	r3, [r4, #24]
 80058f0:	b913      	cbnz	r3, 80058f8 <iprintf+0x14>
 80058f2:	4620      	mov	r0, r4
 80058f4:	f000 fa5e 	bl	8005db4 <__sinit>
 80058f8:	ab05      	add	r3, sp, #20
 80058fa:	9a04      	ldr	r2, [sp, #16]
 80058fc:	68a1      	ldr	r1, [r4, #8]
 80058fe:	9301      	str	r3, [sp, #4]
 8005900:	4620      	mov	r0, r4
 8005902:	f000 fc67 	bl	80061d4 <_vfiprintf_r>
 8005906:	b002      	add	sp, #8
 8005908:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800590c:	b004      	add	sp, #16
 800590e:	4770      	bx	lr
 8005910:	20000014 	.word	0x20000014

08005914 <_puts_r>:
 8005914:	b570      	push	{r4, r5, r6, lr}
 8005916:	460e      	mov	r6, r1
 8005918:	4605      	mov	r5, r0
 800591a:	b118      	cbz	r0, 8005924 <_puts_r+0x10>
 800591c:	6983      	ldr	r3, [r0, #24]
 800591e:	b90b      	cbnz	r3, 8005924 <_puts_r+0x10>
 8005920:	f000 fa48 	bl	8005db4 <__sinit>
 8005924:	69ab      	ldr	r3, [r5, #24]
 8005926:	68ac      	ldr	r4, [r5, #8]
 8005928:	b913      	cbnz	r3, 8005930 <_puts_r+0x1c>
 800592a:	4628      	mov	r0, r5
 800592c:	f000 fa42 	bl	8005db4 <__sinit>
 8005930:	4b2c      	ldr	r3, [pc, #176]	; (80059e4 <_puts_r+0xd0>)
 8005932:	429c      	cmp	r4, r3
 8005934:	d120      	bne.n	8005978 <_puts_r+0x64>
 8005936:	686c      	ldr	r4, [r5, #4]
 8005938:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800593a:	07db      	lsls	r3, r3, #31
 800593c:	d405      	bmi.n	800594a <_puts_r+0x36>
 800593e:	89a3      	ldrh	r3, [r4, #12]
 8005940:	0598      	lsls	r0, r3, #22
 8005942:	d402      	bmi.n	800594a <_puts_r+0x36>
 8005944:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005946:	f000 fad3 	bl	8005ef0 <__retarget_lock_acquire_recursive>
 800594a:	89a3      	ldrh	r3, [r4, #12]
 800594c:	0719      	lsls	r1, r3, #28
 800594e:	d51d      	bpl.n	800598c <_puts_r+0x78>
 8005950:	6923      	ldr	r3, [r4, #16]
 8005952:	b1db      	cbz	r3, 800598c <_puts_r+0x78>
 8005954:	3e01      	subs	r6, #1
 8005956:	68a3      	ldr	r3, [r4, #8]
 8005958:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800595c:	3b01      	subs	r3, #1
 800595e:	60a3      	str	r3, [r4, #8]
 8005960:	bb39      	cbnz	r1, 80059b2 <_puts_r+0x9e>
 8005962:	2b00      	cmp	r3, #0
 8005964:	da38      	bge.n	80059d8 <_puts_r+0xc4>
 8005966:	4622      	mov	r2, r4
 8005968:	210a      	movs	r1, #10
 800596a:	4628      	mov	r0, r5
 800596c:	f000 f848 	bl	8005a00 <__swbuf_r>
 8005970:	3001      	adds	r0, #1
 8005972:	d011      	beq.n	8005998 <_puts_r+0x84>
 8005974:	250a      	movs	r5, #10
 8005976:	e011      	b.n	800599c <_puts_r+0x88>
 8005978:	4b1b      	ldr	r3, [pc, #108]	; (80059e8 <_puts_r+0xd4>)
 800597a:	429c      	cmp	r4, r3
 800597c:	d101      	bne.n	8005982 <_puts_r+0x6e>
 800597e:	68ac      	ldr	r4, [r5, #8]
 8005980:	e7da      	b.n	8005938 <_puts_r+0x24>
 8005982:	4b1a      	ldr	r3, [pc, #104]	; (80059ec <_puts_r+0xd8>)
 8005984:	429c      	cmp	r4, r3
 8005986:	bf08      	it	eq
 8005988:	68ec      	ldreq	r4, [r5, #12]
 800598a:	e7d5      	b.n	8005938 <_puts_r+0x24>
 800598c:	4621      	mov	r1, r4
 800598e:	4628      	mov	r0, r5
 8005990:	f000 f888 	bl	8005aa4 <__swsetup_r>
 8005994:	2800      	cmp	r0, #0
 8005996:	d0dd      	beq.n	8005954 <_puts_r+0x40>
 8005998:	f04f 35ff 	mov.w	r5, #4294967295
 800599c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800599e:	07da      	lsls	r2, r3, #31
 80059a0:	d405      	bmi.n	80059ae <_puts_r+0x9a>
 80059a2:	89a3      	ldrh	r3, [r4, #12]
 80059a4:	059b      	lsls	r3, r3, #22
 80059a6:	d402      	bmi.n	80059ae <_puts_r+0x9a>
 80059a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80059aa:	f000 faa2 	bl	8005ef2 <__retarget_lock_release_recursive>
 80059ae:	4628      	mov	r0, r5
 80059b0:	bd70      	pop	{r4, r5, r6, pc}
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	da04      	bge.n	80059c0 <_puts_r+0xac>
 80059b6:	69a2      	ldr	r2, [r4, #24]
 80059b8:	429a      	cmp	r2, r3
 80059ba:	dc06      	bgt.n	80059ca <_puts_r+0xb6>
 80059bc:	290a      	cmp	r1, #10
 80059be:	d004      	beq.n	80059ca <_puts_r+0xb6>
 80059c0:	6823      	ldr	r3, [r4, #0]
 80059c2:	1c5a      	adds	r2, r3, #1
 80059c4:	6022      	str	r2, [r4, #0]
 80059c6:	7019      	strb	r1, [r3, #0]
 80059c8:	e7c5      	b.n	8005956 <_puts_r+0x42>
 80059ca:	4622      	mov	r2, r4
 80059cc:	4628      	mov	r0, r5
 80059ce:	f000 f817 	bl	8005a00 <__swbuf_r>
 80059d2:	3001      	adds	r0, #1
 80059d4:	d1bf      	bne.n	8005956 <_puts_r+0x42>
 80059d6:	e7df      	b.n	8005998 <_puts_r+0x84>
 80059d8:	6823      	ldr	r3, [r4, #0]
 80059da:	250a      	movs	r5, #10
 80059dc:	1c5a      	adds	r2, r3, #1
 80059de:	6022      	str	r2, [r4, #0]
 80059e0:	701d      	strb	r5, [r3, #0]
 80059e2:	e7db      	b.n	800599c <_puts_r+0x88>
 80059e4:	08009270 	.word	0x08009270
 80059e8:	08009290 	.word	0x08009290
 80059ec:	08009250 	.word	0x08009250

080059f0 <puts>:
 80059f0:	4b02      	ldr	r3, [pc, #8]	; (80059fc <puts+0xc>)
 80059f2:	4601      	mov	r1, r0
 80059f4:	6818      	ldr	r0, [r3, #0]
 80059f6:	f7ff bf8d 	b.w	8005914 <_puts_r>
 80059fa:	bf00      	nop
 80059fc:	20000014 	.word	0x20000014

08005a00 <__swbuf_r>:
 8005a00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a02:	460e      	mov	r6, r1
 8005a04:	4614      	mov	r4, r2
 8005a06:	4605      	mov	r5, r0
 8005a08:	b118      	cbz	r0, 8005a12 <__swbuf_r+0x12>
 8005a0a:	6983      	ldr	r3, [r0, #24]
 8005a0c:	b90b      	cbnz	r3, 8005a12 <__swbuf_r+0x12>
 8005a0e:	f000 f9d1 	bl	8005db4 <__sinit>
 8005a12:	4b21      	ldr	r3, [pc, #132]	; (8005a98 <__swbuf_r+0x98>)
 8005a14:	429c      	cmp	r4, r3
 8005a16:	d12b      	bne.n	8005a70 <__swbuf_r+0x70>
 8005a18:	686c      	ldr	r4, [r5, #4]
 8005a1a:	69a3      	ldr	r3, [r4, #24]
 8005a1c:	60a3      	str	r3, [r4, #8]
 8005a1e:	89a3      	ldrh	r3, [r4, #12]
 8005a20:	071a      	lsls	r2, r3, #28
 8005a22:	d52f      	bpl.n	8005a84 <__swbuf_r+0x84>
 8005a24:	6923      	ldr	r3, [r4, #16]
 8005a26:	b36b      	cbz	r3, 8005a84 <__swbuf_r+0x84>
 8005a28:	6923      	ldr	r3, [r4, #16]
 8005a2a:	6820      	ldr	r0, [r4, #0]
 8005a2c:	1ac0      	subs	r0, r0, r3
 8005a2e:	6963      	ldr	r3, [r4, #20]
 8005a30:	b2f6      	uxtb	r6, r6
 8005a32:	4283      	cmp	r3, r0
 8005a34:	4637      	mov	r7, r6
 8005a36:	dc04      	bgt.n	8005a42 <__swbuf_r+0x42>
 8005a38:	4621      	mov	r1, r4
 8005a3a:	4628      	mov	r0, r5
 8005a3c:	f000 f926 	bl	8005c8c <_fflush_r>
 8005a40:	bb30      	cbnz	r0, 8005a90 <__swbuf_r+0x90>
 8005a42:	68a3      	ldr	r3, [r4, #8]
 8005a44:	3b01      	subs	r3, #1
 8005a46:	60a3      	str	r3, [r4, #8]
 8005a48:	6823      	ldr	r3, [r4, #0]
 8005a4a:	1c5a      	adds	r2, r3, #1
 8005a4c:	6022      	str	r2, [r4, #0]
 8005a4e:	701e      	strb	r6, [r3, #0]
 8005a50:	6963      	ldr	r3, [r4, #20]
 8005a52:	3001      	adds	r0, #1
 8005a54:	4283      	cmp	r3, r0
 8005a56:	d004      	beq.n	8005a62 <__swbuf_r+0x62>
 8005a58:	89a3      	ldrh	r3, [r4, #12]
 8005a5a:	07db      	lsls	r3, r3, #31
 8005a5c:	d506      	bpl.n	8005a6c <__swbuf_r+0x6c>
 8005a5e:	2e0a      	cmp	r6, #10
 8005a60:	d104      	bne.n	8005a6c <__swbuf_r+0x6c>
 8005a62:	4621      	mov	r1, r4
 8005a64:	4628      	mov	r0, r5
 8005a66:	f000 f911 	bl	8005c8c <_fflush_r>
 8005a6a:	b988      	cbnz	r0, 8005a90 <__swbuf_r+0x90>
 8005a6c:	4638      	mov	r0, r7
 8005a6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005a70:	4b0a      	ldr	r3, [pc, #40]	; (8005a9c <__swbuf_r+0x9c>)
 8005a72:	429c      	cmp	r4, r3
 8005a74:	d101      	bne.n	8005a7a <__swbuf_r+0x7a>
 8005a76:	68ac      	ldr	r4, [r5, #8]
 8005a78:	e7cf      	b.n	8005a1a <__swbuf_r+0x1a>
 8005a7a:	4b09      	ldr	r3, [pc, #36]	; (8005aa0 <__swbuf_r+0xa0>)
 8005a7c:	429c      	cmp	r4, r3
 8005a7e:	bf08      	it	eq
 8005a80:	68ec      	ldreq	r4, [r5, #12]
 8005a82:	e7ca      	b.n	8005a1a <__swbuf_r+0x1a>
 8005a84:	4621      	mov	r1, r4
 8005a86:	4628      	mov	r0, r5
 8005a88:	f000 f80c 	bl	8005aa4 <__swsetup_r>
 8005a8c:	2800      	cmp	r0, #0
 8005a8e:	d0cb      	beq.n	8005a28 <__swbuf_r+0x28>
 8005a90:	f04f 37ff 	mov.w	r7, #4294967295
 8005a94:	e7ea      	b.n	8005a6c <__swbuf_r+0x6c>
 8005a96:	bf00      	nop
 8005a98:	08009270 	.word	0x08009270
 8005a9c:	08009290 	.word	0x08009290
 8005aa0:	08009250 	.word	0x08009250

08005aa4 <__swsetup_r>:
 8005aa4:	4b32      	ldr	r3, [pc, #200]	; (8005b70 <__swsetup_r+0xcc>)
 8005aa6:	b570      	push	{r4, r5, r6, lr}
 8005aa8:	681d      	ldr	r5, [r3, #0]
 8005aaa:	4606      	mov	r6, r0
 8005aac:	460c      	mov	r4, r1
 8005aae:	b125      	cbz	r5, 8005aba <__swsetup_r+0x16>
 8005ab0:	69ab      	ldr	r3, [r5, #24]
 8005ab2:	b913      	cbnz	r3, 8005aba <__swsetup_r+0x16>
 8005ab4:	4628      	mov	r0, r5
 8005ab6:	f000 f97d 	bl	8005db4 <__sinit>
 8005aba:	4b2e      	ldr	r3, [pc, #184]	; (8005b74 <__swsetup_r+0xd0>)
 8005abc:	429c      	cmp	r4, r3
 8005abe:	d10f      	bne.n	8005ae0 <__swsetup_r+0x3c>
 8005ac0:	686c      	ldr	r4, [r5, #4]
 8005ac2:	89a3      	ldrh	r3, [r4, #12]
 8005ac4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005ac8:	0719      	lsls	r1, r3, #28
 8005aca:	d42c      	bmi.n	8005b26 <__swsetup_r+0x82>
 8005acc:	06dd      	lsls	r5, r3, #27
 8005ace:	d411      	bmi.n	8005af4 <__swsetup_r+0x50>
 8005ad0:	2309      	movs	r3, #9
 8005ad2:	6033      	str	r3, [r6, #0]
 8005ad4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005ad8:	81a3      	strh	r3, [r4, #12]
 8005ada:	f04f 30ff 	mov.w	r0, #4294967295
 8005ade:	e03e      	b.n	8005b5e <__swsetup_r+0xba>
 8005ae0:	4b25      	ldr	r3, [pc, #148]	; (8005b78 <__swsetup_r+0xd4>)
 8005ae2:	429c      	cmp	r4, r3
 8005ae4:	d101      	bne.n	8005aea <__swsetup_r+0x46>
 8005ae6:	68ac      	ldr	r4, [r5, #8]
 8005ae8:	e7eb      	b.n	8005ac2 <__swsetup_r+0x1e>
 8005aea:	4b24      	ldr	r3, [pc, #144]	; (8005b7c <__swsetup_r+0xd8>)
 8005aec:	429c      	cmp	r4, r3
 8005aee:	bf08      	it	eq
 8005af0:	68ec      	ldreq	r4, [r5, #12]
 8005af2:	e7e6      	b.n	8005ac2 <__swsetup_r+0x1e>
 8005af4:	0758      	lsls	r0, r3, #29
 8005af6:	d512      	bpl.n	8005b1e <__swsetup_r+0x7a>
 8005af8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005afa:	b141      	cbz	r1, 8005b0e <__swsetup_r+0x6a>
 8005afc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005b00:	4299      	cmp	r1, r3
 8005b02:	d002      	beq.n	8005b0a <__swsetup_r+0x66>
 8005b04:	4630      	mov	r0, r6
 8005b06:	f000 fa5b 	bl	8005fc0 <_free_r>
 8005b0a:	2300      	movs	r3, #0
 8005b0c:	6363      	str	r3, [r4, #52]	; 0x34
 8005b0e:	89a3      	ldrh	r3, [r4, #12]
 8005b10:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005b14:	81a3      	strh	r3, [r4, #12]
 8005b16:	2300      	movs	r3, #0
 8005b18:	6063      	str	r3, [r4, #4]
 8005b1a:	6923      	ldr	r3, [r4, #16]
 8005b1c:	6023      	str	r3, [r4, #0]
 8005b1e:	89a3      	ldrh	r3, [r4, #12]
 8005b20:	f043 0308 	orr.w	r3, r3, #8
 8005b24:	81a3      	strh	r3, [r4, #12]
 8005b26:	6923      	ldr	r3, [r4, #16]
 8005b28:	b94b      	cbnz	r3, 8005b3e <__swsetup_r+0x9a>
 8005b2a:	89a3      	ldrh	r3, [r4, #12]
 8005b2c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005b30:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005b34:	d003      	beq.n	8005b3e <__swsetup_r+0x9a>
 8005b36:	4621      	mov	r1, r4
 8005b38:	4630      	mov	r0, r6
 8005b3a:	f000 fa01 	bl	8005f40 <__smakebuf_r>
 8005b3e:	89a0      	ldrh	r0, [r4, #12]
 8005b40:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005b44:	f010 0301 	ands.w	r3, r0, #1
 8005b48:	d00a      	beq.n	8005b60 <__swsetup_r+0xbc>
 8005b4a:	2300      	movs	r3, #0
 8005b4c:	60a3      	str	r3, [r4, #8]
 8005b4e:	6963      	ldr	r3, [r4, #20]
 8005b50:	425b      	negs	r3, r3
 8005b52:	61a3      	str	r3, [r4, #24]
 8005b54:	6923      	ldr	r3, [r4, #16]
 8005b56:	b943      	cbnz	r3, 8005b6a <__swsetup_r+0xc6>
 8005b58:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005b5c:	d1ba      	bne.n	8005ad4 <__swsetup_r+0x30>
 8005b5e:	bd70      	pop	{r4, r5, r6, pc}
 8005b60:	0781      	lsls	r1, r0, #30
 8005b62:	bf58      	it	pl
 8005b64:	6963      	ldrpl	r3, [r4, #20]
 8005b66:	60a3      	str	r3, [r4, #8]
 8005b68:	e7f4      	b.n	8005b54 <__swsetup_r+0xb0>
 8005b6a:	2000      	movs	r0, #0
 8005b6c:	e7f7      	b.n	8005b5e <__swsetup_r+0xba>
 8005b6e:	bf00      	nop
 8005b70:	20000014 	.word	0x20000014
 8005b74:	08009270 	.word	0x08009270
 8005b78:	08009290 	.word	0x08009290
 8005b7c:	08009250 	.word	0x08009250

08005b80 <__sflush_r>:
 8005b80:	898a      	ldrh	r2, [r1, #12]
 8005b82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005b86:	4605      	mov	r5, r0
 8005b88:	0710      	lsls	r0, r2, #28
 8005b8a:	460c      	mov	r4, r1
 8005b8c:	d458      	bmi.n	8005c40 <__sflush_r+0xc0>
 8005b8e:	684b      	ldr	r3, [r1, #4]
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	dc05      	bgt.n	8005ba0 <__sflush_r+0x20>
 8005b94:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	dc02      	bgt.n	8005ba0 <__sflush_r+0x20>
 8005b9a:	2000      	movs	r0, #0
 8005b9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005ba0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005ba2:	2e00      	cmp	r6, #0
 8005ba4:	d0f9      	beq.n	8005b9a <__sflush_r+0x1a>
 8005ba6:	2300      	movs	r3, #0
 8005ba8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005bac:	682f      	ldr	r7, [r5, #0]
 8005bae:	602b      	str	r3, [r5, #0]
 8005bb0:	d032      	beq.n	8005c18 <__sflush_r+0x98>
 8005bb2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005bb4:	89a3      	ldrh	r3, [r4, #12]
 8005bb6:	075a      	lsls	r2, r3, #29
 8005bb8:	d505      	bpl.n	8005bc6 <__sflush_r+0x46>
 8005bba:	6863      	ldr	r3, [r4, #4]
 8005bbc:	1ac0      	subs	r0, r0, r3
 8005bbe:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005bc0:	b10b      	cbz	r3, 8005bc6 <__sflush_r+0x46>
 8005bc2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005bc4:	1ac0      	subs	r0, r0, r3
 8005bc6:	2300      	movs	r3, #0
 8005bc8:	4602      	mov	r2, r0
 8005bca:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005bcc:	6a21      	ldr	r1, [r4, #32]
 8005bce:	4628      	mov	r0, r5
 8005bd0:	47b0      	blx	r6
 8005bd2:	1c43      	adds	r3, r0, #1
 8005bd4:	89a3      	ldrh	r3, [r4, #12]
 8005bd6:	d106      	bne.n	8005be6 <__sflush_r+0x66>
 8005bd8:	6829      	ldr	r1, [r5, #0]
 8005bda:	291d      	cmp	r1, #29
 8005bdc:	d82c      	bhi.n	8005c38 <__sflush_r+0xb8>
 8005bde:	4a2a      	ldr	r2, [pc, #168]	; (8005c88 <__sflush_r+0x108>)
 8005be0:	40ca      	lsrs	r2, r1
 8005be2:	07d6      	lsls	r6, r2, #31
 8005be4:	d528      	bpl.n	8005c38 <__sflush_r+0xb8>
 8005be6:	2200      	movs	r2, #0
 8005be8:	6062      	str	r2, [r4, #4]
 8005bea:	04d9      	lsls	r1, r3, #19
 8005bec:	6922      	ldr	r2, [r4, #16]
 8005bee:	6022      	str	r2, [r4, #0]
 8005bf0:	d504      	bpl.n	8005bfc <__sflush_r+0x7c>
 8005bf2:	1c42      	adds	r2, r0, #1
 8005bf4:	d101      	bne.n	8005bfa <__sflush_r+0x7a>
 8005bf6:	682b      	ldr	r3, [r5, #0]
 8005bf8:	b903      	cbnz	r3, 8005bfc <__sflush_r+0x7c>
 8005bfa:	6560      	str	r0, [r4, #84]	; 0x54
 8005bfc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005bfe:	602f      	str	r7, [r5, #0]
 8005c00:	2900      	cmp	r1, #0
 8005c02:	d0ca      	beq.n	8005b9a <__sflush_r+0x1a>
 8005c04:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005c08:	4299      	cmp	r1, r3
 8005c0a:	d002      	beq.n	8005c12 <__sflush_r+0x92>
 8005c0c:	4628      	mov	r0, r5
 8005c0e:	f000 f9d7 	bl	8005fc0 <_free_r>
 8005c12:	2000      	movs	r0, #0
 8005c14:	6360      	str	r0, [r4, #52]	; 0x34
 8005c16:	e7c1      	b.n	8005b9c <__sflush_r+0x1c>
 8005c18:	6a21      	ldr	r1, [r4, #32]
 8005c1a:	2301      	movs	r3, #1
 8005c1c:	4628      	mov	r0, r5
 8005c1e:	47b0      	blx	r6
 8005c20:	1c41      	adds	r1, r0, #1
 8005c22:	d1c7      	bne.n	8005bb4 <__sflush_r+0x34>
 8005c24:	682b      	ldr	r3, [r5, #0]
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d0c4      	beq.n	8005bb4 <__sflush_r+0x34>
 8005c2a:	2b1d      	cmp	r3, #29
 8005c2c:	d001      	beq.n	8005c32 <__sflush_r+0xb2>
 8005c2e:	2b16      	cmp	r3, #22
 8005c30:	d101      	bne.n	8005c36 <__sflush_r+0xb6>
 8005c32:	602f      	str	r7, [r5, #0]
 8005c34:	e7b1      	b.n	8005b9a <__sflush_r+0x1a>
 8005c36:	89a3      	ldrh	r3, [r4, #12]
 8005c38:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005c3c:	81a3      	strh	r3, [r4, #12]
 8005c3e:	e7ad      	b.n	8005b9c <__sflush_r+0x1c>
 8005c40:	690f      	ldr	r7, [r1, #16]
 8005c42:	2f00      	cmp	r7, #0
 8005c44:	d0a9      	beq.n	8005b9a <__sflush_r+0x1a>
 8005c46:	0793      	lsls	r3, r2, #30
 8005c48:	680e      	ldr	r6, [r1, #0]
 8005c4a:	bf08      	it	eq
 8005c4c:	694b      	ldreq	r3, [r1, #20]
 8005c4e:	600f      	str	r7, [r1, #0]
 8005c50:	bf18      	it	ne
 8005c52:	2300      	movne	r3, #0
 8005c54:	eba6 0807 	sub.w	r8, r6, r7
 8005c58:	608b      	str	r3, [r1, #8]
 8005c5a:	f1b8 0f00 	cmp.w	r8, #0
 8005c5e:	dd9c      	ble.n	8005b9a <__sflush_r+0x1a>
 8005c60:	6a21      	ldr	r1, [r4, #32]
 8005c62:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005c64:	4643      	mov	r3, r8
 8005c66:	463a      	mov	r2, r7
 8005c68:	4628      	mov	r0, r5
 8005c6a:	47b0      	blx	r6
 8005c6c:	2800      	cmp	r0, #0
 8005c6e:	dc06      	bgt.n	8005c7e <__sflush_r+0xfe>
 8005c70:	89a3      	ldrh	r3, [r4, #12]
 8005c72:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005c76:	81a3      	strh	r3, [r4, #12]
 8005c78:	f04f 30ff 	mov.w	r0, #4294967295
 8005c7c:	e78e      	b.n	8005b9c <__sflush_r+0x1c>
 8005c7e:	4407      	add	r7, r0
 8005c80:	eba8 0800 	sub.w	r8, r8, r0
 8005c84:	e7e9      	b.n	8005c5a <__sflush_r+0xda>
 8005c86:	bf00      	nop
 8005c88:	20400001 	.word	0x20400001

08005c8c <_fflush_r>:
 8005c8c:	b538      	push	{r3, r4, r5, lr}
 8005c8e:	690b      	ldr	r3, [r1, #16]
 8005c90:	4605      	mov	r5, r0
 8005c92:	460c      	mov	r4, r1
 8005c94:	b913      	cbnz	r3, 8005c9c <_fflush_r+0x10>
 8005c96:	2500      	movs	r5, #0
 8005c98:	4628      	mov	r0, r5
 8005c9a:	bd38      	pop	{r3, r4, r5, pc}
 8005c9c:	b118      	cbz	r0, 8005ca6 <_fflush_r+0x1a>
 8005c9e:	6983      	ldr	r3, [r0, #24]
 8005ca0:	b90b      	cbnz	r3, 8005ca6 <_fflush_r+0x1a>
 8005ca2:	f000 f887 	bl	8005db4 <__sinit>
 8005ca6:	4b14      	ldr	r3, [pc, #80]	; (8005cf8 <_fflush_r+0x6c>)
 8005ca8:	429c      	cmp	r4, r3
 8005caa:	d11b      	bne.n	8005ce4 <_fflush_r+0x58>
 8005cac:	686c      	ldr	r4, [r5, #4]
 8005cae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d0ef      	beq.n	8005c96 <_fflush_r+0xa>
 8005cb6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005cb8:	07d0      	lsls	r0, r2, #31
 8005cba:	d404      	bmi.n	8005cc6 <_fflush_r+0x3a>
 8005cbc:	0599      	lsls	r1, r3, #22
 8005cbe:	d402      	bmi.n	8005cc6 <_fflush_r+0x3a>
 8005cc0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005cc2:	f000 f915 	bl	8005ef0 <__retarget_lock_acquire_recursive>
 8005cc6:	4628      	mov	r0, r5
 8005cc8:	4621      	mov	r1, r4
 8005cca:	f7ff ff59 	bl	8005b80 <__sflush_r>
 8005cce:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005cd0:	07da      	lsls	r2, r3, #31
 8005cd2:	4605      	mov	r5, r0
 8005cd4:	d4e0      	bmi.n	8005c98 <_fflush_r+0xc>
 8005cd6:	89a3      	ldrh	r3, [r4, #12]
 8005cd8:	059b      	lsls	r3, r3, #22
 8005cda:	d4dd      	bmi.n	8005c98 <_fflush_r+0xc>
 8005cdc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005cde:	f000 f908 	bl	8005ef2 <__retarget_lock_release_recursive>
 8005ce2:	e7d9      	b.n	8005c98 <_fflush_r+0xc>
 8005ce4:	4b05      	ldr	r3, [pc, #20]	; (8005cfc <_fflush_r+0x70>)
 8005ce6:	429c      	cmp	r4, r3
 8005ce8:	d101      	bne.n	8005cee <_fflush_r+0x62>
 8005cea:	68ac      	ldr	r4, [r5, #8]
 8005cec:	e7df      	b.n	8005cae <_fflush_r+0x22>
 8005cee:	4b04      	ldr	r3, [pc, #16]	; (8005d00 <_fflush_r+0x74>)
 8005cf0:	429c      	cmp	r4, r3
 8005cf2:	bf08      	it	eq
 8005cf4:	68ec      	ldreq	r4, [r5, #12]
 8005cf6:	e7da      	b.n	8005cae <_fflush_r+0x22>
 8005cf8:	08009270 	.word	0x08009270
 8005cfc:	08009290 	.word	0x08009290
 8005d00:	08009250 	.word	0x08009250

08005d04 <std>:
 8005d04:	2300      	movs	r3, #0
 8005d06:	b510      	push	{r4, lr}
 8005d08:	4604      	mov	r4, r0
 8005d0a:	e9c0 3300 	strd	r3, r3, [r0]
 8005d0e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005d12:	6083      	str	r3, [r0, #8]
 8005d14:	8181      	strh	r1, [r0, #12]
 8005d16:	6643      	str	r3, [r0, #100]	; 0x64
 8005d18:	81c2      	strh	r2, [r0, #14]
 8005d1a:	6183      	str	r3, [r0, #24]
 8005d1c:	4619      	mov	r1, r3
 8005d1e:	2208      	movs	r2, #8
 8005d20:	305c      	adds	r0, #92	; 0x5c
 8005d22:	f7ff fdd7 	bl	80058d4 <memset>
 8005d26:	4b05      	ldr	r3, [pc, #20]	; (8005d3c <std+0x38>)
 8005d28:	6263      	str	r3, [r4, #36]	; 0x24
 8005d2a:	4b05      	ldr	r3, [pc, #20]	; (8005d40 <std+0x3c>)
 8005d2c:	62a3      	str	r3, [r4, #40]	; 0x28
 8005d2e:	4b05      	ldr	r3, [pc, #20]	; (8005d44 <std+0x40>)
 8005d30:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005d32:	4b05      	ldr	r3, [pc, #20]	; (8005d48 <std+0x44>)
 8005d34:	6224      	str	r4, [r4, #32]
 8005d36:	6323      	str	r3, [r4, #48]	; 0x30
 8005d38:	bd10      	pop	{r4, pc}
 8005d3a:	bf00      	nop
 8005d3c:	0800677d 	.word	0x0800677d
 8005d40:	0800679f 	.word	0x0800679f
 8005d44:	080067d7 	.word	0x080067d7
 8005d48:	080067fb 	.word	0x080067fb

08005d4c <_cleanup_r>:
 8005d4c:	4901      	ldr	r1, [pc, #4]	; (8005d54 <_cleanup_r+0x8>)
 8005d4e:	f000 b8af 	b.w	8005eb0 <_fwalk_reent>
 8005d52:	bf00      	nop
 8005d54:	08005c8d 	.word	0x08005c8d

08005d58 <__sfmoreglue>:
 8005d58:	b570      	push	{r4, r5, r6, lr}
 8005d5a:	2268      	movs	r2, #104	; 0x68
 8005d5c:	1e4d      	subs	r5, r1, #1
 8005d5e:	4355      	muls	r5, r2
 8005d60:	460e      	mov	r6, r1
 8005d62:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005d66:	f000 f997 	bl	8006098 <_malloc_r>
 8005d6a:	4604      	mov	r4, r0
 8005d6c:	b140      	cbz	r0, 8005d80 <__sfmoreglue+0x28>
 8005d6e:	2100      	movs	r1, #0
 8005d70:	e9c0 1600 	strd	r1, r6, [r0]
 8005d74:	300c      	adds	r0, #12
 8005d76:	60a0      	str	r0, [r4, #8]
 8005d78:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005d7c:	f7ff fdaa 	bl	80058d4 <memset>
 8005d80:	4620      	mov	r0, r4
 8005d82:	bd70      	pop	{r4, r5, r6, pc}

08005d84 <__sfp_lock_acquire>:
 8005d84:	4801      	ldr	r0, [pc, #4]	; (8005d8c <__sfp_lock_acquire+0x8>)
 8005d86:	f000 b8b3 	b.w	8005ef0 <__retarget_lock_acquire_recursive>
 8005d8a:	bf00      	nop
 8005d8c:	20000689 	.word	0x20000689

08005d90 <__sfp_lock_release>:
 8005d90:	4801      	ldr	r0, [pc, #4]	; (8005d98 <__sfp_lock_release+0x8>)
 8005d92:	f000 b8ae 	b.w	8005ef2 <__retarget_lock_release_recursive>
 8005d96:	bf00      	nop
 8005d98:	20000689 	.word	0x20000689

08005d9c <__sinit_lock_acquire>:
 8005d9c:	4801      	ldr	r0, [pc, #4]	; (8005da4 <__sinit_lock_acquire+0x8>)
 8005d9e:	f000 b8a7 	b.w	8005ef0 <__retarget_lock_acquire_recursive>
 8005da2:	bf00      	nop
 8005da4:	2000068a 	.word	0x2000068a

08005da8 <__sinit_lock_release>:
 8005da8:	4801      	ldr	r0, [pc, #4]	; (8005db0 <__sinit_lock_release+0x8>)
 8005daa:	f000 b8a2 	b.w	8005ef2 <__retarget_lock_release_recursive>
 8005dae:	bf00      	nop
 8005db0:	2000068a 	.word	0x2000068a

08005db4 <__sinit>:
 8005db4:	b510      	push	{r4, lr}
 8005db6:	4604      	mov	r4, r0
 8005db8:	f7ff fff0 	bl	8005d9c <__sinit_lock_acquire>
 8005dbc:	69a3      	ldr	r3, [r4, #24]
 8005dbe:	b11b      	cbz	r3, 8005dc8 <__sinit+0x14>
 8005dc0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005dc4:	f7ff bff0 	b.w	8005da8 <__sinit_lock_release>
 8005dc8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005dcc:	6523      	str	r3, [r4, #80]	; 0x50
 8005dce:	4b13      	ldr	r3, [pc, #76]	; (8005e1c <__sinit+0x68>)
 8005dd0:	4a13      	ldr	r2, [pc, #76]	; (8005e20 <__sinit+0x6c>)
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	62a2      	str	r2, [r4, #40]	; 0x28
 8005dd6:	42a3      	cmp	r3, r4
 8005dd8:	bf04      	itt	eq
 8005dda:	2301      	moveq	r3, #1
 8005ddc:	61a3      	streq	r3, [r4, #24]
 8005dde:	4620      	mov	r0, r4
 8005de0:	f000 f820 	bl	8005e24 <__sfp>
 8005de4:	6060      	str	r0, [r4, #4]
 8005de6:	4620      	mov	r0, r4
 8005de8:	f000 f81c 	bl	8005e24 <__sfp>
 8005dec:	60a0      	str	r0, [r4, #8]
 8005dee:	4620      	mov	r0, r4
 8005df0:	f000 f818 	bl	8005e24 <__sfp>
 8005df4:	2200      	movs	r2, #0
 8005df6:	60e0      	str	r0, [r4, #12]
 8005df8:	2104      	movs	r1, #4
 8005dfa:	6860      	ldr	r0, [r4, #4]
 8005dfc:	f7ff ff82 	bl	8005d04 <std>
 8005e00:	68a0      	ldr	r0, [r4, #8]
 8005e02:	2201      	movs	r2, #1
 8005e04:	2109      	movs	r1, #9
 8005e06:	f7ff ff7d 	bl	8005d04 <std>
 8005e0a:	68e0      	ldr	r0, [r4, #12]
 8005e0c:	2202      	movs	r2, #2
 8005e0e:	2112      	movs	r1, #18
 8005e10:	f7ff ff78 	bl	8005d04 <std>
 8005e14:	2301      	movs	r3, #1
 8005e16:	61a3      	str	r3, [r4, #24]
 8005e18:	e7d2      	b.n	8005dc0 <__sinit+0xc>
 8005e1a:	bf00      	nop
 8005e1c:	0800924c 	.word	0x0800924c
 8005e20:	08005d4d 	.word	0x08005d4d

08005e24 <__sfp>:
 8005e24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e26:	4607      	mov	r7, r0
 8005e28:	f7ff ffac 	bl	8005d84 <__sfp_lock_acquire>
 8005e2c:	4b1e      	ldr	r3, [pc, #120]	; (8005ea8 <__sfp+0x84>)
 8005e2e:	681e      	ldr	r6, [r3, #0]
 8005e30:	69b3      	ldr	r3, [r6, #24]
 8005e32:	b913      	cbnz	r3, 8005e3a <__sfp+0x16>
 8005e34:	4630      	mov	r0, r6
 8005e36:	f7ff ffbd 	bl	8005db4 <__sinit>
 8005e3a:	3648      	adds	r6, #72	; 0x48
 8005e3c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005e40:	3b01      	subs	r3, #1
 8005e42:	d503      	bpl.n	8005e4c <__sfp+0x28>
 8005e44:	6833      	ldr	r3, [r6, #0]
 8005e46:	b30b      	cbz	r3, 8005e8c <__sfp+0x68>
 8005e48:	6836      	ldr	r6, [r6, #0]
 8005e4a:	e7f7      	b.n	8005e3c <__sfp+0x18>
 8005e4c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005e50:	b9d5      	cbnz	r5, 8005e88 <__sfp+0x64>
 8005e52:	4b16      	ldr	r3, [pc, #88]	; (8005eac <__sfp+0x88>)
 8005e54:	60e3      	str	r3, [r4, #12]
 8005e56:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005e5a:	6665      	str	r5, [r4, #100]	; 0x64
 8005e5c:	f000 f847 	bl	8005eee <__retarget_lock_init_recursive>
 8005e60:	f7ff ff96 	bl	8005d90 <__sfp_lock_release>
 8005e64:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005e68:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005e6c:	6025      	str	r5, [r4, #0]
 8005e6e:	61a5      	str	r5, [r4, #24]
 8005e70:	2208      	movs	r2, #8
 8005e72:	4629      	mov	r1, r5
 8005e74:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005e78:	f7ff fd2c 	bl	80058d4 <memset>
 8005e7c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005e80:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005e84:	4620      	mov	r0, r4
 8005e86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005e88:	3468      	adds	r4, #104	; 0x68
 8005e8a:	e7d9      	b.n	8005e40 <__sfp+0x1c>
 8005e8c:	2104      	movs	r1, #4
 8005e8e:	4638      	mov	r0, r7
 8005e90:	f7ff ff62 	bl	8005d58 <__sfmoreglue>
 8005e94:	4604      	mov	r4, r0
 8005e96:	6030      	str	r0, [r6, #0]
 8005e98:	2800      	cmp	r0, #0
 8005e9a:	d1d5      	bne.n	8005e48 <__sfp+0x24>
 8005e9c:	f7ff ff78 	bl	8005d90 <__sfp_lock_release>
 8005ea0:	230c      	movs	r3, #12
 8005ea2:	603b      	str	r3, [r7, #0]
 8005ea4:	e7ee      	b.n	8005e84 <__sfp+0x60>
 8005ea6:	bf00      	nop
 8005ea8:	0800924c 	.word	0x0800924c
 8005eac:	ffff0001 	.word	0xffff0001

08005eb0 <_fwalk_reent>:
 8005eb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005eb4:	4606      	mov	r6, r0
 8005eb6:	4688      	mov	r8, r1
 8005eb8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005ebc:	2700      	movs	r7, #0
 8005ebe:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005ec2:	f1b9 0901 	subs.w	r9, r9, #1
 8005ec6:	d505      	bpl.n	8005ed4 <_fwalk_reent+0x24>
 8005ec8:	6824      	ldr	r4, [r4, #0]
 8005eca:	2c00      	cmp	r4, #0
 8005ecc:	d1f7      	bne.n	8005ebe <_fwalk_reent+0xe>
 8005ece:	4638      	mov	r0, r7
 8005ed0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005ed4:	89ab      	ldrh	r3, [r5, #12]
 8005ed6:	2b01      	cmp	r3, #1
 8005ed8:	d907      	bls.n	8005eea <_fwalk_reent+0x3a>
 8005eda:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005ede:	3301      	adds	r3, #1
 8005ee0:	d003      	beq.n	8005eea <_fwalk_reent+0x3a>
 8005ee2:	4629      	mov	r1, r5
 8005ee4:	4630      	mov	r0, r6
 8005ee6:	47c0      	blx	r8
 8005ee8:	4307      	orrs	r7, r0
 8005eea:	3568      	adds	r5, #104	; 0x68
 8005eec:	e7e9      	b.n	8005ec2 <_fwalk_reent+0x12>

08005eee <__retarget_lock_init_recursive>:
 8005eee:	4770      	bx	lr

08005ef0 <__retarget_lock_acquire_recursive>:
 8005ef0:	4770      	bx	lr

08005ef2 <__retarget_lock_release_recursive>:
 8005ef2:	4770      	bx	lr

08005ef4 <__swhatbuf_r>:
 8005ef4:	b570      	push	{r4, r5, r6, lr}
 8005ef6:	460e      	mov	r6, r1
 8005ef8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005efc:	2900      	cmp	r1, #0
 8005efe:	b096      	sub	sp, #88	; 0x58
 8005f00:	4614      	mov	r4, r2
 8005f02:	461d      	mov	r5, r3
 8005f04:	da08      	bge.n	8005f18 <__swhatbuf_r+0x24>
 8005f06:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8005f0a:	2200      	movs	r2, #0
 8005f0c:	602a      	str	r2, [r5, #0]
 8005f0e:	061a      	lsls	r2, r3, #24
 8005f10:	d410      	bmi.n	8005f34 <__swhatbuf_r+0x40>
 8005f12:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005f16:	e00e      	b.n	8005f36 <__swhatbuf_r+0x42>
 8005f18:	466a      	mov	r2, sp
 8005f1a:	f000 fc95 	bl	8006848 <_fstat_r>
 8005f1e:	2800      	cmp	r0, #0
 8005f20:	dbf1      	blt.n	8005f06 <__swhatbuf_r+0x12>
 8005f22:	9a01      	ldr	r2, [sp, #4]
 8005f24:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005f28:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005f2c:	425a      	negs	r2, r3
 8005f2e:	415a      	adcs	r2, r3
 8005f30:	602a      	str	r2, [r5, #0]
 8005f32:	e7ee      	b.n	8005f12 <__swhatbuf_r+0x1e>
 8005f34:	2340      	movs	r3, #64	; 0x40
 8005f36:	2000      	movs	r0, #0
 8005f38:	6023      	str	r3, [r4, #0]
 8005f3a:	b016      	add	sp, #88	; 0x58
 8005f3c:	bd70      	pop	{r4, r5, r6, pc}
	...

08005f40 <__smakebuf_r>:
 8005f40:	898b      	ldrh	r3, [r1, #12]
 8005f42:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005f44:	079d      	lsls	r5, r3, #30
 8005f46:	4606      	mov	r6, r0
 8005f48:	460c      	mov	r4, r1
 8005f4a:	d507      	bpl.n	8005f5c <__smakebuf_r+0x1c>
 8005f4c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005f50:	6023      	str	r3, [r4, #0]
 8005f52:	6123      	str	r3, [r4, #16]
 8005f54:	2301      	movs	r3, #1
 8005f56:	6163      	str	r3, [r4, #20]
 8005f58:	b002      	add	sp, #8
 8005f5a:	bd70      	pop	{r4, r5, r6, pc}
 8005f5c:	ab01      	add	r3, sp, #4
 8005f5e:	466a      	mov	r2, sp
 8005f60:	f7ff ffc8 	bl	8005ef4 <__swhatbuf_r>
 8005f64:	9900      	ldr	r1, [sp, #0]
 8005f66:	4605      	mov	r5, r0
 8005f68:	4630      	mov	r0, r6
 8005f6a:	f000 f895 	bl	8006098 <_malloc_r>
 8005f6e:	b948      	cbnz	r0, 8005f84 <__smakebuf_r+0x44>
 8005f70:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005f74:	059a      	lsls	r2, r3, #22
 8005f76:	d4ef      	bmi.n	8005f58 <__smakebuf_r+0x18>
 8005f78:	f023 0303 	bic.w	r3, r3, #3
 8005f7c:	f043 0302 	orr.w	r3, r3, #2
 8005f80:	81a3      	strh	r3, [r4, #12]
 8005f82:	e7e3      	b.n	8005f4c <__smakebuf_r+0xc>
 8005f84:	4b0d      	ldr	r3, [pc, #52]	; (8005fbc <__smakebuf_r+0x7c>)
 8005f86:	62b3      	str	r3, [r6, #40]	; 0x28
 8005f88:	89a3      	ldrh	r3, [r4, #12]
 8005f8a:	6020      	str	r0, [r4, #0]
 8005f8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f90:	81a3      	strh	r3, [r4, #12]
 8005f92:	9b00      	ldr	r3, [sp, #0]
 8005f94:	6163      	str	r3, [r4, #20]
 8005f96:	9b01      	ldr	r3, [sp, #4]
 8005f98:	6120      	str	r0, [r4, #16]
 8005f9a:	b15b      	cbz	r3, 8005fb4 <__smakebuf_r+0x74>
 8005f9c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005fa0:	4630      	mov	r0, r6
 8005fa2:	f000 fc63 	bl	800686c <_isatty_r>
 8005fa6:	b128      	cbz	r0, 8005fb4 <__smakebuf_r+0x74>
 8005fa8:	89a3      	ldrh	r3, [r4, #12]
 8005faa:	f023 0303 	bic.w	r3, r3, #3
 8005fae:	f043 0301 	orr.w	r3, r3, #1
 8005fb2:	81a3      	strh	r3, [r4, #12]
 8005fb4:	89a0      	ldrh	r0, [r4, #12]
 8005fb6:	4305      	orrs	r5, r0
 8005fb8:	81a5      	strh	r5, [r4, #12]
 8005fba:	e7cd      	b.n	8005f58 <__smakebuf_r+0x18>
 8005fbc:	08005d4d 	.word	0x08005d4d

08005fc0 <_free_r>:
 8005fc0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005fc2:	2900      	cmp	r1, #0
 8005fc4:	d044      	beq.n	8006050 <_free_r+0x90>
 8005fc6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005fca:	9001      	str	r0, [sp, #4]
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	f1a1 0404 	sub.w	r4, r1, #4
 8005fd2:	bfb8      	it	lt
 8005fd4:	18e4      	addlt	r4, r4, r3
 8005fd6:	f000 fc6b 	bl	80068b0 <__malloc_lock>
 8005fda:	4a1e      	ldr	r2, [pc, #120]	; (8006054 <_free_r+0x94>)
 8005fdc:	9801      	ldr	r0, [sp, #4]
 8005fde:	6813      	ldr	r3, [r2, #0]
 8005fe0:	b933      	cbnz	r3, 8005ff0 <_free_r+0x30>
 8005fe2:	6063      	str	r3, [r4, #4]
 8005fe4:	6014      	str	r4, [r2, #0]
 8005fe6:	b003      	add	sp, #12
 8005fe8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005fec:	f000 bc66 	b.w	80068bc <__malloc_unlock>
 8005ff0:	42a3      	cmp	r3, r4
 8005ff2:	d908      	bls.n	8006006 <_free_r+0x46>
 8005ff4:	6825      	ldr	r5, [r4, #0]
 8005ff6:	1961      	adds	r1, r4, r5
 8005ff8:	428b      	cmp	r3, r1
 8005ffa:	bf01      	itttt	eq
 8005ffc:	6819      	ldreq	r1, [r3, #0]
 8005ffe:	685b      	ldreq	r3, [r3, #4]
 8006000:	1949      	addeq	r1, r1, r5
 8006002:	6021      	streq	r1, [r4, #0]
 8006004:	e7ed      	b.n	8005fe2 <_free_r+0x22>
 8006006:	461a      	mov	r2, r3
 8006008:	685b      	ldr	r3, [r3, #4]
 800600a:	b10b      	cbz	r3, 8006010 <_free_r+0x50>
 800600c:	42a3      	cmp	r3, r4
 800600e:	d9fa      	bls.n	8006006 <_free_r+0x46>
 8006010:	6811      	ldr	r1, [r2, #0]
 8006012:	1855      	adds	r5, r2, r1
 8006014:	42a5      	cmp	r5, r4
 8006016:	d10b      	bne.n	8006030 <_free_r+0x70>
 8006018:	6824      	ldr	r4, [r4, #0]
 800601a:	4421      	add	r1, r4
 800601c:	1854      	adds	r4, r2, r1
 800601e:	42a3      	cmp	r3, r4
 8006020:	6011      	str	r1, [r2, #0]
 8006022:	d1e0      	bne.n	8005fe6 <_free_r+0x26>
 8006024:	681c      	ldr	r4, [r3, #0]
 8006026:	685b      	ldr	r3, [r3, #4]
 8006028:	6053      	str	r3, [r2, #4]
 800602a:	4421      	add	r1, r4
 800602c:	6011      	str	r1, [r2, #0]
 800602e:	e7da      	b.n	8005fe6 <_free_r+0x26>
 8006030:	d902      	bls.n	8006038 <_free_r+0x78>
 8006032:	230c      	movs	r3, #12
 8006034:	6003      	str	r3, [r0, #0]
 8006036:	e7d6      	b.n	8005fe6 <_free_r+0x26>
 8006038:	6825      	ldr	r5, [r4, #0]
 800603a:	1961      	adds	r1, r4, r5
 800603c:	428b      	cmp	r3, r1
 800603e:	bf04      	itt	eq
 8006040:	6819      	ldreq	r1, [r3, #0]
 8006042:	685b      	ldreq	r3, [r3, #4]
 8006044:	6063      	str	r3, [r4, #4]
 8006046:	bf04      	itt	eq
 8006048:	1949      	addeq	r1, r1, r5
 800604a:	6021      	streq	r1, [r4, #0]
 800604c:	6054      	str	r4, [r2, #4]
 800604e:	e7ca      	b.n	8005fe6 <_free_r+0x26>
 8006050:	b003      	add	sp, #12
 8006052:	bd30      	pop	{r4, r5, pc}
 8006054:	2000068c 	.word	0x2000068c

08006058 <sbrk_aligned>:
 8006058:	b570      	push	{r4, r5, r6, lr}
 800605a:	4e0e      	ldr	r6, [pc, #56]	; (8006094 <sbrk_aligned+0x3c>)
 800605c:	460c      	mov	r4, r1
 800605e:	6831      	ldr	r1, [r6, #0]
 8006060:	4605      	mov	r5, r0
 8006062:	b911      	cbnz	r1, 800606a <sbrk_aligned+0x12>
 8006064:	f000 fb7a 	bl	800675c <_sbrk_r>
 8006068:	6030      	str	r0, [r6, #0]
 800606a:	4621      	mov	r1, r4
 800606c:	4628      	mov	r0, r5
 800606e:	f000 fb75 	bl	800675c <_sbrk_r>
 8006072:	1c43      	adds	r3, r0, #1
 8006074:	d00a      	beq.n	800608c <sbrk_aligned+0x34>
 8006076:	1cc4      	adds	r4, r0, #3
 8006078:	f024 0403 	bic.w	r4, r4, #3
 800607c:	42a0      	cmp	r0, r4
 800607e:	d007      	beq.n	8006090 <sbrk_aligned+0x38>
 8006080:	1a21      	subs	r1, r4, r0
 8006082:	4628      	mov	r0, r5
 8006084:	f000 fb6a 	bl	800675c <_sbrk_r>
 8006088:	3001      	adds	r0, #1
 800608a:	d101      	bne.n	8006090 <sbrk_aligned+0x38>
 800608c:	f04f 34ff 	mov.w	r4, #4294967295
 8006090:	4620      	mov	r0, r4
 8006092:	bd70      	pop	{r4, r5, r6, pc}
 8006094:	20000690 	.word	0x20000690

08006098 <_malloc_r>:
 8006098:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800609c:	1ccd      	adds	r5, r1, #3
 800609e:	f025 0503 	bic.w	r5, r5, #3
 80060a2:	3508      	adds	r5, #8
 80060a4:	2d0c      	cmp	r5, #12
 80060a6:	bf38      	it	cc
 80060a8:	250c      	movcc	r5, #12
 80060aa:	2d00      	cmp	r5, #0
 80060ac:	4607      	mov	r7, r0
 80060ae:	db01      	blt.n	80060b4 <_malloc_r+0x1c>
 80060b0:	42a9      	cmp	r1, r5
 80060b2:	d905      	bls.n	80060c0 <_malloc_r+0x28>
 80060b4:	230c      	movs	r3, #12
 80060b6:	603b      	str	r3, [r7, #0]
 80060b8:	2600      	movs	r6, #0
 80060ba:	4630      	mov	r0, r6
 80060bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80060c0:	4e2e      	ldr	r6, [pc, #184]	; (800617c <_malloc_r+0xe4>)
 80060c2:	f000 fbf5 	bl	80068b0 <__malloc_lock>
 80060c6:	6833      	ldr	r3, [r6, #0]
 80060c8:	461c      	mov	r4, r3
 80060ca:	bb34      	cbnz	r4, 800611a <_malloc_r+0x82>
 80060cc:	4629      	mov	r1, r5
 80060ce:	4638      	mov	r0, r7
 80060d0:	f7ff ffc2 	bl	8006058 <sbrk_aligned>
 80060d4:	1c43      	adds	r3, r0, #1
 80060d6:	4604      	mov	r4, r0
 80060d8:	d14d      	bne.n	8006176 <_malloc_r+0xde>
 80060da:	6834      	ldr	r4, [r6, #0]
 80060dc:	4626      	mov	r6, r4
 80060de:	2e00      	cmp	r6, #0
 80060e0:	d140      	bne.n	8006164 <_malloc_r+0xcc>
 80060e2:	6823      	ldr	r3, [r4, #0]
 80060e4:	4631      	mov	r1, r6
 80060e6:	4638      	mov	r0, r7
 80060e8:	eb04 0803 	add.w	r8, r4, r3
 80060ec:	f000 fb36 	bl	800675c <_sbrk_r>
 80060f0:	4580      	cmp	r8, r0
 80060f2:	d13a      	bne.n	800616a <_malloc_r+0xd2>
 80060f4:	6821      	ldr	r1, [r4, #0]
 80060f6:	3503      	adds	r5, #3
 80060f8:	1a6d      	subs	r5, r5, r1
 80060fa:	f025 0503 	bic.w	r5, r5, #3
 80060fe:	3508      	adds	r5, #8
 8006100:	2d0c      	cmp	r5, #12
 8006102:	bf38      	it	cc
 8006104:	250c      	movcc	r5, #12
 8006106:	4629      	mov	r1, r5
 8006108:	4638      	mov	r0, r7
 800610a:	f7ff ffa5 	bl	8006058 <sbrk_aligned>
 800610e:	3001      	adds	r0, #1
 8006110:	d02b      	beq.n	800616a <_malloc_r+0xd2>
 8006112:	6823      	ldr	r3, [r4, #0]
 8006114:	442b      	add	r3, r5
 8006116:	6023      	str	r3, [r4, #0]
 8006118:	e00e      	b.n	8006138 <_malloc_r+0xa0>
 800611a:	6822      	ldr	r2, [r4, #0]
 800611c:	1b52      	subs	r2, r2, r5
 800611e:	d41e      	bmi.n	800615e <_malloc_r+0xc6>
 8006120:	2a0b      	cmp	r2, #11
 8006122:	d916      	bls.n	8006152 <_malloc_r+0xba>
 8006124:	1961      	adds	r1, r4, r5
 8006126:	42a3      	cmp	r3, r4
 8006128:	6025      	str	r5, [r4, #0]
 800612a:	bf18      	it	ne
 800612c:	6059      	strne	r1, [r3, #4]
 800612e:	6863      	ldr	r3, [r4, #4]
 8006130:	bf08      	it	eq
 8006132:	6031      	streq	r1, [r6, #0]
 8006134:	5162      	str	r2, [r4, r5]
 8006136:	604b      	str	r3, [r1, #4]
 8006138:	4638      	mov	r0, r7
 800613a:	f104 060b 	add.w	r6, r4, #11
 800613e:	f000 fbbd 	bl	80068bc <__malloc_unlock>
 8006142:	f026 0607 	bic.w	r6, r6, #7
 8006146:	1d23      	adds	r3, r4, #4
 8006148:	1af2      	subs	r2, r6, r3
 800614a:	d0b6      	beq.n	80060ba <_malloc_r+0x22>
 800614c:	1b9b      	subs	r3, r3, r6
 800614e:	50a3      	str	r3, [r4, r2]
 8006150:	e7b3      	b.n	80060ba <_malloc_r+0x22>
 8006152:	6862      	ldr	r2, [r4, #4]
 8006154:	42a3      	cmp	r3, r4
 8006156:	bf0c      	ite	eq
 8006158:	6032      	streq	r2, [r6, #0]
 800615a:	605a      	strne	r2, [r3, #4]
 800615c:	e7ec      	b.n	8006138 <_malloc_r+0xa0>
 800615e:	4623      	mov	r3, r4
 8006160:	6864      	ldr	r4, [r4, #4]
 8006162:	e7b2      	b.n	80060ca <_malloc_r+0x32>
 8006164:	4634      	mov	r4, r6
 8006166:	6876      	ldr	r6, [r6, #4]
 8006168:	e7b9      	b.n	80060de <_malloc_r+0x46>
 800616a:	230c      	movs	r3, #12
 800616c:	603b      	str	r3, [r7, #0]
 800616e:	4638      	mov	r0, r7
 8006170:	f000 fba4 	bl	80068bc <__malloc_unlock>
 8006174:	e7a1      	b.n	80060ba <_malloc_r+0x22>
 8006176:	6025      	str	r5, [r4, #0]
 8006178:	e7de      	b.n	8006138 <_malloc_r+0xa0>
 800617a:	bf00      	nop
 800617c:	2000068c 	.word	0x2000068c

08006180 <__sfputc_r>:
 8006180:	6893      	ldr	r3, [r2, #8]
 8006182:	3b01      	subs	r3, #1
 8006184:	2b00      	cmp	r3, #0
 8006186:	b410      	push	{r4}
 8006188:	6093      	str	r3, [r2, #8]
 800618a:	da08      	bge.n	800619e <__sfputc_r+0x1e>
 800618c:	6994      	ldr	r4, [r2, #24]
 800618e:	42a3      	cmp	r3, r4
 8006190:	db01      	blt.n	8006196 <__sfputc_r+0x16>
 8006192:	290a      	cmp	r1, #10
 8006194:	d103      	bne.n	800619e <__sfputc_r+0x1e>
 8006196:	f85d 4b04 	ldr.w	r4, [sp], #4
 800619a:	f7ff bc31 	b.w	8005a00 <__swbuf_r>
 800619e:	6813      	ldr	r3, [r2, #0]
 80061a0:	1c58      	adds	r0, r3, #1
 80061a2:	6010      	str	r0, [r2, #0]
 80061a4:	7019      	strb	r1, [r3, #0]
 80061a6:	4608      	mov	r0, r1
 80061a8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80061ac:	4770      	bx	lr

080061ae <__sfputs_r>:
 80061ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80061b0:	4606      	mov	r6, r0
 80061b2:	460f      	mov	r7, r1
 80061b4:	4614      	mov	r4, r2
 80061b6:	18d5      	adds	r5, r2, r3
 80061b8:	42ac      	cmp	r4, r5
 80061ba:	d101      	bne.n	80061c0 <__sfputs_r+0x12>
 80061bc:	2000      	movs	r0, #0
 80061be:	e007      	b.n	80061d0 <__sfputs_r+0x22>
 80061c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80061c4:	463a      	mov	r2, r7
 80061c6:	4630      	mov	r0, r6
 80061c8:	f7ff ffda 	bl	8006180 <__sfputc_r>
 80061cc:	1c43      	adds	r3, r0, #1
 80061ce:	d1f3      	bne.n	80061b8 <__sfputs_r+0xa>
 80061d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080061d4 <_vfiprintf_r>:
 80061d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061d8:	460d      	mov	r5, r1
 80061da:	b09d      	sub	sp, #116	; 0x74
 80061dc:	4614      	mov	r4, r2
 80061de:	4698      	mov	r8, r3
 80061e0:	4606      	mov	r6, r0
 80061e2:	b118      	cbz	r0, 80061ec <_vfiprintf_r+0x18>
 80061e4:	6983      	ldr	r3, [r0, #24]
 80061e6:	b90b      	cbnz	r3, 80061ec <_vfiprintf_r+0x18>
 80061e8:	f7ff fde4 	bl	8005db4 <__sinit>
 80061ec:	4b89      	ldr	r3, [pc, #548]	; (8006414 <_vfiprintf_r+0x240>)
 80061ee:	429d      	cmp	r5, r3
 80061f0:	d11b      	bne.n	800622a <_vfiprintf_r+0x56>
 80061f2:	6875      	ldr	r5, [r6, #4]
 80061f4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80061f6:	07d9      	lsls	r1, r3, #31
 80061f8:	d405      	bmi.n	8006206 <_vfiprintf_r+0x32>
 80061fa:	89ab      	ldrh	r3, [r5, #12]
 80061fc:	059a      	lsls	r2, r3, #22
 80061fe:	d402      	bmi.n	8006206 <_vfiprintf_r+0x32>
 8006200:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006202:	f7ff fe75 	bl	8005ef0 <__retarget_lock_acquire_recursive>
 8006206:	89ab      	ldrh	r3, [r5, #12]
 8006208:	071b      	lsls	r3, r3, #28
 800620a:	d501      	bpl.n	8006210 <_vfiprintf_r+0x3c>
 800620c:	692b      	ldr	r3, [r5, #16]
 800620e:	b9eb      	cbnz	r3, 800624c <_vfiprintf_r+0x78>
 8006210:	4629      	mov	r1, r5
 8006212:	4630      	mov	r0, r6
 8006214:	f7ff fc46 	bl	8005aa4 <__swsetup_r>
 8006218:	b1c0      	cbz	r0, 800624c <_vfiprintf_r+0x78>
 800621a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800621c:	07dc      	lsls	r4, r3, #31
 800621e:	d50e      	bpl.n	800623e <_vfiprintf_r+0x6a>
 8006220:	f04f 30ff 	mov.w	r0, #4294967295
 8006224:	b01d      	add	sp, #116	; 0x74
 8006226:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800622a:	4b7b      	ldr	r3, [pc, #492]	; (8006418 <_vfiprintf_r+0x244>)
 800622c:	429d      	cmp	r5, r3
 800622e:	d101      	bne.n	8006234 <_vfiprintf_r+0x60>
 8006230:	68b5      	ldr	r5, [r6, #8]
 8006232:	e7df      	b.n	80061f4 <_vfiprintf_r+0x20>
 8006234:	4b79      	ldr	r3, [pc, #484]	; (800641c <_vfiprintf_r+0x248>)
 8006236:	429d      	cmp	r5, r3
 8006238:	bf08      	it	eq
 800623a:	68f5      	ldreq	r5, [r6, #12]
 800623c:	e7da      	b.n	80061f4 <_vfiprintf_r+0x20>
 800623e:	89ab      	ldrh	r3, [r5, #12]
 8006240:	0598      	lsls	r0, r3, #22
 8006242:	d4ed      	bmi.n	8006220 <_vfiprintf_r+0x4c>
 8006244:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006246:	f7ff fe54 	bl	8005ef2 <__retarget_lock_release_recursive>
 800624a:	e7e9      	b.n	8006220 <_vfiprintf_r+0x4c>
 800624c:	2300      	movs	r3, #0
 800624e:	9309      	str	r3, [sp, #36]	; 0x24
 8006250:	2320      	movs	r3, #32
 8006252:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006256:	f8cd 800c 	str.w	r8, [sp, #12]
 800625a:	2330      	movs	r3, #48	; 0x30
 800625c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8006420 <_vfiprintf_r+0x24c>
 8006260:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006264:	f04f 0901 	mov.w	r9, #1
 8006268:	4623      	mov	r3, r4
 800626a:	469a      	mov	sl, r3
 800626c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006270:	b10a      	cbz	r2, 8006276 <_vfiprintf_r+0xa2>
 8006272:	2a25      	cmp	r2, #37	; 0x25
 8006274:	d1f9      	bne.n	800626a <_vfiprintf_r+0x96>
 8006276:	ebba 0b04 	subs.w	fp, sl, r4
 800627a:	d00b      	beq.n	8006294 <_vfiprintf_r+0xc0>
 800627c:	465b      	mov	r3, fp
 800627e:	4622      	mov	r2, r4
 8006280:	4629      	mov	r1, r5
 8006282:	4630      	mov	r0, r6
 8006284:	f7ff ff93 	bl	80061ae <__sfputs_r>
 8006288:	3001      	adds	r0, #1
 800628a:	f000 80aa 	beq.w	80063e2 <_vfiprintf_r+0x20e>
 800628e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006290:	445a      	add	r2, fp
 8006292:	9209      	str	r2, [sp, #36]	; 0x24
 8006294:	f89a 3000 	ldrb.w	r3, [sl]
 8006298:	2b00      	cmp	r3, #0
 800629a:	f000 80a2 	beq.w	80063e2 <_vfiprintf_r+0x20e>
 800629e:	2300      	movs	r3, #0
 80062a0:	f04f 32ff 	mov.w	r2, #4294967295
 80062a4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80062a8:	f10a 0a01 	add.w	sl, sl, #1
 80062ac:	9304      	str	r3, [sp, #16]
 80062ae:	9307      	str	r3, [sp, #28]
 80062b0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80062b4:	931a      	str	r3, [sp, #104]	; 0x68
 80062b6:	4654      	mov	r4, sl
 80062b8:	2205      	movs	r2, #5
 80062ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 80062be:	4858      	ldr	r0, [pc, #352]	; (8006420 <_vfiprintf_r+0x24c>)
 80062c0:	f7f9 ff86 	bl	80001d0 <memchr>
 80062c4:	9a04      	ldr	r2, [sp, #16]
 80062c6:	b9d8      	cbnz	r0, 8006300 <_vfiprintf_r+0x12c>
 80062c8:	06d1      	lsls	r1, r2, #27
 80062ca:	bf44      	itt	mi
 80062cc:	2320      	movmi	r3, #32
 80062ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80062d2:	0713      	lsls	r3, r2, #28
 80062d4:	bf44      	itt	mi
 80062d6:	232b      	movmi	r3, #43	; 0x2b
 80062d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80062dc:	f89a 3000 	ldrb.w	r3, [sl]
 80062e0:	2b2a      	cmp	r3, #42	; 0x2a
 80062e2:	d015      	beq.n	8006310 <_vfiprintf_r+0x13c>
 80062e4:	9a07      	ldr	r2, [sp, #28]
 80062e6:	4654      	mov	r4, sl
 80062e8:	2000      	movs	r0, #0
 80062ea:	f04f 0c0a 	mov.w	ip, #10
 80062ee:	4621      	mov	r1, r4
 80062f0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80062f4:	3b30      	subs	r3, #48	; 0x30
 80062f6:	2b09      	cmp	r3, #9
 80062f8:	d94e      	bls.n	8006398 <_vfiprintf_r+0x1c4>
 80062fa:	b1b0      	cbz	r0, 800632a <_vfiprintf_r+0x156>
 80062fc:	9207      	str	r2, [sp, #28]
 80062fe:	e014      	b.n	800632a <_vfiprintf_r+0x156>
 8006300:	eba0 0308 	sub.w	r3, r0, r8
 8006304:	fa09 f303 	lsl.w	r3, r9, r3
 8006308:	4313      	orrs	r3, r2
 800630a:	9304      	str	r3, [sp, #16]
 800630c:	46a2      	mov	sl, r4
 800630e:	e7d2      	b.n	80062b6 <_vfiprintf_r+0xe2>
 8006310:	9b03      	ldr	r3, [sp, #12]
 8006312:	1d19      	adds	r1, r3, #4
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	9103      	str	r1, [sp, #12]
 8006318:	2b00      	cmp	r3, #0
 800631a:	bfbb      	ittet	lt
 800631c:	425b      	neglt	r3, r3
 800631e:	f042 0202 	orrlt.w	r2, r2, #2
 8006322:	9307      	strge	r3, [sp, #28]
 8006324:	9307      	strlt	r3, [sp, #28]
 8006326:	bfb8      	it	lt
 8006328:	9204      	strlt	r2, [sp, #16]
 800632a:	7823      	ldrb	r3, [r4, #0]
 800632c:	2b2e      	cmp	r3, #46	; 0x2e
 800632e:	d10c      	bne.n	800634a <_vfiprintf_r+0x176>
 8006330:	7863      	ldrb	r3, [r4, #1]
 8006332:	2b2a      	cmp	r3, #42	; 0x2a
 8006334:	d135      	bne.n	80063a2 <_vfiprintf_r+0x1ce>
 8006336:	9b03      	ldr	r3, [sp, #12]
 8006338:	1d1a      	adds	r2, r3, #4
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	9203      	str	r2, [sp, #12]
 800633e:	2b00      	cmp	r3, #0
 8006340:	bfb8      	it	lt
 8006342:	f04f 33ff 	movlt.w	r3, #4294967295
 8006346:	3402      	adds	r4, #2
 8006348:	9305      	str	r3, [sp, #20]
 800634a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8006430 <_vfiprintf_r+0x25c>
 800634e:	7821      	ldrb	r1, [r4, #0]
 8006350:	2203      	movs	r2, #3
 8006352:	4650      	mov	r0, sl
 8006354:	f7f9 ff3c 	bl	80001d0 <memchr>
 8006358:	b140      	cbz	r0, 800636c <_vfiprintf_r+0x198>
 800635a:	2340      	movs	r3, #64	; 0x40
 800635c:	eba0 000a 	sub.w	r0, r0, sl
 8006360:	fa03 f000 	lsl.w	r0, r3, r0
 8006364:	9b04      	ldr	r3, [sp, #16]
 8006366:	4303      	orrs	r3, r0
 8006368:	3401      	adds	r4, #1
 800636a:	9304      	str	r3, [sp, #16]
 800636c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006370:	482c      	ldr	r0, [pc, #176]	; (8006424 <_vfiprintf_r+0x250>)
 8006372:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006376:	2206      	movs	r2, #6
 8006378:	f7f9 ff2a 	bl	80001d0 <memchr>
 800637c:	2800      	cmp	r0, #0
 800637e:	d03f      	beq.n	8006400 <_vfiprintf_r+0x22c>
 8006380:	4b29      	ldr	r3, [pc, #164]	; (8006428 <_vfiprintf_r+0x254>)
 8006382:	bb1b      	cbnz	r3, 80063cc <_vfiprintf_r+0x1f8>
 8006384:	9b03      	ldr	r3, [sp, #12]
 8006386:	3307      	adds	r3, #7
 8006388:	f023 0307 	bic.w	r3, r3, #7
 800638c:	3308      	adds	r3, #8
 800638e:	9303      	str	r3, [sp, #12]
 8006390:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006392:	443b      	add	r3, r7
 8006394:	9309      	str	r3, [sp, #36]	; 0x24
 8006396:	e767      	b.n	8006268 <_vfiprintf_r+0x94>
 8006398:	fb0c 3202 	mla	r2, ip, r2, r3
 800639c:	460c      	mov	r4, r1
 800639e:	2001      	movs	r0, #1
 80063a0:	e7a5      	b.n	80062ee <_vfiprintf_r+0x11a>
 80063a2:	2300      	movs	r3, #0
 80063a4:	3401      	adds	r4, #1
 80063a6:	9305      	str	r3, [sp, #20]
 80063a8:	4619      	mov	r1, r3
 80063aa:	f04f 0c0a 	mov.w	ip, #10
 80063ae:	4620      	mov	r0, r4
 80063b0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80063b4:	3a30      	subs	r2, #48	; 0x30
 80063b6:	2a09      	cmp	r2, #9
 80063b8:	d903      	bls.n	80063c2 <_vfiprintf_r+0x1ee>
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d0c5      	beq.n	800634a <_vfiprintf_r+0x176>
 80063be:	9105      	str	r1, [sp, #20]
 80063c0:	e7c3      	b.n	800634a <_vfiprintf_r+0x176>
 80063c2:	fb0c 2101 	mla	r1, ip, r1, r2
 80063c6:	4604      	mov	r4, r0
 80063c8:	2301      	movs	r3, #1
 80063ca:	e7f0      	b.n	80063ae <_vfiprintf_r+0x1da>
 80063cc:	ab03      	add	r3, sp, #12
 80063ce:	9300      	str	r3, [sp, #0]
 80063d0:	462a      	mov	r2, r5
 80063d2:	4b16      	ldr	r3, [pc, #88]	; (800642c <_vfiprintf_r+0x258>)
 80063d4:	a904      	add	r1, sp, #16
 80063d6:	4630      	mov	r0, r6
 80063d8:	f3af 8000 	nop.w
 80063dc:	4607      	mov	r7, r0
 80063de:	1c78      	adds	r0, r7, #1
 80063e0:	d1d6      	bne.n	8006390 <_vfiprintf_r+0x1bc>
 80063e2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80063e4:	07d9      	lsls	r1, r3, #31
 80063e6:	d405      	bmi.n	80063f4 <_vfiprintf_r+0x220>
 80063e8:	89ab      	ldrh	r3, [r5, #12]
 80063ea:	059a      	lsls	r2, r3, #22
 80063ec:	d402      	bmi.n	80063f4 <_vfiprintf_r+0x220>
 80063ee:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80063f0:	f7ff fd7f 	bl	8005ef2 <__retarget_lock_release_recursive>
 80063f4:	89ab      	ldrh	r3, [r5, #12]
 80063f6:	065b      	lsls	r3, r3, #25
 80063f8:	f53f af12 	bmi.w	8006220 <_vfiprintf_r+0x4c>
 80063fc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80063fe:	e711      	b.n	8006224 <_vfiprintf_r+0x50>
 8006400:	ab03      	add	r3, sp, #12
 8006402:	9300      	str	r3, [sp, #0]
 8006404:	462a      	mov	r2, r5
 8006406:	4b09      	ldr	r3, [pc, #36]	; (800642c <_vfiprintf_r+0x258>)
 8006408:	a904      	add	r1, sp, #16
 800640a:	4630      	mov	r0, r6
 800640c:	f000 f880 	bl	8006510 <_printf_i>
 8006410:	e7e4      	b.n	80063dc <_vfiprintf_r+0x208>
 8006412:	bf00      	nop
 8006414:	08009270 	.word	0x08009270
 8006418:	08009290 	.word	0x08009290
 800641c:	08009250 	.word	0x08009250
 8006420:	080092b0 	.word	0x080092b0
 8006424:	080092ba 	.word	0x080092ba
 8006428:	00000000 	.word	0x00000000
 800642c:	080061af 	.word	0x080061af
 8006430:	080092b6 	.word	0x080092b6

08006434 <_printf_common>:
 8006434:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006438:	4616      	mov	r6, r2
 800643a:	4699      	mov	r9, r3
 800643c:	688a      	ldr	r2, [r1, #8]
 800643e:	690b      	ldr	r3, [r1, #16]
 8006440:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006444:	4293      	cmp	r3, r2
 8006446:	bfb8      	it	lt
 8006448:	4613      	movlt	r3, r2
 800644a:	6033      	str	r3, [r6, #0]
 800644c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006450:	4607      	mov	r7, r0
 8006452:	460c      	mov	r4, r1
 8006454:	b10a      	cbz	r2, 800645a <_printf_common+0x26>
 8006456:	3301      	adds	r3, #1
 8006458:	6033      	str	r3, [r6, #0]
 800645a:	6823      	ldr	r3, [r4, #0]
 800645c:	0699      	lsls	r1, r3, #26
 800645e:	bf42      	ittt	mi
 8006460:	6833      	ldrmi	r3, [r6, #0]
 8006462:	3302      	addmi	r3, #2
 8006464:	6033      	strmi	r3, [r6, #0]
 8006466:	6825      	ldr	r5, [r4, #0]
 8006468:	f015 0506 	ands.w	r5, r5, #6
 800646c:	d106      	bne.n	800647c <_printf_common+0x48>
 800646e:	f104 0a19 	add.w	sl, r4, #25
 8006472:	68e3      	ldr	r3, [r4, #12]
 8006474:	6832      	ldr	r2, [r6, #0]
 8006476:	1a9b      	subs	r3, r3, r2
 8006478:	42ab      	cmp	r3, r5
 800647a:	dc26      	bgt.n	80064ca <_printf_common+0x96>
 800647c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006480:	1e13      	subs	r3, r2, #0
 8006482:	6822      	ldr	r2, [r4, #0]
 8006484:	bf18      	it	ne
 8006486:	2301      	movne	r3, #1
 8006488:	0692      	lsls	r2, r2, #26
 800648a:	d42b      	bmi.n	80064e4 <_printf_common+0xb0>
 800648c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006490:	4649      	mov	r1, r9
 8006492:	4638      	mov	r0, r7
 8006494:	47c0      	blx	r8
 8006496:	3001      	adds	r0, #1
 8006498:	d01e      	beq.n	80064d8 <_printf_common+0xa4>
 800649a:	6823      	ldr	r3, [r4, #0]
 800649c:	68e5      	ldr	r5, [r4, #12]
 800649e:	6832      	ldr	r2, [r6, #0]
 80064a0:	f003 0306 	and.w	r3, r3, #6
 80064a4:	2b04      	cmp	r3, #4
 80064a6:	bf08      	it	eq
 80064a8:	1aad      	subeq	r5, r5, r2
 80064aa:	68a3      	ldr	r3, [r4, #8]
 80064ac:	6922      	ldr	r2, [r4, #16]
 80064ae:	bf0c      	ite	eq
 80064b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80064b4:	2500      	movne	r5, #0
 80064b6:	4293      	cmp	r3, r2
 80064b8:	bfc4      	itt	gt
 80064ba:	1a9b      	subgt	r3, r3, r2
 80064bc:	18ed      	addgt	r5, r5, r3
 80064be:	2600      	movs	r6, #0
 80064c0:	341a      	adds	r4, #26
 80064c2:	42b5      	cmp	r5, r6
 80064c4:	d11a      	bne.n	80064fc <_printf_common+0xc8>
 80064c6:	2000      	movs	r0, #0
 80064c8:	e008      	b.n	80064dc <_printf_common+0xa8>
 80064ca:	2301      	movs	r3, #1
 80064cc:	4652      	mov	r2, sl
 80064ce:	4649      	mov	r1, r9
 80064d0:	4638      	mov	r0, r7
 80064d2:	47c0      	blx	r8
 80064d4:	3001      	adds	r0, #1
 80064d6:	d103      	bne.n	80064e0 <_printf_common+0xac>
 80064d8:	f04f 30ff 	mov.w	r0, #4294967295
 80064dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80064e0:	3501      	adds	r5, #1
 80064e2:	e7c6      	b.n	8006472 <_printf_common+0x3e>
 80064e4:	18e1      	adds	r1, r4, r3
 80064e6:	1c5a      	adds	r2, r3, #1
 80064e8:	2030      	movs	r0, #48	; 0x30
 80064ea:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80064ee:	4422      	add	r2, r4
 80064f0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80064f4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80064f8:	3302      	adds	r3, #2
 80064fa:	e7c7      	b.n	800648c <_printf_common+0x58>
 80064fc:	2301      	movs	r3, #1
 80064fe:	4622      	mov	r2, r4
 8006500:	4649      	mov	r1, r9
 8006502:	4638      	mov	r0, r7
 8006504:	47c0      	blx	r8
 8006506:	3001      	adds	r0, #1
 8006508:	d0e6      	beq.n	80064d8 <_printf_common+0xa4>
 800650a:	3601      	adds	r6, #1
 800650c:	e7d9      	b.n	80064c2 <_printf_common+0x8e>
	...

08006510 <_printf_i>:
 8006510:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006514:	7e0f      	ldrb	r7, [r1, #24]
 8006516:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006518:	2f78      	cmp	r7, #120	; 0x78
 800651a:	4691      	mov	r9, r2
 800651c:	4680      	mov	r8, r0
 800651e:	460c      	mov	r4, r1
 8006520:	469a      	mov	sl, r3
 8006522:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006526:	d807      	bhi.n	8006538 <_printf_i+0x28>
 8006528:	2f62      	cmp	r7, #98	; 0x62
 800652a:	d80a      	bhi.n	8006542 <_printf_i+0x32>
 800652c:	2f00      	cmp	r7, #0
 800652e:	f000 80d8 	beq.w	80066e2 <_printf_i+0x1d2>
 8006532:	2f58      	cmp	r7, #88	; 0x58
 8006534:	f000 80a3 	beq.w	800667e <_printf_i+0x16e>
 8006538:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800653c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006540:	e03a      	b.n	80065b8 <_printf_i+0xa8>
 8006542:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006546:	2b15      	cmp	r3, #21
 8006548:	d8f6      	bhi.n	8006538 <_printf_i+0x28>
 800654a:	a101      	add	r1, pc, #4	; (adr r1, 8006550 <_printf_i+0x40>)
 800654c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006550:	080065a9 	.word	0x080065a9
 8006554:	080065bd 	.word	0x080065bd
 8006558:	08006539 	.word	0x08006539
 800655c:	08006539 	.word	0x08006539
 8006560:	08006539 	.word	0x08006539
 8006564:	08006539 	.word	0x08006539
 8006568:	080065bd 	.word	0x080065bd
 800656c:	08006539 	.word	0x08006539
 8006570:	08006539 	.word	0x08006539
 8006574:	08006539 	.word	0x08006539
 8006578:	08006539 	.word	0x08006539
 800657c:	080066c9 	.word	0x080066c9
 8006580:	080065ed 	.word	0x080065ed
 8006584:	080066ab 	.word	0x080066ab
 8006588:	08006539 	.word	0x08006539
 800658c:	08006539 	.word	0x08006539
 8006590:	080066eb 	.word	0x080066eb
 8006594:	08006539 	.word	0x08006539
 8006598:	080065ed 	.word	0x080065ed
 800659c:	08006539 	.word	0x08006539
 80065a0:	08006539 	.word	0x08006539
 80065a4:	080066b3 	.word	0x080066b3
 80065a8:	682b      	ldr	r3, [r5, #0]
 80065aa:	1d1a      	adds	r2, r3, #4
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	602a      	str	r2, [r5, #0]
 80065b0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80065b4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80065b8:	2301      	movs	r3, #1
 80065ba:	e0a3      	b.n	8006704 <_printf_i+0x1f4>
 80065bc:	6820      	ldr	r0, [r4, #0]
 80065be:	6829      	ldr	r1, [r5, #0]
 80065c0:	0606      	lsls	r6, r0, #24
 80065c2:	f101 0304 	add.w	r3, r1, #4
 80065c6:	d50a      	bpl.n	80065de <_printf_i+0xce>
 80065c8:	680e      	ldr	r6, [r1, #0]
 80065ca:	602b      	str	r3, [r5, #0]
 80065cc:	2e00      	cmp	r6, #0
 80065ce:	da03      	bge.n	80065d8 <_printf_i+0xc8>
 80065d0:	232d      	movs	r3, #45	; 0x2d
 80065d2:	4276      	negs	r6, r6
 80065d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80065d8:	485e      	ldr	r0, [pc, #376]	; (8006754 <_printf_i+0x244>)
 80065da:	230a      	movs	r3, #10
 80065dc:	e019      	b.n	8006612 <_printf_i+0x102>
 80065de:	680e      	ldr	r6, [r1, #0]
 80065e0:	602b      	str	r3, [r5, #0]
 80065e2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80065e6:	bf18      	it	ne
 80065e8:	b236      	sxthne	r6, r6
 80065ea:	e7ef      	b.n	80065cc <_printf_i+0xbc>
 80065ec:	682b      	ldr	r3, [r5, #0]
 80065ee:	6820      	ldr	r0, [r4, #0]
 80065f0:	1d19      	adds	r1, r3, #4
 80065f2:	6029      	str	r1, [r5, #0]
 80065f4:	0601      	lsls	r1, r0, #24
 80065f6:	d501      	bpl.n	80065fc <_printf_i+0xec>
 80065f8:	681e      	ldr	r6, [r3, #0]
 80065fa:	e002      	b.n	8006602 <_printf_i+0xf2>
 80065fc:	0646      	lsls	r6, r0, #25
 80065fe:	d5fb      	bpl.n	80065f8 <_printf_i+0xe8>
 8006600:	881e      	ldrh	r6, [r3, #0]
 8006602:	4854      	ldr	r0, [pc, #336]	; (8006754 <_printf_i+0x244>)
 8006604:	2f6f      	cmp	r7, #111	; 0x6f
 8006606:	bf0c      	ite	eq
 8006608:	2308      	moveq	r3, #8
 800660a:	230a      	movne	r3, #10
 800660c:	2100      	movs	r1, #0
 800660e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006612:	6865      	ldr	r5, [r4, #4]
 8006614:	60a5      	str	r5, [r4, #8]
 8006616:	2d00      	cmp	r5, #0
 8006618:	bfa2      	ittt	ge
 800661a:	6821      	ldrge	r1, [r4, #0]
 800661c:	f021 0104 	bicge.w	r1, r1, #4
 8006620:	6021      	strge	r1, [r4, #0]
 8006622:	b90e      	cbnz	r6, 8006628 <_printf_i+0x118>
 8006624:	2d00      	cmp	r5, #0
 8006626:	d04d      	beq.n	80066c4 <_printf_i+0x1b4>
 8006628:	4615      	mov	r5, r2
 800662a:	fbb6 f1f3 	udiv	r1, r6, r3
 800662e:	fb03 6711 	mls	r7, r3, r1, r6
 8006632:	5dc7      	ldrb	r7, [r0, r7]
 8006634:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006638:	4637      	mov	r7, r6
 800663a:	42bb      	cmp	r3, r7
 800663c:	460e      	mov	r6, r1
 800663e:	d9f4      	bls.n	800662a <_printf_i+0x11a>
 8006640:	2b08      	cmp	r3, #8
 8006642:	d10b      	bne.n	800665c <_printf_i+0x14c>
 8006644:	6823      	ldr	r3, [r4, #0]
 8006646:	07de      	lsls	r6, r3, #31
 8006648:	d508      	bpl.n	800665c <_printf_i+0x14c>
 800664a:	6923      	ldr	r3, [r4, #16]
 800664c:	6861      	ldr	r1, [r4, #4]
 800664e:	4299      	cmp	r1, r3
 8006650:	bfde      	ittt	le
 8006652:	2330      	movle	r3, #48	; 0x30
 8006654:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006658:	f105 35ff 	addle.w	r5, r5, #4294967295
 800665c:	1b52      	subs	r2, r2, r5
 800665e:	6122      	str	r2, [r4, #16]
 8006660:	f8cd a000 	str.w	sl, [sp]
 8006664:	464b      	mov	r3, r9
 8006666:	aa03      	add	r2, sp, #12
 8006668:	4621      	mov	r1, r4
 800666a:	4640      	mov	r0, r8
 800666c:	f7ff fee2 	bl	8006434 <_printf_common>
 8006670:	3001      	adds	r0, #1
 8006672:	d14c      	bne.n	800670e <_printf_i+0x1fe>
 8006674:	f04f 30ff 	mov.w	r0, #4294967295
 8006678:	b004      	add	sp, #16
 800667a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800667e:	4835      	ldr	r0, [pc, #212]	; (8006754 <_printf_i+0x244>)
 8006680:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006684:	6829      	ldr	r1, [r5, #0]
 8006686:	6823      	ldr	r3, [r4, #0]
 8006688:	f851 6b04 	ldr.w	r6, [r1], #4
 800668c:	6029      	str	r1, [r5, #0]
 800668e:	061d      	lsls	r5, r3, #24
 8006690:	d514      	bpl.n	80066bc <_printf_i+0x1ac>
 8006692:	07df      	lsls	r7, r3, #31
 8006694:	bf44      	itt	mi
 8006696:	f043 0320 	orrmi.w	r3, r3, #32
 800669a:	6023      	strmi	r3, [r4, #0]
 800669c:	b91e      	cbnz	r6, 80066a6 <_printf_i+0x196>
 800669e:	6823      	ldr	r3, [r4, #0]
 80066a0:	f023 0320 	bic.w	r3, r3, #32
 80066a4:	6023      	str	r3, [r4, #0]
 80066a6:	2310      	movs	r3, #16
 80066a8:	e7b0      	b.n	800660c <_printf_i+0xfc>
 80066aa:	6823      	ldr	r3, [r4, #0]
 80066ac:	f043 0320 	orr.w	r3, r3, #32
 80066b0:	6023      	str	r3, [r4, #0]
 80066b2:	2378      	movs	r3, #120	; 0x78
 80066b4:	4828      	ldr	r0, [pc, #160]	; (8006758 <_printf_i+0x248>)
 80066b6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80066ba:	e7e3      	b.n	8006684 <_printf_i+0x174>
 80066bc:	0659      	lsls	r1, r3, #25
 80066be:	bf48      	it	mi
 80066c0:	b2b6      	uxthmi	r6, r6
 80066c2:	e7e6      	b.n	8006692 <_printf_i+0x182>
 80066c4:	4615      	mov	r5, r2
 80066c6:	e7bb      	b.n	8006640 <_printf_i+0x130>
 80066c8:	682b      	ldr	r3, [r5, #0]
 80066ca:	6826      	ldr	r6, [r4, #0]
 80066cc:	6961      	ldr	r1, [r4, #20]
 80066ce:	1d18      	adds	r0, r3, #4
 80066d0:	6028      	str	r0, [r5, #0]
 80066d2:	0635      	lsls	r5, r6, #24
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	d501      	bpl.n	80066dc <_printf_i+0x1cc>
 80066d8:	6019      	str	r1, [r3, #0]
 80066da:	e002      	b.n	80066e2 <_printf_i+0x1d2>
 80066dc:	0670      	lsls	r0, r6, #25
 80066de:	d5fb      	bpl.n	80066d8 <_printf_i+0x1c8>
 80066e0:	8019      	strh	r1, [r3, #0]
 80066e2:	2300      	movs	r3, #0
 80066e4:	6123      	str	r3, [r4, #16]
 80066e6:	4615      	mov	r5, r2
 80066e8:	e7ba      	b.n	8006660 <_printf_i+0x150>
 80066ea:	682b      	ldr	r3, [r5, #0]
 80066ec:	1d1a      	adds	r2, r3, #4
 80066ee:	602a      	str	r2, [r5, #0]
 80066f0:	681d      	ldr	r5, [r3, #0]
 80066f2:	6862      	ldr	r2, [r4, #4]
 80066f4:	2100      	movs	r1, #0
 80066f6:	4628      	mov	r0, r5
 80066f8:	f7f9 fd6a 	bl	80001d0 <memchr>
 80066fc:	b108      	cbz	r0, 8006702 <_printf_i+0x1f2>
 80066fe:	1b40      	subs	r0, r0, r5
 8006700:	6060      	str	r0, [r4, #4]
 8006702:	6863      	ldr	r3, [r4, #4]
 8006704:	6123      	str	r3, [r4, #16]
 8006706:	2300      	movs	r3, #0
 8006708:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800670c:	e7a8      	b.n	8006660 <_printf_i+0x150>
 800670e:	6923      	ldr	r3, [r4, #16]
 8006710:	462a      	mov	r2, r5
 8006712:	4649      	mov	r1, r9
 8006714:	4640      	mov	r0, r8
 8006716:	47d0      	blx	sl
 8006718:	3001      	adds	r0, #1
 800671a:	d0ab      	beq.n	8006674 <_printf_i+0x164>
 800671c:	6823      	ldr	r3, [r4, #0]
 800671e:	079b      	lsls	r3, r3, #30
 8006720:	d413      	bmi.n	800674a <_printf_i+0x23a>
 8006722:	68e0      	ldr	r0, [r4, #12]
 8006724:	9b03      	ldr	r3, [sp, #12]
 8006726:	4298      	cmp	r0, r3
 8006728:	bfb8      	it	lt
 800672a:	4618      	movlt	r0, r3
 800672c:	e7a4      	b.n	8006678 <_printf_i+0x168>
 800672e:	2301      	movs	r3, #1
 8006730:	4632      	mov	r2, r6
 8006732:	4649      	mov	r1, r9
 8006734:	4640      	mov	r0, r8
 8006736:	47d0      	blx	sl
 8006738:	3001      	adds	r0, #1
 800673a:	d09b      	beq.n	8006674 <_printf_i+0x164>
 800673c:	3501      	adds	r5, #1
 800673e:	68e3      	ldr	r3, [r4, #12]
 8006740:	9903      	ldr	r1, [sp, #12]
 8006742:	1a5b      	subs	r3, r3, r1
 8006744:	42ab      	cmp	r3, r5
 8006746:	dcf2      	bgt.n	800672e <_printf_i+0x21e>
 8006748:	e7eb      	b.n	8006722 <_printf_i+0x212>
 800674a:	2500      	movs	r5, #0
 800674c:	f104 0619 	add.w	r6, r4, #25
 8006750:	e7f5      	b.n	800673e <_printf_i+0x22e>
 8006752:	bf00      	nop
 8006754:	080092c1 	.word	0x080092c1
 8006758:	080092d2 	.word	0x080092d2

0800675c <_sbrk_r>:
 800675c:	b538      	push	{r3, r4, r5, lr}
 800675e:	4d06      	ldr	r5, [pc, #24]	; (8006778 <_sbrk_r+0x1c>)
 8006760:	2300      	movs	r3, #0
 8006762:	4604      	mov	r4, r0
 8006764:	4608      	mov	r0, r1
 8006766:	602b      	str	r3, [r5, #0]
 8006768:	f7fa fff0 	bl	800174c <_sbrk>
 800676c:	1c43      	adds	r3, r0, #1
 800676e:	d102      	bne.n	8006776 <_sbrk_r+0x1a>
 8006770:	682b      	ldr	r3, [r5, #0]
 8006772:	b103      	cbz	r3, 8006776 <_sbrk_r+0x1a>
 8006774:	6023      	str	r3, [r4, #0]
 8006776:	bd38      	pop	{r3, r4, r5, pc}
 8006778:	20000694 	.word	0x20000694

0800677c <__sread>:
 800677c:	b510      	push	{r4, lr}
 800677e:	460c      	mov	r4, r1
 8006780:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006784:	f000 f8a0 	bl	80068c8 <_read_r>
 8006788:	2800      	cmp	r0, #0
 800678a:	bfab      	itete	ge
 800678c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800678e:	89a3      	ldrhlt	r3, [r4, #12]
 8006790:	181b      	addge	r3, r3, r0
 8006792:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006796:	bfac      	ite	ge
 8006798:	6563      	strge	r3, [r4, #84]	; 0x54
 800679a:	81a3      	strhlt	r3, [r4, #12]
 800679c:	bd10      	pop	{r4, pc}

0800679e <__swrite>:
 800679e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80067a2:	461f      	mov	r7, r3
 80067a4:	898b      	ldrh	r3, [r1, #12]
 80067a6:	05db      	lsls	r3, r3, #23
 80067a8:	4605      	mov	r5, r0
 80067aa:	460c      	mov	r4, r1
 80067ac:	4616      	mov	r6, r2
 80067ae:	d505      	bpl.n	80067bc <__swrite+0x1e>
 80067b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80067b4:	2302      	movs	r3, #2
 80067b6:	2200      	movs	r2, #0
 80067b8:	f000 f868 	bl	800688c <_lseek_r>
 80067bc:	89a3      	ldrh	r3, [r4, #12]
 80067be:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80067c2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80067c6:	81a3      	strh	r3, [r4, #12]
 80067c8:	4632      	mov	r2, r6
 80067ca:	463b      	mov	r3, r7
 80067cc:	4628      	mov	r0, r5
 80067ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80067d2:	f000 b817 	b.w	8006804 <_write_r>

080067d6 <__sseek>:
 80067d6:	b510      	push	{r4, lr}
 80067d8:	460c      	mov	r4, r1
 80067da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80067de:	f000 f855 	bl	800688c <_lseek_r>
 80067e2:	1c43      	adds	r3, r0, #1
 80067e4:	89a3      	ldrh	r3, [r4, #12]
 80067e6:	bf15      	itete	ne
 80067e8:	6560      	strne	r0, [r4, #84]	; 0x54
 80067ea:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80067ee:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80067f2:	81a3      	strheq	r3, [r4, #12]
 80067f4:	bf18      	it	ne
 80067f6:	81a3      	strhne	r3, [r4, #12]
 80067f8:	bd10      	pop	{r4, pc}

080067fa <__sclose>:
 80067fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80067fe:	f000 b813 	b.w	8006828 <_close_r>
	...

08006804 <_write_r>:
 8006804:	b538      	push	{r3, r4, r5, lr}
 8006806:	4d07      	ldr	r5, [pc, #28]	; (8006824 <_write_r+0x20>)
 8006808:	4604      	mov	r4, r0
 800680a:	4608      	mov	r0, r1
 800680c:	4611      	mov	r1, r2
 800680e:	2200      	movs	r2, #0
 8006810:	602a      	str	r2, [r5, #0]
 8006812:	461a      	mov	r2, r3
 8006814:	f7fa fb54 	bl	8000ec0 <_write>
 8006818:	1c43      	adds	r3, r0, #1
 800681a:	d102      	bne.n	8006822 <_write_r+0x1e>
 800681c:	682b      	ldr	r3, [r5, #0]
 800681e:	b103      	cbz	r3, 8006822 <_write_r+0x1e>
 8006820:	6023      	str	r3, [r4, #0]
 8006822:	bd38      	pop	{r3, r4, r5, pc}
 8006824:	20000694 	.word	0x20000694

08006828 <_close_r>:
 8006828:	b538      	push	{r3, r4, r5, lr}
 800682a:	4d06      	ldr	r5, [pc, #24]	; (8006844 <_close_r+0x1c>)
 800682c:	2300      	movs	r3, #0
 800682e:	4604      	mov	r4, r0
 8006830:	4608      	mov	r0, r1
 8006832:	602b      	str	r3, [r5, #0]
 8006834:	f7fa ff56 	bl	80016e4 <_close>
 8006838:	1c43      	adds	r3, r0, #1
 800683a:	d102      	bne.n	8006842 <_close_r+0x1a>
 800683c:	682b      	ldr	r3, [r5, #0]
 800683e:	b103      	cbz	r3, 8006842 <_close_r+0x1a>
 8006840:	6023      	str	r3, [r4, #0]
 8006842:	bd38      	pop	{r3, r4, r5, pc}
 8006844:	20000694 	.word	0x20000694

08006848 <_fstat_r>:
 8006848:	b538      	push	{r3, r4, r5, lr}
 800684a:	4d07      	ldr	r5, [pc, #28]	; (8006868 <_fstat_r+0x20>)
 800684c:	2300      	movs	r3, #0
 800684e:	4604      	mov	r4, r0
 8006850:	4608      	mov	r0, r1
 8006852:	4611      	mov	r1, r2
 8006854:	602b      	str	r3, [r5, #0]
 8006856:	f7fa ff51 	bl	80016fc <_fstat>
 800685a:	1c43      	adds	r3, r0, #1
 800685c:	d102      	bne.n	8006864 <_fstat_r+0x1c>
 800685e:	682b      	ldr	r3, [r5, #0]
 8006860:	b103      	cbz	r3, 8006864 <_fstat_r+0x1c>
 8006862:	6023      	str	r3, [r4, #0]
 8006864:	bd38      	pop	{r3, r4, r5, pc}
 8006866:	bf00      	nop
 8006868:	20000694 	.word	0x20000694

0800686c <_isatty_r>:
 800686c:	b538      	push	{r3, r4, r5, lr}
 800686e:	4d06      	ldr	r5, [pc, #24]	; (8006888 <_isatty_r+0x1c>)
 8006870:	2300      	movs	r3, #0
 8006872:	4604      	mov	r4, r0
 8006874:	4608      	mov	r0, r1
 8006876:	602b      	str	r3, [r5, #0]
 8006878:	f7fa ff50 	bl	800171c <_isatty>
 800687c:	1c43      	adds	r3, r0, #1
 800687e:	d102      	bne.n	8006886 <_isatty_r+0x1a>
 8006880:	682b      	ldr	r3, [r5, #0]
 8006882:	b103      	cbz	r3, 8006886 <_isatty_r+0x1a>
 8006884:	6023      	str	r3, [r4, #0]
 8006886:	bd38      	pop	{r3, r4, r5, pc}
 8006888:	20000694 	.word	0x20000694

0800688c <_lseek_r>:
 800688c:	b538      	push	{r3, r4, r5, lr}
 800688e:	4d07      	ldr	r5, [pc, #28]	; (80068ac <_lseek_r+0x20>)
 8006890:	4604      	mov	r4, r0
 8006892:	4608      	mov	r0, r1
 8006894:	4611      	mov	r1, r2
 8006896:	2200      	movs	r2, #0
 8006898:	602a      	str	r2, [r5, #0]
 800689a:	461a      	mov	r2, r3
 800689c:	f7fa ff49 	bl	8001732 <_lseek>
 80068a0:	1c43      	adds	r3, r0, #1
 80068a2:	d102      	bne.n	80068aa <_lseek_r+0x1e>
 80068a4:	682b      	ldr	r3, [r5, #0]
 80068a6:	b103      	cbz	r3, 80068aa <_lseek_r+0x1e>
 80068a8:	6023      	str	r3, [r4, #0]
 80068aa:	bd38      	pop	{r3, r4, r5, pc}
 80068ac:	20000694 	.word	0x20000694

080068b0 <__malloc_lock>:
 80068b0:	4801      	ldr	r0, [pc, #4]	; (80068b8 <__malloc_lock+0x8>)
 80068b2:	f7ff bb1d 	b.w	8005ef0 <__retarget_lock_acquire_recursive>
 80068b6:	bf00      	nop
 80068b8:	20000688 	.word	0x20000688

080068bc <__malloc_unlock>:
 80068bc:	4801      	ldr	r0, [pc, #4]	; (80068c4 <__malloc_unlock+0x8>)
 80068be:	f7ff bb18 	b.w	8005ef2 <__retarget_lock_release_recursive>
 80068c2:	bf00      	nop
 80068c4:	20000688 	.word	0x20000688

080068c8 <_read_r>:
 80068c8:	b538      	push	{r3, r4, r5, lr}
 80068ca:	4d07      	ldr	r5, [pc, #28]	; (80068e8 <_read_r+0x20>)
 80068cc:	4604      	mov	r4, r0
 80068ce:	4608      	mov	r0, r1
 80068d0:	4611      	mov	r1, r2
 80068d2:	2200      	movs	r2, #0
 80068d4:	602a      	str	r2, [r5, #0]
 80068d6:	461a      	mov	r2, r3
 80068d8:	f7fa fee7 	bl	80016aa <_read>
 80068dc:	1c43      	adds	r3, r0, #1
 80068de:	d102      	bne.n	80068e6 <_read_r+0x1e>
 80068e0:	682b      	ldr	r3, [r5, #0]
 80068e2:	b103      	cbz	r3, 80068e6 <_read_r+0x1e>
 80068e4:	6023      	str	r3, [r4, #0]
 80068e6:	bd38      	pop	{r3, r4, r5, pc}
 80068e8:	20000694 	.word	0x20000694

080068ec <_init>:
 80068ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068ee:	bf00      	nop
 80068f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80068f2:	bc08      	pop	{r3}
 80068f4:	469e      	mov	lr, r3
 80068f6:	4770      	bx	lr

080068f8 <_fini>:
 80068f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068fa:	bf00      	nop
 80068fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80068fe:	bc08      	pop	{r3}
 8006900:	469e      	mov	lr, r3
 8006902:	4770      	bx	lr
