
Display.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000081b4  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005d8  08008384  08008384  00018384  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800895c  0800895c  00024f00  2**0
                  CONTENTS
  4 .ARM          00000008  0800895c  0800895c  0001895c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008964  08008964  00024f00  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008964  08008964  00018964  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008968  08008968  00018968  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00004f00  20000000  0800896c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000600  20004f00  0800d86c  00024f00  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20005500  0800d86c  00025500  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00024f00  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001687a  00000000  00000000  00024f30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002bb5  00000000  00000000  0003b7aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001360  00000000  00000000  0003e360  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001250  00000000  00000000  0003f6c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028510  00000000  00000000  00040910  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018503  00000000  00000000  00068e20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f5dd5  00000000  00000000  00081323  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001770f8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000059f4  00000000  00000000  00177148  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20004f00 	.word	0x20004f00
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800836c 	.word	0x0800836c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20004f04 	.word	0x20004f04
 800020c:	0800836c 	.word	0x0800836c

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b974 	b.w	80005b0 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468e      	mov	lr, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14d      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4694      	mov	ip, r2
 80002f2:	d969      	bls.n	80003c8 <__udivmoddi4+0xe8>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b152      	cbz	r2, 8000310 <__udivmoddi4+0x30>
 80002fa:	fa01 f302 	lsl.w	r3, r1, r2
 80002fe:	f1c2 0120 	rsb	r1, r2, #32
 8000302:	fa20 f101 	lsr.w	r1, r0, r1
 8000306:	fa0c fc02 	lsl.w	ip, ip, r2
 800030a:	ea41 0e03 	orr.w	lr, r1, r3
 800030e:	4094      	lsls	r4, r2
 8000310:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000314:	0c21      	lsrs	r1, r4, #16
 8000316:	fbbe f6f8 	udiv	r6, lr, r8
 800031a:	fa1f f78c 	uxth.w	r7, ip
 800031e:	fb08 e316 	mls	r3, r8, r6, lr
 8000322:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000326:	fb06 f107 	mul.w	r1, r6, r7
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f106 30ff 	add.w	r0, r6, #4294967295
 8000336:	f080 811f 	bcs.w	8000578 <__udivmoddi4+0x298>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 811c 	bls.w	8000578 <__udivmoddi4+0x298>
 8000340:	3e02      	subs	r6, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a5b      	subs	r3, r3, r1
 8000346:	b2a4      	uxth	r4, r4
 8000348:	fbb3 f0f8 	udiv	r0, r3, r8
 800034c:	fb08 3310 	mls	r3, r8, r0, r3
 8000350:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000354:	fb00 f707 	mul.w	r7, r0, r7
 8000358:	42a7      	cmp	r7, r4
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x92>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f100 33ff 	add.w	r3, r0, #4294967295
 8000364:	f080 810a 	bcs.w	800057c <__udivmoddi4+0x29c>
 8000368:	42a7      	cmp	r7, r4
 800036a:	f240 8107 	bls.w	800057c <__udivmoddi4+0x29c>
 800036e:	4464      	add	r4, ip
 8000370:	3802      	subs	r0, #2
 8000372:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000376:	1be4      	subs	r4, r4, r7
 8000378:	2600      	movs	r6, #0
 800037a:	b11d      	cbz	r5, 8000384 <__udivmoddi4+0xa4>
 800037c:	40d4      	lsrs	r4, r2
 800037e:	2300      	movs	r3, #0
 8000380:	e9c5 4300 	strd	r4, r3, [r5]
 8000384:	4631      	mov	r1, r6
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d909      	bls.n	80003a2 <__udivmoddi4+0xc2>
 800038e:	2d00      	cmp	r5, #0
 8000390:	f000 80ef 	beq.w	8000572 <__udivmoddi4+0x292>
 8000394:	2600      	movs	r6, #0
 8000396:	e9c5 0100 	strd	r0, r1, [r5]
 800039a:	4630      	mov	r0, r6
 800039c:	4631      	mov	r1, r6
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	fab3 f683 	clz	r6, r3
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d14a      	bne.n	8000440 <__udivmoddi4+0x160>
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d302      	bcc.n	80003b4 <__udivmoddi4+0xd4>
 80003ae:	4282      	cmp	r2, r0
 80003b0:	f200 80f9 	bhi.w	80005a6 <__udivmoddi4+0x2c6>
 80003b4:	1a84      	subs	r4, r0, r2
 80003b6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ba:	2001      	movs	r0, #1
 80003bc:	469e      	mov	lr, r3
 80003be:	2d00      	cmp	r5, #0
 80003c0:	d0e0      	beq.n	8000384 <__udivmoddi4+0xa4>
 80003c2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003c6:	e7dd      	b.n	8000384 <__udivmoddi4+0xa4>
 80003c8:	b902      	cbnz	r2, 80003cc <__udivmoddi4+0xec>
 80003ca:	deff      	udf	#255	; 0xff
 80003cc:	fab2 f282 	clz	r2, r2
 80003d0:	2a00      	cmp	r2, #0
 80003d2:	f040 8092 	bne.w	80004fa <__udivmoddi4+0x21a>
 80003d6:	eba1 010c 	sub.w	r1, r1, ip
 80003da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003de:	fa1f fe8c 	uxth.w	lr, ip
 80003e2:	2601      	movs	r6, #1
 80003e4:	0c20      	lsrs	r0, r4, #16
 80003e6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ea:	fb07 1113 	mls	r1, r7, r3, r1
 80003ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f2:	fb0e f003 	mul.w	r0, lr, r3
 80003f6:	4288      	cmp	r0, r1
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x12c>
 80003fa:	eb1c 0101 	adds.w	r1, ip, r1
 80003fe:	f103 38ff 	add.w	r8, r3, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x12a>
 8000404:	4288      	cmp	r0, r1
 8000406:	f200 80cb 	bhi.w	80005a0 <__udivmoddi4+0x2c0>
 800040a:	4643      	mov	r3, r8
 800040c:	1a09      	subs	r1, r1, r0
 800040e:	b2a4      	uxth	r4, r4
 8000410:	fbb1 f0f7 	udiv	r0, r1, r7
 8000414:	fb07 1110 	mls	r1, r7, r0, r1
 8000418:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800041c:	fb0e fe00 	mul.w	lr, lr, r0
 8000420:	45a6      	cmp	lr, r4
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x156>
 8000424:	eb1c 0404 	adds.w	r4, ip, r4
 8000428:	f100 31ff 	add.w	r1, r0, #4294967295
 800042c:	d202      	bcs.n	8000434 <__udivmoddi4+0x154>
 800042e:	45a6      	cmp	lr, r4
 8000430:	f200 80bb 	bhi.w	80005aa <__udivmoddi4+0x2ca>
 8000434:	4608      	mov	r0, r1
 8000436:	eba4 040e 	sub.w	r4, r4, lr
 800043a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800043e:	e79c      	b.n	800037a <__udivmoddi4+0x9a>
 8000440:	f1c6 0720 	rsb	r7, r6, #32
 8000444:	40b3      	lsls	r3, r6
 8000446:	fa22 fc07 	lsr.w	ip, r2, r7
 800044a:	ea4c 0c03 	orr.w	ip, ip, r3
 800044e:	fa20 f407 	lsr.w	r4, r0, r7
 8000452:	fa01 f306 	lsl.w	r3, r1, r6
 8000456:	431c      	orrs	r4, r3
 8000458:	40f9      	lsrs	r1, r7
 800045a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800045e:	fa00 f306 	lsl.w	r3, r0, r6
 8000462:	fbb1 f8f9 	udiv	r8, r1, r9
 8000466:	0c20      	lsrs	r0, r4, #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fb09 1118 	mls	r1, r9, r8, r1
 8000470:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000474:	fb08 f00e 	mul.w	r0, r8, lr
 8000478:	4288      	cmp	r0, r1
 800047a:	fa02 f206 	lsl.w	r2, r2, r6
 800047e:	d90b      	bls.n	8000498 <__udivmoddi4+0x1b8>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f108 3aff 	add.w	sl, r8, #4294967295
 8000488:	f080 8088 	bcs.w	800059c <__udivmoddi4+0x2bc>
 800048c:	4288      	cmp	r0, r1
 800048e:	f240 8085 	bls.w	800059c <__udivmoddi4+0x2bc>
 8000492:	f1a8 0802 	sub.w	r8, r8, #2
 8000496:	4461      	add	r1, ip
 8000498:	1a09      	subs	r1, r1, r0
 800049a:	b2a4      	uxth	r4, r4
 800049c:	fbb1 f0f9 	udiv	r0, r1, r9
 80004a0:	fb09 1110 	mls	r1, r9, r0, r1
 80004a4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ac:	458e      	cmp	lr, r1
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x1e2>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004b8:	d26c      	bcs.n	8000594 <__udivmoddi4+0x2b4>
 80004ba:	458e      	cmp	lr, r1
 80004bc:	d96a      	bls.n	8000594 <__udivmoddi4+0x2b4>
 80004be:	3802      	subs	r0, #2
 80004c0:	4461      	add	r1, ip
 80004c2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004c6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ca:	eba1 010e 	sub.w	r1, r1, lr
 80004ce:	42a1      	cmp	r1, r4
 80004d0:	46c8      	mov	r8, r9
 80004d2:	46a6      	mov	lr, r4
 80004d4:	d356      	bcc.n	8000584 <__udivmoddi4+0x2a4>
 80004d6:	d053      	beq.n	8000580 <__udivmoddi4+0x2a0>
 80004d8:	b15d      	cbz	r5, 80004f2 <__udivmoddi4+0x212>
 80004da:	ebb3 0208 	subs.w	r2, r3, r8
 80004de:	eb61 010e 	sbc.w	r1, r1, lr
 80004e2:	fa01 f707 	lsl.w	r7, r1, r7
 80004e6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ea:	40f1      	lsrs	r1, r6
 80004ec:	431f      	orrs	r7, r3
 80004ee:	e9c5 7100 	strd	r7, r1, [r5]
 80004f2:	2600      	movs	r6, #0
 80004f4:	4631      	mov	r1, r6
 80004f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004fa:	f1c2 0320 	rsb	r3, r2, #32
 80004fe:	40d8      	lsrs	r0, r3
 8000500:	fa0c fc02 	lsl.w	ip, ip, r2
 8000504:	fa21 f303 	lsr.w	r3, r1, r3
 8000508:	4091      	lsls	r1, r2
 800050a:	4301      	orrs	r1, r0
 800050c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000510:	fa1f fe8c 	uxth.w	lr, ip
 8000514:	fbb3 f0f7 	udiv	r0, r3, r7
 8000518:	fb07 3610 	mls	r6, r7, r0, r3
 800051c:	0c0b      	lsrs	r3, r1, #16
 800051e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000522:	fb00 f60e 	mul.w	r6, r0, lr
 8000526:	429e      	cmp	r6, r3
 8000528:	fa04 f402 	lsl.w	r4, r4, r2
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x260>
 800052e:	eb1c 0303 	adds.w	r3, ip, r3
 8000532:	f100 38ff 	add.w	r8, r0, #4294967295
 8000536:	d22f      	bcs.n	8000598 <__udivmoddi4+0x2b8>
 8000538:	429e      	cmp	r6, r3
 800053a:	d92d      	bls.n	8000598 <__udivmoddi4+0x2b8>
 800053c:	3802      	subs	r0, #2
 800053e:	4463      	add	r3, ip
 8000540:	1b9b      	subs	r3, r3, r6
 8000542:	b289      	uxth	r1, r1
 8000544:	fbb3 f6f7 	udiv	r6, r3, r7
 8000548:	fb07 3316 	mls	r3, r7, r6, r3
 800054c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000550:	fb06 f30e 	mul.w	r3, r6, lr
 8000554:	428b      	cmp	r3, r1
 8000556:	d908      	bls.n	800056a <__udivmoddi4+0x28a>
 8000558:	eb1c 0101 	adds.w	r1, ip, r1
 800055c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000560:	d216      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000562:	428b      	cmp	r3, r1
 8000564:	d914      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000566:	3e02      	subs	r6, #2
 8000568:	4461      	add	r1, ip
 800056a:	1ac9      	subs	r1, r1, r3
 800056c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000570:	e738      	b.n	80003e4 <__udivmoddi4+0x104>
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e705      	b.n	8000384 <__udivmoddi4+0xa4>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e3      	b.n	8000344 <__udivmoddi4+0x64>
 800057c:	4618      	mov	r0, r3
 800057e:	e6f8      	b.n	8000372 <__udivmoddi4+0x92>
 8000580:	454b      	cmp	r3, r9
 8000582:	d2a9      	bcs.n	80004d8 <__udivmoddi4+0x1f8>
 8000584:	ebb9 0802 	subs.w	r8, r9, r2
 8000588:	eb64 0e0c 	sbc.w	lr, r4, ip
 800058c:	3801      	subs	r0, #1
 800058e:	e7a3      	b.n	80004d8 <__udivmoddi4+0x1f8>
 8000590:	4646      	mov	r6, r8
 8000592:	e7ea      	b.n	800056a <__udivmoddi4+0x28a>
 8000594:	4620      	mov	r0, r4
 8000596:	e794      	b.n	80004c2 <__udivmoddi4+0x1e2>
 8000598:	4640      	mov	r0, r8
 800059a:	e7d1      	b.n	8000540 <__udivmoddi4+0x260>
 800059c:	46d0      	mov	r8, sl
 800059e:	e77b      	b.n	8000498 <__udivmoddi4+0x1b8>
 80005a0:	3b02      	subs	r3, #2
 80005a2:	4461      	add	r1, ip
 80005a4:	e732      	b.n	800040c <__udivmoddi4+0x12c>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e709      	b.n	80003be <__udivmoddi4+0xde>
 80005aa:	4464      	add	r4, ip
 80005ac:	3802      	subs	r0, #2
 80005ae:	e742      	b.n	8000436 <__udivmoddi4+0x156>

080005b0 <__aeabi_idiv0>:
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop

080005b4 <Starting>:
extern uint16_t geheugenplaatsen;
extern uint16_t lengte_signaal[48]; //{1, 2, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0, 0};
extern uint16_t tijd[500];

void Starting()
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	af00      	add	r7, sp, #0
	  printf("\r\n-----------------------------------------------------------------------\r\n");
 80005b8:	480e      	ldr	r0, [pc, #56]	; (80005f4 <Starting+0x40>)
 80005ba:	f006 ff59 	bl	8007470 <puts>
	  printf("  ######  ########    ###    ########  ######## #### ##    ##  ######\r\n");
 80005be:	480e      	ldr	r0, [pc, #56]	; (80005f8 <Starting+0x44>)
 80005c0:	f006 ff56 	bl	8007470 <puts>
	  printf(" ##    ##    ##      ## ##   ##     ##    ##     ##  ###   ## ##    ##\r\n");
 80005c4:	480d      	ldr	r0, [pc, #52]	; (80005fc <Starting+0x48>)
 80005c6:	f006 ff53 	bl	8007470 <puts>
	  printf(" ##          ##     ##   ##  ##     ##    ##     ##  ####  ## ## \r\n");
 80005ca:	480d      	ldr	r0, [pc, #52]	; (8000600 <Starting+0x4c>)
 80005cc:	f006 ff50 	bl	8007470 <puts>
	  printf("  ######     ##    ##     ## ########     ##     ##  ## ## ## ##   #### \r\n");
 80005d0:	480c      	ldr	r0, [pc, #48]	; (8000604 <Starting+0x50>)
 80005d2:	f006 ff4d 	bl	8007470 <puts>
	  printf("       ##    ##    ######### ##   ##      ##     ##  ##  #### ##    ##\r\n");
 80005d6:	480c      	ldr	r0, [pc, #48]	; (8000608 <Starting+0x54>)
 80005d8:	f006 ff4a 	bl	8007470 <puts>
	  printf(" ##    ##    ##    ##     ## ##    ##     ##     ##  ##   ### ##    ##  \r\n");
 80005dc:	480b      	ldr	r0, [pc, #44]	; (800060c <Starting+0x58>)
 80005de:	f006 ff47 	bl	8007470 <puts>
	  printf("  ######     ##    ##     ## ##     ##    ##    #### ##    ##  ######\r\n");
 80005e2:	480b      	ldr	r0, [pc, #44]	; (8000610 <Starting+0x5c>)
 80005e4:	f006 ff44 	bl	8007470 <puts>
	  printf("-----------------------------------------------------------------------\r\n\r\n");
 80005e8:	480a      	ldr	r0, [pc, #40]	; (8000614 <Starting+0x60>)
 80005ea:	f006 ff41 	bl	8007470 <puts>
}
 80005ee:	bf00      	nop
 80005f0:	bd80      	pop	{r7, pc}
 80005f2:	bf00      	nop
 80005f4:	08008384 	.word	0x08008384
 80005f8:	080083d0 	.word	0x080083d0
 80005fc:	08008418 	.word	0x08008418
 8000600:	08008460 	.word	0x08008460
 8000604:	080084a4 	.word	0x080084a4
 8000608:	080084f0 	.word	0x080084f0
 800060c:	08008538 	.word	0x08008538
 8000610:	08008584 	.word	0x08008584
 8000614:	080085cc 	.word	0x080085cc

08000618 <All_Carl_Inits>:
void All_Carl_Inits()
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b082      	sub	sp, #8
 800061c:	af00      	add	r7, sp, #0
	if(UartScreen == 1)
 800061e:	4b12      	ldr	r3, [pc, #72]	; (8000668 <All_Carl_Inits+0x50>)
 8000620:	781b      	ldrb	r3, [r3, #0]
 8000622:	2b01      	cmp	r3, #1
 8000624:	d101      	bne.n	800062a <All_Carl_Inits+0x12>
	{
	Starting();
 8000626:	f7ff ffc5 	bl	80005b4 <Starting>
	}
	InitTouch();
 800062a:	f001 f971 	bl	8001910 <InitTouch>
	DisplayBegin();
 800062e:	f000 f98d 	bl	800094c <DisplayBegin>
	IR_Carrier_OFF();
 8000632:	f001 f871 	bl	8001718 <IR_Carrier_OFF>
	//logo();
	mainscreen();
 8000636:	f000 ffb9 	bl	80015ac <mainscreen>
//	WriteToGeheugen(3, 12);
//	DeleteFromGeheugen(3, 11);
//	DeleteFromGeheugen(1, 1);
	//Wat zit er eigenlijk in mijn geheugen?
	for(uint8_t i = 1; i <= 4; i++)
 800063a:	2301      	movs	r3, #1
 800063c:	71fb      	strb	r3, [r7, #7]
 800063e:	e00b      	b.n	8000658 <All_Carl_Inits+0x40>
	{
		uint16_t *tijd;
		for(uint8_t j = 1; j <= 12; j ++)
 8000640:	2301      	movs	r3, #1
 8000642:	71bb      	strb	r3, [r7, #6]
 8000644:	e002      	b.n	800064c <All_Carl_Inits+0x34>
 8000646:	79bb      	ldrb	r3, [r7, #6]
 8000648:	3301      	adds	r3, #1
 800064a:	71bb      	strb	r3, [r7, #6]
 800064c:	79bb      	ldrb	r3, [r7, #6]
 800064e:	2b0c      	cmp	r3, #12
 8000650:	d9f9      	bls.n	8000646 <All_Carl_Inits+0x2e>
	for(uint8_t i = 1; i <= 4; i++)
 8000652:	79fb      	ldrb	r3, [r7, #7]
 8000654:	3301      	adds	r3, #1
 8000656:	71fb      	strb	r3, [r7, #7]
 8000658:	79fb      	ldrb	r3, [r7, #7]
 800065a:	2b04      	cmp	r3, #4
 800065c:	d9f0      	bls.n	8000640 <All_Carl_Inits+0x28>
		{
			//tijd = TakefromGeheugen(i, j);
		}
	}
}
 800065e:	bf00      	nop
 8000660:	bf00      	nop
 8000662:	3708      	adds	r7, #8
 8000664:	46bd      	mov	sp, r7
 8000666:	bd80      	pop	{r7, pc}
 8000668:	20000000 	.word	0x20000000

0800066c <WriteToGeheugen>:

void WriteToGeheugen(uint8_t *dev, uint8_t *kn)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b084      	sub	sp, #16
 8000670:	af00      	add	r7, sp, #0
 8000672:	6078      	str	r0, [r7, #4]
 8000674:	6039      	str	r1, [r7, #0]
	uint8_t device = *dev;
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	781b      	ldrb	r3, [r3, #0]
 800067a:	737b      	strb	r3, [r7, #13]
	uint8_t knop = *kn;
 800067c:	683b      	ldr	r3, [r7, #0]
 800067e:	781b      	ldrb	r3, [r3, #0]
 8000680:	733b      	strb	r3, [r7, #12]
	//stel singaal1 is 12 groot


	//stel Device 3 knop 4
	//berekening = 2*12 + 3 = 27
	uint8_t berekening = ((device-1) * 12) + knop-1 ; //zoek de plaats van lengte_signaal voor het knopje van het apparaat
 8000682:	7b7b      	ldrb	r3, [r7, #13]
 8000684:	461a      	mov	r2, r3
 8000686:	0052      	lsls	r2, r2, #1
 8000688:	4413      	add	r3, r2
 800068a:	009b      	lsls	r3, r3, #2
 800068c:	b2da      	uxtb	r2, r3
 800068e:	7b3b      	ldrb	r3, [r7, #12]
 8000690:	4413      	add	r3, r2
 8000692:	b2db      	uxtb	r3, r3
 8000694:	3b0d      	subs	r3, #13
 8000696:	72fb      	strb	r3, [r7, #11]

	printf("%d\r\n", berekening);
 8000698:	7afb      	ldrb	r3, [r7, #11]
 800069a:	4619      	mov	r1, r3
 800069c:	4817      	ldr	r0, [pc, #92]	; (80006fc <WriteToGeheugen+0x90>)
 800069e:	f006 fe61 	bl	8007364 <iprintf>
	for(uint16_t i = 0; i < lengte_signaal[berekening] ; i++)
 80006a2:	2300      	movs	r3, #0
 80006a4:	81fb      	strh	r3, [r7, #14]
 80006a6:	e00e      	b.n	80006c6 <WriteToGeheugen+0x5a>
	{
		geheugen[geheugenplaatsen+i] = tijd[i];
 80006a8:	89fa      	ldrh	r2, [r7, #14]
 80006aa:	4b15      	ldr	r3, [pc, #84]	; (8000700 <WriteToGeheugen+0x94>)
 80006ac:	881b      	ldrh	r3, [r3, #0]
 80006ae:	4619      	mov	r1, r3
 80006b0:	89fb      	ldrh	r3, [r7, #14]
 80006b2:	440b      	add	r3, r1
 80006b4:	4913      	ldr	r1, [pc, #76]	; (8000704 <WriteToGeheugen+0x98>)
 80006b6:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 80006ba:	4a13      	ldr	r2, [pc, #76]	; (8000708 <WriteToGeheugen+0x9c>)
 80006bc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(uint16_t i = 0; i < lengte_signaal[berekening] ; i++)
 80006c0:	89fb      	ldrh	r3, [r7, #14]
 80006c2:	3301      	adds	r3, #1
 80006c4:	81fb      	strh	r3, [r7, #14]
 80006c6:	7afb      	ldrb	r3, [r7, #11]
 80006c8:	4a10      	ldr	r2, [pc, #64]	; (800070c <WriteToGeheugen+0xa0>)
 80006ca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80006ce:	89fa      	ldrh	r2, [r7, #14]
 80006d0:	429a      	cmp	r2, r3
 80006d2:	d3e9      	bcc.n	80006a8 <WriteToGeheugen+0x3c>
	}
	geheugenplaatsen += lengte_signaal[berekening];
 80006d4:	7afb      	ldrb	r3, [r7, #11]
 80006d6:	4a0d      	ldr	r2, [pc, #52]	; (800070c <WriteToGeheugen+0xa0>)
 80006d8:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80006dc:	4b08      	ldr	r3, [pc, #32]	; (8000700 <WriteToGeheugen+0x94>)
 80006de:	881b      	ldrh	r3, [r3, #0]
 80006e0:	4413      	add	r3, r2
 80006e2:	b29a      	uxth	r2, r3
 80006e4:	4b06      	ldr	r3, [pc, #24]	; (8000700 <WriteToGeheugen+0x94>)
 80006e6:	801a      	strh	r2, [r3, #0]

	printf("geheugenplaatsen %d\r\n", geheugenplaatsen);
 80006e8:	4b05      	ldr	r3, [pc, #20]	; (8000700 <WriteToGeheugen+0x94>)
 80006ea:	881b      	ldrh	r3, [r3, #0]
 80006ec:	4619      	mov	r1, r3
 80006ee:	4808      	ldr	r0, [pc, #32]	; (8000710 <WriteToGeheugen+0xa4>)
 80006f0:	f006 fe38 	bl	8007364 <iprintf>
}
 80006f4:	bf00      	nop
 80006f6:	3710      	adds	r7, #16
 80006f8:	46bd      	mov	sp, r7
 80006fa:	bd80      	pop	{r7, pc}
 80006fc:	08008618 	.word	0x08008618
 8000700:	20004e2c 	.word	0x20004e2c
 8000704:	20004f24 	.word	0x20004f24
 8000708:	2000000c 	.word	0x2000000c
 800070c:	20004e30 	.word	0x20004e30
 8000710:	08008620 	.word	0x08008620

08000714 <TakefromGeheugen>:
	printf("geheugenplaatsen = %d geheugen = %d\n\r", geheugenplaatsen, controle);
	}
}
*/
void TakefromGeheugen(uint8_t *dev, uint8_t *kn, uint16_t *DataFromGeheugen, uint8_t *controle)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b088      	sub	sp, #32
 8000718:	af00      	add	r7, sp, #0
 800071a:	60f8      	str	r0, [r7, #12]
 800071c:	60b9      	str	r1, [r7, #8]
 800071e:	607a      	str	r2, [r7, #4]
 8000720:	603b      	str	r3, [r7, #0]
		uint8_t device = *dev;
 8000722:	68fb      	ldr	r3, [r7, #12]
 8000724:	781b      	ldrb	r3, [r3, #0]
 8000726:	75fb      	strb	r3, [r7, #23]
		uint8_t knop = *kn;
 8000728:	68bb      	ldr	r3, [r7, #8]
 800072a:	781b      	ldrb	r3, [r3, #0]
 800072c:	75bb      	strb	r3, [r7, #22]
		uint16_t plaatservoor = 0;
 800072e:	2300      	movs	r3, #0
 8000730:	83fb      	strh	r3, [r7, #30]
		uint8_t berekening = ((device-1) * 12) + knop-1 ;
 8000732:	7dfb      	ldrb	r3, [r7, #23]
 8000734:	461a      	mov	r2, r3
 8000736:	0052      	lsls	r2, r2, #1
 8000738:	4413      	add	r3, r2
 800073a:	009b      	lsls	r3, r3, #2
 800073c:	b2da      	uxtb	r2, r3
 800073e:	7dbb      	ldrb	r3, [r7, #22]
 8000740:	4413      	add	r3, r2
 8000742:	b2db      	uxtb	r3, r3
 8000744:	3b0d      	subs	r3, #13
 8000746:	757b      	strb	r3, [r7, #21]
		if(lengte_signaal[berekening] == 0)
 8000748:	7d7b      	ldrb	r3, [r7, #21]
 800074a:	4a2c      	ldr	r2, [pc, #176]	; (80007fc <TakefromGeheugen+0xe8>)
 800074c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000750:	2b00      	cmp	r3, #0
 8000752:	d109      	bne.n	8000768 <TakefromGeheugen+0x54>
		{
			printf("device: %d knop: %d is niet ingesteld!\r\n", device, knop);
 8000754:	7dfb      	ldrb	r3, [r7, #23]
 8000756:	7dba      	ldrb	r2, [r7, #22]
 8000758:	4619      	mov	r1, r3
 800075a:	4829      	ldr	r0, [pc, #164]	; (8000800 <TakefromGeheugen+0xec>)
 800075c:	f006 fe02 	bl	8007364 <iprintf>
			*controle=0;
 8000760:	683b      	ldr	r3, [r7, #0]
 8000762:	2200      	movs	r2, #0
 8000764:	701a      	strb	r2, [r3, #0]
				printf("%d ", DataFromGeheugen[index]);
				index++;
			}
			printf("\r\n");
		}
}
 8000766:	e044      	b.n	80007f2 <TakefromGeheugen+0xde>
			*controle=1;
 8000768:	683b      	ldr	r3, [r7, #0]
 800076a:	2201      	movs	r2, #1
 800076c:	701a      	strb	r2, [r3, #0]
			for(uint8_t i = 0; i < berekening; i++)
 800076e:	2300      	movs	r3, #0
 8000770:	777b      	strb	r3, [r7, #29]
 8000772:	e009      	b.n	8000788 <TakefromGeheugen+0x74>
				plaatservoor += lengte_signaal[i];
 8000774:	7f7b      	ldrb	r3, [r7, #29]
 8000776:	4a21      	ldr	r2, [pc, #132]	; (80007fc <TakefromGeheugen+0xe8>)
 8000778:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800077c:	8bfb      	ldrh	r3, [r7, #30]
 800077e:	4413      	add	r3, r2
 8000780:	83fb      	strh	r3, [r7, #30]
			for(uint8_t i = 0; i < berekening; i++)
 8000782:	7f7b      	ldrb	r3, [r7, #29]
 8000784:	3301      	adds	r3, #1
 8000786:	777b      	strb	r3, [r7, #29]
 8000788:	7f7a      	ldrb	r2, [r7, #29]
 800078a:	7d7b      	ldrb	r3, [r7, #21]
 800078c:	429a      	cmp	r2, r3
 800078e:	d3f1      	bcc.n	8000774 <TakefromGeheugen+0x60>
			uint16_t plaatserna = plaatservoor + lengte_signaal[berekening];
 8000790:	7d7b      	ldrb	r3, [r7, #21]
 8000792:	4a1a      	ldr	r2, [pc, #104]	; (80007fc <TakefromGeheugen+0xe8>)
 8000794:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000798:	8bfb      	ldrh	r3, [r7, #30]
 800079a:	4413      	add	r3, r2
 800079c:	827b      	strh	r3, [r7, #18]
			printf("device: %d knop: %d = ", device, knop);
 800079e:	7dfb      	ldrb	r3, [r7, #23]
 80007a0:	7dba      	ldrb	r2, [r7, #22]
 80007a2:	4619      	mov	r1, r3
 80007a4:	4817      	ldr	r0, [pc, #92]	; (8000804 <TakefromGeheugen+0xf0>)
 80007a6:	f006 fddd 	bl	8007364 <iprintf>
			uint16_t index = 0;
 80007aa:	2300      	movs	r3, #0
 80007ac:	837b      	strh	r3, [r7, #26]
			for(uint16_t i = plaatservoor; i < plaatserna; i++)
 80007ae:	8bfb      	ldrh	r3, [r7, #30]
 80007b0:	833b      	strh	r3, [r7, #24]
 80007b2:	e017      	b.n	80007e4 <TakefromGeheugen+0xd0>
				DataFromGeheugen[index] = geheugen[i];
 80007b4:	8b3a      	ldrh	r2, [r7, #24]
 80007b6:	8b7b      	ldrh	r3, [r7, #26]
 80007b8:	005b      	lsls	r3, r3, #1
 80007ba:	6879      	ldr	r1, [r7, #4]
 80007bc:	440b      	add	r3, r1
 80007be:	4912      	ldr	r1, [pc, #72]	; (8000808 <TakefromGeheugen+0xf4>)
 80007c0:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 80007c4:	801a      	strh	r2, [r3, #0]
				printf("%d ", DataFromGeheugen[index]);
 80007c6:	8b7b      	ldrh	r3, [r7, #26]
 80007c8:	005b      	lsls	r3, r3, #1
 80007ca:	687a      	ldr	r2, [r7, #4]
 80007cc:	4413      	add	r3, r2
 80007ce:	881b      	ldrh	r3, [r3, #0]
 80007d0:	4619      	mov	r1, r3
 80007d2:	480e      	ldr	r0, [pc, #56]	; (800080c <TakefromGeheugen+0xf8>)
 80007d4:	f006 fdc6 	bl	8007364 <iprintf>
				index++;
 80007d8:	8b7b      	ldrh	r3, [r7, #26]
 80007da:	3301      	adds	r3, #1
 80007dc:	837b      	strh	r3, [r7, #26]
			for(uint16_t i = plaatservoor; i < plaatserna; i++)
 80007de:	8b3b      	ldrh	r3, [r7, #24]
 80007e0:	3301      	adds	r3, #1
 80007e2:	833b      	strh	r3, [r7, #24]
 80007e4:	8b3a      	ldrh	r2, [r7, #24]
 80007e6:	8a7b      	ldrh	r3, [r7, #18]
 80007e8:	429a      	cmp	r2, r3
 80007ea:	d3e3      	bcc.n	80007b4 <TakefromGeheugen+0xa0>
			printf("\r\n");
 80007ec:	4808      	ldr	r0, [pc, #32]	; (8000810 <TakefromGeheugen+0xfc>)
 80007ee:	f006 fe3f 	bl	8007470 <puts>
}
 80007f2:	bf00      	nop
 80007f4:	3720      	adds	r7, #32
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bd80      	pop	{r7, pc}
 80007fa:	bf00      	nop
 80007fc:	20004e30 	.word	0x20004e30
 8000800:	08008638 	.word	0x08008638
 8000804:	08008664 	.word	0x08008664
 8000808:	2000000c 	.word	0x2000000c
 800080c:	0800867c 	.word	0x0800867c
 8000810:	08008680 	.word	0x08008680

08000814 <whilelus>:
uint8_t button = 0;
uint8_t OldButton = 0;
uint8_t aanraak = 0;
uint16_t Xvalue = 160;
uint16_t Yvalue = 363;
void whilelus(){
 8000814:	b580      	push	{r7, lr}
 8000816:	b082      	sub	sp, #8
 8000818:	af02      	add	r7, sp, #8


	Touch(&aanraak, &Xvalue, &Yvalue);
 800081a:	4a22      	ldr	r2, [pc, #136]	; (80008a4 <whilelus+0x90>)
 800081c:	4922      	ldr	r1, [pc, #136]	; (80008a8 <whilelus+0x94>)
 800081e:	4823      	ldr	r0, [pc, #140]	; (80008ac <whilelus+0x98>)
 8000820:	f001 f8a2 	bl	8001968 <Touch>
	ReadDevice(&device, &Xvalue, &Yvalue);
 8000824:	4a1f      	ldr	r2, [pc, #124]	; (80008a4 <whilelus+0x90>)
 8000826:	4920      	ldr	r1, [pc, #128]	; (80008a8 <whilelus+0x94>)
 8000828:	4821      	ldr	r0, [pc, #132]	; (80008b0 <whilelus+0x9c>)
 800082a:	f001 f91f 	bl	8001a6c <ReadDevice>
	if(device != OldDevice)
 800082e:	4b20      	ldr	r3, [pc, #128]	; (80008b0 <whilelus+0x9c>)
 8000830:	781a      	ldrb	r2, [r3, #0]
 8000832:	4b20      	ldr	r3, [pc, #128]	; (80008b4 <whilelus+0xa0>)
 8000834:	781b      	ldrb	r3, [r3, #0]
 8000836:	429a      	cmp	r2, r3
 8000838:	d00d      	beq.n	8000856 <whilelus+0x42>
	{
		OldDevice=device;
 800083a:	4b1d      	ldr	r3, [pc, #116]	; (80008b0 <whilelus+0x9c>)
 800083c:	781a      	ldrb	r2, [r3, #0]
 800083e:	4b1d      	ldr	r3, [pc, #116]	; (80008b4 <whilelus+0xa0>)
 8000840:	701a      	strb	r2, [r3, #0]
		DevicePressed(&device);
 8000842:	481b      	ldr	r0, [pc, #108]	; (80008b0 <whilelus+0x9c>)
 8000844:	f000 fb46 	bl	8000ed4 <DevicePressed>
		Xvalue = 160; Yvalue = 363; //randomwaarde waar geen knop op staat
 8000848:	4b17      	ldr	r3, [pc, #92]	; (80008a8 <whilelus+0x94>)
 800084a:	22a0      	movs	r2, #160	; 0xa0
 800084c:	801a      	strh	r2, [r3, #0]
 800084e:	4b15      	ldr	r3, [pc, #84]	; (80008a4 <whilelus+0x90>)
 8000850:	f240 126b 	movw	r2, #363	; 0x16b
 8000854:	801a      	strh	r2, [r3, #0]
	}
	if(device != 0)
 8000856:	4b16      	ldr	r3, [pc, #88]	; (80008b0 <whilelus+0x9c>)
 8000858:	781b      	ldrb	r3, [r3, #0]
 800085a:	2b00      	cmp	r3, #0
 800085c:	d01e      	beq.n	800089c <whilelus+0x88>
	{
		ReadButton(&button, &Xvalue, &Yvalue);
 800085e:	4a11      	ldr	r2, [pc, #68]	; (80008a4 <whilelus+0x90>)
 8000860:	4911      	ldr	r1, [pc, #68]	; (80008a8 <whilelus+0x94>)
 8000862:	4815      	ldr	r0, [pc, #84]	; (80008b8 <whilelus+0xa4>)
 8000864:	f001 f95c 	bl	8001b20 <ReadButton>
		if(button != 0 && aanraak != 0)
 8000868:	4b13      	ldr	r3, [pc, #76]	; (80008b8 <whilelus+0xa4>)
 800086a:	781b      	ldrb	r3, [r3, #0]
 800086c:	2b00      	cmp	r3, #0
 800086e:	d015      	beq.n	800089c <whilelus+0x88>
 8000870:	4b0e      	ldr	r3, [pc, #56]	; (80008ac <whilelus+0x98>)
 8000872:	781b      	ldrb	r3, [r3, #0]
 8000874:	2b00      	cmp	r3, #0
 8000876:	d011      	beq.n	800089c <whilelus+0x88>
		{
		buttonPressed(&device, &button, &aanraak, &Xvalue, &Yvalue);
 8000878:	4b0a      	ldr	r3, [pc, #40]	; (80008a4 <whilelus+0x90>)
 800087a:	9300      	str	r3, [sp, #0]
 800087c:	4b0a      	ldr	r3, [pc, #40]	; (80008a8 <whilelus+0x94>)
 800087e:	4a0b      	ldr	r2, [pc, #44]	; (80008ac <whilelus+0x98>)
 8000880:	490d      	ldr	r1, [pc, #52]	; (80008b8 <whilelus+0xa4>)
 8000882:	480b      	ldr	r0, [pc, #44]	; (80008b0 <whilelus+0x9c>)
 8000884:	f000 fc62 	bl	800114c <buttonPressed>
		button=0;
 8000888:	4b0b      	ldr	r3, [pc, #44]	; (80008b8 <whilelus+0xa4>)
 800088a:	2200      	movs	r2, #0
 800088c:	701a      	strb	r2, [r3, #0]
		Xvalue = 160; Yvalue = 363; //randomwaarde waar geen knop op staat
 800088e:	4b06      	ldr	r3, [pc, #24]	; (80008a8 <whilelus+0x94>)
 8000890:	22a0      	movs	r2, #160	; 0xa0
 8000892:	801a      	strh	r2, [r3, #0]
 8000894:	4b03      	ldr	r3, [pc, #12]	; (80008a4 <whilelus+0x90>)
 8000896:	f240 126b 	movw	r2, #363	; 0x16b
 800089a:	801a      	strh	r2, [r3, #0]



//printf("device:%d button: %d   aanraak %d\r\n", device, button, aanraak);
//printf("X:%d Y:%d ", Xvalue, Yvalue);
}
 800089c:	bf00      	nop
 800089e:	46bd      	mov	sp, r7
 80008a0:	bd80      	pop	{r7, pc}
 80008a2:	bf00      	nop
 80008a4:	20000004 	.word	0x20000004
 80008a8:	20000002 	.word	0x20000002
 80008ac:	20004f1f 	.word	0x20004f1f
 80008b0:	20004f1c 	.word	0x20004f1c
 80008b4:	20004f1d 	.word	0x20004f1d
 80008b8:	20004f1e 	.word	0x20004f1e

080008bc <CS_HIGH>:
#define ILI9488_GREENYELLOW 	0xAFE5      /* 173, 255,  47 */
#define ILI9488_PINK        			0xF81F

/* Some Easy Functions */ 
void CS_HIGH() //High = The chip is not selected and not accessible pg23
{HAL_GPIO_WritePin(CS_Port, CS_Pin, 1);}
 80008bc:	b580      	push	{r7, lr}
 80008be:	af00      	add	r7, sp, #0
 80008c0:	2201      	movs	r2, #1
 80008c2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80008c6:	4802      	ldr	r0, [pc, #8]	; (80008d0 <CS_HIGH+0x14>)
 80008c8:	f002 faac 	bl	8002e24 <HAL_GPIO_WritePin>
 80008cc:	bf00      	nop
 80008ce:	bd80      	pop	{r7, pc}
 80008d0:	40021400 	.word	0x40021400

080008d4 <CS_LOW>:
void CS_LOW()  //Low = The chip is selected and accessible pg23
{HAL_GPIO_WritePin(CS_Port, CS_Pin, 0);}
 80008d4:	b580      	push	{r7, lr}
 80008d6:	af00      	add	r7, sp, #0
 80008d8:	2200      	movs	r2, #0
 80008da:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80008de:	4802      	ldr	r0, [pc, #8]	; (80008e8 <CS_LOW+0x14>)
 80008e0:	f002 faa0 	bl	8002e24 <HAL_GPIO_WritePin>
 80008e4:	bf00      	nop
 80008e6:	bd80      	pop	{r7, pc}
 80008e8:	40021400 	.word	0x40021400

080008ec <DC_HIGH>:
void DC_HIGH() //High = Parameter pg23
{HAL_GPIO_WritePin(DC_Port, DC_Pin, 1);}
 80008ec:	b580      	push	{r7, lr}
 80008ee:	af00      	add	r7, sp, #0
 80008f0:	2201      	movs	r2, #1
 80008f2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80008f6:	4802      	ldr	r0, [pc, #8]	; (8000900 <DC_HIGH+0x14>)
 80008f8:	f002 fa94 	bl	8002e24 <HAL_GPIO_WritePin>
 80008fc:	bf00      	nop
 80008fe:	bd80      	pop	{r7, pc}
 8000900:	40021400 	.word	0x40021400

08000904 <DC_LOW>:
void DC_LOW()  //Low = command pg23
{HAL_GPIO_WritePin(DC_Port, DC_Pin, 0);}
 8000904:	b580      	push	{r7, lr}
 8000906:	af00      	add	r7, sp, #0
 8000908:	2200      	movs	r2, #0
 800090a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800090e:	4802      	ldr	r0, [pc, #8]	; (8000918 <DC_LOW+0x14>)
 8000910:	f002 fa88 	bl	8002e24 <HAL_GPIO_WritePin>
 8000914:	bf00      	nop
 8000916:	bd80      	pop	{r7, pc}
 8000918:	40021400 	.word	0x40021400

0800091c <RST_HIGH>:
void RST_HIGH() 
{HAL_GPIO_WritePin(RST_Port, RST_Pin, 1);}
 800091c:	b580      	push	{r7, lr}
 800091e:	af00      	add	r7, sp, #0
 8000920:	2201      	movs	r2, #1
 8000922:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000926:	4802      	ldr	r0, [pc, #8]	; (8000930 <RST_HIGH+0x14>)
 8000928:	f002 fa7c 	bl	8002e24 <HAL_GPIO_WritePin>
 800092c:	bf00      	nop
 800092e:	bd80      	pop	{r7, pc}
 8000930:	40021400 	.word	0x40021400

08000934 <RST_LOW>:
void RST_LOW() //initialize with a low input pg23
{HAL_GPIO_WritePin(RST_Port, RST_Pin, 0);}
 8000934:	b580      	push	{r7, lr}
 8000936:	af00      	add	r7, sp, #0
 8000938:	2200      	movs	r2, #0
 800093a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800093e:	4802      	ldr	r0, [pc, #8]	; (8000948 <RST_LOW+0x14>)
 8000940:	f002 fa70 	bl	8002e24 <HAL_GPIO_WritePin>
 8000944:	bf00      	nop
 8000946:	bd80      	pop	{r7, pc}
 8000948:	40021400 	.word	0x40021400

0800094c <DisplayBegin>:

//#define TIM_1us htim2

void DisplayBegin(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	af00      	add	r7, sp, #0
	RST_LOW(); //initialize with a low input pg23
 8000950:	f7ff fff0 	bl	8000934 <RST_LOW>
	HAL_Delay(500);
 8000954:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000958:	f001 ff82 	bl	8002860 <HAL_Delay>
	RST_HIGH();
 800095c:	f7ff ffde 	bl	800091c <RST_HIGH>
	HAL_Delay(500);
 8000960:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000964:	f001 ff7c 	bl	8002860 <HAL_Delay>
	writecommand(0xE0);
 8000968:	20e0      	movs	r0, #224	; 0xe0
 800096a:	f000 f8bf 	bl	8000aec <writecommand>
	writedata(0x00);
 800096e:	2000      	movs	r0, #0
 8000970:	f000 f8d8 	bl	8000b24 <writedata>
	writedata(0x03);
 8000974:	2003      	movs	r0, #3
 8000976:	f000 f8d5 	bl	8000b24 <writedata>
	writedata(0x09);
 800097a:	2009      	movs	r0, #9
 800097c:	f000 f8d2 	bl	8000b24 <writedata>
	writedata(0x08);
 8000980:	2008      	movs	r0, #8
 8000982:	f000 f8cf 	bl	8000b24 <writedata>
	writedata(0x16);
 8000986:	2016      	movs	r0, #22
 8000988:	f000 f8cc 	bl	8000b24 <writedata>
	writedata(0x0A);
 800098c:	200a      	movs	r0, #10
 800098e:	f000 f8c9 	bl	8000b24 <writedata>
	writedata(0x3F);
 8000992:	203f      	movs	r0, #63	; 0x3f
 8000994:	f000 f8c6 	bl	8000b24 <writedata>
	writedata(0x78);
 8000998:	2078      	movs	r0, #120	; 0x78
 800099a:	f000 f8c3 	bl	8000b24 <writedata>
	writedata(0x4C);
 800099e:	204c      	movs	r0, #76	; 0x4c
 80009a0:	f000 f8c0 	bl	8000b24 <writedata>
	writedata(0x09);
 80009a4:	2009      	movs	r0, #9
 80009a6:	f000 f8bd 	bl	8000b24 <writedata>
	writedata(0x0A);
 80009aa:	200a      	movs	r0, #10
 80009ac:	f000 f8ba 	bl	8000b24 <writedata>
	writedata(0x08);
 80009b0:	2008      	movs	r0, #8
 80009b2:	f000 f8b7 	bl	8000b24 <writedata>
	writedata(0x16);
 80009b6:	2016      	movs	r0, #22
 80009b8:	f000 f8b4 	bl	8000b24 <writedata>
	writedata(0x1A);
 80009bc:	201a      	movs	r0, #26
 80009be:	f000 f8b1 	bl	8000b24 <writedata>
	writedata(0x0F);
 80009c2:	200f      	movs	r0, #15
 80009c4:	f000 f8ae 	bl	8000b24 <writedata>

	writecommand(0XE1);
 80009c8:	20e1      	movs	r0, #225	; 0xe1
 80009ca:	f000 f88f 	bl	8000aec <writecommand>
	writedata(0x00);
 80009ce:	2000      	movs	r0, #0
 80009d0:	f000 f8a8 	bl	8000b24 <writedata>
	writedata(0x16);
 80009d4:	2016      	movs	r0, #22
 80009d6:	f000 f8a5 	bl	8000b24 <writedata>
	writedata(0x19);
 80009da:	2019      	movs	r0, #25
 80009dc:	f000 f8a2 	bl	8000b24 <writedata>
	writedata(0x03);
 80009e0:	2003      	movs	r0, #3
 80009e2:	f000 f89f 	bl	8000b24 <writedata>
	writedata(0x0F);
 80009e6:	200f      	movs	r0, #15
 80009e8:	f000 f89c 	bl	8000b24 <writedata>
	writedata(0x05);
 80009ec:	2005      	movs	r0, #5
 80009ee:	f000 f899 	bl	8000b24 <writedata>
	writedata(0x32);
 80009f2:	2032      	movs	r0, #50	; 0x32
 80009f4:	f000 f896 	bl	8000b24 <writedata>
	writedata(0x45);
 80009f8:	2045      	movs	r0, #69	; 0x45
 80009fa:	f000 f893 	bl	8000b24 <writedata>
	writedata(0x46);
 80009fe:	2046      	movs	r0, #70	; 0x46
 8000a00:	f000 f890 	bl	8000b24 <writedata>
	writedata(0x04);
 8000a04:	2004      	movs	r0, #4
 8000a06:	f000 f88d 	bl	8000b24 <writedata>
	writedata(0x0E);
 8000a0a:	200e      	movs	r0, #14
 8000a0c:	f000 f88a 	bl	8000b24 <writedata>
	writedata(0x0D);
 8000a10:	200d      	movs	r0, #13
 8000a12:	f000 f887 	bl	8000b24 <writedata>
	writedata(0x35);
 8000a16:	2035      	movs	r0, #53	; 0x35
 8000a18:	f000 f884 	bl	8000b24 <writedata>
	writedata(0x37);
 8000a1c:	2037      	movs	r0, #55	; 0x37
 8000a1e:	f000 f881 	bl	8000b24 <writedata>
	writedata(0x0F);
 8000a22:	200f      	movs	r0, #15
 8000a24:	f000 f87e 	bl	8000b24 <writedata>

	writecommand(0XC0);      //Power Control 1 (pg 237)
 8000a28:	20c0      	movs	r0, #192	; 0xc0
 8000a2a:	f000 f85f 	bl	8000aec <writecommand>
							
	writedata(0x17);    //Vreg1out =  5V zie pg 237
 8000a2e:	2017      	movs	r0, #23
 8000a30:	f000 f878 	bl	8000b24 <writedata>
	writedata(0x15);    //Verg2out = -4.87V zie pg 237
 8000a34:	2015      	movs	r0, #21
 8000a36:	f000 f875 	bl	8000b24 <writedata>
							//	Input voltage from the set-up circuit (-6 to -4.5V).
							
							//Op de DFR0669 staat een LevelShifter, zodat het op 5V werkt.
							

	writecommand(0xC1);      //Power Control 2 (pg 239)
 8000a3a:	20c1      	movs	r0, #193	; 0xc1
 8000a3c:	f000 f856 	bl	8000aec <writecommand>
	writedata(0x41);    //VGH,VGL
 8000a40:	2041      	movs	r0, #65	; 0x41
 8000a42:	f000 f86f 	bl	8000b24 <writedata>
						// = 3'h1 = 001
						// 0100 0XXX 
						// 0100 0001 = 41h  (65 decimaal)
						

	writecommand(0xC5);      //VCOM control pg243
 8000a46:	20c5      	movs	r0, #197	; 0xc5
 8000a48:	f000 f850 	bl	8000aec <writecommand>
	writedata(0x00);		 //1e parameter standaard 00h
 8000a4c:	2000      	movs	r0, #0
 8000a4e:	f000 f869 	bl	8000b24 <writedata>
	writedata(0x12);    	 //VCOM = -1.71    |VCOM| x 2 = VREG = 3.42V
 8000a52:	2012      	movs	r0, #18
 8000a54:	f000 f866 	bl	8000b24 <writedata>
	writedata(0x80);		// ? 
 8000a58:	2080      	movs	r0, #128	; 0x80
 8000a5a:	f000 f863 	bl	8000b24 <writedata>

	writecommand(0x36);      //Memory Access pg192
 8000a5e:	2036      	movs	r0, #54	; 0x36
 8000a60:	f000 f844 	bl	8000aec <writecommand>
	writedata(0x48);		//MY = 0				//in vb 0x48
 8000a64:	2048      	movs	r0, #72	; 0x48
 8000a66:	f000 f85d 	bl	8000b24 <writedata>
							//ML = 0
							//BGR = 0
							//MH = 0
							//=0h

	writecommand(0x3A);		// Interface Pixel Format (RGB 565 standaard 3Ah pg123
 8000a6a:	203a      	movs	r0, #58	; 0x3a
 8000a6c:	f000 f83e 	bl	8000aec <writecommand>
	writedata(0x66); 	  	//pg 200 --> 16bits/pixel = 55 (decimal = 85)
 8000a70:	2066      	movs	r0, #102	; 0x66
 8000a72:	f000 f857 	bl	8000b24 <writedata>
							//55 = 0101 0101

	writecommand(0XB0);      // Interface Mode Control pg219
 8000a76:	20b0      	movs	r0, #176	; 0xb0
 8000a78:	f000 f838 	bl	8000aec <writecommand>
	writedata(0x80);     			 //SDO NOT USE
 8000a7c:	2080      	movs	r0, #128	; 0x80
 8000a7e:	f000 f851 	bl	8000b24 <writedata>
									//1000 0000
									//High enable for RGB interface,
									//data fetched at the rising time,
									//and low level sync clock
									
	writecommand(0xB1);      //Frame rate pg 221
 8000a82:	20b1      	movs	r0, #177	; 0xb1
 8000a84:	f000 f832 	bl	8000aec <writecommand>
	writedata(0xA0);    //60Hz      NOG UITREKENEN
 8000a88:	20a0      	movs	r0, #160	; 0xa0
 8000a8a:	f000 f84b 	bl	8000b24 <writedata>

	writecommand(0xB4);      //Display Inversion Control  pg 225
 8000a8e:	20b4      	movs	r0, #180	; 0xb4
 8000a90:	f000 f82c 	bl	8000aec <writecommand>
	writedata(0x02);    //2-dot inversion (standard)
 8000a94:	2002      	movs	r0, #2
 8000a96:	f000 f845 	bl	8000b24 <writedata>

	writecommand(0XB6); //Display Function Control  RGB/MCU Interface Control pg228
 8000a9a:	20b6      	movs	r0, #182	; 0xb6
 8000a9c:	f000 f826 	bl	8000aec <writecommand>

	writedata(0x02);    //MCU // 1e parameter standard    question Bypass= Memory or Shift register? 
 8000aa0:	2002      	movs	r0, #2
 8000aa2:	f000 f83f 	bl	8000b24 <writedata>
	writedata(0x02);    //Source,Gate scan direction so frames at 84ms
 8000aa6:	2002      	movs	r0, #2
 8000aa8:	f000 f83c 	bl	8000b24 <writedata>

	writecommand(0XE9);      // Set Image Function pg271 
 8000aac:	20e9      	movs	r0, #233	; 0xe9
 8000aae:	f000 f81d 	bl	8000aec <writecommand>
	writedata(0x00);    // Disable 24 bit data
 8000ab2:	2000      	movs	r0, #0
 8000ab4:	f000 f836 	bl	8000b24 <writedata>

	writecommand(0xF7);      // Adjust Control   pg 276
 8000ab8:	20f7      	movs	r0, #247	; 0xf7
 8000aba:	f000 f817 	bl	8000aec <writecommand>
	writedata(0xA9);  //standard 1e parameter
 8000abe:	20a9      	movs	r0, #169	; 0xa9
 8000ac0:	f000 f830 	bl	8000b24 <writedata>
	writedata(0x51);  //standard 2e parameter
 8000ac4:	2051      	movs	r0, #81	; 0x51
 8000ac6:	f000 f82d 	bl	8000b24 <writedata>
	writedata(0x2C);  //standard 3e parameter
 8000aca:	202c      	movs	r0, #44	; 0x2c
 8000acc:	f000 f82a 	bl	8000b24 <writedata>
	writedata(0x82);    // D7 stream, loose   //standard 4e parameter
 8000ad0:	2082      	movs	r0, #130	; 0x82
 8000ad2:	f000 f827 	bl	8000b24 <writedata>

	writecommand(Display_ExitSleep);    //Exit Sleep
 8000ad6:	2011      	movs	r0, #17
 8000ad8:	f000 f808 	bl	8000aec <writecommand>

	HAL_Delay(120);
 8000adc:	2078      	movs	r0, #120	; 0x78
 8000ade:	f001 febf 	bl	8002860 <HAL_Delay>

	writecommand(Display_On);    //Display on
 8000ae2:	2029      	movs	r0, #41	; 0x29
 8000ae4:	f000 f802 	bl	8000aec <writecommand>


	
}
 8000ae8:	bf00      	nop
 8000aea:	bd80      	pop	{r7, pc}

08000aec <writecommand>:

void writecommand(uint8_t cmdo)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b084      	sub	sp, #16
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	4603      	mov	r3, r0
 8000af4:	71fb      	strb	r3, [r7, #7]
	uint8_t commando = cmdo;
 8000af6:	79fb      	ldrb	r3, [r7, #7]
 8000af8:	73fb      	strb	r3, [r7, #15]
	DC_LOW(); //Low = command pg23
 8000afa:	f7ff ff03 	bl	8000904 <DC_LOW>
	CS_LOW(); //The chip is selected and accessible pg23
 8000afe:	f7ff fee9 	bl	80008d4 <CS_LOW>
	HAL_SPI_Transmit(&mySPI, &commando, 1, HAL_MAX_DELAY); //Size = bytes
 8000b02:	f107 010f 	add.w	r1, r7, #15
 8000b06:	f04f 33ff 	mov.w	r3, #4294967295
 8000b0a:	2201      	movs	r2, #1
 8000b0c:	4804      	ldr	r0, [pc, #16]	; (8000b20 <writecommand+0x34>)
 8000b0e:	f004 fb40 	bl	8005192 <HAL_SPI_Transmit>
	CS_HIGH(); //The chip is not selected and not accessible pg23
 8000b12:	f7ff fed3 	bl	80008bc <CS_HIGH>
	


}
 8000b16:	bf00      	nop
 8000b18:	3710      	adds	r7, #16
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bd80      	pop	{r7, pc}
 8000b1e:	bf00      	nop
 8000b20:	20005364 	.word	0x20005364

08000b24 <writedata>:
void writedata(uint8_t dta )
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b084      	sub	sp, #16
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	71fb      	strb	r3, [r7, #7]
	uint8_t data = dta;
 8000b2e:	79fb      	ldrb	r3, [r7, #7]
 8000b30:	73fb      	strb	r3, [r7, #15]
	DC_HIGH(); //High = Parameter pg23
 8000b32:	f7ff fedb 	bl	80008ec <DC_HIGH>
	CS_LOW(); //The chip is selected and accessible pg23
 8000b36:	f7ff fecd 	bl	80008d4 <CS_LOW>
	HAL_SPI_Transmit(&mySPI, &data, 1, HAL_MAX_DELAY); //Size = bytes
 8000b3a:	f107 010f 	add.w	r1, r7, #15
 8000b3e:	f04f 33ff 	mov.w	r3, #4294967295
 8000b42:	2201      	movs	r2, #1
 8000b44:	4804      	ldr	r0, [pc, #16]	; (8000b58 <writedata+0x34>)
 8000b46:	f004 fb24 	bl	8005192 <HAL_SPI_Transmit>
	CS_HIGH(); //The chip is not selected and not accessible pg23
 8000b4a:	f7ff feb7 	bl	80008bc <CS_HIGH>
	//als ik het scherm uitschakel, krijg ik ook geen errors
	//wel leuk om optimistisch te zijn, maar dit doet niks
	//uint8_t StateSpiHulp = HAL_SPI_GetState(&hspi2);
	//uint8_t ErrorSpiHulp = HAL_SPI_GetError(&hspi2);
	//printf("    data: 0x %x Spi_State:%d Error: %d\r\n", dta, StateSpiHulp, ErrorSpiHulp);
}
 8000b4e:	bf00      	nop
 8000b50:	3710      	adds	r7, #16
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	bf00      	nop
 8000b58:	20005364 	.word	0x20005364

08000b5c <setAddrWindow>:
void setAddrWindow(uint16_t x0,uint16_t y0,uint16_t x1,uint16_t y1)
{
 8000b5c:	b590      	push	{r4, r7, lr}
 8000b5e:	b083      	sub	sp, #12
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	4604      	mov	r4, r0
 8000b64:	4608      	mov	r0, r1
 8000b66:	4611      	mov	r1, r2
 8000b68:	461a      	mov	r2, r3
 8000b6a:	4623      	mov	r3, r4
 8000b6c:	80fb      	strh	r3, [r7, #6]
 8000b6e:	4603      	mov	r3, r0
 8000b70:	80bb      	strh	r3, [r7, #4]
 8000b72:	460b      	mov	r3, r1
 8000b74:	807b      	strh	r3, [r7, #2]
 8000b76:	4613      	mov	r3, r2
 8000b78:	803b      	strh	r3, [r7, #0]
	//pg 175 -> Column Address Set = 2Ah
	writecommand(0x2A);
 8000b7a:	202a      	movs	r0, #42	; 0x2a
 8000b7c:	f7ff ffb6 	bl	8000aec <writecommand>
	
	writedata(x0 >> 8); //?
 8000b80:	88fb      	ldrh	r3, [r7, #6]
 8000b82:	0a1b      	lsrs	r3, r3, #8
 8000b84:	b29b      	uxth	r3, r3
 8000b86:	b2db      	uxtb	r3, r3
 8000b88:	4618      	mov	r0, r3
 8000b8a:	f7ff ffcb 	bl	8000b24 <writedata>
	writedata(x0 & 0xFF);     // XSTART ?
 8000b8e:	88fb      	ldrh	r3, [r7, #6]
 8000b90:	b2db      	uxtb	r3, r3
 8000b92:	4618      	mov	r0, r3
 8000b94:	f7ff ffc6 	bl	8000b24 <writedata>
	writedata(x1 >> 8); //?
 8000b98:	887b      	ldrh	r3, [r7, #2]
 8000b9a:	0a1b      	lsrs	r3, r3, #8
 8000b9c:	b29b      	uxth	r3, r3
 8000b9e:	b2db      	uxtb	r3, r3
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	f7ff ffbf 	bl	8000b24 <writedata>
	writedata(x1 & 0xFF);     // XEND //?
 8000ba6:	887b      	ldrh	r3, [r7, #2]
 8000ba8:	b2db      	uxtb	r3, r3
 8000baa:	4618      	mov	r0, r3
 8000bac:	f7ff ffba 	bl	8000b24 <writedata>
	
	//pg 177 -> Page Address Set = 2Bh = Row Address Set 
	writecommand(0x2B); // Row addr set
 8000bb0:	202b      	movs	r0, #43	; 0x2b
 8000bb2:	f7ff ff9b 	bl	8000aec <writecommand>
	writedata(y0 >> 8); //?
 8000bb6:	88bb      	ldrh	r3, [r7, #4]
 8000bb8:	0a1b      	lsrs	r3, r3, #8
 8000bba:	b29b      	uxth	r3, r3
 8000bbc:	b2db      	uxtb	r3, r3
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	f7ff ffb0 	bl	8000b24 <writedata>
	writedata(y0 & 0xff);     // YSTART   ?
 8000bc4:	88bb      	ldrh	r3, [r7, #4]
 8000bc6:	b2db      	uxtb	r3, r3
 8000bc8:	4618      	mov	r0, r3
 8000bca:	f7ff ffab 	bl	8000b24 <writedata>
	writedata(y1 >> 8); // ?
 8000bce:	883b      	ldrh	r3, [r7, #0]
 8000bd0:	0a1b      	lsrs	r3, r3, #8
 8000bd2:	b29b      	uxth	r3, r3
 8000bd4:	b2db      	uxtb	r3, r3
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	f7ff ffa4 	bl	8000b24 <writedata>
	writedata(y1 & 0xff);     // YEND //?
 8000bdc:	883b      	ldrh	r3, [r7, #0]
 8000bde:	b2db      	uxtb	r3, r3
 8000be0:	4618      	mov	r0, r3
 8000be2:	f7ff ff9f 	bl	8000b24 <writedata>
	writecommand(Display_Write_To_RAM);
 8000be6:	202c      	movs	r0, #44	; 0x2c
 8000be8:	f7ff ff80 	bl	8000aec <writecommand>
	
}
 8000bec:	bf00      	nop
 8000bee:	370c      	adds	r7, #12
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	bd90      	pop	{r4, r7, pc}

08000bf4 <drawPixel>:
void drawPixel(uint16_t x, uint16_t y, uint16_t color)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b082      	sub	sp, #8
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	80fb      	strh	r3, [r7, #6]
 8000bfe:	460b      	mov	r3, r1
 8000c00:	80bb      	strh	r3, [r7, #4]
 8000c02:	4613      	mov	r3, r2
 8000c04:	807b      	strh	r3, [r7, #2]
	setAddrWindow(x, y, x + 1, y + 1);
 8000c06:	88fb      	ldrh	r3, [r7, #6]
 8000c08:	3301      	adds	r3, #1
 8000c0a:	b29a      	uxth	r2, r3
 8000c0c:	88bb      	ldrh	r3, [r7, #4]
 8000c0e:	3301      	adds	r3, #1
 8000c10:	b29b      	uxth	r3, r3
 8000c12:	88b9      	ldrh	r1, [r7, #4]
 8000c14:	88f8      	ldrh	r0, [r7, #6]
 8000c16:	f7ff ffa1 	bl	8000b5c <setAddrWindow>
	DC_HIGH();
 8000c1a:	f7ff fe67 	bl	80008ec <DC_HIGH>
	CS_LOW();
 8000c1e:	f7ff fe59 	bl	80008d4 <CS_LOW>
	write16BitColor(color);
 8000c22:	887b      	ldrh	r3, [r7, #2]
 8000c24:	4618      	mov	r0, r3
 8000c26:	f000 f8c5 	bl	8000db4 <write16BitColor>
	CS_HIGH();
 8000c2a:	f7ff fe47 	bl	80008bc <CS_HIGH>
}
 8000c2e:	bf00      	nop
 8000c30:	3708      	adds	r7, #8
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bd80      	pop	{r7, pc}

08000c36 <DrawRectangle>:
void DrawRectangle(uint16_t x, uint16_t y, uint16_t h, uint16_t w, uint16_t color, uint16_t contentcolor, uint8_t border)
{
 8000c36:	b590      	push	{r4, r7, lr}
 8000c38:	b089      	sub	sp, #36	; 0x24
 8000c3a:	af02      	add	r7, sp, #8
 8000c3c:	4604      	mov	r4, r0
 8000c3e:	4608      	mov	r0, r1
 8000c40:	4611      	mov	r1, r2
 8000c42:	461a      	mov	r2, r3
 8000c44:	4623      	mov	r3, r4
 8000c46:	80fb      	strh	r3, [r7, #6]
 8000c48:	4603      	mov	r3, r0
 8000c4a:	80bb      	strh	r3, [r7, #4]
 8000c4c:	460b      	mov	r3, r1
 8000c4e:	807b      	strh	r3, [r7, #2]
 8000c50:	4613      	mov	r3, r2
 8000c52:	803b      	strh	r3, [r7, #0]

	//lijntje horizontaal 1
	for(uint8_t j = 0; j <= border; j++)
 8000c54:	2300      	movs	r3, #0
 8000c56:	75fb      	strb	r3, [r7, #23]
 8000c58:	e018      	b.n	8000c8c <DrawRectangle+0x56>
	{
		for(uint16_t i = x; i <= (x+w); i++)
 8000c5a:	88fb      	ldrh	r3, [r7, #6]
 8000c5c:	82bb      	strh	r3, [r7, #20]
 8000c5e:	e00c      	b.n	8000c7a <DrawRectangle+0x44>
		{
			drawPixel(i, y+j, color);
 8000c60:	7dfb      	ldrb	r3, [r7, #23]
 8000c62:	b29a      	uxth	r2, r3
 8000c64:	88bb      	ldrh	r3, [r7, #4]
 8000c66:	4413      	add	r3, r2
 8000c68:	b299      	uxth	r1, r3
 8000c6a:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8000c6c:	8abb      	ldrh	r3, [r7, #20]
 8000c6e:	4618      	mov	r0, r3
 8000c70:	f7ff ffc0 	bl	8000bf4 <drawPixel>
		for(uint16_t i = x; i <= (x+w); i++)
 8000c74:	8abb      	ldrh	r3, [r7, #20]
 8000c76:	3301      	adds	r3, #1
 8000c78:	82bb      	strh	r3, [r7, #20]
 8000c7a:	8aba      	ldrh	r2, [r7, #20]
 8000c7c:	88f9      	ldrh	r1, [r7, #6]
 8000c7e:	883b      	ldrh	r3, [r7, #0]
 8000c80:	440b      	add	r3, r1
 8000c82:	429a      	cmp	r2, r3
 8000c84:	ddec      	ble.n	8000c60 <DrawRectangle+0x2a>
	for(uint8_t j = 0; j <= border; j++)
 8000c86:	7dfb      	ldrb	r3, [r7, #23]
 8000c88:	3301      	adds	r3, #1
 8000c8a:	75fb      	strb	r3, [r7, #23]
 8000c8c:	7dfa      	ldrb	r2, [r7, #23]
 8000c8e:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8000c92:	429a      	cmp	r2, r3
 8000c94:	d9e1      	bls.n	8000c5a <DrawRectangle+0x24>
		}
	}

//lijntje verticaal 1
for(uint8_t j = 0; j <= border; j++)
 8000c96:	2300      	movs	r3, #0
 8000c98:	74fb      	strb	r3, [r7, #19]
 8000c9a:	e018      	b.n	8000cce <DrawRectangle+0x98>
{
	for(uint16_t i = y; i <= (y+h); i++)
 8000c9c:	88bb      	ldrh	r3, [r7, #4]
 8000c9e:	823b      	strh	r3, [r7, #16]
 8000ca0:	e00c      	b.n	8000cbc <DrawRectangle+0x86>
	{
		drawPixel(x+j, i, color);
 8000ca2:	7cfb      	ldrb	r3, [r7, #19]
 8000ca4:	b29a      	uxth	r2, r3
 8000ca6:	88fb      	ldrh	r3, [r7, #6]
 8000ca8:	4413      	add	r3, r2
 8000caa:	b29b      	uxth	r3, r3
 8000cac:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8000cae:	8a39      	ldrh	r1, [r7, #16]
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	f7ff ff9f 	bl	8000bf4 <drawPixel>
	for(uint16_t i = y; i <= (y+h); i++)
 8000cb6:	8a3b      	ldrh	r3, [r7, #16]
 8000cb8:	3301      	adds	r3, #1
 8000cba:	823b      	strh	r3, [r7, #16]
 8000cbc:	8a3a      	ldrh	r2, [r7, #16]
 8000cbe:	88b9      	ldrh	r1, [r7, #4]
 8000cc0:	887b      	ldrh	r3, [r7, #2]
 8000cc2:	440b      	add	r3, r1
 8000cc4:	429a      	cmp	r2, r3
 8000cc6:	ddec      	ble.n	8000ca2 <DrawRectangle+0x6c>
for(uint8_t j = 0; j <= border; j++)
 8000cc8:	7cfb      	ldrb	r3, [r7, #19]
 8000cca:	3301      	adds	r3, #1
 8000ccc:	74fb      	strb	r3, [r7, #19]
 8000cce:	7cfa      	ldrb	r2, [r7, #19]
 8000cd0:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8000cd4:	429a      	cmp	r2, r3
 8000cd6:	d9e1      	bls.n	8000c9c <DrawRectangle+0x66>
	}
}
//lijntje verticaal 2
for(uint8_t j = 0; j <= border; j++)
 8000cd8:	2300      	movs	r3, #0
 8000cda:	73fb      	strb	r3, [r7, #15]
 8000cdc:	e01b      	b.n	8000d16 <DrawRectangle+0xe0>
{
	for(uint16_t i = y; i <= (y+h); i++)
 8000cde:	88bb      	ldrh	r3, [r7, #4]
 8000ce0:	81bb      	strh	r3, [r7, #12]
 8000ce2:	e00f      	b.n	8000d04 <DrawRectangle+0xce>
	{
		drawPixel((x+w)-j, i, color);
 8000ce4:	88fa      	ldrh	r2, [r7, #6]
 8000ce6:	883b      	ldrh	r3, [r7, #0]
 8000ce8:	4413      	add	r3, r2
 8000cea:	b29a      	uxth	r2, r3
 8000cec:	7bfb      	ldrb	r3, [r7, #15]
 8000cee:	b29b      	uxth	r3, r3
 8000cf0:	1ad3      	subs	r3, r2, r3
 8000cf2:	b29b      	uxth	r3, r3
 8000cf4:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8000cf6:	89b9      	ldrh	r1, [r7, #12]
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	f7ff ff7b 	bl	8000bf4 <drawPixel>
	for(uint16_t i = y; i <= (y+h); i++)
 8000cfe:	89bb      	ldrh	r3, [r7, #12]
 8000d00:	3301      	adds	r3, #1
 8000d02:	81bb      	strh	r3, [r7, #12]
 8000d04:	89ba      	ldrh	r2, [r7, #12]
 8000d06:	88b9      	ldrh	r1, [r7, #4]
 8000d08:	887b      	ldrh	r3, [r7, #2]
 8000d0a:	440b      	add	r3, r1
 8000d0c:	429a      	cmp	r2, r3
 8000d0e:	dde9      	ble.n	8000ce4 <DrawRectangle+0xae>
for(uint8_t j = 0; j <= border; j++)
 8000d10:	7bfb      	ldrb	r3, [r7, #15]
 8000d12:	3301      	adds	r3, #1
 8000d14:	73fb      	strb	r3, [r7, #15]
 8000d16:	7bfa      	ldrb	r2, [r7, #15]
 8000d18:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8000d1c:	429a      	cmp	r2, r3
 8000d1e:	d9de      	bls.n	8000cde <DrawRectangle+0xa8>
	}
}

//lijntje horizontaal 2
for(uint8_t j = 0; j <= border; j++)
 8000d20:	2300      	movs	r3, #0
 8000d22:	72fb      	strb	r3, [r7, #11]
 8000d24:	e01b      	b.n	8000d5e <DrawRectangle+0x128>
{
	for(uint16_t i = x; i <= (x+w); i++)
 8000d26:	88fb      	ldrh	r3, [r7, #6]
 8000d28:	813b      	strh	r3, [r7, #8]
 8000d2a:	e00f      	b.n	8000d4c <DrawRectangle+0x116>
	{
		drawPixel(i, (y+h)-j, color);
 8000d2c:	88ba      	ldrh	r2, [r7, #4]
 8000d2e:	887b      	ldrh	r3, [r7, #2]
 8000d30:	4413      	add	r3, r2
 8000d32:	b29a      	uxth	r2, r3
 8000d34:	7afb      	ldrb	r3, [r7, #11]
 8000d36:	b29b      	uxth	r3, r3
 8000d38:	1ad3      	subs	r3, r2, r3
 8000d3a:	b299      	uxth	r1, r3
 8000d3c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8000d3e:	893b      	ldrh	r3, [r7, #8]
 8000d40:	4618      	mov	r0, r3
 8000d42:	f7ff ff57 	bl	8000bf4 <drawPixel>
	for(uint16_t i = x; i <= (x+w); i++)
 8000d46:	893b      	ldrh	r3, [r7, #8]
 8000d48:	3301      	adds	r3, #1
 8000d4a:	813b      	strh	r3, [r7, #8]
 8000d4c:	893a      	ldrh	r2, [r7, #8]
 8000d4e:	88f9      	ldrh	r1, [r7, #6]
 8000d50:	883b      	ldrh	r3, [r7, #0]
 8000d52:	440b      	add	r3, r1
 8000d54:	429a      	cmp	r2, r3
 8000d56:	dde9      	ble.n	8000d2c <DrawRectangle+0xf6>
for(uint8_t j = 0; j <= border; j++)
 8000d58:	7afb      	ldrb	r3, [r7, #11]
 8000d5a:	3301      	adds	r3, #1
 8000d5c:	72fb      	strb	r3, [r7, #11]
 8000d5e:	7afa      	ldrb	r2, [r7, #11]
 8000d60:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8000d64:	429a      	cmp	r2, r3
 8000d66:	d9de      	bls.n	8000d26 <DrawRectangle+0xf0>
	}
}
//contentcolor
fillRect(x+border, y+border, w-(border*2), h-(border*2), contentcolor);
 8000d68:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8000d6c:	b29a      	uxth	r2, r3
 8000d6e:	88fb      	ldrh	r3, [r7, #6]
 8000d70:	4413      	add	r3, r2
 8000d72:	b298      	uxth	r0, r3
 8000d74:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8000d78:	b29a      	uxth	r2, r3
 8000d7a:	88bb      	ldrh	r3, [r7, #4]
 8000d7c:	4413      	add	r3, r2
 8000d7e:	b299      	uxth	r1, r3
 8000d80:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8000d84:	b29b      	uxth	r3, r3
 8000d86:	005b      	lsls	r3, r3, #1
 8000d88:	b29b      	uxth	r3, r3
 8000d8a:	883a      	ldrh	r2, [r7, #0]
 8000d8c:	1ad3      	subs	r3, r2, r3
 8000d8e:	b29c      	uxth	r4, r3
 8000d90:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8000d94:	b29b      	uxth	r3, r3
 8000d96:	005b      	lsls	r3, r3, #1
 8000d98:	b29b      	uxth	r3, r3
 8000d9a:	887a      	ldrh	r2, [r7, #2]
 8000d9c:	1ad3      	subs	r3, r2, r3
 8000d9e:	b29a      	uxth	r2, r3
 8000da0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8000da2:	9300      	str	r3, [sp, #0]
 8000da4:	4613      	mov	r3, r2
 8000da6:	4622      	mov	r2, r4
 8000da8:	f000 f82c 	bl	8000e04 <fillRect>



}
 8000dac:	bf00      	nop
 8000dae:	371c      	adds	r7, #28
 8000db0:	46bd      	mov	sp, r7
 8000db2:	bd90      	pop	{r4, r7, pc}

08000db4 <write16BitColor>:
void DrawVolumebuttonDown()
{

}

void write16BitColor(uint16_t color){
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b084      	sub	sp, #16
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	4603      	mov	r3, r0
 8000dbc:	80fb      	strh	r3, [r7, #6]
	//565  = rrrr rggg gggb bbbb
	//F800 = 1111 1000 0000 0000 //11 nullekes
	//07E0 = 0000 0111 1110 0000 //5 nulleks
	//001F = 0000 0000 0001 1111
	 uint8_t r = (color >> 8) & 0Xf8; //& 0xF800) >> 11;
 8000dbe:	88fb      	ldrh	r3, [r7, #6]
 8000dc0:	0a1b      	lsrs	r3, r3, #8
 8000dc2:	b29b      	uxth	r3, r3
 8000dc4:	b2db      	uxtb	r3, r3
 8000dc6:	f023 0307 	bic.w	r3, r3, #7
 8000dca:	73fb      	strb	r3, [r7, #15]
	 uint8_t g = (color >> 3) & 0Xfc; //& 0x07E0) >> 5;
 8000dcc:	88fb      	ldrh	r3, [r7, #6]
 8000dce:	08db      	lsrs	r3, r3, #3
 8000dd0:	b29b      	uxth	r3, r3
 8000dd2:	b2db      	uxtb	r3, r3
 8000dd4:	f023 0303 	bic.w	r3, r3, #3
 8000dd8:	73bb      	strb	r3, [r7, #14]
	 uint8_t b = (color <<3); //& 0x001F;
 8000dda:	88fb      	ldrh	r3, [r7, #6]
 8000ddc:	b2db      	uxtb	r3, r3
 8000dde:	00db      	lsls	r3, r3, #3
 8000de0:	737b      	strb	r3, [r7, #13]
	 //2^6 = 64  (0 tot 63)
	 //2^5 = 32 (0 tot 31)
	  //r = (r * 255) / 31;
	  //g = (g * 255) / 63;
	  //b = (b * 255) / 31;
	 writedata(r);
 8000de2:	7bfb      	ldrb	r3, [r7, #15]
 8000de4:	4618      	mov	r0, r3
 8000de6:	f7ff fe9d 	bl	8000b24 <writedata>
	 writedata(g);
 8000dea:	7bbb      	ldrb	r3, [r7, #14]
 8000dec:	4618      	mov	r0, r3
 8000dee:	f7ff fe99 	bl	8000b24 <writedata>
	 writedata(b);
 8000df2:	7b7b      	ldrb	r3, [r7, #13]
 8000df4:	4618      	mov	r0, r3
 8000df6:	f7ff fe95 	bl	8000b24 <writedata>
	  //HAL_SPI_Transmit(&mySPI, &r, 1, HAL_MAX_DELAY); //Size = bytes
	  //HAL_SPI_Transmit(&mySPI, &g, 1, HAL_MAX_DELAY); //Size = bytes
	  //HAL_SPI_Transmit(&mySPI, &b, 1, HAL_MAX_DELAY); //Size = bytes
}
 8000dfa:	bf00      	nop
 8000dfc:	3710      	adds	r7, #16
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	bd80      	pop	{r7, pc}
	...

08000e04 <fillRect>:



}
void fillRect(uint16_t x, uint16_t y , uint16_t w , uint16_t h, uint16_t color)
{
 8000e04:	b590      	push	{r4, r7, lr}
 8000e06:	b083      	sub	sp, #12
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	4604      	mov	r4, r0
 8000e0c:	4608      	mov	r0, r1
 8000e0e:	4611      	mov	r1, r2
 8000e10:	461a      	mov	r2, r3
 8000e12:	4623      	mov	r3, r4
 8000e14:	80fb      	strh	r3, [r7, #6]
 8000e16:	4603      	mov	r3, r0
 8000e18:	80bb      	strh	r3, [r7, #4]
 8000e1a:	460b      	mov	r3, r1
 8000e1c:	807b      	strh	r3, [r7, #2]
 8000e1e:	4613      	mov	r3, r2
 8000e20:	803b      	strh	r3, [r7, #0]
	if ((x >= Display_width) || (y >= Display_height))
 8000e22:	4b2a      	ldr	r3, [pc, #168]	; (8000ecc <fillRect+0xc8>)
 8000e24:	881b      	ldrh	r3, [r3, #0]
 8000e26:	88fa      	ldrh	r2, [r7, #6]
 8000e28:	429a      	cmp	r2, r3
 8000e2a:	d24a      	bcs.n	8000ec2 <fillRect+0xbe>
 8000e2c:	4b28      	ldr	r3, [pc, #160]	; (8000ed0 <fillRect+0xcc>)
 8000e2e:	881b      	ldrh	r3, [r3, #0]
 8000e30:	88ba      	ldrh	r2, [r7, #4]
 8000e32:	429a      	cmp	r2, r3
 8000e34:	d245      	bcs.n	8000ec2 <fillRect+0xbe>
		return;
	if ((x + w - 1) >= Display_width)
 8000e36:	88fa      	ldrh	r2, [r7, #6]
 8000e38:	887b      	ldrh	r3, [r7, #2]
 8000e3a:	4413      	add	r3, r2
 8000e3c:	4a23      	ldr	r2, [pc, #140]	; (8000ecc <fillRect+0xc8>)
 8000e3e:	8812      	ldrh	r2, [r2, #0]
 8000e40:	4293      	cmp	r3, r2
 8000e42:	dd04      	ble.n	8000e4e <fillRect+0x4a>
		w = Display_width - x;
 8000e44:	4b21      	ldr	r3, [pc, #132]	; (8000ecc <fillRect+0xc8>)
 8000e46:	881a      	ldrh	r2, [r3, #0]
 8000e48:	88fb      	ldrh	r3, [r7, #6]
 8000e4a:	1ad3      	subs	r3, r2, r3
 8000e4c:	807b      	strh	r3, [r7, #2]
	if ((y + h - 1) >= Display_height)
 8000e4e:	88ba      	ldrh	r2, [r7, #4]
 8000e50:	883b      	ldrh	r3, [r7, #0]
 8000e52:	4413      	add	r3, r2
 8000e54:	4a1e      	ldr	r2, [pc, #120]	; (8000ed0 <fillRect+0xcc>)
 8000e56:	8812      	ldrh	r2, [r2, #0]
 8000e58:	4293      	cmp	r3, r2
 8000e5a:	dd04      	ble.n	8000e66 <fillRect+0x62>
		h = Display_height - y;
 8000e5c:	4b1c      	ldr	r3, [pc, #112]	; (8000ed0 <fillRect+0xcc>)
 8000e5e:	881a      	ldrh	r2, [r3, #0]
 8000e60:	88bb      	ldrh	r3, [r7, #4]
 8000e62:	1ad3      	subs	r3, r2, r3
 8000e64:	803b      	strh	r3, [r7, #0]

	setAddrWindow(x, y, x + w - 1, y + h - 1);
 8000e66:	88fa      	ldrh	r2, [r7, #6]
 8000e68:	887b      	ldrh	r3, [r7, #2]
 8000e6a:	4413      	add	r3, r2
 8000e6c:	b29b      	uxth	r3, r3
 8000e6e:	3b01      	subs	r3, #1
 8000e70:	b29c      	uxth	r4, r3
 8000e72:	88ba      	ldrh	r2, [r7, #4]
 8000e74:	883b      	ldrh	r3, [r7, #0]
 8000e76:	4413      	add	r3, r2
 8000e78:	b29b      	uxth	r3, r3
 8000e7a:	3b01      	subs	r3, #1
 8000e7c:	b29b      	uxth	r3, r3
 8000e7e:	88b9      	ldrh	r1, [r7, #4]
 8000e80:	88f8      	ldrh	r0, [r7, #6]
 8000e82:	4622      	mov	r2, r4
 8000e84:	f7ff fe6a 	bl	8000b5c <setAddrWindow>

	DC_HIGH();
 8000e88:	f7ff fd30 	bl	80008ec <DC_HIGH>
	CS_LOW();
 8000e8c:	f7ff fd22 	bl	80008d4 <CS_LOW>

	for (y = h; y > 0; y--) {
 8000e90:	883b      	ldrh	r3, [r7, #0]
 8000e92:	80bb      	strh	r3, [r7, #4]
 8000e94:	e00f      	b.n	8000eb6 <fillRect+0xb2>
		for (x = w; x > 0; x--) {
 8000e96:	887b      	ldrh	r3, [r7, #2]
 8000e98:	80fb      	strh	r3, [r7, #6]
 8000e9a:	e006      	b.n	8000eaa <fillRect+0xa6>

			write16BitColor(color);
 8000e9c:	8b3b      	ldrh	r3, [r7, #24]
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	f7ff ff88 	bl	8000db4 <write16BitColor>
		for (x = w; x > 0; x--) {
 8000ea4:	88fb      	ldrh	r3, [r7, #6]
 8000ea6:	3b01      	subs	r3, #1
 8000ea8:	80fb      	strh	r3, [r7, #6]
 8000eaa:	88fb      	ldrh	r3, [r7, #6]
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d1f5      	bne.n	8000e9c <fillRect+0x98>
	for (y = h; y > 0; y--) {
 8000eb0:	88bb      	ldrh	r3, [r7, #4]
 8000eb2:	3b01      	subs	r3, #1
 8000eb4:	80bb      	strh	r3, [r7, #4]
 8000eb6:	88bb      	ldrh	r3, [r7, #4]
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d1ec      	bne.n	8000e96 <fillRect+0x92>
		}
	}

	CS_HIGH();
 8000ebc:	f7ff fcfe 	bl	80008bc <CS_HIGH>
 8000ec0:	e000      	b.n	8000ec4 <fillRect+0xc0>
		return;
 8000ec2:	bf00      	nop



}
 8000ec4:	370c      	adds	r7, #12
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd90      	pop	{r4, r7, pc}
 8000eca:	bf00      	nop
 8000ecc:	20000006 	.word	0x20000006
 8000ed0:	20000008 	.word	0x20000008

08000ed4 <DevicePressed>:


void DevicePressed(uint8_t *apparaat)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b088      	sub	sp, #32
 8000ed8:	af04      	add	r7, sp, #16
 8000eda:	6078      	str	r0, [r7, #4]
	uint16_t color;
	uint16_t contentcolor;
	uint8_t device = *apparaat;
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	781b      	ldrb	r3, [r3, #0]
 8000ee0:	72bb      	strb	r3, [r7, #10]
	switch(device)
 8000ee2:	7abb      	ldrb	r3, [r7, #10]
 8000ee4:	3b01      	subs	r3, #1
 8000ee6:	2b03      	cmp	r3, #3
 8000ee8:	d819      	bhi.n	8000f1e <DevicePressed+0x4a>
 8000eea:	a201      	add	r2, pc, #4	; (adr r2, 8000ef0 <DevicePressed+0x1c>)
 8000eec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ef0:	08000f01 	.word	0x08000f01
 8000ef4:	08000f07 	.word	0x08000f07
 8000ef8:	08000f0f 	.word	0x08000f0f
 8000efc:	08000f17 	.word	0x08000f17
	{
	case 1:
		color = ILI9488_BLUE;
 8000f00:	231f      	movs	r3, #31
 8000f02:	81fb      	strh	r3, [r7, #14]
		break;
 8000f04:	e00c      	b.n	8000f20 <DevicePressed+0x4c>
	case 2:
		color = ILI9488_YELLOW;
 8000f06:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8000f0a:	81fb      	strh	r3, [r7, #14]
		break;
 8000f0c:	e008      	b.n	8000f20 <DevicePressed+0x4c>
	case 3:
		color = ILI9488_GREEN;
 8000f0e:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8000f12:	81fb      	strh	r3, [r7, #14]
		break;
 8000f14:	e004      	b.n	8000f20 <DevicePressed+0x4c>
	case 4:
		color = ILI9488_WHITE;
 8000f16:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000f1a:	81fb      	strh	r3, [r7, #14]
		break;
 8000f1c:	e000      	b.n	8000f20 <DevicePressed+0x4c>
	default:
		break;
 8000f1e:	bf00      	nop
	}
	for(uint8_t knop = 1; knop <= 14; knop++)
 8000f20:	2301      	movs	r3, #1
 8000f22:	72fb      	strb	r3, [r7, #11]
 8000f24:	e107      	b.n	8001136 <DevicePressed+0x262>
	{
		if(knop <= 12)
 8000f26:	7afb      	ldrb	r3, [r7, #11]
 8000f28:	2b0c      	cmp	r3, #12
 8000f2a:	d81d      	bhi.n	8000f68 <DevicePressed+0x94>
		{
			uint8_t berekening = ((device-1) * 12) + knop-1 ;
 8000f2c:	7abb      	ldrb	r3, [r7, #10]
 8000f2e:	461a      	mov	r2, r3
 8000f30:	0052      	lsls	r2, r2, #1
 8000f32:	4413      	add	r3, r2
 8000f34:	009b      	lsls	r3, r3, #2
 8000f36:	b2da      	uxtb	r2, r3
 8000f38:	7afb      	ldrb	r3, [r7, #11]
 8000f3a:	4413      	add	r3, r2
 8000f3c:	b2db      	uxtb	r3, r3
 8000f3e:	3b0d      	subs	r3, #13
 8000f40:	727b      	strb	r3, [r7, #9]
			if(lengte_signaal[berekening] != 0)
 8000f42:	7a7b      	ldrb	r3, [r7, #9]
 8000f44:	4a80      	ldr	r2, [pc, #512]	; (8001148 <DevicePressed+0x274>)
 8000f46:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d00a      	beq.n	8000f64 <DevicePressed+0x90>
			{
				if(knop == 1)
 8000f4e:	7afb      	ldrb	r3, [r7, #11]
 8000f50:	2b01      	cmp	r3, #1
 8000f52:	d103      	bne.n	8000f5c <DevicePressed+0x88>
				{
					contentcolor = ILI9488_RED;
 8000f54:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8000f58:	81bb      	strh	r3, [r7, #12]
 8000f5a:	e005      	b.n	8000f68 <DevicePressed+0x94>
				}
				else
				{
					contentcolor = ILI9488_DARKGREY;
 8000f5c:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8000f60:	81bb      	strh	r3, [r7, #12]
 8000f62:	e001      	b.n	8000f68 <DevicePressed+0x94>
				}

			}
			else
			{
			contentcolor = ILI9488_BLACK;
 8000f64:	2300      	movs	r3, #0
 8000f66:	81bb      	strh	r3, [r7, #12]
			}
		}
		switch(knop)
 8000f68:	7afb      	ldrb	r3, [r7, #11]
 8000f6a:	3b01      	subs	r3, #1
 8000f6c:	2b0d      	cmp	r3, #13
 8000f6e:	f200 80de 	bhi.w	800112e <DevicePressed+0x25a>
 8000f72:	a201      	add	r2, pc, #4	; (adr r2, 8000f78 <DevicePressed+0xa4>)
 8000f74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f78:	08000fb1 	.word	0x08000fb1
 8000f7c:	08000fcb 	.word	0x08000fcb
 8000f80:	08000fe5 	.word	0x08000fe5
 8000f84:	08000fff 	.word	0x08000fff
 8000f88:	08001019 	.word	0x08001019
 8000f8c:	08001033 	.word	0x08001033
 8000f90:	0800104d 	.word	0x0800104d
 8000f94:	08001067 	.word	0x08001067
 8000f98:	08001083 	.word	0x08001083
 8000f9c:	0800109f 	.word	0x0800109f
 8000fa0:	080010bb 	.word	0x080010bb
 8000fa4:	080010d7 	.word	0x080010d7
 8000fa8:	080010f3 	.word	0x080010f3
 8000fac:	08001111 	.word	0x08001111
		{
		case 1:
			//Power
			DrawRectangle(23, 50, 75, 75, color, contentcolor, 5);
 8000fb0:	2305      	movs	r3, #5
 8000fb2:	9302      	str	r3, [sp, #8]
 8000fb4:	89bb      	ldrh	r3, [r7, #12]
 8000fb6:	9301      	str	r3, [sp, #4]
 8000fb8:	89fb      	ldrh	r3, [r7, #14]
 8000fba:	9300      	str	r3, [sp, #0]
 8000fbc:	234b      	movs	r3, #75	; 0x4b
 8000fbe:	224b      	movs	r2, #75	; 0x4b
 8000fc0:	2132      	movs	r1, #50	; 0x32
 8000fc2:	2017      	movs	r0, #23
 8000fc4:	f7ff fe37 	bl	8000c36 <DrawRectangle>
			break;
 8000fc8:	e0b2      	b.n	8001130 <DevicePressed+0x25c>
		case 2:
			//Src
			DrawRectangle(219, 50, 75, 75, color, contentcolor, 5);
 8000fca:	2305      	movs	r3, #5
 8000fcc:	9302      	str	r3, [sp, #8]
 8000fce:	89bb      	ldrh	r3, [r7, #12]
 8000fd0:	9301      	str	r3, [sp, #4]
 8000fd2:	89fb      	ldrh	r3, [r7, #14]
 8000fd4:	9300      	str	r3, [sp, #0]
 8000fd6:	234b      	movs	r3, #75	; 0x4b
 8000fd8:	224b      	movs	r2, #75	; 0x4b
 8000fda:	2132      	movs	r1, #50	; 0x32
 8000fdc:	20db      	movs	r0, #219	; 0xdb
 8000fde:	f7ff fe2a 	bl	8000c36 <DrawRectangle>
			break;
 8000fe2:	e0a5      	b.n	8001130 <DevicePressed+0x25c>
		case 3:
			//^
			DrawRectangle(121, 80, 75, 75, color, contentcolor, 5);
 8000fe4:	2305      	movs	r3, #5
 8000fe6:	9302      	str	r3, [sp, #8]
 8000fe8:	89bb      	ldrh	r3, [r7, #12]
 8000fea:	9301      	str	r3, [sp, #4]
 8000fec:	89fb      	ldrh	r3, [r7, #14]
 8000fee:	9300      	str	r3, [sp, #0]
 8000ff0:	234b      	movs	r3, #75	; 0x4b
 8000ff2:	224b      	movs	r2, #75	; 0x4b
 8000ff4:	2150      	movs	r1, #80	; 0x50
 8000ff6:	2079      	movs	r0, #121	; 0x79
 8000ff8:	f7ff fe1d 	bl	8000c36 <DrawRectangle>
			break;
 8000ffc:	e098      	b.n	8001130 <DevicePressed+0x25c>
		case 4:
			//<
			DrawRectangle(23, 165, 75, 75, color, contentcolor, 5);
 8000ffe:	2305      	movs	r3, #5
 8001000:	9302      	str	r3, [sp, #8]
 8001002:	89bb      	ldrh	r3, [r7, #12]
 8001004:	9301      	str	r3, [sp, #4]
 8001006:	89fb      	ldrh	r3, [r7, #14]
 8001008:	9300      	str	r3, [sp, #0]
 800100a:	234b      	movs	r3, #75	; 0x4b
 800100c:	224b      	movs	r2, #75	; 0x4b
 800100e:	21a5      	movs	r1, #165	; 0xa5
 8001010:	2017      	movs	r0, #23
 8001012:	f7ff fe10 	bl	8000c36 <DrawRectangle>
			break;
 8001016:	e08b      	b.n	8001130 <DevicePressed+0x25c>
		case 5:
			//OK
			DrawRectangle(121, 165, 75, 75, color, contentcolor, 5);
 8001018:	2305      	movs	r3, #5
 800101a:	9302      	str	r3, [sp, #8]
 800101c:	89bb      	ldrh	r3, [r7, #12]
 800101e:	9301      	str	r3, [sp, #4]
 8001020:	89fb      	ldrh	r3, [r7, #14]
 8001022:	9300      	str	r3, [sp, #0]
 8001024:	234b      	movs	r3, #75	; 0x4b
 8001026:	224b      	movs	r2, #75	; 0x4b
 8001028:	21a5      	movs	r1, #165	; 0xa5
 800102a:	2079      	movs	r0, #121	; 0x79
 800102c:	f7ff fe03 	bl	8000c36 <DrawRectangle>
			break;
 8001030:	e07e      	b.n	8001130 <DevicePressed+0x25c>
		case 6:
			//>
			DrawRectangle(219, 165, 75, 75, color, contentcolor, 5);
 8001032:	2305      	movs	r3, #5
 8001034:	9302      	str	r3, [sp, #8]
 8001036:	89bb      	ldrh	r3, [r7, #12]
 8001038:	9301      	str	r3, [sp, #4]
 800103a:	89fb      	ldrh	r3, [r7, #14]
 800103c:	9300      	str	r3, [sp, #0]
 800103e:	234b      	movs	r3, #75	; 0x4b
 8001040:	224b      	movs	r2, #75	; 0x4b
 8001042:	21a5      	movs	r1, #165	; 0xa5
 8001044:	20db      	movs	r0, #219	; 0xdb
 8001046:	f7ff fdf6 	bl	8000c36 <DrawRectangle>
			break;
 800104a:	e071      	b.n	8001130 <DevicePressed+0x25c>
		case 7:
			//V
			DrawRectangle(121, 250, 75, 75, color, contentcolor, 5);
 800104c:	2305      	movs	r3, #5
 800104e:	9302      	str	r3, [sp, #8]
 8001050:	89bb      	ldrh	r3, [r7, #12]
 8001052:	9301      	str	r3, [sp, #4]
 8001054:	89fb      	ldrh	r3, [r7, #14]
 8001056:	9300      	str	r3, [sp, #0]
 8001058:	234b      	movs	r3, #75	; 0x4b
 800105a:	224b      	movs	r2, #75	; 0x4b
 800105c:	21fa      	movs	r1, #250	; 0xfa
 800105e:	2079      	movs	r0, #121	; 0x79
 8001060:	f7ff fde9 	bl	8000c36 <DrawRectangle>
			break;
 8001064:	e064      	b.n	8001130 <DevicePressed+0x25c>
		case 8:
			//volume up
				DrawRectangle(23, 298, 75, 75, color, contentcolor, 5);
 8001066:	2305      	movs	r3, #5
 8001068:	9302      	str	r3, [sp, #8]
 800106a:	89bb      	ldrh	r3, [r7, #12]
 800106c:	9301      	str	r3, [sp, #4]
 800106e:	89fb      	ldrh	r3, [r7, #14]
 8001070:	9300      	str	r3, [sp, #0]
 8001072:	234b      	movs	r3, #75	; 0x4b
 8001074:	224b      	movs	r2, #75	; 0x4b
 8001076:	f44f 7195 	mov.w	r1, #298	; 0x12a
 800107a:	2017      	movs	r0, #23
 800107c:	f7ff fddb 	bl	8000c36 <DrawRectangle>
			break;
 8001080:	e056      	b.n	8001130 <DevicePressed+0x25c>
		case 9:
			//volume down
				DrawRectangle(23, 393, 75, 75, color, contentcolor, 5);
 8001082:	2305      	movs	r3, #5
 8001084:	9302      	str	r3, [sp, #8]
 8001086:	89bb      	ldrh	r3, [r7, #12]
 8001088:	9301      	str	r3, [sp, #4]
 800108a:	89fb      	ldrh	r3, [r7, #14]
 800108c:	9300      	str	r3, [sp, #0]
 800108e:	234b      	movs	r3, #75	; 0x4b
 8001090:	224b      	movs	r2, #75	; 0x4b
 8001092:	f240 1189 	movw	r1, #393	; 0x189
 8001096:	2017      	movs	r0, #23
 8001098:	f7ff fdcd 	bl	8000c36 <DrawRectangle>
			break;
 800109c:	e048      	b.n	8001130 <DevicePressed+0x25c>
		case 10:
			//mute
				DrawRectangle(121, 393, 75, 75, color, contentcolor, 5);
 800109e:	2305      	movs	r3, #5
 80010a0:	9302      	str	r3, [sp, #8]
 80010a2:	89bb      	ldrh	r3, [r7, #12]
 80010a4:	9301      	str	r3, [sp, #4]
 80010a6:	89fb      	ldrh	r3, [r7, #14]
 80010a8:	9300      	str	r3, [sp, #0]
 80010aa:	234b      	movs	r3, #75	; 0x4b
 80010ac:	224b      	movs	r2, #75	; 0x4b
 80010ae:	f240 1189 	movw	r1, #393	; 0x189
 80010b2:	2079      	movs	r0, #121	; 0x79
 80010b4:	f7ff fdbf 	bl	8000c36 <DrawRectangle>
			break;
 80010b8:	e03a      	b.n	8001130 <DevicePressed+0x25c>
		case 11:
			//channel up
				DrawRectangle(219, 298, 75, 75, color, contentcolor, 5);
 80010ba:	2305      	movs	r3, #5
 80010bc:	9302      	str	r3, [sp, #8]
 80010be:	89bb      	ldrh	r3, [r7, #12]
 80010c0:	9301      	str	r3, [sp, #4]
 80010c2:	89fb      	ldrh	r3, [r7, #14]
 80010c4:	9300      	str	r3, [sp, #0]
 80010c6:	234b      	movs	r3, #75	; 0x4b
 80010c8:	224b      	movs	r2, #75	; 0x4b
 80010ca:	f44f 7195 	mov.w	r1, #298	; 0x12a
 80010ce:	20db      	movs	r0, #219	; 0xdb
 80010d0:	f7ff fdb1 	bl	8000c36 <DrawRectangle>
			break;
 80010d4:	e02c      	b.n	8001130 <DevicePressed+0x25c>
		case 12:
			//channel down
				DrawRectangle(219, 393, 75, 75, color, contentcolor, 5);
 80010d6:	2305      	movs	r3, #5
 80010d8:	9302      	str	r3, [sp, #8]
 80010da:	89bb      	ldrh	r3, [r7, #12]
 80010dc:	9301      	str	r3, [sp, #4]
 80010de:	89fb      	ldrh	r3, [r7, #14]
 80010e0:	9300      	str	r3, [sp, #0]
 80010e2:	234b      	movs	r3, #75	; 0x4b
 80010e4:	224b      	movs	r2, #75	; 0x4b
 80010e6:	f240 1189 	movw	r1, #393	; 0x189
 80010ea:	20db      	movs	r0, #219	; 0xdb
 80010ec:	f7ff fda3 	bl	8000c36 <DrawRectangle>
			break;
 80010f0:	e01e      	b.n	8001130 <DevicePressed+0x25c>
		case 13:
			//Add
				DrawRectangle(23, 245, 48, 75, ILI9488_GREENYELLOW, ILI9488_GREENYELLOW, 0);
 80010f2:	2300      	movs	r3, #0
 80010f4:	9302      	str	r3, [sp, #8]
 80010f6:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 80010fa:	9301      	str	r3, [sp, #4]
 80010fc:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8001100:	9300      	str	r3, [sp, #0]
 8001102:	234b      	movs	r3, #75	; 0x4b
 8001104:	2230      	movs	r2, #48	; 0x30
 8001106:	21f5      	movs	r1, #245	; 0xf5
 8001108:	2017      	movs	r0, #23
 800110a:	f7ff fd94 	bl	8000c36 <DrawRectangle>
			break;
 800110e:	e00f      	b.n	8001130 <DevicePressed+0x25c>
		case 14:
			//Delete
					DrawRectangle(219, 245, 48, 75, ILI9488_RED, ILI9488_RED, 0);
 8001110:	2300      	movs	r3, #0
 8001112:	9302      	str	r3, [sp, #8]
 8001114:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001118:	9301      	str	r3, [sp, #4]
 800111a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800111e:	9300      	str	r3, [sp, #0]
 8001120:	234b      	movs	r3, #75	; 0x4b
 8001122:	2230      	movs	r2, #48	; 0x30
 8001124:	21f5      	movs	r1, #245	; 0xf5
 8001126:	20db      	movs	r0, #219	; 0xdb
 8001128:	f7ff fd85 	bl	8000c36 <DrawRectangle>
			break;
 800112c:	e000      	b.n	8001130 <DevicePressed+0x25c>
		default:
			break;
 800112e:	bf00      	nop
	for(uint8_t knop = 1; knop <= 14; knop++)
 8001130:	7afb      	ldrb	r3, [r7, #11]
 8001132:	3301      	adds	r3, #1
 8001134:	72fb      	strb	r3, [r7, #11]
 8001136:	7afb      	ldrb	r3, [r7, #11]
 8001138:	2b0e      	cmp	r3, #14
 800113a:	f67f aef4 	bls.w	8000f26 <DevicePressed+0x52>





}
 800113e:	bf00      	nop
 8001140:	bf00      	nop
 8001142:	3710      	adds	r7, #16
 8001144:	46bd      	mov	sp, r7
 8001146:	bd80      	pop	{r7, pc}
 8001148:	20004e30 	.word	0x20004e30

0800114c <buttonPressed>:
void buttonPressed(uint8_t *dev, uint8_t *knop, uint8_t *Sensingtouch, uint16_t *X_w, uint16_t *Y_w)
{
 800114c:	b590      	push	{r4, r7, lr}
 800114e:	f2ad 4d0c 	subw	sp, sp, #1036	; 0x40c
 8001152:	af00      	add	r7, sp, #0
 8001154:	f507 6481 	add.w	r4, r7, #1032	; 0x408
 8001158:	f5a4 747f 	sub.w	r4, r4, #1020	; 0x3fc
 800115c:	6020      	str	r0, [r4, #0]
 800115e:	f507 6081 	add.w	r0, r7, #1032	; 0x408
 8001162:	f5a0 6080 	sub.w	r0, r0, #1024	; 0x400
 8001166:	6001      	str	r1, [r0, #0]
 8001168:	f507 6181 	add.w	r1, r7, #1032	; 0x408
 800116c:	f2a1 4104 	subw	r1, r1, #1028	; 0x404
 8001170:	600a      	str	r2, [r1, #0]
 8001172:	f507 6281 	add.w	r2, r7, #1032	; 0x408
 8001176:	f5a2 6281 	sub.w	r2, r2, #1032	; 0x408
 800117a:	6013      	str	r3, [r2, #0]
uint8_t device = *dev;
 800117c:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 8001180:	f5a3 737f 	sub.w	r3, r3, #1020	; 0x3fc
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	781b      	ldrb	r3, [r3, #0]
 8001188:	f887 3403 	strb.w	r3, [r7, #1027]	; 0x403
uint8_t button = *knop;
 800118c:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 8001190:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	781b      	ldrb	r3, [r3, #0]
 8001198:	f887 3402 	strb.w	r3, [r7, #1026]	; 0x402
uint8_t aanraak = *Sensingtouch;
 800119c:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 80011a0:	f2a3 4304 	subw	r3, r3, #1028	; 0x404
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	781b      	ldrb	r3, [r3, #0]
 80011a8:	f887 3401 	strb.w	r3, [r7, #1025]	; 0x401
uint16_t X_waarde = *X_w;
 80011ac:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 80011b0:	f5a3 6381 	sub.w	r3, r3, #1032	; 0x408
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	881b      	ldrh	r3, [r3, #0]
 80011b8:	f8a7 33fe 	strh.w	r3, [r7, #1022]	; 0x3fe
uint16_t Y_waarde = *Y_w;
 80011bc:	f8d7 3418 	ldr.w	r3, [r7, #1048]	; 0x418
 80011c0:	881b      	ldrh	r3, [r3, #0]
 80011c2:	f8a7 33fc 	strh.w	r3, [r7, #1020]	; 0x3fc

uint8_t controle = 0;
 80011c6:	2300      	movs	r3, #0
 80011c8:	f887 33fb 	strb.w	r3, [r7, #1019]	; 0x3fb
uint8_t berekening = ((device-1) * 12) + button-1 ;
 80011cc:	f897 3403 	ldrb.w	r3, [r7, #1027]	; 0x403
 80011d0:	461a      	mov	r2, r3
 80011d2:	0052      	lsls	r2, r2, #1
 80011d4:	4413      	add	r3, r2
 80011d6:	009b      	lsls	r3, r3, #2
 80011d8:	b2da      	uxtb	r2, r3
 80011da:	f897 3402 	ldrb.w	r3, [r7, #1026]	; 0x402
 80011de:	4413      	add	r3, r2
 80011e0:	b2db      	uxtb	r3, r3
 80011e2:	3b0d      	subs	r3, #13
 80011e4:	b2db      	uxtb	r3, r3
 80011e6:	f887 33fa 	strb.w	r3, [r7, #1018]	; 0x3fa
	 if(button >= 13) //Is de knop een ADD/Delete button?
 80011ea:	f897 3402 	ldrb.w	r3, [r7, #1026]	; 0x402
 80011ee:	2b0c      	cmp	r3, #12
 80011f0:	f240 80ac 	bls.w	800134c <buttonPressed+0x200>
	 {
		 switch(button)
 80011f4:	f897 3402 	ldrb.w	r3, [r7, #1026]	; 0x402
 80011f8:	2b0d      	cmp	r3, #13
 80011fa:	d002      	beq.n	8001202 <buttonPressed+0xb6>
 80011fc:	2b0e      	cmp	r3, #14
 80011fe:	d06d      	beq.n	80012dc <buttonPressed+0x190>
			 	 printf("button %d , duw op een knop van de andere afstandsbediening, die je wilt instellen\r\n", button);
			 	 IR_Read();

			 break;
		 default:
			 break;
 8001200:	e0f2      	b.n	80013e8 <buttonPressed+0x29c>
			 button = 0;
 8001202:	2300      	movs	r3, #0
 8001204:	f887 3402 	strb.w	r3, [r7, #1026]	; 0x402
			 cleartijd();
 8001208:	f000 fa2a 	bl	8001660 <cleartijd>
			 X_waarde = 160; Y_waarde = 363;
 800120c:	23a0      	movs	r3, #160	; 0xa0
 800120e:	f8a7 33fe 	strh.w	r3, [r7, #1022]	; 0x3fe
 8001212:	f240 136b 	movw	r3, #363	; 0x16b
 8001216:	f8a7 33fc 	strh.w	r3, [r7, #1020]	; 0x3fc
			 printf("button %d , duw op een knop van de andere afstandsbediening, die je wilt instellen\r\n", button);
 800121a:	f897 3402 	ldrb.w	r3, [r7, #1026]	; 0x402
 800121e:	4619      	mov	r1, r3
 8001220:	4874      	ldr	r0, [pc, #464]	; (80013f4 <buttonPressed+0x2a8>)
 8001222:	f006 f89f 	bl	8007364 <iprintf>
			 while(button == 0)
 8001226:	e018      	b.n	800125a <buttonPressed+0x10e>
				 Touch(&aanraak, &X_waarde, &Y_waarde);
 8001228:	f507 727f 	add.w	r2, r7, #1020	; 0x3fc
 800122c:	f207 31fe 	addw	r1, r7, #1022	; 0x3fe
 8001230:	f207 4301 	addw	r3, r7, #1025	; 0x401
 8001234:	4618      	mov	r0, r3
 8001236:	f000 fb97 	bl	8001968 <Touch>
				 ReadButton(&button, &X_waarde, &Y_waarde);
 800123a:	f507 727f 	add.w	r2, r7, #1020	; 0x3fc
 800123e:	f207 31fe 	addw	r1, r7, #1022	; 0x3fe
 8001242:	f207 4302 	addw	r3, r7, #1026	; 0x402
 8001246:	4618      	mov	r0, r3
 8001248:	f000 fc6a 	bl	8001b20 <ReadButton>
				 if(button > 12)
 800124c:	f897 3402 	ldrb.w	r3, [r7, #1026]	; 0x402
 8001250:	2b0c      	cmp	r3, #12
 8001252:	d902      	bls.n	800125a <buttonPressed+0x10e>
					 button=0;
 8001254:	2300      	movs	r3, #0
 8001256:	f887 3402 	strb.w	r3, [r7, #1026]	; 0x402
			 while(button == 0)
 800125a:	f897 3402 	ldrb.w	r3, [r7, #1026]	; 0x402
 800125e:	2b00      	cmp	r3, #0
 8001260:	d0e2      	beq.n	8001228 <buttonPressed+0xdc>
			 berekening = ((device-1) * 12) + button-1 ;
 8001262:	f897 3403 	ldrb.w	r3, [r7, #1027]	; 0x403
 8001266:	461a      	mov	r2, r3
 8001268:	0052      	lsls	r2, r2, #1
 800126a:	4413      	add	r3, r2
 800126c:	009b      	lsls	r3, r3, #2
 800126e:	b2da      	uxtb	r2, r3
 8001270:	f897 3402 	ldrb.w	r3, [r7, #1026]	; 0x402
 8001274:	4413      	add	r3, r2
 8001276:	b2db      	uxtb	r3, r3
 8001278:	3b0d      	subs	r3, #13
 800127a:	b2db      	uxtb	r3, r3
 800127c:	f887 33fa 	strb.w	r3, [r7, #1018]	; 0x3fa
			 ColorToSelectedbutton(&button, 0x07E0);
 8001280:	f207 4302 	addw	r3, r7, #1026	; 0x402
 8001284:	f44f 61fc 	mov.w	r1, #2016	; 0x7e0
 8001288:	4618      	mov	r0, r3
 800128a:	f000 f8bf 	bl	800140c <ColorToSelectedbutton>
			 IR_Read();
 800128e:	f000 fa4d 	bl	800172c <IR_Read>
			 uint8_t nosignal = 0; //In het begin gaan we er vanuit dat er geen signaal is
 8001292:	2300      	movs	r3, #0
 8001294:	f887 33f9 	strb.w	r3, [r7, #1017]	; 0x3f9
			 uint8_t lengte_signaal_gevonden = 0; //In het begin gaan we er vanuit dat er nog geen lengte van het signaal gevonden is
 8001298:	2300      	movs	r3, #0
 800129a:	f887 33f8 	strb.w	r3, [r7, #1016]	; 0x3f8
			 while(nosignal != 2)
 800129e:	e008      	b.n	80012b2 <buttonPressed+0x166>
			 IR_UNDERSTAND(&berekening, &nosignal, &lengte_signaal_gevonden);
 80012a0:	f507 727e 	add.w	r2, r7, #1016	; 0x3f8
 80012a4:	f207 31f9 	addw	r1, r7, #1017	; 0x3f9
 80012a8:	f207 33fa 	addw	r3, r7, #1018	; 0x3fa
 80012ac:	4618      	mov	r0, r3
 80012ae:	f000 fa49 	bl	8001744 <IR_UNDERSTAND>
			 while(nosignal != 2)
 80012b2:	f897 33f9 	ldrb.w	r3, [r7, #1017]	; 0x3f9
 80012b6:	2b02      	cmp	r3, #2
 80012b8:	d1f2      	bne.n	80012a0 <buttonPressed+0x154>
			 IR_READ_flag = 0;
 80012ba:	4b4f      	ldr	r3, [pc, #316]	; (80013f8 <buttonPressed+0x2ac>)
 80012bc:	2200      	movs	r2, #0
 80012be:	701a      	strb	r2, [r3, #0]
			 WriteToGeheugen(&device,&button);
 80012c0:	f207 4202 	addw	r2, r7, #1026	; 0x402
 80012c4:	f207 4303 	addw	r3, r7, #1027	; 0x403
 80012c8:	4611      	mov	r1, r2
 80012ca:	4618      	mov	r0, r3
 80012cc:	f7ff f9ce 	bl	800066c <WriteToGeheugen>
			 DevicePressed(&device);
 80012d0:	f207 4303 	addw	r3, r7, #1027	; 0x403
 80012d4:	4618      	mov	r0, r3
 80012d6:	f7ff fdfd 	bl	8000ed4 <DevicePressed>
			 break;
 80012da:	e085      	b.n	80013e8 <buttonPressed+0x29c>
			 button = 0;
 80012dc:	2300      	movs	r3, #0
 80012de:	f887 3402 	strb.w	r3, [r7, #1026]	; 0x402
			 X_waarde = 160; Y_waarde = 363;
 80012e2:	23a0      	movs	r3, #160	; 0xa0
 80012e4:	f8a7 33fe 	strh.w	r3, [r7, #1022]	; 0x3fe
 80012e8:	f240 136b 	movw	r3, #363	; 0x16b
 80012ec:	f8a7 33fc 	strh.w	r3, [r7, #1020]	; 0x3fc
			 while(button == 0)
 80012f0:	e018      	b.n	8001324 <buttonPressed+0x1d8>
				 Touch(&aanraak, &X_waarde, &Y_waarde);
 80012f2:	f507 727f 	add.w	r2, r7, #1020	; 0x3fc
 80012f6:	f207 31fe 	addw	r1, r7, #1022	; 0x3fe
 80012fa:	f207 4301 	addw	r3, r7, #1025	; 0x401
 80012fe:	4618      	mov	r0, r3
 8001300:	f000 fb32 	bl	8001968 <Touch>
				 ReadButton(&button, &X_waarde, &Y_waarde);
 8001304:	f507 727f 	add.w	r2, r7, #1020	; 0x3fc
 8001308:	f207 31fe 	addw	r1, r7, #1022	; 0x3fe
 800130c:	f207 4302 	addw	r3, r7, #1026	; 0x402
 8001310:	4618      	mov	r0, r3
 8001312:	f000 fc05 	bl	8001b20 <ReadButton>
				if(button > 12)
 8001316:	f897 3402 	ldrb.w	r3, [r7, #1026]	; 0x402
 800131a:	2b0c      	cmp	r3, #12
 800131c:	d902      	bls.n	8001324 <buttonPressed+0x1d8>
					button=0;
 800131e:	2300      	movs	r3, #0
 8001320:	f887 3402 	strb.w	r3, [r7, #1026]	; 0x402
			 while(button == 0)
 8001324:	f897 3402 	ldrb.w	r3, [r7, #1026]	; 0x402
 8001328:	2b00      	cmp	r3, #0
 800132a:	d0e2      	beq.n	80012f2 <buttonPressed+0x1a6>
			 	 ColorToSelectedbutton(&button, 0xF800);
 800132c:	f207 4302 	addw	r3, r7, #1026	; 0x402
 8001330:	f44f 4178 	mov.w	r1, #63488	; 0xf800
 8001334:	4618      	mov	r0, r3
 8001336:	f000 f869 	bl	800140c <ColorToSelectedbutton>
			 	 printf("button %d , duw op een knop van de andere afstandsbediening, die je wilt instellen\r\n", button);
 800133a:	f897 3402 	ldrb.w	r3, [r7, #1026]	; 0x402
 800133e:	4619      	mov	r1, r3
 8001340:	482c      	ldr	r0, [pc, #176]	; (80013f4 <buttonPressed+0x2a8>)
 8001342:	f006 f80f 	bl	8007364 <iprintf>
			 	 IR_Read();
 8001346:	f000 f9f1 	bl	800172c <IR_Read>
			 break;
 800134a:	e04d      	b.n	80013e8 <buttonPressed+0x29c>
	 }
	 else
	 {
		 //Heeft ingeduwde knop tijdswaarden? Ja dan is controle = 1
		 uint16_t tijd_geheugen[500];
		 TakefromGeheugen(&device, &button, &tijd_geheugen, &controle);
 800134c:	f207 33fb 	addw	r3, r7, #1019	; 0x3fb
 8001350:	f107 0210 	add.w	r2, r7, #16
 8001354:	f207 4102 	addw	r1, r7, #1026	; 0x402
 8001358:	f207 4003 	addw	r0, r7, #1027	; 0x403
 800135c:	f7ff f9da 	bl	8000714 <TakefromGeheugen>
		 if(controle == 0)
 8001360:	f897 33fb 	ldrb.w	r3, [r7, #1019]	; 0x3fb
 8001364:	2b00      	cmp	r3, #0
 8001366:	d103      	bne.n	8001370 <buttonPressed+0x224>
		 {
			 printf("knop is niet ingesteld\r\n");
 8001368:	4824      	ldr	r0, [pc, #144]	; (80013fc <buttonPressed+0x2b0>)
 800136a:	f006 f881 	bl	8007470 <puts>

		 }


	 }
}
 800136e:	e03b      	b.n	80013e8 <buttonPressed+0x29c>
			 	 	 uint16_t lensignaal = lengte_signaal[berekening];
 8001370:	f897 33fa 	ldrb.w	r3, [r7, #1018]	; 0x3fa
 8001374:	461a      	mov	r2, r3
 8001376:	4b22      	ldr	r3, [pc, #136]	; (8001400 <buttonPressed+0x2b4>)
 8001378:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800137c:	f8a7 3404 	strh.w	r3, [r7, #1028]	; 0x404
			 	 	 printf("berekening is %d lengte is %d\r\n", berekening, lensignaal);
 8001380:	f897 33fa 	ldrb.w	r3, [r7, #1018]	; 0x3fa
 8001384:	4619      	mov	r1, r3
 8001386:	f8b7 3404 	ldrh.w	r3, [r7, #1028]	; 0x404
 800138a:	461a      	mov	r2, r3
 800138c:	481d      	ldr	r0, [pc, #116]	; (8001404 <buttonPressed+0x2b8>)
 800138e:	f005 ffe9 	bl	8007364 <iprintf>
					 for(uint16_t i = 0; i <= lengte_signaal[berekening]; i ++)
 8001392:	2300      	movs	r3, #0
 8001394:	f8a7 3406 	strh.w	r3, [r7, #1030]	; 0x406
 8001398:	e013      	b.n	80013c2 <buttonPressed+0x276>
					 printf("ik werk %d  controle= %d\r\n ", tijd_geheugen[i], controle);
 800139a:	f8b7 2406 	ldrh.w	r2, [r7, #1030]	; 0x406
 800139e:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 80013a2:	f5a3 737e 	sub.w	r3, r3, #1016	; 0x3f8
 80013a6:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80013aa:	4619      	mov	r1, r3
 80013ac:	f897 33fb 	ldrb.w	r3, [r7, #1019]	; 0x3fb
 80013b0:	461a      	mov	r2, r3
 80013b2:	4815      	ldr	r0, [pc, #84]	; (8001408 <buttonPressed+0x2bc>)
 80013b4:	f005 ffd6 	bl	8007364 <iprintf>
					 for(uint16_t i = 0; i <= lengte_signaal[berekening]; i ++)
 80013b8:	f8b7 3406 	ldrh.w	r3, [r7, #1030]	; 0x406
 80013bc:	3301      	adds	r3, #1
 80013be:	f8a7 3406 	strh.w	r3, [r7, #1030]	; 0x406
 80013c2:	f897 33fa 	ldrb.w	r3, [r7, #1018]	; 0x3fa
 80013c6:	461a      	mov	r2, r3
 80013c8:	4b0d      	ldr	r3, [pc, #52]	; (8001400 <buttonPressed+0x2b4>)
 80013ca:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80013ce:	f8b7 2406 	ldrh.w	r2, [r7, #1030]	; 0x406
 80013d2:	429a      	cmp	r2, r3
 80013d4:	d9e1      	bls.n	800139a <buttonPressed+0x24e>
					 IR_sent(&tijd_geheugen, lensignaal);
 80013d6:	f8b7 2404 	ldrh.w	r2, [r7, #1028]	; 0x404
 80013da:	f107 0310 	add.w	r3, r7, #16
 80013de:	4611      	mov	r1, r2
 80013e0:	4618      	mov	r0, r3
 80013e2:	f000 fa39 	bl	8001858 <IR_sent>
}
 80013e6:	e7ff      	b.n	80013e8 <buttonPressed+0x29c>
 80013e8:	bf00      	nop
 80013ea:	f207 470c 	addw	r7, r7, #1036	; 0x40c
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd90      	pop	{r4, r7, pc}
 80013f2:	bf00      	nop
 80013f4:	08008684 	.word	0x08008684
 80013f8:	20004f20 	.word	0x20004f20
 80013fc:	080086dc 	.word	0x080086dc
 8001400:	20004e30 	.word	0x20004e30
 8001404:	080086f4 	.word	0x080086f4
 8001408:	08008714 	.word	0x08008714

0800140c <ColorToSelectedbutton>:
void ColorToSelectedbutton(uint8_t *button, uint16_t color)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b088      	sub	sp, #32
 8001410:	af04      	add	r7, sp, #16
 8001412:	6078      	str	r0, [r7, #4]
 8001414:	460b      	mov	r3, r1
 8001416:	807b      	strh	r3, [r7, #2]
	uint8_t knop = *button;
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	781b      	ldrb	r3, [r3, #0]
 800141c:	73fb      	strb	r3, [r7, #15]
	switch(knop)
 800141e:	7bfb      	ldrb	r3, [r7, #15]
 8001420:	3b01      	subs	r3, #1
 8001422:	2b0b      	cmp	r3, #11
 8001424:	f200 80bd 	bhi.w	80015a2 <ColorToSelectedbutton+0x196>
 8001428:	a201      	add	r2, pc, #4	; (adr r2, 8001430 <ColorToSelectedbutton+0x24>)
 800142a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800142e:	bf00      	nop
 8001430:	08001461 	.word	0x08001461
 8001434:	0800147b 	.word	0x0800147b
 8001438:	08001495 	.word	0x08001495
 800143c:	080014af 	.word	0x080014af
 8001440:	080014c9 	.word	0x080014c9
 8001444:	080014e3 	.word	0x080014e3
 8001448:	080014fd 	.word	0x080014fd
 800144c:	08001517 	.word	0x08001517
 8001450:	08001533 	.word	0x08001533
 8001454:	0800154f 	.word	0x0800154f
 8001458:	0800156b 	.word	0x0800156b
 800145c:	08001587 	.word	0x08001587
			{
			case 1:
				//Power
				DrawRectangle(23, 50, 75, 75, ILI9488_BLACK, color, 5);
 8001460:	2305      	movs	r3, #5
 8001462:	9302      	str	r3, [sp, #8]
 8001464:	887b      	ldrh	r3, [r7, #2]
 8001466:	9301      	str	r3, [sp, #4]
 8001468:	2300      	movs	r3, #0
 800146a:	9300      	str	r3, [sp, #0]
 800146c:	234b      	movs	r3, #75	; 0x4b
 800146e:	224b      	movs	r2, #75	; 0x4b
 8001470:	2132      	movs	r1, #50	; 0x32
 8001472:	2017      	movs	r0, #23
 8001474:	f7ff fbdf 	bl	8000c36 <DrawRectangle>
				break;
 8001478:	e094      	b.n	80015a4 <ColorToSelectedbutton+0x198>
			case 2:
				//Src
				DrawRectangle(219, 50, 75, 75, ILI9488_BLACK, color, 5);
 800147a:	2305      	movs	r3, #5
 800147c:	9302      	str	r3, [sp, #8]
 800147e:	887b      	ldrh	r3, [r7, #2]
 8001480:	9301      	str	r3, [sp, #4]
 8001482:	2300      	movs	r3, #0
 8001484:	9300      	str	r3, [sp, #0]
 8001486:	234b      	movs	r3, #75	; 0x4b
 8001488:	224b      	movs	r2, #75	; 0x4b
 800148a:	2132      	movs	r1, #50	; 0x32
 800148c:	20db      	movs	r0, #219	; 0xdb
 800148e:	f7ff fbd2 	bl	8000c36 <DrawRectangle>
				break;
 8001492:	e087      	b.n	80015a4 <ColorToSelectedbutton+0x198>
			case 3:
				//^
				DrawRectangle(121, 80, 75, 75, ILI9488_BLACK, color, 5);
 8001494:	2305      	movs	r3, #5
 8001496:	9302      	str	r3, [sp, #8]
 8001498:	887b      	ldrh	r3, [r7, #2]
 800149a:	9301      	str	r3, [sp, #4]
 800149c:	2300      	movs	r3, #0
 800149e:	9300      	str	r3, [sp, #0]
 80014a0:	234b      	movs	r3, #75	; 0x4b
 80014a2:	224b      	movs	r2, #75	; 0x4b
 80014a4:	2150      	movs	r1, #80	; 0x50
 80014a6:	2079      	movs	r0, #121	; 0x79
 80014a8:	f7ff fbc5 	bl	8000c36 <DrawRectangle>
				break;
 80014ac:	e07a      	b.n	80015a4 <ColorToSelectedbutton+0x198>
			case 4:
				//<
				DrawRectangle(23, 165, 75, 75, ILI9488_BLACK, color, 5);
 80014ae:	2305      	movs	r3, #5
 80014b0:	9302      	str	r3, [sp, #8]
 80014b2:	887b      	ldrh	r3, [r7, #2]
 80014b4:	9301      	str	r3, [sp, #4]
 80014b6:	2300      	movs	r3, #0
 80014b8:	9300      	str	r3, [sp, #0]
 80014ba:	234b      	movs	r3, #75	; 0x4b
 80014bc:	224b      	movs	r2, #75	; 0x4b
 80014be:	21a5      	movs	r1, #165	; 0xa5
 80014c0:	2017      	movs	r0, #23
 80014c2:	f7ff fbb8 	bl	8000c36 <DrawRectangle>
				break;
 80014c6:	e06d      	b.n	80015a4 <ColorToSelectedbutton+0x198>
			case 5:
				//OK
				DrawRectangle(121, 165, 75, 75, ILI9488_BLACK, color, 5);
 80014c8:	2305      	movs	r3, #5
 80014ca:	9302      	str	r3, [sp, #8]
 80014cc:	887b      	ldrh	r3, [r7, #2]
 80014ce:	9301      	str	r3, [sp, #4]
 80014d0:	2300      	movs	r3, #0
 80014d2:	9300      	str	r3, [sp, #0]
 80014d4:	234b      	movs	r3, #75	; 0x4b
 80014d6:	224b      	movs	r2, #75	; 0x4b
 80014d8:	21a5      	movs	r1, #165	; 0xa5
 80014da:	2079      	movs	r0, #121	; 0x79
 80014dc:	f7ff fbab 	bl	8000c36 <DrawRectangle>
				break;
 80014e0:	e060      	b.n	80015a4 <ColorToSelectedbutton+0x198>
			case 6:
				//>
				DrawRectangle(219, 165, 75, 75, ILI9488_BLACK, color, 5);
 80014e2:	2305      	movs	r3, #5
 80014e4:	9302      	str	r3, [sp, #8]
 80014e6:	887b      	ldrh	r3, [r7, #2]
 80014e8:	9301      	str	r3, [sp, #4]
 80014ea:	2300      	movs	r3, #0
 80014ec:	9300      	str	r3, [sp, #0]
 80014ee:	234b      	movs	r3, #75	; 0x4b
 80014f0:	224b      	movs	r2, #75	; 0x4b
 80014f2:	21a5      	movs	r1, #165	; 0xa5
 80014f4:	20db      	movs	r0, #219	; 0xdb
 80014f6:	f7ff fb9e 	bl	8000c36 <DrawRectangle>
				break;
 80014fa:	e053      	b.n	80015a4 <ColorToSelectedbutton+0x198>
			case 7:
				//V
				DrawRectangle(121, 250, 75, 75, ILI9488_BLACK, color, 5);
 80014fc:	2305      	movs	r3, #5
 80014fe:	9302      	str	r3, [sp, #8]
 8001500:	887b      	ldrh	r3, [r7, #2]
 8001502:	9301      	str	r3, [sp, #4]
 8001504:	2300      	movs	r3, #0
 8001506:	9300      	str	r3, [sp, #0]
 8001508:	234b      	movs	r3, #75	; 0x4b
 800150a:	224b      	movs	r2, #75	; 0x4b
 800150c:	21fa      	movs	r1, #250	; 0xfa
 800150e:	2079      	movs	r0, #121	; 0x79
 8001510:	f7ff fb91 	bl	8000c36 <DrawRectangle>
				break;
 8001514:	e046      	b.n	80015a4 <ColorToSelectedbutton+0x198>
			case 8:
				//volume up
					DrawRectangle(23, 298, 75, 75, ILI9488_BLACK, color, 5);
 8001516:	2305      	movs	r3, #5
 8001518:	9302      	str	r3, [sp, #8]
 800151a:	887b      	ldrh	r3, [r7, #2]
 800151c:	9301      	str	r3, [sp, #4]
 800151e:	2300      	movs	r3, #0
 8001520:	9300      	str	r3, [sp, #0]
 8001522:	234b      	movs	r3, #75	; 0x4b
 8001524:	224b      	movs	r2, #75	; 0x4b
 8001526:	f44f 7195 	mov.w	r1, #298	; 0x12a
 800152a:	2017      	movs	r0, #23
 800152c:	f7ff fb83 	bl	8000c36 <DrawRectangle>
				break;
 8001530:	e038      	b.n	80015a4 <ColorToSelectedbutton+0x198>
			case 9:
				//volume down
					DrawRectangle(23, 393, 75, 75, ILI9488_BLACK, color, 5);
 8001532:	2305      	movs	r3, #5
 8001534:	9302      	str	r3, [sp, #8]
 8001536:	887b      	ldrh	r3, [r7, #2]
 8001538:	9301      	str	r3, [sp, #4]
 800153a:	2300      	movs	r3, #0
 800153c:	9300      	str	r3, [sp, #0]
 800153e:	234b      	movs	r3, #75	; 0x4b
 8001540:	224b      	movs	r2, #75	; 0x4b
 8001542:	f240 1189 	movw	r1, #393	; 0x189
 8001546:	2017      	movs	r0, #23
 8001548:	f7ff fb75 	bl	8000c36 <DrawRectangle>
				break;
 800154c:	e02a      	b.n	80015a4 <ColorToSelectedbutton+0x198>
			case 10:
				//mute
					DrawRectangle(121, 393, 75, 75, ILI9488_BLACK, color, 5);
 800154e:	2305      	movs	r3, #5
 8001550:	9302      	str	r3, [sp, #8]
 8001552:	887b      	ldrh	r3, [r7, #2]
 8001554:	9301      	str	r3, [sp, #4]
 8001556:	2300      	movs	r3, #0
 8001558:	9300      	str	r3, [sp, #0]
 800155a:	234b      	movs	r3, #75	; 0x4b
 800155c:	224b      	movs	r2, #75	; 0x4b
 800155e:	f240 1189 	movw	r1, #393	; 0x189
 8001562:	2079      	movs	r0, #121	; 0x79
 8001564:	f7ff fb67 	bl	8000c36 <DrawRectangle>
				break;
 8001568:	e01c      	b.n	80015a4 <ColorToSelectedbutton+0x198>
			case 11:
				//channel up
					DrawRectangle(219, 298, 75, 75, ILI9488_BLACK, color, 5);
 800156a:	2305      	movs	r3, #5
 800156c:	9302      	str	r3, [sp, #8]
 800156e:	887b      	ldrh	r3, [r7, #2]
 8001570:	9301      	str	r3, [sp, #4]
 8001572:	2300      	movs	r3, #0
 8001574:	9300      	str	r3, [sp, #0]
 8001576:	234b      	movs	r3, #75	; 0x4b
 8001578:	224b      	movs	r2, #75	; 0x4b
 800157a:	f44f 7195 	mov.w	r1, #298	; 0x12a
 800157e:	20db      	movs	r0, #219	; 0xdb
 8001580:	f7ff fb59 	bl	8000c36 <DrawRectangle>
				break;
 8001584:	e00e      	b.n	80015a4 <ColorToSelectedbutton+0x198>
			case 12:
				//channel down
					DrawRectangle(219, 393, 75, 75, ILI9488_BLACK, color, 5);
 8001586:	2305      	movs	r3, #5
 8001588:	9302      	str	r3, [sp, #8]
 800158a:	887b      	ldrh	r3, [r7, #2]
 800158c:	9301      	str	r3, [sp, #4]
 800158e:	2300      	movs	r3, #0
 8001590:	9300      	str	r3, [sp, #0]
 8001592:	234b      	movs	r3, #75	; 0x4b
 8001594:	224b      	movs	r2, #75	; 0x4b
 8001596:	f240 1189 	movw	r1, #393	; 0x189
 800159a:	20db      	movs	r0, #219	; 0xdb
 800159c:	f7ff fb4b 	bl	8000c36 <DrawRectangle>
				break;
 80015a0:	e000      	b.n	80015a4 <ColorToSelectedbutton+0x198>
			default:
				break;
 80015a2:	bf00      	nop
			}
}
 80015a4:	bf00      	nop
 80015a6:	3710      	adds	r7, #16
 80015a8:	46bd      	mov	sp, r7
 80015aa:	bd80      	pop	{r7, pc}

080015ac <mainscreen>:
void mainscreen()
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b084      	sub	sp, #16
 80015b0:	af04      	add	r7, sp, #16
	if(UartScreen == 1)
 80015b2:	4b28      	ldr	r3, [pc, #160]	; (8001654 <mainscreen+0xa8>)
 80015b4:	781b      	ldrb	r3, [r3, #0]
 80015b6:	2b01      	cmp	r3, #1
 80015b8:	d102      	bne.n	80015c0 <mainscreen+0x14>
		{
		printf("Even geduld...\r\n");
 80015ba:	4827      	ldr	r0, [pc, #156]	; (8001658 <mainscreen+0xac>)
 80015bc:	f005 ff58 	bl	8007470 <puts>
		}
	fillRect(0, 0, 320, 480, 0x0000);
 80015c0:	2300      	movs	r3, #0
 80015c2:	9300      	str	r3, [sp, #0]
 80015c4:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80015c8:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80015cc:	2100      	movs	r1, #0
 80015ce:	2000      	movs	r0, #0
 80015d0:	f7ff fc18 	bl	8000e04 <fillRect>
	//DrawImage(0, 0, POWERBUTTON_DATA_X_PIXEL, POWERBUTTON_DATA_Y_PIXEL, POWERBUTTON_DATA);
	//DrawRectangle(x, y, h, w, color, contentcolor, border)
	DrawRectangle(0, 0, 40, 79, ILI9488_BLUE, ILI9488_BLUE, 0);
 80015d4:	2300      	movs	r3, #0
 80015d6:	9302      	str	r3, [sp, #8]
 80015d8:	231f      	movs	r3, #31
 80015da:	9301      	str	r3, [sp, #4]
 80015dc:	231f      	movs	r3, #31
 80015de:	9300      	str	r3, [sp, #0]
 80015e0:	234f      	movs	r3, #79	; 0x4f
 80015e2:	2228      	movs	r2, #40	; 0x28
 80015e4:	2100      	movs	r1, #0
 80015e6:	2000      	movs	r0, #0
 80015e8:	f7ff fb25 	bl	8000c36 <DrawRectangle>
	DrawRectangle(80, 0, 40, 79, ILI9488_YELLOW, ILI9488_YELLOW, 0);
 80015ec:	2300      	movs	r3, #0
 80015ee:	9302      	str	r3, [sp, #8]
 80015f0:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80015f4:	9301      	str	r3, [sp, #4]
 80015f6:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80015fa:	9300      	str	r3, [sp, #0]
 80015fc:	234f      	movs	r3, #79	; 0x4f
 80015fe:	2228      	movs	r2, #40	; 0x28
 8001600:	2100      	movs	r1, #0
 8001602:	2050      	movs	r0, #80	; 0x50
 8001604:	f7ff fb17 	bl	8000c36 <DrawRectangle>
	DrawRectangle(160, 0, 40, 79, ILI9488_GREEN, ILI9488_GREEN, 0);
 8001608:	2300      	movs	r3, #0
 800160a:	9302      	str	r3, [sp, #8]
 800160c:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8001610:	9301      	str	r3, [sp, #4]
 8001612:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8001616:	9300      	str	r3, [sp, #0]
 8001618:	234f      	movs	r3, #79	; 0x4f
 800161a:	2228      	movs	r2, #40	; 0x28
 800161c:	2100      	movs	r1, #0
 800161e:	20a0      	movs	r0, #160	; 0xa0
 8001620:	f7ff fb09 	bl	8000c36 <DrawRectangle>
	DrawRectangle(240, 0, 40, 79, ILI9488_WHITE, ILI9488_WHITE, 0);
 8001624:	2300      	movs	r3, #0
 8001626:	9302      	str	r3, [sp, #8]
 8001628:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800162c:	9301      	str	r3, [sp, #4]
 800162e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001632:	9300      	str	r3, [sp, #0]
 8001634:	234f      	movs	r3, #79	; 0x4f
 8001636:	2228      	movs	r2, #40	; 0x28
 8001638:	2100      	movs	r1, #0
 800163a:	20f0      	movs	r0, #240	; 0xf0
 800163c:	f7ff fafb 	bl	8000c36 <DrawRectangle>

	if(UartScreen == 1)
 8001640:	4b04      	ldr	r3, [pc, #16]	; (8001654 <mainscreen+0xa8>)
 8001642:	781b      	ldrb	r3, [r3, #0]
 8001644:	2b01      	cmp	r3, #1
 8001646:	d102      	bne.n	800164e <mainscreen+0xa2>
	{
	printf("MainScreen ingeladen\r\n");
 8001648:	4804      	ldr	r0, [pc, #16]	; (800165c <mainscreen+0xb0>)
 800164a:	f005 ff11 	bl	8007470 <puts>
	}
}
 800164e:	bf00      	nop
 8001650:	46bd      	mov	sp, r7
 8001652:	bd80      	pop	{r7, pc}
 8001654:	20000000 	.word	0x20000000
 8001658:	08008730 	.word	0x08008730
 800165c:	08008740 	.word	0x08008740

08001660 <cleartijd>:
uint8_t commando = 0;



void cleartijd()
{
 8001660:	b480      	push	{r7}
 8001662:	b083      	sub	sp, #12
 8001664:	af00      	add	r7, sp, #0
	for(uint16_t i = 0; i < 500; i++)
 8001666:	2300      	movs	r3, #0
 8001668:	80fb      	strh	r3, [r7, #6]
 800166a:	e007      	b.n	800167c <cleartijd+0x1c>
	{
		tijd[i]=0;
 800166c:	88fb      	ldrh	r3, [r7, #6]
 800166e:	4a09      	ldr	r2, [pc, #36]	; (8001694 <cleartijd+0x34>)
 8001670:	2100      	movs	r1, #0
 8001672:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(uint16_t i = 0; i < 500; i++)
 8001676:	88fb      	ldrh	r3, [r7, #6]
 8001678:	3301      	adds	r3, #1
 800167a:	80fb      	strh	r3, [r7, #6]
 800167c:	88fb      	ldrh	r3, [r7, #6]
 800167e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001682:	d3f3      	bcc.n	800166c <cleartijd+0xc>
	}
}
 8001684:	bf00      	nop
 8001686:	bf00      	nop
 8001688:	370c      	adds	r7, #12
 800168a:	46bd      	mov	sp, r7
 800168c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001690:	4770      	bx	lr
 8001692:	bf00      	nop
 8001694:	20004f24 	.word	0x20004f24

08001698 <Interrupt_flank>:
void Interrupt_flank()
{
 8001698:	b580      	push	{r7, lr}
 800169a:	af00      	add	r7, sp, #0

	if(IR_READ_flag == 1)
 800169c:	4b13      	ldr	r3, [pc, #76]	; (80016ec <Interrupt_flank+0x54>)
 800169e:	781b      	ldrb	r3, [r3, #0]
 80016a0:	2b01      	cmp	r3, #1
 80016a2:	d11e      	bne.n	80016e2 <Interrupt_flank+0x4a>
	{

		HAL_TIM_Base_Stop(&TIM_1us); //timer stoppen
 80016a4:	4812      	ldr	r0, [pc, #72]	; (80016f0 <Interrupt_flank+0x58>)
 80016a6:	f004 f933 	bl	8005910 <HAL_TIM_Base_Stop>
		//timer in het begin is steeds nul maar deze hebben we niet nodig

		tijd[pulsecounter] = TIM_1us.Instance -> CNT; //timer opslaan
 80016aa:	4b11      	ldr	r3, [pc, #68]	; (80016f0 <Interrupt_flank+0x58>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80016b0:	4b10      	ldr	r3, [pc, #64]	; (80016f4 <Interrupt_flank+0x5c>)
 80016b2:	881b      	ldrh	r3, [r3, #0]
 80016b4:	461a      	mov	r2, r3
 80016b6:	b289      	uxth	r1, r1
 80016b8:	4b0f      	ldr	r3, [pc, #60]	; (80016f8 <Interrupt_flank+0x60>)
 80016ba:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		lengte = pulsecounter;
 80016be:	4b0d      	ldr	r3, [pc, #52]	; (80016f4 <Interrupt_flank+0x5c>)
 80016c0:	881a      	ldrh	r2, [r3, #0]
 80016c2:	4b0e      	ldr	r3, [pc, #56]	; (80016fc <Interrupt_flank+0x64>)
 80016c4:	801a      	strh	r2, [r3, #0]
		pulsecounter++;
 80016c6:	4b0b      	ldr	r3, [pc, #44]	; (80016f4 <Interrupt_flank+0x5c>)
 80016c8:	881b      	ldrh	r3, [r3, #0]
 80016ca:	3301      	adds	r3, #1
 80016cc:	b29a      	uxth	r2, r3
 80016ce:	4b09      	ldr	r3, [pc, #36]	; (80016f4 <Interrupt_flank+0x5c>)
 80016d0:	801a      	strh	r2, [r3, #0]
		TIM_1us.Instance -> CNT = 0;
 80016d2:	4b07      	ldr	r3, [pc, #28]	; (80016f0 <Interrupt_flank+0x58>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	2200      	movs	r2, #0
 80016d8:	625a      	str	r2, [r3, #36]	; 0x24
		HAL_TIM_Base_Start(&TIM_1us);
 80016da:	4805      	ldr	r0, [pc, #20]	; (80016f0 <Interrupt_flank+0x58>)
 80016dc:	f004 f8a8 	bl	8005830 <HAL_TIM_Base_Start>
	else
	{
		printf("ik kan niet werken, aangezien ik uit sta\r\n");
	}

}
 80016e0:	e002      	b.n	80016e8 <Interrupt_flank+0x50>
		printf("ik kan niet werken, aangezien ik uit sta\r\n");
 80016e2:	4807      	ldr	r0, [pc, #28]	; (8001700 <Interrupt_flank+0x68>)
 80016e4:	f005 fec4 	bl	8007470 <puts>
}
 80016e8:	bf00      	nop
 80016ea:	bd80      	pop	{r7, pc}
 80016ec:	20004f20 	.word	0x20004f20
 80016f0:	200053c8 	.word	0x200053c8
 80016f4:	20004e2e 	.word	0x20004e2e
 80016f8:	20004f24 	.word	0x20004f24
 80016fc:	20004f22 	.word	0x20004f22
 8001700:	08008758 	.word	0x08008758

08001704 <IR_Carrier_ON>:
void IR_Carrier_ON()
{
 8001704:	b580      	push	{r7, lr}
 8001706:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&TIM_PWM_CARRIER, TIM_PWM_CARRIER_CHANNEL);
 8001708:	2104      	movs	r1, #4
 800170a:	4802      	ldr	r0, [pc, #8]	; (8001714 <IR_Carrier_ON+0x10>)
 800170c:	f004 f97e 	bl	8005a0c <HAL_TIM_PWM_Start>
}
 8001710:	bf00      	nop
 8001712:	bd80      	pop	{r7, pc}
 8001714:	20005414 	.word	0x20005414

08001718 <IR_Carrier_OFF>:
void IR_Carrier_OFF()
{
 8001718:	b580      	push	{r7, lr}
 800171a:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Stop(&TIM_PWM_CARRIER, TIM_PWM_CARRIER_CHANNEL);
 800171c:	2104      	movs	r1, #4
 800171e:	4802      	ldr	r0, [pc, #8]	; (8001728 <IR_Carrier_OFF+0x10>)
 8001720:	f004 fa6e 	bl	8005c00 <HAL_TIM_PWM_Stop>
}
 8001724:	bf00      	nop
 8001726:	bd80      	pop	{r7, pc}
 8001728:	20005414 	.word	0x20005414

0800172c <IR_Read>:
void IR_Read()
{
 800172c:	b480      	push	{r7}
 800172e:	af00      	add	r7, sp, #0
	IR_READ_flag = 1 ;
 8001730:	4b03      	ldr	r3, [pc, #12]	; (8001740 <IR_Read+0x14>)
 8001732:	2201      	movs	r2, #1
 8001734:	701a      	strb	r2, [r3, #0]
}
 8001736:	bf00      	nop
 8001738:	46bd      	mov	sp, r7
 800173a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173e:	4770      	bx	lr
 8001740:	20004f20 	.word	0x20004f20

08001744 <IR_UNDERSTAND>:

void IR_UNDERSTAND(uint8_t *berekening, uint8_t *geen_signaal, uint8_t *lengte_signaal_gevonden)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b086      	sub	sp, #24
 8001748:	af00      	add	r7, sp, #0
 800174a:	60f8      	str	r0, [r7, #12]
 800174c:	60b9      	str	r1, [r7, #8]
 800174e:	607a      	str	r2, [r7, #4]
	//geen_signaal in het begin op 0 zetten, geen signaal =0, wel een signaal = 1, lengte gevonden = 2
	//5 metingen test
	uint8_t measurement = 0;
 8001750:	2300      	movs	r3, #0
 8001752:	75fb      	strb	r3, [r7, #23]
	for(uint8_t five_measurements = 0; five_measurements < 5; five_measurements++)
 8001754:	2300      	movs	r3, #0
 8001756:	75bb      	strb	r3, [r7, #22]
 8001758:	e00b      	b.n	8001772 <IR_UNDERSTAND+0x2e>
	{
		if(tijd[five_measurements] == 0)
 800175a:	7dbb      	ldrb	r3, [r7, #22]
 800175c:	4a36      	ldr	r2, [pc, #216]	; (8001838 <IR_UNDERSTAND+0xf4>)
 800175e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001762:	2b00      	cmp	r3, #0
 8001764:	d102      	bne.n	800176c <IR_UNDERSTAND+0x28>
			{
				measurement++;
 8001766:	7dfb      	ldrb	r3, [r7, #23]
 8001768:	3301      	adds	r3, #1
 800176a:	75fb      	strb	r3, [r7, #23]
	for(uint8_t five_measurements = 0; five_measurements < 5; five_measurements++)
 800176c:	7dbb      	ldrb	r3, [r7, #22]
 800176e:	3301      	adds	r3, #1
 8001770:	75bb      	strb	r3, [r7, #22]
 8001772:	7dbb      	ldrb	r3, [r7, #22]
 8001774:	2b04      	cmp	r3, #4
 8001776:	d9f0      	bls.n	800175a <IR_UNDERSTAND+0x16>
			}
		}
	if(measurement == 5)
 8001778:	7dfb      	ldrb	r3, [r7, #23]
 800177a:	2b05      	cmp	r3, #5
 800177c:	d106      	bne.n	800178c <IR_UNDERSTAND+0x48>
		{
				printf("Er is niks gemeten \r\n");
 800177e:	482f      	ldr	r0, [pc, #188]	; (800183c <IR_UNDERSTAND+0xf8>)
 8001780:	f005 fe76 	bl	8007470 <puts>
				*geen_signaal = 0;
 8001784:	68bb      	ldr	r3, [r7, #8]
 8001786:	2200      	movs	r2, #0
 8001788:	701a      	strb	r2, [r3, #0]
 800178a:	e00c      	b.n	80017a6 <IR_UNDERSTAND+0x62>
		}
	else
		{
		printf("Er is iets gemeten %d \r\n", lengte_signaal[commando]);
 800178c:	4b2c      	ldr	r3, [pc, #176]	; (8001840 <IR_UNDERSTAND+0xfc>)
 800178e:	781b      	ldrb	r3, [r3, #0]
 8001790:	461a      	mov	r2, r3
 8001792:	4b2c      	ldr	r3, [pc, #176]	; (8001844 <IR_UNDERSTAND+0x100>)
 8001794:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001798:	4619      	mov	r1, r3
 800179a:	482b      	ldr	r0, [pc, #172]	; (8001848 <IR_UNDERSTAND+0x104>)
 800179c:	f005 fde2 	bl	8007364 <iprintf>
		*geen_signaal = 1;
 80017a0:	68bb      	ldr	r3, [r7, #8]
 80017a2:	2201      	movs	r2, #1
 80017a4:	701a      	strb	r2, [r3, #0]
		}
	if(*geen_signaal == 1)   //als er een signaal gevonden is
 80017a6:	68bb      	ldr	r3, [r7, #8]
 80017a8:	781b      	ldrb	r3, [r3, #0]
 80017aa:	2b01      	cmp	r3, #1
 80017ac:	d140      	bne.n	8001830 <IR_UNDERSTAND+0xec>
		{

			if(*lengte_signaal_gevonden == 0)
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	781b      	ldrb	r3, [r3, #0]
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d13c      	bne.n	8001830 <IR_UNDERSTAND+0xec>
			{

				for(uint16_t debugwaarde = 0; debugwaarde < 500 ; debugwaarde++)
 80017b6:	2300      	movs	r3, #0
 80017b8:	82bb      	strh	r3, [r7, #20]
 80017ba:	e00b      	b.n	80017d4 <IR_UNDERSTAND+0x90>
				{
				 printf("tijd[%d] = %d \r\n", debugwaarde, tijd[debugwaarde]);
 80017bc:	8ab9      	ldrh	r1, [r7, #20]
 80017be:	8abb      	ldrh	r3, [r7, #20]
 80017c0:	4a1d      	ldr	r2, [pc, #116]	; (8001838 <IR_UNDERSTAND+0xf4>)
 80017c2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80017c6:	461a      	mov	r2, r3
 80017c8:	4820      	ldr	r0, [pc, #128]	; (800184c <IR_UNDERSTAND+0x108>)
 80017ca:	f005 fdcb 	bl	8007364 <iprintf>
				for(uint16_t debugwaarde = 0; debugwaarde < 500 ; debugwaarde++)
 80017ce:	8abb      	ldrh	r3, [r7, #20]
 80017d0:	3301      	adds	r3, #1
 80017d2:	82bb      	strh	r3, [r7, #20]
 80017d4:	8abb      	ldrh	r3, [r7, #20]
 80017d6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80017da:	d3ef      	bcc.n	80017bc <IR_UNDERSTAND+0x78>
				}
				uint16_t waarde = 499;
 80017dc:	f240 13f3 	movw	r3, #499	; 0x1f3
 80017e0:	827b      	strh	r3, [r7, #18]
				while(tijd[waarde] == 0)
 80017e2:	e002      	b.n	80017ea <IR_UNDERSTAND+0xa6>
				{
				waarde--;
 80017e4:	8a7b      	ldrh	r3, [r7, #18]
 80017e6:	3b01      	subs	r3, #1
 80017e8:	827b      	strh	r3, [r7, #18]
				while(tijd[waarde] == 0)
 80017ea:	8a7b      	ldrh	r3, [r7, #18]
 80017ec:	4a12      	ldr	r2, [pc, #72]	; (8001838 <IR_UNDERSTAND+0xf4>)
 80017ee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d0f6      	beq.n	80017e4 <IR_UNDERSTAND+0xa0>
				}
				lengte_signaal[*berekening] = waarde;
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	781b      	ldrb	r3, [r3, #0]
 80017fa:	4619      	mov	r1, r3
 80017fc:	4a11      	ldr	r2, [pc, #68]	; (8001844 <IR_UNDERSTAND+0x100>)
 80017fe:	8a7b      	ldrh	r3, [r7, #18]
 8001800:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
				printf("lengte signaal = %d\r\n", lengte_signaal[*berekening]);
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	781b      	ldrb	r3, [r3, #0]
 8001808:	461a      	mov	r2, r3
 800180a:	4b0e      	ldr	r3, [pc, #56]	; (8001844 <IR_UNDERSTAND+0x100>)
 800180c:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001810:	4619      	mov	r1, r3
 8001812:	480f      	ldr	r0, [pc, #60]	; (8001850 <IR_UNDERSTAND+0x10c>)
 8001814:	f005 fda6 	bl	8007364 <iprintf>
				printf("trouwens berekening= %d\r\n", *berekening);
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	781b      	ldrb	r3, [r3, #0]
 800181c:	4619      	mov	r1, r3
 800181e:	480d      	ldr	r0, [pc, #52]	; (8001854 <IR_UNDERSTAND+0x110>)
 8001820:	f005 fda0 	bl	8007364 <iprintf>
				*lengte_signaal_gevonden = 1;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	2201      	movs	r2, #1
 8001828:	701a      	strb	r2, [r3, #0]
				*geen_signaal=2;
 800182a:	68bb      	ldr	r3, [r7, #8]
 800182c:	2202      	movs	r2, #2
 800182e:	701a      	strb	r2, [r3, #0]
			}
		}

}
 8001830:	bf00      	nop
 8001832:	3718      	adds	r7, #24
 8001834:	46bd      	mov	sp, r7
 8001836:	bd80      	pop	{r7, pc}
 8001838:	20004f24 	.word	0x20004f24
 800183c:	08008784 	.word	0x08008784
 8001840:	2000530c 	.word	0x2000530c
 8001844:	20004e30 	.word	0x20004e30
 8001848:	0800879c 	.word	0x0800879c
 800184c:	080087b8 	.word	0x080087b8
 8001850:	080087cc 	.word	0x080087cc
 8001854:	080087e4 	.word	0x080087e4

08001858 <IR_sent>:



void IR_sent(uint16_t *tijd, uint16_t lengte_sig)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b084      	sub	sp, #16
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
 8001860:	460b      	mov	r3, r1
 8001862:	807b      	strh	r3, [r7, #2]
	printf("lengte in IR_sent is %d en eerste tijdswaarden is %d\r\n", lengte_sig, tijd[0]);
 8001864:	8879      	ldrh	r1, [r7, #2]
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	881b      	ldrh	r3, [r3, #0]
 800186a:	461a      	mov	r2, r3
 800186c:	4825      	ldr	r0, [pc, #148]	; (8001904 <IR_sent+0xac>)
 800186e:	f005 fd79 	bl	8007364 <iprintf>
   IR_READ_flag = 0; //er kan niks meer ingelezen worden
 8001872:	4b25      	ldr	r3, [pc, #148]	; (8001908 <IR_sent+0xb0>)
 8001874:	2200      	movs	r2, #0
 8001876:	701a      	strb	r2, [r3, #0]
   for(uint8_t i = 0; i <= lengte_sig; i++)
 8001878:	2300      	movs	r3, #0
 800187a:	73fb      	strb	r3, [r7, #15]
 800187c:	e037      	b.n	80018ee <IR_sent+0x96>
   {

	   if((i%2)==0)
 800187e:	7bfb      	ldrb	r3, [r7, #15]
 8001880:	f003 0301 	and.w	r3, r3, #1
 8001884:	b2db      	uxtb	r3, r3
 8001886:	2b00      	cmp	r3, #0
 8001888:	d117      	bne.n	80018ba <IR_sent+0x62>
	   {
		   HAL_TIM_Base_Stop(&TIM_1us);
 800188a:	4820      	ldr	r0, [pc, #128]	; (800190c <IR_sent+0xb4>)
 800188c:	f004 f840 	bl	8005910 <HAL_TIM_Base_Stop>
		   TIM_1us.Instance->CNT = 0;
 8001890:	4b1e      	ldr	r3, [pc, #120]	; (800190c <IR_sent+0xb4>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	2200      	movs	r2, #0
 8001896:	625a      	str	r2, [r3, #36]	; 0x24
		   HAL_TIM_Base_Start(&TIM_1us);
 8001898:	481c      	ldr	r0, [pc, #112]	; (800190c <IR_sent+0xb4>)
 800189a:	f003 ffc9 	bl	8005830 <HAL_TIM_Base_Start>
		   IR_Carrier_ON();
 800189e:	f7ff ff31 	bl	8001704 <IR_Carrier_ON>
		   while((TIM_1us.Instance->CNT) <= tijd[i]){}
 80018a2:	bf00      	nop
 80018a4:	4b19      	ldr	r3, [pc, #100]	; (800190c <IR_sent+0xb4>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018aa:	7bfa      	ldrb	r2, [r7, #15]
 80018ac:	0052      	lsls	r2, r2, #1
 80018ae:	6879      	ldr	r1, [r7, #4]
 80018b0:	440a      	add	r2, r1
 80018b2:	8812      	ldrh	r2, [r2, #0]
 80018b4:	4293      	cmp	r3, r2
 80018b6:	d9f5      	bls.n	80018a4 <IR_sent+0x4c>
 80018b8:	e016      	b.n	80018e8 <IR_sent+0x90>
	   }
	   else
	   {
		   HAL_TIM_Base_Stop(&TIM_1us);
 80018ba:	4814      	ldr	r0, [pc, #80]	; (800190c <IR_sent+0xb4>)
 80018bc:	f004 f828 	bl	8005910 <HAL_TIM_Base_Stop>
		   TIM_1us.Instance->CNT = 0;
 80018c0:	4b12      	ldr	r3, [pc, #72]	; (800190c <IR_sent+0xb4>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	2200      	movs	r2, #0
 80018c6:	625a      	str	r2, [r3, #36]	; 0x24
		   HAL_TIM_Base_Start(&TIM_1us);
 80018c8:	4810      	ldr	r0, [pc, #64]	; (800190c <IR_sent+0xb4>)
 80018ca:	f003 ffb1 	bl	8005830 <HAL_TIM_Base_Start>
		   IR_Carrier_OFF();
 80018ce:	f7ff ff23 	bl	8001718 <IR_Carrier_OFF>
		   while((TIM_1us.Instance->CNT) <= tijd[i]){}
 80018d2:	bf00      	nop
 80018d4:	4b0d      	ldr	r3, [pc, #52]	; (800190c <IR_sent+0xb4>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018da:	7bfa      	ldrb	r2, [r7, #15]
 80018dc:	0052      	lsls	r2, r2, #1
 80018de:	6879      	ldr	r1, [r7, #4]
 80018e0:	440a      	add	r2, r1
 80018e2:	8812      	ldrh	r2, [r2, #0]
 80018e4:	4293      	cmp	r3, r2
 80018e6:	d9f5      	bls.n	80018d4 <IR_sent+0x7c>
   for(uint8_t i = 0; i <= lengte_sig; i++)
 80018e8:	7bfb      	ldrb	r3, [r7, #15]
 80018ea:	3301      	adds	r3, #1
 80018ec:	73fb      	strb	r3, [r7, #15]
 80018ee:	7bfb      	ldrb	r3, [r7, #15]
 80018f0:	b29b      	uxth	r3, r3
 80018f2:	887a      	ldrh	r2, [r7, #2]
 80018f4:	429a      	cmp	r2, r3
 80018f6:	d2c2      	bcs.n	800187e <IR_sent+0x26>

	   }
   }
   IR_Carrier_OFF();
 80018f8:	f7ff ff0e 	bl	8001718 <IR_Carrier_OFF>
}
 80018fc:	bf00      	nop
 80018fe:	3710      	adds	r7, #16
 8001900:	46bd      	mov	sp, r7
 8001902:	bd80      	pop	{r7, pc}
 8001904:	08008800 	.word	0x08008800
 8001908:	20004f20 	.word	0x20004f20
 800190c:	200053c8 	.word	0x200053c8

08001910 <InitTouch>:
#define Tim_Backlight htim10



void InitTouch()
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b088      	sub	sp, #32
 8001914:	af02      	add	r7, sp, #8
	uint16_t device_address_write = 0xBA;
 8001916:	23ba      	movs	r3, #186	; 0xba
 8001918:	82fb      	strh	r3, [r7, #22]
	uint16_t device_address_read = 0xBB;
 800191a:	23bb      	movs	r3, #187	; 0xbb
 800191c:	82bb      	strh	r3, [r7, #20]
	uint8_t dataWrite[] = {0x81,0x40};
 800191e:	f244 0381 	movw	r3, #16513	; 0x4081
 8001922:	823b      	strh	r3, [r7, #16]
	uint8_t ontvangen[11];
	HAL_I2C_Master_Transmit(&hi2c1, device_address_write, 0, 0 , HAL_MAX_DELAY); //new
 8001924:	8af9      	ldrh	r1, [r7, #22]
 8001926:	f04f 33ff 	mov.w	r3, #4294967295
 800192a:	9300      	str	r3, [sp, #0]
 800192c:	2300      	movs	r3, #0
 800192e:	2200      	movs	r2, #0
 8001930:	480c      	ldr	r0, [pc, #48]	; (8001964 <InitTouch+0x54>)
 8001932:	f001 fb45 	bl	8002fc0 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Transmit(&hi2c1, device_address_write, dataWrite, 2 , HAL_MAX_DELAY);
 8001936:	f107 0210 	add.w	r2, r7, #16
 800193a:	8af9      	ldrh	r1, [r7, #22]
 800193c:	f04f 33ff 	mov.w	r3, #4294967295
 8001940:	9300      	str	r3, [sp, #0]
 8001942:	2302      	movs	r3, #2
 8001944:	4807      	ldr	r0, [pc, #28]	; (8001964 <InitTouch+0x54>)
 8001946:	f001 fb3b 	bl	8002fc0 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1, device_address_read, ontvangen, 11, HAL_MAX_DELAY); //
 800194a:	1d3a      	adds	r2, r7, #4
 800194c:	8ab9      	ldrh	r1, [r7, #20]
 800194e:	f04f 33ff 	mov.w	r3, #4294967295
 8001952:	9300      	str	r3, [sp, #0]
 8001954:	230b      	movs	r3, #11
 8001956:	4803      	ldr	r0, [pc, #12]	; (8001964 <InitTouch+0x54>)
 8001958:	f001 fc26 	bl	80031a8 <HAL_I2C_Master_Receive>
}
 800195c:	bf00      	nop
 800195e:	3718      	adds	r7, #24
 8001960:	46bd      	mov	sp, r7
 8001962:	bd80      	pop	{r7, pc}
 8001964:	20005310 	.word	0x20005310

08001968 <Touch>:
void Touch(uint8_t *Sensingtouch, uint16_t *X_waarde, uint16_t *Y_waarde)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b08e      	sub	sp, #56	; 0x38
 800196c:	af04      	add	r7, sp, #16
 800196e:	60f8      	str	r0, [r7, #12]
 8001970:	60b9      	str	r1, [r7, #8]
 8001972:	607a      	str	r2, [r7, #4]
	uint16_t device_address_write = 0xBA;
 8001974:	23ba      	movs	r3, #186	; 0xba
 8001976:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint16_t device_address_read = 0xBB;
 8001978:	23bb      	movs	r3, #187	; 0xbb
 800197a:	84bb      	strh	r3, [r7, #36]	; 0x24
	uint8_t nulladdress = 0x00;
 800197c:	2300      	movs	r3, #0
 800197e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23





		HAL_Delay(5);
 8001982:	2005      	movs	r0, #5
 8001984:	f000 ff6c 	bl	8002860 <HAL_Delay>
		HAL_I2C_Mem_Read(&myI2C, device_address_read, 0x814E, 2, buffer1, 1, HAL_MAX_DELAY);
 8001988:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 800198a:	f04f 33ff 	mov.w	r3, #4294967295
 800198e:	9302      	str	r3, [sp, #8]
 8001990:	2301      	movs	r3, #1
 8001992:	9301      	str	r3, [sp, #4]
 8001994:	f107 0314 	add.w	r3, r7, #20
 8001998:	9300      	str	r3, [sp, #0]
 800199a:	2302      	movs	r3, #2
 800199c:	f248 124e 	movw	r2, #33102	; 0x814e
 80019a0:	482e      	ldr	r0, [pc, #184]	; (8001a5c <Touch+0xf4>)
 80019a2:	f001 fe0b 	bl	80035bc <HAL_I2C_Mem_Read>
		if(buffer1[0] != 0x00)
 80019a6:	7d3b      	ldrb	r3, [r7, #20]
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d04d      	beq.n	8001a48 <Touch+0xe0>
		{
			*Sensingtouch = 1;
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	2201      	movs	r2, #1
 80019b0:	701a      	strb	r2, [r3, #0]
			HAL_I2C_Mem_Read(&myI2C, device_address_read, 0x814F, 2, buffer, 12, HAL_MAX_DELAY);
 80019b2:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 80019b4:	f04f 33ff 	mov.w	r3, #4294967295
 80019b8:	9302      	str	r3, [sp, #8]
 80019ba:	230c      	movs	r3, #12
 80019bc:	9301      	str	r3, [sp, #4]
 80019be:	f107 0314 	add.w	r3, r7, #20
 80019c2:	9300      	str	r3, [sp, #0]
 80019c4:	2302      	movs	r3, #2
 80019c6:	f248 124f 	movw	r2, #33103	; 0x814f
 80019ca:	4824      	ldr	r0, [pc, #144]	; (8001a5c <Touch+0xf4>)
 80019cc:	f001 fdf6 	bl	80035bc <HAL_I2C_Mem_Read>
			if(buffer[4] == 1) //als buffer[3] het midden overschrijdt, dan gaat hij van 255 terug naar 0, en wordt buffer[4] op 1 gezet.
 80019d0:	7e3b      	ldrb	r3, [r7, #24]
 80019d2:	2b01      	cmp	r3, #1
 80019d4:	d106      	bne.n	80019e4 <Touch+0x7c>
			{
				*Y_waarde = 0xFF + buffer[3];
 80019d6:	7dfb      	ldrb	r3, [r7, #23]
 80019d8:	b29b      	uxth	r3, r3
 80019da:	33ff      	adds	r3, #255	; 0xff
 80019dc:	b29a      	uxth	r2, r3
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	801a      	strh	r2, [r3, #0]
 80019e2:	e003      	b.n	80019ec <Touch+0x84>
			}
			else
			{
				*Y_waarde = buffer[3];
 80019e4:	7dfb      	ldrb	r3, [r7, #23]
 80019e6:	b29a      	uxth	r2, r3
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	801a      	strh	r2, [r3, #0]
			}
			if(buffer[2] == 1)
 80019ec:	7dbb      	ldrb	r3, [r7, #22]
 80019ee:	2b01      	cmp	r3, #1
 80019f0:	d106      	bne.n	8001a00 <Touch+0x98>
			{
				*X_waarde = 0xFF + buffer[1];
 80019f2:	7d7b      	ldrb	r3, [r7, #21]
 80019f4:	b29b      	uxth	r3, r3
 80019f6:	33ff      	adds	r3, #255	; 0xff
 80019f8:	b29a      	uxth	r2, r3
 80019fa:	68bb      	ldr	r3, [r7, #8]
 80019fc:	801a      	strh	r2, [r3, #0]
 80019fe:	e003      	b.n	8001a08 <Touch+0xa0>
			}
			else
			{
				*X_waarde = buffer[1];
 8001a00:	7d7b      	ldrb	r3, [r7, #21]
 8001a02:	b29a      	uxth	r2, r3
 8001a04:	68bb      	ldr	r3, [r7, #8]
 8001a06:	801a      	strh	r2, [r3, #0]
			}
						if(UartScreen == 1)
 8001a08:	4b15      	ldr	r3, [pc, #84]	; (8001a60 <Touch+0xf8>)
 8001a0a:	781b      	ldrb	r3, [r3, #0]
 8001a0c:	2b01      	cmp	r3, #1
 8001a0e:	d10b      	bne.n	8001a28 <Touch+0xc0>
							{
						printf("X= %d\r\n", *X_waarde);
 8001a10:	68bb      	ldr	r3, [r7, #8]
 8001a12:	881b      	ldrh	r3, [r3, #0]
 8001a14:	4619      	mov	r1, r3
 8001a16:	4813      	ldr	r0, [pc, #76]	; (8001a64 <Touch+0xfc>)
 8001a18:	f005 fca4 	bl	8007364 <iprintf>
						printf("Y= %d\r\n", *Y_waarde);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	881b      	ldrh	r3, [r3, #0]
 8001a20:	4619      	mov	r1, r3
 8001a22:	4811      	ldr	r0, [pc, #68]	; (8001a68 <Touch+0x100>)
 8001a24:	f005 fc9e 	bl	8007364 <iprintf>
							}

			HAL_I2C_Mem_Write(&myI2C, device_address_write, 0x814E, 2, &nulladdress, 1, HAL_MAX_DELAY); //de flag uitzetten
 8001a28:	8cf9      	ldrh	r1, [r7, #38]	; 0x26
 8001a2a:	f04f 33ff 	mov.w	r3, #4294967295
 8001a2e:	9302      	str	r3, [sp, #8]
 8001a30:	2301      	movs	r3, #1
 8001a32:	9301      	str	r3, [sp, #4]
 8001a34:	f107 0323 	add.w	r3, r7, #35	; 0x23
 8001a38:	9300      	str	r3, [sp, #0]
 8001a3a:	2302      	movs	r3, #2
 8001a3c:	f248 124e 	movw	r2, #33102	; 0x814e
 8001a40:	4806      	ldr	r0, [pc, #24]	; (8001a5c <Touch+0xf4>)
 8001a42:	f001 fca7 	bl	8003394 <HAL_I2C_Mem_Write>
 8001a46:	e002      	b.n	8001a4e <Touch+0xe6>
		}
		else
		{
			*Sensingtouch = 0;
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	701a      	strb	r2, [r3, #0]
		}
		HAL_Delay(100);
 8001a4e:	2064      	movs	r0, #100	; 0x64
 8001a50:	f000 ff06 	bl	8002860 <HAL_Delay>
		}
 8001a54:	bf00      	nop
 8001a56:	3728      	adds	r7, #40	; 0x28
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	bd80      	pop	{r7, pc}
 8001a5c:	20005310 	.word	0x20005310
 8001a60:	20000000 	.word	0x20000000
 8001a64:	08008838 	.word	0x08008838
 8001a68:	08008840 	.word	0x08008840

08001a6c <ReadDevice>:

void ReadDevice(uint8_t *device, uint16_t *X_w, uint16_t *Y_w)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b08a      	sub	sp, #40	; 0x28
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	60f8      	str	r0, [r7, #12]
 8001a74:	60b9      	str	r1, [r7, #8]
 8001a76:	607a      	str	r2, [r7, #4]
	uint16_t X_waarde = *X_w;
 8001a78:	68bb      	ldr	r3, [r7, #8]
 8001a7a:	881b      	ldrh	r3, [r3, #0]
 8001a7c:	84bb      	strh	r3, [r7, #36]	; 0x24
	uint16_t Y_waarde = *Y_w;
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	881b      	ldrh	r3, [r3, #0]
 8001a82:	847b      	strh	r3, [r7, #34]	; 0x22
	const uint16_t X_waarde_knoppen[] = {0,80,160,240};
 8001a84:	4a24      	ldr	r2, [pc, #144]	; (8001b18 <ReadDevice+0xac>)
 8001a86:	f107 0318 	add.w	r3, r7, #24
 8001a8a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001a8e:	e883 0003 	stmia.w	r3, {r0, r1}
	const uint16_t Y_waarde_knoppen[] = {0,40};
 8001a92:	2300      	movs	r3, #0
 8001a94:	82bb      	strh	r3, [r7, #20]
 8001a96:	2328      	movs	r3, #40	; 0x28
 8001a98:	82fb      	strh	r3, [r7, #22]
	uint8_t apparaat = 0; //if device = 0 , dan is er geen device geselecteerd
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21

		for(uint8_t i = 1; i<= 4; i++)
 8001aa0:	2301      	movs	r3, #1
 8001aa2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001aa6:	e02d      	b.n	8001b04 <ReadDevice+0x98>
		{
		if((X_waarde >= X_waarde_knoppen[i-1])&&(X_waarde <=X_waarde_knoppen[i-1]+79)&&(Y_waarde >= Y_waarde_knoppen[0])&&(Y_waarde <=Y_waarde_knoppen[1]))
 8001aa8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001aac:	3b01      	subs	r3, #1
 8001aae:	005b      	lsls	r3, r3, #1
 8001ab0:	3328      	adds	r3, #40	; 0x28
 8001ab2:	443b      	add	r3, r7
 8001ab4:	f833 3c10 	ldrh.w	r3, [r3, #-16]
 8001ab8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001aba:	429a      	cmp	r2, r3
 8001abc:	d31d      	bcc.n	8001afa <ReadDevice+0x8e>
 8001abe:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001ac0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001ac4:	3b01      	subs	r3, #1
 8001ac6:	005b      	lsls	r3, r3, #1
 8001ac8:	3328      	adds	r3, #40	; 0x28
 8001aca:	443b      	add	r3, r7
 8001acc:	f833 3c10 	ldrh.w	r3, [r3, #-16]
 8001ad0:	334f      	adds	r3, #79	; 0x4f
 8001ad2:	429a      	cmp	r2, r3
 8001ad4:	dc11      	bgt.n	8001afa <ReadDevice+0x8e>
 8001ad6:	8abb      	ldrh	r3, [r7, #20]
 8001ad8:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8001ada:	429a      	cmp	r2, r3
 8001adc:	d30d      	bcc.n	8001afa <ReadDevice+0x8e>
 8001ade:	8afb      	ldrh	r3, [r7, #22]
 8001ae0:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8001ae2:	429a      	cmp	r2, r3
 8001ae4:	d809      	bhi.n	8001afa <ReadDevice+0x8e>
		{
			*device = i;
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8001aec:	701a      	strb	r2, [r3, #0]
			printf("device %d\r\n", i);
 8001aee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001af2:	4619      	mov	r1, r3
 8001af4:	4809      	ldr	r0, [pc, #36]	; (8001b1c <ReadDevice+0xb0>)
 8001af6:	f005 fc35 	bl	8007364 <iprintf>
		for(uint8_t i = 1; i<= 4; i++)
 8001afa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001afe:	3301      	adds	r3, #1
 8001b00:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001b04:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001b08:	2b04      	cmp	r3, #4
 8001b0a:	d9cd      	bls.n	8001aa8 <ReadDevice+0x3c>

		}
		}


}
 8001b0c:	bf00      	nop
 8001b0e:	bf00      	nop
 8001b10:	3728      	adds	r7, #40	; 0x28
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bd80      	pop	{r7, pc}
 8001b16:	bf00      	nop
 8001b18:	08008854 	.word	0x08008854
 8001b1c:	08008848 	.word	0x08008848

08001b20 <ReadButton>:
void ReadButton(uint8_t *button, uint16_t *X_w, uint16_t *Y_w){
 8001b20:	b5b0      	push	{r4, r5, r7, lr}
 8001b22:	b094      	sub	sp, #80	; 0x50
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	60f8      	str	r0, [r7, #12]
 8001b28:	60b9      	str	r1, [r7, #8]
 8001b2a:	607a      	str	r2, [r7, #4]
	uint16_t X_waarde = *X_w;
 8001b2c:	68bb      	ldr	r3, [r7, #8]
 8001b2e:	881b      	ldrh	r3, [r3, #0]
 8001b30:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
	uint16_t Y_waarde = *Y_w;
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	881b      	ldrh	r3, [r3, #0]
 8001b38:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
	const uint16_t X_waarde_knoppen[] = {23,219,121,23,121,219,121,23,23,121,219,219,23,219};
 8001b3c:	4b51      	ldr	r3, [pc, #324]	; (8001c84 <ReadButton+0x164>)
 8001b3e:	f107 042c 	add.w	r4, r7, #44	; 0x2c
 8001b42:	461d      	mov	r5, r3
 8001b44:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001b46:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001b48:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001b4c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	const uint16_t Y_waarde_knoppen[] = {50,50,90,175,175,175,260,298,393,393,298,393,245,245};
 8001b50:	4b4d      	ldr	r3, [pc, #308]	; (8001c88 <ReadButton+0x168>)
 8001b52:	f107 0410 	add.w	r4, r7, #16
 8001b56:	461d      	mov	r5, r3
 8001b58:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001b5a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001b5c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001b60:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	 * knop13: Add
	 * knop14: Delete
	 */


		for(uint8_t i = 1; i<= 14; i++)
 8001b64:	2301      	movs	r3, #1
 8001b66:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8001b6a:	e081      	b.n	8001c70 <ReadButton+0x150>
		{
			if(i <= 12)
 8001b6c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001b70:	2b0c      	cmp	r3, #12
 8001b72:	d83c      	bhi.n	8001bee <ReadButton+0xce>
			{
				//hier lees ik mijn touch uit
				if((X_waarde >= X_waarde_knoppen[i-1])&&(X_waarde <=X_waarde_knoppen[i-1]+75)&&(Y_waarde >= Y_waarde_knoppen[i-1])&&(Y_waarde <=Y_waarde_knoppen[i-1]+75))
 8001b74:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001b78:	3b01      	subs	r3, #1
 8001b7a:	005b      	lsls	r3, r3, #1
 8001b7c:	3350      	adds	r3, #80	; 0x50
 8001b7e:	443b      	add	r3, r7
 8001b80:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 8001b84:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 8001b88:	429a      	cmp	r2, r3
 8001b8a:	d36c      	bcc.n	8001c66 <ReadButton+0x146>
 8001b8c:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 8001b90:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001b94:	3b01      	subs	r3, #1
 8001b96:	005b      	lsls	r3, r3, #1
 8001b98:	3350      	adds	r3, #80	; 0x50
 8001b9a:	443b      	add	r3, r7
 8001b9c:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 8001ba0:	334b      	adds	r3, #75	; 0x4b
 8001ba2:	429a      	cmp	r2, r3
 8001ba4:	dc5f      	bgt.n	8001c66 <ReadButton+0x146>
 8001ba6:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001baa:	3b01      	subs	r3, #1
 8001bac:	005b      	lsls	r3, r3, #1
 8001bae:	3350      	adds	r3, #80	; 0x50
 8001bb0:	443b      	add	r3, r7
 8001bb2:	f833 3c40 	ldrh.w	r3, [r3, #-64]
 8001bb6:	f8b7 204a 	ldrh.w	r2, [r7, #74]	; 0x4a
 8001bba:	429a      	cmp	r2, r3
 8001bbc:	d353      	bcc.n	8001c66 <ReadButton+0x146>
 8001bbe:	f8b7 204a 	ldrh.w	r2, [r7, #74]	; 0x4a
 8001bc2:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001bc6:	3b01      	subs	r3, #1
 8001bc8:	005b      	lsls	r3, r3, #1
 8001bca:	3350      	adds	r3, #80	; 0x50
 8001bcc:	443b      	add	r3, r7
 8001bce:	f833 3c40 	ldrh.w	r3, [r3, #-64]
 8001bd2:	334b      	adds	r3, #75	; 0x4b
 8001bd4:	429a      	cmp	r2, r3
 8001bd6:	dc46      	bgt.n	8001c66 <ReadButton+0x146>
				{

					*button = i;
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 8001bde:	701a      	strb	r2, [r3, #0]
					printf("geduwd op button %d\r\n", i);
 8001be0:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001be4:	4619      	mov	r1, r3
 8001be6:	4829      	ldr	r0, [pc, #164]	; (8001c8c <ReadButton+0x16c>)
 8001be8:	f005 fbbc 	bl	8007364 <iprintf>
 8001bec:	e03b      	b.n	8001c66 <ReadButton+0x146>
				}
			}
			else
			{
				if((X_waarde >= X_waarde_knoppen[i-1])&&(X_waarde <=X_waarde_knoppen[i-1]+75)&&(Y_waarde >= Y_waarde_knoppen[i-1])&&(Y_waarde <=Y_waarde_knoppen[i-1]+48))
 8001bee:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001bf2:	3b01      	subs	r3, #1
 8001bf4:	005b      	lsls	r3, r3, #1
 8001bf6:	3350      	adds	r3, #80	; 0x50
 8001bf8:	443b      	add	r3, r7
 8001bfa:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 8001bfe:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 8001c02:	429a      	cmp	r2, r3
 8001c04:	d32f      	bcc.n	8001c66 <ReadButton+0x146>
 8001c06:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 8001c0a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001c0e:	3b01      	subs	r3, #1
 8001c10:	005b      	lsls	r3, r3, #1
 8001c12:	3350      	adds	r3, #80	; 0x50
 8001c14:	443b      	add	r3, r7
 8001c16:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 8001c1a:	334b      	adds	r3, #75	; 0x4b
 8001c1c:	429a      	cmp	r2, r3
 8001c1e:	dc22      	bgt.n	8001c66 <ReadButton+0x146>
 8001c20:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001c24:	3b01      	subs	r3, #1
 8001c26:	005b      	lsls	r3, r3, #1
 8001c28:	3350      	adds	r3, #80	; 0x50
 8001c2a:	443b      	add	r3, r7
 8001c2c:	f833 3c40 	ldrh.w	r3, [r3, #-64]
 8001c30:	f8b7 204a 	ldrh.w	r2, [r7, #74]	; 0x4a
 8001c34:	429a      	cmp	r2, r3
 8001c36:	d316      	bcc.n	8001c66 <ReadButton+0x146>
 8001c38:	f8b7 204a 	ldrh.w	r2, [r7, #74]	; 0x4a
 8001c3c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001c40:	3b01      	subs	r3, #1
 8001c42:	005b      	lsls	r3, r3, #1
 8001c44:	3350      	adds	r3, #80	; 0x50
 8001c46:	443b      	add	r3, r7
 8001c48:	f833 3c40 	ldrh.w	r3, [r3, #-64]
 8001c4c:	3330      	adds	r3, #48	; 0x30
 8001c4e:	429a      	cmp	r2, r3
 8001c50:	dc09      	bgt.n	8001c66 <ReadButton+0x146>
				{

				*button = i;
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 8001c58:	701a      	strb	r2, [r3, #0]
				printf("geduwd op button %d\r\n", i);
 8001c5a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001c5e:	4619      	mov	r1, r3
 8001c60:	480a      	ldr	r0, [pc, #40]	; (8001c8c <ReadButton+0x16c>)
 8001c62:	f005 fb7f 	bl	8007364 <iprintf>
		for(uint8_t i = 1; i<= 14; i++)
 8001c66:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001c6a:	3301      	adds	r3, #1
 8001c6c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8001c70:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001c74:	2b0e      	cmp	r3, #14
 8001c76:	f67f af79 	bls.w	8001b6c <ReadButton+0x4c>
				}
			}
		}

}
 8001c7a:	bf00      	nop
 8001c7c:	bf00      	nop
 8001c7e:	3750      	adds	r7, #80	; 0x50
 8001c80:	46bd      	mov	sp, r7
 8001c82:	bdb0      	pop	{r4, r5, r7, pc}
 8001c84:	08008874 	.word	0x08008874
 8001c88:	08008890 	.word	0x08008890
 8001c8c:	0800885c 	.word	0x0800885c

08001c90 <_write>:
/* USER CODE BEGIN 0 */
#include <errno.h>
#include <sys/stat.h>
#include <sys/times.h>
#include <sys/unistd.h>
int _write(int file, char *ptr, int len) {
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b086      	sub	sp, #24
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	60f8      	str	r0, [r7, #12]
 8001c98:	60b9      	str	r1, [r7, #8]
 8001c9a:	607a      	str	r2, [r7, #4]
    HAL_StatusTypeDef xStatus;
    switch (file) {
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	2b01      	cmp	r3, #1
 8001ca0:	d003      	beq.n	8001caa <_write+0x1a>
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	2b02      	cmp	r3, #2
 8001ca6:	d015      	beq.n	8001cd4 <_write+0x44>
 8001ca8:	e029      	b.n	8001cfe <_write+0x6e>
    case STDOUT_FILENO: /*stdout*/
		xStatus = HAL_UART_Transmit(&huart1, (uint8_t*)ptr, len, HAL_MAX_DELAY);
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	b29a      	uxth	r2, r3
 8001cae:	f04f 33ff 	mov.w	r3, #4294967295
 8001cb2:	68b9      	ldr	r1, [r7, #8]
 8001cb4:	481a      	ldr	r0, [pc, #104]	; (8001d20 <_write+0x90>)
 8001cb6:	f004 fe9b 	bl	80069f0 <HAL_UART_Transmit>
 8001cba:	4603      	mov	r3, r0
 8001cbc:	75fb      	strb	r3, [r7, #23]
		if (xStatus != HAL_OK) {
 8001cbe:	7dfb      	ldrb	r3, [r7, #23]
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d024      	beq.n	8001d0e <_write+0x7e>
			errno = EIO;
 8001cc4:	f005 fb1c 	bl	8007300 <__errno>
 8001cc8:	4603      	mov	r3, r0
 8001cca:	2205      	movs	r2, #5
 8001ccc:	601a      	str	r2, [r3, #0]
			return -1;
 8001cce:	f04f 33ff 	mov.w	r3, #4294967295
 8001cd2:	e020      	b.n	8001d16 <_write+0x86>
		}
        break;
    case STDERR_FILENO: /* stderr */
		xStatus = HAL_UART_Transmit(&huart1, (uint8_t*)ptr, len, HAL_MAX_DELAY);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	b29a      	uxth	r2, r3
 8001cd8:	f04f 33ff 	mov.w	r3, #4294967295
 8001cdc:	68b9      	ldr	r1, [r7, #8]
 8001cde:	4810      	ldr	r0, [pc, #64]	; (8001d20 <_write+0x90>)
 8001ce0:	f004 fe86 	bl	80069f0 <HAL_UART_Transmit>
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	75fb      	strb	r3, [r7, #23]
		if (xStatus != HAL_OK) {
 8001ce8:	7dfb      	ldrb	r3, [r7, #23]
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d011      	beq.n	8001d12 <_write+0x82>
			errno = EIO;
 8001cee:	f005 fb07 	bl	8007300 <__errno>
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	2205      	movs	r2, #5
 8001cf6:	601a      	str	r2, [r3, #0]
			return -1;
 8001cf8:	f04f 33ff 	mov.w	r3, #4294967295
 8001cfc:	e00b      	b.n	8001d16 <_write+0x86>
		}
        break;
    default:
        errno = EBADF;
 8001cfe:	f005 faff 	bl	8007300 <__errno>
 8001d02:	4603      	mov	r3, r0
 8001d04:	2209      	movs	r2, #9
 8001d06:	601a      	str	r2, [r3, #0]
        return -1;
 8001d08:	f04f 33ff 	mov.w	r3, #4294967295
 8001d0c:	e003      	b.n	8001d16 <_write+0x86>
        break;
 8001d0e:	bf00      	nop
 8001d10:	e000      	b.n	8001d14 <_write+0x84>
        break;
 8001d12:	bf00      	nop
    }
    return len;
 8001d14:	687b      	ldr	r3, [r7, #4]
}
 8001d16:	4618      	mov	r0, r3
 8001d18:	3718      	adds	r7, #24
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bd80      	pop	{r7, pc}
 8001d1e:	bf00      	nop
 8001d20:	20005460 	.word	0x20005460

08001d24 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001d28:	f000 fd3d 	bl	80027a6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001d2c:	f000 f812 	bl	8001d54 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001d30:	f000 f9ce 	bl	80020d0 <MX_GPIO_Init>
  MX_SPI2_Init();
 8001d34:	f000 f8b6 	bl	8001ea4 <MX_SPI2_Init>
  MX_USART1_UART_Init();
 8001d38:	f000 f99a 	bl	8002070 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 8001d3c:	f000 f872 	bl	8001e24 <MX_I2C1_Init>
  MX_TIM3_Init();
 8001d40:	f000 f93c 	bl	8001fbc <MX_TIM3_Init>
  MX_TIM2_Init();
 8001d44:	f000 f8ec 	bl	8001f20 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  All_Carl_Inits();
 8001d48:	f7fe fc66 	bl	8000618 <All_Carl_Inits>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  whilelus();
 8001d4c:	f7fe fd62 	bl	8000814 <whilelus>
 8001d50:	e7fc      	b.n	8001d4c <main+0x28>
	...

08001d54 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b094      	sub	sp, #80	; 0x50
 8001d58:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001d5a:	f107 0320 	add.w	r3, r7, #32
 8001d5e:	2230      	movs	r2, #48	; 0x30
 8001d60:	2100      	movs	r1, #0
 8001d62:	4618      	mov	r0, r3
 8001d64:	f005 faf6 	bl	8007354 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001d68:	f107 030c 	add.w	r3, r7, #12
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	601a      	str	r2, [r3, #0]
 8001d70:	605a      	str	r2, [r3, #4]
 8001d72:	609a      	str	r2, [r3, #8]
 8001d74:	60da      	str	r2, [r3, #12]
 8001d76:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d78:	4b28      	ldr	r3, [pc, #160]	; (8001e1c <SystemClock_Config+0xc8>)
 8001d7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d7c:	4a27      	ldr	r2, [pc, #156]	; (8001e1c <SystemClock_Config+0xc8>)
 8001d7e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d82:	6413      	str	r3, [r2, #64]	; 0x40
 8001d84:	4b25      	ldr	r3, [pc, #148]	; (8001e1c <SystemClock_Config+0xc8>)
 8001d86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d8c:	60bb      	str	r3, [r7, #8]
 8001d8e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001d90:	4b23      	ldr	r3, [pc, #140]	; (8001e20 <SystemClock_Config+0xcc>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001d98:	4a21      	ldr	r2, [pc, #132]	; (8001e20 <SystemClock_Config+0xcc>)
 8001d9a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d9e:	6013      	str	r3, [r2, #0]
 8001da0:	4b1f      	ldr	r3, [pc, #124]	; (8001e20 <SystemClock_Config+0xcc>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001da8:	607b      	str	r3, [r7, #4]
 8001daa:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001dac:	2302      	movs	r3, #2
 8001dae:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001db0:	2301      	movs	r3, #1
 8001db2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001db4:	2310      	movs	r3, #16
 8001db6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001db8:	2302      	movs	r3, #2
 8001dba:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001dc0:	2308      	movs	r3, #8
 8001dc2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 64;
 8001dc4:	2340      	movs	r3, #64	; 0x40
 8001dc6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001dc8:	2302      	movs	r3, #2
 8001dca:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001dcc:	2302      	movs	r3, #2
 8001dce:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001dd0:	f107 0320 	add.w	r3, r7, #32
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	f002 f8b7 	bl	8003f48 <HAL_RCC_OscConfig>
 8001dda:	4603      	mov	r3, r0
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d001      	beq.n	8001de4 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8001de0:	f000 fa08 	bl	80021f4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001de4:	230f      	movs	r3, #15
 8001de6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001de8:	2302      	movs	r3, #2
 8001dea:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001dec:	2300      	movs	r3, #0
 8001dee:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001df0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001df4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001df6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001dfa:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001dfc:	f107 030c 	add.w	r3, r7, #12
 8001e00:	2102      	movs	r1, #2
 8001e02:	4618      	mov	r0, r3
 8001e04:	f002 fb44 	bl	8004490 <HAL_RCC_ClockConfig>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d001      	beq.n	8001e12 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8001e0e:	f000 f9f1 	bl	80021f4 <Error_Handler>
  }
}
 8001e12:	bf00      	nop
 8001e14:	3750      	adds	r7, #80	; 0x50
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bd80      	pop	{r7, pc}
 8001e1a:	bf00      	nop
 8001e1c:	40023800 	.word	0x40023800
 8001e20:	40007000 	.word	0x40007000

08001e24 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001e28:	4b1b      	ldr	r3, [pc, #108]	; (8001e98 <MX_I2C1_Init+0x74>)
 8001e2a:	4a1c      	ldr	r2, [pc, #112]	; (8001e9c <MX_I2C1_Init+0x78>)
 8001e2c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 8001e2e:	4b1a      	ldr	r3, [pc, #104]	; (8001e98 <MX_I2C1_Init+0x74>)
 8001e30:	4a1b      	ldr	r2, [pc, #108]	; (8001ea0 <MX_I2C1_Init+0x7c>)
 8001e32:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001e34:	4b18      	ldr	r3, [pc, #96]	; (8001e98 <MX_I2C1_Init+0x74>)
 8001e36:	2200      	movs	r2, #0
 8001e38:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001e3a:	4b17      	ldr	r3, [pc, #92]	; (8001e98 <MX_I2C1_Init+0x74>)
 8001e3c:	2201      	movs	r2, #1
 8001e3e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001e40:	4b15      	ldr	r3, [pc, #84]	; (8001e98 <MX_I2C1_Init+0x74>)
 8001e42:	2200      	movs	r2, #0
 8001e44:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001e46:	4b14      	ldr	r3, [pc, #80]	; (8001e98 <MX_I2C1_Init+0x74>)
 8001e48:	2200      	movs	r2, #0
 8001e4a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001e4c:	4b12      	ldr	r3, [pc, #72]	; (8001e98 <MX_I2C1_Init+0x74>)
 8001e4e:	2200      	movs	r2, #0
 8001e50:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001e52:	4b11      	ldr	r3, [pc, #68]	; (8001e98 <MX_I2C1_Init+0x74>)
 8001e54:	2200      	movs	r2, #0
 8001e56:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001e58:	4b0f      	ldr	r3, [pc, #60]	; (8001e98 <MX_I2C1_Init+0x74>)
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001e5e:	480e      	ldr	r0, [pc, #56]	; (8001e98 <MX_I2C1_Init+0x74>)
 8001e60:	f001 f81e 	bl	8002ea0 <HAL_I2C_Init>
 8001e64:	4603      	mov	r3, r0
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d001      	beq.n	8001e6e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001e6a:	f000 f9c3 	bl	80021f4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001e6e:	2100      	movs	r1, #0
 8001e70:	4809      	ldr	r0, [pc, #36]	; (8001e98 <MX_I2C1_Init+0x74>)
 8001e72:	f001 ffd1 	bl	8003e18 <HAL_I2CEx_ConfigAnalogFilter>
 8001e76:	4603      	mov	r3, r0
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d001      	beq.n	8001e80 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001e7c:	f000 f9ba 	bl	80021f4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001e80:	2100      	movs	r1, #0
 8001e82:	4805      	ldr	r0, [pc, #20]	; (8001e98 <MX_I2C1_Init+0x74>)
 8001e84:	f002 f813 	bl	8003eae <HAL_I2CEx_ConfigDigitalFilter>
 8001e88:	4603      	mov	r3, r0
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d001      	beq.n	8001e92 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001e8e:	f000 f9b1 	bl	80021f4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001e92:	bf00      	nop
 8001e94:	bd80      	pop	{r7, pc}
 8001e96:	bf00      	nop
 8001e98:	20005310 	.word	0x20005310
 8001e9c:	40005400 	.word	0x40005400
 8001ea0:	00707cbb 	.word	0x00707cbb

08001ea4 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001ea8:	4b1b      	ldr	r3, [pc, #108]	; (8001f18 <MX_SPI2_Init+0x74>)
 8001eaa:	4a1c      	ldr	r2, [pc, #112]	; (8001f1c <MX_SPI2_Init+0x78>)
 8001eac:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001eae:	4b1a      	ldr	r3, [pc, #104]	; (8001f18 <MX_SPI2_Init+0x74>)
 8001eb0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001eb4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001eb6:	4b18      	ldr	r3, [pc, #96]	; (8001f18 <MX_SPI2_Init+0x74>)
 8001eb8:	2200      	movs	r2, #0
 8001eba:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001ebc:	4b16      	ldr	r3, [pc, #88]	; (8001f18 <MX_SPI2_Init+0x74>)
 8001ebe:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001ec2:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001ec4:	4b14      	ldr	r3, [pc, #80]	; (8001f18 <MX_SPI2_Init+0x74>)
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001eca:	4b13      	ldr	r3, [pc, #76]	; (8001f18 <MX_SPI2_Init+0x74>)
 8001ecc:	2200      	movs	r2, #0
 8001ece:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001ed0:	4b11      	ldr	r3, [pc, #68]	; (8001f18 <MX_SPI2_Init+0x74>)
 8001ed2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ed6:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001ed8:	4b0f      	ldr	r3, [pc, #60]	; (8001f18 <MX_SPI2_Init+0x74>)
 8001eda:	2200      	movs	r2, #0
 8001edc:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001ede:	4b0e      	ldr	r3, [pc, #56]	; (8001f18 <MX_SPI2_Init+0x74>)
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001ee4:	4b0c      	ldr	r3, [pc, #48]	; (8001f18 <MX_SPI2_Init+0x74>)
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001eea:	4b0b      	ldr	r3, [pc, #44]	; (8001f18 <MX_SPI2_Init+0x74>)
 8001eec:	2200      	movs	r2, #0
 8001eee:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8001ef0:	4b09      	ldr	r3, [pc, #36]	; (8001f18 <MX_SPI2_Init+0x74>)
 8001ef2:	2207      	movs	r2, #7
 8001ef4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001ef6:	4b08      	ldr	r3, [pc, #32]	; (8001f18 <MX_SPI2_Init+0x74>)
 8001ef8:	2200      	movs	r2, #0
 8001efa:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001efc:	4b06      	ldr	r3, [pc, #24]	; (8001f18 <MX_SPI2_Init+0x74>)
 8001efe:	2208      	movs	r2, #8
 8001f00:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001f02:	4805      	ldr	r0, [pc, #20]	; (8001f18 <MX_SPI2_Init+0x74>)
 8001f04:	f003 f89a 	bl	800503c <HAL_SPI_Init>
 8001f08:	4603      	mov	r3, r0
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d001      	beq.n	8001f12 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8001f0e:	f000 f971 	bl	80021f4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001f12:	bf00      	nop
 8001f14:	bd80      	pop	{r7, pc}
 8001f16:	bf00      	nop
 8001f18:	20005364 	.word	0x20005364
 8001f1c:	40003800 	.word	0x40003800

08001f20 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b088      	sub	sp, #32
 8001f24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001f26:	f107 0310 	add.w	r3, r7, #16
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	601a      	str	r2, [r3, #0]
 8001f2e:	605a      	str	r2, [r3, #4]
 8001f30:	609a      	str	r2, [r3, #8]
 8001f32:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f34:	1d3b      	adds	r3, r7, #4
 8001f36:	2200      	movs	r2, #0
 8001f38:	601a      	str	r2, [r3, #0]
 8001f3a:	605a      	str	r2, [r3, #4]
 8001f3c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001f3e:	4b1e      	ldr	r3, [pc, #120]	; (8001fb8 <MX_TIM2_Init+0x98>)
 8001f40:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001f44:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 64;
 8001f46:	4b1c      	ldr	r3, [pc, #112]	; (8001fb8 <MX_TIM2_Init+0x98>)
 8001f48:	2240      	movs	r2, #64	; 0x40
 8001f4a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f4c:	4b1a      	ldr	r3, [pc, #104]	; (8001fb8 <MX_TIM2_Init+0x98>)
 8001f4e:	2200      	movs	r2, #0
 8001f50:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001f52:	4b19      	ldr	r3, [pc, #100]	; (8001fb8 <MX_TIM2_Init+0x98>)
 8001f54:	f04f 32ff 	mov.w	r2, #4294967295
 8001f58:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f5a:	4b17      	ldr	r3, [pc, #92]	; (8001fb8 <MX_TIM2_Init+0x98>)
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001f60:	4b15      	ldr	r3, [pc, #84]	; (8001fb8 <MX_TIM2_Init+0x98>)
 8001f62:	2280      	movs	r2, #128	; 0x80
 8001f64:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001f66:	4814      	ldr	r0, [pc, #80]	; (8001fb8 <MX_TIM2_Init+0x98>)
 8001f68:	f003 fc0a 	bl	8005780 <HAL_TIM_Base_Init>
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d001      	beq.n	8001f76 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001f72:	f000 f93f 	bl	80021f4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f76:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f7a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001f7c:	f107 0310 	add.w	r3, r7, #16
 8001f80:	4619      	mov	r1, r3
 8001f82:	480d      	ldr	r0, [pc, #52]	; (8001fb8 <MX_TIM2_Init+0x98>)
 8001f84:	f003 ffd0 	bl	8005f28 <HAL_TIM_ConfigClockSource>
 8001f88:	4603      	mov	r3, r0
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d001      	beq.n	8001f92 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001f8e:	f000 f931 	bl	80021f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f92:	2300      	movs	r3, #0
 8001f94:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f96:	2300      	movs	r3, #0
 8001f98:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001f9a:	1d3b      	adds	r3, r7, #4
 8001f9c:	4619      	mov	r1, r3
 8001f9e:	4806      	ldr	r0, [pc, #24]	; (8001fb8 <MX_TIM2_Init+0x98>)
 8001fa0:	f004 fc4a 	bl	8006838 <HAL_TIMEx_MasterConfigSynchronization>
 8001fa4:	4603      	mov	r3, r0
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d001      	beq.n	8001fae <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001faa:	f000 f923 	bl	80021f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001fae:	bf00      	nop
 8001fb0:	3720      	adds	r7, #32
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bd80      	pop	{r7, pc}
 8001fb6:	bf00      	nop
 8001fb8:	200053c8 	.word	0x200053c8

08001fbc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b08a      	sub	sp, #40	; 0x28
 8001fc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001fc2:	f107 031c 	add.w	r3, r7, #28
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	601a      	str	r2, [r3, #0]
 8001fca:	605a      	str	r2, [r3, #4]
 8001fcc:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001fce:	463b      	mov	r3, r7
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	601a      	str	r2, [r3, #0]
 8001fd4:	605a      	str	r2, [r3, #4]
 8001fd6:	609a      	str	r2, [r3, #8]
 8001fd8:	60da      	str	r2, [r3, #12]
 8001fda:	611a      	str	r2, [r3, #16]
 8001fdc:	615a      	str	r2, [r3, #20]
 8001fde:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001fe0:	4b21      	ldr	r3, [pc, #132]	; (8002068 <MX_TIM3_Init+0xac>)
 8001fe2:	4a22      	ldr	r2, [pc, #136]	; (800206c <MX_TIM3_Init+0xb0>)
 8001fe4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 4-1;
 8001fe6:	4b20      	ldr	r3, [pc, #128]	; (8002068 <MX_TIM3_Init+0xac>)
 8001fe8:	2203      	movs	r2, #3
 8001fea:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fec:	4b1e      	ldr	r3, [pc, #120]	; (8002068 <MX_TIM3_Init+0xac>)
 8001fee:	2200      	movs	r2, #0
 8001ff0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 422-1;
 8001ff2:	4b1d      	ldr	r3, [pc, #116]	; (8002068 <MX_TIM3_Init+0xac>)
 8001ff4:	f240 12a5 	movw	r2, #421	; 0x1a5
 8001ff8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ffa:	4b1b      	ldr	r3, [pc, #108]	; (8002068 <MX_TIM3_Init+0xac>)
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002000:	4b19      	ldr	r3, [pc, #100]	; (8002068 <MX_TIM3_Init+0xac>)
 8002002:	2280      	movs	r2, #128	; 0x80
 8002004:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002006:	4818      	ldr	r0, [pc, #96]	; (8002068 <MX_TIM3_Init+0xac>)
 8002008:	f003 fca9 	bl	800595e <HAL_TIM_PWM_Init>
 800200c:	4603      	mov	r3, r0
 800200e:	2b00      	cmp	r3, #0
 8002010:	d001      	beq.n	8002016 <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8002012:	f000 f8ef 	bl	80021f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002016:	2300      	movs	r3, #0
 8002018:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800201a:	2300      	movs	r3, #0
 800201c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800201e:	f107 031c 	add.w	r3, r7, #28
 8002022:	4619      	mov	r1, r3
 8002024:	4810      	ldr	r0, [pc, #64]	; (8002068 <MX_TIM3_Init+0xac>)
 8002026:	f004 fc07 	bl	8006838 <HAL_TIMEx_MasterConfigSynchronization>
 800202a:	4603      	mov	r3, r0
 800202c:	2b00      	cmp	r3, #0
 800202e:	d001      	beq.n	8002034 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8002030:	f000 f8e0 	bl	80021f4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002034:	2360      	movs	r3, #96	; 0x60
 8002036:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 211-1;
 8002038:	23d2      	movs	r3, #210	; 0xd2
 800203a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800203c:	2300      	movs	r3, #0
 800203e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002040:	2300      	movs	r3, #0
 8002042:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002044:	463b      	mov	r3, r7
 8002046:	2204      	movs	r2, #4
 8002048:	4619      	mov	r1, r3
 800204a:	4807      	ldr	r0, [pc, #28]	; (8002068 <MX_TIM3_Init+0xac>)
 800204c:	f003 fe58 	bl	8005d00 <HAL_TIM_PWM_ConfigChannel>
 8002050:	4603      	mov	r3, r0
 8002052:	2b00      	cmp	r3, #0
 8002054:	d001      	beq.n	800205a <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8002056:	f000 f8cd 	bl	80021f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800205a:	4803      	ldr	r0, [pc, #12]	; (8002068 <MX_TIM3_Init+0xac>)
 800205c:	f000 f9f4 	bl	8002448 <HAL_TIM_MspPostInit>

}
 8002060:	bf00      	nop
 8002062:	3728      	adds	r7, #40	; 0x28
 8002064:	46bd      	mov	sp, r7
 8002066:	bd80      	pop	{r7, pc}
 8002068:	20005414 	.word	0x20005414
 800206c:	40000400 	.word	0x40000400

08002070 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002074:	4b14      	ldr	r3, [pc, #80]	; (80020c8 <MX_USART1_UART_Init+0x58>)
 8002076:	4a15      	ldr	r2, [pc, #84]	; (80020cc <MX_USART1_UART_Init+0x5c>)
 8002078:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800207a:	4b13      	ldr	r3, [pc, #76]	; (80020c8 <MX_USART1_UART_Init+0x58>)
 800207c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002080:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002082:	4b11      	ldr	r3, [pc, #68]	; (80020c8 <MX_USART1_UART_Init+0x58>)
 8002084:	2200      	movs	r2, #0
 8002086:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002088:	4b0f      	ldr	r3, [pc, #60]	; (80020c8 <MX_USART1_UART_Init+0x58>)
 800208a:	2200      	movs	r2, #0
 800208c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800208e:	4b0e      	ldr	r3, [pc, #56]	; (80020c8 <MX_USART1_UART_Init+0x58>)
 8002090:	2200      	movs	r2, #0
 8002092:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002094:	4b0c      	ldr	r3, [pc, #48]	; (80020c8 <MX_USART1_UART_Init+0x58>)
 8002096:	220c      	movs	r2, #12
 8002098:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800209a:	4b0b      	ldr	r3, [pc, #44]	; (80020c8 <MX_USART1_UART_Init+0x58>)
 800209c:	2200      	movs	r2, #0
 800209e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80020a0:	4b09      	ldr	r3, [pc, #36]	; (80020c8 <MX_USART1_UART_Init+0x58>)
 80020a2:	2200      	movs	r2, #0
 80020a4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80020a6:	4b08      	ldr	r3, [pc, #32]	; (80020c8 <MX_USART1_UART_Init+0x58>)
 80020a8:	2200      	movs	r2, #0
 80020aa:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80020ac:	4b06      	ldr	r3, [pc, #24]	; (80020c8 <MX_USART1_UART_Init+0x58>)
 80020ae:	2200      	movs	r2, #0
 80020b0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80020b2:	4805      	ldr	r0, [pc, #20]	; (80020c8 <MX_USART1_UART_Init+0x58>)
 80020b4:	f004 fc4e 	bl	8006954 <HAL_UART_Init>
 80020b8:	4603      	mov	r3, r0
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d001      	beq.n	80020c2 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80020be:	f000 f899 	bl	80021f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80020c2:	bf00      	nop
 80020c4:	bd80      	pop	{r7, pc}
 80020c6:	bf00      	nop
 80020c8:	20005460 	.word	0x20005460
 80020cc:	40011000 	.word	0x40011000

080020d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b08a      	sub	sp, #40	; 0x28
 80020d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020d6:	f107 0314 	add.w	r3, r7, #20
 80020da:	2200      	movs	r2, #0
 80020dc:	601a      	str	r2, [r3, #0]
 80020de:	605a      	str	r2, [r3, #4]
 80020e0:	609a      	str	r2, [r3, #8]
 80020e2:	60da      	str	r2, [r3, #12]
 80020e4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80020e6:	4b40      	ldr	r3, [pc, #256]	; (80021e8 <MX_GPIO_Init+0x118>)
 80020e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ea:	4a3f      	ldr	r2, [pc, #252]	; (80021e8 <MX_GPIO_Init+0x118>)
 80020ec:	f043 0302 	orr.w	r3, r3, #2
 80020f0:	6313      	str	r3, [r2, #48]	; 0x30
 80020f2:	4b3d      	ldr	r3, [pc, #244]	; (80021e8 <MX_GPIO_Init+0x118>)
 80020f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020f6:	f003 0302 	and.w	r3, r3, #2
 80020fa:	613b      	str	r3, [r7, #16]
 80020fc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80020fe:	4b3a      	ldr	r3, [pc, #232]	; (80021e8 <MX_GPIO_Init+0x118>)
 8002100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002102:	4a39      	ldr	r2, [pc, #228]	; (80021e8 <MX_GPIO_Init+0x118>)
 8002104:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002108:	6313      	str	r3, [r2, #48]	; 0x30
 800210a:	4b37      	ldr	r3, [pc, #220]	; (80021e8 <MX_GPIO_Init+0x118>)
 800210c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800210e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002112:	60fb      	str	r3, [r7, #12]
 8002114:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002116:	4b34      	ldr	r3, [pc, #208]	; (80021e8 <MX_GPIO_Init+0x118>)
 8002118:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800211a:	4a33      	ldr	r2, [pc, #204]	; (80021e8 <MX_GPIO_Init+0x118>)
 800211c:	f043 0301 	orr.w	r3, r3, #1
 8002120:	6313      	str	r3, [r2, #48]	; 0x30
 8002122:	4b31      	ldr	r3, [pc, #196]	; (80021e8 <MX_GPIO_Init+0x118>)
 8002124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002126:	f003 0301 	and.w	r3, r3, #1
 800212a:	60bb      	str	r3, [r7, #8]
 800212c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800212e:	4b2e      	ldr	r3, [pc, #184]	; (80021e8 <MX_GPIO_Init+0x118>)
 8002130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002132:	4a2d      	ldr	r2, [pc, #180]	; (80021e8 <MX_GPIO_Init+0x118>)
 8002134:	f043 0304 	orr.w	r3, r3, #4
 8002138:	6313      	str	r3, [r2, #48]	; 0x30
 800213a:	4b2b      	ldr	r3, [pc, #172]	; (80021e8 <MX_GPIO_Init+0x118>)
 800213c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800213e:	f003 0304 	and.w	r3, r3, #4
 8002142:	607b      	str	r3, [r7, #4]
 8002144:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002146:	4b28      	ldr	r3, [pc, #160]	; (80021e8 <MX_GPIO_Init+0x118>)
 8002148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800214a:	4a27      	ldr	r2, [pc, #156]	; (80021e8 <MX_GPIO_Init+0x118>)
 800214c:	f043 0320 	orr.w	r3, r3, #32
 8002150:	6313      	str	r3, [r2, #48]	; 0x30
 8002152:	4b25      	ldr	r3, [pc, #148]	; (80021e8 <MX_GPIO_Init+0x118>)
 8002154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002156:	f003 0320 	and.w	r3, r3, #32
 800215a:	603b      	str	r3, [r7, #0]
 800215c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DISPLAY_CS_GPIO_Port, DISPLAY_CS_Pin, GPIO_PIN_SET);
 800215e:	2201      	movs	r2, #1
 8002160:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002164:	4821      	ldr	r0, [pc, #132]	; (80021ec <MX_GPIO_Init+0x11c>)
 8002166:	f000 fe5d 	bl	8002e24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, DISPLAY_RESET_Pin|DISPLAY_DC_Pin, GPIO_PIN_RESET);
 800216a:	2200      	movs	r2, #0
 800216c:	f44f 7140 	mov.w	r1, #768	; 0x300
 8002170:	481e      	ldr	r0, [pc, #120]	; (80021ec <MX_GPIO_Init+0x11c>)
 8002172:	f000 fe57 	bl	8002e24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PF6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002176:	2340      	movs	r3, #64	; 0x40
 8002178:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800217a:	2302      	movs	r3, #2
 800217c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800217e:	2300      	movs	r3, #0
 8002180:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002182:	2300      	movs	r3, #0
 8002184:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 8002186:	2303      	movs	r3, #3
 8002188:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800218a:	f107 0314 	add.w	r3, r7, #20
 800218e:	4619      	mov	r1, r3
 8002190:	4816      	ldr	r0, [pc, #88]	; (80021ec <MX_GPIO_Init+0x11c>)
 8002192:	f000 fc9b 	bl	8002acc <HAL_GPIO_Init>

  /*Configure GPIO pins : DISPLAY_CS_Pin DISPLAY_RESET_Pin DISPLAY_DC_Pin */
  GPIO_InitStruct.Pin = DISPLAY_CS_Pin|DISPLAY_RESET_Pin|DISPLAY_DC_Pin;
 8002196:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 800219a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800219c:	2301      	movs	r3, #1
 800219e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021a0:	2300      	movs	r3, #0
 80021a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021a4:	2303      	movs	r3, #3
 80021a6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80021a8:	f107 0314 	add.w	r3, r7, #20
 80021ac:	4619      	mov	r1, r3
 80021ae:	480f      	ldr	r0, [pc, #60]	; (80021ec <MX_GPIO_Init+0x11c>)
 80021b0:	f000 fc8c 	bl	8002acc <HAL_GPIO_Init>

  /*Configure GPIO pin : IRread_Pin */
  GPIO_InitStruct.Pin = IRread_Pin;
 80021b4:	2301      	movs	r3, #1
 80021b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80021b8:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80021bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021be:	2300      	movs	r3, #0
 80021c0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(IRread_GPIO_Port, &GPIO_InitStruct);
 80021c2:	f107 0314 	add.w	r3, r7, #20
 80021c6:	4619      	mov	r1, r3
 80021c8:	4809      	ldr	r0, [pc, #36]	; (80021f0 <MX_GPIO_Init+0x120>)
 80021ca:	f000 fc7f 	bl	8002acc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80021ce:	2200      	movs	r2, #0
 80021d0:	2100      	movs	r1, #0
 80021d2:	2006      	movs	r0, #6
 80021d4:	f000 fc43 	bl	8002a5e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80021d8:	2006      	movs	r0, #6
 80021da:	f000 fc5c 	bl	8002a96 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80021de:	bf00      	nop
 80021e0:	3728      	adds	r7, #40	; 0x28
 80021e2:	46bd      	mov	sp, r7
 80021e4:	bd80      	pop	{r7, pc}
 80021e6:	bf00      	nop
 80021e8:	40023800 	.word	0x40023800
 80021ec:	40021400 	.word	0x40021400
 80021f0:	40020000 	.word	0x40020000

080021f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80021f4:	b480      	push	{r7}
 80021f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80021f8:	b672      	cpsid	i
}
 80021fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80021fc:	e7fe      	b.n	80021fc <Error_Handler+0x8>
	...

08002200 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002200:	b480      	push	{r7}
 8002202:	b083      	sub	sp, #12
 8002204:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8002206:	4b0f      	ldr	r3, [pc, #60]	; (8002244 <HAL_MspInit+0x44>)
 8002208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800220a:	4a0e      	ldr	r2, [pc, #56]	; (8002244 <HAL_MspInit+0x44>)
 800220c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002210:	6413      	str	r3, [r2, #64]	; 0x40
 8002212:	4b0c      	ldr	r3, [pc, #48]	; (8002244 <HAL_MspInit+0x44>)
 8002214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002216:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800221a:	607b      	str	r3, [r7, #4]
 800221c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800221e:	4b09      	ldr	r3, [pc, #36]	; (8002244 <HAL_MspInit+0x44>)
 8002220:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002222:	4a08      	ldr	r2, [pc, #32]	; (8002244 <HAL_MspInit+0x44>)
 8002224:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002228:	6453      	str	r3, [r2, #68]	; 0x44
 800222a:	4b06      	ldr	r3, [pc, #24]	; (8002244 <HAL_MspInit+0x44>)
 800222c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800222e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002232:	603b      	str	r3, [r7, #0]
 8002234:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002236:	bf00      	nop
 8002238:	370c      	adds	r7, #12
 800223a:	46bd      	mov	sp, r7
 800223c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002240:	4770      	bx	lr
 8002242:	bf00      	nop
 8002244:	40023800 	.word	0x40023800

08002248 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b0aa      	sub	sp, #168	; 0xa8
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002250:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002254:	2200      	movs	r2, #0
 8002256:	601a      	str	r2, [r3, #0]
 8002258:	605a      	str	r2, [r3, #4]
 800225a:	609a      	str	r2, [r3, #8]
 800225c:	60da      	str	r2, [r3, #12]
 800225e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002260:	f107 0310 	add.w	r3, r7, #16
 8002264:	2284      	movs	r2, #132	; 0x84
 8002266:	2100      	movs	r1, #0
 8002268:	4618      	mov	r0, r3
 800226a:	f005 f873 	bl	8007354 <memset>
  if(hi2c->Instance==I2C1)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	4a22      	ldr	r2, [pc, #136]	; (80022fc <HAL_I2C_MspInit+0xb4>)
 8002274:	4293      	cmp	r3, r2
 8002276:	d13c      	bne.n	80022f2 <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002278:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800227c:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800227e:	2300      	movs	r3, #0
 8002280:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002282:	f107 0310 	add.w	r3, r7, #16
 8002286:	4618      	mov	r0, r3
 8002288:	f002 fae8 	bl	800485c <HAL_RCCEx_PeriphCLKConfig>
 800228c:	4603      	mov	r3, r0
 800228e:	2b00      	cmp	r3, #0
 8002290:	d001      	beq.n	8002296 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8002292:	f7ff ffaf 	bl	80021f4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002296:	4b1a      	ldr	r3, [pc, #104]	; (8002300 <HAL_I2C_MspInit+0xb8>)
 8002298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800229a:	4a19      	ldr	r2, [pc, #100]	; (8002300 <HAL_I2C_MspInit+0xb8>)
 800229c:	f043 0302 	orr.w	r3, r3, #2
 80022a0:	6313      	str	r3, [r2, #48]	; 0x30
 80022a2:	4b17      	ldr	r3, [pc, #92]	; (8002300 <HAL_I2C_MspInit+0xb8>)
 80022a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022a6:	f003 0302 	and.w	r3, r3, #2
 80022aa:	60fb      	str	r3, [r7, #12]
 80022ac:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80022ae:	f44f 7340 	mov.w	r3, #768	; 0x300
 80022b2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80022b6:	2312      	movs	r3, #18
 80022b8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022bc:	2300      	movs	r3, #0
 80022be:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022c2:	2303      	movs	r3, #3
 80022c4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80022c8:	2304      	movs	r3, #4
 80022ca:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022ce:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80022d2:	4619      	mov	r1, r3
 80022d4:	480b      	ldr	r0, [pc, #44]	; (8002304 <HAL_I2C_MspInit+0xbc>)
 80022d6:	f000 fbf9 	bl	8002acc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80022da:	4b09      	ldr	r3, [pc, #36]	; (8002300 <HAL_I2C_MspInit+0xb8>)
 80022dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022de:	4a08      	ldr	r2, [pc, #32]	; (8002300 <HAL_I2C_MspInit+0xb8>)
 80022e0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80022e4:	6413      	str	r3, [r2, #64]	; 0x40
 80022e6:	4b06      	ldr	r3, [pc, #24]	; (8002300 <HAL_I2C_MspInit+0xb8>)
 80022e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022ee:	60bb      	str	r3, [r7, #8]
 80022f0:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80022f2:	bf00      	nop
 80022f4:	37a8      	adds	r7, #168	; 0xa8
 80022f6:	46bd      	mov	sp, r7
 80022f8:	bd80      	pop	{r7, pc}
 80022fa:	bf00      	nop
 80022fc:	40005400 	.word	0x40005400
 8002300:	40023800 	.word	0x40023800
 8002304:	40020400 	.word	0x40020400

08002308 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b08a      	sub	sp, #40	; 0x28
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002310:	f107 0314 	add.w	r3, r7, #20
 8002314:	2200      	movs	r2, #0
 8002316:	601a      	str	r2, [r3, #0]
 8002318:	605a      	str	r2, [r3, #4]
 800231a:	609a      	str	r2, [r3, #8]
 800231c:	60da      	str	r2, [r3, #12]
 800231e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	4a25      	ldr	r2, [pc, #148]	; (80023bc <HAL_SPI_MspInit+0xb4>)
 8002326:	4293      	cmp	r3, r2
 8002328:	d144      	bne.n	80023b4 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800232a:	4b25      	ldr	r3, [pc, #148]	; (80023c0 <HAL_SPI_MspInit+0xb8>)
 800232c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800232e:	4a24      	ldr	r2, [pc, #144]	; (80023c0 <HAL_SPI_MspInit+0xb8>)
 8002330:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002334:	6413      	str	r3, [r2, #64]	; 0x40
 8002336:	4b22      	ldr	r3, [pc, #136]	; (80023c0 <HAL_SPI_MspInit+0xb8>)
 8002338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800233a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800233e:	613b      	str	r3, [r7, #16]
 8002340:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOI_CLK_ENABLE();
 8002342:	4b1f      	ldr	r3, [pc, #124]	; (80023c0 <HAL_SPI_MspInit+0xb8>)
 8002344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002346:	4a1e      	ldr	r2, [pc, #120]	; (80023c0 <HAL_SPI_MspInit+0xb8>)
 8002348:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800234c:	6313      	str	r3, [r2, #48]	; 0x30
 800234e:	4b1c      	ldr	r3, [pc, #112]	; (80023c0 <HAL_SPI_MspInit+0xb8>)
 8002350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002352:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002356:	60fb      	str	r3, [r7, #12]
 8002358:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800235a:	4b19      	ldr	r3, [pc, #100]	; (80023c0 <HAL_SPI_MspInit+0xb8>)
 800235c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800235e:	4a18      	ldr	r2, [pc, #96]	; (80023c0 <HAL_SPI_MspInit+0xb8>)
 8002360:	f043 0302 	orr.w	r3, r3, #2
 8002364:	6313      	str	r3, [r2, #48]	; 0x30
 8002366:	4b16      	ldr	r3, [pc, #88]	; (80023c0 <HAL_SPI_MspInit+0xb8>)
 8002368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800236a:	f003 0302 	and.w	r3, r3, #2
 800236e:	60bb      	str	r3, [r7, #8]
 8002370:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PI1     ------> SPI2_SCK
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002372:	2302      	movs	r3, #2
 8002374:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002376:	2302      	movs	r3, #2
 8002378:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800237a:	2300      	movs	r3, #0
 800237c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800237e:	2303      	movs	r3, #3
 8002380:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002382:	2305      	movs	r3, #5
 8002384:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8002386:	f107 0314 	add.w	r3, r7, #20
 800238a:	4619      	mov	r1, r3
 800238c:	480d      	ldr	r0, [pc, #52]	; (80023c4 <HAL_SPI_MspInit+0xbc>)
 800238e:	f000 fb9d 	bl	8002acc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002392:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002396:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002398:	2302      	movs	r3, #2
 800239a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800239c:	2300      	movs	r3, #0
 800239e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023a0:	2303      	movs	r3, #3
 80023a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80023a4:	2305      	movs	r3, #5
 80023a6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023a8:	f107 0314 	add.w	r3, r7, #20
 80023ac:	4619      	mov	r1, r3
 80023ae:	4806      	ldr	r0, [pc, #24]	; (80023c8 <HAL_SPI_MspInit+0xc0>)
 80023b0:	f000 fb8c 	bl	8002acc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80023b4:	bf00      	nop
 80023b6:	3728      	adds	r7, #40	; 0x28
 80023b8:	46bd      	mov	sp, r7
 80023ba:	bd80      	pop	{r7, pc}
 80023bc:	40003800 	.word	0x40003800
 80023c0:	40023800 	.word	0x40023800
 80023c4:	40022000 	.word	0x40022000
 80023c8:	40020400 	.word	0x40020400

080023cc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80023cc:	b480      	push	{r7}
 80023ce:	b085      	sub	sp, #20
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80023dc:	d10b      	bne.n	80023f6 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80023de:	4b09      	ldr	r3, [pc, #36]	; (8002404 <HAL_TIM_Base_MspInit+0x38>)
 80023e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023e2:	4a08      	ldr	r2, [pc, #32]	; (8002404 <HAL_TIM_Base_MspInit+0x38>)
 80023e4:	f043 0301 	orr.w	r3, r3, #1
 80023e8:	6413      	str	r3, [r2, #64]	; 0x40
 80023ea:	4b06      	ldr	r3, [pc, #24]	; (8002404 <HAL_TIM_Base_MspInit+0x38>)
 80023ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ee:	f003 0301 	and.w	r3, r3, #1
 80023f2:	60fb      	str	r3, [r7, #12]
 80023f4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80023f6:	bf00      	nop
 80023f8:	3714      	adds	r7, #20
 80023fa:	46bd      	mov	sp, r7
 80023fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002400:	4770      	bx	lr
 8002402:	bf00      	nop
 8002404:	40023800 	.word	0x40023800

08002408 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002408:	b480      	push	{r7}
 800240a:	b085      	sub	sp, #20
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	4a0a      	ldr	r2, [pc, #40]	; (8002440 <HAL_TIM_PWM_MspInit+0x38>)
 8002416:	4293      	cmp	r3, r2
 8002418:	d10b      	bne.n	8002432 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800241a:	4b0a      	ldr	r3, [pc, #40]	; (8002444 <HAL_TIM_PWM_MspInit+0x3c>)
 800241c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800241e:	4a09      	ldr	r2, [pc, #36]	; (8002444 <HAL_TIM_PWM_MspInit+0x3c>)
 8002420:	f043 0302 	orr.w	r3, r3, #2
 8002424:	6413      	str	r3, [r2, #64]	; 0x40
 8002426:	4b07      	ldr	r3, [pc, #28]	; (8002444 <HAL_TIM_PWM_MspInit+0x3c>)
 8002428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800242a:	f003 0302 	and.w	r3, r3, #2
 800242e:	60fb      	str	r3, [r7, #12]
 8002430:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002432:	bf00      	nop
 8002434:	3714      	adds	r7, #20
 8002436:	46bd      	mov	sp, r7
 8002438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243c:	4770      	bx	lr
 800243e:	bf00      	nop
 8002440:	40000400 	.word	0x40000400
 8002444:	40023800 	.word	0x40023800

08002448 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b088      	sub	sp, #32
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002450:	f107 030c 	add.w	r3, r7, #12
 8002454:	2200      	movs	r2, #0
 8002456:	601a      	str	r2, [r3, #0]
 8002458:	605a      	str	r2, [r3, #4]
 800245a:	609a      	str	r2, [r3, #8]
 800245c:	60da      	str	r2, [r3, #12]
 800245e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	4a11      	ldr	r2, [pc, #68]	; (80024ac <HAL_TIM_MspPostInit+0x64>)
 8002466:	4293      	cmp	r3, r2
 8002468:	d11b      	bne.n	80024a2 <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800246a:	4b11      	ldr	r3, [pc, #68]	; (80024b0 <HAL_TIM_MspPostInit+0x68>)
 800246c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800246e:	4a10      	ldr	r2, [pc, #64]	; (80024b0 <HAL_TIM_MspPostInit+0x68>)
 8002470:	f043 0304 	orr.w	r3, r3, #4
 8002474:	6313      	str	r3, [r2, #48]	; 0x30
 8002476:	4b0e      	ldr	r3, [pc, #56]	; (80024b0 <HAL_TIM_MspPostInit+0x68>)
 8002478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800247a:	f003 0304 	and.w	r3, r3, #4
 800247e:	60bb      	str	r3, [r7, #8]
 8002480:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002482:	2380      	movs	r3, #128	; 0x80
 8002484:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002486:	2302      	movs	r3, #2
 8002488:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800248a:	2300      	movs	r3, #0
 800248c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800248e:	2300      	movs	r3, #0
 8002490:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002492:	2302      	movs	r3, #2
 8002494:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002496:	f107 030c 	add.w	r3, r7, #12
 800249a:	4619      	mov	r1, r3
 800249c:	4805      	ldr	r0, [pc, #20]	; (80024b4 <HAL_TIM_MspPostInit+0x6c>)
 800249e:	f000 fb15 	bl	8002acc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80024a2:	bf00      	nop
 80024a4:	3720      	adds	r7, #32
 80024a6:	46bd      	mov	sp, r7
 80024a8:	bd80      	pop	{r7, pc}
 80024aa:	bf00      	nop
 80024ac:	40000400 	.word	0x40000400
 80024b0:	40023800 	.word	0x40023800
 80024b4:	40020800 	.word	0x40020800

080024b8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b0ac      	sub	sp, #176	; 0xb0
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024c0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80024c4:	2200      	movs	r2, #0
 80024c6:	601a      	str	r2, [r3, #0]
 80024c8:	605a      	str	r2, [r3, #4]
 80024ca:	609a      	str	r2, [r3, #8]
 80024cc:	60da      	str	r2, [r3, #12]
 80024ce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80024d0:	f107 0318 	add.w	r3, r7, #24
 80024d4:	2284      	movs	r2, #132	; 0x84
 80024d6:	2100      	movs	r1, #0
 80024d8:	4618      	mov	r0, r3
 80024da:	f004 ff3b 	bl	8007354 <memset>
  if(huart->Instance==USART1)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	4a32      	ldr	r2, [pc, #200]	; (80025ac <HAL_UART_MspInit+0xf4>)
 80024e4:	4293      	cmp	r3, r2
 80024e6:	d15c      	bne.n	80025a2 <HAL_UART_MspInit+0xea>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80024e8:	2340      	movs	r3, #64	; 0x40
 80024ea:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80024ec:	2300      	movs	r3, #0
 80024ee:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80024f0:	f107 0318 	add.w	r3, r7, #24
 80024f4:	4618      	mov	r0, r3
 80024f6:	f002 f9b1 	bl	800485c <HAL_RCCEx_PeriphCLKConfig>
 80024fa:	4603      	mov	r3, r0
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d001      	beq.n	8002504 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002500:	f7ff fe78 	bl	80021f4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002504:	4b2a      	ldr	r3, [pc, #168]	; (80025b0 <HAL_UART_MspInit+0xf8>)
 8002506:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002508:	4a29      	ldr	r2, [pc, #164]	; (80025b0 <HAL_UART_MspInit+0xf8>)
 800250a:	f043 0310 	orr.w	r3, r3, #16
 800250e:	6453      	str	r3, [r2, #68]	; 0x44
 8002510:	4b27      	ldr	r3, [pc, #156]	; (80025b0 <HAL_UART_MspInit+0xf8>)
 8002512:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002514:	f003 0310 	and.w	r3, r3, #16
 8002518:	617b      	str	r3, [r7, #20]
 800251a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800251c:	4b24      	ldr	r3, [pc, #144]	; (80025b0 <HAL_UART_MspInit+0xf8>)
 800251e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002520:	4a23      	ldr	r2, [pc, #140]	; (80025b0 <HAL_UART_MspInit+0xf8>)
 8002522:	f043 0302 	orr.w	r3, r3, #2
 8002526:	6313      	str	r3, [r2, #48]	; 0x30
 8002528:	4b21      	ldr	r3, [pc, #132]	; (80025b0 <HAL_UART_MspInit+0xf8>)
 800252a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800252c:	f003 0302 	and.w	r3, r3, #2
 8002530:	613b      	str	r3, [r7, #16]
 8002532:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002534:	4b1e      	ldr	r3, [pc, #120]	; (80025b0 <HAL_UART_MspInit+0xf8>)
 8002536:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002538:	4a1d      	ldr	r2, [pc, #116]	; (80025b0 <HAL_UART_MspInit+0xf8>)
 800253a:	f043 0301 	orr.w	r3, r3, #1
 800253e:	6313      	str	r3, [r2, #48]	; 0x30
 8002540:	4b1b      	ldr	r3, [pc, #108]	; (80025b0 <HAL_UART_MspInit+0xf8>)
 8002542:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002544:	f003 0301 	and.w	r3, r3, #1
 8002548:	60fb      	str	r3, [r7, #12]
 800254a:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800254c:	2380      	movs	r3, #128	; 0x80
 800254e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002552:	2302      	movs	r3, #2
 8002554:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002558:	2300      	movs	r3, #0
 800255a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800255e:	2303      	movs	r3, #3
 8002560:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002564:	2307      	movs	r3, #7
 8002566:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800256a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800256e:	4619      	mov	r1, r3
 8002570:	4810      	ldr	r0, [pc, #64]	; (80025b4 <HAL_UART_MspInit+0xfc>)
 8002572:	f000 faab 	bl	8002acc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002576:	f44f 7300 	mov.w	r3, #512	; 0x200
 800257a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800257e:	2302      	movs	r3, #2
 8002580:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002584:	2300      	movs	r3, #0
 8002586:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800258a:	2303      	movs	r3, #3
 800258c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002590:	2307      	movs	r3, #7
 8002592:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002596:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800259a:	4619      	mov	r1, r3
 800259c:	4806      	ldr	r0, [pc, #24]	; (80025b8 <HAL_UART_MspInit+0x100>)
 800259e:	f000 fa95 	bl	8002acc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80025a2:	bf00      	nop
 80025a4:	37b0      	adds	r7, #176	; 0xb0
 80025a6:	46bd      	mov	sp, r7
 80025a8:	bd80      	pop	{r7, pc}
 80025aa:	bf00      	nop
 80025ac:	40011000 	.word	0x40011000
 80025b0:	40023800 	.word	0x40023800
 80025b4:	40020400 	.word	0x40020400
 80025b8:	40020000 	.word	0x40020000

080025bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80025bc:	b480      	push	{r7}
 80025be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80025c0:	e7fe      	b.n	80025c0 <NMI_Handler+0x4>

080025c2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80025c2:	b480      	push	{r7}
 80025c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80025c6:	e7fe      	b.n	80025c6 <HardFault_Handler+0x4>

080025c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80025c8:	b480      	push	{r7}
 80025ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80025cc:	e7fe      	b.n	80025cc <MemManage_Handler+0x4>

080025ce <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80025ce:	b480      	push	{r7}
 80025d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80025d2:	e7fe      	b.n	80025d2 <BusFault_Handler+0x4>

080025d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80025d4:	b480      	push	{r7}
 80025d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80025d8:	e7fe      	b.n	80025d8 <UsageFault_Handler+0x4>

080025da <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80025da:	b480      	push	{r7}
 80025dc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80025de:	bf00      	nop
 80025e0:	46bd      	mov	sp, r7
 80025e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e6:	4770      	bx	lr

080025e8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80025e8:	b480      	push	{r7}
 80025ea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80025ec:	bf00      	nop
 80025ee:	46bd      	mov	sp, r7
 80025f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f4:	4770      	bx	lr

080025f6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80025f6:	b480      	push	{r7}
 80025f8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80025fa:	bf00      	nop
 80025fc:	46bd      	mov	sp, r7
 80025fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002602:	4770      	bx	lr

08002604 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002608:	f000 f90a 	bl	8002820 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800260c:	bf00      	nop
 800260e:	bd80      	pop	{r7, pc}

08002610 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

	Interrupt_flank();
 8002614:	f7ff f840 	bl	8001698 <Interrupt_flank>
  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(IRread_Pin);
 8002618:	2001      	movs	r0, #1
 800261a:	f000 fc1d 	bl	8002e58 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800261e:	bf00      	nop
 8002620:	bd80      	pop	{r7, pc}

08002622 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002622:	b580      	push	{r7, lr}
 8002624:	b086      	sub	sp, #24
 8002626:	af00      	add	r7, sp, #0
 8002628:	60f8      	str	r0, [r7, #12]
 800262a:	60b9      	str	r1, [r7, #8]
 800262c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800262e:	2300      	movs	r3, #0
 8002630:	617b      	str	r3, [r7, #20]
 8002632:	e00a      	b.n	800264a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002634:	f3af 8000 	nop.w
 8002638:	4601      	mov	r1, r0
 800263a:	68bb      	ldr	r3, [r7, #8]
 800263c:	1c5a      	adds	r2, r3, #1
 800263e:	60ba      	str	r2, [r7, #8]
 8002640:	b2ca      	uxtb	r2, r1
 8002642:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002644:	697b      	ldr	r3, [r7, #20]
 8002646:	3301      	adds	r3, #1
 8002648:	617b      	str	r3, [r7, #20]
 800264a:	697a      	ldr	r2, [r7, #20]
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	429a      	cmp	r2, r3
 8002650:	dbf0      	blt.n	8002634 <_read+0x12>
  }

  return len;
 8002652:	687b      	ldr	r3, [r7, #4]
}
 8002654:	4618      	mov	r0, r3
 8002656:	3718      	adds	r7, #24
 8002658:	46bd      	mov	sp, r7
 800265a:	bd80      	pop	{r7, pc}

0800265c <_close>:
  }
  return len;
}

int _close(int file)
{
 800265c:	b480      	push	{r7}
 800265e:	b083      	sub	sp, #12
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002664:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002668:	4618      	mov	r0, r3
 800266a:	370c      	adds	r7, #12
 800266c:	46bd      	mov	sp, r7
 800266e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002672:	4770      	bx	lr

08002674 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002674:	b480      	push	{r7}
 8002676:	b083      	sub	sp, #12
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
 800267c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002684:	605a      	str	r2, [r3, #4]
  return 0;
 8002686:	2300      	movs	r3, #0
}
 8002688:	4618      	mov	r0, r3
 800268a:	370c      	adds	r7, #12
 800268c:	46bd      	mov	sp, r7
 800268e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002692:	4770      	bx	lr

08002694 <_isatty>:

int _isatty(int file)
{
 8002694:	b480      	push	{r7}
 8002696:	b083      	sub	sp, #12
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800269c:	2301      	movs	r3, #1
}
 800269e:	4618      	mov	r0, r3
 80026a0:	370c      	adds	r7, #12
 80026a2:	46bd      	mov	sp, r7
 80026a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a8:	4770      	bx	lr

080026aa <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80026aa:	b480      	push	{r7}
 80026ac:	b085      	sub	sp, #20
 80026ae:	af00      	add	r7, sp, #0
 80026b0:	60f8      	str	r0, [r7, #12]
 80026b2:	60b9      	str	r1, [r7, #8]
 80026b4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80026b6:	2300      	movs	r3, #0
}
 80026b8:	4618      	mov	r0, r3
 80026ba:	3714      	adds	r7, #20
 80026bc:	46bd      	mov	sp, r7
 80026be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c2:	4770      	bx	lr

080026c4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b086      	sub	sp, #24
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80026cc:	4a14      	ldr	r2, [pc, #80]	; (8002720 <_sbrk+0x5c>)
 80026ce:	4b15      	ldr	r3, [pc, #84]	; (8002724 <_sbrk+0x60>)
 80026d0:	1ad3      	subs	r3, r2, r3
 80026d2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80026d4:	697b      	ldr	r3, [r7, #20]
 80026d6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80026d8:	4b13      	ldr	r3, [pc, #76]	; (8002728 <_sbrk+0x64>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d102      	bne.n	80026e6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80026e0:	4b11      	ldr	r3, [pc, #68]	; (8002728 <_sbrk+0x64>)
 80026e2:	4a12      	ldr	r2, [pc, #72]	; (800272c <_sbrk+0x68>)
 80026e4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80026e6:	4b10      	ldr	r3, [pc, #64]	; (8002728 <_sbrk+0x64>)
 80026e8:	681a      	ldr	r2, [r3, #0]
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	4413      	add	r3, r2
 80026ee:	693a      	ldr	r2, [r7, #16]
 80026f0:	429a      	cmp	r2, r3
 80026f2:	d207      	bcs.n	8002704 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80026f4:	f004 fe04 	bl	8007300 <__errno>
 80026f8:	4603      	mov	r3, r0
 80026fa:	220c      	movs	r2, #12
 80026fc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80026fe:	f04f 33ff 	mov.w	r3, #4294967295
 8002702:	e009      	b.n	8002718 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002704:	4b08      	ldr	r3, [pc, #32]	; (8002728 <_sbrk+0x64>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800270a:	4b07      	ldr	r3, [pc, #28]	; (8002728 <_sbrk+0x64>)
 800270c:	681a      	ldr	r2, [r3, #0]
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	4413      	add	r3, r2
 8002712:	4a05      	ldr	r2, [pc, #20]	; (8002728 <_sbrk+0x64>)
 8002714:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002716:	68fb      	ldr	r3, [r7, #12]
}
 8002718:	4618      	mov	r0, r3
 800271a:	3718      	adds	r7, #24
 800271c:	46bd      	mov	sp, r7
 800271e:	bd80      	pop	{r7, pc}
 8002720:	20050000 	.word	0x20050000
 8002724:	00000400 	.word	0x00000400
 8002728:	200054e8 	.word	0x200054e8
 800272c:	20005500 	.word	0x20005500

08002730 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002730:	b480      	push	{r7}
 8002732:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002734:	4b06      	ldr	r3, [pc, #24]	; (8002750 <SystemInit+0x20>)
 8002736:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800273a:	4a05      	ldr	r2, [pc, #20]	; (8002750 <SystemInit+0x20>)
 800273c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002740:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002744:	bf00      	nop
 8002746:	46bd      	mov	sp, r7
 8002748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274c:	4770      	bx	lr
 800274e:	bf00      	nop
 8002750:	e000ed00 	.word	0xe000ed00

08002754 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002754:	f8df d034 	ldr.w	sp, [pc, #52]	; 800278c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002758:	480d      	ldr	r0, [pc, #52]	; (8002790 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800275a:	490e      	ldr	r1, [pc, #56]	; (8002794 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800275c:	4a0e      	ldr	r2, [pc, #56]	; (8002798 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800275e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002760:	e002      	b.n	8002768 <LoopCopyDataInit>

08002762 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002762:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002764:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002766:	3304      	adds	r3, #4

08002768 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002768:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800276a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800276c:	d3f9      	bcc.n	8002762 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800276e:	4a0b      	ldr	r2, [pc, #44]	; (800279c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002770:	4c0b      	ldr	r4, [pc, #44]	; (80027a0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002772:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002774:	e001      	b.n	800277a <LoopFillZerobss>

08002776 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002776:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002778:	3204      	adds	r2, #4

0800277a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800277a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800277c:	d3fb      	bcc.n	8002776 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800277e:	f7ff ffd7 	bl	8002730 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002782:	f004 fdc3 	bl	800730c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002786:	f7ff facd 	bl	8001d24 <main>
  bx  lr    
 800278a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800278c:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8002790:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002794:	20004f00 	.word	0x20004f00
  ldr r2, =_sidata
 8002798:	0800896c 	.word	0x0800896c
  ldr r2, =_sbss
 800279c:	20004f00 	.word	0x20004f00
  ldr r4, =_ebss
 80027a0:	20005500 	.word	0x20005500

080027a4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80027a4:	e7fe      	b.n	80027a4 <ADC_IRQHandler>

080027a6 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80027a6:	b580      	push	{r7, lr}
 80027a8:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80027aa:	2003      	movs	r0, #3
 80027ac:	f000 f94c 	bl	8002a48 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80027b0:	2000      	movs	r0, #0
 80027b2:	f000 f805 	bl	80027c0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80027b6:	f7ff fd23 	bl	8002200 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80027ba:	2300      	movs	r3, #0
}
 80027bc:	4618      	mov	r0, r3
 80027be:	bd80      	pop	{r7, pc}

080027c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b082      	sub	sp, #8
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80027c8:	4b12      	ldr	r3, [pc, #72]	; (8002814 <HAL_InitTick+0x54>)
 80027ca:	681a      	ldr	r2, [r3, #0]
 80027cc:	4b12      	ldr	r3, [pc, #72]	; (8002818 <HAL_InitTick+0x58>)
 80027ce:	781b      	ldrb	r3, [r3, #0]
 80027d0:	4619      	mov	r1, r3
 80027d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80027d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80027da:	fbb2 f3f3 	udiv	r3, r2, r3
 80027de:	4618      	mov	r0, r3
 80027e0:	f000 f967 	bl	8002ab2 <HAL_SYSTICK_Config>
 80027e4:	4603      	mov	r3, r0
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d001      	beq.n	80027ee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80027ea:	2301      	movs	r3, #1
 80027ec:	e00e      	b.n	800280c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	2b0f      	cmp	r3, #15
 80027f2:	d80a      	bhi.n	800280a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80027f4:	2200      	movs	r2, #0
 80027f6:	6879      	ldr	r1, [r7, #4]
 80027f8:	f04f 30ff 	mov.w	r0, #4294967295
 80027fc:	f000 f92f 	bl	8002a5e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002800:	4a06      	ldr	r2, [pc, #24]	; (800281c <HAL_InitTick+0x5c>)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002806:	2300      	movs	r3, #0
 8002808:	e000      	b.n	800280c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800280a:	2301      	movs	r3, #1
}
 800280c:	4618      	mov	r0, r3
 800280e:	3708      	adds	r7, #8
 8002810:	46bd      	mov	sp, r7
 8002812:	bd80      	pop	{r7, pc}
 8002814:	20004e90 	.word	0x20004e90
 8002818:	20004e98 	.word	0x20004e98
 800281c:	20004e94 	.word	0x20004e94

08002820 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002820:	b480      	push	{r7}
 8002822:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002824:	4b06      	ldr	r3, [pc, #24]	; (8002840 <HAL_IncTick+0x20>)
 8002826:	781b      	ldrb	r3, [r3, #0]
 8002828:	461a      	mov	r2, r3
 800282a:	4b06      	ldr	r3, [pc, #24]	; (8002844 <HAL_IncTick+0x24>)
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	4413      	add	r3, r2
 8002830:	4a04      	ldr	r2, [pc, #16]	; (8002844 <HAL_IncTick+0x24>)
 8002832:	6013      	str	r3, [r2, #0]
}
 8002834:	bf00      	nop
 8002836:	46bd      	mov	sp, r7
 8002838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283c:	4770      	bx	lr
 800283e:	bf00      	nop
 8002840:	20004e98 	.word	0x20004e98
 8002844:	200054ec 	.word	0x200054ec

08002848 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002848:	b480      	push	{r7}
 800284a:	af00      	add	r7, sp, #0
  return uwTick;
 800284c:	4b03      	ldr	r3, [pc, #12]	; (800285c <HAL_GetTick+0x14>)
 800284e:	681b      	ldr	r3, [r3, #0]
}
 8002850:	4618      	mov	r0, r3
 8002852:	46bd      	mov	sp, r7
 8002854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002858:	4770      	bx	lr
 800285a:	bf00      	nop
 800285c:	200054ec 	.word	0x200054ec

08002860 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b084      	sub	sp, #16
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002868:	f7ff ffee 	bl	8002848 <HAL_GetTick>
 800286c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002878:	d005      	beq.n	8002886 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800287a:	4b0a      	ldr	r3, [pc, #40]	; (80028a4 <HAL_Delay+0x44>)
 800287c:	781b      	ldrb	r3, [r3, #0]
 800287e:	461a      	mov	r2, r3
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	4413      	add	r3, r2
 8002884:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002886:	bf00      	nop
 8002888:	f7ff ffde 	bl	8002848 <HAL_GetTick>
 800288c:	4602      	mov	r2, r0
 800288e:	68bb      	ldr	r3, [r7, #8]
 8002890:	1ad3      	subs	r3, r2, r3
 8002892:	68fa      	ldr	r2, [r7, #12]
 8002894:	429a      	cmp	r2, r3
 8002896:	d8f7      	bhi.n	8002888 <HAL_Delay+0x28>
  {
  }
}
 8002898:	bf00      	nop
 800289a:	bf00      	nop
 800289c:	3710      	adds	r7, #16
 800289e:	46bd      	mov	sp, r7
 80028a0:	bd80      	pop	{r7, pc}
 80028a2:	bf00      	nop
 80028a4:	20004e98 	.word	0x20004e98

080028a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028a8:	b480      	push	{r7}
 80028aa:	b085      	sub	sp, #20
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	f003 0307 	and.w	r3, r3, #7
 80028b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80028b8:	4b0b      	ldr	r3, [pc, #44]	; (80028e8 <__NVIC_SetPriorityGrouping+0x40>)
 80028ba:	68db      	ldr	r3, [r3, #12]
 80028bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80028be:	68ba      	ldr	r2, [r7, #8]
 80028c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80028c4:	4013      	ands	r3, r2
 80028c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80028cc:	68bb      	ldr	r3, [r7, #8]
 80028ce:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80028d0:	4b06      	ldr	r3, [pc, #24]	; (80028ec <__NVIC_SetPriorityGrouping+0x44>)
 80028d2:	4313      	orrs	r3, r2
 80028d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80028d6:	4a04      	ldr	r2, [pc, #16]	; (80028e8 <__NVIC_SetPriorityGrouping+0x40>)
 80028d8:	68bb      	ldr	r3, [r7, #8]
 80028da:	60d3      	str	r3, [r2, #12]
}
 80028dc:	bf00      	nop
 80028de:	3714      	adds	r7, #20
 80028e0:	46bd      	mov	sp, r7
 80028e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e6:	4770      	bx	lr
 80028e8:	e000ed00 	.word	0xe000ed00
 80028ec:	05fa0000 	.word	0x05fa0000

080028f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80028f0:	b480      	push	{r7}
 80028f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80028f4:	4b04      	ldr	r3, [pc, #16]	; (8002908 <__NVIC_GetPriorityGrouping+0x18>)
 80028f6:	68db      	ldr	r3, [r3, #12]
 80028f8:	0a1b      	lsrs	r3, r3, #8
 80028fa:	f003 0307 	and.w	r3, r3, #7
}
 80028fe:	4618      	mov	r0, r3
 8002900:	46bd      	mov	sp, r7
 8002902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002906:	4770      	bx	lr
 8002908:	e000ed00 	.word	0xe000ed00

0800290c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800290c:	b480      	push	{r7}
 800290e:	b083      	sub	sp, #12
 8002910:	af00      	add	r7, sp, #0
 8002912:	4603      	mov	r3, r0
 8002914:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002916:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800291a:	2b00      	cmp	r3, #0
 800291c:	db0b      	blt.n	8002936 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800291e:	79fb      	ldrb	r3, [r7, #7]
 8002920:	f003 021f 	and.w	r2, r3, #31
 8002924:	4907      	ldr	r1, [pc, #28]	; (8002944 <__NVIC_EnableIRQ+0x38>)
 8002926:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800292a:	095b      	lsrs	r3, r3, #5
 800292c:	2001      	movs	r0, #1
 800292e:	fa00 f202 	lsl.w	r2, r0, r2
 8002932:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002936:	bf00      	nop
 8002938:	370c      	adds	r7, #12
 800293a:	46bd      	mov	sp, r7
 800293c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002940:	4770      	bx	lr
 8002942:	bf00      	nop
 8002944:	e000e100 	.word	0xe000e100

08002948 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002948:	b480      	push	{r7}
 800294a:	b083      	sub	sp, #12
 800294c:	af00      	add	r7, sp, #0
 800294e:	4603      	mov	r3, r0
 8002950:	6039      	str	r1, [r7, #0]
 8002952:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002954:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002958:	2b00      	cmp	r3, #0
 800295a:	db0a      	blt.n	8002972 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	b2da      	uxtb	r2, r3
 8002960:	490c      	ldr	r1, [pc, #48]	; (8002994 <__NVIC_SetPriority+0x4c>)
 8002962:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002966:	0112      	lsls	r2, r2, #4
 8002968:	b2d2      	uxtb	r2, r2
 800296a:	440b      	add	r3, r1
 800296c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002970:	e00a      	b.n	8002988 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	b2da      	uxtb	r2, r3
 8002976:	4908      	ldr	r1, [pc, #32]	; (8002998 <__NVIC_SetPriority+0x50>)
 8002978:	79fb      	ldrb	r3, [r7, #7]
 800297a:	f003 030f 	and.w	r3, r3, #15
 800297e:	3b04      	subs	r3, #4
 8002980:	0112      	lsls	r2, r2, #4
 8002982:	b2d2      	uxtb	r2, r2
 8002984:	440b      	add	r3, r1
 8002986:	761a      	strb	r2, [r3, #24]
}
 8002988:	bf00      	nop
 800298a:	370c      	adds	r7, #12
 800298c:	46bd      	mov	sp, r7
 800298e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002992:	4770      	bx	lr
 8002994:	e000e100 	.word	0xe000e100
 8002998:	e000ed00 	.word	0xe000ed00

0800299c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800299c:	b480      	push	{r7}
 800299e:	b089      	sub	sp, #36	; 0x24
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	60f8      	str	r0, [r7, #12]
 80029a4:	60b9      	str	r1, [r7, #8]
 80029a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	f003 0307 	and.w	r3, r3, #7
 80029ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80029b0:	69fb      	ldr	r3, [r7, #28]
 80029b2:	f1c3 0307 	rsb	r3, r3, #7
 80029b6:	2b04      	cmp	r3, #4
 80029b8:	bf28      	it	cs
 80029ba:	2304      	movcs	r3, #4
 80029bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80029be:	69fb      	ldr	r3, [r7, #28]
 80029c0:	3304      	adds	r3, #4
 80029c2:	2b06      	cmp	r3, #6
 80029c4:	d902      	bls.n	80029cc <NVIC_EncodePriority+0x30>
 80029c6:	69fb      	ldr	r3, [r7, #28]
 80029c8:	3b03      	subs	r3, #3
 80029ca:	e000      	b.n	80029ce <NVIC_EncodePriority+0x32>
 80029cc:	2300      	movs	r3, #0
 80029ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029d0:	f04f 32ff 	mov.w	r2, #4294967295
 80029d4:	69bb      	ldr	r3, [r7, #24]
 80029d6:	fa02 f303 	lsl.w	r3, r2, r3
 80029da:	43da      	mvns	r2, r3
 80029dc:	68bb      	ldr	r3, [r7, #8]
 80029de:	401a      	ands	r2, r3
 80029e0:	697b      	ldr	r3, [r7, #20]
 80029e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80029e4:	f04f 31ff 	mov.w	r1, #4294967295
 80029e8:	697b      	ldr	r3, [r7, #20]
 80029ea:	fa01 f303 	lsl.w	r3, r1, r3
 80029ee:	43d9      	mvns	r1, r3
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029f4:	4313      	orrs	r3, r2
         );
}
 80029f6:	4618      	mov	r0, r3
 80029f8:	3724      	adds	r7, #36	; 0x24
 80029fa:	46bd      	mov	sp, r7
 80029fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a00:	4770      	bx	lr
	...

08002a04 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b082      	sub	sp, #8
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	3b01      	subs	r3, #1
 8002a10:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002a14:	d301      	bcc.n	8002a1a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002a16:	2301      	movs	r3, #1
 8002a18:	e00f      	b.n	8002a3a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a1a:	4a0a      	ldr	r2, [pc, #40]	; (8002a44 <SysTick_Config+0x40>)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	3b01      	subs	r3, #1
 8002a20:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002a22:	210f      	movs	r1, #15
 8002a24:	f04f 30ff 	mov.w	r0, #4294967295
 8002a28:	f7ff ff8e 	bl	8002948 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002a2c:	4b05      	ldr	r3, [pc, #20]	; (8002a44 <SysTick_Config+0x40>)
 8002a2e:	2200      	movs	r2, #0
 8002a30:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002a32:	4b04      	ldr	r3, [pc, #16]	; (8002a44 <SysTick_Config+0x40>)
 8002a34:	2207      	movs	r2, #7
 8002a36:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002a38:	2300      	movs	r3, #0
}
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	3708      	adds	r7, #8
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	bd80      	pop	{r7, pc}
 8002a42:	bf00      	nop
 8002a44:	e000e010 	.word	0xe000e010

08002a48 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b082      	sub	sp, #8
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a50:	6878      	ldr	r0, [r7, #4]
 8002a52:	f7ff ff29 	bl	80028a8 <__NVIC_SetPriorityGrouping>
}
 8002a56:	bf00      	nop
 8002a58:	3708      	adds	r7, #8
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	bd80      	pop	{r7, pc}

08002a5e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002a5e:	b580      	push	{r7, lr}
 8002a60:	b086      	sub	sp, #24
 8002a62:	af00      	add	r7, sp, #0
 8002a64:	4603      	mov	r3, r0
 8002a66:	60b9      	str	r1, [r7, #8]
 8002a68:	607a      	str	r2, [r7, #4]
 8002a6a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002a70:	f7ff ff3e 	bl	80028f0 <__NVIC_GetPriorityGrouping>
 8002a74:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a76:	687a      	ldr	r2, [r7, #4]
 8002a78:	68b9      	ldr	r1, [r7, #8]
 8002a7a:	6978      	ldr	r0, [r7, #20]
 8002a7c:	f7ff ff8e 	bl	800299c <NVIC_EncodePriority>
 8002a80:	4602      	mov	r2, r0
 8002a82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a86:	4611      	mov	r1, r2
 8002a88:	4618      	mov	r0, r3
 8002a8a:	f7ff ff5d 	bl	8002948 <__NVIC_SetPriority>
}
 8002a8e:	bf00      	nop
 8002a90:	3718      	adds	r7, #24
 8002a92:	46bd      	mov	sp, r7
 8002a94:	bd80      	pop	{r7, pc}

08002a96 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a96:	b580      	push	{r7, lr}
 8002a98:	b082      	sub	sp, #8
 8002a9a:	af00      	add	r7, sp, #0
 8002a9c:	4603      	mov	r3, r0
 8002a9e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002aa0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	f7ff ff31 	bl	800290c <__NVIC_EnableIRQ>
}
 8002aaa:	bf00      	nop
 8002aac:	3708      	adds	r7, #8
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	bd80      	pop	{r7, pc}

08002ab2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002ab2:	b580      	push	{r7, lr}
 8002ab4:	b082      	sub	sp, #8
 8002ab6:	af00      	add	r7, sp, #0
 8002ab8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002aba:	6878      	ldr	r0, [r7, #4]
 8002abc:	f7ff ffa2 	bl	8002a04 <SysTick_Config>
 8002ac0:	4603      	mov	r3, r0
}
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	3708      	adds	r7, #8
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	bd80      	pop	{r7, pc}
	...

08002acc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002acc:	b480      	push	{r7}
 8002ace:	b089      	sub	sp, #36	; 0x24
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
 8002ad4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002ada:	2300      	movs	r3, #0
 8002adc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002ade:	2300      	movs	r3, #0
 8002ae0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	61fb      	str	r3, [r7, #28]
 8002aea:	e175      	b.n	8002dd8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002aec:	2201      	movs	r2, #1
 8002aee:	69fb      	ldr	r3, [r7, #28]
 8002af0:	fa02 f303 	lsl.w	r3, r2, r3
 8002af4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	697a      	ldr	r2, [r7, #20]
 8002afc:	4013      	ands	r3, r2
 8002afe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002b00:	693a      	ldr	r2, [r7, #16]
 8002b02:	697b      	ldr	r3, [r7, #20]
 8002b04:	429a      	cmp	r2, r3
 8002b06:	f040 8164 	bne.w	8002dd2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002b0a:	683b      	ldr	r3, [r7, #0]
 8002b0c:	685b      	ldr	r3, [r3, #4]
 8002b0e:	f003 0303 	and.w	r3, r3, #3
 8002b12:	2b01      	cmp	r3, #1
 8002b14:	d005      	beq.n	8002b22 <HAL_GPIO_Init+0x56>
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	685b      	ldr	r3, [r3, #4]
 8002b1a:	f003 0303 	and.w	r3, r3, #3
 8002b1e:	2b02      	cmp	r3, #2
 8002b20:	d130      	bne.n	8002b84 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	689b      	ldr	r3, [r3, #8]
 8002b26:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002b28:	69fb      	ldr	r3, [r7, #28]
 8002b2a:	005b      	lsls	r3, r3, #1
 8002b2c:	2203      	movs	r2, #3
 8002b2e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b32:	43db      	mvns	r3, r3
 8002b34:	69ba      	ldr	r2, [r7, #24]
 8002b36:	4013      	ands	r3, r2
 8002b38:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	68da      	ldr	r2, [r3, #12]
 8002b3e:	69fb      	ldr	r3, [r7, #28]
 8002b40:	005b      	lsls	r3, r3, #1
 8002b42:	fa02 f303 	lsl.w	r3, r2, r3
 8002b46:	69ba      	ldr	r2, [r7, #24]
 8002b48:	4313      	orrs	r3, r2
 8002b4a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	69ba      	ldr	r2, [r7, #24]
 8002b50:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	685b      	ldr	r3, [r3, #4]
 8002b56:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002b58:	2201      	movs	r2, #1
 8002b5a:	69fb      	ldr	r3, [r7, #28]
 8002b5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b60:	43db      	mvns	r3, r3
 8002b62:	69ba      	ldr	r2, [r7, #24]
 8002b64:	4013      	ands	r3, r2
 8002b66:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	685b      	ldr	r3, [r3, #4]
 8002b6c:	091b      	lsrs	r3, r3, #4
 8002b6e:	f003 0201 	and.w	r2, r3, #1
 8002b72:	69fb      	ldr	r3, [r7, #28]
 8002b74:	fa02 f303 	lsl.w	r3, r2, r3
 8002b78:	69ba      	ldr	r2, [r7, #24]
 8002b7a:	4313      	orrs	r3, r2
 8002b7c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	69ba      	ldr	r2, [r7, #24]
 8002b82:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	685b      	ldr	r3, [r3, #4]
 8002b88:	f003 0303 	and.w	r3, r3, #3
 8002b8c:	2b03      	cmp	r3, #3
 8002b8e:	d017      	beq.n	8002bc0 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	68db      	ldr	r3, [r3, #12]
 8002b94:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002b96:	69fb      	ldr	r3, [r7, #28]
 8002b98:	005b      	lsls	r3, r3, #1
 8002b9a:	2203      	movs	r2, #3
 8002b9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba0:	43db      	mvns	r3, r3
 8002ba2:	69ba      	ldr	r2, [r7, #24]
 8002ba4:	4013      	ands	r3, r2
 8002ba6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	689a      	ldr	r2, [r3, #8]
 8002bac:	69fb      	ldr	r3, [r7, #28]
 8002bae:	005b      	lsls	r3, r3, #1
 8002bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8002bb4:	69ba      	ldr	r2, [r7, #24]
 8002bb6:	4313      	orrs	r3, r2
 8002bb8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	69ba      	ldr	r2, [r7, #24]
 8002bbe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	685b      	ldr	r3, [r3, #4]
 8002bc4:	f003 0303 	and.w	r3, r3, #3
 8002bc8:	2b02      	cmp	r3, #2
 8002bca:	d123      	bne.n	8002c14 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002bcc:	69fb      	ldr	r3, [r7, #28]
 8002bce:	08da      	lsrs	r2, r3, #3
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	3208      	adds	r2, #8
 8002bd4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002bd8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002bda:	69fb      	ldr	r3, [r7, #28]
 8002bdc:	f003 0307 	and.w	r3, r3, #7
 8002be0:	009b      	lsls	r3, r3, #2
 8002be2:	220f      	movs	r2, #15
 8002be4:	fa02 f303 	lsl.w	r3, r2, r3
 8002be8:	43db      	mvns	r3, r3
 8002bea:	69ba      	ldr	r2, [r7, #24]
 8002bec:	4013      	ands	r3, r2
 8002bee:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	691a      	ldr	r2, [r3, #16]
 8002bf4:	69fb      	ldr	r3, [r7, #28]
 8002bf6:	f003 0307 	and.w	r3, r3, #7
 8002bfa:	009b      	lsls	r3, r3, #2
 8002bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8002c00:	69ba      	ldr	r2, [r7, #24]
 8002c02:	4313      	orrs	r3, r2
 8002c04:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002c06:	69fb      	ldr	r3, [r7, #28]
 8002c08:	08da      	lsrs	r2, r3, #3
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	3208      	adds	r2, #8
 8002c0e:	69b9      	ldr	r1, [r7, #24]
 8002c10:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002c1a:	69fb      	ldr	r3, [r7, #28]
 8002c1c:	005b      	lsls	r3, r3, #1
 8002c1e:	2203      	movs	r2, #3
 8002c20:	fa02 f303 	lsl.w	r3, r2, r3
 8002c24:	43db      	mvns	r3, r3
 8002c26:	69ba      	ldr	r2, [r7, #24]
 8002c28:	4013      	ands	r3, r2
 8002c2a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	685b      	ldr	r3, [r3, #4]
 8002c30:	f003 0203 	and.w	r2, r3, #3
 8002c34:	69fb      	ldr	r3, [r7, #28]
 8002c36:	005b      	lsls	r3, r3, #1
 8002c38:	fa02 f303 	lsl.w	r3, r2, r3
 8002c3c:	69ba      	ldr	r2, [r7, #24]
 8002c3e:	4313      	orrs	r3, r2
 8002c40:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	69ba      	ldr	r2, [r7, #24]
 8002c46:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	685b      	ldr	r3, [r3, #4]
 8002c4c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	f000 80be 	beq.w	8002dd2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c56:	4b66      	ldr	r3, [pc, #408]	; (8002df0 <HAL_GPIO_Init+0x324>)
 8002c58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c5a:	4a65      	ldr	r2, [pc, #404]	; (8002df0 <HAL_GPIO_Init+0x324>)
 8002c5c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c60:	6453      	str	r3, [r2, #68]	; 0x44
 8002c62:	4b63      	ldr	r3, [pc, #396]	; (8002df0 <HAL_GPIO_Init+0x324>)
 8002c64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c6a:	60fb      	str	r3, [r7, #12]
 8002c6c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002c6e:	4a61      	ldr	r2, [pc, #388]	; (8002df4 <HAL_GPIO_Init+0x328>)
 8002c70:	69fb      	ldr	r3, [r7, #28]
 8002c72:	089b      	lsrs	r3, r3, #2
 8002c74:	3302      	adds	r3, #2
 8002c76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002c7c:	69fb      	ldr	r3, [r7, #28]
 8002c7e:	f003 0303 	and.w	r3, r3, #3
 8002c82:	009b      	lsls	r3, r3, #2
 8002c84:	220f      	movs	r2, #15
 8002c86:	fa02 f303 	lsl.w	r3, r2, r3
 8002c8a:	43db      	mvns	r3, r3
 8002c8c:	69ba      	ldr	r2, [r7, #24]
 8002c8e:	4013      	ands	r3, r2
 8002c90:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	4a58      	ldr	r2, [pc, #352]	; (8002df8 <HAL_GPIO_Init+0x32c>)
 8002c96:	4293      	cmp	r3, r2
 8002c98:	d037      	beq.n	8002d0a <HAL_GPIO_Init+0x23e>
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	4a57      	ldr	r2, [pc, #348]	; (8002dfc <HAL_GPIO_Init+0x330>)
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	d031      	beq.n	8002d06 <HAL_GPIO_Init+0x23a>
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	4a56      	ldr	r2, [pc, #344]	; (8002e00 <HAL_GPIO_Init+0x334>)
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	d02b      	beq.n	8002d02 <HAL_GPIO_Init+0x236>
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	4a55      	ldr	r2, [pc, #340]	; (8002e04 <HAL_GPIO_Init+0x338>)
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	d025      	beq.n	8002cfe <HAL_GPIO_Init+0x232>
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	4a54      	ldr	r2, [pc, #336]	; (8002e08 <HAL_GPIO_Init+0x33c>)
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	d01f      	beq.n	8002cfa <HAL_GPIO_Init+0x22e>
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	4a53      	ldr	r2, [pc, #332]	; (8002e0c <HAL_GPIO_Init+0x340>)
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	d019      	beq.n	8002cf6 <HAL_GPIO_Init+0x22a>
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	4a52      	ldr	r2, [pc, #328]	; (8002e10 <HAL_GPIO_Init+0x344>)
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	d013      	beq.n	8002cf2 <HAL_GPIO_Init+0x226>
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	4a51      	ldr	r2, [pc, #324]	; (8002e14 <HAL_GPIO_Init+0x348>)
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	d00d      	beq.n	8002cee <HAL_GPIO_Init+0x222>
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	4a50      	ldr	r2, [pc, #320]	; (8002e18 <HAL_GPIO_Init+0x34c>)
 8002cd6:	4293      	cmp	r3, r2
 8002cd8:	d007      	beq.n	8002cea <HAL_GPIO_Init+0x21e>
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	4a4f      	ldr	r2, [pc, #316]	; (8002e1c <HAL_GPIO_Init+0x350>)
 8002cde:	4293      	cmp	r3, r2
 8002ce0:	d101      	bne.n	8002ce6 <HAL_GPIO_Init+0x21a>
 8002ce2:	2309      	movs	r3, #9
 8002ce4:	e012      	b.n	8002d0c <HAL_GPIO_Init+0x240>
 8002ce6:	230a      	movs	r3, #10
 8002ce8:	e010      	b.n	8002d0c <HAL_GPIO_Init+0x240>
 8002cea:	2308      	movs	r3, #8
 8002cec:	e00e      	b.n	8002d0c <HAL_GPIO_Init+0x240>
 8002cee:	2307      	movs	r3, #7
 8002cf0:	e00c      	b.n	8002d0c <HAL_GPIO_Init+0x240>
 8002cf2:	2306      	movs	r3, #6
 8002cf4:	e00a      	b.n	8002d0c <HAL_GPIO_Init+0x240>
 8002cf6:	2305      	movs	r3, #5
 8002cf8:	e008      	b.n	8002d0c <HAL_GPIO_Init+0x240>
 8002cfa:	2304      	movs	r3, #4
 8002cfc:	e006      	b.n	8002d0c <HAL_GPIO_Init+0x240>
 8002cfe:	2303      	movs	r3, #3
 8002d00:	e004      	b.n	8002d0c <HAL_GPIO_Init+0x240>
 8002d02:	2302      	movs	r3, #2
 8002d04:	e002      	b.n	8002d0c <HAL_GPIO_Init+0x240>
 8002d06:	2301      	movs	r3, #1
 8002d08:	e000      	b.n	8002d0c <HAL_GPIO_Init+0x240>
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	69fa      	ldr	r2, [r7, #28]
 8002d0e:	f002 0203 	and.w	r2, r2, #3
 8002d12:	0092      	lsls	r2, r2, #2
 8002d14:	4093      	lsls	r3, r2
 8002d16:	69ba      	ldr	r2, [r7, #24]
 8002d18:	4313      	orrs	r3, r2
 8002d1a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002d1c:	4935      	ldr	r1, [pc, #212]	; (8002df4 <HAL_GPIO_Init+0x328>)
 8002d1e:	69fb      	ldr	r3, [r7, #28]
 8002d20:	089b      	lsrs	r3, r3, #2
 8002d22:	3302      	adds	r3, #2
 8002d24:	69ba      	ldr	r2, [r7, #24]
 8002d26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002d2a:	4b3d      	ldr	r3, [pc, #244]	; (8002e20 <HAL_GPIO_Init+0x354>)
 8002d2c:	689b      	ldr	r3, [r3, #8]
 8002d2e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d30:	693b      	ldr	r3, [r7, #16]
 8002d32:	43db      	mvns	r3, r3
 8002d34:	69ba      	ldr	r2, [r7, #24]
 8002d36:	4013      	ands	r3, r2
 8002d38:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002d3a:	683b      	ldr	r3, [r7, #0]
 8002d3c:	685b      	ldr	r3, [r3, #4]
 8002d3e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d003      	beq.n	8002d4e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002d46:	69ba      	ldr	r2, [r7, #24]
 8002d48:	693b      	ldr	r3, [r7, #16]
 8002d4a:	4313      	orrs	r3, r2
 8002d4c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002d4e:	4a34      	ldr	r2, [pc, #208]	; (8002e20 <HAL_GPIO_Init+0x354>)
 8002d50:	69bb      	ldr	r3, [r7, #24]
 8002d52:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002d54:	4b32      	ldr	r3, [pc, #200]	; (8002e20 <HAL_GPIO_Init+0x354>)
 8002d56:	68db      	ldr	r3, [r3, #12]
 8002d58:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d5a:	693b      	ldr	r3, [r7, #16]
 8002d5c:	43db      	mvns	r3, r3
 8002d5e:	69ba      	ldr	r2, [r7, #24]
 8002d60:	4013      	ands	r3, r2
 8002d62:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	685b      	ldr	r3, [r3, #4]
 8002d68:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d003      	beq.n	8002d78 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002d70:	69ba      	ldr	r2, [r7, #24]
 8002d72:	693b      	ldr	r3, [r7, #16]
 8002d74:	4313      	orrs	r3, r2
 8002d76:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002d78:	4a29      	ldr	r2, [pc, #164]	; (8002e20 <HAL_GPIO_Init+0x354>)
 8002d7a:	69bb      	ldr	r3, [r7, #24]
 8002d7c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002d7e:	4b28      	ldr	r3, [pc, #160]	; (8002e20 <HAL_GPIO_Init+0x354>)
 8002d80:	685b      	ldr	r3, [r3, #4]
 8002d82:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d84:	693b      	ldr	r3, [r7, #16]
 8002d86:	43db      	mvns	r3, r3
 8002d88:	69ba      	ldr	r2, [r7, #24]
 8002d8a:	4013      	ands	r3, r2
 8002d8c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002d8e:	683b      	ldr	r3, [r7, #0]
 8002d90:	685b      	ldr	r3, [r3, #4]
 8002d92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d003      	beq.n	8002da2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002d9a:	69ba      	ldr	r2, [r7, #24]
 8002d9c:	693b      	ldr	r3, [r7, #16]
 8002d9e:	4313      	orrs	r3, r2
 8002da0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002da2:	4a1f      	ldr	r2, [pc, #124]	; (8002e20 <HAL_GPIO_Init+0x354>)
 8002da4:	69bb      	ldr	r3, [r7, #24]
 8002da6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002da8:	4b1d      	ldr	r3, [pc, #116]	; (8002e20 <HAL_GPIO_Init+0x354>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002dae:	693b      	ldr	r3, [r7, #16]
 8002db0:	43db      	mvns	r3, r3
 8002db2:	69ba      	ldr	r2, [r7, #24]
 8002db4:	4013      	ands	r3, r2
 8002db6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	685b      	ldr	r3, [r3, #4]
 8002dbc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d003      	beq.n	8002dcc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002dc4:	69ba      	ldr	r2, [r7, #24]
 8002dc6:	693b      	ldr	r3, [r7, #16]
 8002dc8:	4313      	orrs	r3, r2
 8002dca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002dcc:	4a14      	ldr	r2, [pc, #80]	; (8002e20 <HAL_GPIO_Init+0x354>)
 8002dce:	69bb      	ldr	r3, [r7, #24]
 8002dd0:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002dd2:	69fb      	ldr	r3, [r7, #28]
 8002dd4:	3301      	adds	r3, #1
 8002dd6:	61fb      	str	r3, [r7, #28]
 8002dd8:	69fb      	ldr	r3, [r7, #28]
 8002dda:	2b0f      	cmp	r3, #15
 8002ddc:	f67f ae86 	bls.w	8002aec <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002de0:	bf00      	nop
 8002de2:	bf00      	nop
 8002de4:	3724      	adds	r7, #36	; 0x24
 8002de6:	46bd      	mov	sp, r7
 8002de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dec:	4770      	bx	lr
 8002dee:	bf00      	nop
 8002df0:	40023800 	.word	0x40023800
 8002df4:	40013800 	.word	0x40013800
 8002df8:	40020000 	.word	0x40020000
 8002dfc:	40020400 	.word	0x40020400
 8002e00:	40020800 	.word	0x40020800
 8002e04:	40020c00 	.word	0x40020c00
 8002e08:	40021000 	.word	0x40021000
 8002e0c:	40021400 	.word	0x40021400
 8002e10:	40021800 	.word	0x40021800
 8002e14:	40021c00 	.word	0x40021c00
 8002e18:	40022000 	.word	0x40022000
 8002e1c:	40022400 	.word	0x40022400
 8002e20:	40013c00 	.word	0x40013c00

08002e24 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e24:	b480      	push	{r7}
 8002e26:	b083      	sub	sp, #12
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
 8002e2c:	460b      	mov	r3, r1
 8002e2e:	807b      	strh	r3, [r7, #2]
 8002e30:	4613      	mov	r3, r2
 8002e32:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002e34:	787b      	ldrb	r3, [r7, #1]
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d003      	beq.n	8002e42 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002e3a:	887a      	ldrh	r2, [r7, #2]
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002e40:	e003      	b.n	8002e4a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002e42:	887b      	ldrh	r3, [r7, #2]
 8002e44:	041a      	lsls	r2, r3, #16
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	619a      	str	r2, [r3, #24]
}
 8002e4a:	bf00      	nop
 8002e4c:	370c      	adds	r7, #12
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e54:	4770      	bx	lr
	...

08002e58 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b082      	sub	sp, #8
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	4603      	mov	r3, r0
 8002e60:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002e62:	4b08      	ldr	r3, [pc, #32]	; (8002e84 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002e64:	695a      	ldr	r2, [r3, #20]
 8002e66:	88fb      	ldrh	r3, [r7, #6]
 8002e68:	4013      	ands	r3, r2
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d006      	beq.n	8002e7c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002e6e:	4a05      	ldr	r2, [pc, #20]	; (8002e84 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002e70:	88fb      	ldrh	r3, [r7, #6]
 8002e72:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002e74:	88fb      	ldrh	r3, [r7, #6]
 8002e76:	4618      	mov	r0, r3
 8002e78:	f000 f806 	bl	8002e88 <HAL_GPIO_EXTI_Callback>
  }
}
 8002e7c:	bf00      	nop
 8002e7e:	3708      	adds	r7, #8
 8002e80:	46bd      	mov	sp, r7
 8002e82:	bd80      	pop	{r7, pc}
 8002e84:	40013c00 	.word	0x40013c00

08002e88 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002e88:	b480      	push	{r7}
 8002e8a:	b083      	sub	sp, #12
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	4603      	mov	r3, r0
 8002e90:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);
  
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002e92:	bf00      	nop
 8002e94:	370c      	adds	r7, #12
 8002e96:	46bd      	mov	sp, r7
 8002e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9c:	4770      	bx	lr
	...

08002ea0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	b082      	sub	sp, #8
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d101      	bne.n	8002eb2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002eae:	2301      	movs	r3, #1
 8002eb0:	e07f      	b.n	8002fb2 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002eb8:	b2db      	uxtb	r3, r3
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d106      	bne.n	8002ecc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002ec6:	6878      	ldr	r0, [r7, #4]
 8002ec8:	f7ff f9be 	bl	8002248 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2224      	movs	r2, #36	; 0x24
 8002ed0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	681a      	ldr	r2, [r3, #0]
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f022 0201 	bic.w	r2, r2, #1
 8002ee2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	685a      	ldr	r2, [r3, #4]
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002ef0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	689a      	ldr	r2, [r3, #8]
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002f00:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	68db      	ldr	r3, [r3, #12]
 8002f06:	2b01      	cmp	r3, #1
 8002f08:	d107      	bne.n	8002f1a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	689a      	ldr	r2, [r3, #8]
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002f16:	609a      	str	r2, [r3, #8]
 8002f18:	e006      	b.n	8002f28 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	689a      	ldr	r2, [r3, #8]
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002f26:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	68db      	ldr	r3, [r3, #12]
 8002f2c:	2b02      	cmp	r3, #2
 8002f2e:	d104      	bne.n	8002f3a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002f38:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	6859      	ldr	r1, [r3, #4]
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681a      	ldr	r2, [r3, #0]
 8002f44:	4b1d      	ldr	r3, [pc, #116]	; (8002fbc <HAL_I2C_Init+0x11c>)
 8002f46:	430b      	orrs	r3, r1
 8002f48:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	68da      	ldr	r2, [r3, #12]
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002f58:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	691a      	ldr	r2, [r3, #16]
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	695b      	ldr	r3, [r3, #20]
 8002f62:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	699b      	ldr	r3, [r3, #24]
 8002f6a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	430a      	orrs	r2, r1
 8002f72:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	69d9      	ldr	r1, [r3, #28]
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6a1a      	ldr	r2, [r3, #32]
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	430a      	orrs	r2, r1
 8002f82:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	681a      	ldr	r2, [r3, #0]
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f042 0201 	orr.w	r2, r2, #1
 8002f92:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2200      	movs	r2, #0
 8002f98:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	2220      	movs	r2, #32
 8002f9e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2200      	movs	r2, #0
 8002fac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002fb0:	2300      	movs	r3, #0
}
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	3708      	adds	r7, #8
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	bd80      	pop	{r7, pc}
 8002fba:	bf00      	nop
 8002fbc:	02008000 	.word	0x02008000

08002fc0 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b088      	sub	sp, #32
 8002fc4:	af02      	add	r7, sp, #8
 8002fc6:	60f8      	str	r0, [r7, #12]
 8002fc8:	607a      	str	r2, [r7, #4]
 8002fca:	461a      	mov	r2, r3
 8002fcc:	460b      	mov	r3, r1
 8002fce:	817b      	strh	r3, [r7, #10]
 8002fd0:	4613      	mov	r3, r2
 8002fd2:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002fda:	b2db      	uxtb	r3, r3
 8002fdc:	2b20      	cmp	r3, #32
 8002fde:	f040 80da 	bne.w	8003196 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002fe8:	2b01      	cmp	r3, #1
 8002fea:	d101      	bne.n	8002ff0 <HAL_I2C_Master_Transmit+0x30>
 8002fec:	2302      	movs	r3, #2
 8002fee:	e0d3      	b.n	8003198 <HAL_I2C_Master_Transmit+0x1d8>
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	2201      	movs	r2, #1
 8002ff4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002ff8:	f7ff fc26 	bl	8002848 <HAL_GetTick>
 8002ffc:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002ffe:	697b      	ldr	r3, [r7, #20]
 8003000:	9300      	str	r3, [sp, #0]
 8003002:	2319      	movs	r3, #25
 8003004:	2201      	movs	r2, #1
 8003006:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800300a:	68f8      	ldr	r0, [r7, #12]
 800300c:	f000 fcbc 	bl	8003988 <I2C_WaitOnFlagUntilTimeout>
 8003010:	4603      	mov	r3, r0
 8003012:	2b00      	cmp	r3, #0
 8003014:	d001      	beq.n	800301a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8003016:	2301      	movs	r3, #1
 8003018:	e0be      	b.n	8003198 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	2221      	movs	r2, #33	; 0x21
 800301e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	2210      	movs	r2, #16
 8003026:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	2200      	movs	r2, #0
 800302e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	687a      	ldr	r2, [r7, #4]
 8003034:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	893a      	ldrh	r2, [r7, #8]
 800303a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	2200      	movs	r2, #0
 8003040:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003046:	b29b      	uxth	r3, r3
 8003048:	2bff      	cmp	r3, #255	; 0xff
 800304a:	d90e      	bls.n	800306a <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	22ff      	movs	r2, #255	; 0xff
 8003050:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003056:	b2da      	uxtb	r2, r3
 8003058:	8979      	ldrh	r1, [r7, #10]
 800305a:	4b51      	ldr	r3, [pc, #324]	; (80031a0 <HAL_I2C_Master_Transmit+0x1e0>)
 800305c:	9300      	str	r3, [sp, #0]
 800305e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003062:	68f8      	ldr	r0, [r7, #12]
 8003064:	f000 fea6 	bl	8003db4 <I2C_TransferConfig>
 8003068:	e06c      	b.n	8003144 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800306e:	b29a      	uxth	r2, r3
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003078:	b2da      	uxtb	r2, r3
 800307a:	8979      	ldrh	r1, [r7, #10]
 800307c:	4b48      	ldr	r3, [pc, #288]	; (80031a0 <HAL_I2C_Master_Transmit+0x1e0>)
 800307e:	9300      	str	r3, [sp, #0]
 8003080:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003084:	68f8      	ldr	r0, [r7, #12]
 8003086:	f000 fe95 	bl	8003db4 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800308a:	e05b      	b.n	8003144 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800308c:	697a      	ldr	r2, [r7, #20]
 800308e:	6a39      	ldr	r1, [r7, #32]
 8003090:	68f8      	ldr	r0, [r7, #12]
 8003092:	f000 fcb9 	bl	8003a08 <I2C_WaitOnTXISFlagUntilTimeout>
 8003096:	4603      	mov	r3, r0
 8003098:	2b00      	cmp	r3, #0
 800309a:	d001      	beq.n	80030a0 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 800309c:	2301      	movs	r3, #1
 800309e:	e07b      	b.n	8003198 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030a4:	781a      	ldrb	r2, [r3, #0]
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030b0:	1c5a      	adds	r2, r3, #1
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030ba:	b29b      	uxth	r3, r3
 80030bc:	3b01      	subs	r3, #1
 80030be:	b29a      	uxth	r2, r3
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030c8:	3b01      	subs	r3, #1
 80030ca:	b29a      	uxth	r2, r3
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030d4:	b29b      	uxth	r3, r3
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d034      	beq.n	8003144 <HAL_I2C_Master_Transmit+0x184>
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d130      	bne.n	8003144 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80030e2:	697b      	ldr	r3, [r7, #20]
 80030e4:	9300      	str	r3, [sp, #0]
 80030e6:	6a3b      	ldr	r3, [r7, #32]
 80030e8:	2200      	movs	r2, #0
 80030ea:	2180      	movs	r1, #128	; 0x80
 80030ec:	68f8      	ldr	r0, [r7, #12]
 80030ee:	f000 fc4b 	bl	8003988 <I2C_WaitOnFlagUntilTimeout>
 80030f2:	4603      	mov	r3, r0
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d001      	beq.n	80030fc <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 80030f8:	2301      	movs	r3, #1
 80030fa:	e04d      	b.n	8003198 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003100:	b29b      	uxth	r3, r3
 8003102:	2bff      	cmp	r3, #255	; 0xff
 8003104:	d90e      	bls.n	8003124 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	22ff      	movs	r2, #255	; 0xff
 800310a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003110:	b2da      	uxtb	r2, r3
 8003112:	8979      	ldrh	r1, [r7, #10]
 8003114:	2300      	movs	r3, #0
 8003116:	9300      	str	r3, [sp, #0]
 8003118:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800311c:	68f8      	ldr	r0, [r7, #12]
 800311e:	f000 fe49 	bl	8003db4 <I2C_TransferConfig>
 8003122:	e00f      	b.n	8003144 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003128:	b29a      	uxth	r2, r3
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003132:	b2da      	uxtb	r2, r3
 8003134:	8979      	ldrh	r1, [r7, #10]
 8003136:	2300      	movs	r3, #0
 8003138:	9300      	str	r3, [sp, #0]
 800313a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800313e:	68f8      	ldr	r0, [r7, #12]
 8003140:	f000 fe38 	bl	8003db4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003148:	b29b      	uxth	r3, r3
 800314a:	2b00      	cmp	r3, #0
 800314c:	d19e      	bne.n	800308c <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800314e:	697a      	ldr	r2, [r7, #20]
 8003150:	6a39      	ldr	r1, [r7, #32]
 8003152:	68f8      	ldr	r0, [r7, #12]
 8003154:	f000 fc98 	bl	8003a88 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003158:	4603      	mov	r3, r0
 800315a:	2b00      	cmp	r3, #0
 800315c:	d001      	beq.n	8003162 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 800315e:	2301      	movs	r3, #1
 8003160:	e01a      	b.n	8003198 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	2220      	movs	r2, #32
 8003168:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	6859      	ldr	r1, [r3, #4]
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	681a      	ldr	r2, [r3, #0]
 8003174:	4b0b      	ldr	r3, [pc, #44]	; (80031a4 <HAL_I2C_Master_Transmit+0x1e4>)
 8003176:	400b      	ands	r3, r1
 8003178:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	2220      	movs	r2, #32
 800317e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	2200      	movs	r2, #0
 8003186:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	2200      	movs	r2, #0
 800318e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003192:	2300      	movs	r3, #0
 8003194:	e000      	b.n	8003198 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8003196:	2302      	movs	r3, #2
  }
}
 8003198:	4618      	mov	r0, r3
 800319a:	3718      	adds	r7, #24
 800319c:	46bd      	mov	sp, r7
 800319e:	bd80      	pop	{r7, pc}
 80031a0:	80002000 	.word	0x80002000
 80031a4:	fe00e800 	.word	0xfe00e800

080031a8 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b088      	sub	sp, #32
 80031ac:	af02      	add	r7, sp, #8
 80031ae:	60f8      	str	r0, [r7, #12]
 80031b0:	607a      	str	r2, [r7, #4]
 80031b2:	461a      	mov	r2, r3
 80031b4:	460b      	mov	r3, r1
 80031b6:	817b      	strh	r3, [r7, #10]
 80031b8:	4613      	mov	r3, r2
 80031ba:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80031c2:	b2db      	uxtb	r3, r3
 80031c4:	2b20      	cmp	r3, #32
 80031c6:	f040 80db 	bne.w	8003380 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80031d0:	2b01      	cmp	r3, #1
 80031d2:	d101      	bne.n	80031d8 <HAL_I2C_Master_Receive+0x30>
 80031d4:	2302      	movs	r3, #2
 80031d6:	e0d4      	b.n	8003382 <HAL_I2C_Master_Receive+0x1da>
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	2201      	movs	r2, #1
 80031dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80031e0:	f7ff fb32 	bl	8002848 <HAL_GetTick>
 80031e4:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80031e6:	697b      	ldr	r3, [r7, #20]
 80031e8:	9300      	str	r3, [sp, #0]
 80031ea:	2319      	movs	r3, #25
 80031ec:	2201      	movs	r2, #1
 80031ee:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80031f2:	68f8      	ldr	r0, [r7, #12]
 80031f4:	f000 fbc8 	bl	8003988 <I2C_WaitOnFlagUntilTimeout>
 80031f8:	4603      	mov	r3, r0
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d001      	beq.n	8003202 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 80031fe:	2301      	movs	r3, #1
 8003200:	e0bf      	b.n	8003382 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	2222      	movs	r2, #34	; 0x22
 8003206:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	2210      	movs	r2, #16
 800320e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	2200      	movs	r2, #0
 8003216:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	687a      	ldr	r2, [r7, #4]
 800321c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	893a      	ldrh	r2, [r7, #8]
 8003222:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	2200      	movs	r2, #0
 8003228:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800322e:	b29b      	uxth	r3, r3
 8003230:	2bff      	cmp	r3, #255	; 0xff
 8003232:	d90e      	bls.n	8003252 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	22ff      	movs	r2, #255	; 0xff
 8003238:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800323e:	b2da      	uxtb	r2, r3
 8003240:	8979      	ldrh	r1, [r7, #10]
 8003242:	4b52      	ldr	r3, [pc, #328]	; (800338c <HAL_I2C_Master_Receive+0x1e4>)
 8003244:	9300      	str	r3, [sp, #0]
 8003246:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800324a:	68f8      	ldr	r0, [r7, #12]
 800324c:	f000 fdb2 	bl	8003db4 <I2C_TransferConfig>
 8003250:	e06d      	b.n	800332e <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003256:	b29a      	uxth	r2, r3
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003260:	b2da      	uxtb	r2, r3
 8003262:	8979      	ldrh	r1, [r7, #10]
 8003264:	4b49      	ldr	r3, [pc, #292]	; (800338c <HAL_I2C_Master_Receive+0x1e4>)
 8003266:	9300      	str	r3, [sp, #0]
 8003268:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800326c:	68f8      	ldr	r0, [r7, #12]
 800326e:	f000 fda1 	bl	8003db4 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8003272:	e05c      	b.n	800332e <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003274:	697a      	ldr	r2, [r7, #20]
 8003276:	6a39      	ldr	r1, [r7, #32]
 8003278:	68f8      	ldr	r0, [r7, #12]
 800327a:	f000 fc41 	bl	8003b00 <I2C_WaitOnRXNEFlagUntilTimeout>
 800327e:	4603      	mov	r3, r0
 8003280:	2b00      	cmp	r3, #0
 8003282:	d001      	beq.n	8003288 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8003284:	2301      	movs	r3, #1
 8003286:	e07c      	b.n	8003382 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003292:	b2d2      	uxtb	r2, r2
 8003294:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800329a:	1c5a      	adds	r2, r3, #1
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032a4:	3b01      	subs	r3, #1
 80032a6:	b29a      	uxth	r2, r3
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032b0:	b29b      	uxth	r3, r3
 80032b2:	3b01      	subs	r3, #1
 80032b4:	b29a      	uxth	r2, r3
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032be:	b29b      	uxth	r3, r3
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d034      	beq.n	800332e <HAL_I2C_Master_Receive+0x186>
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d130      	bne.n	800332e <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80032cc:	697b      	ldr	r3, [r7, #20]
 80032ce:	9300      	str	r3, [sp, #0]
 80032d0:	6a3b      	ldr	r3, [r7, #32]
 80032d2:	2200      	movs	r2, #0
 80032d4:	2180      	movs	r1, #128	; 0x80
 80032d6:	68f8      	ldr	r0, [r7, #12]
 80032d8:	f000 fb56 	bl	8003988 <I2C_WaitOnFlagUntilTimeout>
 80032dc:	4603      	mov	r3, r0
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d001      	beq.n	80032e6 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 80032e2:	2301      	movs	r3, #1
 80032e4:	e04d      	b.n	8003382 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032ea:	b29b      	uxth	r3, r3
 80032ec:	2bff      	cmp	r3, #255	; 0xff
 80032ee:	d90e      	bls.n	800330e <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	22ff      	movs	r2, #255	; 0xff
 80032f4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032fa:	b2da      	uxtb	r2, r3
 80032fc:	8979      	ldrh	r1, [r7, #10]
 80032fe:	2300      	movs	r3, #0
 8003300:	9300      	str	r3, [sp, #0]
 8003302:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003306:	68f8      	ldr	r0, [r7, #12]
 8003308:	f000 fd54 	bl	8003db4 <I2C_TransferConfig>
 800330c:	e00f      	b.n	800332e <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003312:	b29a      	uxth	r2, r3
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800331c:	b2da      	uxtb	r2, r3
 800331e:	8979      	ldrh	r1, [r7, #10]
 8003320:	2300      	movs	r3, #0
 8003322:	9300      	str	r3, [sp, #0]
 8003324:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003328:	68f8      	ldr	r0, [r7, #12]
 800332a:	f000 fd43 	bl	8003db4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003332:	b29b      	uxth	r3, r3
 8003334:	2b00      	cmp	r3, #0
 8003336:	d19d      	bne.n	8003274 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003338:	697a      	ldr	r2, [r7, #20]
 800333a:	6a39      	ldr	r1, [r7, #32]
 800333c:	68f8      	ldr	r0, [r7, #12]
 800333e:	f000 fba3 	bl	8003a88 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003342:	4603      	mov	r3, r0
 8003344:	2b00      	cmp	r3, #0
 8003346:	d001      	beq.n	800334c <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8003348:	2301      	movs	r3, #1
 800334a:	e01a      	b.n	8003382 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	2220      	movs	r2, #32
 8003352:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	6859      	ldr	r1, [r3, #4]
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	681a      	ldr	r2, [r3, #0]
 800335e:	4b0c      	ldr	r3, [pc, #48]	; (8003390 <HAL_I2C_Master_Receive+0x1e8>)
 8003360:	400b      	ands	r3, r1
 8003362:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	2220      	movs	r2, #32
 8003368:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	2200      	movs	r2, #0
 8003370:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	2200      	movs	r2, #0
 8003378:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800337c:	2300      	movs	r3, #0
 800337e:	e000      	b.n	8003382 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8003380:	2302      	movs	r3, #2
  }
}
 8003382:	4618      	mov	r0, r3
 8003384:	3718      	adds	r7, #24
 8003386:	46bd      	mov	sp, r7
 8003388:	bd80      	pop	{r7, pc}
 800338a:	bf00      	nop
 800338c:	80002400 	.word	0x80002400
 8003390:	fe00e800 	.word	0xfe00e800

08003394 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003394:	b580      	push	{r7, lr}
 8003396:	b088      	sub	sp, #32
 8003398:	af02      	add	r7, sp, #8
 800339a:	60f8      	str	r0, [r7, #12]
 800339c:	4608      	mov	r0, r1
 800339e:	4611      	mov	r1, r2
 80033a0:	461a      	mov	r2, r3
 80033a2:	4603      	mov	r3, r0
 80033a4:	817b      	strh	r3, [r7, #10]
 80033a6:	460b      	mov	r3, r1
 80033a8:	813b      	strh	r3, [r7, #8]
 80033aa:	4613      	mov	r3, r2
 80033ac:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80033b4:	b2db      	uxtb	r3, r3
 80033b6:	2b20      	cmp	r3, #32
 80033b8:	f040 80f9 	bne.w	80035ae <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80033bc:	6a3b      	ldr	r3, [r7, #32]
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d002      	beq.n	80033c8 <HAL_I2C_Mem_Write+0x34>
 80033c2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d105      	bne.n	80033d4 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	f44f 7200 	mov.w	r2, #512	; 0x200
 80033ce:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80033d0:	2301      	movs	r3, #1
 80033d2:	e0ed      	b.n	80035b0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80033da:	2b01      	cmp	r3, #1
 80033dc:	d101      	bne.n	80033e2 <HAL_I2C_Mem_Write+0x4e>
 80033de:	2302      	movs	r3, #2
 80033e0:	e0e6      	b.n	80035b0 <HAL_I2C_Mem_Write+0x21c>
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	2201      	movs	r2, #1
 80033e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80033ea:	f7ff fa2d 	bl	8002848 <HAL_GetTick>
 80033ee:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80033f0:	697b      	ldr	r3, [r7, #20]
 80033f2:	9300      	str	r3, [sp, #0]
 80033f4:	2319      	movs	r3, #25
 80033f6:	2201      	movs	r2, #1
 80033f8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80033fc:	68f8      	ldr	r0, [r7, #12]
 80033fe:	f000 fac3 	bl	8003988 <I2C_WaitOnFlagUntilTimeout>
 8003402:	4603      	mov	r3, r0
 8003404:	2b00      	cmp	r3, #0
 8003406:	d001      	beq.n	800340c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8003408:	2301      	movs	r3, #1
 800340a:	e0d1      	b.n	80035b0 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	2221      	movs	r2, #33	; 0x21
 8003410:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	2240      	movs	r2, #64	; 0x40
 8003418:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	2200      	movs	r2, #0
 8003420:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	6a3a      	ldr	r2, [r7, #32]
 8003426:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800342c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	2200      	movs	r2, #0
 8003432:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003434:	88f8      	ldrh	r0, [r7, #6]
 8003436:	893a      	ldrh	r2, [r7, #8]
 8003438:	8979      	ldrh	r1, [r7, #10]
 800343a:	697b      	ldr	r3, [r7, #20]
 800343c:	9301      	str	r3, [sp, #4]
 800343e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003440:	9300      	str	r3, [sp, #0]
 8003442:	4603      	mov	r3, r0
 8003444:	68f8      	ldr	r0, [r7, #12]
 8003446:	f000 f9d3 	bl	80037f0 <I2C_RequestMemoryWrite>
 800344a:	4603      	mov	r3, r0
 800344c:	2b00      	cmp	r3, #0
 800344e:	d005      	beq.n	800345c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	2200      	movs	r2, #0
 8003454:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003458:	2301      	movs	r3, #1
 800345a:	e0a9      	b.n	80035b0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003460:	b29b      	uxth	r3, r3
 8003462:	2bff      	cmp	r3, #255	; 0xff
 8003464:	d90e      	bls.n	8003484 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	22ff      	movs	r2, #255	; 0xff
 800346a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003470:	b2da      	uxtb	r2, r3
 8003472:	8979      	ldrh	r1, [r7, #10]
 8003474:	2300      	movs	r3, #0
 8003476:	9300      	str	r3, [sp, #0]
 8003478:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800347c:	68f8      	ldr	r0, [r7, #12]
 800347e:	f000 fc99 	bl	8003db4 <I2C_TransferConfig>
 8003482:	e00f      	b.n	80034a4 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003488:	b29a      	uxth	r2, r3
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003492:	b2da      	uxtb	r2, r3
 8003494:	8979      	ldrh	r1, [r7, #10]
 8003496:	2300      	movs	r3, #0
 8003498:	9300      	str	r3, [sp, #0]
 800349a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800349e:	68f8      	ldr	r0, [r7, #12]
 80034a0:	f000 fc88 	bl	8003db4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80034a4:	697a      	ldr	r2, [r7, #20]
 80034a6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80034a8:	68f8      	ldr	r0, [r7, #12]
 80034aa:	f000 faad 	bl	8003a08 <I2C_WaitOnTXISFlagUntilTimeout>
 80034ae:	4603      	mov	r3, r0
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d001      	beq.n	80034b8 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80034b4:	2301      	movs	r3, #1
 80034b6:	e07b      	b.n	80035b0 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034bc:	781a      	ldrb	r2, [r3, #0]
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034c8:	1c5a      	adds	r2, r3, #1
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034d2:	b29b      	uxth	r3, r3
 80034d4:	3b01      	subs	r3, #1
 80034d6:	b29a      	uxth	r2, r3
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034e0:	3b01      	subs	r3, #1
 80034e2:	b29a      	uxth	r2, r3
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034ec:	b29b      	uxth	r3, r3
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d034      	beq.n	800355c <HAL_I2C_Mem_Write+0x1c8>
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d130      	bne.n	800355c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80034fa:	697b      	ldr	r3, [r7, #20]
 80034fc:	9300      	str	r3, [sp, #0]
 80034fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003500:	2200      	movs	r2, #0
 8003502:	2180      	movs	r1, #128	; 0x80
 8003504:	68f8      	ldr	r0, [r7, #12]
 8003506:	f000 fa3f 	bl	8003988 <I2C_WaitOnFlagUntilTimeout>
 800350a:	4603      	mov	r3, r0
 800350c:	2b00      	cmp	r3, #0
 800350e:	d001      	beq.n	8003514 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8003510:	2301      	movs	r3, #1
 8003512:	e04d      	b.n	80035b0 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003518:	b29b      	uxth	r3, r3
 800351a:	2bff      	cmp	r3, #255	; 0xff
 800351c:	d90e      	bls.n	800353c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	22ff      	movs	r2, #255	; 0xff
 8003522:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003528:	b2da      	uxtb	r2, r3
 800352a:	8979      	ldrh	r1, [r7, #10]
 800352c:	2300      	movs	r3, #0
 800352e:	9300      	str	r3, [sp, #0]
 8003530:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003534:	68f8      	ldr	r0, [r7, #12]
 8003536:	f000 fc3d 	bl	8003db4 <I2C_TransferConfig>
 800353a:	e00f      	b.n	800355c <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003540:	b29a      	uxth	r2, r3
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800354a:	b2da      	uxtb	r2, r3
 800354c:	8979      	ldrh	r1, [r7, #10]
 800354e:	2300      	movs	r3, #0
 8003550:	9300      	str	r3, [sp, #0]
 8003552:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003556:	68f8      	ldr	r0, [r7, #12]
 8003558:	f000 fc2c 	bl	8003db4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003560:	b29b      	uxth	r3, r3
 8003562:	2b00      	cmp	r3, #0
 8003564:	d19e      	bne.n	80034a4 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003566:	697a      	ldr	r2, [r7, #20]
 8003568:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800356a:	68f8      	ldr	r0, [r7, #12]
 800356c:	f000 fa8c 	bl	8003a88 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003570:	4603      	mov	r3, r0
 8003572:	2b00      	cmp	r3, #0
 8003574:	d001      	beq.n	800357a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8003576:	2301      	movs	r3, #1
 8003578:	e01a      	b.n	80035b0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	2220      	movs	r2, #32
 8003580:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	6859      	ldr	r1, [r3, #4]
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	681a      	ldr	r2, [r3, #0]
 800358c:	4b0a      	ldr	r3, [pc, #40]	; (80035b8 <HAL_I2C_Mem_Write+0x224>)
 800358e:	400b      	ands	r3, r1
 8003590:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	2220      	movs	r2, #32
 8003596:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	2200      	movs	r2, #0
 800359e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	2200      	movs	r2, #0
 80035a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80035aa:	2300      	movs	r3, #0
 80035ac:	e000      	b.n	80035b0 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80035ae:	2302      	movs	r3, #2
  }
}
 80035b0:	4618      	mov	r0, r3
 80035b2:	3718      	adds	r7, #24
 80035b4:	46bd      	mov	sp, r7
 80035b6:	bd80      	pop	{r7, pc}
 80035b8:	fe00e800 	.word	0xfe00e800

080035bc <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	b088      	sub	sp, #32
 80035c0:	af02      	add	r7, sp, #8
 80035c2:	60f8      	str	r0, [r7, #12]
 80035c4:	4608      	mov	r0, r1
 80035c6:	4611      	mov	r1, r2
 80035c8:	461a      	mov	r2, r3
 80035ca:	4603      	mov	r3, r0
 80035cc:	817b      	strh	r3, [r7, #10]
 80035ce:	460b      	mov	r3, r1
 80035d0:	813b      	strh	r3, [r7, #8]
 80035d2:	4613      	mov	r3, r2
 80035d4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80035dc:	b2db      	uxtb	r3, r3
 80035de:	2b20      	cmp	r3, #32
 80035e0:	f040 80fd 	bne.w	80037de <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80035e4:	6a3b      	ldr	r3, [r7, #32]
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d002      	beq.n	80035f0 <HAL_I2C_Mem_Read+0x34>
 80035ea:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d105      	bne.n	80035fc <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80035f6:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80035f8:	2301      	movs	r3, #1
 80035fa:	e0f1      	b.n	80037e0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003602:	2b01      	cmp	r3, #1
 8003604:	d101      	bne.n	800360a <HAL_I2C_Mem_Read+0x4e>
 8003606:	2302      	movs	r3, #2
 8003608:	e0ea      	b.n	80037e0 <HAL_I2C_Mem_Read+0x224>
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	2201      	movs	r2, #1
 800360e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003612:	f7ff f919 	bl	8002848 <HAL_GetTick>
 8003616:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003618:	697b      	ldr	r3, [r7, #20]
 800361a:	9300      	str	r3, [sp, #0]
 800361c:	2319      	movs	r3, #25
 800361e:	2201      	movs	r2, #1
 8003620:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003624:	68f8      	ldr	r0, [r7, #12]
 8003626:	f000 f9af 	bl	8003988 <I2C_WaitOnFlagUntilTimeout>
 800362a:	4603      	mov	r3, r0
 800362c:	2b00      	cmp	r3, #0
 800362e:	d001      	beq.n	8003634 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8003630:	2301      	movs	r3, #1
 8003632:	e0d5      	b.n	80037e0 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	2222      	movs	r2, #34	; 0x22
 8003638:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	2240      	movs	r2, #64	; 0x40
 8003640:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	2200      	movs	r2, #0
 8003648:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	6a3a      	ldr	r2, [r7, #32]
 800364e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003654:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	2200      	movs	r2, #0
 800365a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800365c:	88f8      	ldrh	r0, [r7, #6]
 800365e:	893a      	ldrh	r2, [r7, #8]
 8003660:	8979      	ldrh	r1, [r7, #10]
 8003662:	697b      	ldr	r3, [r7, #20]
 8003664:	9301      	str	r3, [sp, #4]
 8003666:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003668:	9300      	str	r3, [sp, #0]
 800366a:	4603      	mov	r3, r0
 800366c:	68f8      	ldr	r0, [r7, #12]
 800366e:	f000 f913 	bl	8003898 <I2C_RequestMemoryRead>
 8003672:	4603      	mov	r3, r0
 8003674:	2b00      	cmp	r3, #0
 8003676:	d005      	beq.n	8003684 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	2200      	movs	r2, #0
 800367c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003680:	2301      	movs	r3, #1
 8003682:	e0ad      	b.n	80037e0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003688:	b29b      	uxth	r3, r3
 800368a:	2bff      	cmp	r3, #255	; 0xff
 800368c:	d90e      	bls.n	80036ac <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	22ff      	movs	r2, #255	; 0xff
 8003692:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003698:	b2da      	uxtb	r2, r3
 800369a:	8979      	ldrh	r1, [r7, #10]
 800369c:	4b52      	ldr	r3, [pc, #328]	; (80037e8 <HAL_I2C_Mem_Read+0x22c>)
 800369e:	9300      	str	r3, [sp, #0]
 80036a0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80036a4:	68f8      	ldr	r0, [r7, #12]
 80036a6:	f000 fb85 	bl	8003db4 <I2C_TransferConfig>
 80036aa:	e00f      	b.n	80036cc <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036b0:	b29a      	uxth	r2, r3
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036ba:	b2da      	uxtb	r2, r3
 80036bc:	8979      	ldrh	r1, [r7, #10]
 80036be:	4b4a      	ldr	r3, [pc, #296]	; (80037e8 <HAL_I2C_Mem_Read+0x22c>)
 80036c0:	9300      	str	r3, [sp, #0]
 80036c2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80036c6:	68f8      	ldr	r0, [r7, #12]
 80036c8:	f000 fb74 	bl	8003db4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80036cc:	697b      	ldr	r3, [r7, #20]
 80036ce:	9300      	str	r3, [sp, #0]
 80036d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036d2:	2200      	movs	r2, #0
 80036d4:	2104      	movs	r1, #4
 80036d6:	68f8      	ldr	r0, [r7, #12]
 80036d8:	f000 f956 	bl	8003988 <I2C_WaitOnFlagUntilTimeout>
 80036dc:	4603      	mov	r3, r0
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d001      	beq.n	80036e6 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80036e2:	2301      	movs	r3, #1
 80036e4:	e07c      	b.n	80037e0 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036f0:	b2d2      	uxtb	r2, r2
 80036f2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036f8:	1c5a      	adds	r2, r3, #1
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003702:	3b01      	subs	r3, #1
 8003704:	b29a      	uxth	r2, r3
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800370e:	b29b      	uxth	r3, r3
 8003710:	3b01      	subs	r3, #1
 8003712:	b29a      	uxth	r2, r3
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800371c:	b29b      	uxth	r3, r3
 800371e:	2b00      	cmp	r3, #0
 8003720:	d034      	beq.n	800378c <HAL_I2C_Mem_Read+0x1d0>
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003726:	2b00      	cmp	r3, #0
 8003728:	d130      	bne.n	800378c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800372a:	697b      	ldr	r3, [r7, #20]
 800372c:	9300      	str	r3, [sp, #0]
 800372e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003730:	2200      	movs	r2, #0
 8003732:	2180      	movs	r1, #128	; 0x80
 8003734:	68f8      	ldr	r0, [r7, #12]
 8003736:	f000 f927 	bl	8003988 <I2C_WaitOnFlagUntilTimeout>
 800373a:	4603      	mov	r3, r0
 800373c:	2b00      	cmp	r3, #0
 800373e:	d001      	beq.n	8003744 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8003740:	2301      	movs	r3, #1
 8003742:	e04d      	b.n	80037e0 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003748:	b29b      	uxth	r3, r3
 800374a:	2bff      	cmp	r3, #255	; 0xff
 800374c:	d90e      	bls.n	800376c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	22ff      	movs	r2, #255	; 0xff
 8003752:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003758:	b2da      	uxtb	r2, r3
 800375a:	8979      	ldrh	r1, [r7, #10]
 800375c:	2300      	movs	r3, #0
 800375e:	9300      	str	r3, [sp, #0]
 8003760:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003764:	68f8      	ldr	r0, [r7, #12]
 8003766:	f000 fb25 	bl	8003db4 <I2C_TransferConfig>
 800376a:	e00f      	b.n	800378c <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003770:	b29a      	uxth	r2, r3
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800377a:	b2da      	uxtb	r2, r3
 800377c:	8979      	ldrh	r1, [r7, #10]
 800377e:	2300      	movs	r3, #0
 8003780:	9300      	str	r3, [sp, #0]
 8003782:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003786:	68f8      	ldr	r0, [r7, #12]
 8003788:	f000 fb14 	bl	8003db4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003790:	b29b      	uxth	r3, r3
 8003792:	2b00      	cmp	r3, #0
 8003794:	d19a      	bne.n	80036cc <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003796:	697a      	ldr	r2, [r7, #20]
 8003798:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800379a:	68f8      	ldr	r0, [r7, #12]
 800379c:	f000 f974 	bl	8003a88 <I2C_WaitOnSTOPFlagUntilTimeout>
 80037a0:	4603      	mov	r3, r0
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d001      	beq.n	80037aa <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80037a6:	2301      	movs	r3, #1
 80037a8:	e01a      	b.n	80037e0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	2220      	movs	r2, #32
 80037b0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	6859      	ldr	r1, [r3, #4]
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	681a      	ldr	r2, [r3, #0]
 80037bc:	4b0b      	ldr	r3, [pc, #44]	; (80037ec <HAL_I2C_Mem_Read+0x230>)
 80037be:	400b      	ands	r3, r1
 80037c0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	2220      	movs	r2, #32
 80037c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	2200      	movs	r2, #0
 80037ce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	2200      	movs	r2, #0
 80037d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80037da:	2300      	movs	r3, #0
 80037dc:	e000      	b.n	80037e0 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80037de:	2302      	movs	r3, #2
  }
}
 80037e0:	4618      	mov	r0, r3
 80037e2:	3718      	adds	r7, #24
 80037e4:	46bd      	mov	sp, r7
 80037e6:	bd80      	pop	{r7, pc}
 80037e8:	80002400 	.word	0x80002400
 80037ec:	fe00e800 	.word	0xfe00e800

080037f0 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b086      	sub	sp, #24
 80037f4:	af02      	add	r7, sp, #8
 80037f6:	60f8      	str	r0, [r7, #12]
 80037f8:	4608      	mov	r0, r1
 80037fa:	4611      	mov	r1, r2
 80037fc:	461a      	mov	r2, r3
 80037fe:	4603      	mov	r3, r0
 8003800:	817b      	strh	r3, [r7, #10]
 8003802:	460b      	mov	r3, r1
 8003804:	813b      	strh	r3, [r7, #8]
 8003806:	4613      	mov	r3, r2
 8003808:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800380a:	88fb      	ldrh	r3, [r7, #6]
 800380c:	b2da      	uxtb	r2, r3
 800380e:	8979      	ldrh	r1, [r7, #10]
 8003810:	4b20      	ldr	r3, [pc, #128]	; (8003894 <I2C_RequestMemoryWrite+0xa4>)
 8003812:	9300      	str	r3, [sp, #0]
 8003814:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003818:	68f8      	ldr	r0, [r7, #12]
 800381a:	f000 facb 	bl	8003db4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800381e:	69fa      	ldr	r2, [r7, #28]
 8003820:	69b9      	ldr	r1, [r7, #24]
 8003822:	68f8      	ldr	r0, [r7, #12]
 8003824:	f000 f8f0 	bl	8003a08 <I2C_WaitOnTXISFlagUntilTimeout>
 8003828:	4603      	mov	r3, r0
 800382a:	2b00      	cmp	r3, #0
 800382c:	d001      	beq.n	8003832 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800382e:	2301      	movs	r3, #1
 8003830:	e02c      	b.n	800388c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003832:	88fb      	ldrh	r3, [r7, #6]
 8003834:	2b01      	cmp	r3, #1
 8003836:	d105      	bne.n	8003844 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003838:	893b      	ldrh	r3, [r7, #8]
 800383a:	b2da      	uxtb	r2, r3
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	629a      	str	r2, [r3, #40]	; 0x28
 8003842:	e015      	b.n	8003870 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003844:	893b      	ldrh	r3, [r7, #8]
 8003846:	0a1b      	lsrs	r3, r3, #8
 8003848:	b29b      	uxth	r3, r3
 800384a:	b2da      	uxtb	r2, r3
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003852:	69fa      	ldr	r2, [r7, #28]
 8003854:	69b9      	ldr	r1, [r7, #24]
 8003856:	68f8      	ldr	r0, [r7, #12]
 8003858:	f000 f8d6 	bl	8003a08 <I2C_WaitOnTXISFlagUntilTimeout>
 800385c:	4603      	mov	r3, r0
 800385e:	2b00      	cmp	r3, #0
 8003860:	d001      	beq.n	8003866 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8003862:	2301      	movs	r3, #1
 8003864:	e012      	b.n	800388c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003866:	893b      	ldrh	r3, [r7, #8]
 8003868:	b2da      	uxtb	r2, r3
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003870:	69fb      	ldr	r3, [r7, #28]
 8003872:	9300      	str	r3, [sp, #0]
 8003874:	69bb      	ldr	r3, [r7, #24]
 8003876:	2200      	movs	r2, #0
 8003878:	2180      	movs	r1, #128	; 0x80
 800387a:	68f8      	ldr	r0, [r7, #12]
 800387c:	f000 f884 	bl	8003988 <I2C_WaitOnFlagUntilTimeout>
 8003880:	4603      	mov	r3, r0
 8003882:	2b00      	cmp	r3, #0
 8003884:	d001      	beq.n	800388a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8003886:	2301      	movs	r3, #1
 8003888:	e000      	b.n	800388c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800388a:	2300      	movs	r3, #0
}
 800388c:	4618      	mov	r0, r3
 800388e:	3710      	adds	r7, #16
 8003890:	46bd      	mov	sp, r7
 8003892:	bd80      	pop	{r7, pc}
 8003894:	80002000 	.word	0x80002000

08003898 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8003898:	b580      	push	{r7, lr}
 800389a:	b086      	sub	sp, #24
 800389c:	af02      	add	r7, sp, #8
 800389e:	60f8      	str	r0, [r7, #12]
 80038a0:	4608      	mov	r0, r1
 80038a2:	4611      	mov	r1, r2
 80038a4:	461a      	mov	r2, r3
 80038a6:	4603      	mov	r3, r0
 80038a8:	817b      	strh	r3, [r7, #10]
 80038aa:	460b      	mov	r3, r1
 80038ac:	813b      	strh	r3, [r7, #8]
 80038ae:	4613      	mov	r3, r2
 80038b0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80038b2:	88fb      	ldrh	r3, [r7, #6]
 80038b4:	b2da      	uxtb	r2, r3
 80038b6:	8979      	ldrh	r1, [r7, #10]
 80038b8:	4b20      	ldr	r3, [pc, #128]	; (800393c <I2C_RequestMemoryRead+0xa4>)
 80038ba:	9300      	str	r3, [sp, #0]
 80038bc:	2300      	movs	r3, #0
 80038be:	68f8      	ldr	r0, [r7, #12]
 80038c0:	f000 fa78 	bl	8003db4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80038c4:	69fa      	ldr	r2, [r7, #28]
 80038c6:	69b9      	ldr	r1, [r7, #24]
 80038c8:	68f8      	ldr	r0, [r7, #12]
 80038ca:	f000 f89d 	bl	8003a08 <I2C_WaitOnTXISFlagUntilTimeout>
 80038ce:	4603      	mov	r3, r0
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d001      	beq.n	80038d8 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80038d4:	2301      	movs	r3, #1
 80038d6:	e02c      	b.n	8003932 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80038d8:	88fb      	ldrh	r3, [r7, #6]
 80038da:	2b01      	cmp	r3, #1
 80038dc:	d105      	bne.n	80038ea <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80038de:	893b      	ldrh	r3, [r7, #8]
 80038e0:	b2da      	uxtb	r2, r3
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	629a      	str	r2, [r3, #40]	; 0x28
 80038e8:	e015      	b.n	8003916 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80038ea:	893b      	ldrh	r3, [r7, #8]
 80038ec:	0a1b      	lsrs	r3, r3, #8
 80038ee:	b29b      	uxth	r3, r3
 80038f0:	b2da      	uxtb	r2, r3
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80038f8:	69fa      	ldr	r2, [r7, #28]
 80038fa:	69b9      	ldr	r1, [r7, #24]
 80038fc:	68f8      	ldr	r0, [r7, #12]
 80038fe:	f000 f883 	bl	8003a08 <I2C_WaitOnTXISFlagUntilTimeout>
 8003902:	4603      	mov	r3, r0
 8003904:	2b00      	cmp	r3, #0
 8003906:	d001      	beq.n	800390c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8003908:	2301      	movs	r3, #1
 800390a:	e012      	b.n	8003932 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800390c:	893b      	ldrh	r3, [r7, #8]
 800390e:	b2da      	uxtb	r2, r3
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8003916:	69fb      	ldr	r3, [r7, #28]
 8003918:	9300      	str	r3, [sp, #0]
 800391a:	69bb      	ldr	r3, [r7, #24]
 800391c:	2200      	movs	r2, #0
 800391e:	2140      	movs	r1, #64	; 0x40
 8003920:	68f8      	ldr	r0, [r7, #12]
 8003922:	f000 f831 	bl	8003988 <I2C_WaitOnFlagUntilTimeout>
 8003926:	4603      	mov	r3, r0
 8003928:	2b00      	cmp	r3, #0
 800392a:	d001      	beq.n	8003930 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800392c:	2301      	movs	r3, #1
 800392e:	e000      	b.n	8003932 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8003930:	2300      	movs	r3, #0
}
 8003932:	4618      	mov	r0, r3
 8003934:	3710      	adds	r7, #16
 8003936:	46bd      	mov	sp, r7
 8003938:	bd80      	pop	{r7, pc}
 800393a:	bf00      	nop
 800393c:	80002000 	.word	0x80002000

08003940 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003940:	b480      	push	{r7}
 8003942:	b083      	sub	sp, #12
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	699b      	ldr	r3, [r3, #24]
 800394e:	f003 0302 	and.w	r3, r3, #2
 8003952:	2b02      	cmp	r3, #2
 8003954:	d103      	bne.n	800395e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	2200      	movs	r2, #0
 800395c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	699b      	ldr	r3, [r3, #24]
 8003964:	f003 0301 	and.w	r3, r3, #1
 8003968:	2b01      	cmp	r3, #1
 800396a:	d007      	beq.n	800397c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	699a      	ldr	r2, [r3, #24]
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f042 0201 	orr.w	r2, r2, #1
 800397a:	619a      	str	r2, [r3, #24]
  }
}
 800397c:	bf00      	nop
 800397e:	370c      	adds	r7, #12
 8003980:	46bd      	mov	sp, r7
 8003982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003986:	4770      	bx	lr

08003988 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003988:	b580      	push	{r7, lr}
 800398a:	b084      	sub	sp, #16
 800398c:	af00      	add	r7, sp, #0
 800398e:	60f8      	str	r0, [r7, #12]
 8003990:	60b9      	str	r1, [r7, #8]
 8003992:	603b      	str	r3, [r7, #0]
 8003994:	4613      	mov	r3, r2
 8003996:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003998:	e022      	b.n	80039e0 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800399a:	683b      	ldr	r3, [r7, #0]
 800399c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039a0:	d01e      	beq.n	80039e0 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039a2:	f7fe ff51 	bl	8002848 <HAL_GetTick>
 80039a6:	4602      	mov	r2, r0
 80039a8:	69bb      	ldr	r3, [r7, #24]
 80039aa:	1ad3      	subs	r3, r2, r3
 80039ac:	683a      	ldr	r2, [r7, #0]
 80039ae:	429a      	cmp	r2, r3
 80039b0:	d302      	bcc.n	80039b8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80039b2:	683b      	ldr	r3, [r7, #0]
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d113      	bne.n	80039e0 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039bc:	f043 0220 	orr.w	r2, r3, #32
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	2220      	movs	r2, #32
 80039c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	2200      	movs	r2, #0
 80039d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	2200      	movs	r2, #0
 80039d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80039dc:	2301      	movs	r3, #1
 80039de:	e00f      	b.n	8003a00 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	699a      	ldr	r2, [r3, #24]
 80039e6:	68bb      	ldr	r3, [r7, #8]
 80039e8:	4013      	ands	r3, r2
 80039ea:	68ba      	ldr	r2, [r7, #8]
 80039ec:	429a      	cmp	r2, r3
 80039ee:	bf0c      	ite	eq
 80039f0:	2301      	moveq	r3, #1
 80039f2:	2300      	movne	r3, #0
 80039f4:	b2db      	uxtb	r3, r3
 80039f6:	461a      	mov	r2, r3
 80039f8:	79fb      	ldrb	r3, [r7, #7]
 80039fa:	429a      	cmp	r2, r3
 80039fc:	d0cd      	beq.n	800399a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80039fe:	2300      	movs	r3, #0
}
 8003a00:	4618      	mov	r0, r3
 8003a02:	3710      	adds	r7, #16
 8003a04:	46bd      	mov	sp, r7
 8003a06:	bd80      	pop	{r7, pc}

08003a08 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	b084      	sub	sp, #16
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	60f8      	str	r0, [r7, #12]
 8003a10:	60b9      	str	r1, [r7, #8]
 8003a12:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003a14:	e02c      	b.n	8003a70 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a16:	687a      	ldr	r2, [r7, #4]
 8003a18:	68b9      	ldr	r1, [r7, #8]
 8003a1a:	68f8      	ldr	r0, [r7, #12]
 8003a1c:	f000 f8ea 	bl	8003bf4 <I2C_IsErrorOccurred>
 8003a20:	4603      	mov	r3, r0
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d001      	beq.n	8003a2a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003a26:	2301      	movs	r3, #1
 8003a28:	e02a      	b.n	8003a80 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a2a:	68bb      	ldr	r3, [r7, #8]
 8003a2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a30:	d01e      	beq.n	8003a70 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a32:	f7fe ff09 	bl	8002848 <HAL_GetTick>
 8003a36:	4602      	mov	r2, r0
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	1ad3      	subs	r3, r2, r3
 8003a3c:	68ba      	ldr	r2, [r7, #8]
 8003a3e:	429a      	cmp	r2, r3
 8003a40:	d302      	bcc.n	8003a48 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003a42:	68bb      	ldr	r3, [r7, #8]
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d113      	bne.n	8003a70 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a4c:	f043 0220 	orr.w	r2, r3, #32
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	2220      	movs	r2, #32
 8003a58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	2200      	movs	r2, #0
 8003a60:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	2200      	movs	r2, #0
 8003a68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003a6c:	2301      	movs	r3, #1
 8003a6e:	e007      	b.n	8003a80 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	699b      	ldr	r3, [r3, #24]
 8003a76:	f003 0302 	and.w	r3, r3, #2
 8003a7a:	2b02      	cmp	r3, #2
 8003a7c:	d1cb      	bne.n	8003a16 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003a7e:	2300      	movs	r3, #0
}
 8003a80:	4618      	mov	r0, r3
 8003a82:	3710      	adds	r7, #16
 8003a84:	46bd      	mov	sp, r7
 8003a86:	bd80      	pop	{r7, pc}

08003a88 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	b084      	sub	sp, #16
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	60f8      	str	r0, [r7, #12]
 8003a90:	60b9      	str	r1, [r7, #8]
 8003a92:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003a94:	e028      	b.n	8003ae8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a96:	687a      	ldr	r2, [r7, #4]
 8003a98:	68b9      	ldr	r1, [r7, #8]
 8003a9a:	68f8      	ldr	r0, [r7, #12]
 8003a9c:	f000 f8aa 	bl	8003bf4 <I2C_IsErrorOccurred>
 8003aa0:	4603      	mov	r3, r0
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d001      	beq.n	8003aaa <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003aa6:	2301      	movs	r3, #1
 8003aa8:	e026      	b.n	8003af8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003aaa:	f7fe fecd 	bl	8002848 <HAL_GetTick>
 8003aae:	4602      	mov	r2, r0
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	1ad3      	subs	r3, r2, r3
 8003ab4:	68ba      	ldr	r2, [r7, #8]
 8003ab6:	429a      	cmp	r2, r3
 8003ab8:	d302      	bcc.n	8003ac0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003aba:	68bb      	ldr	r3, [r7, #8]
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d113      	bne.n	8003ae8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ac4:	f043 0220 	orr.w	r2, r3, #32
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	2220      	movs	r2, #32
 8003ad0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	2200      	movs	r2, #0
 8003ae0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003ae4:	2301      	movs	r3, #1
 8003ae6:	e007      	b.n	8003af8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	699b      	ldr	r3, [r3, #24]
 8003aee:	f003 0320 	and.w	r3, r3, #32
 8003af2:	2b20      	cmp	r3, #32
 8003af4:	d1cf      	bne.n	8003a96 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003af6:	2300      	movs	r3, #0
}
 8003af8:	4618      	mov	r0, r3
 8003afa:	3710      	adds	r7, #16
 8003afc:	46bd      	mov	sp, r7
 8003afe:	bd80      	pop	{r7, pc}

08003b00 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	b084      	sub	sp, #16
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	60f8      	str	r0, [r7, #12]
 8003b08:	60b9      	str	r1, [r7, #8]
 8003b0a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003b0c:	e064      	b.n	8003bd8 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b0e:	687a      	ldr	r2, [r7, #4]
 8003b10:	68b9      	ldr	r1, [r7, #8]
 8003b12:	68f8      	ldr	r0, [r7, #12]
 8003b14:	f000 f86e 	bl	8003bf4 <I2C_IsErrorOccurred>
 8003b18:	4603      	mov	r3, r0
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d001      	beq.n	8003b22 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003b1e:	2301      	movs	r3, #1
 8003b20:	e062      	b.n	8003be8 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	699b      	ldr	r3, [r3, #24]
 8003b28:	f003 0320 	and.w	r3, r3, #32
 8003b2c:	2b20      	cmp	r3, #32
 8003b2e:	d138      	bne.n	8003ba2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	699b      	ldr	r3, [r3, #24]
 8003b36:	f003 0304 	and.w	r3, r3, #4
 8003b3a:	2b04      	cmp	r3, #4
 8003b3c:	d105      	bne.n	8003b4a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d001      	beq.n	8003b4a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8003b46:	2300      	movs	r3, #0
 8003b48:	e04e      	b.n	8003be8 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	699b      	ldr	r3, [r3, #24]
 8003b50:	f003 0310 	and.w	r3, r3, #16
 8003b54:	2b10      	cmp	r3, #16
 8003b56:	d107      	bne.n	8003b68 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	2210      	movs	r2, #16
 8003b5e:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	2204      	movs	r2, #4
 8003b64:	645a      	str	r2, [r3, #68]	; 0x44
 8003b66:	e002      	b.n	8003b6e <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	2220      	movs	r2, #32
 8003b74:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	6859      	ldr	r1, [r3, #4]
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	681a      	ldr	r2, [r3, #0]
 8003b80:	4b1b      	ldr	r3, [pc, #108]	; (8003bf0 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 8003b82:	400b      	ands	r3, r1
 8003b84:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	2220      	movs	r2, #32
 8003b8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	2200      	movs	r2, #0
 8003b92:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	2200      	movs	r2, #0
 8003b9a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003b9e:	2301      	movs	r3, #1
 8003ba0:	e022      	b.n	8003be8 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ba2:	f7fe fe51 	bl	8002848 <HAL_GetTick>
 8003ba6:	4602      	mov	r2, r0
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	1ad3      	subs	r3, r2, r3
 8003bac:	68ba      	ldr	r2, [r7, #8]
 8003bae:	429a      	cmp	r2, r3
 8003bb0:	d302      	bcc.n	8003bb8 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8003bb2:	68bb      	ldr	r3, [r7, #8]
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d10f      	bne.n	8003bd8 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bbc:	f043 0220 	orr.w	r2, r3, #32
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	2220      	movs	r2, #32
 8003bc8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	2200      	movs	r2, #0
 8003bd0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003bd4:	2301      	movs	r3, #1
 8003bd6:	e007      	b.n	8003be8 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	699b      	ldr	r3, [r3, #24]
 8003bde:	f003 0304 	and.w	r3, r3, #4
 8003be2:	2b04      	cmp	r3, #4
 8003be4:	d193      	bne.n	8003b0e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003be6:	2300      	movs	r3, #0
}
 8003be8:	4618      	mov	r0, r3
 8003bea:	3710      	adds	r7, #16
 8003bec:	46bd      	mov	sp, r7
 8003bee:	bd80      	pop	{r7, pc}
 8003bf0:	fe00e800 	.word	0xfe00e800

08003bf4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b08a      	sub	sp, #40	; 0x28
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	60f8      	str	r0, [r7, #12]
 8003bfc:	60b9      	str	r1, [r7, #8]
 8003bfe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003c00:	2300      	movs	r3, #0
 8003c02:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	699b      	ldr	r3, [r3, #24]
 8003c0c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003c0e:	2300      	movs	r3, #0
 8003c10:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003c16:	69bb      	ldr	r3, [r7, #24]
 8003c18:	f003 0310 	and.w	r3, r3, #16
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d068      	beq.n	8003cf2 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	2210      	movs	r2, #16
 8003c26:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003c28:	e049      	b.n	8003cbe <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003c2a:	68bb      	ldr	r3, [r7, #8]
 8003c2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c30:	d045      	beq.n	8003cbe <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003c32:	f7fe fe09 	bl	8002848 <HAL_GetTick>
 8003c36:	4602      	mov	r2, r0
 8003c38:	69fb      	ldr	r3, [r7, #28]
 8003c3a:	1ad3      	subs	r3, r2, r3
 8003c3c:	68ba      	ldr	r2, [r7, #8]
 8003c3e:	429a      	cmp	r2, r3
 8003c40:	d302      	bcc.n	8003c48 <I2C_IsErrorOccurred+0x54>
 8003c42:	68bb      	ldr	r3, [r7, #8]
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d13a      	bne.n	8003cbe <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	685b      	ldr	r3, [r3, #4]
 8003c4e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c52:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003c5a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	699b      	ldr	r3, [r3, #24]
 8003c62:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003c66:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c6a:	d121      	bne.n	8003cb0 <I2C_IsErrorOccurred+0xbc>
 8003c6c:	697b      	ldr	r3, [r7, #20]
 8003c6e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003c72:	d01d      	beq.n	8003cb0 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8003c74:	7cfb      	ldrb	r3, [r7, #19]
 8003c76:	2b20      	cmp	r3, #32
 8003c78:	d01a      	beq.n	8003cb0 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	685a      	ldr	r2, [r3, #4]
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003c88:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003c8a:	f7fe fddd 	bl	8002848 <HAL_GetTick>
 8003c8e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003c90:	e00e      	b.n	8003cb0 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003c92:	f7fe fdd9 	bl	8002848 <HAL_GetTick>
 8003c96:	4602      	mov	r2, r0
 8003c98:	69fb      	ldr	r3, [r7, #28]
 8003c9a:	1ad3      	subs	r3, r2, r3
 8003c9c:	2b19      	cmp	r3, #25
 8003c9e:	d907      	bls.n	8003cb0 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 8003ca0:	6a3b      	ldr	r3, [r7, #32]
 8003ca2:	f043 0320 	orr.w	r3, r3, #32
 8003ca6:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003ca8:	2301      	movs	r3, #1
 8003caa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8003cae:	e006      	b.n	8003cbe <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	699b      	ldr	r3, [r3, #24]
 8003cb6:	f003 0320 	and.w	r3, r3, #32
 8003cba:	2b20      	cmp	r3, #32
 8003cbc:	d1e9      	bne.n	8003c92 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	699b      	ldr	r3, [r3, #24]
 8003cc4:	f003 0320 	and.w	r3, r3, #32
 8003cc8:	2b20      	cmp	r3, #32
 8003cca:	d003      	beq.n	8003cd4 <I2C_IsErrorOccurred+0xe0>
 8003ccc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d0aa      	beq.n	8003c2a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003cd4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d103      	bne.n	8003ce4 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	2220      	movs	r2, #32
 8003ce2:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003ce4:	6a3b      	ldr	r3, [r7, #32]
 8003ce6:	f043 0304 	orr.w	r3, r3, #4
 8003cea:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003cec:	2301      	movs	r3, #1
 8003cee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	699b      	ldr	r3, [r3, #24]
 8003cf8:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003cfa:	69bb      	ldr	r3, [r7, #24]
 8003cfc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d00b      	beq.n	8003d1c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003d04:	6a3b      	ldr	r3, [r7, #32]
 8003d06:	f043 0301 	orr.w	r3, r3, #1
 8003d0a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003d14:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003d16:	2301      	movs	r3, #1
 8003d18:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003d1c:	69bb      	ldr	r3, [r7, #24]
 8003d1e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d00b      	beq.n	8003d3e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003d26:	6a3b      	ldr	r3, [r7, #32]
 8003d28:	f043 0308 	orr.w	r3, r3, #8
 8003d2c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003d36:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003d38:	2301      	movs	r3, #1
 8003d3a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003d3e:	69bb      	ldr	r3, [r7, #24]
 8003d40:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d00b      	beq.n	8003d60 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003d48:	6a3b      	ldr	r3, [r7, #32]
 8003d4a:	f043 0302 	orr.w	r3, r3, #2
 8003d4e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003d58:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003d5a:	2301      	movs	r3, #1
 8003d5c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8003d60:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d01c      	beq.n	8003da2 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003d68:	68f8      	ldr	r0, [r7, #12]
 8003d6a:	f7ff fde9 	bl	8003940 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	6859      	ldr	r1, [r3, #4]
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	681a      	ldr	r2, [r3, #0]
 8003d78:	4b0d      	ldr	r3, [pc, #52]	; (8003db0 <I2C_IsErrorOccurred+0x1bc>)
 8003d7a:	400b      	ands	r3, r1
 8003d7c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003d82:	6a3b      	ldr	r3, [r7, #32]
 8003d84:	431a      	orrs	r2, r3
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	2220      	movs	r2, #32
 8003d8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	2200      	movs	r2, #0
 8003d96:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8003da2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8003da6:	4618      	mov	r0, r3
 8003da8:	3728      	adds	r7, #40	; 0x28
 8003daa:	46bd      	mov	sp, r7
 8003dac:	bd80      	pop	{r7, pc}
 8003dae:	bf00      	nop
 8003db0:	fe00e800 	.word	0xfe00e800

08003db4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003db4:	b480      	push	{r7}
 8003db6:	b087      	sub	sp, #28
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	60f8      	str	r0, [r7, #12]
 8003dbc:	607b      	str	r3, [r7, #4]
 8003dbe:	460b      	mov	r3, r1
 8003dc0:	817b      	strh	r3, [r7, #10]
 8003dc2:	4613      	mov	r3, r2
 8003dc4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003dc6:	897b      	ldrh	r3, [r7, #10]
 8003dc8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003dcc:	7a7b      	ldrb	r3, [r7, #9]
 8003dce:	041b      	lsls	r3, r3, #16
 8003dd0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003dd4:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003dda:	6a3b      	ldr	r3, [r7, #32]
 8003ddc:	4313      	orrs	r3, r2
 8003dde:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003de2:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	685a      	ldr	r2, [r3, #4]
 8003dea:	6a3b      	ldr	r3, [r7, #32]
 8003dec:	0d5b      	lsrs	r3, r3, #21
 8003dee:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8003df2:	4b08      	ldr	r3, [pc, #32]	; (8003e14 <I2C_TransferConfig+0x60>)
 8003df4:	430b      	orrs	r3, r1
 8003df6:	43db      	mvns	r3, r3
 8003df8:	ea02 0103 	and.w	r1, r2, r3
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	697a      	ldr	r2, [r7, #20]
 8003e02:	430a      	orrs	r2, r1
 8003e04:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003e06:	bf00      	nop
 8003e08:	371c      	adds	r7, #28
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e10:	4770      	bx	lr
 8003e12:	bf00      	nop
 8003e14:	03ff63ff 	.word	0x03ff63ff

08003e18 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003e18:	b480      	push	{r7}
 8003e1a:	b083      	sub	sp, #12
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6078      	str	r0, [r7, #4]
 8003e20:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e28:	b2db      	uxtb	r3, r3
 8003e2a:	2b20      	cmp	r3, #32
 8003e2c:	d138      	bne.n	8003ea0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003e34:	2b01      	cmp	r3, #1
 8003e36:	d101      	bne.n	8003e3c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003e38:	2302      	movs	r3, #2
 8003e3a:	e032      	b.n	8003ea2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2201      	movs	r2, #1
 8003e40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2224      	movs	r2, #36	; 0x24
 8003e48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	681a      	ldr	r2, [r3, #0]
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f022 0201 	bic.w	r2, r2, #1
 8003e5a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	681a      	ldr	r2, [r3, #0]
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003e6a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	6819      	ldr	r1, [r3, #0]
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	683a      	ldr	r2, [r7, #0]
 8003e78:	430a      	orrs	r2, r1
 8003e7a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	681a      	ldr	r2, [r3, #0]
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f042 0201 	orr.w	r2, r2, #1
 8003e8a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2220      	movs	r2, #32
 8003e90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2200      	movs	r2, #0
 8003e98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003e9c:	2300      	movs	r3, #0
 8003e9e:	e000      	b.n	8003ea2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003ea0:	2302      	movs	r3, #2
  }
}
 8003ea2:	4618      	mov	r0, r3
 8003ea4:	370c      	adds	r7, #12
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eac:	4770      	bx	lr

08003eae <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003eae:	b480      	push	{r7}
 8003eb0:	b085      	sub	sp, #20
 8003eb2:	af00      	add	r7, sp, #0
 8003eb4:	6078      	str	r0, [r7, #4]
 8003eb6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ebe:	b2db      	uxtb	r3, r3
 8003ec0:	2b20      	cmp	r3, #32
 8003ec2:	d139      	bne.n	8003f38 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003eca:	2b01      	cmp	r3, #1
 8003ecc:	d101      	bne.n	8003ed2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003ece:	2302      	movs	r3, #2
 8003ed0:	e033      	b.n	8003f3a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	2201      	movs	r2, #1
 8003ed6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	2224      	movs	r2, #36	; 0x24
 8003ede:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	681a      	ldr	r2, [r3, #0]
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f022 0201 	bic.w	r2, r2, #1
 8003ef0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003f00:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003f02:	683b      	ldr	r3, [r7, #0]
 8003f04:	021b      	lsls	r3, r3, #8
 8003f06:	68fa      	ldr	r2, [r7, #12]
 8003f08:	4313      	orrs	r3, r2
 8003f0a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	68fa      	ldr	r2, [r7, #12]
 8003f12:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	681a      	ldr	r2, [r3, #0]
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f042 0201 	orr.w	r2, r2, #1
 8003f22:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	2220      	movs	r2, #32
 8003f28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	2200      	movs	r2, #0
 8003f30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003f34:	2300      	movs	r3, #0
 8003f36:	e000      	b.n	8003f3a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003f38:	2302      	movs	r3, #2
  }
}
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	3714      	adds	r7, #20
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f44:	4770      	bx	lr
	...

08003f48 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003f48:	b580      	push	{r7, lr}
 8003f4a:	b086      	sub	sp, #24
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003f50:	2300      	movs	r3, #0
 8003f52:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d101      	bne.n	8003f5e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003f5a:	2301      	movs	r3, #1
 8003f5c:	e291      	b.n	8004482 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f003 0301 	and.w	r3, r3, #1
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	f000 8087 	beq.w	800407a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003f6c:	4b96      	ldr	r3, [pc, #600]	; (80041c8 <HAL_RCC_OscConfig+0x280>)
 8003f6e:	689b      	ldr	r3, [r3, #8]
 8003f70:	f003 030c 	and.w	r3, r3, #12
 8003f74:	2b04      	cmp	r3, #4
 8003f76:	d00c      	beq.n	8003f92 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003f78:	4b93      	ldr	r3, [pc, #588]	; (80041c8 <HAL_RCC_OscConfig+0x280>)
 8003f7a:	689b      	ldr	r3, [r3, #8]
 8003f7c:	f003 030c 	and.w	r3, r3, #12
 8003f80:	2b08      	cmp	r3, #8
 8003f82:	d112      	bne.n	8003faa <HAL_RCC_OscConfig+0x62>
 8003f84:	4b90      	ldr	r3, [pc, #576]	; (80041c8 <HAL_RCC_OscConfig+0x280>)
 8003f86:	685b      	ldr	r3, [r3, #4]
 8003f88:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f8c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003f90:	d10b      	bne.n	8003faa <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f92:	4b8d      	ldr	r3, [pc, #564]	; (80041c8 <HAL_RCC_OscConfig+0x280>)
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d06c      	beq.n	8004078 <HAL_RCC_OscConfig+0x130>
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	685b      	ldr	r3, [r3, #4]
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d168      	bne.n	8004078 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003fa6:	2301      	movs	r3, #1
 8003fa8:	e26b      	b.n	8004482 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	685b      	ldr	r3, [r3, #4]
 8003fae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003fb2:	d106      	bne.n	8003fc2 <HAL_RCC_OscConfig+0x7a>
 8003fb4:	4b84      	ldr	r3, [pc, #528]	; (80041c8 <HAL_RCC_OscConfig+0x280>)
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	4a83      	ldr	r2, [pc, #524]	; (80041c8 <HAL_RCC_OscConfig+0x280>)
 8003fba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003fbe:	6013      	str	r3, [r2, #0]
 8003fc0:	e02e      	b.n	8004020 <HAL_RCC_OscConfig+0xd8>
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	685b      	ldr	r3, [r3, #4]
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d10c      	bne.n	8003fe4 <HAL_RCC_OscConfig+0x9c>
 8003fca:	4b7f      	ldr	r3, [pc, #508]	; (80041c8 <HAL_RCC_OscConfig+0x280>)
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	4a7e      	ldr	r2, [pc, #504]	; (80041c8 <HAL_RCC_OscConfig+0x280>)
 8003fd0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003fd4:	6013      	str	r3, [r2, #0]
 8003fd6:	4b7c      	ldr	r3, [pc, #496]	; (80041c8 <HAL_RCC_OscConfig+0x280>)
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	4a7b      	ldr	r2, [pc, #492]	; (80041c8 <HAL_RCC_OscConfig+0x280>)
 8003fdc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003fe0:	6013      	str	r3, [r2, #0]
 8003fe2:	e01d      	b.n	8004020 <HAL_RCC_OscConfig+0xd8>
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	685b      	ldr	r3, [r3, #4]
 8003fe8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003fec:	d10c      	bne.n	8004008 <HAL_RCC_OscConfig+0xc0>
 8003fee:	4b76      	ldr	r3, [pc, #472]	; (80041c8 <HAL_RCC_OscConfig+0x280>)
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	4a75      	ldr	r2, [pc, #468]	; (80041c8 <HAL_RCC_OscConfig+0x280>)
 8003ff4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003ff8:	6013      	str	r3, [r2, #0]
 8003ffa:	4b73      	ldr	r3, [pc, #460]	; (80041c8 <HAL_RCC_OscConfig+0x280>)
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	4a72      	ldr	r2, [pc, #456]	; (80041c8 <HAL_RCC_OscConfig+0x280>)
 8004000:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004004:	6013      	str	r3, [r2, #0]
 8004006:	e00b      	b.n	8004020 <HAL_RCC_OscConfig+0xd8>
 8004008:	4b6f      	ldr	r3, [pc, #444]	; (80041c8 <HAL_RCC_OscConfig+0x280>)
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	4a6e      	ldr	r2, [pc, #440]	; (80041c8 <HAL_RCC_OscConfig+0x280>)
 800400e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004012:	6013      	str	r3, [r2, #0]
 8004014:	4b6c      	ldr	r3, [pc, #432]	; (80041c8 <HAL_RCC_OscConfig+0x280>)
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	4a6b      	ldr	r2, [pc, #428]	; (80041c8 <HAL_RCC_OscConfig+0x280>)
 800401a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800401e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	685b      	ldr	r3, [r3, #4]
 8004024:	2b00      	cmp	r3, #0
 8004026:	d013      	beq.n	8004050 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004028:	f7fe fc0e 	bl	8002848 <HAL_GetTick>
 800402c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800402e:	e008      	b.n	8004042 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004030:	f7fe fc0a 	bl	8002848 <HAL_GetTick>
 8004034:	4602      	mov	r2, r0
 8004036:	693b      	ldr	r3, [r7, #16]
 8004038:	1ad3      	subs	r3, r2, r3
 800403a:	2b64      	cmp	r3, #100	; 0x64
 800403c:	d901      	bls.n	8004042 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800403e:	2303      	movs	r3, #3
 8004040:	e21f      	b.n	8004482 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004042:	4b61      	ldr	r3, [pc, #388]	; (80041c8 <HAL_RCC_OscConfig+0x280>)
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800404a:	2b00      	cmp	r3, #0
 800404c:	d0f0      	beq.n	8004030 <HAL_RCC_OscConfig+0xe8>
 800404e:	e014      	b.n	800407a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004050:	f7fe fbfa 	bl	8002848 <HAL_GetTick>
 8004054:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004056:	e008      	b.n	800406a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004058:	f7fe fbf6 	bl	8002848 <HAL_GetTick>
 800405c:	4602      	mov	r2, r0
 800405e:	693b      	ldr	r3, [r7, #16]
 8004060:	1ad3      	subs	r3, r2, r3
 8004062:	2b64      	cmp	r3, #100	; 0x64
 8004064:	d901      	bls.n	800406a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004066:	2303      	movs	r3, #3
 8004068:	e20b      	b.n	8004482 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800406a:	4b57      	ldr	r3, [pc, #348]	; (80041c8 <HAL_RCC_OscConfig+0x280>)
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004072:	2b00      	cmp	r3, #0
 8004074:	d1f0      	bne.n	8004058 <HAL_RCC_OscConfig+0x110>
 8004076:	e000      	b.n	800407a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004078:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f003 0302 	and.w	r3, r3, #2
 8004082:	2b00      	cmp	r3, #0
 8004084:	d069      	beq.n	800415a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004086:	4b50      	ldr	r3, [pc, #320]	; (80041c8 <HAL_RCC_OscConfig+0x280>)
 8004088:	689b      	ldr	r3, [r3, #8]
 800408a:	f003 030c 	and.w	r3, r3, #12
 800408e:	2b00      	cmp	r3, #0
 8004090:	d00b      	beq.n	80040aa <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004092:	4b4d      	ldr	r3, [pc, #308]	; (80041c8 <HAL_RCC_OscConfig+0x280>)
 8004094:	689b      	ldr	r3, [r3, #8]
 8004096:	f003 030c 	and.w	r3, r3, #12
 800409a:	2b08      	cmp	r3, #8
 800409c:	d11c      	bne.n	80040d8 <HAL_RCC_OscConfig+0x190>
 800409e:	4b4a      	ldr	r3, [pc, #296]	; (80041c8 <HAL_RCC_OscConfig+0x280>)
 80040a0:	685b      	ldr	r3, [r3, #4]
 80040a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d116      	bne.n	80040d8 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80040aa:	4b47      	ldr	r3, [pc, #284]	; (80041c8 <HAL_RCC_OscConfig+0x280>)
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f003 0302 	and.w	r3, r3, #2
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d005      	beq.n	80040c2 <HAL_RCC_OscConfig+0x17a>
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	68db      	ldr	r3, [r3, #12]
 80040ba:	2b01      	cmp	r3, #1
 80040bc:	d001      	beq.n	80040c2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80040be:	2301      	movs	r3, #1
 80040c0:	e1df      	b.n	8004482 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040c2:	4b41      	ldr	r3, [pc, #260]	; (80041c8 <HAL_RCC_OscConfig+0x280>)
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	691b      	ldr	r3, [r3, #16]
 80040ce:	00db      	lsls	r3, r3, #3
 80040d0:	493d      	ldr	r1, [pc, #244]	; (80041c8 <HAL_RCC_OscConfig+0x280>)
 80040d2:	4313      	orrs	r3, r2
 80040d4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80040d6:	e040      	b.n	800415a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	68db      	ldr	r3, [r3, #12]
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d023      	beq.n	8004128 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80040e0:	4b39      	ldr	r3, [pc, #228]	; (80041c8 <HAL_RCC_OscConfig+0x280>)
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	4a38      	ldr	r2, [pc, #224]	; (80041c8 <HAL_RCC_OscConfig+0x280>)
 80040e6:	f043 0301 	orr.w	r3, r3, #1
 80040ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040ec:	f7fe fbac 	bl	8002848 <HAL_GetTick>
 80040f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040f2:	e008      	b.n	8004106 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80040f4:	f7fe fba8 	bl	8002848 <HAL_GetTick>
 80040f8:	4602      	mov	r2, r0
 80040fa:	693b      	ldr	r3, [r7, #16]
 80040fc:	1ad3      	subs	r3, r2, r3
 80040fe:	2b02      	cmp	r3, #2
 8004100:	d901      	bls.n	8004106 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8004102:	2303      	movs	r3, #3
 8004104:	e1bd      	b.n	8004482 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004106:	4b30      	ldr	r3, [pc, #192]	; (80041c8 <HAL_RCC_OscConfig+0x280>)
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f003 0302 	and.w	r3, r3, #2
 800410e:	2b00      	cmp	r3, #0
 8004110:	d0f0      	beq.n	80040f4 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004112:	4b2d      	ldr	r3, [pc, #180]	; (80041c8 <HAL_RCC_OscConfig+0x280>)
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	691b      	ldr	r3, [r3, #16]
 800411e:	00db      	lsls	r3, r3, #3
 8004120:	4929      	ldr	r1, [pc, #164]	; (80041c8 <HAL_RCC_OscConfig+0x280>)
 8004122:	4313      	orrs	r3, r2
 8004124:	600b      	str	r3, [r1, #0]
 8004126:	e018      	b.n	800415a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004128:	4b27      	ldr	r3, [pc, #156]	; (80041c8 <HAL_RCC_OscConfig+0x280>)
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	4a26      	ldr	r2, [pc, #152]	; (80041c8 <HAL_RCC_OscConfig+0x280>)
 800412e:	f023 0301 	bic.w	r3, r3, #1
 8004132:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004134:	f7fe fb88 	bl	8002848 <HAL_GetTick>
 8004138:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800413a:	e008      	b.n	800414e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800413c:	f7fe fb84 	bl	8002848 <HAL_GetTick>
 8004140:	4602      	mov	r2, r0
 8004142:	693b      	ldr	r3, [r7, #16]
 8004144:	1ad3      	subs	r3, r2, r3
 8004146:	2b02      	cmp	r3, #2
 8004148:	d901      	bls.n	800414e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800414a:	2303      	movs	r3, #3
 800414c:	e199      	b.n	8004482 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800414e:	4b1e      	ldr	r3, [pc, #120]	; (80041c8 <HAL_RCC_OscConfig+0x280>)
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f003 0302 	and.w	r3, r3, #2
 8004156:	2b00      	cmp	r3, #0
 8004158:	d1f0      	bne.n	800413c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f003 0308 	and.w	r3, r3, #8
 8004162:	2b00      	cmp	r3, #0
 8004164:	d038      	beq.n	80041d8 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	695b      	ldr	r3, [r3, #20]
 800416a:	2b00      	cmp	r3, #0
 800416c:	d019      	beq.n	80041a2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800416e:	4b16      	ldr	r3, [pc, #88]	; (80041c8 <HAL_RCC_OscConfig+0x280>)
 8004170:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004172:	4a15      	ldr	r2, [pc, #84]	; (80041c8 <HAL_RCC_OscConfig+0x280>)
 8004174:	f043 0301 	orr.w	r3, r3, #1
 8004178:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800417a:	f7fe fb65 	bl	8002848 <HAL_GetTick>
 800417e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004180:	e008      	b.n	8004194 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004182:	f7fe fb61 	bl	8002848 <HAL_GetTick>
 8004186:	4602      	mov	r2, r0
 8004188:	693b      	ldr	r3, [r7, #16]
 800418a:	1ad3      	subs	r3, r2, r3
 800418c:	2b02      	cmp	r3, #2
 800418e:	d901      	bls.n	8004194 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004190:	2303      	movs	r3, #3
 8004192:	e176      	b.n	8004482 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004194:	4b0c      	ldr	r3, [pc, #48]	; (80041c8 <HAL_RCC_OscConfig+0x280>)
 8004196:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004198:	f003 0302 	and.w	r3, r3, #2
 800419c:	2b00      	cmp	r3, #0
 800419e:	d0f0      	beq.n	8004182 <HAL_RCC_OscConfig+0x23a>
 80041a0:	e01a      	b.n	80041d8 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80041a2:	4b09      	ldr	r3, [pc, #36]	; (80041c8 <HAL_RCC_OscConfig+0x280>)
 80041a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80041a6:	4a08      	ldr	r2, [pc, #32]	; (80041c8 <HAL_RCC_OscConfig+0x280>)
 80041a8:	f023 0301 	bic.w	r3, r3, #1
 80041ac:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041ae:	f7fe fb4b 	bl	8002848 <HAL_GetTick>
 80041b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80041b4:	e00a      	b.n	80041cc <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80041b6:	f7fe fb47 	bl	8002848 <HAL_GetTick>
 80041ba:	4602      	mov	r2, r0
 80041bc:	693b      	ldr	r3, [r7, #16]
 80041be:	1ad3      	subs	r3, r2, r3
 80041c0:	2b02      	cmp	r3, #2
 80041c2:	d903      	bls.n	80041cc <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80041c4:	2303      	movs	r3, #3
 80041c6:	e15c      	b.n	8004482 <HAL_RCC_OscConfig+0x53a>
 80041c8:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80041cc:	4b91      	ldr	r3, [pc, #580]	; (8004414 <HAL_RCC_OscConfig+0x4cc>)
 80041ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80041d0:	f003 0302 	and.w	r3, r3, #2
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d1ee      	bne.n	80041b6 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f003 0304 	and.w	r3, r3, #4
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	f000 80a4 	beq.w	800432e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80041e6:	4b8b      	ldr	r3, [pc, #556]	; (8004414 <HAL_RCC_OscConfig+0x4cc>)
 80041e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d10d      	bne.n	800420e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80041f2:	4b88      	ldr	r3, [pc, #544]	; (8004414 <HAL_RCC_OscConfig+0x4cc>)
 80041f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041f6:	4a87      	ldr	r2, [pc, #540]	; (8004414 <HAL_RCC_OscConfig+0x4cc>)
 80041f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041fc:	6413      	str	r3, [r2, #64]	; 0x40
 80041fe:	4b85      	ldr	r3, [pc, #532]	; (8004414 <HAL_RCC_OscConfig+0x4cc>)
 8004200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004202:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004206:	60bb      	str	r3, [r7, #8]
 8004208:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800420a:	2301      	movs	r3, #1
 800420c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800420e:	4b82      	ldr	r3, [pc, #520]	; (8004418 <HAL_RCC_OscConfig+0x4d0>)
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004216:	2b00      	cmp	r3, #0
 8004218:	d118      	bne.n	800424c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800421a:	4b7f      	ldr	r3, [pc, #508]	; (8004418 <HAL_RCC_OscConfig+0x4d0>)
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	4a7e      	ldr	r2, [pc, #504]	; (8004418 <HAL_RCC_OscConfig+0x4d0>)
 8004220:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004224:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004226:	f7fe fb0f 	bl	8002848 <HAL_GetTick>
 800422a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800422c:	e008      	b.n	8004240 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800422e:	f7fe fb0b 	bl	8002848 <HAL_GetTick>
 8004232:	4602      	mov	r2, r0
 8004234:	693b      	ldr	r3, [r7, #16]
 8004236:	1ad3      	subs	r3, r2, r3
 8004238:	2b64      	cmp	r3, #100	; 0x64
 800423a:	d901      	bls.n	8004240 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800423c:	2303      	movs	r3, #3
 800423e:	e120      	b.n	8004482 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004240:	4b75      	ldr	r3, [pc, #468]	; (8004418 <HAL_RCC_OscConfig+0x4d0>)
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004248:	2b00      	cmp	r3, #0
 800424a:	d0f0      	beq.n	800422e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	689b      	ldr	r3, [r3, #8]
 8004250:	2b01      	cmp	r3, #1
 8004252:	d106      	bne.n	8004262 <HAL_RCC_OscConfig+0x31a>
 8004254:	4b6f      	ldr	r3, [pc, #444]	; (8004414 <HAL_RCC_OscConfig+0x4cc>)
 8004256:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004258:	4a6e      	ldr	r2, [pc, #440]	; (8004414 <HAL_RCC_OscConfig+0x4cc>)
 800425a:	f043 0301 	orr.w	r3, r3, #1
 800425e:	6713      	str	r3, [r2, #112]	; 0x70
 8004260:	e02d      	b.n	80042be <HAL_RCC_OscConfig+0x376>
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	689b      	ldr	r3, [r3, #8]
 8004266:	2b00      	cmp	r3, #0
 8004268:	d10c      	bne.n	8004284 <HAL_RCC_OscConfig+0x33c>
 800426a:	4b6a      	ldr	r3, [pc, #424]	; (8004414 <HAL_RCC_OscConfig+0x4cc>)
 800426c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800426e:	4a69      	ldr	r2, [pc, #420]	; (8004414 <HAL_RCC_OscConfig+0x4cc>)
 8004270:	f023 0301 	bic.w	r3, r3, #1
 8004274:	6713      	str	r3, [r2, #112]	; 0x70
 8004276:	4b67      	ldr	r3, [pc, #412]	; (8004414 <HAL_RCC_OscConfig+0x4cc>)
 8004278:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800427a:	4a66      	ldr	r2, [pc, #408]	; (8004414 <HAL_RCC_OscConfig+0x4cc>)
 800427c:	f023 0304 	bic.w	r3, r3, #4
 8004280:	6713      	str	r3, [r2, #112]	; 0x70
 8004282:	e01c      	b.n	80042be <HAL_RCC_OscConfig+0x376>
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	689b      	ldr	r3, [r3, #8]
 8004288:	2b05      	cmp	r3, #5
 800428a:	d10c      	bne.n	80042a6 <HAL_RCC_OscConfig+0x35e>
 800428c:	4b61      	ldr	r3, [pc, #388]	; (8004414 <HAL_RCC_OscConfig+0x4cc>)
 800428e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004290:	4a60      	ldr	r2, [pc, #384]	; (8004414 <HAL_RCC_OscConfig+0x4cc>)
 8004292:	f043 0304 	orr.w	r3, r3, #4
 8004296:	6713      	str	r3, [r2, #112]	; 0x70
 8004298:	4b5e      	ldr	r3, [pc, #376]	; (8004414 <HAL_RCC_OscConfig+0x4cc>)
 800429a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800429c:	4a5d      	ldr	r2, [pc, #372]	; (8004414 <HAL_RCC_OscConfig+0x4cc>)
 800429e:	f043 0301 	orr.w	r3, r3, #1
 80042a2:	6713      	str	r3, [r2, #112]	; 0x70
 80042a4:	e00b      	b.n	80042be <HAL_RCC_OscConfig+0x376>
 80042a6:	4b5b      	ldr	r3, [pc, #364]	; (8004414 <HAL_RCC_OscConfig+0x4cc>)
 80042a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042aa:	4a5a      	ldr	r2, [pc, #360]	; (8004414 <HAL_RCC_OscConfig+0x4cc>)
 80042ac:	f023 0301 	bic.w	r3, r3, #1
 80042b0:	6713      	str	r3, [r2, #112]	; 0x70
 80042b2:	4b58      	ldr	r3, [pc, #352]	; (8004414 <HAL_RCC_OscConfig+0x4cc>)
 80042b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042b6:	4a57      	ldr	r2, [pc, #348]	; (8004414 <HAL_RCC_OscConfig+0x4cc>)
 80042b8:	f023 0304 	bic.w	r3, r3, #4
 80042bc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	689b      	ldr	r3, [r3, #8]
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d015      	beq.n	80042f2 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042c6:	f7fe fabf 	bl	8002848 <HAL_GetTick>
 80042ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042cc:	e00a      	b.n	80042e4 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80042ce:	f7fe fabb 	bl	8002848 <HAL_GetTick>
 80042d2:	4602      	mov	r2, r0
 80042d4:	693b      	ldr	r3, [r7, #16]
 80042d6:	1ad3      	subs	r3, r2, r3
 80042d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80042dc:	4293      	cmp	r3, r2
 80042de:	d901      	bls.n	80042e4 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80042e0:	2303      	movs	r3, #3
 80042e2:	e0ce      	b.n	8004482 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042e4:	4b4b      	ldr	r3, [pc, #300]	; (8004414 <HAL_RCC_OscConfig+0x4cc>)
 80042e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042e8:	f003 0302 	and.w	r3, r3, #2
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d0ee      	beq.n	80042ce <HAL_RCC_OscConfig+0x386>
 80042f0:	e014      	b.n	800431c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042f2:	f7fe faa9 	bl	8002848 <HAL_GetTick>
 80042f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80042f8:	e00a      	b.n	8004310 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80042fa:	f7fe faa5 	bl	8002848 <HAL_GetTick>
 80042fe:	4602      	mov	r2, r0
 8004300:	693b      	ldr	r3, [r7, #16]
 8004302:	1ad3      	subs	r3, r2, r3
 8004304:	f241 3288 	movw	r2, #5000	; 0x1388
 8004308:	4293      	cmp	r3, r2
 800430a:	d901      	bls.n	8004310 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800430c:	2303      	movs	r3, #3
 800430e:	e0b8      	b.n	8004482 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004310:	4b40      	ldr	r3, [pc, #256]	; (8004414 <HAL_RCC_OscConfig+0x4cc>)
 8004312:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004314:	f003 0302 	and.w	r3, r3, #2
 8004318:	2b00      	cmp	r3, #0
 800431a:	d1ee      	bne.n	80042fa <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800431c:	7dfb      	ldrb	r3, [r7, #23]
 800431e:	2b01      	cmp	r3, #1
 8004320:	d105      	bne.n	800432e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004322:	4b3c      	ldr	r3, [pc, #240]	; (8004414 <HAL_RCC_OscConfig+0x4cc>)
 8004324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004326:	4a3b      	ldr	r2, [pc, #236]	; (8004414 <HAL_RCC_OscConfig+0x4cc>)
 8004328:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800432c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	699b      	ldr	r3, [r3, #24]
 8004332:	2b00      	cmp	r3, #0
 8004334:	f000 80a4 	beq.w	8004480 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004338:	4b36      	ldr	r3, [pc, #216]	; (8004414 <HAL_RCC_OscConfig+0x4cc>)
 800433a:	689b      	ldr	r3, [r3, #8]
 800433c:	f003 030c 	and.w	r3, r3, #12
 8004340:	2b08      	cmp	r3, #8
 8004342:	d06b      	beq.n	800441c <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	699b      	ldr	r3, [r3, #24]
 8004348:	2b02      	cmp	r3, #2
 800434a:	d149      	bne.n	80043e0 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800434c:	4b31      	ldr	r3, [pc, #196]	; (8004414 <HAL_RCC_OscConfig+0x4cc>)
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	4a30      	ldr	r2, [pc, #192]	; (8004414 <HAL_RCC_OscConfig+0x4cc>)
 8004352:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004356:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004358:	f7fe fa76 	bl	8002848 <HAL_GetTick>
 800435c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800435e:	e008      	b.n	8004372 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004360:	f7fe fa72 	bl	8002848 <HAL_GetTick>
 8004364:	4602      	mov	r2, r0
 8004366:	693b      	ldr	r3, [r7, #16]
 8004368:	1ad3      	subs	r3, r2, r3
 800436a:	2b02      	cmp	r3, #2
 800436c:	d901      	bls.n	8004372 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800436e:	2303      	movs	r3, #3
 8004370:	e087      	b.n	8004482 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004372:	4b28      	ldr	r3, [pc, #160]	; (8004414 <HAL_RCC_OscConfig+0x4cc>)
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800437a:	2b00      	cmp	r3, #0
 800437c:	d1f0      	bne.n	8004360 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	69da      	ldr	r2, [r3, #28]
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6a1b      	ldr	r3, [r3, #32]
 8004386:	431a      	orrs	r2, r3
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800438c:	019b      	lsls	r3, r3, #6
 800438e:	431a      	orrs	r2, r3
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004394:	085b      	lsrs	r3, r3, #1
 8004396:	3b01      	subs	r3, #1
 8004398:	041b      	lsls	r3, r3, #16
 800439a:	431a      	orrs	r2, r3
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043a0:	061b      	lsls	r3, r3, #24
 80043a2:	4313      	orrs	r3, r2
 80043a4:	4a1b      	ldr	r2, [pc, #108]	; (8004414 <HAL_RCC_OscConfig+0x4cc>)
 80043a6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80043aa:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80043ac:	4b19      	ldr	r3, [pc, #100]	; (8004414 <HAL_RCC_OscConfig+0x4cc>)
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	4a18      	ldr	r2, [pc, #96]	; (8004414 <HAL_RCC_OscConfig+0x4cc>)
 80043b2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80043b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043b8:	f7fe fa46 	bl	8002848 <HAL_GetTick>
 80043bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80043be:	e008      	b.n	80043d2 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043c0:	f7fe fa42 	bl	8002848 <HAL_GetTick>
 80043c4:	4602      	mov	r2, r0
 80043c6:	693b      	ldr	r3, [r7, #16]
 80043c8:	1ad3      	subs	r3, r2, r3
 80043ca:	2b02      	cmp	r3, #2
 80043cc:	d901      	bls.n	80043d2 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 80043ce:	2303      	movs	r3, #3
 80043d0:	e057      	b.n	8004482 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80043d2:	4b10      	ldr	r3, [pc, #64]	; (8004414 <HAL_RCC_OscConfig+0x4cc>)
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d0f0      	beq.n	80043c0 <HAL_RCC_OscConfig+0x478>
 80043de:	e04f      	b.n	8004480 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80043e0:	4b0c      	ldr	r3, [pc, #48]	; (8004414 <HAL_RCC_OscConfig+0x4cc>)
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	4a0b      	ldr	r2, [pc, #44]	; (8004414 <HAL_RCC_OscConfig+0x4cc>)
 80043e6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80043ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043ec:	f7fe fa2c 	bl	8002848 <HAL_GetTick>
 80043f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043f2:	e008      	b.n	8004406 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043f4:	f7fe fa28 	bl	8002848 <HAL_GetTick>
 80043f8:	4602      	mov	r2, r0
 80043fa:	693b      	ldr	r3, [r7, #16]
 80043fc:	1ad3      	subs	r3, r2, r3
 80043fe:	2b02      	cmp	r3, #2
 8004400:	d901      	bls.n	8004406 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8004402:	2303      	movs	r3, #3
 8004404:	e03d      	b.n	8004482 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004406:	4b03      	ldr	r3, [pc, #12]	; (8004414 <HAL_RCC_OscConfig+0x4cc>)
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800440e:	2b00      	cmp	r3, #0
 8004410:	d1f0      	bne.n	80043f4 <HAL_RCC_OscConfig+0x4ac>
 8004412:	e035      	b.n	8004480 <HAL_RCC_OscConfig+0x538>
 8004414:	40023800 	.word	0x40023800
 8004418:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800441c:	4b1b      	ldr	r3, [pc, #108]	; (800448c <HAL_RCC_OscConfig+0x544>)
 800441e:	685b      	ldr	r3, [r3, #4]
 8004420:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	699b      	ldr	r3, [r3, #24]
 8004426:	2b01      	cmp	r3, #1
 8004428:	d028      	beq.n	800447c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004434:	429a      	cmp	r2, r3
 8004436:	d121      	bne.n	800447c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004442:	429a      	cmp	r2, r3
 8004444:	d11a      	bne.n	800447c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004446:	68fa      	ldr	r2, [r7, #12]
 8004448:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800444c:	4013      	ands	r3, r2
 800444e:	687a      	ldr	r2, [r7, #4]
 8004450:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004452:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004454:	4293      	cmp	r3, r2
 8004456:	d111      	bne.n	800447c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004462:	085b      	lsrs	r3, r3, #1
 8004464:	3b01      	subs	r3, #1
 8004466:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004468:	429a      	cmp	r2, r3
 800446a:	d107      	bne.n	800447c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004476:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004478:	429a      	cmp	r2, r3
 800447a:	d001      	beq.n	8004480 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 800447c:	2301      	movs	r3, #1
 800447e:	e000      	b.n	8004482 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8004480:	2300      	movs	r3, #0
}
 8004482:	4618      	mov	r0, r3
 8004484:	3718      	adds	r7, #24
 8004486:	46bd      	mov	sp, r7
 8004488:	bd80      	pop	{r7, pc}
 800448a:	bf00      	nop
 800448c:	40023800 	.word	0x40023800

08004490 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004490:	b580      	push	{r7, lr}
 8004492:	b084      	sub	sp, #16
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]
 8004498:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800449a:	2300      	movs	r3, #0
 800449c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d101      	bne.n	80044a8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80044a4:	2301      	movs	r3, #1
 80044a6:	e0d0      	b.n	800464a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80044a8:	4b6a      	ldr	r3, [pc, #424]	; (8004654 <HAL_RCC_ClockConfig+0x1c4>)
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f003 030f 	and.w	r3, r3, #15
 80044b0:	683a      	ldr	r2, [r7, #0]
 80044b2:	429a      	cmp	r2, r3
 80044b4:	d910      	bls.n	80044d8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044b6:	4b67      	ldr	r3, [pc, #412]	; (8004654 <HAL_RCC_ClockConfig+0x1c4>)
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f023 020f 	bic.w	r2, r3, #15
 80044be:	4965      	ldr	r1, [pc, #404]	; (8004654 <HAL_RCC_ClockConfig+0x1c4>)
 80044c0:	683b      	ldr	r3, [r7, #0]
 80044c2:	4313      	orrs	r3, r2
 80044c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80044c6:	4b63      	ldr	r3, [pc, #396]	; (8004654 <HAL_RCC_ClockConfig+0x1c4>)
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f003 030f 	and.w	r3, r3, #15
 80044ce:	683a      	ldr	r2, [r7, #0]
 80044d0:	429a      	cmp	r2, r3
 80044d2:	d001      	beq.n	80044d8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80044d4:	2301      	movs	r3, #1
 80044d6:	e0b8      	b.n	800464a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f003 0302 	and.w	r3, r3, #2
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d020      	beq.n	8004526 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f003 0304 	and.w	r3, r3, #4
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d005      	beq.n	80044fc <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80044f0:	4b59      	ldr	r3, [pc, #356]	; (8004658 <HAL_RCC_ClockConfig+0x1c8>)
 80044f2:	689b      	ldr	r3, [r3, #8]
 80044f4:	4a58      	ldr	r2, [pc, #352]	; (8004658 <HAL_RCC_ClockConfig+0x1c8>)
 80044f6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80044fa:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f003 0308 	and.w	r3, r3, #8
 8004504:	2b00      	cmp	r3, #0
 8004506:	d005      	beq.n	8004514 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004508:	4b53      	ldr	r3, [pc, #332]	; (8004658 <HAL_RCC_ClockConfig+0x1c8>)
 800450a:	689b      	ldr	r3, [r3, #8]
 800450c:	4a52      	ldr	r2, [pc, #328]	; (8004658 <HAL_RCC_ClockConfig+0x1c8>)
 800450e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004512:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004514:	4b50      	ldr	r3, [pc, #320]	; (8004658 <HAL_RCC_ClockConfig+0x1c8>)
 8004516:	689b      	ldr	r3, [r3, #8]
 8004518:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	689b      	ldr	r3, [r3, #8]
 8004520:	494d      	ldr	r1, [pc, #308]	; (8004658 <HAL_RCC_ClockConfig+0x1c8>)
 8004522:	4313      	orrs	r3, r2
 8004524:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f003 0301 	and.w	r3, r3, #1
 800452e:	2b00      	cmp	r3, #0
 8004530:	d040      	beq.n	80045b4 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	685b      	ldr	r3, [r3, #4]
 8004536:	2b01      	cmp	r3, #1
 8004538:	d107      	bne.n	800454a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800453a:	4b47      	ldr	r3, [pc, #284]	; (8004658 <HAL_RCC_ClockConfig+0x1c8>)
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004542:	2b00      	cmp	r3, #0
 8004544:	d115      	bne.n	8004572 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004546:	2301      	movs	r3, #1
 8004548:	e07f      	b.n	800464a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	685b      	ldr	r3, [r3, #4]
 800454e:	2b02      	cmp	r3, #2
 8004550:	d107      	bne.n	8004562 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004552:	4b41      	ldr	r3, [pc, #260]	; (8004658 <HAL_RCC_ClockConfig+0x1c8>)
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800455a:	2b00      	cmp	r3, #0
 800455c:	d109      	bne.n	8004572 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800455e:	2301      	movs	r3, #1
 8004560:	e073      	b.n	800464a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004562:	4b3d      	ldr	r3, [pc, #244]	; (8004658 <HAL_RCC_ClockConfig+0x1c8>)
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f003 0302 	and.w	r3, r3, #2
 800456a:	2b00      	cmp	r3, #0
 800456c:	d101      	bne.n	8004572 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800456e:	2301      	movs	r3, #1
 8004570:	e06b      	b.n	800464a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004572:	4b39      	ldr	r3, [pc, #228]	; (8004658 <HAL_RCC_ClockConfig+0x1c8>)
 8004574:	689b      	ldr	r3, [r3, #8]
 8004576:	f023 0203 	bic.w	r2, r3, #3
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	685b      	ldr	r3, [r3, #4]
 800457e:	4936      	ldr	r1, [pc, #216]	; (8004658 <HAL_RCC_ClockConfig+0x1c8>)
 8004580:	4313      	orrs	r3, r2
 8004582:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004584:	f7fe f960 	bl	8002848 <HAL_GetTick>
 8004588:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800458a:	e00a      	b.n	80045a2 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800458c:	f7fe f95c 	bl	8002848 <HAL_GetTick>
 8004590:	4602      	mov	r2, r0
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	1ad3      	subs	r3, r2, r3
 8004596:	f241 3288 	movw	r2, #5000	; 0x1388
 800459a:	4293      	cmp	r3, r2
 800459c:	d901      	bls.n	80045a2 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800459e:	2303      	movs	r3, #3
 80045a0:	e053      	b.n	800464a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045a2:	4b2d      	ldr	r3, [pc, #180]	; (8004658 <HAL_RCC_ClockConfig+0x1c8>)
 80045a4:	689b      	ldr	r3, [r3, #8]
 80045a6:	f003 020c 	and.w	r2, r3, #12
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	685b      	ldr	r3, [r3, #4]
 80045ae:	009b      	lsls	r3, r3, #2
 80045b0:	429a      	cmp	r2, r3
 80045b2:	d1eb      	bne.n	800458c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80045b4:	4b27      	ldr	r3, [pc, #156]	; (8004654 <HAL_RCC_ClockConfig+0x1c4>)
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f003 030f 	and.w	r3, r3, #15
 80045bc:	683a      	ldr	r2, [r7, #0]
 80045be:	429a      	cmp	r2, r3
 80045c0:	d210      	bcs.n	80045e4 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045c2:	4b24      	ldr	r3, [pc, #144]	; (8004654 <HAL_RCC_ClockConfig+0x1c4>)
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f023 020f 	bic.w	r2, r3, #15
 80045ca:	4922      	ldr	r1, [pc, #136]	; (8004654 <HAL_RCC_ClockConfig+0x1c4>)
 80045cc:	683b      	ldr	r3, [r7, #0]
 80045ce:	4313      	orrs	r3, r2
 80045d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80045d2:	4b20      	ldr	r3, [pc, #128]	; (8004654 <HAL_RCC_ClockConfig+0x1c4>)
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f003 030f 	and.w	r3, r3, #15
 80045da:	683a      	ldr	r2, [r7, #0]
 80045dc:	429a      	cmp	r2, r3
 80045de:	d001      	beq.n	80045e4 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80045e0:	2301      	movs	r3, #1
 80045e2:	e032      	b.n	800464a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f003 0304 	and.w	r3, r3, #4
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d008      	beq.n	8004602 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80045f0:	4b19      	ldr	r3, [pc, #100]	; (8004658 <HAL_RCC_ClockConfig+0x1c8>)
 80045f2:	689b      	ldr	r3, [r3, #8]
 80045f4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	68db      	ldr	r3, [r3, #12]
 80045fc:	4916      	ldr	r1, [pc, #88]	; (8004658 <HAL_RCC_ClockConfig+0x1c8>)
 80045fe:	4313      	orrs	r3, r2
 8004600:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f003 0308 	and.w	r3, r3, #8
 800460a:	2b00      	cmp	r3, #0
 800460c:	d009      	beq.n	8004622 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800460e:	4b12      	ldr	r3, [pc, #72]	; (8004658 <HAL_RCC_ClockConfig+0x1c8>)
 8004610:	689b      	ldr	r3, [r3, #8]
 8004612:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	691b      	ldr	r3, [r3, #16]
 800461a:	00db      	lsls	r3, r3, #3
 800461c:	490e      	ldr	r1, [pc, #56]	; (8004658 <HAL_RCC_ClockConfig+0x1c8>)
 800461e:	4313      	orrs	r3, r2
 8004620:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004622:	f000 f821 	bl	8004668 <HAL_RCC_GetSysClockFreq>
 8004626:	4602      	mov	r2, r0
 8004628:	4b0b      	ldr	r3, [pc, #44]	; (8004658 <HAL_RCC_ClockConfig+0x1c8>)
 800462a:	689b      	ldr	r3, [r3, #8]
 800462c:	091b      	lsrs	r3, r3, #4
 800462e:	f003 030f 	and.w	r3, r3, #15
 8004632:	490a      	ldr	r1, [pc, #40]	; (800465c <HAL_RCC_ClockConfig+0x1cc>)
 8004634:	5ccb      	ldrb	r3, [r1, r3]
 8004636:	fa22 f303 	lsr.w	r3, r2, r3
 800463a:	4a09      	ldr	r2, [pc, #36]	; (8004660 <HAL_RCC_ClockConfig+0x1d0>)
 800463c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800463e:	4b09      	ldr	r3, [pc, #36]	; (8004664 <HAL_RCC_ClockConfig+0x1d4>)
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	4618      	mov	r0, r3
 8004644:	f7fe f8bc 	bl	80027c0 <HAL_InitTick>

  return HAL_OK;
 8004648:	2300      	movs	r3, #0
}
 800464a:	4618      	mov	r0, r3
 800464c:	3710      	adds	r7, #16
 800464e:	46bd      	mov	sp, r7
 8004650:	bd80      	pop	{r7, pc}
 8004652:	bf00      	nop
 8004654:	40023c00 	.word	0x40023c00
 8004658:	40023800 	.word	0x40023800
 800465c:	080088ac 	.word	0x080088ac
 8004660:	20004e90 	.word	0x20004e90
 8004664:	20004e94 	.word	0x20004e94

08004668 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004668:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800466c:	b090      	sub	sp, #64	; 0x40
 800466e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004670:	2300      	movs	r3, #0
 8004672:	637b      	str	r3, [r7, #52]	; 0x34
 8004674:	2300      	movs	r3, #0
 8004676:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004678:	2300      	movs	r3, #0
 800467a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 800467c:	2300      	movs	r3, #0
 800467e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004680:	4b59      	ldr	r3, [pc, #356]	; (80047e8 <HAL_RCC_GetSysClockFreq+0x180>)
 8004682:	689b      	ldr	r3, [r3, #8]
 8004684:	f003 030c 	and.w	r3, r3, #12
 8004688:	2b08      	cmp	r3, #8
 800468a:	d00d      	beq.n	80046a8 <HAL_RCC_GetSysClockFreq+0x40>
 800468c:	2b08      	cmp	r3, #8
 800468e:	f200 80a1 	bhi.w	80047d4 <HAL_RCC_GetSysClockFreq+0x16c>
 8004692:	2b00      	cmp	r3, #0
 8004694:	d002      	beq.n	800469c <HAL_RCC_GetSysClockFreq+0x34>
 8004696:	2b04      	cmp	r3, #4
 8004698:	d003      	beq.n	80046a2 <HAL_RCC_GetSysClockFreq+0x3a>
 800469a:	e09b      	b.n	80047d4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800469c:	4b53      	ldr	r3, [pc, #332]	; (80047ec <HAL_RCC_GetSysClockFreq+0x184>)
 800469e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80046a0:	e09b      	b.n	80047da <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80046a2:	4b53      	ldr	r3, [pc, #332]	; (80047f0 <HAL_RCC_GetSysClockFreq+0x188>)
 80046a4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80046a6:	e098      	b.n	80047da <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80046a8:	4b4f      	ldr	r3, [pc, #316]	; (80047e8 <HAL_RCC_GetSysClockFreq+0x180>)
 80046aa:	685b      	ldr	r3, [r3, #4]
 80046ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80046b0:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80046b2:	4b4d      	ldr	r3, [pc, #308]	; (80047e8 <HAL_RCC_GetSysClockFreq+0x180>)
 80046b4:	685b      	ldr	r3, [r3, #4]
 80046b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d028      	beq.n	8004710 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80046be:	4b4a      	ldr	r3, [pc, #296]	; (80047e8 <HAL_RCC_GetSysClockFreq+0x180>)
 80046c0:	685b      	ldr	r3, [r3, #4]
 80046c2:	099b      	lsrs	r3, r3, #6
 80046c4:	2200      	movs	r2, #0
 80046c6:	623b      	str	r3, [r7, #32]
 80046c8:	627a      	str	r2, [r7, #36]	; 0x24
 80046ca:	6a3b      	ldr	r3, [r7, #32]
 80046cc:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80046d0:	2100      	movs	r1, #0
 80046d2:	4b47      	ldr	r3, [pc, #284]	; (80047f0 <HAL_RCC_GetSysClockFreq+0x188>)
 80046d4:	fb03 f201 	mul.w	r2, r3, r1
 80046d8:	2300      	movs	r3, #0
 80046da:	fb00 f303 	mul.w	r3, r0, r3
 80046de:	4413      	add	r3, r2
 80046e0:	4a43      	ldr	r2, [pc, #268]	; (80047f0 <HAL_RCC_GetSysClockFreq+0x188>)
 80046e2:	fba0 1202 	umull	r1, r2, r0, r2
 80046e6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80046e8:	460a      	mov	r2, r1
 80046ea:	62ba      	str	r2, [r7, #40]	; 0x28
 80046ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80046ee:	4413      	add	r3, r2
 80046f0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80046f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046f4:	2200      	movs	r2, #0
 80046f6:	61bb      	str	r3, [r7, #24]
 80046f8:	61fa      	str	r2, [r7, #28]
 80046fa:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80046fe:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8004702:	f7fb fdd5 	bl	80002b0 <__aeabi_uldivmod>
 8004706:	4602      	mov	r2, r0
 8004708:	460b      	mov	r3, r1
 800470a:	4613      	mov	r3, r2
 800470c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800470e:	e053      	b.n	80047b8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004710:	4b35      	ldr	r3, [pc, #212]	; (80047e8 <HAL_RCC_GetSysClockFreq+0x180>)
 8004712:	685b      	ldr	r3, [r3, #4]
 8004714:	099b      	lsrs	r3, r3, #6
 8004716:	2200      	movs	r2, #0
 8004718:	613b      	str	r3, [r7, #16]
 800471a:	617a      	str	r2, [r7, #20]
 800471c:	693b      	ldr	r3, [r7, #16]
 800471e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004722:	f04f 0b00 	mov.w	fp, #0
 8004726:	4652      	mov	r2, sl
 8004728:	465b      	mov	r3, fp
 800472a:	f04f 0000 	mov.w	r0, #0
 800472e:	f04f 0100 	mov.w	r1, #0
 8004732:	0159      	lsls	r1, r3, #5
 8004734:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004738:	0150      	lsls	r0, r2, #5
 800473a:	4602      	mov	r2, r0
 800473c:	460b      	mov	r3, r1
 800473e:	ebb2 080a 	subs.w	r8, r2, sl
 8004742:	eb63 090b 	sbc.w	r9, r3, fp
 8004746:	f04f 0200 	mov.w	r2, #0
 800474a:	f04f 0300 	mov.w	r3, #0
 800474e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004752:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004756:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800475a:	ebb2 0408 	subs.w	r4, r2, r8
 800475e:	eb63 0509 	sbc.w	r5, r3, r9
 8004762:	f04f 0200 	mov.w	r2, #0
 8004766:	f04f 0300 	mov.w	r3, #0
 800476a:	00eb      	lsls	r3, r5, #3
 800476c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004770:	00e2      	lsls	r2, r4, #3
 8004772:	4614      	mov	r4, r2
 8004774:	461d      	mov	r5, r3
 8004776:	eb14 030a 	adds.w	r3, r4, sl
 800477a:	603b      	str	r3, [r7, #0]
 800477c:	eb45 030b 	adc.w	r3, r5, fp
 8004780:	607b      	str	r3, [r7, #4]
 8004782:	f04f 0200 	mov.w	r2, #0
 8004786:	f04f 0300 	mov.w	r3, #0
 800478a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800478e:	4629      	mov	r1, r5
 8004790:	028b      	lsls	r3, r1, #10
 8004792:	4621      	mov	r1, r4
 8004794:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004798:	4621      	mov	r1, r4
 800479a:	028a      	lsls	r2, r1, #10
 800479c:	4610      	mov	r0, r2
 800479e:	4619      	mov	r1, r3
 80047a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047a2:	2200      	movs	r2, #0
 80047a4:	60bb      	str	r3, [r7, #8]
 80047a6:	60fa      	str	r2, [r7, #12]
 80047a8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80047ac:	f7fb fd80 	bl	80002b0 <__aeabi_uldivmod>
 80047b0:	4602      	mov	r2, r0
 80047b2:	460b      	mov	r3, r1
 80047b4:	4613      	mov	r3, r2
 80047b6:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80047b8:	4b0b      	ldr	r3, [pc, #44]	; (80047e8 <HAL_RCC_GetSysClockFreq+0x180>)
 80047ba:	685b      	ldr	r3, [r3, #4]
 80047bc:	0c1b      	lsrs	r3, r3, #16
 80047be:	f003 0303 	and.w	r3, r3, #3
 80047c2:	3301      	adds	r3, #1
 80047c4:	005b      	lsls	r3, r3, #1
 80047c6:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 80047c8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80047ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80047d0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80047d2:	e002      	b.n	80047da <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80047d4:	4b05      	ldr	r3, [pc, #20]	; (80047ec <HAL_RCC_GetSysClockFreq+0x184>)
 80047d6:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80047d8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80047da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80047dc:	4618      	mov	r0, r3
 80047de:	3740      	adds	r7, #64	; 0x40
 80047e0:	46bd      	mov	sp, r7
 80047e2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80047e6:	bf00      	nop
 80047e8:	40023800 	.word	0x40023800
 80047ec:	00f42400 	.word	0x00f42400
 80047f0:	017d7840 	.word	0x017d7840

080047f4 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80047f4:	b480      	push	{r7}
 80047f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80047f8:	4b03      	ldr	r3, [pc, #12]	; (8004808 <HAL_RCC_GetHCLKFreq+0x14>)
 80047fa:	681b      	ldr	r3, [r3, #0]
}
 80047fc:	4618      	mov	r0, r3
 80047fe:	46bd      	mov	sp, r7
 8004800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004804:	4770      	bx	lr
 8004806:	bf00      	nop
 8004808:	20004e90 	.word	0x20004e90

0800480c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800480c:	b580      	push	{r7, lr}
 800480e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004810:	f7ff fff0 	bl	80047f4 <HAL_RCC_GetHCLKFreq>
 8004814:	4602      	mov	r2, r0
 8004816:	4b05      	ldr	r3, [pc, #20]	; (800482c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004818:	689b      	ldr	r3, [r3, #8]
 800481a:	0a9b      	lsrs	r3, r3, #10
 800481c:	f003 0307 	and.w	r3, r3, #7
 8004820:	4903      	ldr	r1, [pc, #12]	; (8004830 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004822:	5ccb      	ldrb	r3, [r1, r3]
 8004824:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004828:	4618      	mov	r0, r3
 800482a:	bd80      	pop	{r7, pc}
 800482c:	40023800 	.word	0x40023800
 8004830:	080088bc 	.word	0x080088bc

08004834 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004834:	b580      	push	{r7, lr}
 8004836:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004838:	f7ff ffdc 	bl	80047f4 <HAL_RCC_GetHCLKFreq>
 800483c:	4602      	mov	r2, r0
 800483e:	4b05      	ldr	r3, [pc, #20]	; (8004854 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004840:	689b      	ldr	r3, [r3, #8]
 8004842:	0b5b      	lsrs	r3, r3, #13
 8004844:	f003 0307 	and.w	r3, r3, #7
 8004848:	4903      	ldr	r1, [pc, #12]	; (8004858 <HAL_RCC_GetPCLK2Freq+0x24>)
 800484a:	5ccb      	ldrb	r3, [r1, r3]
 800484c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004850:	4618      	mov	r0, r3
 8004852:	bd80      	pop	{r7, pc}
 8004854:	40023800 	.word	0x40023800
 8004858:	080088bc 	.word	0x080088bc

0800485c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800485c:	b580      	push	{r7, lr}
 800485e:	b088      	sub	sp, #32
 8004860:	af00      	add	r7, sp, #0
 8004862:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004864:	2300      	movs	r3, #0
 8004866:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8004868:	2300      	movs	r3, #0
 800486a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800486c:	2300      	movs	r3, #0
 800486e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8004870:	2300      	movs	r3, #0
 8004872:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8004874:	2300      	movs	r3, #0
 8004876:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f003 0301 	and.w	r3, r3, #1
 8004880:	2b00      	cmp	r3, #0
 8004882:	d012      	beq.n	80048aa <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004884:	4b69      	ldr	r3, [pc, #420]	; (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004886:	689b      	ldr	r3, [r3, #8]
 8004888:	4a68      	ldr	r2, [pc, #416]	; (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800488a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800488e:	6093      	str	r3, [r2, #8]
 8004890:	4b66      	ldr	r3, [pc, #408]	; (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004892:	689a      	ldr	r2, [r3, #8]
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004898:	4964      	ldr	r1, [pc, #400]	; (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800489a:	4313      	orrs	r3, r2
 800489c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d101      	bne.n	80048aa <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80048a6:	2301      	movs	r3, #1
 80048a8:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d017      	beq.n	80048e6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80048b6:	4b5d      	ldr	r3, [pc, #372]	; (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80048b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80048bc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048c4:	4959      	ldr	r1, [pc, #356]	; (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80048c6:	4313      	orrs	r3, r2
 80048c8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048d0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80048d4:	d101      	bne.n	80048da <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80048d6:	2301      	movs	r3, #1
 80048d8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d101      	bne.n	80048e6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80048e2:	2301      	movs	r3, #1
 80048e4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d017      	beq.n	8004922 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80048f2:	4b4e      	ldr	r3, [pc, #312]	; (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80048f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80048f8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004900:	494a      	ldr	r1, [pc, #296]	; (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004902:	4313      	orrs	r3, r2
 8004904:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800490c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004910:	d101      	bne.n	8004916 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8004912:	2301      	movs	r3, #1
 8004914:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800491a:	2b00      	cmp	r3, #0
 800491c:	d101      	bne.n	8004922 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800491e:	2301      	movs	r3, #1
 8004920:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800492a:	2b00      	cmp	r3, #0
 800492c:	d001      	beq.n	8004932 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800492e:	2301      	movs	r3, #1
 8004930:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f003 0320 	and.w	r3, r3, #32
 800493a:	2b00      	cmp	r3, #0
 800493c:	f000 808b 	beq.w	8004a56 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004940:	4b3a      	ldr	r3, [pc, #232]	; (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004942:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004944:	4a39      	ldr	r2, [pc, #228]	; (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004946:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800494a:	6413      	str	r3, [r2, #64]	; 0x40
 800494c:	4b37      	ldr	r3, [pc, #220]	; (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800494e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004950:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004954:	60bb      	str	r3, [r7, #8]
 8004956:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004958:	4b35      	ldr	r3, [pc, #212]	; (8004a30 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	4a34      	ldr	r2, [pc, #208]	; (8004a30 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800495e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004962:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004964:	f7fd ff70 	bl	8002848 <HAL_GetTick>
 8004968:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800496a:	e008      	b.n	800497e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800496c:	f7fd ff6c 	bl	8002848 <HAL_GetTick>
 8004970:	4602      	mov	r2, r0
 8004972:	697b      	ldr	r3, [r7, #20]
 8004974:	1ad3      	subs	r3, r2, r3
 8004976:	2b64      	cmp	r3, #100	; 0x64
 8004978:	d901      	bls.n	800497e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800497a:	2303      	movs	r3, #3
 800497c:	e357      	b.n	800502e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800497e:	4b2c      	ldr	r3, [pc, #176]	; (8004a30 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004986:	2b00      	cmp	r3, #0
 8004988:	d0f0      	beq.n	800496c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800498a:	4b28      	ldr	r3, [pc, #160]	; (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800498c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800498e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004992:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004994:	693b      	ldr	r3, [r7, #16]
 8004996:	2b00      	cmp	r3, #0
 8004998:	d035      	beq.n	8004a06 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800499e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80049a2:	693a      	ldr	r2, [r7, #16]
 80049a4:	429a      	cmp	r2, r3
 80049a6:	d02e      	beq.n	8004a06 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80049a8:	4b20      	ldr	r3, [pc, #128]	; (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80049aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80049b0:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80049b2:	4b1e      	ldr	r3, [pc, #120]	; (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80049b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049b6:	4a1d      	ldr	r2, [pc, #116]	; (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80049b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80049bc:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80049be:	4b1b      	ldr	r3, [pc, #108]	; (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80049c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049c2:	4a1a      	ldr	r2, [pc, #104]	; (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80049c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80049c8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80049ca:	4a18      	ldr	r2, [pc, #96]	; (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80049cc:	693b      	ldr	r3, [r7, #16]
 80049ce:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80049d0:	4b16      	ldr	r3, [pc, #88]	; (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80049d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049d4:	f003 0301 	and.w	r3, r3, #1
 80049d8:	2b01      	cmp	r3, #1
 80049da:	d114      	bne.n	8004a06 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049dc:	f7fd ff34 	bl	8002848 <HAL_GetTick>
 80049e0:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80049e2:	e00a      	b.n	80049fa <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80049e4:	f7fd ff30 	bl	8002848 <HAL_GetTick>
 80049e8:	4602      	mov	r2, r0
 80049ea:	697b      	ldr	r3, [r7, #20]
 80049ec:	1ad3      	subs	r3, r2, r3
 80049ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80049f2:	4293      	cmp	r3, r2
 80049f4:	d901      	bls.n	80049fa <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80049f6:	2303      	movs	r3, #3
 80049f8:	e319      	b.n	800502e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80049fa:	4b0c      	ldr	r3, [pc, #48]	; (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80049fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049fe:	f003 0302 	and.w	r3, r3, #2
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d0ee      	beq.n	80049e4 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a0a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a0e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004a12:	d111      	bne.n	8004a38 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004a14:	4b05      	ldr	r3, [pc, #20]	; (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a16:	689b      	ldr	r3, [r3, #8]
 8004a18:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004a20:	4b04      	ldr	r3, [pc, #16]	; (8004a34 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004a22:	400b      	ands	r3, r1
 8004a24:	4901      	ldr	r1, [pc, #4]	; (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a26:	4313      	orrs	r3, r2
 8004a28:	608b      	str	r3, [r1, #8]
 8004a2a:	e00b      	b.n	8004a44 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004a2c:	40023800 	.word	0x40023800
 8004a30:	40007000 	.word	0x40007000
 8004a34:	0ffffcff 	.word	0x0ffffcff
 8004a38:	4baa      	ldr	r3, [pc, #680]	; (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004a3a:	689b      	ldr	r3, [r3, #8]
 8004a3c:	4aa9      	ldr	r2, [pc, #676]	; (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004a3e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004a42:	6093      	str	r3, [r2, #8]
 8004a44:	4ba7      	ldr	r3, [pc, #668]	; (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004a46:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a4c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a50:	49a4      	ldr	r1, [pc, #656]	; (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004a52:	4313      	orrs	r3, r2
 8004a54:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f003 0310 	and.w	r3, r3, #16
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d010      	beq.n	8004a84 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004a62:	4ba0      	ldr	r3, [pc, #640]	; (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004a64:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004a68:	4a9e      	ldr	r2, [pc, #632]	; (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004a6a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004a6e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004a72:	4b9c      	ldr	r3, [pc, #624]	; (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004a74:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a7c:	4999      	ldr	r1, [pc, #612]	; (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004a7e:	4313      	orrs	r3, r2
 8004a80:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d00a      	beq.n	8004aa6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004a90:	4b94      	ldr	r3, [pc, #592]	; (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004a92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a96:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004a9e:	4991      	ldr	r1, [pc, #580]	; (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004aa0:	4313      	orrs	r3, r2
 8004aa2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d00a      	beq.n	8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004ab2:	4b8c      	ldr	r3, [pc, #560]	; (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004ab4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ab8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004ac0:	4988      	ldr	r1, [pc, #544]	; (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004ac2:	4313      	orrs	r3, r2
 8004ac4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d00a      	beq.n	8004aea <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004ad4:	4b83      	ldr	r3, [pc, #524]	; (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004ad6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ada:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004ae2:	4980      	ldr	r1, [pc, #512]	; (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004ae4:	4313      	orrs	r3, r2
 8004ae6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d00a      	beq.n	8004b0c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004af6:	4b7b      	ldr	r3, [pc, #492]	; (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004af8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004afc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b04:	4977      	ldr	r1, [pc, #476]	; (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004b06:	4313      	orrs	r3, r2
 8004b08:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d00a      	beq.n	8004b2e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004b18:	4b72      	ldr	r3, [pc, #456]	; (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004b1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b1e:	f023 0203 	bic.w	r2, r3, #3
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b26:	496f      	ldr	r1, [pc, #444]	; (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004b28:	4313      	orrs	r3, r2
 8004b2a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d00a      	beq.n	8004b50 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004b3a:	4b6a      	ldr	r3, [pc, #424]	; (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004b3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b40:	f023 020c 	bic.w	r2, r3, #12
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b48:	4966      	ldr	r1, [pc, #408]	; (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004b4a:	4313      	orrs	r3, r2
 8004b4c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d00a      	beq.n	8004b72 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004b5c:	4b61      	ldr	r3, [pc, #388]	; (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004b5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b62:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b6a:	495e      	ldr	r1, [pc, #376]	; (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004b6c:	4313      	orrs	r3, r2
 8004b6e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d00a      	beq.n	8004b94 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004b7e:	4b59      	ldr	r3, [pc, #356]	; (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004b80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b84:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b8c:	4955      	ldr	r1, [pc, #340]	; (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004b8e:	4313      	orrs	r3, r2
 8004b90:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d00a      	beq.n	8004bb6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004ba0:	4b50      	ldr	r3, [pc, #320]	; (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004ba2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ba6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bae:	494d      	ldr	r1, [pc, #308]	; (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004bb0:	4313      	orrs	r3, r2
 8004bb2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d00a      	beq.n	8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8004bc2:	4b48      	ldr	r3, [pc, #288]	; (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004bc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bc8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bd0:	4944      	ldr	r1, [pc, #272]	; (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004bd2:	4313      	orrs	r3, r2
 8004bd4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d00a      	beq.n	8004bfa <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004be4:	4b3f      	ldr	r3, [pc, #252]	; (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004be6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bea:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004bf2:	493c      	ldr	r1, [pc, #240]	; (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004bf4:	4313      	orrs	r3, r2
 8004bf6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d00a      	beq.n	8004c1c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004c06:	4b37      	ldr	r3, [pc, #220]	; (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004c08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c0c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c14:	4933      	ldr	r1, [pc, #204]	; (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004c16:	4313      	orrs	r3, r2
 8004c18:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d00a      	beq.n	8004c3e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004c28:	4b2e      	ldr	r3, [pc, #184]	; (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004c2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c2e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004c36:	492b      	ldr	r1, [pc, #172]	; (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004c38:	4313      	orrs	r3, r2
 8004c3a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d011      	beq.n	8004c6e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004c4a:	4b26      	ldr	r3, [pc, #152]	; (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004c4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c50:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004c58:	4922      	ldr	r1, [pc, #136]	; (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004c5a:	4313      	orrs	r3, r2
 8004c5c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004c64:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004c68:	d101      	bne.n	8004c6e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8004c6a:	2301      	movs	r3, #1
 8004c6c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f003 0308 	and.w	r3, r3, #8
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d001      	beq.n	8004c7e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8004c7a:	2301      	movs	r3, #1
 8004c7c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d00a      	beq.n	8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004c8a:	4b16      	ldr	r3, [pc, #88]	; (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004c8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c90:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c98:	4912      	ldr	r1, [pc, #72]	; (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004c9a:	4313      	orrs	r3, r2
 8004c9c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d00b      	beq.n	8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004cac:	4b0d      	ldr	r3, [pc, #52]	; (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004cae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cb2:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004cbc:	4909      	ldr	r1, [pc, #36]	; (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004cbe:	4313      	orrs	r3, r2
 8004cc0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004cc4:	69fb      	ldr	r3, [r7, #28]
 8004cc6:	2b01      	cmp	r3, #1
 8004cc8:	d006      	beq.n	8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	f000 80d9 	beq.w	8004e8a <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004cd8:	4b02      	ldr	r3, [pc, #8]	; (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	4a01      	ldr	r2, [pc, #4]	; (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004cde:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004ce2:	e001      	b.n	8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8004ce4:	40023800 	.word	0x40023800
 8004ce8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004cea:	f7fd fdad 	bl	8002848 <HAL_GetTick>
 8004cee:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004cf0:	e008      	b.n	8004d04 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004cf2:	f7fd fda9 	bl	8002848 <HAL_GetTick>
 8004cf6:	4602      	mov	r2, r0
 8004cf8:	697b      	ldr	r3, [r7, #20]
 8004cfa:	1ad3      	subs	r3, r2, r3
 8004cfc:	2b64      	cmp	r3, #100	; 0x64
 8004cfe:	d901      	bls.n	8004d04 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004d00:	2303      	movs	r3, #3
 8004d02:	e194      	b.n	800502e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004d04:	4b6c      	ldr	r3, [pc, #432]	; (8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d1f0      	bne.n	8004cf2 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f003 0301 	and.w	r3, r3, #1
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d021      	beq.n	8004d60 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d11d      	bne.n	8004d60 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004d24:	4b64      	ldr	r3, [pc, #400]	; (8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004d26:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004d2a:	0c1b      	lsrs	r3, r3, #16
 8004d2c:	f003 0303 	and.w	r3, r3, #3
 8004d30:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004d32:	4b61      	ldr	r3, [pc, #388]	; (8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004d34:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004d38:	0e1b      	lsrs	r3, r3, #24
 8004d3a:	f003 030f 	and.w	r3, r3, #15
 8004d3e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	685b      	ldr	r3, [r3, #4]
 8004d44:	019a      	lsls	r2, r3, #6
 8004d46:	693b      	ldr	r3, [r7, #16]
 8004d48:	041b      	lsls	r3, r3, #16
 8004d4a:	431a      	orrs	r2, r3
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	061b      	lsls	r3, r3, #24
 8004d50:	431a      	orrs	r2, r3
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	689b      	ldr	r3, [r3, #8]
 8004d56:	071b      	lsls	r3, r3, #28
 8004d58:	4957      	ldr	r1, [pc, #348]	; (8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004d5a:	4313      	orrs	r3, r2
 8004d5c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d004      	beq.n	8004d76 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d70:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004d74:	d00a      	beq.n	8004d8c <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d02e      	beq.n	8004de0 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d86:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004d8a:	d129      	bne.n	8004de0 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004d8c:	4b4a      	ldr	r3, [pc, #296]	; (8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004d8e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004d92:	0c1b      	lsrs	r3, r3, #16
 8004d94:	f003 0303 	and.w	r3, r3, #3
 8004d98:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004d9a:	4b47      	ldr	r3, [pc, #284]	; (8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004d9c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004da0:	0f1b      	lsrs	r3, r3, #28
 8004da2:	f003 0307 	and.w	r3, r3, #7
 8004da6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	685b      	ldr	r3, [r3, #4]
 8004dac:	019a      	lsls	r2, r3, #6
 8004dae:	693b      	ldr	r3, [r7, #16]
 8004db0:	041b      	lsls	r3, r3, #16
 8004db2:	431a      	orrs	r2, r3
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	68db      	ldr	r3, [r3, #12]
 8004db8:	061b      	lsls	r3, r3, #24
 8004dba:	431a      	orrs	r2, r3
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	071b      	lsls	r3, r3, #28
 8004dc0:	493d      	ldr	r1, [pc, #244]	; (8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004dc2:	4313      	orrs	r3, r2
 8004dc4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004dc8:	4b3b      	ldr	r3, [pc, #236]	; (8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004dca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004dce:	f023 021f 	bic.w	r2, r3, #31
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dd6:	3b01      	subs	r3, #1
 8004dd8:	4937      	ldr	r1, [pc, #220]	; (8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004dda:	4313      	orrs	r3, r2
 8004ddc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d01d      	beq.n	8004e28 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004dec:	4b32      	ldr	r3, [pc, #200]	; (8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004dee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004df2:	0e1b      	lsrs	r3, r3, #24
 8004df4:	f003 030f 	and.w	r3, r3, #15
 8004df8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004dfa:	4b2f      	ldr	r3, [pc, #188]	; (8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004dfc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004e00:	0f1b      	lsrs	r3, r3, #28
 8004e02:	f003 0307 	and.w	r3, r3, #7
 8004e06:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	685b      	ldr	r3, [r3, #4]
 8004e0c:	019a      	lsls	r2, r3, #6
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	691b      	ldr	r3, [r3, #16]
 8004e12:	041b      	lsls	r3, r3, #16
 8004e14:	431a      	orrs	r2, r3
 8004e16:	693b      	ldr	r3, [r7, #16]
 8004e18:	061b      	lsls	r3, r3, #24
 8004e1a:	431a      	orrs	r2, r3
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	071b      	lsls	r3, r3, #28
 8004e20:	4925      	ldr	r1, [pc, #148]	; (8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004e22:	4313      	orrs	r3, r2
 8004e24:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d011      	beq.n	8004e58 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	685b      	ldr	r3, [r3, #4]
 8004e38:	019a      	lsls	r2, r3, #6
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	691b      	ldr	r3, [r3, #16]
 8004e3e:	041b      	lsls	r3, r3, #16
 8004e40:	431a      	orrs	r2, r3
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	68db      	ldr	r3, [r3, #12]
 8004e46:	061b      	lsls	r3, r3, #24
 8004e48:	431a      	orrs	r2, r3
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	689b      	ldr	r3, [r3, #8]
 8004e4e:	071b      	lsls	r3, r3, #28
 8004e50:	4919      	ldr	r1, [pc, #100]	; (8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004e52:	4313      	orrs	r3, r2
 8004e54:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004e58:	4b17      	ldr	r3, [pc, #92]	; (8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	4a16      	ldr	r2, [pc, #88]	; (8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004e5e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004e62:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e64:	f7fd fcf0 	bl	8002848 <HAL_GetTick>
 8004e68:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004e6a:	e008      	b.n	8004e7e <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004e6c:	f7fd fcec 	bl	8002848 <HAL_GetTick>
 8004e70:	4602      	mov	r2, r0
 8004e72:	697b      	ldr	r3, [r7, #20]
 8004e74:	1ad3      	subs	r3, r2, r3
 8004e76:	2b64      	cmp	r3, #100	; 0x64
 8004e78:	d901      	bls.n	8004e7e <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004e7a:	2303      	movs	r3, #3
 8004e7c:	e0d7      	b.n	800502e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004e7e:	4b0e      	ldr	r3, [pc, #56]	; (8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d0f0      	beq.n	8004e6c <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004e8a:	69bb      	ldr	r3, [r7, #24]
 8004e8c:	2b01      	cmp	r3, #1
 8004e8e:	f040 80cd 	bne.w	800502c <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004e92:	4b09      	ldr	r3, [pc, #36]	; (8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	4a08      	ldr	r2, [pc, #32]	; (8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004e98:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004e9c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e9e:	f7fd fcd3 	bl	8002848 <HAL_GetTick>
 8004ea2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004ea4:	e00a      	b.n	8004ebc <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004ea6:	f7fd fccf 	bl	8002848 <HAL_GetTick>
 8004eaa:	4602      	mov	r2, r0
 8004eac:	697b      	ldr	r3, [r7, #20]
 8004eae:	1ad3      	subs	r3, r2, r3
 8004eb0:	2b64      	cmp	r3, #100	; 0x64
 8004eb2:	d903      	bls.n	8004ebc <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004eb4:	2303      	movs	r3, #3
 8004eb6:	e0ba      	b.n	800502e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8004eb8:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004ebc:	4b5e      	ldr	r3, [pc, #376]	; (8005038 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004ec4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004ec8:	d0ed      	beq.n	8004ea6 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d003      	beq.n	8004ede <HAL_RCCEx_PeriphCLKConfig+0x682>
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d009      	beq.n	8004ef2 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d02e      	beq.n	8004f48 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d12a      	bne.n	8004f48 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004ef2:	4b51      	ldr	r3, [pc, #324]	; (8005038 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004ef4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ef8:	0c1b      	lsrs	r3, r3, #16
 8004efa:	f003 0303 	and.w	r3, r3, #3
 8004efe:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004f00:	4b4d      	ldr	r3, [pc, #308]	; (8005038 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004f02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f06:	0f1b      	lsrs	r3, r3, #28
 8004f08:	f003 0307 	and.w	r3, r3, #7
 8004f0c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	695b      	ldr	r3, [r3, #20]
 8004f12:	019a      	lsls	r2, r3, #6
 8004f14:	693b      	ldr	r3, [r7, #16]
 8004f16:	041b      	lsls	r3, r3, #16
 8004f18:	431a      	orrs	r2, r3
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	699b      	ldr	r3, [r3, #24]
 8004f1e:	061b      	lsls	r3, r3, #24
 8004f20:	431a      	orrs	r2, r3
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	071b      	lsls	r3, r3, #28
 8004f26:	4944      	ldr	r1, [pc, #272]	; (8005038 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004f28:	4313      	orrs	r3, r2
 8004f2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004f2e:	4b42      	ldr	r3, [pc, #264]	; (8005038 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004f30:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004f34:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f3c:	3b01      	subs	r3, #1
 8004f3e:	021b      	lsls	r3, r3, #8
 8004f40:	493d      	ldr	r1, [pc, #244]	; (8005038 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004f42:	4313      	orrs	r3, r2
 8004f44:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d022      	beq.n	8004f9a <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004f58:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004f5c:	d11d      	bne.n	8004f9a <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004f5e:	4b36      	ldr	r3, [pc, #216]	; (8005038 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004f60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f64:	0e1b      	lsrs	r3, r3, #24
 8004f66:	f003 030f 	and.w	r3, r3, #15
 8004f6a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004f6c:	4b32      	ldr	r3, [pc, #200]	; (8005038 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004f6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f72:	0f1b      	lsrs	r3, r3, #28
 8004f74:	f003 0307 	and.w	r3, r3, #7
 8004f78:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	695b      	ldr	r3, [r3, #20]
 8004f7e:	019a      	lsls	r2, r3, #6
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	6a1b      	ldr	r3, [r3, #32]
 8004f84:	041b      	lsls	r3, r3, #16
 8004f86:	431a      	orrs	r2, r3
 8004f88:	693b      	ldr	r3, [r7, #16]
 8004f8a:	061b      	lsls	r3, r3, #24
 8004f8c:	431a      	orrs	r2, r3
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	071b      	lsls	r3, r3, #28
 8004f92:	4929      	ldr	r1, [pc, #164]	; (8005038 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004f94:	4313      	orrs	r3, r2
 8004f96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	f003 0308 	and.w	r3, r3, #8
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d028      	beq.n	8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004fa6:	4b24      	ldr	r3, [pc, #144]	; (8005038 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004fa8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fac:	0e1b      	lsrs	r3, r3, #24
 8004fae:	f003 030f 	and.w	r3, r3, #15
 8004fb2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004fb4:	4b20      	ldr	r3, [pc, #128]	; (8005038 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004fb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fba:	0c1b      	lsrs	r3, r3, #16
 8004fbc:	f003 0303 	and.w	r3, r3, #3
 8004fc0:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	695b      	ldr	r3, [r3, #20]
 8004fc6:	019a      	lsls	r2, r3, #6
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	041b      	lsls	r3, r3, #16
 8004fcc:	431a      	orrs	r2, r3
 8004fce:	693b      	ldr	r3, [r7, #16]
 8004fd0:	061b      	lsls	r3, r3, #24
 8004fd2:	431a      	orrs	r2, r3
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	69db      	ldr	r3, [r3, #28]
 8004fd8:	071b      	lsls	r3, r3, #28
 8004fda:	4917      	ldr	r1, [pc, #92]	; (8005038 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004fdc:	4313      	orrs	r3, r2
 8004fde:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004fe2:	4b15      	ldr	r3, [pc, #84]	; (8005038 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004fe4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004fe8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ff0:	4911      	ldr	r1, [pc, #68]	; (8005038 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004ff2:	4313      	orrs	r3, r2
 8004ff4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004ff8:	4b0f      	ldr	r3, [pc, #60]	; (8005038 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	4a0e      	ldr	r2, [pc, #56]	; (8005038 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004ffe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005002:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005004:	f7fd fc20 	bl	8002848 <HAL_GetTick>
 8005008:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800500a:	e008      	b.n	800501e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800500c:	f7fd fc1c 	bl	8002848 <HAL_GetTick>
 8005010:	4602      	mov	r2, r0
 8005012:	697b      	ldr	r3, [r7, #20]
 8005014:	1ad3      	subs	r3, r2, r3
 8005016:	2b64      	cmp	r3, #100	; 0x64
 8005018:	d901      	bls.n	800501e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800501a:	2303      	movs	r3, #3
 800501c:	e007      	b.n	800502e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800501e:	4b06      	ldr	r3, [pc, #24]	; (8005038 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005026:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800502a:	d1ef      	bne.n	800500c <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 800502c:	2300      	movs	r3, #0
}
 800502e:	4618      	mov	r0, r3
 8005030:	3720      	adds	r7, #32
 8005032:	46bd      	mov	sp, r7
 8005034:	bd80      	pop	{r7, pc}
 8005036:	bf00      	nop
 8005038:	40023800 	.word	0x40023800

0800503c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800503c:	b580      	push	{r7, lr}
 800503e:	b084      	sub	sp, #16
 8005040:	af00      	add	r7, sp, #0
 8005042:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	2b00      	cmp	r3, #0
 8005048:	d101      	bne.n	800504e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800504a:	2301      	movs	r3, #1
 800504c:	e09d      	b.n	800518a <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005052:	2b00      	cmp	r3, #0
 8005054:	d108      	bne.n	8005068 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	685b      	ldr	r3, [r3, #4]
 800505a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800505e:	d009      	beq.n	8005074 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	2200      	movs	r2, #0
 8005064:	61da      	str	r2, [r3, #28]
 8005066:	e005      	b.n	8005074 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	2200      	movs	r2, #0
 800506c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	2200      	movs	r2, #0
 8005072:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	2200      	movs	r2, #0
 8005078:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005080:	b2db      	uxtb	r3, r3
 8005082:	2b00      	cmp	r3, #0
 8005084:	d106      	bne.n	8005094 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	2200      	movs	r2, #0
 800508a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800508e:	6878      	ldr	r0, [r7, #4]
 8005090:	f7fd f93a 	bl	8002308 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2202      	movs	r2, #2
 8005098:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	681a      	ldr	r2, [r3, #0]
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80050aa:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	68db      	ldr	r3, [r3, #12]
 80050b0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80050b4:	d902      	bls.n	80050bc <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80050b6:	2300      	movs	r3, #0
 80050b8:	60fb      	str	r3, [r7, #12]
 80050ba:	e002      	b.n	80050c2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80050bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80050c0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	68db      	ldr	r3, [r3, #12]
 80050c6:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80050ca:	d007      	beq.n	80050dc <HAL_SPI_Init+0xa0>
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	68db      	ldr	r3, [r3, #12]
 80050d0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80050d4:	d002      	beq.n	80050dc <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	2200      	movs	r2, #0
 80050da:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	685b      	ldr	r3, [r3, #4]
 80050e0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	689b      	ldr	r3, [r3, #8]
 80050e8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80050ec:	431a      	orrs	r2, r3
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	691b      	ldr	r3, [r3, #16]
 80050f2:	f003 0302 	and.w	r3, r3, #2
 80050f6:	431a      	orrs	r2, r3
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	695b      	ldr	r3, [r3, #20]
 80050fc:	f003 0301 	and.w	r3, r3, #1
 8005100:	431a      	orrs	r2, r3
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	699b      	ldr	r3, [r3, #24]
 8005106:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800510a:	431a      	orrs	r2, r3
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	69db      	ldr	r3, [r3, #28]
 8005110:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005114:	431a      	orrs	r2, r3
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	6a1b      	ldr	r3, [r3, #32]
 800511a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800511e:	ea42 0103 	orr.w	r1, r2, r3
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005126:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	430a      	orrs	r2, r1
 8005130:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	699b      	ldr	r3, [r3, #24]
 8005136:	0c1b      	lsrs	r3, r3, #16
 8005138:	f003 0204 	and.w	r2, r3, #4
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005140:	f003 0310 	and.w	r3, r3, #16
 8005144:	431a      	orrs	r2, r3
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800514a:	f003 0308 	and.w	r3, r3, #8
 800514e:	431a      	orrs	r2, r3
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	68db      	ldr	r3, [r3, #12]
 8005154:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005158:	ea42 0103 	orr.w	r1, r2, r3
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	430a      	orrs	r2, r1
 8005168:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	69da      	ldr	r2, [r3, #28]
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005178:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	2200      	movs	r2, #0
 800517e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	2201      	movs	r2, #1
 8005184:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005188:	2300      	movs	r3, #0
}
 800518a:	4618      	mov	r0, r3
 800518c:	3710      	adds	r7, #16
 800518e:	46bd      	mov	sp, r7
 8005190:	bd80      	pop	{r7, pc}

08005192 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005192:	b580      	push	{r7, lr}
 8005194:	b088      	sub	sp, #32
 8005196:	af00      	add	r7, sp, #0
 8005198:	60f8      	str	r0, [r7, #12]
 800519a:	60b9      	str	r1, [r7, #8]
 800519c:	603b      	str	r3, [r7, #0]
 800519e:	4613      	mov	r3, r2
 80051a0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80051a2:	2300      	movs	r3, #0
 80051a4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80051ac:	2b01      	cmp	r3, #1
 80051ae:	d101      	bne.n	80051b4 <HAL_SPI_Transmit+0x22>
 80051b0:	2302      	movs	r3, #2
 80051b2:	e158      	b.n	8005466 <HAL_SPI_Transmit+0x2d4>
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	2201      	movs	r2, #1
 80051b8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80051bc:	f7fd fb44 	bl	8002848 <HAL_GetTick>
 80051c0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80051c2:	88fb      	ldrh	r3, [r7, #6]
 80051c4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80051cc:	b2db      	uxtb	r3, r3
 80051ce:	2b01      	cmp	r3, #1
 80051d0:	d002      	beq.n	80051d8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80051d2:	2302      	movs	r3, #2
 80051d4:	77fb      	strb	r3, [r7, #31]
    goto error;
 80051d6:	e13d      	b.n	8005454 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 80051d8:	68bb      	ldr	r3, [r7, #8]
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d002      	beq.n	80051e4 <HAL_SPI_Transmit+0x52>
 80051de:	88fb      	ldrh	r3, [r7, #6]
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d102      	bne.n	80051ea <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80051e4:	2301      	movs	r3, #1
 80051e6:	77fb      	strb	r3, [r7, #31]
    goto error;
 80051e8:	e134      	b.n	8005454 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	2203      	movs	r2, #3
 80051ee:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	2200      	movs	r2, #0
 80051f6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	68ba      	ldr	r2, [r7, #8]
 80051fc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	88fa      	ldrh	r2, [r7, #6]
 8005202:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	88fa      	ldrh	r2, [r7, #6]
 8005208:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	2200      	movs	r2, #0
 800520e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	2200      	movs	r2, #0
 8005214:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	2200      	movs	r2, #0
 800521c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	2200      	movs	r2, #0
 8005224:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	2200      	movs	r2, #0
 800522a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	689b      	ldr	r3, [r3, #8]
 8005230:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005234:	d10f      	bne.n	8005256 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	681a      	ldr	r2, [r3, #0]
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005244:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	681a      	ldr	r2, [r3, #0]
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005254:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005260:	2b40      	cmp	r3, #64	; 0x40
 8005262:	d007      	beq.n	8005274 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	681a      	ldr	r2, [r3, #0]
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005272:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	68db      	ldr	r3, [r3, #12]
 8005278:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800527c:	d94b      	bls.n	8005316 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	685b      	ldr	r3, [r3, #4]
 8005282:	2b00      	cmp	r3, #0
 8005284:	d002      	beq.n	800528c <HAL_SPI_Transmit+0xfa>
 8005286:	8afb      	ldrh	r3, [r7, #22]
 8005288:	2b01      	cmp	r3, #1
 800528a:	d13e      	bne.n	800530a <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005290:	881a      	ldrh	r2, [r3, #0]
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800529c:	1c9a      	adds	r2, r3, #2
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80052a6:	b29b      	uxth	r3, r3
 80052a8:	3b01      	subs	r3, #1
 80052aa:	b29a      	uxth	r2, r3
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80052b0:	e02b      	b.n	800530a <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	689b      	ldr	r3, [r3, #8]
 80052b8:	f003 0302 	and.w	r3, r3, #2
 80052bc:	2b02      	cmp	r3, #2
 80052be:	d112      	bne.n	80052e6 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052c4:	881a      	ldrh	r2, [r3, #0]
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052d0:	1c9a      	adds	r2, r3, #2
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80052da:	b29b      	uxth	r3, r3
 80052dc:	3b01      	subs	r3, #1
 80052de:	b29a      	uxth	r2, r3
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80052e4:	e011      	b.n	800530a <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80052e6:	f7fd faaf 	bl	8002848 <HAL_GetTick>
 80052ea:	4602      	mov	r2, r0
 80052ec:	69bb      	ldr	r3, [r7, #24]
 80052ee:	1ad3      	subs	r3, r2, r3
 80052f0:	683a      	ldr	r2, [r7, #0]
 80052f2:	429a      	cmp	r2, r3
 80052f4:	d803      	bhi.n	80052fe <HAL_SPI_Transmit+0x16c>
 80052f6:	683b      	ldr	r3, [r7, #0]
 80052f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052fc:	d102      	bne.n	8005304 <HAL_SPI_Transmit+0x172>
 80052fe:	683b      	ldr	r3, [r7, #0]
 8005300:	2b00      	cmp	r3, #0
 8005302:	d102      	bne.n	800530a <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8005304:	2303      	movs	r3, #3
 8005306:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005308:	e0a4      	b.n	8005454 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800530e:	b29b      	uxth	r3, r3
 8005310:	2b00      	cmp	r3, #0
 8005312:	d1ce      	bne.n	80052b2 <HAL_SPI_Transmit+0x120>
 8005314:	e07c      	b.n	8005410 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	685b      	ldr	r3, [r3, #4]
 800531a:	2b00      	cmp	r3, #0
 800531c:	d002      	beq.n	8005324 <HAL_SPI_Transmit+0x192>
 800531e:	8afb      	ldrh	r3, [r7, #22]
 8005320:	2b01      	cmp	r3, #1
 8005322:	d170      	bne.n	8005406 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005328:	b29b      	uxth	r3, r3
 800532a:	2b01      	cmp	r3, #1
 800532c:	d912      	bls.n	8005354 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005332:	881a      	ldrh	r2, [r3, #0]
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800533e:	1c9a      	adds	r2, r3, #2
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005348:	b29b      	uxth	r3, r3
 800534a:	3b02      	subs	r3, #2
 800534c:	b29a      	uxth	r2, r3
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005352:	e058      	b.n	8005406 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	330c      	adds	r3, #12
 800535e:	7812      	ldrb	r2, [r2, #0]
 8005360:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005366:	1c5a      	adds	r2, r3, #1
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005370:	b29b      	uxth	r3, r3
 8005372:	3b01      	subs	r3, #1
 8005374:	b29a      	uxth	r2, r3
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800537a:	e044      	b.n	8005406 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	689b      	ldr	r3, [r3, #8]
 8005382:	f003 0302 	and.w	r3, r3, #2
 8005386:	2b02      	cmp	r3, #2
 8005388:	d12b      	bne.n	80053e2 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800538e:	b29b      	uxth	r3, r3
 8005390:	2b01      	cmp	r3, #1
 8005392:	d912      	bls.n	80053ba <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005398:	881a      	ldrh	r2, [r3, #0]
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053a4:	1c9a      	adds	r2, r3, #2
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80053ae:	b29b      	uxth	r3, r3
 80053b0:	3b02      	subs	r3, #2
 80053b2:	b29a      	uxth	r2, r3
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80053b8:	e025      	b.n	8005406 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	330c      	adds	r3, #12
 80053c4:	7812      	ldrb	r2, [r2, #0]
 80053c6:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053cc:	1c5a      	adds	r2, r3, #1
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80053d6:	b29b      	uxth	r3, r3
 80053d8:	3b01      	subs	r3, #1
 80053da:	b29a      	uxth	r2, r3
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	87da      	strh	r2, [r3, #62]	; 0x3e
 80053e0:	e011      	b.n	8005406 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80053e2:	f7fd fa31 	bl	8002848 <HAL_GetTick>
 80053e6:	4602      	mov	r2, r0
 80053e8:	69bb      	ldr	r3, [r7, #24]
 80053ea:	1ad3      	subs	r3, r2, r3
 80053ec:	683a      	ldr	r2, [r7, #0]
 80053ee:	429a      	cmp	r2, r3
 80053f0:	d803      	bhi.n	80053fa <HAL_SPI_Transmit+0x268>
 80053f2:	683b      	ldr	r3, [r7, #0]
 80053f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053f8:	d102      	bne.n	8005400 <HAL_SPI_Transmit+0x26e>
 80053fa:	683b      	ldr	r3, [r7, #0]
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d102      	bne.n	8005406 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8005400:	2303      	movs	r3, #3
 8005402:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005404:	e026      	b.n	8005454 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800540a:	b29b      	uxth	r3, r3
 800540c:	2b00      	cmp	r3, #0
 800540e:	d1b5      	bne.n	800537c <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005410:	69ba      	ldr	r2, [r7, #24]
 8005412:	6839      	ldr	r1, [r7, #0]
 8005414:	68f8      	ldr	r0, [r7, #12]
 8005416:	f000 f949 	bl	80056ac <SPI_EndRxTxTransaction>
 800541a:	4603      	mov	r3, r0
 800541c:	2b00      	cmp	r3, #0
 800541e:	d002      	beq.n	8005426 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	2220      	movs	r2, #32
 8005424:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	689b      	ldr	r3, [r3, #8]
 800542a:	2b00      	cmp	r3, #0
 800542c:	d10a      	bne.n	8005444 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800542e:	2300      	movs	r3, #0
 8005430:	613b      	str	r3, [r7, #16]
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	68db      	ldr	r3, [r3, #12]
 8005438:	613b      	str	r3, [r7, #16]
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	689b      	ldr	r3, [r3, #8]
 8005440:	613b      	str	r3, [r7, #16]
 8005442:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005448:	2b00      	cmp	r3, #0
 800544a:	d002      	beq.n	8005452 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 800544c:	2301      	movs	r3, #1
 800544e:	77fb      	strb	r3, [r7, #31]
 8005450:	e000      	b.n	8005454 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8005452:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	2201      	movs	r2, #1
 8005458:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	2200      	movs	r2, #0
 8005460:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005464:	7ffb      	ldrb	r3, [r7, #31]
}
 8005466:	4618      	mov	r0, r3
 8005468:	3720      	adds	r7, #32
 800546a:	46bd      	mov	sp, r7
 800546c:	bd80      	pop	{r7, pc}
	...

08005470 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005470:	b580      	push	{r7, lr}
 8005472:	b088      	sub	sp, #32
 8005474:	af00      	add	r7, sp, #0
 8005476:	60f8      	str	r0, [r7, #12]
 8005478:	60b9      	str	r1, [r7, #8]
 800547a:	603b      	str	r3, [r7, #0]
 800547c:	4613      	mov	r3, r2
 800547e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005480:	f7fd f9e2 	bl	8002848 <HAL_GetTick>
 8005484:	4602      	mov	r2, r0
 8005486:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005488:	1a9b      	subs	r3, r3, r2
 800548a:	683a      	ldr	r2, [r7, #0]
 800548c:	4413      	add	r3, r2
 800548e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005490:	f7fd f9da 	bl	8002848 <HAL_GetTick>
 8005494:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005496:	4b39      	ldr	r3, [pc, #228]	; (800557c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	015b      	lsls	r3, r3, #5
 800549c:	0d1b      	lsrs	r3, r3, #20
 800549e:	69fa      	ldr	r2, [r7, #28]
 80054a0:	fb02 f303 	mul.w	r3, r2, r3
 80054a4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80054a6:	e054      	b.n	8005552 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80054a8:	683b      	ldr	r3, [r7, #0]
 80054aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054ae:	d050      	beq.n	8005552 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80054b0:	f7fd f9ca 	bl	8002848 <HAL_GetTick>
 80054b4:	4602      	mov	r2, r0
 80054b6:	69bb      	ldr	r3, [r7, #24]
 80054b8:	1ad3      	subs	r3, r2, r3
 80054ba:	69fa      	ldr	r2, [r7, #28]
 80054bc:	429a      	cmp	r2, r3
 80054be:	d902      	bls.n	80054c6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80054c0:	69fb      	ldr	r3, [r7, #28]
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d13d      	bne.n	8005542 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	685a      	ldr	r2, [r3, #4]
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80054d4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	685b      	ldr	r3, [r3, #4]
 80054da:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80054de:	d111      	bne.n	8005504 <SPI_WaitFlagStateUntilTimeout+0x94>
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	689b      	ldr	r3, [r3, #8]
 80054e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80054e8:	d004      	beq.n	80054f4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	689b      	ldr	r3, [r3, #8]
 80054ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80054f2:	d107      	bne.n	8005504 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	681a      	ldr	r2, [r3, #0]
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005502:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005508:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800550c:	d10f      	bne.n	800552e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	681a      	ldr	r2, [r3, #0]
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800551c:	601a      	str	r2, [r3, #0]
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	681a      	ldr	r2, [r3, #0]
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800552c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	2201      	movs	r2, #1
 8005532:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	2200      	movs	r2, #0
 800553a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800553e:	2303      	movs	r3, #3
 8005540:	e017      	b.n	8005572 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005542:	697b      	ldr	r3, [r7, #20]
 8005544:	2b00      	cmp	r3, #0
 8005546:	d101      	bne.n	800554c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005548:	2300      	movs	r3, #0
 800554a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800554c:	697b      	ldr	r3, [r7, #20]
 800554e:	3b01      	subs	r3, #1
 8005550:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	689a      	ldr	r2, [r3, #8]
 8005558:	68bb      	ldr	r3, [r7, #8]
 800555a:	4013      	ands	r3, r2
 800555c:	68ba      	ldr	r2, [r7, #8]
 800555e:	429a      	cmp	r2, r3
 8005560:	bf0c      	ite	eq
 8005562:	2301      	moveq	r3, #1
 8005564:	2300      	movne	r3, #0
 8005566:	b2db      	uxtb	r3, r3
 8005568:	461a      	mov	r2, r3
 800556a:	79fb      	ldrb	r3, [r7, #7]
 800556c:	429a      	cmp	r2, r3
 800556e:	d19b      	bne.n	80054a8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005570:	2300      	movs	r3, #0
}
 8005572:	4618      	mov	r0, r3
 8005574:	3720      	adds	r7, #32
 8005576:	46bd      	mov	sp, r7
 8005578:	bd80      	pop	{r7, pc}
 800557a:	bf00      	nop
 800557c:	20004e90 	.word	0x20004e90

08005580 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005580:	b580      	push	{r7, lr}
 8005582:	b08a      	sub	sp, #40	; 0x28
 8005584:	af00      	add	r7, sp, #0
 8005586:	60f8      	str	r0, [r7, #12]
 8005588:	60b9      	str	r1, [r7, #8]
 800558a:	607a      	str	r2, [r7, #4]
 800558c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800558e:	2300      	movs	r3, #0
 8005590:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8005592:	f7fd f959 	bl	8002848 <HAL_GetTick>
 8005596:	4602      	mov	r2, r0
 8005598:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800559a:	1a9b      	subs	r3, r3, r2
 800559c:	683a      	ldr	r2, [r7, #0]
 800559e:	4413      	add	r3, r2
 80055a0:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80055a2:	f7fd f951 	bl	8002848 <HAL_GetTick>
 80055a6:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	330c      	adds	r3, #12
 80055ae:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80055b0:	4b3d      	ldr	r3, [pc, #244]	; (80056a8 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80055b2:	681a      	ldr	r2, [r3, #0]
 80055b4:	4613      	mov	r3, r2
 80055b6:	009b      	lsls	r3, r3, #2
 80055b8:	4413      	add	r3, r2
 80055ba:	00da      	lsls	r2, r3, #3
 80055bc:	1ad3      	subs	r3, r2, r3
 80055be:	0d1b      	lsrs	r3, r3, #20
 80055c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80055c2:	fb02 f303 	mul.w	r3, r2, r3
 80055c6:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80055c8:	e060      	b.n	800568c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80055ca:	68bb      	ldr	r3, [r7, #8]
 80055cc:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80055d0:	d107      	bne.n	80055e2 <SPI_WaitFifoStateUntilTimeout+0x62>
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d104      	bne.n	80055e2 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80055d8:	69fb      	ldr	r3, [r7, #28]
 80055da:	781b      	ldrb	r3, [r3, #0]
 80055dc:	b2db      	uxtb	r3, r3
 80055de:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80055e0:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80055e2:	683b      	ldr	r3, [r7, #0]
 80055e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055e8:	d050      	beq.n	800568c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80055ea:	f7fd f92d 	bl	8002848 <HAL_GetTick>
 80055ee:	4602      	mov	r2, r0
 80055f0:	6a3b      	ldr	r3, [r7, #32]
 80055f2:	1ad3      	subs	r3, r2, r3
 80055f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80055f6:	429a      	cmp	r2, r3
 80055f8:	d902      	bls.n	8005600 <SPI_WaitFifoStateUntilTimeout+0x80>
 80055fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d13d      	bne.n	800567c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	685a      	ldr	r2, [r3, #4]
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800560e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	685b      	ldr	r3, [r3, #4]
 8005614:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005618:	d111      	bne.n	800563e <SPI_WaitFifoStateUntilTimeout+0xbe>
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	689b      	ldr	r3, [r3, #8]
 800561e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005622:	d004      	beq.n	800562e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	689b      	ldr	r3, [r3, #8]
 8005628:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800562c:	d107      	bne.n	800563e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	681a      	ldr	r2, [r3, #0]
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800563c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005642:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005646:	d10f      	bne.n	8005668 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	681a      	ldr	r2, [r3, #0]
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005656:	601a      	str	r2, [r3, #0]
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	681a      	ldr	r2, [r3, #0]
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005666:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	2201      	movs	r2, #1
 800566c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	2200      	movs	r2, #0
 8005674:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005678:	2303      	movs	r3, #3
 800567a:	e010      	b.n	800569e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800567c:	69bb      	ldr	r3, [r7, #24]
 800567e:	2b00      	cmp	r3, #0
 8005680:	d101      	bne.n	8005686 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8005682:	2300      	movs	r3, #0
 8005684:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8005686:	69bb      	ldr	r3, [r7, #24]
 8005688:	3b01      	subs	r3, #1
 800568a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	689a      	ldr	r2, [r3, #8]
 8005692:	68bb      	ldr	r3, [r7, #8]
 8005694:	4013      	ands	r3, r2
 8005696:	687a      	ldr	r2, [r7, #4]
 8005698:	429a      	cmp	r2, r3
 800569a:	d196      	bne.n	80055ca <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800569c:	2300      	movs	r3, #0
}
 800569e:	4618      	mov	r0, r3
 80056a0:	3728      	adds	r7, #40	; 0x28
 80056a2:	46bd      	mov	sp, r7
 80056a4:	bd80      	pop	{r7, pc}
 80056a6:	bf00      	nop
 80056a8:	20004e90 	.word	0x20004e90

080056ac <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80056ac:	b580      	push	{r7, lr}
 80056ae:	b088      	sub	sp, #32
 80056b0:	af02      	add	r7, sp, #8
 80056b2:	60f8      	str	r0, [r7, #12]
 80056b4:	60b9      	str	r1, [r7, #8]
 80056b6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	9300      	str	r3, [sp, #0]
 80056bc:	68bb      	ldr	r3, [r7, #8]
 80056be:	2200      	movs	r2, #0
 80056c0:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80056c4:	68f8      	ldr	r0, [r7, #12]
 80056c6:	f7ff ff5b 	bl	8005580 <SPI_WaitFifoStateUntilTimeout>
 80056ca:	4603      	mov	r3, r0
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d007      	beq.n	80056e0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80056d4:	f043 0220 	orr.w	r2, r3, #32
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80056dc:	2303      	movs	r3, #3
 80056de:	e046      	b.n	800576e <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80056e0:	4b25      	ldr	r3, [pc, #148]	; (8005778 <SPI_EndRxTxTransaction+0xcc>)
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	4a25      	ldr	r2, [pc, #148]	; (800577c <SPI_EndRxTxTransaction+0xd0>)
 80056e6:	fba2 2303 	umull	r2, r3, r2, r3
 80056ea:	0d5b      	lsrs	r3, r3, #21
 80056ec:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80056f0:	fb02 f303 	mul.w	r3, r2, r3
 80056f4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	685b      	ldr	r3, [r3, #4]
 80056fa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80056fe:	d112      	bne.n	8005726 <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	9300      	str	r3, [sp, #0]
 8005704:	68bb      	ldr	r3, [r7, #8]
 8005706:	2200      	movs	r2, #0
 8005708:	2180      	movs	r1, #128	; 0x80
 800570a:	68f8      	ldr	r0, [r7, #12]
 800570c:	f7ff feb0 	bl	8005470 <SPI_WaitFlagStateUntilTimeout>
 8005710:	4603      	mov	r3, r0
 8005712:	2b00      	cmp	r3, #0
 8005714:	d016      	beq.n	8005744 <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800571a:	f043 0220 	orr.w	r2, r3, #32
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8005722:	2303      	movs	r3, #3
 8005724:	e023      	b.n	800576e <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005726:	697b      	ldr	r3, [r7, #20]
 8005728:	2b00      	cmp	r3, #0
 800572a:	d00a      	beq.n	8005742 <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 800572c:	697b      	ldr	r3, [r7, #20]
 800572e:	3b01      	subs	r3, #1
 8005730:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	689b      	ldr	r3, [r3, #8]
 8005738:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800573c:	2b80      	cmp	r3, #128	; 0x80
 800573e:	d0f2      	beq.n	8005726 <SPI_EndRxTxTransaction+0x7a>
 8005740:	e000      	b.n	8005744 <SPI_EndRxTxTransaction+0x98>
        break;
 8005742:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	9300      	str	r3, [sp, #0]
 8005748:	68bb      	ldr	r3, [r7, #8]
 800574a:	2200      	movs	r2, #0
 800574c:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8005750:	68f8      	ldr	r0, [r7, #12]
 8005752:	f7ff ff15 	bl	8005580 <SPI_WaitFifoStateUntilTimeout>
 8005756:	4603      	mov	r3, r0
 8005758:	2b00      	cmp	r3, #0
 800575a:	d007      	beq.n	800576c <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005760:	f043 0220 	orr.w	r2, r3, #32
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005768:	2303      	movs	r3, #3
 800576a:	e000      	b.n	800576e <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 800576c:	2300      	movs	r3, #0
}
 800576e:	4618      	mov	r0, r3
 8005770:	3718      	adds	r7, #24
 8005772:	46bd      	mov	sp, r7
 8005774:	bd80      	pop	{r7, pc}
 8005776:	bf00      	nop
 8005778:	20004e90 	.word	0x20004e90
 800577c:	165e9f81 	.word	0x165e9f81

08005780 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005780:	b580      	push	{r7, lr}
 8005782:	b082      	sub	sp, #8
 8005784:	af00      	add	r7, sp, #0
 8005786:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	2b00      	cmp	r3, #0
 800578c:	d101      	bne.n	8005792 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800578e:	2301      	movs	r3, #1
 8005790:	e049      	b.n	8005826 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005798:	b2db      	uxtb	r3, r3
 800579a:	2b00      	cmp	r3, #0
 800579c:	d106      	bne.n	80057ac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	2200      	movs	r2, #0
 80057a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80057a6:	6878      	ldr	r0, [r7, #4]
 80057a8:	f7fc fe10 	bl	80023cc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	2202      	movs	r2, #2
 80057b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681a      	ldr	r2, [r3, #0]
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	3304      	adds	r3, #4
 80057bc:	4619      	mov	r1, r3
 80057be:	4610      	mov	r0, r2
 80057c0:	f000 fc7c 	bl	80060bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	2201      	movs	r2, #1
 80057c8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	2201      	movs	r2, #1
 80057d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	2201      	movs	r2, #1
 80057d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	2201      	movs	r2, #1
 80057e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	2201      	movs	r2, #1
 80057e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	2201      	movs	r2, #1
 80057f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	2201      	movs	r2, #1
 80057f8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	2201      	movs	r2, #1
 8005800:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	2201      	movs	r2, #1
 8005808:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	2201      	movs	r2, #1
 8005810:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	2201      	movs	r2, #1
 8005818:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	2201      	movs	r2, #1
 8005820:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005824:	2300      	movs	r3, #0
}
 8005826:	4618      	mov	r0, r3
 8005828:	3708      	adds	r7, #8
 800582a:	46bd      	mov	sp, r7
 800582c:	bd80      	pop	{r7, pc}
	...

08005830 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005830:	b480      	push	{r7}
 8005832:	b085      	sub	sp, #20
 8005834:	af00      	add	r7, sp, #0
 8005836:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800583e:	b2db      	uxtb	r3, r3
 8005840:	2b01      	cmp	r3, #1
 8005842:	d001      	beq.n	8005848 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005844:	2301      	movs	r3, #1
 8005846:	e04c      	b.n	80058e2 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	2202      	movs	r2, #2
 800584c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	4a26      	ldr	r2, [pc, #152]	; (80058f0 <HAL_TIM_Base_Start+0xc0>)
 8005856:	4293      	cmp	r3, r2
 8005858:	d022      	beq.n	80058a0 <HAL_TIM_Base_Start+0x70>
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005862:	d01d      	beq.n	80058a0 <HAL_TIM_Base_Start+0x70>
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	4a22      	ldr	r2, [pc, #136]	; (80058f4 <HAL_TIM_Base_Start+0xc4>)
 800586a:	4293      	cmp	r3, r2
 800586c:	d018      	beq.n	80058a0 <HAL_TIM_Base_Start+0x70>
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	4a21      	ldr	r2, [pc, #132]	; (80058f8 <HAL_TIM_Base_Start+0xc8>)
 8005874:	4293      	cmp	r3, r2
 8005876:	d013      	beq.n	80058a0 <HAL_TIM_Base_Start+0x70>
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	4a1f      	ldr	r2, [pc, #124]	; (80058fc <HAL_TIM_Base_Start+0xcc>)
 800587e:	4293      	cmp	r3, r2
 8005880:	d00e      	beq.n	80058a0 <HAL_TIM_Base_Start+0x70>
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	4a1e      	ldr	r2, [pc, #120]	; (8005900 <HAL_TIM_Base_Start+0xd0>)
 8005888:	4293      	cmp	r3, r2
 800588a:	d009      	beq.n	80058a0 <HAL_TIM_Base_Start+0x70>
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	4a1c      	ldr	r2, [pc, #112]	; (8005904 <HAL_TIM_Base_Start+0xd4>)
 8005892:	4293      	cmp	r3, r2
 8005894:	d004      	beq.n	80058a0 <HAL_TIM_Base_Start+0x70>
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	4a1b      	ldr	r2, [pc, #108]	; (8005908 <HAL_TIM_Base_Start+0xd8>)
 800589c:	4293      	cmp	r3, r2
 800589e:	d115      	bne.n	80058cc <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	689a      	ldr	r2, [r3, #8]
 80058a6:	4b19      	ldr	r3, [pc, #100]	; (800590c <HAL_TIM_Base_Start+0xdc>)
 80058a8:	4013      	ands	r3, r2
 80058aa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	2b06      	cmp	r3, #6
 80058b0:	d015      	beq.n	80058de <HAL_TIM_Base_Start+0xae>
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80058b8:	d011      	beq.n	80058de <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	681a      	ldr	r2, [r3, #0]
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	f042 0201 	orr.w	r2, r2, #1
 80058c8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80058ca:	e008      	b.n	80058de <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	681a      	ldr	r2, [r3, #0]
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	f042 0201 	orr.w	r2, r2, #1
 80058da:	601a      	str	r2, [r3, #0]
 80058dc:	e000      	b.n	80058e0 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80058de:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80058e0:	2300      	movs	r3, #0
}
 80058e2:	4618      	mov	r0, r3
 80058e4:	3714      	adds	r7, #20
 80058e6:	46bd      	mov	sp, r7
 80058e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ec:	4770      	bx	lr
 80058ee:	bf00      	nop
 80058f0:	40010000 	.word	0x40010000
 80058f4:	40000400 	.word	0x40000400
 80058f8:	40000800 	.word	0x40000800
 80058fc:	40000c00 	.word	0x40000c00
 8005900:	40010400 	.word	0x40010400
 8005904:	40014000 	.word	0x40014000
 8005908:	40001800 	.word	0x40001800
 800590c:	00010007 	.word	0x00010007

08005910 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8005910:	b480      	push	{r7}
 8005912:	b083      	sub	sp, #12
 8005914:	af00      	add	r7, sp, #0
 8005916:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	6a1a      	ldr	r2, [r3, #32]
 800591e:	f241 1311 	movw	r3, #4369	; 0x1111
 8005922:	4013      	ands	r3, r2
 8005924:	2b00      	cmp	r3, #0
 8005926:	d10f      	bne.n	8005948 <HAL_TIM_Base_Stop+0x38>
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	6a1a      	ldr	r2, [r3, #32]
 800592e:	f240 4344 	movw	r3, #1092	; 0x444
 8005932:	4013      	ands	r3, r2
 8005934:	2b00      	cmp	r3, #0
 8005936:	d107      	bne.n	8005948 <HAL_TIM_Base_Stop+0x38>
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	681a      	ldr	r2, [r3, #0]
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	f022 0201 	bic.w	r2, r2, #1
 8005946:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	2201      	movs	r2, #1
 800594c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8005950:	2300      	movs	r3, #0
}
 8005952:	4618      	mov	r0, r3
 8005954:	370c      	adds	r7, #12
 8005956:	46bd      	mov	sp, r7
 8005958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800595c:	4770      	bx	lr

0800595e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800595e:	b580      	push	{r7, lr}
 8005960:	b082      	sub	sp, #8
 8005962:	af00      	add	r7, sp, #0
 8005964:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	2b00      	cmp	r3, #0
 800596a:	d101      	bne.n	8005970 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800596c:	2301      	movs	r3, #1
 800596e:	e049      	b.n	8005a04 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005976:	b2db      	uxtb	r3, r3
 8005978:	2b00      	cmp	r3, #0
 800597a:	d106      	bne.n	800598a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	2200      	movs	r2, #0
 8005980:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005984:	6878      	ldr	r0, [r7, #4]
 8005986:	f7fc fd3f 	bl	8002408 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	2202      	movs	r2, #2
 800598e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681a      	ldr	r2, [r3, #0]
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	3304      	adds	r3, #4
 800599a:	4619      	mov	r1, r3
 800599c:	4610      	mov	r0, r2
 800599e:	f000 fb8d 	bl	80060bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	2201      	movs	r2, #1
 80059a6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	2201      	movs	r2, #1
 80059ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	2201      	movs	r2, #1
 80059b6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	2201      	movs	r2, #1
 80059be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	2201      	movs	r2, #1
 80059c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	2201      	movs	r2, #1
 80059ce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	2201      	movs	r2, #1
 80059d6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	2201      	movs	r2, #1
 80059de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	2201      	movs	r2, #1
 80059e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	2201      	movs	r2, #1
 80059ee:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	2201      	movs	r2, #1
 80059f6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	2201      	movs	r2, #1
 80059fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005a02:	2300      	movs	r3, #0
}
 8005a04:	4618      	mov	r0, r3
 8005a06:	3708      	adds	r7, #8
 8005a08:	46bd      	mov	sp, r7
 8005a0a:	bd80      	pop	{r7, pc}

08005a0c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005a0c:	b580      	push	{r7, lr}
 8005a0e:	b084      	sub	sp, #16
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	6078      	str	r0, [r7, #4]
 8005a14:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005a16:	683b      	ldr	r3, [r7, #0]
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d109      	bne.n	8005a30 <HAL_TIM_PWM_Start+0x24>
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005a22:	b2db      	uxtb	r3, r3
 8005a24:	2b01      	cmp	r3, #1
 8005a26:	bf14      	ite	ne
 8005a28:	2301      	movne	r3, #1
 8005a2a:	2300      	moveq	r3, #0
 8005a2c:	b2db      	uxtb	r3, r3
 8005a2e:	e03c      	b.n	8005aaa <HAL_TIM_PWM_Start+0x9e>
 8005a30:	683b      	ldr	r3, [r7, #0]
 8005a32:	2b04      	cmp	r3, #4
 8005a34:	d109      	bne.n	8005a4a <HAL_TIM_PWM_Start+0x3e>
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005a3c:	b2db      	uxtb	r3, r3
 8005a3e:	2b01      	cmp	r3, #1
 8005a40:	bf14      	ite	ne
 8005a42:	2301      	movne	r3, #1
 8005a44:	2300      	moveq	r3, #0
 8005a46:	b2db      	uxtb	r3, r3
 8005a48:	e02f      	b.n	8005aaa <HAL_TIM_PWM_Start+0x9e>
 8005a4a:	683b      	ldr	r3, [r7, #0]
 8005a4c:	2b08      	cmp	r3, #8
 8005a4e:	d109      	bne.n	8005a64 <HAL_TIM_PWM_Start+0x58>
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005a56:	b2db      	uxtb	r3, r3
 8005a58:	2b01      	cmp	r3, #1
 8005a5a:	bf14      	ite	ne
 8005a5c:	2301      	movne	r3, #1
 8005a5e:	2300      	moveq	r3, #0
 8005a60:	b2db      	uxtb	r3, r3
 8005a62:	e022      	b.n	8005aaa <HAL_TIM_PWM_Start+0x9e>
 8005a64:	683b      	ldr	r3, [r7, #0]
 8005a66:	2b0c      	cmp	r3, #12
 8005a68:	d109      	bne.n	8005a7e <HAL_TIM_PWM_Start+0x72>
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005a70:	b2db      	uxtb	r3, r3
 8005a72:	2b01      	cmp	r3, #1
 8005a74:	bf14      	ite	ne
 8005a76:	2301      	movne	r3, #1
 8005a78:	2300      	moveq	r3, #0
 8005a7a:	b2db      	uxtb	r3, r3
 8005a7c:	e015      	b.n	8005aaa <HAL_TIM_PWM_Start+0x9e>
 8005a7e:	683b      	ldr	r3, [r7, #0]
 8005a80:	2b10      	cmp	r3, #16
 8005a82:	d109      	bne.n	8005a98 <HAL_TIM_PWM_Start+0x8c>
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005a8a:	b2db      	uxtb	r3, r3
 8005a8c:	2b01      	cmp	r3, #1
 8005a8e:	bf14      	ite	ne
 8005a90:	2301      	movne	r3, #1
 8005a92:	2300      	moveq	r3, #0
 8005a94:	b2db      	uxtb	r3, r3
 8005a96:	e008      	b.n	8005aaa <HAL_TIM_PWM_Start+0x9e>
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005a9e:	b2db      	uxtb	r3, r3
 8005aa0:	2b01      	cmp	r3, #1
 8005aa2:	bf14      	ite	ne
 8005aa4:	2301      	movne	r3, #1
 8005aa6:	2300      	moveq	r3, #0
 8005aa8:	b2db      	uxtb	r3, r3
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d001      	beq.n	8005ab2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8005aae:	2301      	movs	r3, #1
 8005ab0:	e092      	b.n	8005bd8 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005ab2:	683b      	ldr	r3, [r7, #0]
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d104      	bne.n	8005ac2 <HAL_TIM_PWM_Start+0xb6>
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	2202      	movs	r2, #2
 8005abc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005ac0:	e023      	b.n	8005b0a <HAL_TIM_PWM_Start+0xfe>
 8005ac2:	683b      	ldr	r3, [r7, #0]
 8005ac4:	2b04      	cmp	r3, #4
 8005ac6:	d104      	bne.n	8005ad2 <HAL_TIM_PWM_Start+0xc6>
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	2202      	movs	r2, #2
 8005acc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005ad0:	e01b      	b.n	8005b0a <HAL_TIM_PWM_Start+0xfe>
 8005ad2:	683b      	ldr	r3, [r7, #0]
 8005ad4:	2b08      	cmp	r3, #8
 8005ad6:	d104      	bne.n	8005ae2 <HAL_TIM_PWM_Start+0xd6>
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	2202      	movs	r2, #2
 8005adc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005ae0:	e013      	b.n	8005b0a <HAL_TIM_PWM_Start+0xfe>
 8005ae2:	683b      	ldr	r3, [r7, #0]
 8005ae4:	2b0c      	cmp	r3, #12
 8005ae6:	d104      	bne.n	8005af2 <HAL_TIM_PWM_Start+0xe6>
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	2202      	movs	r2, #2
 8005aec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005af0:	e00b      	b.n	8005b0a <HAL_TIM_PWM_Start+0xfe>
 8005af2:	683b      	ldr	r3, [r7, #0]
 8005af4:	2b10      	cmp	r3, #16
 8005af6:	d104      	bne.n	8005b02 <HAL_TIM_PWM_Start+0xf6>
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	2202      	movs	r2, #2
 8005afc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005b00:	e003      	b.n	8005b0a <HAL_TIM_PWM_Start+0xfe>
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	2202      	movs	r2, #2
 8005b06:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	2201      	movs	r2, #1
 8005b10:	6839      	ldr	r1, [r7, #0]
 8005b12:	4618      	mov	r0, r3
 8005b14:	f000 fe6a 	bl	80067ec <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	4a30      	ldr	r2, [pc, #192]	; (8005be0 <HAL_TIM_PWM_Start+0x1d4>)
 8005b1e:	4293      	cmp	r3, r2
 8005b20:	d004      	beq.n	8005b2c <HAL_TIM_PWM_Start+0x120>
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	4a2f      	ldr	r2, [pc, #188]	; (8005be4 <HAL_TIM_PWM_Start+0x1d8>)
 8005b28:	4293      	cmp	r3, r2
 8005b2a:	d101      	bne.n	8005b30 <HAL_TIM_PWM_Start+0x124>
 8005b2c:	2301      	movs	r3, #1
 8005b2e:	e000      	b.n	8005b32 <HAL_TIM_PWM_Start+0x126>
 8005b30:	2300      	movs	r3, #0
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d007      	beq.n	8005b46 <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005b44:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	4a25      	ldr	r2, [pc, #148]	; (8005be0 <HAL_TIM_PWM_Start+0x1d4>)
 8005b4c:	4293      	cmp	r3, r2
 8005b4e:	d022      	beq.n	8005b96 <HAL_TIM_PWM_Start+0x18a>
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b58:	d01d      	beq.n	8005b96 <HAL_TIM_PWM_Start+0x18a>
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	4a22      	ldr	r2, [pc, #136]	; (8005be8 <HAL_TIM_PWM_Start+0x1dc>)
 8005b60:	4293      	cmp	r3, r2
 8005b62:	d018      	beq.n	8005b96 <HAL_TIM_PWM_Start+0x18a>
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	4a20      	ldr	r2, [pc, #128]	; (8005bec <HAL_TIM_PWM_Start+0x1e0>)
 8005b6a:	4293      	cmp	r3, r2
 8005b6c:	d013      	beq.n	8005b96 <HAL_TIM_PWM_Start+0x18a>
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	4a1f      	ldr	r2, [pc, #124]	; (8005bf0 <HAL_TIM_PWM_Start+0x1e4>)
 8005b74:	4293      	cmp	r3, r2
 8005b76:	d00e      	beq.n	8005b96 <HAL_TIM_PWM_Start+0x18a>
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	4a19      	ldr	r2, [pc, #100]	; (8005be4 <HAL_TIM_PWM_Start+0x1d8>)
 8005b7e:	4293      	cmp	r3, r2
 8005b80:	d009      	beq.n	8005b96 <HAL_TIM_PWM_Start+0x18a>
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	4a1b      	ldr	r2, [pc, #108]	; (8005bf4 <HAL_TIM_PWM_Start+0x1e8>)
 8005b88:	4293      	cmp	r3, r2
 8005b8a:	d004      	beq.n	8005b96 <HAL_TIM_PWM_Start+0x18a>
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	4a19      	ldr	r2, [pc, #100]	; (8005bf8 <HAL_TIM_PWM_Start+0x1ec>)
 8005b92:	4293      	cmp	r3, r2
 8005b94:	d115      	bne.n	8005bc2 <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	689a      	ldr	r2, [r3, #8]
 8005b9c:	4b17      	ldr	r3, [pc, #92]	; (8005bfc <HAL_TIM_PWM_Start+0x1f0>)
 8005b9e:	4013      	ands	r3, r2
 8005ba0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	2b06      	cmp	r3, #6
 8005ba6:	d015      	beq.n	8005bd4 <HAL_TIM_PWM_Start+0x1c8>
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005bae:	d011      	beq.n	8005bd4 <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	681a      	ldr	r2, [r3, #0]
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	f042 0201 	orr.w	r2, r2, #1
 8005bbe:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005bc0:	e008      	b.n	8005bd4 <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	681a      	ldr	r2, [r3, #0]
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	f042 0201 	orr.w	r2, r2, #1
 8005bd0:	601a      	str	r2, [r3, #0]
 8005bd2:	e000      	b.n	8005bd6 <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005bd4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005bd6:	2300      	movs	r3, #0
}
 8005bd8:	4618      	mov	r0, r3
 8005bda:	3710      	adds	r7, #16
 8005bdc:	46bd      	mov	sp, r7
 8005bde:	bd80      	pop	{r7, pc}
 8005be0:	40010000 	.word	0x40010000
 8005be4:	40010400 	.word	0x40010400
 8005be8:	40000400 	.word	0x40000400
 8005bec:	40000800 	.word	0x40000800
 8005bf0:	40000c00 	.word	0x40000c00
 8005bf4:	40014000 	.word	0x40014000
 8005bf8:	40001800 	.word	0x40001800
 8005bfc:	00010007 	.word	0x00010007

08005c00 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005c00:	b580      	push	{r7, lr}
 8005c02:	b082      	sub	sp, #8
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	6078      	str	r0, [r7, #4]
 8005c08:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	2200      	movs	r2, #0
 8005c10:	6839      	ldr	r1, [r7, #0]
 8005c12:	4618      	mov	r0, r3
 8005c14:	f000 fdea 	bl	80067ec <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	4a36      	ldr	r2, [pc, #216]	; (8005cf8 <HAL_TIM_PWM_Stop+0xf8>)
 8005c1e:	4293      	cmp	r3, r2
 8005c20:	d004      	beq.n	8005c2c <HAL_TIM_PWM_Stop+0x2c>
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	4a35      	ldr	r2, [pc, #212]	; (8005cfc <HAL_TIM_PWM_Stop+0xfc>)
 8005c28:	4293      	cmp	r3, r2
 8005c2a:	d101      	bne.n	8005c30 <HAL_TIM_PWM_Stop+0x30>
 8005c2c:	2301      	movs	r3, #1
 8005c2e:	e000      	b.n	8005c32 <HAL_TIM_PWM_Stop+0x32>
 8005c30:	2300      	movs	r3, #0
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d017      	beq.n	8005c66 <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	6a1a      	ldr	r2, [r3, #32]
 8005c3c:	f241 1311 	movw	r3, #4369	; 0x1111
 8005c40:	4013      	ands	r3, r2
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d10f      	bne.n	8005c66 <HAL_TIM_PWM_Stop+0x66>
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	6a1a      	ldr	r2, [r3, #32]
 8005c4c:	f240 4344 	movw	r3, #1092	; 0x444
 8005c50:	4013      	ands	r3, r2
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d107      	bne.n	8005c66 <HAL_TIM_PWM_Stop+0x66>
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005c64:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	6a1a      	ldr	r2, [r3, #32]
 8005c6c:	f241 1311 	movw	r3, #4369	; 0x1111
 8005c70:	4013      	ands	r3, r2
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d10f      	bne.n	8005c96 <HAL_TIM_PWM_Stop+0x96>
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	6a1a      	ldr	r2, [r3, #32]
 8005c7c:	f240 4344 	movw	r3, #1092	; 0x444
 8005c80:	4013      	ands	r3, r2
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d107      	bne.n	8005c96 <HAL_TIM_PWM_Stop+0x96>
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	681a      	ldr	r2, [r3, #0]
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	f022 0201 	bic.w	r2, r2, #1
 8005c94:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005c96:	683b      	ldr	r3, [r7, #0]
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d104      	bne.n	8005ca6 <HAL_TIM_PWM_Stop+0xa6>
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	2201      	movs	r2, #1
 8005ca0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005ca4:	e023      	b.n	8005cee <HAL_TIM_PWM_Stop+0xee>
 8005ca6:	683b      	ldr	r3, [r7, #0]
 8005ca8:	2b04      	cmp	r3, #4
 8005caa:	d104      	bne.n	8005cb6 <HAL_TIM_PWM_Stop+0xb6>
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	2201      	movs	r2, #1
 8005cb0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005cb4:	e01b      	b.n	8005cee <HAL_TIM_PWM_Stop+0xee>
 8005cb6:	683b      	ldr	r3, [r7, #0]
 8005cb8:	2b08      	cmp	r3, #8
 8005cba:	d104      	bne.n	8005cc6 <HAL_TIM_PWM_Stop+0xc6>
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	2201      	movs	r2, #1
 8005cc0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005cc4:	e013      	b.n	8005cee <HAL_TIM_PWM_Stop+0xee>
 8005cc6:	683b      	ldr	r3, [r7, #0]
 8005cc8:	2b0c      	cmp	r3, #12
 8005cca:	d104      	bne.n	8005cd6 <HAL_TIM_PWM_Stop+0xd6>
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	2201      	movs	r2, #1
 8005cd0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005cd4:	e00b      	b.n	8005cee <HAL_TIM_PWM_Stop+0xee>
 8005cd6:	683b      	ldr	r3, [r7, #0]
 8005cd8:	2b10      	cmp	r3, #16
 8005cda:	d104      	bne.n	8005ce6 <HAL_TIM_PWM_Stop+0xe6>
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	2201      	movs	r2, #1
 8005ce0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005ce4:	e003      	b.n	8005cee <HAL_TIM_PWM_Stop+0xee>
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	2201      	movs	r2, #1
 8005cea:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 8005cee:	2300      	movs	r3, #0
}
 8005cf0:	4618      	mov	r0, r3
 8005cf2:	3708      	adds	r7, #8
 8005cf4:	46bd      	mov	sp, r7
 8005cf6:	bd80      	pop	{r7, pc}
 8005cf8:	40010000 	.word	0x40010000
 8005cfc:	40010400 	.word	0x40010400

08005d00 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005d00:	b580      	push	{r7, lr}
 8005d02:	b086      	sub	sp, #24
 8005d04:	af00      	add	r7, sp, #0
 8005d06:	60f8      	str	r0, [r7, #12]
 8005d08:	60b9      	str	r1, [r7, #8]
 8005d0a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005d0c:	2300      	movs	r3, #0
 8005d0e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d16:	2b01      	cmp	r3, #1
 8005d18:	d101      	bne.n	8005d1e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005d1a:	2302      	movs	r3, #2
 8005d1c:	e0ff      	b.n	8005f1e <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	2201      	movs	r2, #1
 8005d22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	2b14      	cmp	r3, #20
 8005d2a:	f200 80f0 	bhi.w	8005f0e <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005d2e:	a201      	add	r2, pc, #4	; (adr r2, 8005d34 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005d30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d34:	08005d89 	.word	0x08005d89
 8005d38:	08005f0f 	.word	0x08005f0f
 8005d3c:	08005f0f 	.word	0x08005f0f
 8005d40:	08005f0f 	.word	0x08005f0f
 8005d44:	08005dc9 	.word	0x08005dc9
 8005d48:	08005f0f 	.word	0x08005f0f
 8005d4c:	08005f0f 	.word	0x08005f0f
 8005d50:	08005f0f 	.word	0x08005f0f
 8005d54:	08005e0b 	.word	0x08005e0b
 8005d58:	08005f0f 	.word	0x08005f0f
 8005d5c:	08005f0f 	.word	0x08005f0f
 8005d60:	08005f0f 	.word	0x08005f0f
 8005d64:	08005e4b 	.word	0x08005e4b
 8005d68:	08005f0f 	.word	0x08005f0f
 8005d6c:	08005f0f 	.word	0x08005f0f
 8005d70:	08005f0f 	.word	0x08005f0f
 8005d74:	08005e8d 	.word	0x08005e8d
 8005d78:	08005f0f 	.word	0x08005f0f
 8005d7c:	08005f0f 	.word	0x08005f0f
 8005d80:	08005f0f 	.word	0x08005f0f
 8005d84:	08005ecd 	.word	0x08005ecd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	68b9      	ldr	r1, [r7, #8]
 8005d8e:	4618      	mov	r0, r3
 8005d90:	f000 fa34 	bl	80061fc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	699a      	ldr	r2, [r3, #24]
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	f042 0208 	orr.w	r2, r2, #8
 8005da2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	699a      	ldr	r2, [r3, #24]
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	f022 0204 	bic.w	r2, r2, #4
 8005db2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	6999      	ldr	r1, [r3, #24]
 8005dba:	68bb      	ldr	r3, [r7, #8]
 8005dbc:	691a      	ldr	r2, [r3, #16]
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	430a      	orrs	r2, r1
 8005dc4:	619a      	str	r2, [r3, #24]
      break;
 8005dc6:	e0a5      	b.n	8005f14 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	68b9      	ldr	r1, [r7, #8]
 8005dce:	4618      	mov	r0, r3
 8005dd0:	f000 fa86 	bl	80062e0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	699a      	ldr	r2, [r3, #24]
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005de2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	699a      	ldr	r2, [r3, #24]
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005df2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	6999      	ldr	r1, [r3, #24]
 8005dfa:	68bb      	ldr	r3, [r7, #8]
 8005dfc:	691b      	ldr	r3, [r3, #16]
 8005dfe:	021a      	lsls	r2, r3, #8
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	430a      	orrs	r2, r1
 8005e06:	619a      	str	r2, [r3, #24]
      break;
 8005e08:	e084      	b.n	8005f14 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	68b9      	ldr	r1, [r7, #8]
 8005e10:	4618      	mov	r0, r3
 8005e12:	f000 fadd 	bl	80063d0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	69da      	ldr	r2, [r3, #28]
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	f042 0208 	orr.w	r2, r2, #8
 8005e24:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	69da      	ldr	r2, [r3, #28]
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	f022 0204 	bic.w	r2, r2, #4
 8005e34:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	69d9      	ldr	r1, [r3, #28]
 8005e3c:	68bb      	ldr	r3, [r7, #8]
 8005e3e:	691a      	ldr	r2, [r3, #16]
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	430a      	orrs	r2, r1
 8005e46:	61da      	str	r2, [r3, #28]
      break;
 8005e48:	e064      	b.n	8005f14 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	68b9      	ldr	r1, [r7, #8]
 8005e50:	4618      	mov	r0, r3
 8005e52:	f000 fb33 	bl	80064bc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	69da      	ldr	r2, [r3, #28]
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005e64:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	69da      	ldr	r2, [r3, #28]
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005e74:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	69d9      	ldr	r1, [r3, #28]
 8005e7c:	68bb      	ldr	r3, [r7, #8]
 8005e7e:	691b      	ldr	r3, [r3, #16]
 8005e80:	021a      	lsls	r2, r3, #8
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	430a      	orrs	r2, r1
 8005e88:	61da      	str	r2, [r3, #28]
      break;
 8005e8a:	e043      	b.n	8005f14 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	68b9      	ldr	r1, [r7, #8]
 8005e92:	4618      	mov	r0, r3
 8005e94:	f000 fb6a 	bl	800656c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	f042 0208 	orr.w	r2, r2, #8
 8005ea6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	f022 0204 	bic.w	r2, r2, #4
 8005eb6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005ebe:	68bb      	ldr	r3, [r7, #8]
 8005ec0:	691a      	ldr	r2, [r3, #16]
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	430a      	orrs	r2, r1
 8005ec8:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005eca:	e023      	b.n	8005f14 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	68b9      	ldr	r1, [r7, #8]
 8005ed2:	4618      	mov	r0, r3
 8005ed4:	f000 fb9c 	bl	8006610 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005ee6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005ef6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005efe:	68bb      	ldr	r3, [r7, #8]
 8005f00:	691b      	ldr	r3, [r3, #16]
 8005f02:	021a      	lsls	r2, r3, #8
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	430a      	orrs	r2, r1
 8005f0a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005f0c:	e002      	b.n	8005f14 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005f0e:	2301      	movs	r3, #1
 8005f10:	75fb      	strb	r3, [r7, #23]
      break;
 8005f12:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	2200      	movs	r2, #0
 8005f18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005f1c:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f1e:	4618      	mov	r0, r3
 8005f20:	3718      	adds	r7, #24
 8005f22:	46bd      	mov	sp, r7
 8005f24:	bd80      	pop	{r7, pc}
 8005f26:	bf00      	nop

08005f28 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005f28:	b580      	push	{r7, lr}
 8005f2a:	b084      	sub	sp, #16
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	6078      	str	r0, [r7, #4]
 8005f30:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005f32:	2300      	movs	r3, #0
 8005f34:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005f3c:	2b01      	cmp	r3, #1
 8005f3e:	d101      	bne.n	8005f44 <HAL_TIM_ConfigClockSource+0x1c>
 8005f40:	2302      	movs	r3, #2
 8005f42:	e0b4      	b.n	80060ae <HAL_TIM_ConfigClockSource+0x186>
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	2201      	movs	r2, #1
 8005f48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	2202      	movs	r2, #2
 8005f50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	689b      	ldr	r3, [r3, #8]
 8005f5a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005f5c:	68ba      	ldr	r2, [r7, #8]
 8005f5e:	4b56      	ldr	r3, [pc, #344]	; (80060b8 <HAL_TIM_ConfigClockSource+0x190>)
 8005f60:	4013      	ands	r3, r2
 8005f62:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005f64:	68bb      	ldr	r3, [r7, #8]
 8005f66:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005f6a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	68ba      	ldr	r2, [r7, #8]
 8005f72:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005f74:	683b      	ldr	r3, [r7, #0]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005f7c:	d03e      	beq.n	8005ffc <HAL_TIM_ConfigClockSource+0xd4>
 8005f7e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005f82:	f200 8087 	bhi.w	8006094 <HAL_TIM_ConfigClockSource+0x16c>
 8005f86:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f8a:	f000 8086 	beq.w	800609a <HAL_TIM_ConfigClockSource+0x172>
 8005f8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f92:	d87f      	bhi.n	8006094 <HAL_TIM_ConfigClockSource+0x16c>
 8005f94:	2b70      	cmp	r3, #112	; 0x70
 8005f96:	d01a      	beq.n	8005fce <HAL_TIM_ConfigClockSource+0xa6>
 8005f98:	2b70      	cmp	r3, #112	; 0x70
 8005f9a:	d87b      	bhi.n	8006094 <HAL_TIM_ConfigClockSource+0x16c>
 8005f9c:	2b60      	cmp	r3, #96	; 0x60
 8005f9e:	d050      	beq.n	8006042 <HAL_TIM_ConfigClockSource+0x11a>
 8005fa0:	2b60      	cmp	r3, #96	; 0x60
 8005fa2:	d877      	bhi.n	8006094 <HAL_TIM_ConfigClockSource+0x16c>
 8005fa4:	2b50      	cmp	r3, #80	; 0x50
 8005fa6:	d03c      	beq.n	8006022 <HAL_TIM_ConfigClockSource+0xfa>
 8005fa8:	2b50      	cmp	r3, #80	; 0x50
 8005faa:	d873      	bhi.n	8006094 <HAL_TIM_ConfigClockSource+0x16c>
 8005fac:	2b40      	cmp	r3, #64	; 0x40
 8005fae:	d058      	beq.n	8006062 <HAL_TIM_ConfigClockSource+0x13a>
 8005fb0:	2b40      	cmp	r3, #64	; 0x40
 8005fb2:	d86f      	bhi.n	8006094 <HAL_TIM_ConfigClockSource+0x16c>
 8005fb4:	2b30      	cmp	r3, #48	; 0x30
 8005fb6:	d064      	beq.n	8006082 <HAL_TIM_ConfigClockSource+0x15a>
 8005fb8:	2b30      	cmp	r3, #48	; 0x30
 8005fba:	d86b      	bhi.n	8006094 <HAL_TIM_ConfigClockSource+0x16c>
 8005fbc:	2b20      	cmp	r3, #32
 8005fbe:	d060      	beq.n	8006082 <HAL_TIM_ConfigClockSource+0x15a>
 8005fc0:	2b20      	cmp	r3, #32
 8005fc2:	d867      	bhi.n	8006094 <HAL_TIM_ConfigClockSource+0x16c>
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d05c      	beq.n	8006082 <HAL_TIM_ConfigClockSource+0x15a>
 8005fc8:	2b10      	cmp	r3, #16
 8005fca:	d05a      	beq.n	8006082 <HAL_TIM_ConfigClockSource+0x15a>
 8005fcc:	e062      	b.n	8006094 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	6818      	ldr	r0, [r3, #0]
 8005fd2:	683b      	ldr	r3, [r7, #0]
 8005fd4:	6899      	ldr	r1, [r3, #8]
 8005fd6:	683b      	ldr	r3, [r7, #0]
 8005fd8:	685a      	ldr	r2, [r3, #4]
 8005fda:	683b      	ldr	r3, [r7, #0]
 8005fdc:	68db      	ldr	r3, [r3, #12]
 8005fde:	f000 fbe5 	bl	80067ac <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	689b      	ldr	r3, [r3, #8]
 8005fe8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005fea:	68bb      	ldr	r3, [r7, #8]
 8005fec:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005ff0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	68ba      	ldr	r2, [r7, #8]
 8005ff8:	609a      	str	r2, [r3, #8]
      break;
 8005ffa:	e04f      	b.n	800609c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	6818      	ldr	r0, [r3, #0]
 8006000:	683b      	ldr	r3, [r7, #0]
 8006002:	6899      	ldr	r1, [r3, #8]
 8006004:	683b      	ldr	r3, [r7, #0]
 8006006:	685a      	ldr	r2, [r3, #4]
 8006008:	683b      	ldr	r3, [r7, #0]
 800600a:	68db      	ldr	r3, [r3, #12]
 800600c:	f000 fbce 	bl	80067ac <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	689a      	ldr	r2, [r3, #8]
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800601e:	609a      	str	r2, [r3, #8]
      break;
 8006020:	e03c      	b.n	800609c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	6818      	ldr	r0, [r3, #0]
 8006026:	683b      	ldr	r3, [r7, #0]
 8006028:	6859      	ldr	r1, [r3, #4]
 800602a:	683b      	ldr	r3, [r7, #0]
 800602c:	68db      	ldr	r3, [r3, #12]
 800602e:	461a      	mov	r2, r3
 8006030:	f000 fb42 	bl	80066b8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	2150      	movs	r1, #80	; 0x50
 800603a:	4618      	mov	r0, r3
 800603c:	f000 fb9b 	bl	8006776 <TIM_ITRx_SetConfig>
      break;
 8006040:	e02c      	b.n	800609c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	6818      	ldr	r0, [r3, #0]
 8006046:	683b      	ldr	r3, [r7, #0]
 8006048:	6859      	ldr	r1, [r3, #4]
 800604a:	683b      	ldr	r3, [r7, #0]
 800604c:	68db      	ldr	r3, [r3, #12]
 800604e:	461a      	mov	r2, r3
 8006050:	f000 fb61 	bl	8006716 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	2160      	movs	r1, #96	; 0x60
 800605a:	4618      	mov	r0, r3
 800605c:	f000 fb8b 	bl	8006776 <TIM_ITRx_SetConfig>
      break;
 8006060:	e01c      	b.n	800609c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	6818      	ldr	r0, [r3, #0]
 8006066:	683b      	ldr	r3, [r7, #0]
 8006068:	6859      	ldr	r1, [r3, #4]
 800606a:	683b      	ldr	r3, [r7, #0]
 800606c:	68db      	ldr	r3, [r3, #12]
 800606e:	461a      	mov	r2, r3
 8006070:	f000 fb22 	bl	80066b8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	2140      	movs	r1, #64	; 0x40
 800607a:	4618      	mov	r0, r3
 800607c:	f000 fb7b 	bl	8006776 <TIM_ITRx_SetConfig>
      break;
 8006080:	e00c      	b.n	800609c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681a      	ldr	r2, [r3, #0]
 8006086:	683b      	ldr	r3, [r7, #0]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	4619      	mov	r1, r3
 800608c:	4610      	mov	r0, r2
 800608e:	f000 fb72 	bl	8006776 <TIM_ITRx_SetConfig>
      break;
 8006092:	e003      	b.n	800609c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006094:	2301      	movs	r3, #1
 8006096:	73fb      	strb	r3, [r7, #15]
      break;
 8006098:	e000      	b.n	800609c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800609a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	2201      	movs	r2, #1
 80060a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	2200      	movs	r2, #0
 80060a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80060ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80060ae:	4618      	mov	r0, r3
 80060b0:	3710      	adds	r7, #16
 80060b2:	46bd      	mov	sp, r7
 80060b4:	bd80      	pop	{r7, pc}
 80060b6:	bf00      	nop
 80060b8:	fffeff88 	.word	0xfffeff88

080060bc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80060bc:	b480      	push	{r7}
 80060be:	b085      	sub	sp, #20
 80060c0:	af00      	add	r7, sp, #0
 80060c2:	6078      	str	r0, [r7, #4]
 80060c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	4a40      	ldr	r2, [pc, #256]	; (80061d0 <TIM_Base_SetConfig+0x114>)
 80060d0:	4293      	cmp	r3, r2
 80060d2:	d013      	beq.n	80060fc <TIM_Base_SetConfig+0x40>
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80060da:	d00f      	beq.n	80060fc <TIM_Base_SetConfig+0x40>
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	4a3d      	ldr	r2, [pc, #244]	; (80061d4 <TIM_Base_SetConfig+0x118>)
 80060e0:	4293      	cmp	r3, r2
 80060e2:	d00b      	beq.n	80060fc <TIM_Base_SetConfig+0x40>
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	4a3c      	ldr	r2, [pc, #240]	; (80061d8 <TIM_Base_SetConfig+0x11c>)
 80060e8:	4293      	cmp	r3, r2
 80060ea:	d007      	beq.n	80060fc <TIM_Base_SetConfig+0x40>
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	4a3b      	ldr	r2, [pc, #236]	; (80061dc <TIM_Base_SetConfig+0x120>)
 80060f0:	4293      	cmp	r3, r2
 80060f2:	d003      	beq.n	80060fc <TIM_Base_SetConfig+0x40>
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	4a3a      	ldr	r2, [pc, #232]	; (80061e0 <TIM_Base_SetConfig+0x124>)
 80060f8:	4293      	cmp	r3, r2
 80060fa:	d108      	bne.n	800610e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006102:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006104:	683b      	ldr	r3, [r7, #0]
 8006106:	685b      	ldr	r3, [r3, #4]
 8006108:	68fa      	ldr	r2, [r7, #12]
 800610a:	4313      	orrs	r3, r2
 800610c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	4a2f      	ldr	r2, [pc, #188]	; (80061d0 <TIM_Base_SetConfig+0x114>)
 8006112:	4293      	cmp	r3, r2
 8006114:	d02b      	beq.n	800616e <TIM_Base_SetConfig+0xb2>
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800611c:	d027      	beq.n	800616e <TIM_Base_SetConfig+0xb2>
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	4a2c      	ldr	r2, [pc, #176]	; (80061d4 <TIM_Base_SetConfig+0x118>)
 8006122:	4293      	cmp	r3, r2
 8006124:	d023      	beq.n	800616e <TIM_Base_SetConfig+0xb2>
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	4a2b      	ldr	r2, [pc, #172]	; (80061d8 <TIM_Base_SetConfig+0x11c>)
 800612a:	4293      	cmp	r3, r2
 800612c:	d01f      	beq.n	800616e <TIM_Base_SetConfig+0xb2>
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	4a2a      	ldr	r2, [pc, #168]	; (80061dc <TIM_Base_SetConfig+0x120>)
 8006132:	4293      	cmp	r3, r2
 8006134:	d01b      	beq.n	800616e <TIM_Base_SetConfig+0xb2>
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	4a29      	ldr	r2, [pc, #164]	; (80061e0 <TIM_Base_SetConfig+0x124>)
 800613a:	4293      	cmp	r3, r2
 800613c:	d017      	beq.n	800616e <TIM_Base_SetConfig+0xb2>
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	4a28      	ldr	r2, [pc, #160]	; (80061e4 <TIM_Base_SetConfig+0x128>)
 8006142:	4293      	cmp	r3, r2
 8006144:	d013      	beq.n	800616e <TIM_Base_SetConfig+0xb2>
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	4a27      	ldr	r2, [pc, #156]	; (80061e8 <TIM_Base_SetConfig+0x12c>)
 800614a:	4293      	cmp	r3, r2
 800614c:	d00f      	beq.n	800616e <TIM_Base_SetConfig+0xb2>
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	4a26      	ldr	r2, [pc, #152]	; (80061ec <TIM_Base_SetConfig+0x130>)
 8006152:	4293      	cmp	r3, r2
 8006154:	d00b      	beq.n	800616e <TIM_Base_SetConfig+0xb2>
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	4a25      	ldr	r2, [pc, #148]	; (80061f0 <TIM_Base_SetConfig+0x134>)
 800615a:	4293      	cmp	r3, r2
 800615c:	d007      	beq.n	800616e <TIM_Base_SetConfig+0xb2>
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	4a24      	ldr	r2, [pc, #144]	; (80061f4 <TIM_Base_SetConfig+0x138>)
 8006162:	4293      	cmp	r3, r2
 8006164:	d003      	beq.n	800616e <TIM_Base_SetConfig+0xb2>
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	4a23      	ldr	r2, [pc, #140]	; (80061f8 <TIM_Base_SetConfig+0x13c>)
 800616a:	4293      	cmp	r3, r2
 800616c:	d108      	bne.n	8006180 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006174:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006176:	683b      	ldr	r3, [r7, #0]
 8006178:	68db      	ldr	r3, [r3, #12]
 800617a:	68fa      	ldr	r2, [r7, #12]
 800617c:	4313      	orrs	r3, r2
 800617e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006186:	683b      	ldr	r3, [r7, #0]
 8006188:	695b      	ldr	r3, [r3, #20]
 800618a:	4313      	orrs	r3, r2
 800618c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	68fa      	ldr	r2, [r7, #12]
 8006192:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006194:	683b      	ldr	r3, [r7, #0]
 8006196:	689a      	ldr	r2, [r3, #8]
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800619c:	683b      	ldr	r3, [r7, #0]
 800619e:	681a      	ldr	r2, [r3, #0]
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	4a0a      	ldr	r2, [pc, #40]	; (80061d0 <TIM_Base_SetConfig+0x114>)
 80061a8:	4293      	cmp	r3, r2
 80061aa:	d003      	beq.n	80061b4 <TIM_Base_SetConfig+0xf8>
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	4a0c      	ldr	r2, [pc, #48]	; (80061e0 <TIM_Base_SetConfig+0x124>)
 80061b0:	4293      	cmp	r3, r2
 80061b2:	d103      	bne.n	80061bc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80061b4:	683b      	ldr	r3, [r7, #0]
 80061b6:	691a      	ldr	r2, [r3, #16]
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	2201      	movs	r2, #1
 80061c0:	615a      	str	r2, [r3, #20]
}
 80061c2:	bf00      	nop
 80061c4:	3714      	adds	r7, #20
 80061c6:	46bd      	mov	sp, r7
 80061c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061cc:	4770      	bx	lr
 80061ce:	bf00      	nop
 80061d0:	40010000 	.word	0x40010000
 80061d4:	40000400 	.word	0x40000400
 80061d8:	40000800 	.word	0x40000800
 80061dc:	40000c00 	.word	0x40000c00
 80061e0:	40010400 	.word	0x40010400
 80061e4:	40014000 	.word	0x40014000
 80061e8:	40014400 	.word	0x40014400
 80061ec:	40014800 	.word	0x40014800
 80061f0:	40001800 	.word	0x40001800
 80061f4:	40001c00 	.word	0x40001c00
 80061f8:	40002000 	.word	0x40002000

080061fc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80061fc:	b480      	push	{r7}
 80061fe:	b087      	sub	sp, #28
 8006200:	af00      	add	r7, sp, #0
 8006202:	6078      	str	r0, [r7, #4]
 8006204:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	6a1b      	ldr	r3, [r3, #32]
 800620a:	f023 0201 	bic.w	r2, r3, #1
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	6a1b      	ldr	r3, [r3, #32]
 8006216:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	685b      	ldr	r3, [r3, #4]
 800621c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	699b      	ldr	r3, [r3, #24]
 8006222:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006224:	68fa      	ldr	r2, [r7, #12]
 8006226:	4b2b      	ldr	r3, [pc, #172]	; (80062d4 <TIM_OC1_SetConfig+0xd8>)
 8006228:	4013      	ands	r3, r2
 800622a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	f023 0303 	bic.w	r3, r3, #3
 8006232:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006234:	683b      	ldr	r3, [r7, #0]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	68fa      	ldr	r2, [r7, #12]
 800623a:	4313      	orrs	r3, r2
 800623c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800623e:	697b      	ldr	r3, [r7, #20]
 8006240:	f023 0302 	bic.w	r3, r3, #2
 8006244:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006246:	683b      	ldr	r3, [r7, #0]
 8006248:	689b      	ldr	r3, [r3, #8]
 800624a:	697a      	ldr	r2, [r7, #20]
 800624c:	4313      	orrs	r3, r2
 800624e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	4a21      	ldr	r2, [pc, #132]	; (80062d8 <TIM_OC1_SetConfig+0xdc>)
 8006254:	4293      	cmp	r3, r2
 8006256:	d003      	beq.n	8006260 <TIM_OC1_SetConfig+0x64>
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	4a20      	ldr	r2, [pc, #128]	; (80062dc <TIM_OC1_SetConfig+0xe0>)
 800625c:	4293      	cmp	r3, r2
 800625e:	d10c      	bne.n	800627a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006260:	697b      	ldr	r3, [r7, #20]
 8006262:	f023 0308 	bic.w	r3, r3, #8
 8006266:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006268:	683b      	ldr	r3, [r7, #0]
 800626a:	68db      	ldr	r3, [r3, #12]
 800626c:	697a      	ldr	r2, [r7, #20]
 800626e:	4313      	orrs	r3, r2
 8006270:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006272:	697b      	ldr	r3, [r7, #20]
 8006274:	f023 0304 	bic.w	r3, r3, #4
 8006278:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	4a16      	ldr	r2, [pc, #88]	; (80062d8 <TIM_OC1_SetConfig+0xdc>)
 800627e:	4293      	cmp	r3, r2
 8006280:	d003      	beq.n	800628a <TIM_OC1_SetConfig+0x8e>
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	4a15      	ldr	r2, [pc, #84]	; (80062dc <TIM_OC1_SetConfig+0xe0>)
 8006286:	4293      	cmp	r3, r2
 8006288:	d111      	bne.n	80062ae <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800628a:	693b      	ldr	r3, [r7, #16]
 800628c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006290:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006292:	693b      	ldr	r3, [r7, #16]
 8006294:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006298:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800629a:	683b      	ldr	r3, [r7, #0]
 800629c:	695b      	ldr	r3, [r3, #20]
 800629e:	693a      	ldr	r2, [r7, #16]
 80062a0:	4313      	orrs	r3, r2
 80062a2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80062a4:	683b      	ldr	r3, [r7, #0]
 80062a6:	699b      	ldr	r3, [r3, #24]
 80062a8:	693a      	ldr	r2, [r7, #16]
 80062aa:	4313      	orrs	r3, r2
 80062ac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	693a      	ldr	r2, [r7, #16]
 80062b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	68fa      	ldr	r2, [r7, #12]
 80062b8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80062ba:	683b      	ldr	r3, [r7, #0]
 80062bc:	685a      	ldr	r2, [r3, #4]
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	697a      	ldr	r2, [r7, #20]
 80062c6:	621a      	str	r2, [r3, #32]
}
 80062c8:	bf00      	nop
 80062ca:	371c      	adds	r7, #28
 80062cc:	46bd      	mov	sp, r7
 80062ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d2:	4770      	bx	lr
 80062d4:	fffeff8f 	.word	0xfffeff8f
 80062d8:	40010000 	.word	0x40010000
 80062dc:	40010400 	.word	0x40010400

080062e0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80062e0:	b480      	push	{r7}
 80062e2:	b087      	sub	sp, #28
 80062e4:	af00      	add	r7, sp, #0
 80062e6:	6078      	str	r0, [r7, #4]
 80062e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	6a1b      	ldr	r3, [r3, #32]
 80062ee:	f023 0210 	bic.w	r2, r3, #16
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	6a1b      	ldr	r3, [r3, #32]
 80062fa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	685b      	ldr	r3, [r3, #4]
 8006300:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	699b      	ldr	r3, [r3, #24]
 8006306:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006308:	68fa      	ldr	r2, [r7, #12]
 800630a:	4b2e      	ldr	r3, [pc, #184]	; (80063c4 <TIM_OC2_SetConfig+0xe4>)
 800630c:	4013      	ands	r3, r2
 800630e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006316:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006318:	683b      	ldr	r3, [r7, #0]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	021b      	lsls	r3, r3, #8
 800631e:	68fa      	ldr	r2, [r7, #12]
 8006320:	4313      	orrs	r3, r2
 8006322:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006324:	697b      	ldr	r3, [r7, #20]
 8006326:	f023 0320 	bic.w	r3, r3, #32
 800632a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800632c:	683b      	ldr	r3, [r7, #0]
 800632e:	689b      	ldr	r3, [r3, #8]
 8006330:	011b      	lsls	r3, r3, #4
 8006332:	697a      	ldr	r2, [r7, #20]
 8006334:	4313      	orrs	r3, r2
 8006336:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	4a23      	ldr	r2, [pc, #140]	; (80063c8 <TIM_OC2_SetConfig+0xe8>)
 800633c:	4293      	cmp	r3, r2
 800633e:	d003      	beq.n	8006348 <TIM_OC2_SetConfig+0x68>
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	4a22      	ldr	r2, [pc, #136]	; (80063cc <TIM_OC2_SetConfig+0xec>)
 8006344:	4293      	cmp	r3, r2
 8006346:	d10d      	bne.n	8006364 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006348:	697b      	ldr	r3, [r7, #20]
 800634a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800634e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006350:	683b      	ldr	r3, [r7, #0]
 8006352:	68db      	ldr	r3, [r3, #12]
 8006354:	011b      	lsls	r3, r3, #4
 8006356:	697a      	ldr	r2, [r7, #20]
 8006358:	4313      	orrs	r3, r2
 800635a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800635c:	697b      	ldr	r3, [r7, #20]
 800635e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006362:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	4a18      	ldr	r2, [pc, #96]	; (80063c8 <TIM_OC2_SetConfig+0xe8>)
 8006368:	4293      	cmp	r3, r2
 800636a:	d003      	beq.n	8006374 <TIM_OC2_SetConfig+0x94>
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	4a17      	ldr	r2, [pc, #92]	; (80063cc <TIM_OC2_SetConfig+0xec>)
 8006370:	4293      	cmp	r3, r2
 8006372:	d113      	bne.n	800639c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006374:	693b      	ldr	r3, [r7, #16]
 8006376:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800637a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800637c:	693b      	ldr	r3, [r7, #16]
 800637e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006382:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006384:	683b      	ldr	r3, [r7, #0]
 8006386:	695b      	ldr	r3, [r3, #20]
 8006388:	009b      	lsls	r3, r3, #2
 800638a:	693a      	ldr	r2, [r7, #16]
 800638c:	4313      	orrs	r3, r2
 800638e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006390:	683b      	ldr	r3, [r7, #0]
 8006392:	699b      	ldr	r3, [r3, #24]
 8006394:	009b      	lsls	r3, r3, #2
 8006396:	693a      	ldr	r2, [r7, #16]
 8006398:	4313      	orrs	r3, r2
 800639a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	693a      	ldr	r2, [r7, #16]
 80063a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	68fa      	ldr	r2, [r7, #12]
 80063a6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80063a8:	683b      	ldr	r3, [r7, #0]
 80063aa:	685a      	ldr	r2, [r3, #4]
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	697a      	ldr	r2, [r7, #20]
 80063b4:	621a      	str	r2, [r3, #32]
}
 80063b6:	bf00      	nop
 80063b8:	371c      	adds	r7, #28
 80063ba:	46bd      	mov	sp, r7
 80063bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c0:	4770      	bx	lr
 80063c2:	bf00      	nop
 80063c4:	feff8fff 	.word	0xfeff8fff
 80063c8:	40010000 	.word	0x40010000
 80063cc:	40010400 	.word	0x40010400

080063d0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80063d0:	b480      	push	{r7}
 80063d2:	b087      	sub	sp, #28
 80063d4:	af00      	add	r7, sp, #0
 80063d6:	6078      	str	r0, [r7, #4]
 80063d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	6a1b      	ldr	r3, [r3, #32]
 80063de:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	6a1b      	ldr	r3, [r3, #32]
 80063ea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	685b      	ldr	r3, [r3, #4]
 80063f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	69db      	ldr	r3, [r3, #28]
 80063f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80063f8:	68fa      	ldr	r2, [r7, #12]
 80063fa:	4b2d      	ldr	r3, [pc, #180]	; (80064b0 <TIM_OC3_SetConfig+0xe0>)
 80063fc:	4013      	ands	r3, r2
 80063fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	f023 0303 	bic.w	r3, r3, #3
 8006406:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006408:	683b      	ldr	r3, [r7, #0]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	68fa      	ldr	r2, [r7, #12]
 800640e:	4313      	orrs	r3, r2
 8006410:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006412:	697b      	ldr	r3, [r7, #20]
 8006414:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006418:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800641a:	683b      	ldr	r3, [r7, #0]
 800641c:	689b      	ldr	r3, [r3, #8]
 800641e:	021b      	lsls	r3, r3, #8
 8006420:	697a      	ldr	r2, [r7, #20]
 8006422:	4313      	orrs	r3, r2
 8006424:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	4a22      	ldr	r2, [pc, #136]	; (80064b4 <TIM_OC3_SetConfig+0xe4>)
 800642a:	4293      	cmp	r3, r2
 800642c:	d003      	beq.n	8006436 <TIM_OC3_SetConfig+0x66>
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	4a21      	ldr	r2, [pc, #132]	; (80064b8 <TIM_OC3_SetConfig+0xe8>)
 8006432:	4293      	cmp	r3, r2
 8006434:	d10d      	bne.n	8006452 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006436:	697b      	ldr	r3, [r7, #20]
 8006438:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800643c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800643e:	683b      	ldr	r3, [r7, #0]
 8006440:	68db      	ldr	r3, [r3, #12]
 8006442:	021b      	lsls	r3, r3, #8
 8006444:	697a      	ldr	r2, [r7, #20]
 8006446:	4313      	orrs	r3, r2
 8006448:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800644a:	697b      	ldr	r3, [r7, #20]
 800644c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006450:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	4a17      	ldr	r2, [pc, #92]	; (80064b4 <TIM_OC3_SetConfig+0xe4>)
 8006456:	4293      	cmp	r3, r2
 8006458:	d003      	beq.n	8006462 <TIM_OC3_SetConfig+0x92>
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	4a16      	ldr	r2, [pc, #88]	; (80064b8 <TIM_OC3_SetConfig+0xe8>)
 800645e:	4293      	cmp	r3, r2
 8006460:	d113      	bne.n	800648a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006462:	693b      	ldr	r3, [r7, #16]
 8006464:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006468:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800646a:	693b      	ldr	r3, [r7, #16]
 800646c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006470:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006472:	683b      	ldr	r3, [r7, #0]
 8006474:	695b      	ldr	r3, [r3, #20]
 8006476:	011b      	lsls	r3, r3, #4
 8006478:	693a      	ldr	r2, [r7, #16]
 800647a:	4313      	orrs	r3, r2
 800647c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800647e:	683b      	ldr	r3, [r7, #0]
 8006480:	699b      	ldr	r3, [r3, #24]
 8006482:	011b      	lsls	r3, r3, #4
 8006484:	693a      	ldr	r2, [r7, #16]
 8006486:	4313      	orrs	r3, r2
 8006488:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	693a      	ldr	r2, [r7, #16]
 800648e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	68fa      	ldr	r2, [r7, #12]
 8006494:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006496:	683b      	ldr	r3, [r7, #0]
 8006498:	685a      	ldr	r2, [r3, #4]
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	697a      	ldr	r2, [r7, #20]
 80064a2:	621a      	str	r2, [r3, #32]
}
 80064a4:	bf00      	nop
 80064a6:	371c      	adds	r7, #28
 80064a8:	46bd      	mov	sp, r7
 80064aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ae:	4770      	bx	lr
 80064b0:	fffeff8f 	.word	0xfffeff8f
 80064b4:	40010000 	.word	0x40010000
 80064b8:	40010400 	.word	0x40010400

080064bc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80064bc:	b480      	push	{r7}
 80064be:	b087      	sub	sp, #28
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	6078      	str	r0, [r7, #4]
 80064c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	6a1b      	ldr	r3, [r3, #32]
 80064ca:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	6a1b      	ldr	r3, [r3, #32]
 80064d6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	685b      	ldr	r3, [r3, #4]
 80064dc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	69db      	ldr	r3, [r3, #28]
 80064e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80064e4:	68fa      	ldr	r2, [r7, #12]
 80064e6:	4b1e      	ldr	r3, [pc, #120]	; (8006560 <TIM_OC4_SetConfig+0xa4>)
 80064e8:	4013      	ands	r3, r2
 80064ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80064f2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80064f4:	683b      	ldr	r3, [r7, #0]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	021b      	lsls	r3, r3, #8
 80064fa:	68fa      	ldr	r2, [r7, #12]
 80064fc:	4313      	orrs	r3, r2
 80064fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006500:	693b      	ldr	r3, [r7, #16]
 8006502:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006506:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006508:	683b      	ldr	r3, [r7, #0]
 800650a:	689b      	ldr	r3, [r3, #8]
 800650c:	031b      	lsls	r3, r3, #12
 800650e:	693a      	ldr	r2, [r7, #16]
 8006510:	4313      	orrs	r3, r2
 8006512:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	4a13      	ldr	r2, [pc, #76]	; (8006564 <TIM_OC4_SetConfig+0xa8>)
 8006518:	4293      	cmp	r3, r2
 800651a:	d003      	beq.n	8006524 <TIM_OC4_SetConfig+0x68>
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	4a12      	ldr	r2, [pc, #72]	; (8006568 <TIM_OC4_SetConfig+0xac>)
 8006520:	4293      	cmp	r3, r2
 8006522:	d109      	bne.n	8006538 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006524:	697b      	ldr	r3, [r7, #20]
 8006526:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800652a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800652c:	683b      	ldr	r3, [r7, #0]
 800652e:	695b      	ldr	r3, [r3, #20]
 8006530:	019b      	lsls	r3, r3, #6
 8006532:	697a      	ldr	r2, [r7, #20]
 8006534:	4313      	orrs	r3, r2
 8006536:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	697a      	ldr	r2, [r7, #20]
 800653c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	68fa      	ldr	r2, [r7, #12]
 8006542:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006544:	683b      	ldr	r3, [r7, #0]
 8006546:	685a      	ldr	r2, [r3, #4]
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	693a      	ldr	r2, [r7, #16]
 8006550:	621a      	str	r2, [r3, #32]
}
 8006552:	bf00      	nop
 8006554:	371c      	adds	r7, #28
 8006556:	46bd      	mov	sp, r7
 8006558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800655c:	4770      	bx	lr
 800655e:	bf00      	nop
 8006560:	feff8fff 	.word	0xfeff8fff
 8006564:	40010000 	.word	0x40010000
 8006568:	40010400 	.word	0x40010400

0800656c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800656c:	b480      	push	{r7}
 800656e:	b087      	sub	sp, #28
 8006570:	af00      	add	r7, sp, #0
 8006572:	6078      	str	r0, [r7, #4]
 8006574:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	6a1b      	ldr	r3, [r3, #32]
 800657a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	6a1b      	ldr	r3, [r3, #32]
 8006586:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	685b      	ldr	r3, [r3, #4]
 800658c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006592:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006594:	68fa      	ldr	r2, [r7, #12]
 8006596:	4b1b      	ldr	r3, [pc, #108]	; (8006604 <TIM_OC5_SetConfig+0x98>)
 8006598:	4013      	ands	r3, r2
 800659a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800659c:	683b      	ldr	r3, [r7, #0]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	68fa      	ldr	r2, [r7, #12]
 80065a2:	4313      	orrs	r3, r2
 80065a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80065a6:	693b      	ldr	r3, [r7, #16]
 80065a8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80065ac:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80065ae:	683b      	ldr	r3, [r7, #0]
 80065b0:	689b      	ldr	r3, [r3, #8]
 80065b2:	041b      	lsls	r3, r3, #16
 80065b4:	693a      	ldr	r2, [r7, #16]
 80065b6:	4313      	orrs	r3, r2
 80065b8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	4a12      	ldr	r2, [pc, #72]	; (8006608 <TIM_OC5_SetConfig+0x9c>)
 80065be:	4293      	cmp	r3, r2
 80065c0:	d003      	beq.n	80065ca <TIM_OC5_SetConfig+0x5e>
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	4a11      	ldr	r2, [pc, #68]	; (800660c <TIM_OC5_SetConfig+0xa0>)
 80065c6:	4293      	cmp	r3, r2
 80065c8:	d109      	bne.n	80065de <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80065ca:	697b      	ldr	r3, [r7, #20]
 80065cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80065d0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80065d2:	683b      	ldr	r3, [r7, #0]
 80065d4:	695b      	ldr	r3, [r3, #20]
 80065d6:	021b      	lsls	r3, r3, #8
 80065d8:	697a      	ldr	r2, [r7, #20]
 80065da:	4313      	orrs	r3, r2
 80065dc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	697a      	ldr	r2, [r7, #20]
 80065e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	68fa      	ldr	r2, [r7, #12]
 80065e8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80065ea:	683b      	ldr	r3, [r7, #0]
 80065ec:	685a      	ldr	r2, [r3, #4]
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	693a      	ldr	r2, [r7, #16]
 80065f6:	621a      	str	r2, [r3, #32]
}
 80065f8:	bf00      	nop
 80065fa:	371c      	adds	r7, #28
 80065fc:	46bd      	mov	sp, r7
 80065fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006602:	4770      	bx	lr
 8006604:	fffeff8f 	.word	0xfffeff8f
 8006608:	40010000 	.word	0x40010000
 800660c:	40010400 	.word	0x40010400

08006610 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006610:	b480      	push	{r7}
 8006612:	b087      	sub	sp, #28
 8006614:	af00      	add	r7, sp, #0
 8006616:	6078      	str	r0, [r7, #4]
 8006618:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	6a1b      	ldr	r3, [r3, #32]
 800661e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	6a1b      	ldr	r3, [r3, #32]
 800662a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	685b      	ldr	r3, [r3, #4]
 8006630:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006636:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006638:	68fa      	ldr	r2, [r7, #12]
 800663a:	4b1c      	ldr	r3, [pc, #112]	; (80066ac <TIM_OC6_SetConfig+0x9c>)
 800663c:	4013      	ands	r3, r2
 800663e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006640:	683b      	ldr	r3, [r7, #0]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	021b      	lsls	r3, r3, #8
 8006646:	68fa      	ldr	r2, [r7, #12]
 8006648:	4313      	orrs	r3, r2
 800664a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800664c:	693b      	ldr	r3, [r7, #16]
 800664e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006652:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006654:	683b      	ldr	r3, [r7, #0]
 8006656:	689b      	ldr	r3, [r3, #8]
 8006658:	051b      	lsls	r3, r3, #20
 800665a:	693a      	ldr	r2, [r7, #16]
 800665c:	4313      	orrs	r3, r2
 800665e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	4a13      	ldr	r2, [pc, #76]	; (80066b0 <TIM_OC6_SetConfig+0xa0>)
 8006664:	4293      	cmp	r3, r2
 8006666:	d003      	beq.n	8006670 <TIM_OC6_SetConfig+0x60>
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	4a12      	ldr	r2, [pc, #72]	; (80066b4 <TIM_OC6_SetConfig+0xa4>)
 800666c:	4293      	cmp	r3, r2
 800666e:	d109      	bne.n	8006684 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006670:	697b      	ldr	r3, [r7, #20]
 8006672:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006676:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006678:	683b      	ldr	r3, [r7, #0]
 800667a:	695b      	ldr	r3, [r3, #20]
 800667c:	029b      	lsls	r3, r3, #10
 800667e:	697a      	ldr	r2, [r7, #20]
 8006680:	4313      	orrs	r3, r2
 8006682:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	697a      	ldr	r2, [r7, #20]
 8006688:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	68fa      	ldr	r2, [r7, #12]
 800668e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006690:	683b      	ldr	r3, [r7, #0]
 8006692:	685a      	ldr	r2, [r3, #4]
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	693a      	ldr	r2, [r7, #16]
 800669c:	621a      	str	r2, [r3, #32]
}
 800669e:	bf00      	nop
 80066a0:	371c      	adds	r7, #28
 80066a2:	46bd      	mov	sp, r7
 80066a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a8:	4770      	bx	lr
 80066aa:	bf00      	nop
 80066ac:	feff8fff 	.word	0xfeff8fff
 80066b0:	40010000 	.word	0x40010000
 80066b4:	40010400 	.word	0x40010400

080066b8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80066b8:	b480      	push	{r7}
 80066ba:	b087      	sub	sp, #28
 80066bc:	af00      	add	r7, sp, #0
 80066be:	60f8      	str	r0, [r7, #12]
 80066c0:	60b9      	str	r1, [r7, #8]
 80066c2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	6a1b      	ldr	r3, [r3, #32]
 80066c8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	6a1b      	ldr	r3, [r3, #32]
 80066ce:	f023 0201 	bic.w	r2, r3, #1
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	699b      	ldr	r3, [r3, #24]
 80066da:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80066dc:	693b      	ldr	r3, [r7, #16]
 80066de:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80066e2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	011b      	lsls	r3, r3, #4
 80066e8:	693a      	ldr	r2, [r7, #16]
 80066ea:	4313      	orrs	r3, r2
 80066ec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80066ee:	697b      	ldr	r3, [r7, #20]
 80066f0:	f023 030a 	bic.w	r3, r3, #10
 80066f4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80066f6:	697a      	ldr	r2, [r7, #20]
 80066f8:	68bb      	ldr	r3, [r7, #8]
 80066fa:	4313      	orrs	r3, r2
 80066fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	693a      	ldr	r2, [r7, #16]
 8006702:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	697a      	ldr	r2, [r7, #20]
 8006708:	621a      	str	r2, [r3, #32]
}
 800670a:	bf00      	nop
 800670c:	371c      	adds	r7, #28
 800670e:	46bd      	mov	sp, r7
 8006710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006714:	4770      	bx	lr

08006716 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006716:	b480      	push	{r7}
 8006718:	b087      	sub	sp, #28
 800671a:	af00      	add	r7, sp, #0
 800671c:	60f8      	str	r0, [r7, #12]
 800671e:	60b9      	str	r1, [r7, #8]
 8006720:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	6a1b      	ldr	r3, [r3, #32]
 8006726:	f023 0210 	bic.w	r2, r3, #16
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	699b      	ldr	r3, [r3, #24]
 8006732:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	6a1b      	ldr	r3, [r3, #32]
 8006738:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800673a:	697b      	ldr	r3, [r7, #20]
 800673c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006740:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	031b      	lsls	r3, r3, #12
 8006746:	697a      	ldr	r2, [r7, #20]
 8006748:	4313      	orrs	r3, r2
 800674a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800674c:	693b      	ldr	r3, [r7, #16]
 800674e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006752:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006754:	68bb      	ldr	r3, [r7, #8]
 8006756:	011b      	lsls	r3, r3, #4
 8006758:	693a      	ldr	r2, [r7, #16]
 800675a:	4313      	orrs	r3, r2
 800675c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	697a      	ldr	r2, [r7, #20]
 8006762:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	693a      	ldr	r2, [r7, #16]
 8006768:	621a      	str	r2, [r3, #32]
}
 800676a:	bf00      	nop
 800676c:	371c      	adds	r7, #28
 800676e:	46bd      	mov	sp, r7
 8006770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006774:	4770      	bx	lr

08006776 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006776:	b480      	push	{r7}
 8006778:	b085      	sub	sp, #20
 800677a:	af00      	add	r7, sp, #0
 800677c:	6078      	str	r0, [r7, #4]
 800677e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	689b      	ldr	r3, [r3, #8]
 8006784:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800678c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800678e:	683a      	ldr	r2, [r7, #0]
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	4313      	orrs	r3, r2
 8006794:	f043 0307 	orr.w	r3, r3, #7
 8006798:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	68fa      	ldr	r2, [r7, #12]
 800679e:	609a      	str	r2, [r3, #8]
}
 80067a0:	bf00      	nop
 80067a2:	3714      	adds	r7, #20
 80067a4:	46bd      	mov	sp, r7
 80067a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067aa:	4770      	bx	lr

080067ac <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80067ac:	b480      	push	{r7}
 80067ae:	b087      	sub	sp, #28
 80067b0:	af00      	add	r7, sp, #0
 80067b2:	60f8      	str	r0, [r7, #12]
 80067b4:	60b9      	str	r1, [r7, #8]
 80067b6:	607a      	str	r2, [r7, #4]
 80067b8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	689b      	ldr	r3, [r3, #8]
 80067be:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80067c0:	697b      	ldr	r3, [r7, #20]
 80067c2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80067c6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80067c8:	683b      	ldr	r3, [r7, #0]
 80067ca:	021a      	lsls	r2, r3, #8
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	431a      	orrs	r2, r3
 80067d0:	68bb      	ldr	r3, [r7, #8]
 80067d2:	4313      	orrs	r3, r2
 80067d4:	697a      	ldr	r2, [r7, #20]
 80067d6:	4313      	orrs	r3, r2
 80067d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	697a      	ldr	r2, [r7, #20]
 80067de:	609a      	str	r2, [r3, #8]
}
 80067e0:	bf00      	nop
 80067e2:	371c      	adds	r7, #28
 80067e4:	46bd      	mov	sp, r7
 80067e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ea:	4770      	bx	lr

080067ec <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80067ec:	b480      	push	{r7}
 80067ee:	b087      	sub	sp, #28
 80067f0:	af00      	add	r7, sp, #0
 80067f2:	60f8      	str	r0, [r7, #12]
 80067f4:	60b9      	str	r1, [r7, #8]
 80067f6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80067f8:	68bb      	ldr	r3, [r7, #8]
 80067fa:	f003 031f 	and.w	r3, r3, #31
 80067fe:	2201      	movs	r2, #1
 8006800:	fa02 f303 	lsl.w	r3, r2, r3
 8006804:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	6a1a      	ldr	r2, [r3, #32]
 800680a:	697b      	ldr	r3, [r7, #20]
 800680c:	43db      	mvns	r3, r3
 800680e:	401a      	ands	r2, r3
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	6a1a      	ldr	r2, [r3, #32]
 8006818:	68bb      	ldr	r3, [r7, #8]
 800681a:	f003 031f 	and.w	r3, r3, #31
 800681e:	6879      	ldr	r1, [r7, #4]
 8006820:	fa01 f303 	lsl.w	r3, r1, r3
 8006824:	431a      	orrs	r2, r3
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	621a      	str	r2, [r3, #32]
}
 800682a:	bf00      	nop
 800682c:	371c      	adds	r7, #28
 800682e:	46bd      	mov	sp, r7
 8006830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006834:	4770      	bx	lr
	...

08006838 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006838:	b480      	push	{r7}
 800683a:	b085      	sub	sp, #20
 800683c:	af00      	add	r7, sp, #0
 800683e:	6078      	str	r0, [r7, #4]
 8006840:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006848:	2b01      	cmp	r3, #1
 800684a:	d101      	bne.n	8006850 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800684c:	2302      	movs	r3, #2
 800684e:	e06d      	b.n	800692c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	2201      	movs	r2, #1
 8006854:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	2202      	movs	r2, #2
 800685c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	685b      	ldr	r3, [r3, #4]
 8006866:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	689b      	ldr	r3, [r3, #8]
 800686e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	4a30      	ldr	r2, [pc, #192]	; (8006938 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006876:	4293      	cmp	r3, r2
 8006878:	d004      	beq.n	8006884 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	4a2f      	ldr	r2, [pc, #188]	; (800693c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006880:	4293      	cmp	r3, r2
 8006882:	d108      	bne.n	8006896 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800688a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800688c:	683b      	ldr	r3, [r7, #0]
 800688e:	685b      	ldr	r3, [r3, #4]
 8006890:	68fa      	ldr	r2, [r7, #12]
 8006892:	4313      	orrs	r3, r2
 8006894:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800689c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800689e:	683b      	ldr	r3, [r7, #0]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	68fa      	ldr	r2, [r7, #12]
 80068a4:	4313      	orrs	r3, r2
 80068a6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	68fa      	ldr	r2, [r7, #12]
 80068ae:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	4a20      	ldr	r2, [pc, #128]	; (8006938 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80068b6:	4293      	cmp	r3, r2
 80068b8:	d022      	beq.n	8006900 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80068c2:	d01d      	beq.n	8006900 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	4a1d      	ldr	r2, [pc, #116]	; (8006940 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80068ca:	4293      	cmp	r3, r2
 80068cc:	d018      	beq.n	8006900 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	4a1c      	ldr	r2, [pc, #112]	; (8006944 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80068d4:	4293      	cmp	r3, r2
 80068d6:	d013      	beq.n	8006900 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	4a1a      	ldr	r2, [pc, #104]	; (8006948 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80068de:	4293      	cmp	r3, r2
 80068e0:	d00e      	beq.n	8006900 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	4a15      	ldr	r2, [pc, #84]	; (800693c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80068e8:	4293      	cmp	r3, r2
 80068ea:	d009      	beq.n	8006900 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	4a16      	ldr	r2, [pc, #88]	; (800694c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80068f2:	4293      	cmp	r3, r2
 80068f4:	d004      	beq.n	8006900 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	4a15      	ldr	r2, [pc, #84]	; (8006950 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80068fc:	4293      	cmp	r3, r2
 80068fe:	d10c      	bne.n	800691a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006900:	68bb      	ldr	r3, [r7, #8]
 8006902:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006906:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006908:	683b      	ldr	r3, [r7, #0]
 800690a:	689b      	ldr	r3, [r3, #8]
 800690c:	68ba      	ldr	r2, [r7, #8]
 800690e:	4313      	orrs	r3, r2
 8006910:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	68ba      	ldr	r2, [r7, #8]
 8006918:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	2201      	movs	r2, #1
 800691e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	2200      	movs	r2, #0
 8006926:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800692a:	2300      	movs	r3, #0
}
 800692c:	4618      	mov	r0, r3
 800692e:	3714      	adds	r7, #20
 8006930:	46bd      	mov	sp, r7
 8006932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006936:	4770      	bx	lr
 8006938:	40010000 	.word	0x40010000
 800693c:	40010400 	.word	0x40010400
 8006940:	40000400 	.word	0x40000400
 8006944:	40000800 	.word	0x40000800
 8006948:	40000c00 	.word	0x40000c00
 800694c:	40014000 	.word	0x40014000
 8006950:	40001800 	.word	0x40001800

08006954 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006954:	b580      	push	{r7, lr}
 8006956:	b082      	sub	sp, #8
 8006958:	af00      	add	r7, sp, #0
 800695a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	2b00      	cmp	r3, #0
 8006960:	d101      	bne.n	8006966 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006962:	2301      	movs	r3, #1
 8006964:	e040      	b.n	80069e8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800696a:	2b00      	cmp	r3, #0
 800696c:	d106      	bne.n	800697c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	2200      	movs	r2, #0
 8006972:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006976:	6878      	ldr	r0, [r7, #4]
 8006978:	f7fb fd9e 	bl	80024b8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	2224      	movs	r2, #36	; 0x24
 8006980:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	681a      	ldr	r2, [r3, #0]
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	f022 0201 	bic.w	r2, r2, #1
 8006990:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006992:	6878      	ldr	r0, [r7, #4]
 8006994:	f000 f8b0 	bl	8006af8 <UART_SetConfig>
 8006998:	4603      	mov	r3, r0
 800699a:	2b01      	cmp	r3, #1
 800699c:	d101      	bne.n	80069a2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800699e:	2301      	movs	r3, #1
 80069a0:	e022      	b.n	80069e8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d002      	beq.n	80069b0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80069aa:	6878      	ldr	r0, [r7, #4]
 80069ac:	f000 fb08 	bl	8006fc0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	685a      	ldr	r2, [r3, #4]
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80069be:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	689a      	ldr	r2, [r3, #8]
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80069ce:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	681a      	ldr	r2, [r3, #0]
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	f042 0201 	orr.w	r2, r2, #1
 80069de:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80069e0:	6878      	ldr	r0, [r7, #4]
 80069e2:	f000 fb8f 	bl	8007104 <UART_CheckIdleState>
 80069e6:	4603      	mov	r3, r0
}
 80069e8:	4618      	mov	r0, r3
 80069ea:	3708      	adds	r7, #8
 80069ec:	46bd      	mov	sp, r7
 80069ee:	bd80      	pop	{r7, pc}

080069f0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80069f0:	b580      	push	{r7, lr}
 80069f2:	b08a      	sub	sp, #40	; 0x28
 80069f4:	af02      	add	r7, sp, #8
 80069f6:	60f8      	str	r0, [r7, #12]
 80069f8:	60b9      	str	r1, [r7, #8]
 80069fa:	603b      	str	r3, [r7, #0]
 80069fc:	4613      	mov	r3, r2
 80069fe:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006a04:	2b20      	cmp	r3, #32
 8006a06:	d171      	bne.n	8006aec <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8006a08:	68bb      	ldr	r3, [r7, #8]
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d002      	beq.n	8006a14 <HAL_UART_Transmit+0x24>
 8006a0e:	88fb      	ldrh	r3, [r7, #6]
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d101      	bne.n	8006a18 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8006a14:	2301      	movs	r3, #1
 8006a16:	e06a      	b.n	8006aee <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	2200      	movs	r2, #0
 8006a1c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	2221      	movs	r2, #33	; 0x21
 8006a24:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006a26:	f7fb ff0f 	bl	8002848 <HAL_GetTick>
 8006a2a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	88fa      	ldrh	r2, [r7, #6]
 8006a30:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	88fa      	ldrh	r2, [r7, #6]
 8006a38:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	689b      	ldr	r3, [r3, #8]
 8006a40:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a44:	d108      	bne.n	8006a58 <HAL_UART_Transmit+0x68>
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	691b      	ldr	r3, [r3, #16]
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d104      	bne.n	8006a58 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8006a4e:	2300      	movs	r3, #0
 8006a50:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006a52:	68bb      	ldr	r3, [r7, #8]
 8006a54:	61bb      	str	r3, [r7, #24]
 8006a56:	e003      	b.n	8006a60 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8006a58:	68bb      	ldr	r3, [r7, #8]
 8006a5a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006a5c:	2300      	movs	r3, #0
 8006a5e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006a60:	e02c      	b.n	8006abc <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006a62:	683b      	ldr	r3, [r7, #0]
 8006a64:	9300      	str	r3, [sp, #0]
 8006a66:	697b      	ldr	r3, [r7, #20]
 8006a68:	2200      	movs	r2, #0
 8006a6a:	2180      	movs	r1, #128	; 0x80
 8006a6c:	68f8      	ldr	r0, [r7, #12]
 8006a6e:	f000 fb80 	bl	8007172 <UART_WaitOnFlagUntilTimeout>
 8006a72:	4603      	mov	r3, r0
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d001      	beq.n	8006a7c <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8006a78:	2303      	movs	r3, #3
 8006a7a:	e038      	b.n	8006aee <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8006a7c:	69fb      	ldr	r3, [r7, #28]
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d10b      	bne.n	8006a9a <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006a82:	69bb      	ldr	r3, [r7, #24]
 8006a84:	881b      	ldrh	r3, [r3, #0]
 8006a86:	461a      	mov	r2, r3
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006a90:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006a92:	69bb      	ldr	r3, [r7, #24]
 8006a94:	3302      	adds	r3, #2
 8006a96:	61bb      	str	r3, [r7, #24]
 8006a98:	e007      	b.n	8006aaa <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006a9a:	69fb      	ldr	r3, [r7, #28]
 8006a9c:	781a      	ldrb	r2, [r3, #0]
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006aa4:	69fb      	ldr	r3, [r7, #28]
 8006aa6:	3301      	adds	r3, #1
 8006aa8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006ab0:	b29b      	uxth	r3, r3
 8006ab2:	3b01      	subs	r3, #1
 8006ab4:	b29a      	uxth	r2, r3
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006ac2:	b29b      	uxth	r3, r3
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d1cc      	bne.n	8006a62 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006ac8:	683b      	ldr	r3, [r7, #0]
 8006aca:	9300      	str	r3, [sp, #0]
 8006acc:	697b      	ldr	r3, [r7, #20]
 8006ace:	2200      	movs	r2, #0
 8006ad0:	2140      	movs	r1, #64	; 0x40
 8006ad2:	68f8      	ldr	r0, [r7, #12]
 8006ad4:	f000 fb4d 	bl	8007172 <UART_WaitOnFlagUntilTimeout>
 8006ad8:	4603      	mov	r3, r0
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d001      	beq.n	8006ae2 <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 8006ade:	2303      	movs	r3, #3
 8006ae0:	e005      	b.n	8006aee <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	2220      	movs	r2, #32
 8006ae6:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8006ae8:	2300      	movs	r3, #0
 8006aea:	e000      	b.n	8006aee <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8006aec:	2302      	movs	r3, #2
  }
}
 8006aee:	4618      	mov	r0, r3
 8006af0:	3720      	adds	r7, #32
 8006af2:	46bd      	mov	sp, r7
 8006af4:	bd80      	pop	{r7, pc}
	...

08006af8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006af8:	b580      	push	{r7, lr}
 8006afa:	b088      	sub	sp, #32
 8006afc:	af00      	add	r7, sp, #0
 8006afe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006b00:	2300      	movs	r3, #0
 8006b02:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	689a      	ldr	r2, [r3, #8]
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	691b      	ldr	r3, [r3, #16]
 8006b0c:	431a      	orrs	r2, r3
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	695b      	ldr	r3, [r3, #20]
 8006b12:	431a      	orrs	r2, r3
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	69db      	ldr	r3, [r3, #28]
 8006b18:	4313      	orrs	r3, r2
 8006b1a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	681a      	ldr	r2, [r3, #0]
 8006b22:	4ba6      	ldr	r3, [pc, #664]	; (8006dbc <UART_SetConfig+0x2c4>)
 8006b24:	4013      	ands	r3, r2
 8006b26:	687a      	ldr	r2, [r7, #4]
 8006b28:	6812      	ldr	r2, [r2, #0]
 8006b2a:	6979      	ldr	r1, [r7, #20]
 8006b2c:	430b      	orrs	r3, r1
 8006b2e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	685b      	ldr	r3, [r3, #4]
 8006b36:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	68da      	ldr	r2, [r3, #12]
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	430a      	orrs	r2, r1
 8006b44:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	699b      	ldr	r3, [r3, #24]
 8006b4a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	6a1b      	ldr	r3, [r3, #32]
 8006b50:	697a      	ldr	r2, [r7, #20]
 8006b52:	4313      	orrs	r3, r2
 8006b54:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	689b      	ldr	r3, [r3, #8]
 8006b5c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	697a      	ldr	r2, [r7, #20]
 8006b66:	430a      	orrs	r2, r1
 8006b68:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	4a94      	ldr	r2, [pc, #592]	; (8006dc0 <UART_SetConfig+0x2c8>)
 8006b70:	4293      	cmp	r3, r2
 8006b72:	d120      	bne.n	8006bb6 <UART_SetConfig+0xbe>
 8006b74:	4b93      	ldr	r3, [pc, #588]	; (8006dc4 <UART_SetConfig+0x2cc>)
 8006b76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b7a:	f003 0303 	and.w	r3, r3, #3
 8006b7e:	2b03      	cmp	r3, #3
 8006b80:	d816      	bhi.n	8006bb0 <UART_SetConfig+0xb8>
 8006b82:	a201      	add	r2, pc, #4	; (adr r2, 8006b88 <UART_SetConfig+0x90>)
 8006b84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b88:	08006b99 	.word	0x08006b99
 8006b8c:	08006ba5 	.word	0x08006ba5
 8006b90:	08006b9f 	.word	0x08006b9f
 8006b94:	08006bab 	.word	0x08006bab
 8006b98:	2301      	movs	r3, #1
 8006b9a:	77fb      	strb	r3, [r7, #31]
 8006b9c:	e150      	b.n	8006e40 <UART_SetConfig+0x348>
 8006b9e:	2302      	movs	r3, #2
 8006ba0:	77fb      	strb	r3, [r7, #31]
 8006ba2:	e14d      	b.n	8006e40 <UART_SetConfig+0x348>
 8006ba4:	2304      	movs	r3, #4
 8006ba6:	77fb      	strb	r3, [r7, #31]
 8006ba8:	e14a      	b.n	8006e40 <UART_SetConfig+0x348>
 8006baa:	2308      	movs	r3, #8
 8006bac:	77fb      	strb	r3, [r7, #31]
 8006bae:	e147      	b.n	8006e40 <UART_SetConfig+0x348>
 8006bb0:	2310      	movs	r3, #16
 8006bb2:	77fb      	strb	r3, [r7, #31]
 8006bb4:	e144      	b.n	8006e40 <UART_SetConfig+0x348>
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	4a83      	ldr	r2, [pc, #524]	; (8006dc8 <UART_SetConfig+0x2d0>)
 8006bbc:	4293      	cmp	r3, r2
 8006bbe:	d132      	bne.n	8006c26 <UART_SetConfig+0x12e>
 8006bc0:	4b80      	ldr	r3, [pc, #512]	; (8006dc4 <UART_SetConfig+0x2cc>)
 8006bc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006bc6:	f003 030c 	and.w	r3, r3, #12
 8006bca:	2b0c      	cmp	r3, #12
 8006bcc:	d828      	bhi.n	8006c20 <UART_SetConfig+0x128>
 8006bce:	a201      	add	r2, pc, #4	; (adr r2, 8006bd4 <UART_SetConfig+0xdc>)
 8006bd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bd4:	08006c09 	.word	0x08006c09
 8006bd8:	08006c21 	.word	0x08006c21
 8006bdc:	08006c21 	.word	0x08006c21
 8006be0:	08006c21 	.word	0x08006c21
 8006be4:	08006c15 	.word	0x08006c15
 8006be8:	08006c21 	.word	0x08006c21
 8006bec:	08006c21 	.word	0x08006c21
 8006bf0:	08006c21 	.word	0x08006c21
 8006bf4:	08006c0f 	.word	0x08006c0f
 8006bf8:	08006c21 	.word	0x08006c21
 8006bfc:	08006c21 	.word	0x08006c21
 8006c00:	08006c21 	.word	0x08006c21
 8006c04:	08006c1b 	.word	0x08006c1b
 8006c08:	2300      	movs	r3, #0
 8006c0a:	77fb      	strb	r3, [r7, #31]
 8006c0c:	e118      	b.n	8006e40 <UART_SetConfig+0x348>
 8006c0e:	2302      	movs	r3, #2
 8006c10:	77fb      	strb	r3, [r7, #31]
 8006c12:	e115      	b.n	8006e40 <UART_SetConfig+0x348>
 8006c14:	2304      	movs	r3, #4
 8006c16:	77fb      	strb	r3, [r7, #31]
 8006c18:	e112      	b.n	8006e40 <UART_SetConfig+0x348>
 8006c1a:	2308      	movs	r3, #8
 8006c1c:	77fb      	strb	r3, [r7, #31]
 8006c1e:	e10f      	b.n	8006e40 <UART_SetConfig+0x348>
 8006c20:	2310      	movs	r3, #16
 8006c22:	77fb      	strb	r3, [r7, #31]
 8006c24:	e10c      	b.n	8006e40 <UART_SetConfig+0x348>
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	4a68      	ldr	r2, [pc, #416]	; (8006dcc <UART_SetConfig+0x2d4>)
 8006c2c:	4293      	cmp	r3, r2
 8006c2e:	d120      	bne.n	8006c72 <UART_SetConfig+0x17a>
 8006c30:	4b64      	ldr	r3, [pc, #400]	; (8006dc4 <UART_SetConfig+0x2cc>)
 8006c32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c36:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006c3a:	2b30      	cmp	r3, #48	; 0x30
 8006c3c:	d013      	beq.n	8006c66 <UART_SetConfig+0x16e>
 8006c3e:	2b30      	cmp	r3, #48	; 0x30
 8006c40:	d814      	bhi.n	8006c6c <UART_SetConfig+0x174>
 8006c42:	2b20      	cmp	r3, #32
 8006c44:	d009      	beq.n	8006c5a <UART_SetConfig+0x162>
 8006c46:	2b20      	cmp	r3, #32
 8006c48:	d810      	bhi.n	8006c6c <UART_SetConfig+0x174>
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d002      	beq.n	8006c54 <UART_SetConfig+0x15c>
 8006c4e:	2b10      	cmp	r3, #16
 8006c50:	d006      	beq.n	8006c60 <UART_SetConfig+0x168>
 8006c52:	e00b      	b.n	8006c6c <UART_SetConfig+0x174>
 8006c54:	2300      	movs	r3, #0
 8006c56:	77fb      	strb	r3, [r7, #31]
 8006c58:	e0f2      	b.n	8006e40 <UART_SetConfig+0x348>
 8006c5a:	2302      	movs	r3, #2
 8006c5c:	77fb      	strb	r3, [r7, #31]
 8006c5e:	e0ef      	b.n	8006e40 <UART_SetConfig+0x348>
 8006c60:	2304      	movs	r3, #4
 8006c62:	77fb      	strb	r3, [r7, #31]
 8006c64:	e0ec      	b.n	8006e40 <UART_SetConfig+0x348>
 8006c66:	2308      	movs	r3, #8
 8006c68:	77fb      	strb	r3, [r7, #31]
 8006c6a:	e0e9      	b.n	8006e40 <UART_SetConfig+0x348>
 8006c6c:	2310      	movs	r3, #16
 8006c6e:	77fb      	strb	r3, [r7, #31]
 8006c70:	e0e6      	b.n	8006e40 <UART_SetConfig+0x348>
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	4a56      	ldr	r2, [pc, #344]	; (8006dd0 <UART_SetConfig+0x2d8>)
 8006c78:	4293      	cmp	r3, r2
 8006c7a:	d120      	bne.n	8006cbe <UART_SetConfig+0x1c6>
 8006c7c:	4b51      	ldr	r3, [pc, #324]	; (8006dc4 <UART_SetConfig+0x2cc>)
 8006c7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c82:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006c86:	2bc0      	cmp	r3, #192	; 0xc0
 8006c88:	d013      	beq.n	8006cb2 <UART_SetConfig+0x1ba>
 8006c8a:	2bc0      	cmp	r3, #192	; 0xc0
 8006c8c:	d814      	bhi.n	8006cb8 <UART_SetConfig+0x1c0>
 8006c8e:	2b80      	cmp	r3, #128	; 0x80
 8006c90:	d009      	beq.n	8006ca6 <UART_SetConfig+0x1ae>
 8006c92:	2b80      	cmp	r3, #128	; 0x80
 8006c94:	d810      	bhi.n	8006cb8 <UART_SetConfig+0x1c0>
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d002      	beq.n	8006ca0 <UART_SetConfig+0x1a8>
 8006c9a:	2b40      	cmp	r3, #64	; 0x40
 8006c9c:	d006      	beq.n	8006cac <UART_SetConfig+0x1b4>
 8006c9e:	e00b      	b.n	8006cb8 <UART_SetConfig+0x1c0>
 8006ca0:	2300      	movs	r3, #0
 8006ca2:	77fb      	strb	r3, [r7, #31]
 8006ca4:	e0cc      	b.n	8006e40 <UART_SetConfig+0x348>
 8006ca6:	2302      	movs	r3, #2
 8006ca8:	77fb      	strb	r3, [r7, #31]
 8006caa:	e0c9      	b.n	8006e40 <UART_SetConfig+0x348>
 8006cac:	2304      	movs	r3, #4
 8006cae:	77fb      	strb	r3, [r7, #31]
 8006cb0:	e0c6      	b.n	8006e40 <UART_SetConfig+0x348>
 8006cb2:	2308      	movs	r3, #8
 8006cb4:	77fb      	strb	r3, [r7, #31]
 8006cb6:	e0c3      	b.n	8006e40 <UART_SetConfig+0x348>
 8006cb8:	2310      	movs	r3, #16
 8006cba:	77fb      	strb	r3, [r7, #31]
 8006cbc:	e0c0      	b.n	8006e40 <UART_SetConfig+0x348>
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	4a44      	ldr	r2, [pc, #272]	; (8006dd4 <UART_SetConfig+0x2dc>)
 8006cc4:	4293      	cmp	r3, r2
 8006cc6:	d125      	bne.n	8006d14 <UART_SetConfig+0x21c>
 8006cc8:	4b3e      	ldr	r3, [pc, #248]	; (8006dc4 <UART_SetConfig+0x2cc>)
 8006cca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006cce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006cd2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006cd6:	d017      	beq.n	8006d08 <UART_SetConfig+0x210>
 8006cd8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006cdc:	d817      	bhi.n	8006d0e <UART_SetConfig+0x216>
 8006cde:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006ce2:	d00b      	beq.n	8006cfc <UART_SetConfig+0x204>
 8006ce4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006ce8:	d811      	bhi.n	8006d0e <UART_SetConfig+0x216>
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d003      	beq.n	8006cf6 <UART_SetConfig+0x1fe>
 8006cee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006cf2:	d006      	beq.n	8006d02 <UART_SetConfig+0x20a>
 8006cf4:	e00b      	b.n	8006d0e <UART_SetConfig+0x216>
 8006cf6:	2300      	movs	r3, #0
 8006cf8:	77fb      	strb	r3, [r7, #31]
 8006cfa:	e0a1      	b.n	8006e40 <UART_SetConfig+0x348>
 8006cfc:	2302      	movs	r3, #2
 8006cfe:	77fb      	strb	r3, [r7, #31]
 8006d00:	e09e      	b.n	8006e40 <UART_SetConfig+0x348>
 8006d02:	2304      	movs	r3, #4
 8006d04:	77fb      	strb	r3, [r7, #31]
 8006d06:	e09b      	b.n	8006e40 <UART_SetConfig+0x348>
 8006d08:	2308      	movs	r3, #8
 8006d0a:	77fb      	strb	r3, [r7, #31]
 8006d0c:	e098      	b.n	8006e40 <UART_SetConfig+0x348>
 8006d0e:	2310      	movs	r3, #16
 8006d10:	77fb      	strb	r3, [r7, #31]
 8006d12:	e095      	b.n	8006e40 <UART_SetConfig+0x348>
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	4a2f      	ldr	r2, [pc, #188]	; (8006dd8 <UART_SetConfig+0x2e0>)
 8006d1a:	4293      	cmp	r3, r2
 8006d1c:	d125      	bne.n	8006d6a <UART_SetConfig+0x272>
 8006d1e:	4b29      	ldr	r3, [pc, #164]	; (8006dc4 <UART_SetConfig+0x2cc>)
 8006d20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d24:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006d28:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006d2c:	d017      	beq.n	8006d5e <UART_SetConfig+0x266>
 8006d2e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006d32:	d817      	bhi.n	8006d64 <UART_SetConfig+0x26c>
 8006d34:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006d38:	d00b      	beq.n	8006d52 <UART_SetConfig+0x25a>
 8006d3a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006d3e:	d811      	bhi.n	8006d64 <UART_SetConfig+0x26c>
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d003      	beq.n	8006d4c <UART_SetConfig+0x254>
 8006d44:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006d48:	d006      	beq.n	8006d58 <UART_SetConfig+0x260>
 8006d4a:	e00b      	b.n	8006d64 <UART_SetConfig+0x26c>
 8006d4c:	2301      	movs	r3, #1
 8006d4e:	77fb      	strb	r3, [r7, #31]
 8006d50:	e076      	b.n	8006e40 <UART_SetConfig+0x348>
 8006d52:	2302      	movs	r3, #2
 8006d54:	77fb      	strb	r3, [r7, #31]
 8006d56:	e073      	b.n	8006e40 <UART_SetConfig+0x348>
 8006d58:	2304      	movs	r3, #4
 8006d5a:	77fb      	strb	r3, [r7, #31]
 8006d5c:	e070      	b.n	8006e40 <UART_SetConfig+0x348>
 8006d5e:	2308      	movs	r3, #8
 8006d60:	77fb      	strb	r3, [r7, #31]
 8006d62:	e06d      	b.n	8006e40 <UART_SetConfig+0x348>
 8006d64:	2310      	movs	r3, #16
 8006d66:	77fb      	strb	r3, [r7, #31]
 8006d68:	e06a      	b.n	8006e40 <UART_SetConfig+0x348>
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	4a1b      	ldr	r2, [pc, #108]	; (8006ddc <UART_SetConfig+0x2e4>)
 8006d70:	4293      	cmp	r3, r2
 8006d72:	d138      	bne.n	8006de6 <UART_SetConfig+0x2ee>
 8006d74:	4b13      	ldr	r3, [pc, #76]	; (8006dc4 <UART_SetConfig+0x2cc>)
 8006d76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d7a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8006d7e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006d82:	d017      	beq.n	8006db4 <UART_SetConfig+0x2bc>
 8006d84:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006d88:	d82a      	bhi.n	8006de0 <UART_SetConfig+0x2e8>
 8006d8a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006d8e:	d00b      	beq.n	8006da8 <UART_SetConfig+0x2b0>
 8006d90:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006d94:	d824      	bhi.n	8006de0 <UART_SetConfig+0x2e8>
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d003      	beq.n	8006da2 <UART_SetConfig+0x2aa>
 8006d9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d9e:	d006      	beq.n	8006dae <UART_SetConfig+0x2b6>
 8006da0:	e01e      	b.n	8006de0 <UART_SetConfig+0x2e8>
 8006da2:	2300      	movs	r3, #0
 8006da4:	77fb      	strb	r3, [r7, #31]
 8006da6:	e04b      	b.n	8006e40 <UART_SetConfig+0x348>
 8006da8:	2302      	movs	r3, #2
 8006daa:	77fb      	strb	r3, [r7, #31]
 8006dac:	e048      	b.n	8006e40 <UART_SetConfig+0x348>
 8006dae:	2304      	movs	r3, #4
 8006db0:	77fb      	strb	r3, [r7, #31]
 8006db2:	e045      	b.n	8006e40 <UART_SetConfig+0x348>
 8006db4:	2308      	movs	r3, #8
 8006db6:	77fb      	strb	r3, [r7, #31]
 8006db8:	e042      	b.n	8006e40 <UART_SetConfig+0x348>
 8006dba:	bf00      	nop
 8006dbc:	efff69f3 	.word	0xefff69f3
 8006dc0:	40011000 	.word	0x40011000
 8006dc4:	40023800 	.word	0x40023800
 8006dc8:	40004400 	.word	0x40004400
 8006dcc:	40004800 	.word	0x40004800
 8006dd0:	40004c00 	.word	0x40004c00
 8006dd4:	40005000 	.word	0x40005000
 8006dd8:	40011400 	.word	0x40011400
 8006ddc:	40007800 	.word	0x40007800
 8006de0:	2310      	movs	r3, #16
 8006de2:	77fb      	strb	r3, [r7, #31]
 8006de4:	e02c      	b.n	8006e40 <UART_SetConfig+0x348>
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	4a72      	ldr	r2, [pc, #456]	; (8006fb4 <UART_SetConfig+0x4bc>)
 8006dec:	4293      	cmp	r3, r2
 8006dee:	d125      	bne.n	8006e3c <UART_SetConfig+0x344>
 8006df0:	4b71      	ldr	r3, [pc, #452]	; (8006fb8 <UART_SetConfig+0x4c0>)
 8006df2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006df6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006dfa:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006dfe:	d017      	beq.n	8006e30 <UART_SetConfig+0x338>
 8006e00:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006e04:	d817      	bhi.n	8006e36 <UART_SetConfig+0x33e>
 8006e06:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006e0a:	d00b      	beq.n	8006e24 <UART_SetConfig+0x32c>
 8006e0c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006e10:	d811      	bhi.n	8006e36 <UART_SetConfig+0x33e>
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d003      	beq.n	8006e1e <UART_SetConfig+0x326>
 8006e16:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006e1a:	d006      	beq.n	8006e2a <UART_SetConfig+0x332>
 8006e1c:	e00b      	b.n	8006e36 <UART_SetConfig+0x33e>
 8006e1e:	2300      	movs	r3, #0
 8006e20:	77fb      	strb	r3, [r7, #31]
 8006e22:	e00d      	b.n	8006e40 <UART_SetConfig+0x348>
 8006e24:	2302      	movs	r3, #2
 8006e26:	77fb      	strb	r3, [r7, #31]
 8006e28:	e00a      	b.n	8006e40 <UART_SetConfig+0x348>
 8006e2a:	2304      	movs	r3, #4
 8006e2c:	77fb      	strb	r3, [r7, #31]
 8006e2e:	e007      	b.n	8006e40 <UART_SetConfig+0x348>
 8006e30:	2308      	movs	r3, #8
 8006e32:	77fb      	strb	r3, [r7, #31]
 8006e34:	e004      	b.n	8006e40 <UART_SetConfig+0x348>
 8006e36:	2310      	movs	r3, #16
 8006e38:	77fb      	strb	r3, [r7, #31]
 8006e3a:	e001      	b.n	8006e40 <UART_SetConfig+0x348>
 8006e3c:	2310      	movs	r3, #16
 8006e3e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	69db      	ldr	r3, [r3, #28]
 8006e44:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006e48:	d15b      	bne.n	8006f02 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8006e4a:	7ffb      	ldrb	r3, [r7, #31]
 8006e4c:	2b08      	cmp	r3, #8
 8006e4e:	d828      	bhi.n	8006ea2 <UART_SetConfig+0x3aa>
 8006e50:	a201      	add	r2, pc, #4	; (adr r2, 8006e58 <UART_SetConfig+0x360>)
 8006e52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e56:	bf00      	nop
 8006e58:	08006e7d 	.word	0x08006e7d
 8006e5c:	08006e85 	.word	0x08006e85
 8006e60:	08006e8d 	.word	0x08006e8d
 8006e64:	08006ea3 	.word	0x08006ea3
 8006e68:	08006e93 	.word	0x08006e93
 8006e6c:	08006ea3 	.word	0x08006ea3
 8006e70:	08006ea3 	.word	0x08006ea3
 8006e74:	08006ea3 	.word	0x08006ea3
 8006e78:	08006e9b 	.word	0x08006e9b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006e7c:	f7fd fcc6 	bl	800480c <HAL_RCC_GetPCLK1Freq>
 8006e80:	61b8      	str	r0, [r7, #24]
        break;
 8006e82:	e013      	b.n	8006eac <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006e84:	f7fd fcd6 	bl	8004834 <HAL_RCC_GetPCLK2Freq>
 8006e88:	61b8      	str	r0, [r7, #24]
        break;
 8006e8a:	e00f      	b.n	8006eac <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006e8c:	4b4b      	ldr	r3, [pc, #300]	; (8006fbc <UART_SetConfig+0x4c4>)
 8006e8e:	61bb      	str	r3, [r7, #24]
        break;
 8006e90:	e00c      	b.n	8006eac <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006e92:	f7fd fbe9 	bl	8004668 <HAL_RCC_GetSysClockFreq>
 8006e96:	61b8      	str	r0, [r7, #24]
        break;
 8006e98:	e008      	b.n	8006eac <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006e9a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006e9e:	61bb      	str	r3, [r7, #24]
        break;
 8006ea0:	e004      	b.n	8006eac <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8006ea2:	2300      	movs	r3, #0
 8006ea4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006ea6:	2301      	movs	r3, #1
 8006ea8:	77bb      	strb	r3, [r7, #30]
        break;
 8006eaa:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006eac:	69bb      	ldr	r3, [r7, #24]
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d074      	beq.n	8006f9c <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006eb2:	69bb      	ldr	r3, [r7, #24]
 8006eb4:	005a      	lsls	r2, r3, #1
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	685b      	ldr	r3, [r3, #4]
 8006eba:	085b      	lsrs	r3, r3, #1
 8006ebc:	441a      	add	r2, r3
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	685b      	ldr	r3, [r3, #4]
 8006ec2:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ec6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006ec8:	693b      	ldr	r3, [r7, #16]
 8006eca:	2b0f      	cmp	r3, #15
 8006ecc:	d916      	bls.n	8006efc <UART_SetConfig+0x404>
 8006ece:	693b      	ldr	r3, [r7, #16]
 8006ed0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006ed4:	d212      	bcs.n	8006efc <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006ed6:	693b      	ldr	r3, [r7, #16]
 8006ed8:	b29b      	uxth	r3, r3
 8006eda:	f023 030f 	bic.w	r3, r3, #15
 8006ede:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006ee0:	693b      	ldr	r3, [r7, #16]
 8006ee2:	085b      	lsrs	r3, r3, #1
 8006ee4:	b29b      	uxth	r3, r3
 8006ee6:	f003 0307 	and.w	r3, r3, #7
 8006eea:	b29a      	uxth	r2, r3
 8006eec:	89fb      	ldrh	r3, [r7, #14]
 8006eee:	4313      	orrs	r3, r2
 8006ef0:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	89fa      	ldrh	r2, [r7, #14]
 8006ef8:	60da      	str	r2, [r3, #12]
 8006efa:	e04f      	b.n	8006f9c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006efc:	2301      	movs	r3, #1
 8006efe:	77bb      	strb	r3, [r7, #30]
 8006f00:	e04c      	b.n	8006f9c <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006f02:	7ffb      	ldrb	r3, [r7, #31]
 8006f04:	2b08      	cmp	r3, #8
 8006f06:	d828      	bhi.n	8006f5a <UART_SetConfig+0x462>
 8006f08:	a201      	add	r2, pc, #4	; (adr r2, 8006f10 <UART_SetConfig+0x418>)
 8006f0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f0e:	bf00      	nop
 8006f10:	08006f35 	.word	0x08006f35
 8006f14:	08006f3d 	.word	0x08006f3d
 8006f18:	08006f45 	.word	0x08006f45
 8006f1c:	08006f5b 	.word	0x08006f5b
 8006f20:	08006f4b 	.word	0x08006f4b
 8006f24:	08006f5b 	.word	0x08006f5b
 8006f28:	08006f5b 	.word	0x08006f5b
 8006f2c:	08006f5b 	.word	0x08006f5b
 8006f30:	08006f53 	.word	0x08006f53
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006f34:	f7fd fc6a 	bl	800480c <HAL_RCC_GetPCLK1Freq>
 8006f38:	61b8      	str	r0, [r7, #24]
        break;
 8006f3a:	e013      	b.n	8006f64 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006f3c:	f7fd fc7a 	bl	8004834 <HAL_RCC_GetPCLK2Freq>
 8006f40:	61b8      	str	r0, [r7, #24]
        break;
 8006f42:	e00f      	b.n	8006f64 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006f44:	4b1d      	ldr	r3, [pc, #116]	; (8006fbc <UART_SetConfig+0x4c4>)
 8006f46:	61bb      	str	r3, [r7, #24]
        break;
 8006f48:	e00c      	b.n	8006f64 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006f4a:	f7fd fb8d 	bl	8004668 <HAL_RCC_GetSysClockFreq>
 8006f4e:	61b8      	str	r0, [r7, #24]
        break;
 8006f50:	e008      	b.n	8006f64 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006f52:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006f56:	61bb      	str	r3, [r7, #24]
        break;
 8006f58:	e004      	b.n	8006f64 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8006f5a:	2300      	movs	r3, #0
 8006f5c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006f5e:	2301      	movs	r3, #1
 8006f60:	77bb      	strb	r3, [r7, #30]
        break;
 8006f62:	bf00      	nop
    }

    if (pclk != 0U)
 8006f64:	69bb      	ldr	r3, [r7, #24]
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d018      	beq.n	8006f9c <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	685b      	ldr	r3, [r3, #4]
 8006f6e:	085a      	lsrs	r2, r3, #1
 8006f70:	69bb      	ldr	r3, [r7, #24]
 8006f72:	441a      	add	r2, r3
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	685b      	ldr	r3, [r3, #4]
 8006f78:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f7c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006f7e:	693b      	ldr	r3, [r7, #16]
 8006f80:	2b0f      	cmp	r3, #15
 8006f82:	d909      	bls.n	8006f98 <UART_SetConfig+0x4a0>
 8006f84:	693b      	ldr	r3, [r7, #16]
 8006f86:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006f8a:	d205      	bcs.n	8006f98 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006f8c:	693b      	ldr	r3, [r7, #16]
 8006f8e:	b29a      	uxth	r2, r3
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	60da      	str	r2, [r3, #12]
 8006f96:	e001      	b.n	8006f9c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006f98:	2301      	movs	r3, #1
 8006f9a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	2200      	movs	r2, #0
 8006fa0:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	2200      	movs	r2, #0
 8006fa6:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8006fa8:	7fbb      	ldrb	r3, [r7, #30]
}
 8006faa:	4618      	mov	r0, r3
 8006fac:	3720      	adds	r7, #32
 8006fae:	46bd      	mov	sp, r7
 8006fb0:	bd80      	pop	{r7, pc}
 8006fb2:	bf00      	nop
 8006fb4:	40007c00 	.word	0x40007c00
 8006fb8:	40023800 	.word	0x40023800
 8006fbc:	00f42400 	.word	0x00f42400

08006fc0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006fc0:	b480      	push	{r7}
 8006fc2:	b083      	sub	sp, #12
 8006fc4:	af00      	add	r7, sp, #0
 8006fc6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fcc:	f003 0301 	and.w	r3, r3, #1
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d00a      	beq.n	8006fea <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	685b      	ldr	r3, [r3, #4]
 8006fda:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	430a      	orrs	r2, r1
 8006fe8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fee:	f003 0302 	and.w	r3, r3, #2
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d00a      	beq.n	800700c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	685b      	ldr	r3, [r3, #4]
 8006ffc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	430a      	orrs	r2, r1
 800700a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007010:	f003 0304 	and.w	r3, r3, #4
 8007014:	2b00      	cmp	r3, #0
 8007016:	d00a      	beq.n	800702e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	685b      	ldr	r3, [r3, #4]
 800701e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	430a      	orrs	r2, r1
 800702c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007032:	f003 0308 	and.w	r3, r3, #8
 8007036:	2b00      	cmp	r3, #0
 8007038:	d00a      	beq.n	8007050 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	685b      	ldr	r3, [r3, #4]
 8007040:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	430a      	orrs	r2, r1
 800704e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007054:	f003 0310 	and.w	r3, r3, #16
 8007058:	2b00      	cmp	r3, #0
 800705a:	d00a      	beq.n	8007072 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	689b      	ldr	r3, [r3, #8]
 8007062:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	430a      	orrs	r2, r1
 8007070:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007076:	f003 0320 	and.w	r3, r3, #32
 800707a:	2b00      	cmp	r3, #0
 800707c:	d00a      	beq.n	8007094 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	689b      	ldr	r3, [r3, #8]
 8007084:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	430a      	orrs	r2, r1
 8007092:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007098:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800709c:	2b00      	cmp	r3, #0
 800709e:	d01a      	beq.n	80070d6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	685b      	ldr	r3, [r3, #4]
 80070a6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	430a      	orrs	r2, r1
 80070b4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070ba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80070be:	d10a      	bne.n	80070d6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	685b      	ldr	r3, [r3, #4]
 80070c6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	430a      	orrs	r2, r1
 80070d4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d00a      	beq.n	80070f8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	685b      	ldr	r3, [r3, #4]
 80070e8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	430a      	orrs	r2, r1
 80070f6:	605a      	str	r2, [r3, #4]
  }
}
 80070f8:	bf00      	nop
 80070fa:	370c      	adds	r7, #12
 80070fc:	46bd      	mov	sp, r7
 80070fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007102:	4770      	bx	lr

08007104 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007104:	b580      	push	{r7, lr}
 8007106:	b086      	sub	sp, #24
 8007108:	af02      	add	r7, sp, #8
 800710a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	2200      	movs	r2, #0
 8007110:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007114:	f7fb fb98 	bl	8002848 <HAL_GetTick>
 8007118:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	f003 0308 	and.w	r3, r3, #8
 8007124:	2b08      	cmp	r3, #8
 8007126:	d10e      	bne.n	8007146 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007128:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800712c:	9300      	str	r3, [sp, #0]
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	2200      	movs	r2, #0
 8007132:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007136:	6878      	ldr	r0, [r7, #4]
 8007138:	f000 f81b 	bl	8007172 <UART_WaitOnFlagUntilTimeout>
 800713c:	4603      	mov	r3, r0
 800713e:	2b00      	cmp	r3, #0
 8007140:	d001      	beq.n	8007146 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007142:	2303      	movs	r3, #3
 8007144:	e011      	b.n	800716a <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	2220      	movs	r2, #32
 800714a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	2220      	movs	r2, #32
 8007150:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	2200      	movs	r2, #0
 8007158:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	2200      	movs	r2, #0
 800715e:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	2200      	movs	r2, #0
 8007164:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8007168:	2300      	movs	r3, #0
}
 800716a:	4618      	mov	r0, r3
 800716c:	3710      	adds	r7, #16
 800716e:	46bd      	mov	sp, r7
 8007170:	bd80      	pop	{r7, pc}

08007172 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007172:	b580      	push	{r7, lr}
 8007174:	b09c      	sub	sp, #112	; 0x70
 8007176:	af00      	add	r7, sp, #0
 8007178:	60f8      	str	r0, [r7, #12]
 800717a:	60b9      	str	r1, [r7, #8]
 800717c:	603b      	str	r3, [r7, #0]
 800717e:	4613      	mov	r3, r2
 8007180:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007182:	e0a7      	b.n	80072d4 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007184:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007186:	f1b3 3fff 	cmp.w	r3, #4294967295
 800718a:	f000 80a3 	beq.w	80072d4 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800718e:	f7fb fb5b 	bl	8002848 <HAL_GetTick>
 8007192:	4602      	mov	r2, r0
 8007194:	683b      	ldr	r3, [r7, #0]
 8007196:	1ad3      	subs	r3, r2, r3
 8007198:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800719a:	429a      	cmp	r2, r3
 800719c:	d302      	bcc.n	80071a4 <UART_WaitOnFlagUntilTimeout+0x32>
 800719e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d13f      	bne.n	8007224 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80071ac:	e853 3f00 	ldrex	r3, [r3]
 80071b0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80071b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80071b4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80071b8:	667b      	str	r3, [r7, #100]	; 0x64
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	461a      	mov	r2, r3
 80071c0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80071c2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80071c4:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071c6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80071c8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80071ca:	e841 2300 	strex	r3, r2, [r1]
 80071ce:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80071d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d1e6      	bne.n	80071a4 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	3308      	adds	r3, #8
 80071dc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80071e0:	e853 3f00 	ldrex	r3, [r3]
 80071e4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80071e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071e8:	f023 0301 	bic.w	r3, r3, #1
 80071ec:	663b      	str	r3, [r7, #96]	; 0x60
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	3308      	adds	r3, #8
 80071f4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80071f6:	64ba      	str	r2, [r7, #72]	; 0x48
 80071f8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071fa:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80071fc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80071fe:	e841 2300 	strex	r3, r2, [r1]
 8007202:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007204:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007206:	2b00      	cmp	r3, #0
 8007208:	d1e5      	bne.n	80071d6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	2220      	movs	r2, #32
 800720e:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	2220      	movs	r2, #32
 8007214:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	2200      	movs	r2, #0
 800721c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8007220:	2303      	movs	r3, #3
 8007222:	e068      	b.n	80072f6 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	f003 0304 	and.w	r3, r3, #4
 800722e:	2b00      	cmp	r3, #0
 8007230:	d050      	beq.n	80072d4 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	69db      	ldr	r3, [r3, #28]
 8007238:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800723c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007240:	d148      	bne.n	80072d4 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800724a:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007252:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007254:	e853 3f00 	ldrex	r3, [r3]
 8007258:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800725a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800725c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007260:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	461a      	mov	r2, r3
 8007268:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800726a:	637b      	str	r3, [r7, #52]	; 0x34
 800726c:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800726e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007270:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007272:	e841 2300 	strex	r3, r2, [r1]
 8007276:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007278:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800727a:	2b00      	cmp	r3, #0
 800727c:	d1e6      	bne.n	800724c <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	3308      	adds	r3, #8
 8007284:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007286:	697b      	ldr	r3, [r7, #20]
 8007288:	e853 3f00 	ldrex	r3, [r3]
 800728c:	613b      	str	r3, [r7, #16]
   return(result);
 800728e:	693b      	ldr	r3, [r7, #16]
 8007290:	f023 0301 	bic.w	r3, r3, #1
 8007294:	66bb      	str	r3, [r7, #104]	; 0x68
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	3308      	adds	r3, #8
 800729c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800729e:	623a      	str	r2, [r7, #32]
 80072a0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072a2:	69f9      	ldr	r1, [r7, #28]
 80072a4:	6a3a      	ldr	r2, [r7, #32]
 80072a6:	e841 2300 	strex	r3, r2, [r1]
 80072aa:	61bb      	str	r3, [r7, #24]
   return(result);
 80072ac:	69bb      	ldr	r3, [r7, #24]
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d1e5      	bne.n	800727e <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	2220      	movs	r2, #32
 80072b6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	2220      	movs	r2, #32
 80072bc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	2220      	movs	r2, #32
 80072c4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	2200      	movs	r2, #0
 80072cc:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80072d0:	2303      	movs	r3, #3
 80072d2:	e010      	b.n	80072f6 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	69da      	ldr	r2, [r3, #28]
 80072da:	68bb      	ldr	r3, [r7, #8]
 80072dc:	4013      	ands	r3, r2
 80072de:	68ba      	ldr	r2, [r7, #8]
 80072e0:	429a      	cmp	r2, r3
 80072e2:	bf0c      	ite	eq
 80072e4:	2301      	moveq	r3, #1
 80072e6:	2300      	movne	r3, #0
 80072e8:	b2db      	uxtb	r3, r3
 80072ea:	461a      	mov	r2, r3
 80072ec:	79fb      	ldrb	r3, [r7, #7]
 80072ee:	429a      	cmp	r2, r3
 80072f0:	f43f af48 	beq.w	8007184 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80072f4:	2300      	movs	r3, #0
}
 80072f6:	4618      	mov	r0, r3
 80072f8:	3770      	adds	r7, #112	; 0x70
 80072fa:	46bd      	mov	sp, r7
 80072fc:	bd80      	pop	{r7, pc}
	...

08007300 <__errno>:
 8007300:	4b01      	ldr	r3, [pc, #4]	; (8007308 <__errno+0x8>)
 8007302:	6818      	ldr	r0, [r3, #0]
 8007304:	4770      	bx	lr
 8007306:	bf00      	nop
 8007308:	20004e9c 	.word	0x20004e9c

0800730c <__libc_init_array>:
 800730c:	b570      	push	{r4, r5, r6, lr}
 800730e:	4d0d      	ldr	r5, [pc, #52]	; (8007344 <__libc_init_array+0x38>)
 8007310:	4c0d      	ldr	r4, [pc, #52]	; (8007348 <__libc_init_array+0x3c>)
 8007312:	1b64      	subs	r4, r4, r5
 8007314:	10a4      	asrs	r4, r4, #2
 8007316:	2600      	movs	r6, #0
 8007318:	42a6      	cmp	r6, r4
 800731a:	d109      	bne.n	8007330 <__libc_init_array+0x24>
 800731c:	4d0b      	ldr	r5, [pc, #44]	; (800734c <__libc_init_array+0x40>)
 800731e:	4c0c      	ldr	r4, [pc, #48]	; (8007350 <__libc_init_array+0x44>)
 8007320:	f001 f824 	bl	800836c <_init>
 8007324:	1b64      	subs	r4, r4, r5
 8007326:	10a4      	asrs	r4, r4, #2
 8007328:	2600      	movs	r6, #0
 800732a:	42a6      	cmp	r6, r4
 800732c:	d105      	bne.n	800733a <__libc_init_array+0x2e>
 800732e:	bd70      	pop	{r4, r5, r6, pc}
 8007330:	f855 3b04 	ldr.w	r3, [r5], #4
 8007334:	4798      	blx	r3
 8007336:	3601      	adds	r6, #1
 8007338:	e7ee      	b.n	8007318 <__libc_init_array+0xc>
 800733a:	f855 3b04 	ldr.w	r3, [r5], #4
 800733e:	4798      	blx	r3
 8007340:	3601      	adds	r6, #1
 8007342:	e7f2      	b.n	800732a <__libc_init_array+0x1e>
 8007344:	08008964 	.word	0x08008964
 8007348:	08008964 	.word	0x08008964
 800734c:	08008964 	.word	0x08008964
 8007350:	08008968 	.word	0x08008968

08007354 <memset>:
 8007354:	4402      	add	r2, r0
 8007356:	4603      	mov	r3, r0
 8007358:	4293      	cmp	r3, r2
 800735a:	d100      	bne.n	800735e <memset+0xa>
 800735c:	4770      	bx	lr
 800735e:	f803 1b01 	strb.w	r1, [r3], #1
 8007362:	e7f9      	b.n	8007358 <memset+0x4>

08007364 <iprintf>:
 8007364:	b40f      	push	{r0, r1, r2, r3}
 8007366:	4b0a      	ldr	r3, [pc, #40]	; (8007390 <iprintf+0x2c>)
 8007368:	b513      	push	{r0, r1, r4, lr}
 800736a:	681c      	ldr	r4, [r3, #0]
 800736c:	b124      	cbz	r4, 8007378 <iprintf+0x14>
 800736e:	69a3      	ldr	r3, [r4, #24]
 8007370:	b913      	cbnz	r3, 8007378 <iprintf+0x14>
 8007372:	4620      	mov	r0, r4
 8007374:	f000 fa5e 	bl	8007834 <__sinit>
 8007378:	ab05      	add	r3, sp, #20
 800737a:	9a04      	ldr	r2, [sp, #16]
 800737c:	68a1      	ldr	r1, [r4, #8]
 800737e:	9301      	str	r3, [sp, #4]
 8007380:	4620      	mov	r0, r4
 8007382:	f000 fc67 	bl	8007c54 <_vfiprintf_r>
 8007386:	b002      	add	sp, #8
 8007388:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800738c:	b004      	add	sp, #16
 800738e:	4770      	bx	lr
 8007390:	20004e9c 	.word	0x20004e9c

08007394 <_puts_r>:
 8007394:	b570      	push	{r4, r5, r6, lr}
 8007396:	460e      	mov	r6, r1
 8007398:	4605      	mov	r5, r0
 800739a:	b118      	cbz	r0, 80073a4 <_puts_r+0x10>
 800739c:	6983      	ldr	r3, [r0, #24]
 800739e:	b90b      	cbnz	r3, 80073a4 <_puts_r+0x10>
 80073a0:	f000 fa48 	bl	8007834 <__sinit>
 80073a4:	69ab      	ldr	r3, [r5, #24]
 80073a6:	68ac      	ldr	r4, [r5, #8]
 80073a8:	b913      	cbnz	r3, 80073b0 <_puts_r+0x1c>
 80073aa:	4628      	mov	r0, r5
 80073ac:	f000 fa42 	bl	8007834 <__sinit>
 80073b0:	4b2c      	ldr	r3, [pc, #176]	; (8007464 <_puts_r+0xd0>)
 80073b2:	429c      	cmp	r4, r3
 80073b4:	d120      	bne.n	80073f8 <_puts_r+0x64>
 80073b6:	686c      	ldr	r4, [r5, #4]
 80073b8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80073ba:	07db      	lsls	r3, r3, #31
 80073bc:	d405      	bmi.n	80073ca <_puts_r+0x36>
 80073be:	89a3      	ldrh	r3, [r4, #12]
 80073c0:	0598      	lsls	r0, r3, #22
 80073c2:	d402      	bmi.n	80073ca <_puts_r+0x36>
 80073c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80073c6:	f000 fad3 	bl	8007970 <__retarget_lock_acquire_recursive>
 80073ca:	89a3      	ldrh	r3, [r4, #12]
 80073cc:	0719      	lsls	r1, r3, #28
 80073ce:	d51d      	bpl.n	800740c <_puts_r+0x78>
 80073d0:	6923      	ldr	r3, [r4, #16]
 80073d2:	b1db      	cbz	r3, 800740c <_puts_r+0x78>
 80073d4:	3e01      	subs	r6, #1
 80073d6:	68a3      	ldr	r3, [r4, #8]
 80073d8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80073dc:	3b01      	subs	r3, #1
 80073de:	60a3      	str	r3, [r4, #8]
 80073e0:	bb39      	cbnz	r1, 8007432 <_puts_r+0x9e>
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	da38      	bge.n	8007458 <_puts_r+0xc4>
 80073e6:	4622      	mov	r2, r4
 80073e8:	210a      	movs	r1, #10
 80073ea:	4628      	mov	r0, r5
 80073ec:	f000 f848 	bl	8007480 <__swbuf_r>
 80073f0:	3001      	adds	r0, #1
 80073f2:	d011      	beq.n	8007418 <_puts_r+0x84>
 80073f4:	250a      	movs	r5, #10
 80073f6:	e011      	b.n	800741c <_puts_r+0x88>
 80073f8:	4b1b      	ldr	r3, [pc, #108]	; (8007468 <_puts_r+0xd4>)
 80073fa:	429c      	cmp	r4, r3
 80073fc:	d101      	bne.n	8007402 <_puts_r+0x6e>
 80073fe:	68ac      	ldr	r4, [r5, #8]
 8007400:	e7da      	b.n	80073b8 <_puts_r+0x24>
 8007402:	4b1a      	ldr	r3, [pc, #104]	; (800746c <_puts_r+0xd8>)
 8007404:	429c      	cmp	r4, r3
 8007406:	bf08      	it	eq
 8007408:	68ec      	ldreq	r4, [r5, #12]
 800740a:	e7d5      	b.n	80073b8 <_puts_r+0x24>
 800740c:	4621      	mov	r1, r4
 800740e:	4628      	mov	r0, r5
 8007410:	f000 f888 	bl	8007524 <__swsetup_r>
 8007414:	2800      	cmp	r0, #0
 8007416:	d0dd      	beq.n	80073d4 <_puts_r+0x40>
 8007418:	f04f 35ff 	mov.w	r5, #4294967295
 800741c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800741e:	07da      	lsls	r2, r3, #31
 8007420:	d405      	bmi.n	800742e <_puts_r+0x9a>
 8007422:	89a3      	ldrh	r3, [r4, #12]
 8007424:	059b      	lsls	r3, r3, #22
 8007426:	d402      	bmi.n	800742e <_puts_r+0x9a>
 8007428:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800742a:	f000 faa2 	bl	8007972 <__retarget_lock_release_recursive>
 800742e:	4628      	mov	r0, r5
 8007430:	bd70      	pop	{r4, r5, r6, pc}
 8007432:	2b00      	cmp	r3, #0
 8007434:	da04      	bge.n	8007440 <_puts_r+0xac>
 8007436:	69a2      	ldr	r2, [r4, #24]
 8007438:	429a      	cmp	r2, r3
 800743a:	dc06      	bgt.n	800744a <_puts_r+0xb6>
 800743c:	290a      	cmp	r1, #10
 800743e:	d004      	beq.n	800744a <_puts_r+0xb6>
 8007440:	6823      	ldr	r3, [r4, #0]
 8007442:	1c5a      	adds	r2, r3, #1
 8007444:	6022      	str	r2, [r4, #0]
 8007446:	7019      	strb	r1, [r3, #0]
 8007448:	e7c5      	b.n	80073d6 <_puts_r+0x42>
 800744a:	4622      	mov	r2, r4
 800744c:	4628      	mov	r0, r5
 800744e:	f000 f817 	bl	8007480 <__swbuf_r>
 8007452:	3001      	adds	r0, #1
 8007454:	d1bf      	bne.n	80073d6 <_puts_r+0x42>
 8007456:	e7df      	b.n	8007418 <_puts_r+0x84>
 8007458:	6823      	ldr	r3, [r4, #0]
 800745a:	250a      	movs	r5, #10
 800745c:	1c5a      	adds	r2, r3, #1
 800745e:	6022      	str	r2, [r4, #0]
 8007460:	701d      	strb	r5, [r3, #0]
 8007462:	e7db      	b.n	800741c <_puts_r+0x88>
 8007464:	080088e8 	.word	0x080088e8
 8007468:	08008908 	.word	0x08008908
 800746c:	080088c8 	.word	0x080088c8

08007470 <puts>:
 8007470:	4b02      	ldr	r3, [pc, #8]	; (800747c <puts+0xc>)
 8007472:	4601      	mov	r1, r0
 8007474:	6818      	ldr	r0, [r3, #0]
 8007476:	f7ff bf8d 	b.w	8007394 <_puts_r>
 800747a:	bf00      	nop
 800747c:	20004e9c 	.word	0x20004e9c

08007480 <__swbuf_r>:
 8007480:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007482:	460e      	mov	r6, r1
 8007484:	4614      	mov	r4, r2
 8007486:	4605      	mov	r5, r0
 8007488:	b118      	cbz	r0, 8007492 <__swbuf_r+0x12>
 800748a:	6983      	ldr	r3, [r0, #24]
 800748c:	b90b      	cbnz	r3, 8007492 <__swbuf_r+0x12>
 800748e:	f000 f9d1 	bl	8007834 <__sinit>
 8007492:	4b21      	ldr	r3, [pc, #132]	; (8007518 <__swbuf_r+0x98>)
 8007494:	429c      	cmp	r4, r3
 8007496:	d12b      	bne.n	80074f0 <__swbuf_r+0x70>
 8007498:	686c      	ldr	r4, [r5, #4]
 800749a:	69a3      	ldr	r3, [r4, #24]
 800749c:	60a3      	str	r3, [r4, #8]
 800749e:	89a3      	ldrh	r3, [r4, #12]
 80074a0:	071a      	lsls	r2, r3, #28
 80074a2:	d52f      	bpl.n	8007504 <__swbuf_r+0x84>
 80074a4:	6923      	ldr	r3, [r4, #16]
 80074a6:	b36b      	cbz	r3, 8007504 <__swbuf_r+0x84>
 80074a8:	6923      	ldr	r3, [r4, #16]
 80074aa:	6820      	ldr	r0, [r4, #0]
 80074ac:	1ac0      	subs	r0, r0, r3
 80074ae:	6963      	ldr	r3, [r4, #20]
 80074b0:	b2f6      	uxtb	r6, r6
 80074b2:	4283      	cmp	r3, r0
 80074b4:	4637      	mov	r7, r6
 80074b6:	dc04      	bgt.n	80074c2 <__swbuf_r+0x42>
 80074b8:	4621      	mov	r1, r4
 80074ba:	4628      	mov	r0, r5
 80074bc:	f000 f926 	bl	800770c <_fflush_r>
 80074c0:	bb30      	cbnz	r0, 8007510 <__swbuf_r+0x90>
 80074c2:	68a3      	ldr	r3, [r4, #8]
 80074c4:	3b01      	subs	r3, #1
 80074c6:	60a3      	str	r3, [r4, #8]
 80074c8:	6823      	ldr	r3, [r4, #0]
 80074ca:	1c5a      	adds	r2, r3, #1
 80074cc:	6022      	str	r2, [r4, #0]
 80074ce:	701e      	strb	r6, [r3, #0]
 80074d0:	6963      	ldr	r3, [r4, #20]
 80074d2:	3001      	adds	r0, #1
 80074d4:	4283      	cmp	r3, r0
 80074d6:	d004      	beq.n	80074e2 <__swbuf_r+0x62>
 80074d8:	89a3      	ldrh	r3, [r4, #12]
 80074da:	07db      	lsls	r3, r3, #31
 80074dc:	d506      	bpl.n	80074ec <__swbuf_r+0x6c>
 80074de:	2e0a      	cmp	r6, #10
 80074e0:	d104      	bne.n	80074ec <__swbuf_r+0x6c>
 80074e2:	4621      	mov	r1, r4
 80074e4:	4628      	mov	r0, r5
 80074e6:	f000 f911 	bl	800770c <_fflush_r>
 80074ea:	b988      	cbnz	r0, 8007510 <__swbuf_r+0x90>
 80074ec:	4638      	mov	r0, r7
 80074ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80074f0:	4b0a      	ldr	r3, [pc, #40]	; (800751c <__swbuf_r+0x9c>)
 80074f2:	429c      	cmp	r4, r3
 80074f4:	d101      	bne.n	80074fa <__swbuf_r+0x7a>
 80074f6:	68ac      	ldr	r4, [r5, #8]
 80074f8:	e7cf      	b.n	800749a <__swbuf_r+0x1a>
 80074fa:	4b09      	ldr	r3, [pc, #36]	; (8007520 <__swbuf_r+0xa0>)
 80074fc:	429c      	cmp	r4, r3
 80074fe:	bf08      	it	eq
 8007500:	68ec      	ldreq	r4, [r5, #12]
 8007502:	e7ca      	b.n	800749a <__swbuf_r+0x1a>
 8007504:	4621      	mov	r1, r4
 8007506:	4628      	mov	r0, r5
 8007508:	f000 f80c 	bl	8007524 <__swsetup_r>
 800750c:	2800      	cmp	r0, #0
 800750e:	d0cb      	beq.n	80074a8 <__swbuf_r+0x28>
 8007510:	f04f 37ff 	mov.w	r7, #4294967295
 8007514:	e7ea      	b.n	80074ec <__swbuf_r+0x6c>
 8007516:	bf00      	nop
 8007518:	080088e8 	.word	0x080088e8
 800751c:	08008908 	.word	0x08008908
 8007520:	080088c8 	.word	0x080088c8

08007524 <__swsetup_r>:
 8007524:	4b32      	ldr	r3, [pc, #200]	; (80075f0 <__swsetup_r+0xcc>)
 8007526:	b570      	push	{r4, r5, r6, lr}
 8007528:	681d      	ldr	r5, [r3, #0]
 800752a:	4606      	mov	r6, r0
 800752c:	460c      	mov	r4, r1
 800752e:	b125      	cbz	r5, 800753a <__swsetup_r+0x16>
 8007530:	69ab      	ldr	r3, [r5, #24]
 8007532:	b913      	cbnz	r3, 800753a <__swsetup_r+0x16>
 8007534:	4628      	mov	r0, r5
 8007536:	f000 f97d 	bl	8007834 <__sinit>
 800753a:	4b2e      	ldr	r3, [pc, #184]	; (80075f4 <__swsetup_r+0xd0>)
 800753c:	429c      	cmp	r4, r3
 800753e:	d10f      	bne.n	8007560 <__swsetup_r+0x3c>
 8007540:	686c      	ldr	r4, [r5, #4]
 8007542:	89a3      	ldrh	r3, [r4, #12]
 8007544:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007548:	0719      	lsls	r1, r3, #28
 800754a:	d42c      	bmi.n	80075a6 <__swsetup_r+0x82>
 800754c:	06dd      	lsls	r5, r3, #27
 800754e:	d411      	bmi.n	8007574 <__swsetup_r+0x50>
 8007550:	2309      	movs	r3, #9
 8007552:	6033      	str	r3, [r6, #0]
 8007554:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007558:	81a3      	strh	r3, [r4, #12]
 800755a:	f04f 30ff 	mov.w	r0, #4294967295
 800755e:	e03e      	b.n	80075de <__swsetup_r+0xba>
 8007560:	4b25      	ldr	r3, [pc, #148]	; (80075f8 <__swsetup_r+0xd4>)
 8007562:	429c      	cmp	r4, r3
 8007564:	d101      	bne.n	800756a <__swsetup_r+0x46>
 8007566:	68ac      	ldr	r4, [r5, #8]
 8007568:	e7eb      	b.n	8007542 <__swsetup_r+0x1e>
 800756a:	4b24      	ldr	r3, [pc, #144]	; (80075fc <__swsetup_r+0xd8>)
 800756c:	429c      	cmp	r4, r3
 800756e:	bf08      	it	eq
 8007570:	68ec      	ldreq	r4, [r5, #12]
 8007572:	e7e6      	b.n	8007542 <__swsetup_r+0x1e>
 8007574:	0758      	lsls	r0, r3, #29
 8007576:	d512      	bpl.n	800759e <__swsetup_r+0x7a>
 8007578:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800757a:	b141      	cbz	r1, 800758e <__swsetup_r+0x6a>
 800757c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007580:	4299      	cmp	r1, r3
 8007582:	d002      	beq.n	800758a <__swsetup_r+0x66>
 8007584:	4630      	mov	r0, r6
 8007586:	f000 fa5b 	bl	8007a40 <_free_r>
 800758a:	2300      	movs	r3, #0
 800758c:	6363      	str	r3, [r4, #52]	; 0x34
 800758e:	89a3      	ldrh	r3, [r4, #12]
 8007590:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007594:	81a3      	strh	r3, [r4, #12]
 8007596:	2300      	movs	r3, #0
 8007598:	6063      	str	r3, [r4, #4]
 800759a:	6923      	ldr	r3, [r4, #16]
 800759c:	6023      	str	r3, [r4, #0]
 800759e:	89a3      	ldrh	r3, [r4, #12]
 80075a0:	f043 0308 	orr.w	r3, r3, #8
 80075a4:	81a3      	strh	r3, [r4, #12]
 80075a6:	6923      	ldr	r3, [r4, #16]
 80075a8:	b94b      	cbnz	r3, 80075be <__swsetup_r+0x9a>
 80075aa:	89a3      	ldrh	r3, [r4, #12]
 80075ac:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80075b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80075b4:	d003      	beq.n	80075be <__swsetup_r+0x9a>
 80075b6:	4621      	mov	r1, r4
 80075b8:	4630      	mov	r0, r6
 80075ba:	f000 fa01 	bl	80079c0 <__smakebuf_r>
 80075be:	89a0      	ldrh	r0, [r4, #12]
 80075c0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80075c4:	f010 0301 	ands.w	r3, r0, #1
 80075c8:	d00a      	beq.n	80075e0 <__swsetup_r+0xbc>
 80075ca:	2300      	movs	r3, #0
 80075cc:	60a3      	str	r3, [r4, #8]
 80075ce:	6963      	ldr	r3, [r4, #20]
 80075d0:	425b      	negs	r3, r3
 80075d2:	61a3      	str	r3, [r4, #24]
 80075d4:	6923      	ldr	r3, [r4, #16]
 80075d6:	b943      	cbnz	r3, 80075ea <__swsetup_r+0xc6>
 80075d8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80075dc:	d1ba      	bne.n	8007554 <__swsetup_r+0x30>
 80075de:	bd70      	pop	{r4, r5, r6, pc}
 80075e0:	0781      	lsls	r1, r0, #30
 80075e2:	bf58      	it	pl
 80075e4:	6963      	ldrpl	r3, [r4, #20]
 80075e6:	60a3      	str	r3, [r4, #8]
 80075e8:	e7f4      	b.n	80075d4 <__swsetup_r+0xb0>
 80075ea:	2000      	movs	r0, #0
 80075ec:	e7f7      	b.n	80075de <__swsetup_r+0xba>
 80075ee:	bf00      	nop
 80075f0:	20004e9c 	.word	0x20004e9c
 80075f4:	080088e8 	.word	0x080088e8
 80075f8:	08008908 	.word	0x08008908
 80075fc:	080088c8 	.word	0x080088c8

08007600 <__sflush_r>:
 8007600:	898a      	ldrh	r2, [r1, #12]
 8007602:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007606:	4605      	mov	r5, r0
 8007608:	0710      	lsls	r0, r2, #28
 800760a:	460c      	mov	r4, r1
 800760c:	d458      	bmi.n	80076c0 <__sflush_r+0xc0>
 800760e:	684b      	ldr	r3, [r1, #4]
 8007610:	2b00      	cmp	r3, #0
 8007612:	dc05      	bgt.n	8007620 <__sflush_r+0x20>
 8007614:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007616:	2b00      	cmp	r3, #0
 8007618:	dc02      	bgt.n	8007620 <__sflush_r+0x20>
 800761a:	2000      	movs	r0, #0
 800761c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007620:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007622:	2e00      	cmp	r6, #0
 8007624:	d0f9      	beq.n	800761a <__sflush_r+0x1a>
 8007626:	2300      	movs	r3, #0
 8007628:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800762c:	682f      	ldr	r7, [r5, #0]
 800762e:	602b      	str	r3, [r5, #0]
 8007630:	d032      	beq.n	8007698 <__sflush_r+0x98>
 8007632:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007634:	89a3      	ldrh	r3, [r4, #12]
 8007636:	075a      	lsls	r2, r3, #29
 8007638:	d505      	bpl.n	8007646 <__sflush_r+0x46>
 800763a:	6863      	ldr	r3, [r4, #4]
 800763c:	1ac0      	subs	r0, r0, r3
 800763e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007640:	b10b      	cbz	r3, 8007646 <__sflush_r+0x46>
 8007642:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007644:	1ac0      	subs	r0, r0, r3
 8007646:	2300      	movs	r3, #0
 8007648:	4602      	mov	r2, r0
 800764a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800764c:	6a21      	ldr	r1, [r4, #32]
 800764e:	4628      	mov	r0, r5
 8007650:	47b0      	blx	r6
 8007652:	1c43      	adds	r3, r0, #1
 8007654:	89a3      	ldrh	r3, [r4, #12]
 8007656:	d106      	bne.n	8007666 <__sflush_r+0x66>
 8007658:	6829      	ldr	r1, [r5, #0]
 800765a:	291d      	cmp	r1, #29
 800765c:	d82c      	bhi.n	80076b8 <__sflush_r+0xb8>
 800765e:	4a2a      	ldr	r2, [pc, #168]	; (8007708 <__sflush_r+0x108>)
 8007660:	40ca      	lsrs	r2, r1
 8007662:	07d6      	lsls	r6, r2, #31
 8007664:	d528      	bpl.n	80076b8 <__sflush_r+0xb8>
 8007666:	2200      	movs	r2, #0
 8007668:	6062      	str	r2, [r4, #4]
 800766a:	04d9      	lsls	r1, r3, #19
 800766c:	6922      	ldr	r2, [r4, #16]
 800766e:	6022      	str	r2, [r4, #0]
 8007670:	d504      	bpl.n	800767c <__sflush_r+0x7c>
 8007672:	1c42      	adds	r2, r0, #1
 8007674:	d101      	bne.n	800767a <__sflush_r+0x7a>
 8007676:	682b      	ldr	r3, [r5, #0]
 8007678:	b903      	cbnz	r3, 800767c <__sflush_r+0x7c>
 800767a:	6560      	str	r0, [r4, #84]	; 0x54
 800767c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800767e:	602f      	str	r7, [r5, #0]
 8007680:	2900      	cmp	r1, #0
 8007682:	d0ca      	beq.n	800761a <__sflush_r+0x1a>
 8007684:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007688:	4299      	cmp	r1, r3
 800768a:	d002      	beq.n	8007692 <__sflush_r+0x92>
 800768c:	4628      	mov	r0, r5
 800768e:	f000 f9d7 	bl	8007a40 <_free_r>
 8007692:	2000      	movs	r0, #0
 8007694:	6360      	str	r0, [r4, #52]	; 0x34
 8007696:	e7c1      	b.n	800761c <__sflush_r+0x1c>
 8007698:	6a21      	ldr	r1, [r4, #32]
 800769a:	2301      	movs	r3, #1
 800769c:	4628      	mov	r0, r5
 800769e:	47b0      	blx	r6
 80076a0:	1c41      	adds	r1, r0, #1
 80076a2:	d1c7      	bne.n	8007634 <__sflush_r+0x34>
 80076a4:	682b      	ldr	r3, [r5, #0]
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d0c4      	beq.n	8007634 <__sflush_r+0x34>
 80076aa:	2b1d      	cmp	r3, #29
 80076ac:	d001      	beq.n	80076b2 <__sflush_r+0xb2>
 80076ae:	2b16      	cmp	r3, #22
 80076b0:	d101      	bne.n	80076b6 <__sflush_r+0xb6>
 80076b2:	602f      	str	r7, [r5, #0]
 80076b4:	e7b1      	b.n	800761a <__sflush_r+0x1a>
 80076b6:	89a3      	ldrh	r3, [r4, #12]
 80076b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80076bc:	81a3      	strh	r3, [r4, #12]
 80076be:	e7ad      	b.n	800761c <__sflush_r+0x1c>
 80076c0:	690f      	ldr	r7, [r1, #16]
 80076c2:	2f00      	cmp	r7, #0
 80076c4:	d0a9      	beq.n	800761a <__sflush_r+0x1a>
 80076c6:	0793      	lsls	r3, r2, #30
 80076c8:	680e      	ldr	r6, [r1, #0]
 80076ca:	bf08      	it	eq
 80076cc:	694b      	ldreq	r3, [r1, #20]
 80076ce:	600f      	str	r7, [r1, #0]
 80076d0:	bf18      	it	ne
 80076d2:	2300      	movne	r3, #0
 80076d4:	eba6 0807 	sub.w	r8, r6, r7
 80076d8:	608b      	str	r3, [r1, #8]
 80076da:	f1b8 0f00 	cmp.w	r8, #0
 80076de:	dd9c      	ble.n	800761a <__sflush_r+0x1a>
 80076e0:	6a21      	ldr	r1, [r4, #32]
 80076e2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80076e4:	4643      	mov	r3, r8
 80076e6:	463a      	mov	r2, r7
 80076e8:	4628      	mov	r0, r5
 80076ea:	47b0      	blx	r6
 80076ec:	2800      	cmp	r0, #0
 80076ee:	dc06      	bgt.n	80076fe <__sflush_r+0xfe>
 80076f0:	89a3      	ldrh	r3, [r4, #12]
 80076f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80076f6:	81a3      	strh	r3, [r4, #12]
 80076f8:	f04f 30ff 	mov.w	r0, #4294967295
 80076fc:	e78e      	b.n	800761c <__sflush_r+0x1c>
 80076fe:	4407      	add	r7, r0
 8007700:	eba8 0800 	sub.w	r8, r8, r0
 8007704:	e7e9      	b.n	80076da <__sflush_r+0xda>
 8007706:	bf00      	nop
 8007708:	20400001 	.word	0x20400001

0800770c <_fflush_r>:
 800770c:	b538      	push	{r3, r4, r5, lr}
 800770e:	690b      	ldr	r3, [r1, #16]
 8007710:	4605      	mov	r5, r0
 8007712:	460c      	mov	r4, r1
 8007714:	b913      	cbnz	r3, 800771c <_fflush_r+0x10>
 8007716:	2500      	movs	r5, #0
 8007718:	4628      	mov	r0, r5
 800771a:	bd38      	pop	{r3, r4, r5, pc}
 800771c:	b118      	cbz	r0, 8007726 <_fflush_r+0x1a>
 800771e:	6983      	ldr	r3, [r0, #24]
 8007720:	b90b      	cbnz	r3, 8007726 <_fflush_r+0x1a>
 8007722:	f000 f887 	bl	8007834 <__sinit>
 8007726:	4b14      	ldr	r3, [pc, #80]	; (8007778 <_fflush_r+0x6c>)
 8007728:	429c      	cmp	r4, r3
 800772a:	d11b      	bne.n	8007764 <_fflush_r+0x58>
 800772c:	686c      	ldr	r4, [r5, #4]
 800772e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007732:	2b00      	cmp	r3, #0
 8007734:	d0ef      	beq.n	8007716 <_fflush_r+0xa>
 8007736:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007738:	07d0      	lsls	r0, r2, #31
 800773a:	d404      	bmi.n	8007746 <_fflush_r+0x3a>
 800773c:	0599      	lsls	r1, r3, #22
 800773e:	d402      	bmi.n	8007746 <_fflush_r+0x3a>
 8007740:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007742:	f000 f915 	bl	8007970 <__retarget_lock_acquire_recursive>
 8007746:	4628      	mov	r0, r5
 8007748:	4621      	mov	r1, r4
 800774a:	f7ff ff59 	bl	8007600 <__sflush_r>
 800774e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007750:	07da      	lsls	r2, r3, #31
 8007752:	4605      	mov	r5, r0
 8007754:	d4e0      	bmi.n	8007718 <_fflush_r+0xc>
 8007756:	89a3      	ldrh	r3, [r4, #12]
 8007758:	059b      	lsls	r3, r3, #22
 800775a:	d4dd      	bmi.n	8007718 <_fflush_r+0xc>
 800775c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800775e:	f000 f908 	bl	8007972 <__retarget_lock_release_recursive>
 8007762:	e7d9      	b.n	8007718 <_fflush_r+0xc>
 8007764:	4b05      	ldr	r3, [pc, #20]	; (800777c <_fflush_r+0x70>)
 8007766:	429c      	cmp	r4, r3
 8007768:	d101      	bne.n	800776e <_fflush_r+0x62>
 800776a:	68ac      	ldr	r4, [r5, #8]
 800776c:	e7df      	b.n	800772e <_fflush_r+0x22>
 800776e:	4b04      	ldr	r3, [pc, #16]	; (8007780 <_fflush_r+0x74>)
 8007770:	429c      	cmp	r4, r3
 8007772:	bf08      	it	eq
 8007774:	68ec      	ldreq	r4, [r5, #12]
 8007776:	e7da      	b.n	800772e <_fflush_r+0x22>
 8007778:	080088e8 	.word	0x080088e8
 800777c:	08008908 	.word	0x08008908
 8007780:	080088c8 	.word	0x080088c8

08007784 <std>:
 8007784:	2300      	movs	r3, #0
 8007786:	b510      	push	{r4, lr}
 8007788:	4604      	mov	r4, r0
 800778a:	e9c0 3300 	strd	r3, r3, [r0]
 800778e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007792:	6083      	str	r3, [r0, #8]
 8007794:	8181      	strh	r1, [r0, #12]
 8007796:	6643      	str	r3, [r0, #100]	; 0x64
 8007798:	81c2      	strh	r2, [r0, #14]
 800779a:	6183      	str	r3, [r0, #24]
 800779c:	4619      	mov	r1, r3
 800779e:	2208      	movs	r2, #8
 80077a0:	305c      	adds	r0, #92	; 0x5c
 80077a2:	f7ff fdd7 	bl	8007354 <memset>
 80077a6:	4b05      	ldr	r3, [pc, #20]	; (80077bc <std+0x38>)
 80077a8:	6263      	str	r3, [r4, #36]	; 0x24
 80077aa:	4b05      	ldr	r3, [pc, #20]	; (80077c0 <std+0x3c>)
 80077ac:	62a3      	str	r3, [r4, #40]	; 0x28
 80077ae:	4b05      	ldr	r3, [pc, #20]	; (80077c4 <std+0x40>)
 80077b0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80077b2:	4b05      	ldr	r3, [pc, #20]	; (80077c8 <std+0x44>)
 80077b4:	6224      	str	r4, [r4, #32]
 80077b6:	6323      	str	r3, [r4, #48]	; 0x30
 80077b8:	bd10      	pop	{r4, pc}
 80077ba:	bf00      	nop
 80077bc:	080081fd 	.word	0x080081fd
 80077c0:	0800821f 	.word	0x0800821f
 80077c4:	08008257 	.word	0x08008257
 80077c8:	0800827b 	.word	0x0800827b

080077cc <_cleanup_r>:
 80077cc:	4901      	ldr	r1, [pc, #4]	; (80077d4 <_cleanup_r+0x8>)
 80077ce:	f000 b8af 	b.w	8007930 <_fwalk_reent>
 80077d2:	bf00      	nop
 80077d4:	0800770d 	.word	0x0800770d

080077d8 <__sfmoreglue>:
 80077d8:	b570      	push	{r4, r5, r6, lr}
 80077da:	2268      	movs	r2, #104	; 0x68
 80077dc:	1e4d      	subs	r5, r1, #1
 80077de:	4355      	muls	r5, r2
 80077e0:	460e      	mov	r6, r1
 80077e2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80077e6:	f000 f997 	bl	8007b18 <_malloc_r>
 80077ea:	4604      	mov	r4, r0
 80077ec:	b140      	cbz	r0, 8007800 <__sfmoreglue+0x28>
 80077ee:	2100      	movs	r1, #0
 80077f0:	e9c0 1600 	strd	r1, r6, [r0]
 80077f4:	300c      	adds	r0, #12
 80077f6:	60a0      	str	r0, [r4, #8]
 80077f8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80077fc:	f7ff fdaa 	bl	8007354 <memset>
 8007800:	4620      	mov	r0, r4
 8007802:	bd70      	pop	{r4, r5, r6, pc}

08007804 <__sfp_lock_acquire>:
 8007804:	4801      	ldr	r0, [pc, #4]	; (800780c <__sfp_lock_acquire+0x8>)
 8007806:	f000 b8b3 	b.w	8007970 <__retarget_lock_acquire_recursive>
 800780a:	bf00      	nop
 800780c:	200054f1 	.word	0x200054f1

08007810 <__sfp_lock_release>:
 8007810:	4801      	ldr	r0, [pc, #4]	; (8007818 <__sfp_lock_release+0x8>)
 8007812:	f000 b8ae 	b.w	8007972 <__retarget_lock_release_recursive>
 8007816:	bf00      	nop
 8007818:	200054f1 	.word	0x200054f1

0800781c <__sinit_lock_acquire>:
 800781c:	4801      	ldr	r0, [pc, #4]	; (8007824 <__sinit_lock_acquire+0x8>)
 800781e:	f000 b8a7 	b.w	8007970 <__retarget_lock_acquire_recursive>
 8007822:	bf00      	nop
 8007824:	200054f2 	.word	0x200054f2

08007828 <__sinit_lock_release>:
 8007828:	4801      	ldr	r0, [pc, #4]	; (8007830 <__sinit_lock_release+0x8>)
 800782a:	f000 b8a2 	b.w	8007972 <__retarget_lock_release_recursive>
 800782e:	bf00      	nop
 8007830:	200054f2 	.word	0x200054f2

08007834 <__sinit>:
 8007834:	b510      	push	{r4, lr}
 8007836:	4604      	mov	r4, r0
 8007838:	f7ff fff0 	bl	800781c <__sinit_lock_acquire>
 800783c:	69a3      	ldr	r3, [r4, #24]
 800783e:	b11b      	cbz	r3, 8007848 <__sinit+0x14>
 8007840:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007844:	f7ff bff0 	b.w	8007828 <__sinit_lock_release>
 8007848:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800784c:	6523      	str	r3, [r4, #80]	; 0x50
 800784e:	4b13      	ldr	r3, [pc, #76]	; (800789c <__sinit+0x68>)
 8007850:	4a13      	ldr	r2, [pc, #76]	; (80078a0 <__sinit+0x6c>)
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	62a2      	str	r2, [r4, #40]	; 0x28
 8007856:	42a3      	cmp	r3, r4
 8007858:	bf04      	itt	eq
 800785a:	2301      	moveq	r3, #1
 800785c:	61a3      	streq	r3, [r4, #24]
 800785e:	4620      	mov	r0, r4
 8007860:	f000 f820 	bl	80078a4 <__sfp>
 8007864:	6060      	str	r0, [r4, #4]
 8007866:	4620      	mov	r0, r4
 8007868:	f000 f81c 	bl	80078a4 <__sfp>
 800786c:	60a0      	str	r0, [r4, #8]
 800786e:	4620      	mov	r0, r4
 8007870:	f000 f818 	bl	80078a4 <__sfp>
 8007874:	2200      	movs	r2, #0
 8007876:	60e0      	str	r0, [r4, #12]
 8007878:	2104      	movs	r1, #4
 800787a:	6860      	ldr	r0, [r4, #4]
 800787c:	f7ff ff82 	bl	8007784 <std>
 8007880:	68a0      	ldr	r0, [r4, #8]
 8007882:	2201      	movs	r2, #1
 8007884:	2109      	movs	r1, #9
 8007886:	f7ff ff7d 	bl	8007784 <std>
 800788a:	68e0      	ldr	r0, [r4, #12]
 800788c:	2202      	movs	r2, #2
 800788e:	2112      	movs	r1, #18
 8007890:	f7ff ff78 	bl	8007784 <std>
 8007894:	2301      	movs	r3, #1
 8007896:	61a3      	str	r3, [r4, #24]
 8007898:	e7d2      	b.n	8007840 <__sinit+0xc>
 800789a:	bf00      	nop
 800789c:	080088c4 	.word	0x080088c4
 80078a0:	080077cd 	.word	0x080077cd

080078a4 <__sfp>:
 80078a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078a6:	4607      	mov	r7, r0
 80078a8:	f7ff ffac 	bl	8007804 <__sfp_lock_acquire>
 80078ac:	4b1e      	ldr	r3, [pc, #120]	; (8007928 <__sfp+0x84>)
 80078ae:	681e      	ldr	r6, [r3, #0]
 80078b0:	69b3      	ldr	r3, [r6, #24]
 80078b2:	b913      	cbnz	r3, 80078ba <__sfp+0x16>
 80078b4:	4630      	mov	r0, r6
 80078b6:	f7ff ffbd 	bl	8007834 <__sinit>
 80078ba:	3648      	adds	r6, #72	; 0x48
 80078bc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80078c0:	3b01      	subs	r3, #1
 80078c2:	d503      	bpl.n	80078cc <__sfp+0x28>
 80078c4:	6833      	ldr	r3, [r6, #0]
 80078c6:	b30b      	cbz	r3, 800790c <__sfp+0x68>
 80078c8:	6836      	ldr	r6, [r6, #0]
 80078ca:	e7f7      	b.n	80078bc <__sfp+0x18>
 80078cc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80078d0:	b9d5      	cbnz	r5, 8007908 <__sfp+0x64>
 80078d2:	4b16      	ldr	r3, [pc, #88]	; (800792c <__sfp+0x88>)
 80078d4:	60e3      	str	r3, [r4, #12]
 80078d6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80078da:	6665      	str	r5, [r4, #100]	; 0x64
 80078dc:	f000 f847 	bl	800796e <__retarget_lock_init_recursive>
 80078e0:	f7ff ff96 	bl	8007810 <__sfp_lock_release>
 80078e4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80078e8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80078ec:	6025      	str	r5, [r4, #0]
 80078ee:	61a5      	str	r5, [r4, #24]
 80078f0:	2208      	movs	r2, #8
 80078f2:	4629      	mov	r1, r5
 80078f4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80078f8:	f7ff fd2c 	bl	8007354 <memset>
 80078fc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007900:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007904:	4620      	mov	r0, r4
 8007906:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007908:	3468      	adds	r4, #104	; 0x68
 800790a:	e7d9      	b.n	80078c0 <__sfp+0x1c>
 800790c:	2104      	movs	r1, #4
 800790e:	4638      	mov	r0, r7
 8007910:	f7ff ff62 	bl	80077d8 <__sfmoreglue>
 8007914:	4604      	mov	r4, r0
 8007916:	6030      	str	r0, [r6, #0]
 8007918:	2800      	cmp	r0, #0
 800791a:	d1d5      	bne.n	80078c8 <__sfp+0x24>
 800791c:	f7ff ff78 	bl	8007810 <__sfp_lock_release>
 8007920:	230c      	movs	r3, #12
 8007922:	603b      	str	r3, [r7, #0]
 8007924:	e7ee      	b.n	8007904 <__sfp+0x60>
 8007926:	bf00      	nop
 8007928:	080088c4 	.word	0x080088c4
 800792c:	ffff0001 	.word	0xffff0001

08007930 <_fwalk_reent>:
 8007930:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007934:	4606      	mov	r6, r0
 8007936:	4688      	mov	r8, r1
 8007938:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800793c:	2700      	movs	r7, #0
 800793e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007942:	f1b9 0901 	subs.w	r9, r9, #1
 8007946:	d505      	bpl.n	8007954 <_fwalk_reent+0x24>
 8007948:	6824      	ldr	r4, [r4, #0]
 800794a:	2c00      	cmp	r4, #0
 800794c:	d1f7      	bne.n	800793e <_fwalk_reent+0xe>
 800794e:	4638      	mov	r0, r7
 8007950:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007954:	89ab      	ldrh	r3, [r5, #12]
 8007956:	2b01      	cmp	r3, #1
 8007958:	d907      	bls.n	800796a <_fwalk_reent+0x3a>
 800795a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800795e:	3301      	adds	r3, #1
 8007960:	d003      	beq.n	800796a <_fwalk_reent+0x3a>
 8007962:	4629      	mov	r1, r5
 8007964:	4630      	mov	r0, r6
 8007966:	47c0      	blx	r8
 8007968:	4307      	orrs	r7, r0
 800796a:	3568      	adds	r5, #104	; 0x68
 800796c:	e7e9      	b.n	8007942 <_fwalk_reent+0x12>

0800796e <__retarget_lock_init_recursive>:
 800796e:	4770      	bx	lr

08007970 <__retarget_lock_acquire_recursive>:
 8007970:	4770      	bx	lr

08007972 <__retarget_lock_release_recursive>:
 8007972:	4770      	bx	lr

08007974 <__swhatbuf_r>:
 8007974:	b570      	push	{r4, r5, r6, lr}
 8007976:	460e      	mov	r6, r1
 8007978:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800797c:	2900      	cmp	r1, #0
 800797e:	b096      	sub	sp, #88	; 0x58
 8007980:	4614      	mov	r4, r2
 8007982:	461d      	mov	r5, r3
 8007984:	da08      	bge.n	8007998 <__swhatbuf_r+0x24>
 8007986:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800798a:	2200      	movs	r2, #0
 800798c:	602a      	str	r2, [r5, #0]
 800798e:	061a      	lsls	r2, r3, #24
 8007990:	d410      	bmi.n	80079b4 <__swhatbuf_r+0x40>
 8007992:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007996:	e00e      	b.n	80079b6 <__swhatbuf_r+0x42>
 8007998:	466a      	mov	r2, sp
 800799a:	f000 fc95 	bl	80082c8 <_fstat_r>
 800799e:	2800      	cmp	r0, #0
 80079a0:	dbf1      	blt.n	8007986 <__swhatbuf_r+0x12>
 80079a2:	9a01      	ldr	r2, [sp, #4]
 80079a4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80079a8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80079ac:	425a      	negs	r2, r3
 80079ae:	415a      	adcs	r2, r3
 80079b0:	602a      	str	r2, [r5, #0]
 80079b2:	e7ee      	b.n	8007992 <__swhatbuf_r+0x1e>
 80079b4:	2340      	movs	r3, #64	; 0x40
 80079b6:	2000      	movs	r0, #0
 80079b8:	6023      	str	r3, [r4, #0]
 80079ba:	b016      	add	sp, #88	; 0x58
 80079bc:	bd70      	pop	{r4, r5, r6, pc}
	...

080079c0 <__smakebuf_r>:
 80079c0:	898b      	ldrh	r3, [r1, #12]
 80079c2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80079c4:	079d      	lsls	r5, r3, #30
 80079c6:	4606      	mov	r6, r0
 80079c8:	460c      	mov	r4, r1
 80079ca:	d507      	bpl.n	80079dc <__smakebuf_r+0x1c>
 80079cc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80079d0:	6023      	str	r3, [r4, #0]
 80079d2:	6123      	str	r3, [r4, #16]
 80079d4:	2301      	movs	r3, #1
 80079d6:	6163      	str	r3, [r4, #20]
 80079d8:	b002      	add	sp, #8
 80079da:	bd70      	pop	{r4, r5, r6, pc}
 80079dc:	ab01      	add	r3, sp, #4
 80079de:	466a      	mov	r2, sp
 80079e0:	f7ff ffc8 	bl	8007974 <__swhatbuf_r>
 80079e4:	9900      	ldr	r1, [sp, #0]
 80079e6:	4605      	mov	r5, r0
 80079e8:	4630      	mov	r0, r6
 80079ea:	f000 f895 	bl	8007b18 <_malloc_r>
 80079ee:	b948      	cbnz	r0, 8007a04 <__smakebuf_r+0x44>
 80079f0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80079f4:	059a      	lsls	r2, r3, #22
 80079f6:	d4ef      	bmi.n	80079d8 <__smakebuf_r+0x18>
 80079f8:	f023 0303 	bic.w	r3, r3, #3
 80079fc:	f043 0302 	orr.w	r3, r3, #2
 8007a00:	81a3      	strh	r3, [r4, #12]
 8007a02:	e7e3      	b.n	80079cc <__smakebuf_r+0xc>
 8007a04:	4b0d      	ldr	r3, [pc, #52]	; (8007a3c <__smakebuf_r+0x7c>)
 8007a06:	62b3      	str	r3, [r6, #40]	; 0x28
 8007a08:	89a3      	ldrh	r3, [r4, #12]
 8007a0a:	6020      	str	r0, [r4, #0]
 8007a0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007a10:	81a3      	strh	r3, [r4, #12]
 8007a12:	9b00      	ldr	r3, [sp, #0]
 8007a14:	6163      	str	r3, [r4, #20]
 8007a16:	9b01      	ldr	r3, [sp, #4]
 8007a18:	6120      	str	r0, [r4, #16]
 8007a1a:	b15b      	cbz	r3, 8007a34 <__smakebuf_r+0x74>
 8007a1c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007a20:	4630      	mov	r0, r6
 8007a22:	f000 fc63 	bl	80082ec <_isatty_r>
 8007a26:	b128      	cbz	r0, 8007a34 <__smakebuf_r+0x74>
 8007a28:	89a3      	ldrh	r3, [r4, #12]
 8007a2a:	f023 0303 	bic.w	r3, r3, #3
 8007a2e:	f043 0301 	orr.w	r3, r3, #1
 8007a32:	81a3      	strh	r3, [r4, #12]
 8007a34:	89a0      	ldrh	r0, [r4, #12]
 8007a36:	4305      	orrs	r5, r0
 8007a38:	81a5      	strh	r5, [r4, #12]
 8007a3a:	e7cd      	b.n	80079d8 <__smakebuf_r+0x18>
 8007a3c:	080077cd 	.word	0x080077cd

08007a40 <_free_r>:
 8007a40:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007a42:	2900      	cmp	r1, #0
 8007a44:	d044      	beq.n	8007ad0 <_free_r+0x90>
 8007a46:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007a4a:	9001      	str	r0, [sp, #4]
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	f1a1 0404 	sub.w	r4, r1, #4
 8007a52:	bfb8      	it	lt
 8007a54:	18e4      	addlt	r4, r4, r3
 8007a56:	f000 fc6b 	bl	8008330 <__malloc_lock>
 8007a5a:	4a1e      	ldr	r2, [pc, #120]	; (8007ad4 <_free_r+0x94>)
 8007a5c:	9801      	ldr	r0, [sp, #4]
 8007a5e:	6813      	ldr	r3, [r2, #0]
 8007a60:	b933      	cbnz	r3, 8007a70 <_free_r+0x30>
 8007a62:	6063      	str	r3, [r4, #4]
 8007a64:	6014      	str	r4, [r2, #0]
 8007a66:	b003      	add	sp, #12
 8007a68:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007a6c:	f000 bc66 	b.w	800833c <__malloc_unlock>
 8007a70:	42a3      	cmp	r3, r4
 8007a72:	d908      	bls.n	8007a86 <_free_r+0x46>
 8007a74:	6825      	ldr	r5, [r4, #0]
 8007a76:	1961      	adds	r1, r4, r5
 8007a78:	428b      	cmp	r3, r1
 8007a7a:	bf01      	itttt	eq
 8007a7c:	6819      	ldreq	r1, [r3, #0]
 8007a7e:	685b      	ldreq	r3, [r3, #4]
 8007a80:	1949      	addeq	r1, r1, r5
 8007a82:	6021      	streq	r1, [r4, #0]
 8007a84:	e7ed      	b.n	8007a62 <_free_r+0x22>
 8007a86:	461a      	mov	r2, r3
 8007a88:	685b      	ldr	r3, [r3, #4]
 8007a8a:	b10b      	cbz	r3, 8007a90 <_free_r+0x50>
 8007a8c:	42a3      	cmp	r3, r4
 8007a8e:	d9fa      	bls.n	8007a86 <_free_r+0x46>
 8007a90:	6811      	ldr	r1, [r2, #0]
 8007a92:	1855      	adds	r5, r2, r1
 8007a94:	42a5      	cmp	r5, r4
 8007a96:	d10b      	bne.n	8007ab0 <_free_r+0x70>
 8007a98:	6824      	ldr	r4, [r4, #0]
 8007a9a:	4421      	add	r1, r4
 8007a9c:	1854      	adds	r4, r2, r1
 8007a9e:	42a3      	cmp	r3, r4
 8007aa0:	6011      	str	r1, [r2, #0]
 8007aa2:	d1e0      	bne.n	8007a66 <_free_r+0x26>
 8007aa4:	681c      	ldr	r4, [r3, #0]
 8007aa6:	685b      	ldr	r3, [r3, #4]
 8007aa8:	6053      	str	r3, [r2, #4]
 8007aaa:	4421      	add	r1, r4
 8007aac:	6011      	str	r1, [r2, #0]
 8007aae:	e7da      	b.n	8007a66 <_free_r+0x26>
 8007ab0:	d902      	bls.n	8007ab8 <_free_r+0x78>
 8007ab2:	230c      	movs	r3, #12
 8007ab4:	6003      	str	r3, [r0, #0]
 8007ab6:	e7d6      	b.n	8007a66 <_free_r+0x26>
 8007ab8:	6825      	ldr	r5, [r4, #0]
 8007aba:	1961      	adds	r1, r4, r5
 8007abc:	428b      	cmp	r3, r1
 8007abe:	bf04      	itt	eq
 8007ac0:	6819      	ldreq	r1, [r3, #0]
 8007ac2:	685b      	ldreq	r3, [r3, #4]
 8007ac4:	6063      	str	r3, [r4, #4]
 8007ac6:	bf04      	itt	eq
 8007ac8:	1949      	addeq	r1, r1, r5
 8007aca:	6021      	streq	r1, [r4, #0]
 8007acc:	6054      	str	r4, [r2, #4]
 8007ace:	e7ca      	b.n	8007a66 <_free_r+0x26>
 8007ad0:	b003      	add	sp, #12
 8007ad2:	bd30      	pop	{r4, r5, pc}
 8007ad4:	200054f4 	.word	0x200054f4

08007ad8 <sbrk_aligned>:
 8007ad8:	b570      	push	{r4, r5, r6, lr}
 8007ada:	4e0e      	ldr	r6, [pc, #56]	; (8007b14 <sbrk_aligned+0x3c>)
 8007adc:	460c      	mov	r4, r1
 8007ade:	6831      	ldr	r1, [r6, #0]
 8007ae0:	4605      	mov	r5, r0
 8007ae2:	b911      	cbnz	r1, 8007aea <sbrk_aligned+0x12>
 8007ae4:	f000 fb7a 	bl	80081dc <_sbrk_r>
 8007ae8:	6030      	str	r0, [r6, #0]
 8007aea:	4621      	mov	r1, r4
 8007aec:	4628      	mov	r0, r5
 8007aee:	f000 fb75 	bl	80081dc <_sbrk_r>
 8007af2:	1c43      	adds	r3, r0, #1
 8007af4:	d00a      	beq.n	8007b0c <sbrk_aligned+0x34>
 8007af6:	1cc4      	adds	r4, r0, #3
 8007af8:	f024 0403 	bic.w	r4, r4, #3
 8007afc:	42a0      	cmp	r0, r4
 8007afe:	d007      	beq.n	8007b10 <sbrk_aligned+0x38>
 8007b00:	1a21      	subs	r1, r4, r0
 8007b02:	4628      	mov	r0, r5
 8007b04:	f000 fb6a 	bl	80081dc <_sbrk_r>
 8007b08:	3001      	adds	r0, #1
 8007b0a:	d101      	bne.n	8007b10 <sbrk_aligned+0x38>
 8007b0c:	f04f 34ff 	mov.w	r4, #4294967295
 8007b10:	4620      	mov	r0, r4
 8007b12:	bd70      	pop	{r4, r5, r6, pc}
 8007b14:	200054f8 	.word	0x200054f8

08007b18 <_malloc_r>:
 8007b18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007b1c:	1ccd      	adds	r5, r1, #3
 8007b1e:	f025 0503 	bic.w	r5, r5, #3
 8007b22:	3508      	adds	r5, #8
 8007b24:	2d0c      	cmp	r5, #12
 8007b26:	bf38      	it	cc
 8007b28:	250c      	movcc	r5, #12
 8007b2a:	2d00      	cmp	r5, #0
 8007b2c:	4607      	mov	r7, r0
 8007b2e:	db01      	blt.n	8007b34 <_malloc_r+0x1c>
 8007b30:	42a9      	cmp	r1, r5
 8007b32:	d905      	bls.n	8007b40 <_malloc_r+0x28>
 8007b34:	230c      	movs	r3, #12
 8007b36:	603b      	str	r3, [r7, #0]
 8007b38:	2600      	movs	r6, #0
 8007b3a:	4630      	mov	r0, r6
 8007b3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007b40:	4e2e      	ldr	r6, [pc, #184]	; (8007bfc <_malloc_r+0xe4>)
 8007b42:	f000 fbf5 	bl	8008330 <__malloc_lock>
 8007b46:	6833      	ldr	r3, [r6, #0]
 8007b48:	461c      	mov	r4, r3
 8007b4a:	bb34      	cbnz	r4, 8007b9a <_malloc_r+0x82>
 8007b4c:	4629      	mov	r1, r5
 8007b4e:	4638      	mov	r0, r7
 8007b50:	f7ff ffc2 	bl	8007ad8 <sbrk_aligned>
 8007b54:	1c43      	adds	r3, r0, #1
 8007b56:	4604      	mov	r4, r0
 8007b58:	d14d      	bne.n	8007bf6 <_malloc_r+0xde>
 8007b5a:	6834      	ldr	r4, [r6, #0]
 8007b5c:	4626      	mov	r6, r4
 8007b5e:	2e00      	cmp	r6, #0
 8007b60:	d140      	bne.n	8007be4 <_malloc_r+0xcc>
 8007b62:	6823      	ldr	r3, [r4, #0]
 8007b64:	4631      	mov	r1, r6
 8007b66:	4638      	mov	r0, r7
 8007b68:	eb04 0803 	add.w	r8, r4, r3
 8007b6c:	f000 fb36 	bl	80081dc <_sbrk_r>
 8007b70:	4580      	cmp	r8, r0
 8007b72:	d13a      	bne.n	8007bea <_malloc_r+0xd2>
 8007b74:	6821      	ldr	r1, [r4, #0]
 8007b76:	3503      	adds	r5, #3
 8007b78:	1a6d      	subs	r5, r5, r1
 8007b7a:	f025 0503 	bic.w	r5, r5, #3
 8007b7e:	3508      	adds	r5, #8
 8007b80:	2d0c      	cmp	r5, #12
 8007b82:	bf38      	it	cc
 8007b84:	250c      	movcc	r5, #12
 8007b86:	4629      	mov	r1, r5
 8007b88:	4638      	mov	r0, r7
 8007b8a:	f7ff ffa5 	bl	8007ad8 <sbrk_aligned>
 8007b8e:	3001      	adds	r0, #1
 8007b90:	d02b      	beq.n	8007bea <_malloc_r+0xd2>
 8007b92:	6823      	ldr	r3, [r4, #0]
 8007b94:	442b      	add	r3, r5
 8007b96:	6023      	str	r3, [r4, #0]
 8007b98:	e00e      	b.n	8007bb8 <_malloc_r+0xa0>
 8007b9a:	6822      	ldr	r2, [r4, #0]
 8007b9c:	1b52      	subs	r2, r2, r5
 8007b9e:	d41e      	bmi.n	8007bde <_malloc_r+0xc6>
 8007ba0:	2a0b      	cmp	r2, #11
 8007ba2:	d916      	bls.n	8007bd2 <_malloc_r+0xba>
 8007ba4:	1961      	adds	r1, r4, r5
 8007ba6:	42a3      	cmp	r3, r4
 8007ba8:	6025      	str	r5, [r4, #0]
 8007baa:	bf18      	it	ne
 8007bac:	6059      	strne	r1, [r3, #4]
 8007bae:	6863      	ldr	r3, [r4, #4]
 8007bb0:	bf08      	it	eq
 8007bb2:	6031      	streq	r1, [r6, #0]
 8007bb4:	5162      	str	r2, [r4, r5]
 8007bb6:	604b      	str	r3, [r1, #4]
 8007bb8:	4638      	mov	r0, r7
 8007bba:	f104 060b 	add.w	r6, r4, #11
 8007bbe:	f000 fbbd 	bl	800833c <__malloc_unlock>
 8007bc2:	f026 0607 	bic.w	r6, r6, #7
 8007bc6:	1d23      	adds	r3, r4, #4
 8007bc8:	1af2      	subs	r2, r6, r3
 8007bca:	d0b6      	beq.n	8007b3a <_malloc_r+0x22>
 8007bcc:	1b9b      	subs	r3, r3, r6
 8007bce:	50a3      	str	r3, [r4, r2]
 8007bd0:	e7b3      	b.n	8007b3a <_malloc_r+0x22>
 8007bd2:	6862      	ldr	r2, [r4, #4]
 8007bd4:	42a3      	cmp	r3, r4
 8007bd6:	bf0c      	ite	eq
 8007bd8:	6032      	streq	r2, [r6, #0]
 8007bda:	605a      	strne	r2, [r3, #4]
 8007bdc:	e7ec      	b.n	8007bb8 <_malloc_r+0xa0>
 8007bde:	4623      	mov	r3, r4
 8007be0:	6864      	ldr	r4, [r4, #4]
 8007be2:	e7b2      	b.n	8007b4a <_malloc_r+0x32>
 8007be4:	4634      	mov	r4, r6
 8007be6:	6876      	ldr	r6, [r6, #4]
 8007be8:	e7b9      	b.n	8007b5e <_malloc_r+0x46>
 8007bea:	230c      	movs	r3, #12
 8007bec:	603b      	str	r3, [r7, #0]
 8007bee:	4638      	mov	r0, r7
 8007bf0:	f000 fba4 	bl	800833c <__malloc_unlock>
 8007bf4:	e7a1      	b.n	8007b3a <_malloc_r+0x22>
 8007bf6:	6025      	str	r5, [r4, #0]
 8007bf8:	e7de      	b.n	8007bb8 <_malloc_r+0xa0>
 8007bfa:	bf00      	nop
 8007bfc:	200054f4 	.word	0x200054f4

08007c00 <__sfputc_r>:
 8007c00:	6893      	ldr	r3, [r2, #8]
 8007c02:	3b01      	subs	r3, #1
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	b410      	push	{r4}
 8007c08:	6093      	str	r3, [r2, #8]
 8007c0a:	da08      	bge.n	8007c1e <__sfputc_r+0x1e>
 8007c0c:	6994      	ldr	r4, [r2, #24]
 8007c0e:	42a3      	cmp	r3, r4
 8007c10:	db01      	blt.n	8007c16 <__sfputc_r+0x16>
 8007c12:	290a      	cmp	r1, #10
 8007c14:	d103      	bne.n	8007c1e <__sfputc_r+0x1e>
 8007c16:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007c1a:	f7ff bc31 	b.w	8007480 <__swbuf_r>
 8007c1e:	6813      	ldr	r3, [r2, #0]
 8007c20:	1c58      	adds	r0, r3, #1
 8007c22:	6010      	str	r0, [r2, #0]
 8007c24:	7019      	strb	r1, [r3, #0]
 8007c26:	4608      	mov	r0, r1
 8007c28:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007c2c:	4770      	bx	lr

08007c2e <__sfputs_r>:
 8007c2e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c30:	4606      	mov	r6, r0
 8007c32:	460f      	mov	r7, r1
 8007c34:	4614      	mov	r4, r2
 8007c36:	18d5      	adds	r5, r2, r3
 8007c38:	42ac      	cmp	r4, r5
 8007c3a:	d101      	bne.n	8007c40 <__sfputs_r+0x12>
 8007c3c:	2000      	movs	r0, #0
 8007c3e:	e007      	b.n	8007c50 <__sfputs_r+0x22>
 8007c40:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007c44:	463a      	mov	r2, r7
 8007c46:	4630      	mov	r0, r6
 8007c48:	f7ff ffda 	bl	8007c00 <__sfputc_r>
 8007c4c:	1c43      	adds	r3, r0, #1
 8007c4e:	d1f3      	bne.n	8007c38 <__sfputs_r+0xa>
 8007c50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007c54 <_vfiprintf_r>:
 8007c54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c58:	460d      	mov	r5, r1
 8007c5a:	b09d      	sub	sp, #116	; 0x74
 8007c5c:	4614      	mov	r4, r2
 8007c5e:	4698      	mov	r8, r3
 8007c60:	4606      	mov	r6, r0
 8007c62:	b118      	cbz	r0, 8007c6c <_vfiprintf_r+0x18>
 8007c64:	6983      	ldr	r3, [r0, #24]
 8007c66:	b90b      	cbnz	r3, 8007c6c <_vfiprintf_r+0x18>
 8007c68:	f7ff fde4 	bl	8007834 <__sinit>
 8007c6c:	4b89      	ldr	r3, [pc, #548]	; (8007e94 <_vfiprintf_r+0x240>)
 8007c6e:	429d      	cmp	r5, r3
 8007c70:	d11b      	bne.n	8007caa <_vfiprintf_r+0x56>
 8007c72:	6875      	ldr	r5, [r6, #4]
 8007c74:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007c76:	07d9      	lsls	r1, r3, #31
 8007c78:	d405      	bmi.n	8007c86 <_vfiprintf_r+0x32>
 8007c7a:	89ab      	ldrh	r3, [r5, #12]
 8007c7c:	059a      	lsls	r2, r3, #22
 8007c7e:	d402      	bmi.n	8007c86 <_vfiprintf_r+0x32>
 8007c80:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007c82:	f7ff fe75 	bl	8007970 <__retarget_lock_acquire_recursive>
 8007c86:	89ab      	ldrh	r3, [r5, #12]
 8007c88:	071b      	lsls	r3, r3, #28
 8007c8a:	d501      	bpl.n	8007c90 <_vfiprintf_r+0x3c>
 8007c8c:	692b      	ldr	r3, [r5, #16]
 8007c8e:	b9eb      	cbnz	r3, 8007ccc <_vfiprintf_r+0x78>
 8007c90:	4629      	mov	r1, r5
 8007c92:	4630      	mov	r0, r6
 8007c94:	f7ff fc46 	bl	8007524 <__swsetup_r>
 8007c98:	b1c0      	cbz	r0, 8007ccc <_vfiprintf_r+0x78>
 8007c9a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007c9c:	07dc      	lsls	r4, r3, #31
 8007c9e:	d50e      	bpl.n	8007cbe <_vfiprintf_r+0x6a>
 8007ca0:	f04f 30ff 	mov.w	r0, #4294967295
 8007ca4:	b01d      	add	sp, #116	; 0x74
 8007ca6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007caa:	4b7b      	ldr	r3, [pc, #492]	; (8007e98 <_vfiprintf_r+0x244>)
 8007cac:	429d      	cmp	r5, r3
 8007cae:	d101      	bne.n	8007cb4 <_vfiprintf_r+0x60>
 8007cb0:	68b5      	ldr	r5, [r6, #8]
 8007cb2:	e7df      	b.n	8007c74 <_vfiprintf_r+0x20>
 8007cb4:	4b79      	ldr	r3, [pc, #484]	; (8007e9c <_vfiprintf_r+0x248>)
 8007cb6:	429d      	cmp	r5, r3
 8007cb8:	bf08      	it	eq
 8007cba:	68f5      	ldreq	r5, [r6, #12]
 8007cbc:	e7da      	b.n	8007c74 <_vfiprintf_r+0x20>
 8007cbe:	89ab      	ldrh	r3, [r5, #12]
 8007cc0:	0598      	lsls	r0, r3, #22
 8007cc2:	d4ed      	bmi.n	8007ca0 <_vfiprintf_r+0x4c>
 8007cc4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007cc6:	f7ff fe54 	bl	8007972 <__retarget_lock_release_recursive>
 8007cca:	e7e9      	b.n	8007ca0 <_vfiprintf_r+0x4c>
 8007ccc:	2300      	movs	r3, #0
 8007cce:	9309      	str	r3, [sp, #36]	; 0x24
 8007cd0:	2320      	movs	r3, #32
 8007cd2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007cd6:	f8cd 800c 	str.w	r8, [sp, #12]
 8007cda:	2330      	movs	r3, #48	; 0x30
 8007cdc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007ea0 <_vfiprintf_r+0x24c>
 8007ce0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007ce4:	f04f 0901 	mov.w	r9, #1
 8007ce8:	4623      	mov	r3, r4
 8007cea:	469a      	mov	sl, r3
 8007cec:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007cf0:	b10a      	cbz	r2, 8007cf6 <_vfiprintf_r+0xa2>
 8007cf2:	2a25      	cmp	r2, #37	; 0x25
 8007cf4:	d1f9      	bne.n	8007cea <_vfiprintf_r+0x96>
 8007cf6:	ebba 0b04 	subs.w	fp, sl, r4
 8007cfa:	d00b      	beq.n	8007d14 <_vfiprintf_r+0xc0>
 8007cfc:	465b      	mov	r3, fp
 8007cfe:	4622      	mov	r2, r4
 8007d00:	4629      	mov	r1, r5
 8007d02:	4630      	mov	r0, r6
 8007d04:	f7ff ff93 	bl	8007c2e <__sfputs_r>
 8007d08:	3001      	adds	r0, #1
 8007d0a:	f000 80aa 	beq.w	8007e62 <_vfiprintf_r+0x20e>
 8007d0e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007d10:	445a      	add	r2, fp
 8007d12:	9209      	str	r2, [sp, #36]	; 0x24
 8007d14:	f89a 3000 	ldrb.w	r3, [sl]
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	f000 80a2 	beq.w	8007e62 <_vfiprintf_r+0x20e>
 8007d1e:	2300      	movs	r3, #0
 8007d20:	f04f 32ff 	mov.w	r2, #4294967295
 8007d24:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007d28:	f10a 0a01 	add.w	sl, sl, #1
 8007d2c:	9304      	str	r3, [sp, #16]
 8007d2e:	9307      	str	r3, [sp, #28]
 8007d30:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007d34:	931a      	str	r3, [sp, #104]	; 0x68
 8007d36:	4654      	mov	r4, sl
 8007d38:	2205      	movs	r2, #5
 8007d3a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007d3e:	4858      	ldr	r0, [pc, #352]	; (8007ea0 <_vfiprintf_r+0x24c>)
 8007d40:	f7f8 fa66 	bl	8000210 <memchr>
 8007d44:	9a04      	ldr	r2, [sp, #16]
 8007d46:	b9d8      	cbnz	r0, 8007d80 <_vfiprintf_r+0x12c>
 8007d48:	06d1      	lsls	r1, r2, #27
 8007d4a:	bf44      	itt	mi
 8007d4c:	2320      	movmi	r3, #32
 8007d4e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007d52:	0713      	lsls	r3, r2, #28
 8007d54:	bf44      	itt	mi
 8007d56:	232b      	movmi	r3, #43	; 0x2b
 8007d58:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007d5c:	f89a 3000 	ldrb.w	r3, [sl]
 8007d60:	2b2a      	cmp	r3, #42	; 0x2a
 8007d62:	d015      	beq.n	8007d90 <_vfiprintf_r+0x13c>
 8007d64:	9a07      	ldr	r2, [sp, #28]
 8007d66:	4654      	mov	r4, sl
 8007d68:	2000      	movs	r0, #0
 8007d6a:	f04f 0c0a 	mov.w	ip, #10
 8007d6e:	4621      	mov	r1, r4
 8007d70:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007d74:	3b30      	subs	r3, #48	; 0x30
 8007d76:	2b09      	cmp	r3, #9
 8007d78:	d94e      	bls.n	8007e18 <_vfiprintf_r+0x1c4>
 8007d7a:	b1b0      	cbz	r0, 8007daa <_vfiprintf_r+0x156>
 8007d7c:	9207      	str	r2, [sp, #28]
 8007d7e:	e014      	b.n	8007daa <_vfiprintf_r+0x156>
 8007d80:	eba0 0308 	sub.w	r3, r0, r8
 8007d84:	fa09 f303 	lsl.w	r3, r9, r3
 8007d88:	4313      	orrs	r3, r2
 8007d8a:	9304      	str	r3, [sp, #16]
 8007d8c:	46a2      	mov	sl, r4
 8007d8e:	e7d2      	b.n	8007d36 <_vfiprintf_r+0xe2>
 8007d90:	9b03      	ldr	r3, [sp, #12]
 8007d92:	1d19      	adds	r1, r3, #4
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	9103      	str	r1, [sp, #12]
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	bfbb      	ittet	lt
 8007d9c:	425b      	neglt	r3, r3
 8007d9e:	f042 0202 	orrlt.w	r2, r2, #2
 8007da2:	9307      	strge	r3, [sp, #28]
 8007da4:	9307      	strlt	r3, [sp, #28]
 8007da6:	bfb8      	it	lt
 8007da8:	9204      	strlt	r2, [sp, #16]
 8007daa:	7823      	ldrb	r3, [r4, #0]
 8007dac:	2b2e      	cmp	r3, #46	; 0x2e
 8007dae:	d10c      	bne.n	8007dca <_vfiprintf_r+0x176>
 8007db0:	7863      	ldrb	r3, [r4, #1]
 8007db2:	2b2a      	cmp	r3, #42	; 0x2a
 8007db4:	d135      	bne.n	8007e22 <_vfiprintf_r+0x1ce>
 8007db6:	9b03      	ldr	r3, [sp, #12]
 8007db8:	1d1a      	adds	r2, r3, #4
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	9203      	str	r2, [sp, #12]
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	bfb8      	it	lt
 8007dc2:	f04f 33ff 	movlt.w	r3, #4294967295
 8007dc6:	3402      	adds	r4, #2
 8007dc8:	9305      	str	r3, [sp, #20]
 8007dca:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007eb0 <_vfiprintf_r+0x25c>
 8007dce:	7821      	ldrb	r1, [r4, #0]
 8007dd0:	2203      	movs	r2, #3
 8007dd2:	4650      	mov	r0, sl
 8007dd4:	f7f8 fa1c 	bl	8000210 <memchr>
 8007dd8:	b140      	cbz	r0, 8007dec <_vfiprintf_r+0x198>
 8007dda:	2340      	movs	r3, #64	; 0x40
 8007ddc:	eba0 000a 	sub.w	r0, r0, sl
 8007de0:	fa03 f000 	lsl.w	r0, r3, r0
 8007de4:	9b04      	ldr	r3, [sp, #16]
 8007de6:	4303      	orrs	r3, r0
 8007de8:	3401      	adds	r4, #1
 8007dea:	9304      	str	r3, [sp, #16]
 8007dec:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007df0:	482c      	ldr	r0, [pc, #176]	; (8007ea4 <_vfiprintf_r+0x250>)
 8007df2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007df6:	2206      	movs	r2, #6
 8007df8:	f7f8 fa0a 	bl	8000210 <memchr>
 8007dfc:	2800      	cmp	r0, #0
 8007dfe:	d03f      	beq.n	8007e80 <_vfiprintf_r+0x22c>
 8007e00:	4b29      	ldr	r3, [pc, #164]	; (8007ea8 <_vfiprintf_r+0x254>)
 8007e02:	bb1b      	cbnz	r3, 8007e4c <_vfiprintf_r+0x1f8>
 8007e04:	9b03      	ldr	r3, [sp, #12]
 8007e06:	3307      	adds	r3, #7
 8007e08:	f023 0307 	bic.w	r3, r3, #7
 8007e0c:	3308      	adds	r3, #8
 8007e0e:	9303      	str	r3, [sp, #12]
 8007e10:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e12:	443b      	add	r3, r7
 8007e14:	9309      	str	r3, [sp, #36]	; 0x24
 8007e16:	e767      	b.n	8007ce8 <_vfiprintf_r+0x94>
 8007e18:	fb0c 3202 	mla	r2, ip, r2, r3
 8007e1c:	460c      	mov	r4, r1
 8007e1e:	2001      	movs	r0, #1
 8007e20:	e7a5      	b.n	8007d6e <_vfiprintf_r+0x11a>
 8007e22:	2300      	movs	r3, #0
 8007e24:	3401      	adds	r4, #1
 8007e26:	9305      	str	r3, [sp, #20]
 8007e28:	4619      	mov	r1, r3
 8007e2a:	f04f 0c0a 	mov.w	ip, #10
 8007e2e:	4620      	mov	r0, r4
 8007e30:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007e34:	3a30      	subs	r2, #48	; 0x30
 8007e36:	2a09      	cmp	r2, #9
 8007e38:	d903      	bls.n	8007e42 <_vfiprintf_r+0x1ee>
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d0c5      	beq.n	8007dca <_vfiprintf_r+0x176>
 8007e3e:	9105      	str	r1, [sp, #20]
 8007e40:	e7c3      	b.n	8007dca <_vfiprintf_r+0x176>
 8007e42:	fb0c 2101 	mla	r1, ip, r1, r2
 8007e46:	4604      	mov	r4, r0
 8007e48:	2301      	movs	r3, #1
 8007e4a:	e7f0      	b.n	8007e2e <_vfiprintf_r+0x1da>
 8007e4c:	ab03      	add	r3, sp, #12
 8007e4e:	9300      	str	r3, [sp, #0]
 8007e50:	462a      	mov	r2, r5
 8007e52:	4b16      	ldr	r3, [pc, #88]	; (8007eac <_vfiprintf_r+0x258>)
 8007e54:	a904      	add	r1, sp, #16
 8007e56:	4630      	mov	r0, r6
 8007e58:	f3af 8000 	nop.w
 8007e5c:	4607      	mov	r7, r0
 8007e5e:	1c78      	adds	r0, r7, #1
 8007e60:	d1d6      	bne.n	8007e10 <_vfiprintf_r+0x1bc>
 8007e62:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007e64:	07d9      	lsls	r1, r3, #31
 8007e66:	d405      	bmi.n	8007e74 <_vfiprintf_r+0x220>
 8007e68:	89ab      	ldrh	r3, [r5, #12]
 8007e6a:	059a      	lsls	r2, r3, #22
 8007e6c:	d402      	bmi.n	8007e74 <_vfiprintf_r+0x220>
 8007e6e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007e70:	f7ff fd7f 	bl	8007972 <__retarget_lock_release_recursive>
 8007e74:	89ab      	ldrh	r3, [r5, #12]
 8007e76:	065b      	lsls	r3, r3, #25
 8007e78:	f53f af12 	bmi.w	8007ca0 <_vfiprintf_r+0x4c>
 8007e7c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007e7e:	e711      	b.n	8007ca4 <_vfiprintf_r+0x50>
 8007e80:	ab03      	add	r3, sp, #12
 8007e82:	9300      	str	r3, [sp, #0]
 8007e84:	462a      	mov	r2, r5
 8007e86:	4b09      	ldr	r3, [pc, #36]	; (8007eac <_vfiprintf_r+0x258>)
 8007e88:	a904      	add	r1, sp, #16
 8007e8a:	4630      	mov	r0, r6
 8007e8c:	f000 f880 	bl	8007f90 <_printf_i>
 8007e90:	e7e4      	b.n	8007e5c <_vfiprintf_r+0x208>
 8007e92:	bf00      	nop
 8007e94:	080088e8 	.word	0x080088e8
 8007e98:	08008908 	.word	0x08008908
 8007e9c:	080088c8 	.word	0x080088c8
 8007ea0:	08008928 	.word	0x08008928
 8007ea4:	08008932 	.word	0x08008932
 8007ea8:	00000000 	.word	0x00000000
 8007eac:	08007c2f 	.word	0x08007c2f
 8007eb0:	0800892e 	.word	0x0800892e

08007eb4 <_printf_common>:
 8007eb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007eb8:	4616      	mov	r6, r2
 8007eba:	4699      	mov	r9, r3
 8007ebc:	688a      	ldr	r2, [r1, #8]
 8007ebe:	690b      	ldr	r3, [r1, #16]
 8007ec0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007ec4:	4293      	cmp	r3, r2
 8007ec6:	bfb8      	it	lt
 8007ec8:	4613      	movlt	r3, r2
 8007eca:	6033      	str	r3, [r6, #0]
 8007ecc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007ed0:	4607      	mov	r7, r0
 8007ed2:	460c      	mov	r4, r1
 8007ed4:	b10a      	cbz	r2, 8007eda <_printf_common+0x26>
 8007ed6:	3301      	adds	r3, #1
 8007ed8:	6033      	str	r3, [r6, #0]
 8007eda:	6823      	ldr	r3, [r4, #0]
 8007edc:	0699      	lsls	r1, r3, #26
 8007ede:	bf42      	ittt	mi
 8007ee0:	6833      	ldrmi	r3, [r6, #0]
 8007ee2:	3302      	addmi	r3, #2
 8007ee4:	6033      	strmi	r3, [r6, #0]
 8007ee6:	6825      	ldr	r5, [r4, #0]
 8007ee8:	f015 0506 	ands.w	r5, r5, #6
 8007eec:	d106      	bne.n	8007efc <_printf_common+0x48>
 8007eee:	f104 0a19 	add.w	sl, r4, #25
 8007ef2:	68e3      	ldr	r3, [r4, #12]
 8007ef4:	6832      	ldr	r2, [r6, #0]
 8007ef6:	1a9b      	subs	r3, r3, r2
 8007ef8:	42ab      	cmp	r3, r5
 8007efa:	dc26      	bgt.n	8007f4a <_printf_common+0x96>
 8007efc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007f00:	1e13      	subs	r3, r2, #0
 8007f02:	6822      	ldr	r2, [r4, #0]
 8007f04:	bf18      	it	ne
 8007f06:	2301      	movne	r3, #1
 8007f08:	0692      	lsls	r2, r2, #26
 8007f0a:	d42b      	bmi.n	8007f64 <_printf_common+0xb0>
 8007f0c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007f10:	4649      	mov	r1, r9
 8007f12:	4638      	mov	r0, r7
 8007f14:	47c0      	blx	r8
 8007f16:	3001      	adds	r0, #1
 8007f18:	d01e      	beq.n	8007f58 <_printf_common+0xa4>
 8007f1a:	6823      	ldr	r3, [r4, #0]
 8007f1c:	68e5      	ldr	r5, [r4, #12]
 8007f1e:	6832      	ldr	r2, [r6, #0]
 8007f20:	f003 0306 	and.w	r3, r3, #6
 8007f24:	2b04      	cmp	r3, #4
 8007f26:	bf08      	it	eq
 8007f28:	1aad      	subeq	r5, r5, r2
 8007f2a:	68a3      	ldr	r3, [r4, #8]
 8007f2c:	6922      	ldr	r2, [r4, #16]
 8007f2e:	bf0c      	ite	eq
 8007f30:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007f34:	2500      	movne	r5, #0
 8007f36:	4293      	cmp	r3, r2
 8007f38:	bfc4      	itt	gt
 8007f3a:	1a9b      	subgt	r3, r3, r2
 8007f3c:	18ed      	addgt	r5, r5, r3
 8007f3e:	2600      	movs	r6, #0
 8007f40:	341a      	adds	r4, #26
 8007f42:	42b5      	cmp	r5, r6
 8007f44:	d11a      	bne.n	8007f7c <_printf_common+0xc8>
 8007f46:	2000      	movs	r0, #0
 8007f48:	e008      	b.n	8007f5c <_printf_common+0xa8>
 8007f4a:	2301      	movs	r3, #1
 8007f4c:	4652      	mov	r2, sl
 8007f4e:	4649      	mov	r1, r9
 8007f50:	4638      	mov	r0, r7
 8007f52:	47c0      	blx	r8
 8007f54:	3001      	adds	r0, #1
 8007f56:	d103      	bne.n	8007f60 <_printf_common+0xac>
 8007f58:	f04f 30ff 	mov.w	r0, #4294967295
 8007f5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f60:	3501      	adds	r5, #1
 8007f62:	e7c6      	b.n	8007ef2 <_printf_common+0x3e>
 8007f64:	18e1      	adds	r1, r4, r3
 8007f66:	1c5a      	adds	r2, r3, #1
 8007f68:	2030      	movs	r0, #48	; 0x30
 8007f6a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007f6e:	4422      	add	r2, r4
 8007f70:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007f74:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007f78:	3302      	adds	r3, #2
 8007f7a:	e7c7      	b.n	8007f0c <_printf_common+0x58>
 8007f7c:	2301      	movs	r3, #1
 8007f7e:	4622      	mov	r2, r4
 8007f80:	4649      	mov	r1, r9
 8007f82:	4638      	mov	r0, r7
 8007f84:	47c0      	blx	r8
 8007f86:	3001      	adds	r0, #1
 8007f88:	d0e6      	beq.n	8007f58 <_printf_common+0xa4>
 8007f8a:	3601      	adds	r6, #1
 8007f8c:	e7d9      	b.n	8007f42 <_printf_common+0x8e>
	...

08007f90 <_printf_i>:
 8007f90:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007f94:	7e0f      	ldrb	r7, [r1, #24]
 8007f96:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007f98:	2f78      	cmp	r7, #120	; 0x78
 8007f9a:	4691      	mov	r9, r2
 8007f9c:	4680      	mov	r8, r0
 8007f9e:	460c      	mov	r4, r1
 8007fa0:	469a      	mov	sl, r3
 8007fa2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007fa6:	d807      	bhi.n	8007fb8 <_printf_i+0x28>
 8007fa8:	2f62      	cmp	r7, #98	; 0x62
 8007faa:	d80a      	bhi.n	8007fc2 <_printf_i+0x32>
 8007fac:	2f00      	cmp	r7, #0
 8007fae:	f000 80d8 	beq.w	8008162 <_printf_i+0x1d2>
 8007fb2:	2f58      	cmp	r7, #88	; 0x58
 8007fb4:	f000 80a3 	beq.w	80080fe <_printf_i+0x16e>
 8007fb8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007fbc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007fc0:	e03a      	b.n	8008038 <_printf_i+0xa8>
 8007fc2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007fc6:	2b15      	cmp	r3, #21
 8007fc8:	d8f6      	bhi.n	8007fb8 <_printf_i+0x28>
 8007fca:	a101      	add	r1, pc, #4	; (adr r1, 8007fd0 <_printf_i+0x40>)
 8007fcc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007fd0:	08008029 	.word	0x08008029
 8007fd4:	0800803d 	.word	0x0800803d
 8007fd8:	08007fb9 	.word	0x08007fb9
 8007fdc:	08007fb9 	.word	0x08007fb9
 8007fe0:	08007fb9 	.word	0x08007fb9
 8007fe4:	08007fb9 	.word	0x08007fb9
 8007fe8:	0800803d 	.word	0x0800803d
 8007fec:	08007fb9 	.word	0x08007fb9
 8007ff0:	08007fb9 	.word	0x08007fb9
 8007ff4:	08007fb9 	.word	0x08007fb9
 8007ff8:	08007fb9 	.word	0x08007fb9
 8007ffc:	08008149 	.word	0x08008149
 8008000:	0800806d 	.word	0x0800806d
 8008004:	0800812b 	.word	0x0800812b
 8008008:	08007fb9 	.word	0x08007fb9
 800800c:	08007fb9 	.word	0x08007fb9
 8008010:	0800816b 	.word	0x0800816b
 8008014:	08007fb9 	.word	0x08007fb9
 8008018:	0800806d 	.word	0x0800806d
 800801c:	08007fb9 	.word	0x08007fb9
 8008020:	08007fb9 	.word	0x08007fb9
 8008024:	08008133 	.word	0x08008133
 8008028:	682b      	ldr	r3, [r5, #0]
 800802a:	1d1a      	adds	r2, r3, #4
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	602a      	str	r2, [r5, #0]
 8008030:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008034:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008038:	2301      	movs	r3, #1
 800803a:	e0a3      	b.n	8008184 <_printf_i+0x1f4>
 800803c:	6820      	ldr	r0, [r4, #0]
 800803e:	6829      	ldr	r1, [r5, #0]
 8008040:	0606      	lsls	r6, r0, #24
 8008042:	f101 0304 	add.w	r3, r1, #4
 8008046:	d50a      	bpl.n	800805e <_printf_i+0xce>
 8008048:	680e      	ldr	r6, [r1, #0]
 800804a:	602b      	str	r3, [r5, #0]
 800804c:	2e00      	cmp	r6, #0
 800804e:	da03      	bge.n	8008058 <_printf_i+0xc8>
 8008050:	232d      	movs	r3, #45	; 0x2d
 8008052:	4276      	negs	r6, r6
 8008054:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008058:	485e      	ldr	r0, [pc, #376]	; (80081d4 <_printf_i+0x244>)
 800805a:	230a      	movs	r3, #10
 800805c:	e019      	b.n	8008092 <_printf_i+0x102>
 800805e:	680e      	ldr	r6, [r1, #0]
 8008060:	602b      	str	r3, [r5, #0]
 8008062:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008066:	bf18      	it	ne
 8008068:	b236      	sxthne	r6, r6
 800806a:	e7ef      	b.n	800804c <_printf_i+0xbc>
 800806c:	682b      	ldr	r3, [r5, #0]
 800806e:	6820      	ldr	r0, [r4, #0]
 8008070:	1d19      	adds	r1, r3, #4
 8008072:	6029      	str	r1, [r5, #0]
 8008074:	0601      	lsls	r1, r0, #24
 8008076:	d501      	bpl.n	800807c <_printf_i+0xec>
 8008078:	681e      	ldr	r6, [r3, #0]
 800807a:	e002      	b.n	8008082 <_printf_i+0xf2>
 800807c:	0646      	lsls	r6, r0, #25
 800807e:	d5fb      	bpl.n	8008078 <_printf_i+0xe8>
 8008080:	881e      	ldrh	r6, [r3, #0]
 8008082:	4854      	ldr	r0, [pc, #336]	; (80081d4 <_printf_i+0x244>)
 8008084:	2f6f      	cmp	r7, #111	; 0x6f
 8008086:	bf0c      	ite	eq
 8008088:	2308      	moveq	r3, #8
 800808a:	230a      	movne	r3, #10
 800808c:	2100      	movs	r1, #0
 800808e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008092:	6865      	ldr	r5, [r4, #4]
 8008094:	60a5      	str	r5, [r4, #8]
 8008096:	2d00      	cmp	r5, #0
 8008098:	bfa2      	ittt	ge
 800809a:	6821      	ldrge	r1, [r4, #0]
 800809c:	f021 0104 	bicge.w	r1, r1, #4
 80080a0:	6021      	strge	r1, [r4, #0]
 80080a2:	b90e      	cbnz	r6, 80080a8 <_printf_i+0x118>
 80080a4:	2d00      	cmp	r5, #0
 80080a6:	d04d      	beq.n	8008144 <_printf_i+0x1b4>
 80080a8:	4615      	mov	r5, r2
 80080aa:	fbb6 f1f3 	udiv	r1, r6, r3
 80080ae:	fb03 6711 	mls	r7, r3, r1, r6
 80080b2:	5dc7      	ldrb	r7, [r0, r7]
 80080b4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80080b8:	4637      	mov	r7, r6
 80080ba:	42bb      	cmp	r3, r7
 80080bc:	460e      	mov	r6, r1
 80080be:	d9f4      	bls.n	80080aa <_printf_i+0x11a>
 80080c0:	2b08      	cmp	r3, #8
 80080c2:	d10b      	bne.n	80080dc <_printf_i+0x14c>
 80080c4:	6823      	ldr	r3, [r4, #0]
 80080c6:	07de      	lsls	r6, r3, #31
 80080c8:	d508      	bpl.n	80080dc <_printf_i+0x14c>
 80080ca:	6923      	ldr	r3, [r4, #16]
 80080cc:	6861      	ldr	r1, [r4, #4]
 80080ce:	4299      	cmp	r1, r3
 80080d0:	bfde      	ittt	le
 80080d2:	2330      	movle	r3, #48	; 0x30
 80080d4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80080d8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80080dc:	1b52      	subs	r2, r2, r5
 80080de:	6122      	str	r2, [r4, #16]
 80080e0:	f8cd a000 	str.w	sl, [sp]
 80080e4:	464b      	mov	r3, r9
 80080e6:	aa03      	add	r2, sp, #12
 80080e8:	4621      	mov	r1, r4
 80080ea:	4640      	mov	r0, r8
 80080ec:	f7ff fee2 	bl	8007eb4 <_printf_common>
 80080f0:	3001      	adds	r0, #1
 80080f2:	d14c      	bne.n	800818e <_printf_i+0x1fe>
 80080f4:	f04f 30ff 	mov.w	r0, #4294967295
 80080f8:	b004      	add	sp, #16
 80080fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80080fe:	4835      	ldr	r0, [pc, #212]	; (80081d4 <_printf_i+0x244>)
 8008100:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008104:	6829      	ldr	r1, [r5, #0]
 8008106:	6823      	ldr	r3, [r4, #0]
 8008108:	f851 6b04 	ldr.w	r6, [r1], #4
 800810c:	6029      	str	r1, [r5, #0]
 800810e:	061d      	lsls	r5, r3, #24
 8008110:	d514      	bpl.n	800813c <_printf_i+0x1ac>
 8008112:	07df      	lsls	r7, r3, #31
 8008114:	bf44      	itt	mi
 8008116:	f043 0320 	orrmi.w	r3, r3, #32
 800811a:	6023      	strmi	r3, [r4, #0]
 800811c:	b91e      	cbnz	r6, 8008126 <_printf_i+0x196>
 800811e:	6823      	ldr	r3, [r4, #0]
 8008120:	f023 0320 	bic.w	r3, r3, #32
 8008124:	6023      	str	r3, [r4, #0]
 8008126:	2310      	movs	r3, #16
 8008128:	e7b0      	b.n	800808c <_printf_i+0xfc>
 800812a:	6823      	ldr	r3, [r4, #0]
 800812c:	f043 0320 	orr.w	r3, r3, #32
 8008130:	6023      	str	r3, [r4, #0]
 8008132:	2378      	movs	r3, #120	; 0x78
 8008134:	4828      	ldr	r0, [pc, #160]	; (80081d8 <_printf_i+0x248>)
 8008136:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800813a:	e7e3      	b.n	8008104 <_printf_i+0x174>
 800813c:	0659      	lsls	r1, r3, #25
 800813e:	bf48      	it	mi
 8008140:	b2b6      	uxthmi	r6, r6
 8008142:	e7e6      	b.n	8008112 <_printf_i+0x182>
 8008144:	4615      	mov	r5, r2
 8008146:	e7bb      	b.n	80080c0 <_printf_i+0x130>
 8008148:	682b      	ldr	r3, [r5, #0]
 800814a:	6826      	ldr	r6, [r4, #0]
 800814c:	6961      	ldr	r1, [r4, #20]
 800814e:	1d18      	adds	r0, r3, #4
 8008150:	6028      	str	r0, [r5, #0]
 8008152:	0635      	lsls	r5, r6, #24
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	d501      	bpl.n	800815c <_printf_i+0x1cc>
 8008158:	6019      	str	r1, [r3, #0]
 800815a:	e002      	b.n	8008162 <_printf_i+0x1d2>
 800815c:	0670      	lsls	r0, r6, #25
 800815e:	d5fb      	bpl.n	8008158 <_printf_i+0x1c8>
 8008160:	8019      	strh	r1, [r3, #0]
 8008162:	2300      	movs	r3, #0
 8008164:	6123      	str	r3, [r4, #16]
 8008166:	4615      	mov	r5, r2
 8008168:	e7ba      	b.n	80080e0 <_printf_i+0x150>
 800816a:	682b      	ldr	r3, [r5, #0]
 800816c:	1d1a      	adds	r2, r3, #4
 800816e:	602a      	str	r2, [r5, #0]
 8008170:	681d      	ldr	r5, [r3, #0]
 8008172:	6862      	ldr	r2, [r4, #4]
 8008174:	2100      	movs	r1, #0
 8008176:	4628      	mov	r0, r5
 8008178:	f7f8 f84a 	bl	8000210 <memchr>
 800817c:	b108      	cbz	r0, 8008182 <_printf_i+0x1f2>
 800817e:	1b40      	subs	r0, r0, r5
 8008180:	6060      	str	r0, [r4, #4]
 8008182:	6863      	ldr	r3, [r4, #4]
 8008184:	6123      	str	r3, [r4, #16]
 8008186:	2300      	movs	r3, #0
 8008188:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800818c:	e7a8      	b.n	80080e0 <_printf_i+0x150>
 800818e:	6923      	ldr	r3, [r4, #16]
 8008190:	462a      	mov	r2, r5
 8008192:	4649      	mov	r1, r9
 8008194:	4640      	mov	r0, r8
 8008196:	47d0      	blx	sl
 8008198:	3001      	adds	r0, #1
 800819a:	d0ab      	beq.n	80080f4 <_printf_i+0x164>
 800819c:	6823      	ldr	r3, [r4, #0]
 800819e:	079b      	lsls	r3, r3, #30
 80081a0:	d413      	bmi.n	80081ca <_printf_i+0x23a>
 80081a2:	68e0      	ldr	r0, [r4, #12]
 80081a4:	9b03      	ldr	r3, [sp, #12]
 80081a6:	4298      	cmp	r0, r3
 80081a8:	bfb8      	it	lt
 80081aa:	4618      	movlt	r0, r3
 80081ac:	e7a4      	b.n	80080f8 <_printf_i+0x168>
 80081ae:	2301      	movs	r3, #1
 80081b0:	4632      	mov	r2, r6
 80081b2:	4649      	mov	r1, r9
 80081b4:	4640      	mov	r0, r8
 80081b6:	47d0      	blx	sl
 80081b8:	3001      	adds	r0, #1
 80081ba:	d09b      	beq.n	80080f4 <_printf_i+0x164>
 80081bc:	3501      	adds	r5, #1
 80081be:	68e3      	ldr	r3, [r4, #12]
 80081c0:	9903      	ldr	r1, [sp, #12]
 80081c2:	1a5b      	subs	r3, r3, r1
 80081c4:	42ab      	cmp	r3, r5
 80081c6:	dcf2      	bgt.n	80081ae <_printf_i+0x21e>
 80081c8:	e7eb      	b.n	80081a2 <_printf_i+0x212>
 80081ca:	2500      	movs	r5, #0
 80081cc:	f104 0619 	add.w	r6, r4, #25
 80081d0:	e7f5      	b.n	80081be <_printf_i+0x22e>
 80081d2:	bf00      	nop
 80081d4:	08008939 	.word	0x08008939
 80081d8:	0800894a 	.word	0x0800894a

080081dc <_sbrk_r>:
 80081dc:	b538      	push	{r3, r4, r5, lr}
 80081de:	4d06      	ldr	r5, [pc, #24]	; (80081f8 <_sbrk_r+0x1c>)
 80081e0:	2300      	movs	r3, #0
 80081e2:	4604      	mov	r4, r0
 80081e4:	4608      	mov	r0, r1
 80081e6:	602b      	str	r3, [r5, #0]
 80081e8:	f7fa fa6c 	bl	80026c4 <_sbrk>
 80081ec:	1c43      	adds	r3, r0, #1
 80081ee:	d102      	bne.n	80081f6 <_sbrk_r+0x1a>
 80081f0:	682b      	ldr	r3, [r5, #0]
 80081f2:	b103      	cbz	r3, 80081f6 <_sbrk_r+0x1a>
 80081f4:	6023      	str	r3, [r4, #0]
 80081f6:	bd38      	pop	{r3, r4, r5, pc}
 80081f8:	200054fc 	.word	0x200054fc

080081fc <__sread>:
 80081fc:	b510      	push	{r4, lr}
 80081fe:	460c      	mov	r4, r1
 8008200:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008204:	f000 f8a0 	bl	8008348 <_read_r>
 8008208:	2800      	cmp	r0, #0
 800820a:	bfab      	itete	ge
 800820c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800820e:	89a3      	ldrhlt	r3, [r4, #12]
 8008210:	181b      	addge	r3, r3, r0
 8008212:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008216:	bfac      	ite	ge
 8008218:	6563      	strge	r3, [r4, #84]	; 0x54
 800821a:	81a3      	strhlt	r3, [r4, #12]
 800821c:	bd10      	pop	{r4, pc}

0800821e <__swrite>:
 800821e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008222:	461f      	mov	r7, r3
 8008224:	898b      	ldrh	r3, [r1, #12]
 8008226:	05db      	lsls	r3, r3, #23
 8008228:	4605      	mov	r5, r0
 800822a:	460c      	mov	r4, r1
 800822c:	4616      	mov	r6, r2
 800822e:	d505      	bpl.n	800823c <__swrite+0x1e>
 8008230:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008234:	2302      	movs	r3, #2
 8008236:	2200      	movs	r2, #0
 8008238:	f000 f868 	bl	800830c <_lseek_r>
 800823c:	89a3      	ldrh	r3, [r4, #12]
 800823e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008242:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008246:	81a3      	strh	r3, [r4, #12]
 8008248:	4632      	mov	r2, r6
 800824a:	463b      	mov	r3, r7
 800824c:	4628      	mov	r0, r5
 800824e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008252:	f000 b817 	b.w	8008284 <_write_r>

08008256 <__sseek>:
 8008256:	b510      	push	{r4, lr}
 8008258:	460c      	mov	r4, r1
 800825a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800825e:	f000 f855 	bl	800830c <_lseek_r>
 8008262:	1c43      	adds	r3, r0, #1
 8008264:	89a3      	ldrh	r3, [r4, #12]
 8008266:	bf15      	itete	ne
 8008268:	6560      	strne	r0, [r4, #84]	; 0x54
 800826a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800826e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008272:	81a3      	strheq	r3, [r4, #12]
 8008274:	bf18      	it	ne
 8008276:	81a3      	strhne	r3, [r4, #12]
 8008278:	bd10      	pop	{r4, pc}

0800827a <__sclose>:
 800827a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800827e:	f000 b813 	b.w	80082a8 <_close_r>
	...

08008284 <_write_r>:
 8008284:	b538      	push	{r3, r4, r5, lr}
 8008286:	4d07      	ldr	r5, [pc, #28]	; (80082a4 <_write_r+0x20>)
 8008288:	4604      	mov	r4, r0
 800828a:	4608      	mov	r0, r1
 800828c:	4611      	mov	r1, r2
 800828e:	2200      	movs	r2, #0
 8008290:	602a      	str	r2, [r5, #0]
 8008292:	461a      	mov	r2, r3
 8008294:	f7f9 fcfc 	bl	8001c90 <_write>
 8008298:	1c43      	adds	r3, r0, #1
 800829a:	d102      	bne.n	80082a2 <_write_r+0x1e>
 800829c:	682b      	ldr	r3, [r5, #0]
 800829e:	b103      	cbz	r3, 80082a2 <_write_r+0x1e>
 80082a0:	6023      	str	r3, [r4, #0]
 80082a2:	bd38      	pop	{r3, r4, r5, pc}
 80082a4:	200054fc 	.word	0x200054fc

080082a8 <_close_r>:
 80082a8:	b538      	push	{r3, r4, r5, lr}
 80082aa:	4d06      	ldr	r5, [pc, #24]	; (80082c4 <_close_r+0x1c>)
 80082ac:	2300      	movs	r3, #0
 80082ae:	4604      	mov	r4, r0
 80082b0:	4608      	mov	r0, r1
 80082b2:	602b      	str	r3, [r5, #0]
 80082b4:	f7fa f9d2 	bl	800265c <_close>
 80082b8:	1c43      	adds	r3, r0, #1
 80082ba:	d102      	bne.n	80082c2 <_close_r+0x1a>
 80082bc:	682b      	ldr	r3, [r5, #0]
 80082be:	b103      	cbz	r3, 80082c2 <_close_r+0x1a>
 80082c0:	6023      	str	r3, [r4, #0]
 80082c2:	bd38      	pop	{r3, r4, r5, pc}
 80082c4:	200054fc 	.word	0x200054fc

080082c8 <_fstat_r>:
 80082c8:	b538      	push	{r3, r4, r5, lr}
 80082ca:	4d07      	ldr	r5, [pc, #28]	; (80082e8 <_fstat_r+0x20>)
 80082cc:	2300      	movs	r3, #0
 80082ce:	4604      	mov	r4, r0
 80082d0:	4608      	mov	r0, r1
 80082d2:	4611      	mov	r1, r2
 80082d4:	602b      	str	r3, [r5, #0]
 80082d6:	f7fa f9cd 	bl	8002674 <_fstat>
 80082da:	1c43      	adds	r3, r0, #1
 80082dc:	d102      	bne.n	80082e4 <_fstat_r+0x1c>
 80082de:	682b      	ldr	r3, [r5, #0]
 80082e0:	b103      	cbz	r3, 80082e4 <_fstat_r+0x1c>
 80082e2:	6023      	str	r3, [r4, #0]
 80082e4:	bd38      	pop	{r3, r4, r5, pc}
 80082e6:	bf00      	nop
 80082e8:	200054fc 	.word	0x200054fc

080082ec <_isatty_r>:
 80082ec:	b538      	push	{r3, r4, r5, lr}
 80082ee:	4d06      	ldr	r5, [pc, #24]	; (8008308 <_isatty_r+0x1c>)
 80082f0:	2300      	movs	r3, #0
 80082f2:	4604      	mov	r4, r0
 80082f4:	4608      	mov	r0, r1
 80082f6:	602b      	str	r3, [r5, #0]
 80082f8:	f7fa f9cc 	bl	8002694 <_isatty>
 80082fc:	1c43      	adds	r3, r0, #1
 80082fe:	d102      	bne.n	8008306 <_isatty_r+0x1a>
 8008300:	682b      	ldr	r3, [r5, #0]
 8008302:	b103      	cbz	r3, 8008306 <_isatty_r+0x1a>
 8008304:	6023      	str	r3, [r4, #0]
 8008306:	bd38      	pop	{r3, r4, r5, pc}
 8008308:	200054fc 	.word	0x200054fc

0800830c <_lseek_r>:
 800830c:	b538      	push	{r3, r4, r5, lr}
 800830e:	4d07      	ldr	r5, [pc, #28]	; (800832c <_lseek_r+0x20>)
 8008310:	4604      	mov	r4, r0
 8008312:	4608      	mov	r0, r1
 8008314:	4611      	mov	r1, r2
 8008316:	2200      	movs	r2, #0
 8008318:	602a      	str	r2, [r5, #0]
 800831a:	461a      	mov	r2, r3
 800831c:	f7fa f9c5 	bl	80026aa <_lseek>
 8008320:	1c43      	adds	r3, r0, #1
 8008322:	d102      	bne.n	800832a <_lseek_r+0x1e>
 8008324:	682b      	ldr	r3, [r5, #0]
 8008326:	b103      	cbz	r3, 800832a <_lseek_r+0x1e>
 8008328:	6023      	str	r3, [r4, #0]
 800832a:	bd38      	pop	{r3, r4, r5, pc}
 800832c:	200054fc 	.word	0x200054fc

08008330 <__malloc_lock>:
 8008330:	4801      	ldr	r0, [pc, #4]	; (8008338 <__malloc_lock+0x8>)
 8008332:	f7ff bb1d 	b.w	8007970 <__retarget_lock_acquire_recursive>
 8008336:	bf00      	nop
 8008338:	200054f0 	.word	0x200054f0

0800833c <__malloc_unlock>:
 800833c:	4801      	ldr	r0, [pc, #4]	; (8008344 <__malloc_unlock+0x8>)
 800833e:	f7ff bb18 	b.w	8007972 <__retarget_lock_release_recursive>
 8008342:	bf00      	nop
 8008344:	200054f0 	.word	0x200054f0

08008348 <_read_r>:
 8008348:	b538      	push	{r3, r4, r5, lr}
 800834a:	4d07      	ldr	r5, [pc, #28]	; (8008368 <_read_r+0x20>)
 800834c:	4604      	mov	r4, r0
 800834e:	4608      	mov	r0, r1
 8008350:	4611      	mov	r1, r2
 8008352:	2200      	movs	r2, #0
 8008354:	602a      	str	r2, [r5, #0]
 8008356:	461a      	mov	r2, r3
 8008358:	f7fa f963 	bl	8002622 <_read>
 800835c:	1c43      	adds	r3, r0, #1
 800835e:	d102      	bne.n	8008366 <_read_r+0x1e>
 8008360:	682b      	ldr	r3, [r5, #0]
 8008362:	b103      	cbz	r3, 8008366 <_read_r+0x1e>
 8008364:	6023      	str	r3, [r4, #0]
 8008366:	bd38      	pop	{r3, r4, r5, pc}
 8008368:	200054fc 	.word	0x200054fc

0800836c <_init>:
 800836c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800836e:	bf00      	nop
 8008370:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008372:	bc08      	pop	{r3}
 8008374:	469e      	mov	lr, r3
 8008376:	4770      	bx	lr

08008378 <_fini>:
 8008378:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800837a:	bf00      	nop
 800837c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800837e:	bc08      	pop	{r3}
 8008380:	469e      	mov	lr, r3
 8008382:	4770      	bx	lr
