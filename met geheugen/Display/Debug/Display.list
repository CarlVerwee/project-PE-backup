
Display.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006a70  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003f8  08006c40  08006c40  00016c40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007038  08007038  00024f10  2**0
                  CONTENTS
  4 .ARM          00000008  08007038  08007038  00017038  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007040  08007040  00024f10  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007040  08007040  00017040  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007044  08007044  00017044  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00004f10  20000000  08007048  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000020c  20004f10  0800bf58  00024f10  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000511c  0800bf58  0002511c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00024f10  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016ac4  00000000  00000000  00024f40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002b42  00000000  00000000  0003ba04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001388  00000000  00000000  0003e548  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001260  00000000  00000000  0003f8d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000281ed  00000000  00000000  00040b30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000180c7  00000000  00000000  00068d1d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f5e5e  00000000  00000000  00080de4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00176c42  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005a94  00000000  00000000  00176c94  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20004f10 	.word	0x20004f10
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08006c28 	.word	0x08006c28

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20004f14 	.word	0x20004f14
 800020c:	08006c28 	.word	0x08006c28

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b974 	b.w	80005b0 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468e      	mov	lr, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14d      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4694      	mov	ip, r2
 80002f2:	d969      	bls.n	80003c8 <__udivmoddi4+0xe8>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b152      	cbz	r2, 8000310 <__udivmoddi4+0x30>
 80002fa:	fa01 f302 	lsl.w	r3, r1, r2
 80002fe:	f1c2 0120 	rsb	r1, r2, #32
 8000302:	fa20 f101 	lsr.w	r1, r0, r1
 8000306:	fa0c fc02 	lsl.w	ip, ip, r2
 800030a:	ea41 0e03 	orr.w	lr, r1, r3
 800030e:	4094      	lsls	r4, r2
 8000310:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000314:	0c21      	lsrs	r1, r4, #16
 8000316:	fbbe f6f8 	udiv	r6, lr, r8
 800031a:	fa1f f78c 	uxth.w	r7, ip
 800031e:	fb08 e316 	mls	r3, r8, r6, lr
 8000322:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000326:	fb06 f107 	mul.w	r1, r6, r7
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f106 30ff 	add.w	r0, r6, #4294967295
 8000336:	f080 811f 	bcs.w	8000578 <__udivmoddi4+0x298>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 811c 	bls.w	8000578 <__udivmoddi4+0x298>
 8000340:	3e02      	subs	r6, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a5b      	subs	r3, r3, r1
 8000346:	b2a4      	uxth	r4, r4
 8000348:	fbb3 f0f8 	udiv	r0, r3, r8
 800034c:	fb08 3310 	mls	r3, r8, r0, r3
 8000350:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000354:	fb00 f707 	mul.w	r7, r0, r7
 8000358:	42a7      	cmp	r7, r4
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x92>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f100 33ff 	add.w	r3, r0, #4294967295
 8000364:	f080 810a 	bcs.w	800057c <__udivmoddi4+0x29c>
 8000368:	42a7      	cmp	r7, r4
 800036a:	f240 8107 	bls.w	800057c <__udivmoddi4+0x29c>
 800036e:	4464      	add	r4, ip
 8000370:	3802      	subs	r0, #2
 8000372:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000376:	1be4      	subs	r4, r4, r7
 8000378:	2600      	movs	r6, #0
 800037a:	b11d      	cbz	r5, 8000384 <__udivmoddi4+0xa4>
 800037c:	40d4      	lsrs	r4, r2
 800037e:	2300      	movs	r3, #0
 8000380:	e9c5 4300 	strd	r4, r3, [r5]
 8000384:	4631      	mov	r1, r6
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d909      	bls.n	80003a2 <__udivmoddi4+0xc2>
 800038e:	2d00      	cmp	r5, #0
 8000390:	f000 80ef 	beq.w	8000572 <__udivmoddi4+0x292>
 8000394:	2600      	movs	r6, #0
 8000396:	e9c5 0100 	strd	r0, r1, [r5]
 800039a:	4630      	mov	r0, r6
 800039c:	4631      	mov	r1, r6
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	fab3 f683 	clz	r6, r3
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d14a      	bne.n	8000440 <__udivmoddi4+0x160>
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d302      	bcc.n	80003b4 <__udivmoddi4+0xd4>
 80003ae:	4282      	cmp	r2, r0
 80003b0:	f200 80f9 	bhi.w	80005a6 <__udivmoddi4+0x2c6>
 80003b4:	1a84      	subs	r4, r0, r2
 80003b6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ba:	2001      	movs	r0, #1
 80003bc:	469e      	mov	lr, r3
 80003be:	2d00      	cmp	r5, #0
 80003c0:	d0e0      	beq.n	8000384 <__udivmoddi4+0xa4>
 80003c2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003c6:	e7dd      	b.n	8000384 <__udivmoddi4+0xa4>
 80003c8:	b902      	cbnz	r2, 80003cc <__udivmoddi4+0xec>
 80003ca:	deff      	udf	#255	; 0xff
 80003cc:	fab2 f282 	clz	r2, r2
 80003d0:	2a00      	cmp	r2, #0
 80003d2:	f040 8092 	bne.w	80004fa <__udivmoddi4+0x21a>
 80003d6:	eba1 010c 	sub.w	r1, r1, ip
 80003da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003de:	fa1f fe8c 	uxth.w	lr, ip
 80003e2:	2601      	movs	r6, #1
 80003e4:	0c20      	lsrs	r0, r4, #16
 80003e6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ea:	fb07 1113 	mls	r1, r7, r3, r1
 80003ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f2:	fb0e f003 	mul.w	r0, lr, r3
 80003f6:	4288      	cmp	r0, r1
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x12c>
 80003fa:	eb1c 0101 	adds.w	r1, ip, r1
 80003fe:	f103 38ff 	add.w	r8, r3, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x12a>
 8000404:	4288      	cmp	r0, r1
 8000406:	f200 80cb 	bhi.w	80005a0 <__udivmoddi4+0x2c0>
 800040a:	4643      	mov	r3, r8
 800040c:	1a09      	subs	r1, r1, r0
 800040e:	b2a4      	uxth	r4, r4
 8000410:	fbb1 f0f7 	udiv	r0, r1, r7
 8000414:	fb07 1110 	mls	r1, r7, r0, r1
 8000418:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800041c:	fb0e fe00 	mul.w	lr, lr, r0
 8000420:	45a6      	cmp	lr, r4
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x156>
 8000424:	eb1c 0404 	adds.w	r4, ip, r4
 8000428:	f100 31ff 	add.w	r1, r0, #4294967295
 800042c:	d202      	bcs.n	8000434 <__udivmoddi4+0x154>
 800042e:	45a6      	cmp	lr, r4
 8000430:	f200 80bb 	bhi.w	80005aa <__udivmoddi4+0x2ca>
 8000434:	4608      	mov	r0, r1
 8000436:	eba4 040e 	sub.w	r4, r4, lr
 800043a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800043e:	e79c      	b.n	800037a <__udivmoddi4+0x9a>
 8000440:	f1c6 0720 	rsb	r7, r6, #32
 8000444:	40b3      	lsls	r3, r6
 8000446:	fa22 fc07 	lsr.w	ip, r2, r7
 800044a:	ea4c 0c03 	orr.w	ip, ip, r3
 800044e:	fa20 f407 	lsr.w	r4, r0, r7
 8000452:	fa01 f306 	lsl.w	r3, r1, r6
 8000456:	431c      	orrs	r4, r3
 8000458:	40f9      	lsrs	r1, r7
 800045a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800045e:	fa00 f306 	lsl.w	r3, r0, r6
 8000462:	fbb1 f8f9 	udiv	r8, r1, r9
 8000466:	0c20      	lsrs	r0, r4, #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fb09 1118 	mls	r1, r9, r8, r1
 8000470:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000474:	fb08 f00e 	mul.w	r0, r8, lr
 8000478:	4288      	cmp	r0, r1
 800047a:	fa02 f206 	lsl.w	r2, r2, r6
 800047e:	d90b      	bls.n	8000498 <__udivmoddi4+0x1b8>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f108 3aff 	add.w	sl, r8, #4294967295
 8000488:	f080 8088 	bcs.w	800059c <__udivmoddi4+0x2bc>
 800048c:	4288      	cmp	r0, r1
 800048e:	f240 8085 	bls.w	800059c <__udivmoddi4+0x2bc>
 8000492:	f1a8 0802 	sub.w	r8, r8, #2
 8000496:	4461      	add	r1, ip
 8000498:	1a09      	subs	r1, r1, r0
 800049a:	b2a4      	uxth	r4, r4
 800049c:	fbb1 f0f9 	udiv	r0, r1, r9
 80004a0:	fb09 1110 	mls	r1, r9, r0, r1
 80004a4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ac:	458e      	cmp	lr, r1
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x1e2>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004b8:	d26c      	bcs.n	8000594 <__udivmoddi4+0x2b4>
 80004ba:	458e      	cmp	lr, r1
 80004bc:	d96a      	bls.n	8000594 <__udivmoddi4+0x2b4>
 80004be:	3802      	subs	r0, #2
 80004c0:	4461      	add	r1, ip
 80004c2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004c6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ca:	eba1 010e 	sub.w	r1, r1, lr
 80004ce:	42a1      	cmp	r1, r4
 80004d0:	46c8      	mov	r8, r9
 80004d2:	46a6      	mov	lr, r4
 80004d4:	d356      	bcc.n	8000584 <__udivmoddi4+0x2a4>
 80004d6:	d053      	beq.n	8000580 <__udivmoddi4+0x2a0>
 80004d8:	b15d      	cbz	r5, 80004f2 <__udivmoddi4+0x212>
 80004da:	ebb3 0208 	subs.w	r2, r3, r8
 80004de:	eb61 010e 	sbc.w	r1, r1, lr
 80004e2:	fa01 f707 	lsl.w	r7, r1, r7
 80004e6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ea:	40f1      	lsrs	r1, r6
 80004ec:	431f      	orrs	r7, r3
 80004ee:	e9c5 7100 	strd	r7, r1, [r5]
 80004f2:	2600      	movs	r6, #0
 80004f4:	4631      	mov	r1, r6
 80004f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004fa:	f1c2 0320 	rsb	r3, r2, #32
 80004fe:	40d8      	lsrs	r0, r3
 8000500:	fa0c fc02 	lsl.w	ip, ip, r2
 8000504:	fa21 f303 	lsr.w	r3, r1, r3
 8000508:	4091      	lsls	r1, r2
 800050a:	4301      	orrs	r1, r0
 800050c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000510:	fa1f fe8c 	uxth.w	lr, ip
 8000514:	fbb3 f0f7 	udiv	r0, r3, r7
 8000518:	fb07 3610 	mls	r6, r7, r0, r3
 800051c:	0c0b      	lsrs	r3, r1, #16
 800051e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000522:	fb00 f60e 	mul.w	r6, r0, lr
 8000526:	429e      	cmp	r6, r3
 8000528:	fa04 f402 	lsl.w	r4, r4, r2
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x260>
 800052e:	eb1c 0303 	adds.w	r3, ip, r3
 8000532:	f100 38ff 	add.w	r8, r0, #4294967295
 8000536:	d22f      	bcs.n	8000598 <__udivmoddi4+0x2b8>
 8000538:	429e      	cmp	r6, r3
 800053a:	d92d      	bls.n	8000598 <__udivmoddi4+0x2b8>
 800053c:	3802      	subs	r0, #2
 800053e:	4463      	add	r3, ip
 8000540:	1b9b      	subs	r3, r3, r6
 8000542:	b289      	uxth	r1, r1
 8000544:	fbb3 f6f7 	udiv	r6, r3, r7
 8000548:	fb07 3316 	mls	r3, r7, r6, r3
 800054c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000550:	fb06 f30e 	mul.w	r3, r6, lr
 8000554:	428b      	cmp	r3, r1
 8000556:	d908      	bls.n	800056a <__udivmoddi4+0x28a>
 8000558:	eb1c 0101 	adds.w	r1, ip, r1
 800055c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000560:	d216      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000562:	428b      	cmp	r3, r1
 8000564:	d914      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000566:	3e02      	subs	r6, #2
 8000568:	4461      	add	r1, ip
 800056a:	1ac9      	subs	r1, r1, r3
 800056c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000570:	e738      	b.n	80003e4 <__udivmoddi4+0x104>
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e705      	b.n	8000384 <__udivmoddi4+0xa4>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e3      	b.n	8000344 <__udivmoddi4+0x64>
 800057c:	4618      	mov	r0, r3
 800057e:	e6f8      	b.n	8000372 <__udivmoddi4+0x92>
 8000580:	454b      	cmp	r3, r9
 8000582:	d2a9      	bcs.n	80004d8 <__udivmoddi4+0x1f8>
 8000584:	ebb9 0802 	subs.w	r8, r9, r2
 8000588:	eb64 0e0c 	sbc.w	lr, r4, ip
 800058c:	3801      	subs	r0, #1
 800058e:	e7a3      	b.n	80004d8 <__udivmoddi4+0x1f8>
 8000590:	4646      	mov	r6, r8
 8000592:	e7ea      	b.n	800056a <__udivmoddi4+0x28a>
 8000594:	4620      	mov	r0, r4
 8000596:	e794      	b.n	80004c2 <__udivmoddi4+0x1e2>
 8000598:	4640      	mov	r0, r8
 800059a:	e7d1      	b.n	8000540 <__udivmoddi4+0x260>
 800059c:	46d0      	mov	r8, sl
 800059e:	e77b      	b.n	8000498 <__udivmoddi4+0x1b8>
 80005a0:	3b02      	subs	r3, #2
 80005a2:	4461      	add	r1, ip
 80005a4:	e732      	b.n	800040c <__udivmoddi4+0x12c>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e709      	b.n	80003be <__udivmoddi4+0xde>
 80005aa:	4464      	add	r4, ip
 80005ac:	3802      	subs	r0, #2
 80005ae:	e742      	b.n	8000436 <__udivmoddi4+0x156>

080005b0 <__aeabi_idiv0>:
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop

080005b4 <Starting>:
uint8_t NoSignal = 1;
uint8_t lengte_signaal_gevonden = 0;
uint16_t lengte_signaal[]= {1, 2, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0, 0};
uint16_t tijd[]={1,2,3,4,5,6,7,547,123,456,8,4};
void Starting()
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	af00      	add	r7, sp, #0
	  printf("\r\n-----------------------------------------------------------------------\r\n");
 80005b8:	480e      	ldr	r0, [pc, #56]	; (80005f4 <Starting+0x40>)
 80005ba:	f005 fbb7 	bl	8005d2c <puts>
	  printf("  ######  ########    ###    ########  ######## #### ##    ##  ######\r\n");
 80005be:	480e      	ldr	r0, [pc, #56]	; (80005f8 <Starting+0x44>)
 80005c0:	f005 fbb4 	bl	8005d2c <puts>
	  printf(" ##    ##    ##      ## ##   ##     ##    ##     ##  ###   ## ##    ##\r\n");
 80005c4:	480d      	ldr	r0, [pc, #52]	; (80005fc <Starting+0x48>)
 80005c6:	f005 fbb1 	bl	8005d2c <puts>
	  printf(" ##          ##     ##   ##  ##     ##    ##     ##  ####  ## ## \r\n");
 80005ca:	480d      	ldr	r0, [pc, #52]	; (8000600 <Starting+0x4c>)
 80005cc:	f005 fbae 	bl	8005d2c <puts>
	  printf("  ######     ##    ##     ## ########     ##     ##  ## ## ## ##   #### \r\n");
 80005d0:	480c      	ldr	r0, [pc, #48]	; (8000604 <Starting+0x50>)
 80005d2:	f005 fbab 	bl	8005d2c <puts>
	  printf("       ##    ##    ######### ##   ##      ##     ##  ##  #### ##    ##\r\n");
 80005d6:	480c      	ldr	r0, [pc, #48]	; (8000608 <Starting+0x54>)
 80005d8:	f005 fba8 	bl	8005d2c <puts>
	  printf(" ##    ##    ##    ##     ## ##    ##     ##     ##  ##   ### ##    ##  \r\n");
 80005dc:	480b      	ldr	r0, [pc, #44]	; (800060c <Starting+0x58>)
 80005de:	f005 fba5 	bl	8005d2c <puts>
	  printf("  ######     ##    ##     ## ##     ##    ##    #### ##    ##  ######\r\n");
 80005e2:	480b      	ldr	r0, [pc, #44]	; (8000610 <Starting+0x5c>)
 80005e4:	f005 fba2 	bl	8005d2c <puts>
	  printf("-----------------------------------------------------------------------\r\n\r\n");
 80005e8:	480a      	ldr	r0, [pc, #40]	; (8000614 <Starting+0x60>)
 80005ea:	f005 fb9f 	bl	8005d2c <puts>
}
 80005ee:	bf00      	nop
 80005f0:	bd80      	pop	{r7, pc}
 80005f2:	bf00      	nop
 80005f4:	08006c40 	.word	0x08006c40
 80005f8:	08006c8c 	.word	0x08006c8c
 80005fc:	08006cd4 	.word	0x08006cd4
 8000600:	08006d1c 	.word	0x08006d1c
 8000604:	08006d60 	.word	0x08006d60
 8000608:	08006dac 	.word	0x08006dac
 800060c:	08006df4 	.word	0x08006df4
 8000610:	08006e40 	.word	0x08006e40
 8000614:	08006e88 	.word	0x08006e88

08000618 <All_Carl_Inits>:
void All_Carl_Inits()
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b082      	sub	sp, #8
 800061c:	af00      	add	r7, sp, #0
	if(UartScreen == 1)
 800061e:	4b19      	ldr	r3, [pc, #100]	; (8000684 <All_Carl_Inits+0x6c>)
 8000620:	781b      	ldrb	r3, [r3, #0]
 8000622:	2b01      	cmp	r3, #1
 8000624:	d101      	bne.n	800062a <All_Carl_Inits+0x12>
	{
	Starting();
 8000626:	f7ff ffc5 	bl	80005b4 <Starting>
	}
	InitTouch();
 800062a:	f000 fae7 	bl	8000bfc <InitTouch>
	DisplayBegin();
 800062e:	f000 f9dd 	bl	80009ec <DisplayBegin>
	//IR_Carrier_OFF();
	//logo();
	//mainscreen();

	WriteToGeheugen(3, 12);
 8000632:	210c      	movs	r1, #12
 8000634:	2003      	movs	r0, #3
 8000636:	f000 f827 	bl	8000688 <WriteToGeheugen>
	DeleteFromGeheugen(3, 11);
 800063a:	210b      	movs	r1, #11
 800063c:	2003      	movs	r0, #3
 800063e:	f000 f875 	bl	800072c <DeleteFromGeheugen>
	DeleteFromGeheugen(1, 1);
 8000642:	2101      	movs	r1, #1
 8000644:	2001      	movs	r0, #1
 8000646:	f000 f871 	bl	800072c <DeleteFromGeheugen>
	//Wat zit er eigenlijk in mijn geheugen?
	for(uint8_t i = 1; i <= 4; i++)
 800064a:	2301      	movs	r3, #1
 800064c:	71fb      	strb	r3, [r7, #7]
 800064e:	e011      	b.n	8000674 <All_Carl_Inits+0x5c>
	{
		for(uint8_t j = 1; j <= 12; j ++)
 8000650:	2301      	movs	r3, #1
 8000652:	71bb      	strb	r3, [r7, #6]
 8000654:	e008      	b.n	8000668 <All_Carl_Inits+0x50>
		{
			TakefromGeheugen(i, j);
 8000656:	79ba      	ldrb	r2, [r7, #6]
 8000658:	79fb      	ldrb	r3, [r7, #7]
 800065a:	4611      	mov	r1, r2
 800065c:	4618      	mov	r0, r3
 800065e:	f000 f90f 	bl	8000880 <TakefromGeheugen>
		for(uint8_t j = 1; j <= 12; j ++)
 8000662:	79bb      	ldrb	r3, [r7, #6]
 8000664:	3301      	adds	r3, #1
 8000666:	71bb      	strb	r3, [r7, #6]
 8000668:	79bb      	ldrb	r3, [r7, #6]
 800066a:	2b0c      	cmp	r3, #12
 800066c:	d9f3      	bls.n	8000656 <All_Carl_Inits+0x3e>
	for(uint8_t i = 1; i <= 4; i++)
 800066e:	79fb      	ldrb	r3, [r7, #7]
 8000670:	3301      	adds	r3, #1
 8000672:	71fb      	strb	r3, [r7, #7]
 8000674:	79fb      	ldrb	r3, [r7, #7]
 8000676:	2b04      	cmp	r3, #4
 8000678:	d9ea      	bls.n	8000650 <All_Carl_Inits+0x38>
		}
	}
}
 800067a:	bf00      	nop
 800067c:	bf00      	nop
 800067e:	3708      	adds	r7, #8
 8000680:	46bd      	mov	sp, r7
 8000682:	bd80      	pop	{r7, pc}
 8000684:	20000000 	.word	0x20000000

08000688 <WriteToGeheugen>:
void WriteToGeheugen(uint8_t device, uint8_t knop)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b084      	sub	sp, #16
 800068c:	af00      	add	r7, sp, #0
 800068e:	4603      	mov	r3, r0
 8000690:	460a      	mov	r2, r1
 8000692:	71fb      	strb	r3, [r7, #7]
 8000694:	4613      	mov	r3, r2
 8000696:	71bb      	strb	r3, [r7, #6]
	//stel singaal1 is 12 groot


	//stel Device 3 knop 4
	//berekening = 2*12 + 3 = 27
	uint8_t berekening = ((device-1) * 12) + knop-1 ; //zoek de plaats van lengte_signaal voor het knopje van het apparaat
 8000698:	79fb      	ldrb	r3, [r7, #7]
 800069a:	461a      	mov	r2, r3
 800069c:	0052      	lsls	r2, r2, #1
 800069e:	4413      	add	r3, r2
 80006a0:	009b      	lsls	r3, r3, #2
 80006a2:	b2da      	uxtb	r2, r3
 80006a4:	79bb      	ldrb	r3, [r7, #6]
 80006a6:	4413      	add	r3, r2
 80006a8:	b2db      	uxtb	r3, r3
 80006aa:	3b0d      	subs	r3, #13
 80006ac:	737b      	strb	r3, [r7, #13]

	printf("%d\r\n", berekening);
 80006ae:	7b7b      	ldrb	r3, [r7, #13]
 80006b0:	4619      	mov	r1, r3
 80006b2:	4818      	ldr	r0, [pc, #96]	; (8000714 <WriteToGeheugen+0x8c>)
 80006b4:	f005 fab4 	bl	8005c20 <iprintf>
	for(uint16_t i = 0; i < lengte_signaal[berekening] ; i++)
 80006b8:	2300      	movs	r3, #0
 80006ba:	81fb      	strh	r3, [r7, #14]
 80006bc:	e00e      	b.n	80006dc <WriteToGeheugen+0x54>
	{
		geheugen[geheugenplaatsen+i] = tijd[i];
 80006be:	89fa      	ldrh	r2, [r7, #14]
 80006c0:	4b15      	ldr	r3, [pc, #84]	; (8000718 <WriteToGeheugen+0x90>)
 80006c2:	881b      	ldrh	r3, [r3, #0]
 80006c4:	4619      	mov	r1, r3
 80006c6:	89fb      	ldrh	r3, [r7, #14]
 80006c8:	440b      	add	r3, r1
 80006ca:	4914      	ldr	r1, [pc, #80]	; (800071c <WriteToGeheugen+0x94>)
 80006cc:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 80006d0:	4a13      	ldr	r2, [pc, #76]	; (8000720 <WriteToGeheugen+0x98>)
 80006d2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(uint16_t i = 0; i < lengte_signaal[berekening] ; i++)
 80006d6:	89fb      	ldrh	r3, [r7, #14]
 80006d8:	3301      	adds	r3, #1
 80006da:	81fb      	strh	r3, [r7, #14]
 80006dc:	7b7b      	ldrb	r3, [r7, #13]
 80006de:	4a11      	ldr	r2, [pc, #68]	; (8000724 <WriteToGeheugen+0x9c>)
 80006e0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80006e4:	89fa      	ldrh	r2, [r7, #14]
 80006e6:	429a      	cmp	r2, r3
 80006e8:	d3e9      	bcc.n	80006be <WriteToGeheugen+0x36>
	}
	geheugenplaatsen += lengte_signaal[berekening];
 80006ea:	7b7b      	ldrb	r3, [r7, #13]
 80006ec:	4a0d      	ldr	r2, [pc, #52]	; (8000724 <WriteToGeheugen+0x9c>)
 80006ee:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80006f2:	4b09      	ldr	r3, [pc, #36]	; (8000718 <WriteToGeheugen+0x90>)
 80006f4:	881b      	ldrh	r3, [r3, #0]
 80006f6:	4413      	add	r3, r2
 80006f8:	b29a      	uxth	r2, r3
 80006fa:	4b07      	ldr	r3, [pc, #28]	; (8000718 <WriteToGeheugen+0x90>)
 80006fc:	801a      	strh	r2, [r3, #0]

	printf("geheugenplaatsen %d\r\n", geheugenplaatsen);
 80006fe:	4b06      	ldr	r3, [pc, #24]	; (8000718 <WriteToGeheugen+0x90>)
 8000700:	881b      	ldrh	r3, [r3, #0]
 8000702:	4619      	mov	r1, r3
 8000704:	4808      	ldr	r0, [pc, #32]	; (8000728 <WriteToGeheugen+0xa0>)
 8000706:	f005 fa8b 	bl	8005c20 <iprintf>
}
 800070a:	bf00      	nop
 800070c:	3710      	adds	r7, #16
 800070e:	46bd      	mov	sp, r7
 8000710:	bd80      	pop	{r7, pc}
 8000712:	bf00      	nop
 8000714:	08006ed4 	.word	0x08006ed4
 8000718:	20004e24 	.word	0x20004e24
 800071c:	20004e88 	.word	0x20004e88
 8000720:	20000004 	.word	0x20000004
 8000724:	20004e28 	.word	0x20004e28
 8000728:	08006edc 	.word	0x08006edc

0800072c <DeleteFromGeheugen>:
void DeleteFromGeheugen(uint8_t device, uint8_t knop)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b088      	sub	sp, #32
 8000730:	af00      	add	r7, sp, #0
 8000732:	4603      	mov	r3, r0
 8000734:	460a      	mov	r2, r1
 8000736:	71fb      	strb	r3, [r7, #7]
 8000738:	4613      	mov	r3, r2
 800073a:	71bb      	strb	r3, [r7, #6]
	uint16_t plaatservoor = 0;
 800073c:	2300      	movs	r3, #0
 800073e:	83fb      	strh	r3, [r7, #30]
	uint8_t berekening = ((device-1) * 12) + knop-1 ;
 8000740:	79fb      	ldrb	r3, [r7, #7]
 8000742:	461a      	mov	r2, r3
 8000744:	0052      	lsls	r2, r2, #1
 8000746:	4413      	add	r3, r2
 8000748:	009b      	lsls	r3, r3, #2
 800074a:	b2da      	uxtb	r2, r3
 800074c:	79bb      	ldrb	r3, [r7, #6]
 800074e:	4413      	add	r3, r2
 8000750:	b2db      	uxtb	r3, r3
 8000752:	3b0d      	subs	r3, #13
 8000754:	74bb      	strb	r3, [r7, #18]
	//Hoeveel plaats neemt de eventuele voorgaande knoppen in?
	for(uint8_t i = 0; i < berekening; i++)
 8000756:	2300      	movs	r3, #0
 8000758:	777b      	strb	r3, [r7, #29]
 800075a:	e009      	b.n	8000770 <DeleteFromGeheugen+0x44>
	{
		plaatservoor += lengte_signaal[i];
 800075c:	7f7b      	ldrb	r3, [r7, #29]
 800075e:	4a43      	ldr	r2, [pc, #268]	; (800086c <DeleteFromGeheugen+0x140>)
 8000760:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000764:	8bfb      	ldrh	r3, [r7, #30]
 8000766:	4413      	add	r3, r2
 8000768:	83fb      	strh	r3, [r7, #30]
	for(uint8_t i = 0; i < berekening; i++)
 800076a:	7f7b      	ldrb	r3, [r7, #29]
 800076c:	3301      	adds	r3, #1
 800076e:	777b      	strb	r3, [r7, #29]
 8000770:	7f7a      	ldrb	r2, [r7, #29]
 8000772:	7cbb      	ldrb	r3, [r7, #18]
 8000774:	429a      	cmp	r2, r3
 8000776:	d3f1      	bcc.n	800075c <DeleteFromGeheugen+0x30>
	}
	uint16_t plaatserna = plaatservoor + lengte_signaal[berekening];
 8000778:	7cbb      	ldrb	r3, [r7, #18]
 800077a:	4a3c      	ldr	r2, [pc, #240]	; (800086c <DeleteFromGeheugen+0x140>)
 800077c:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000780:	8bfb      	ldrh	r3, [r7, #30]
 8000782:	4413      	add	r3, r2
 8000784:	823b      	strh	r3, [r7, #16]
	printf("plaatservoor %d plaatserna %d\r\n", plaatservoor, plaatserna);
 8000786:	8bfb      	ldrh	r3, [r7, #30]
 8000788:	8a3a      	ldrh	r2, [r7, #16]
 800078a:	4619      	mov	r1, r3
 800078c:	4838      	ldr	r0, [pc, #224]	; (8000870 <DeleteFromGeheugen+0x144>)
 800078e:	f005 fa47 	bl	8005c20 <iprintf>
	//nu gaan we de geheugenplaats dat we moeten verwijderen, met nullen opvullen
	for(uint16_t i = plaatservoor; i < plaatserna; i ++)
 8000792:	8bfb      	ldrh	r3, [r7, #30]
 8000794:	837b      	strh	r3, [r7, #26]
 8000796:	e007      	b.n	80007a8 <DeleteFromGeheugen+0x7c>
	{
		geheugen[i]=0;
 8000798:	8b7b      	ldrh	r3, [r7, #26]
 800079a:	4a36      	ldr	r2, [pc, #216]	; (8000874 <DeleteFromGeheugen+0x148>)
 800079c:	2100      	movs	r1, #0
 800079e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(uint16_t i = plaatservoor; i < plaatserna; i ++)
 80007a2:	8b7b      	ldrh	r3, [r7, #26]
 80007a4:	3301      	adds	r3, #1
 80007a6:	837b      	strh	r3, [r7, #26]
 80007a8:	8b7a      	ldrh	r2, [r7, #26]
 80007aa:	8a3b      	ldrh	r3, [r7, #16]
 80007ac:	429a      	cmp	r2, r3
 80007ae:	d3f3      	bcc.n	8000798 <DeleteFromGeheugen+0x6c>
	}
	uint16_t index = 0;
 80007b0:	2300      	movs	r3, #0
 80007b2:	833b      	strh	r3, [r7, #24]
	//vervolgens gaan we het geheugen optimaliseren,
	for(uint16_t i = plaatservoor; i < geheugenplaatsen - plaatservoor; i++)
 80007b4:	8bfb      	ldrh	r3, [r7, #30]
 80007b6:	82fb      	strh	r3, [r7, #22]
 80007b8:	e011      	b.n	80007de <DeleteFromGeheugen+0xb2>
	{

		uint16_t a = geheugen[plaatserna + index];
 80007ba:	8a3a      	ldrh	r2, [r7, #16]
 80007bc:	8b3b      	ldrh	r3, [r7, #24]
 80007be:	4413      	add	r3, r2
 80007c0:	4a2c      	ldr	r2, [pc, #176]	; (8000874 <DeleteFromGeheugen+0x148>)
 80007c2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80007c6:	81fb      	strh	r3, [r7, #14]
		geheugen[i]= a;
 80007c8:	8afb      	ldrh	r3, [r7, #22]
 80007ca:	492a      	ldr	r1, [pc, #168]	; (8000874 <DeleteFromGeheugen+0x148>)
 80007cc:	89fa      	ldrh	r2, [r7, #14]
 80007ce:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		index++;
 80007d2:	8b3b      	ldrh	r3, [r7, #24]
 80007d4:	3301      	adds	r3, #1
 80007d6:	833b      	strh	r3, [r7, #24]
	for(uint16_t i = plaatservoor; i < geheugenplaatsen - plaatservoor; i++)
 80007d8:	8afb      	ldrh	r3, [r7, #22]
 80007da:	3301      	adds	r3, #1
 80007dc:	82fb      	strh	r3, [r7, #22]
 80007de:	8afa      	ldrh	r2, [r7, #22]
 80007e0:	4b25      	ldr	r3, [pc, #148]	; (8000878 <DeleteFromGeheugen+0x14c>)
 80007e2:	881b      	ldrh	r3, [r3, #0]
 80007e4:	4619      	mov	r1, r3
 80007e6:	8bfb      	ldrh	r3, [r7, #30]
 80007e8:	1acb      	subs	r3, r1, r3
 80007ea:	429a      	cmp	r2, r3
 80007ec:	dbe5      	blt.n	80007ba <DeleteFromGeheugen+0x8e>
	}
	lengte_signaal[berekening] = 0;
 80007ee:	7cbb      	ldrb	r3, [r7, #18]
 80007f0:	4a1e      	ldr	r2, [pc, #120]	; (800086c <DeleteFromGeheugen+0x140>)
 80007f2:	2100      	movs	r1, #0
 80007f4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	geheugenplaatsen -= (plaatserna - plaatservoor);
 80007f8:	8bfa      	ldrh	r2, [r7, #30]
 80007fa:	8a3b      	ldrh	r3, [r7, #16]
 80007fc:	1ad3      	subs	r3, r2, r3
 80007fe:	b29a      	uxth	r2, r3
 8000800:	4b1d      	ldr	r3, [pc, #116]	; (8000878 <DeleteFromGeheugen+0x14c>)
 8000802:	881b      	ldrh	r3, [r3, #0]
 8000804:	4413      	add	r3, r2
 8000806:	b29a      	uxth	r2, r3
 8000808:	4b1b      	ldr	r3, [pc, #108]	; (8000878 <DeleteFromGeheugen+0x14c>)
 800080a:	801a      	strh	r2, [r3, #0]
	//En alles achter het geheugen opvullen met 0
	for(uint16_t i = geheugenplaatsen; i < ruimte; i++ )
 800080c:	4b1a      	ldr	r3, [pc, #104]	; (8000878 <DeleteFromGeheugen+0x14c>)
 800080e:	881b      	ldrh	r3, [r3, #0]
 8000810:	82bb      	strh	r3, [r7, #20]
 8000812:	e007      	b.n	8000824 <DeleteFromGeheugen+0xf8>
	{
		geheugen[i] = 0;
 8000814:	8abb      	ldrh	r3, [r7, #20]
 8000816:	4a17      	ldr	r2, [pc, #92]	; (8000874 <DeleteFromGeheugen+0x148>)
 8000818:	2100      	movs	r1, #0
 800081a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(uint16_t i = geheugenplaatsen; i < ruimte; i++ )
 800081e:	8abb      	ldrh	r3, [r7, #20]
 8000820:	3301      	adds	r3, #1
 8000822:	82bb      	strh	r3, [r7, #20]
 8000824:	f242 7210 	movw	r2, #10000	; 0x2710
 8000828:	8abb      	ldrh	r3, [r7, #20]
 800082a:	4293      	cmp	r3, r2
 800082c:	d3f2      	bcc.n	8000814 <DeleteFromGeheugen+0xe8>
	}
	//vervolgens gaan we geheugenplaatsen controleren, dat het wel goed gewerkt heeft
	uint8_t controle = 0;
 800082e:	2300      	movs	r3, #0
 8000830:	74fb      	strb	r3, [r7, #19]
	while(geheugen[controle] != 0)
 8000832:	e002      	b.n	800083a <DeleteFromGeheugen+0x10e>
	{
		controle++;
 8000834:	7cfb      	ldrb	r3, [r7, #19]
 8000836:	3301      	adds	r3, #1
 8000838:	74fb      	strb	r3, [r7, #19]
	while(geheugen[controle] != 0)
 800083a:	7cfb      	ldrb	r3, [r7, #19]
 800083c:	4a0d      	ldr	r2, [pc, #52]	; (8000874 <DeleteFromGeheugen+0x148>)
 800083e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000842:	2b00      	cmp	r3, #0
 8000844:	d1f6      	bne.n	8000834 <DeleteFromGeheugen+0x108>
	}
	if(controle == geheugenplaatsen)
 8000846:	7cfb      	ldrb	r3, [r7, #19]
 8000848:	b29a      	uxth	r2, r3
 800084a:	4b0b      	ldr	r3, [pc, #44]	; (8000878 <DeleteFromGeheugen+0x14c>)
 800084c:	881b      	ldrh	r3, [r3, #0]
 800084e:	429a      	cmp	r2, r3
 8000850:	d107      	bne.n	8000862 <DeleteFromGeheugen+0x136>
	{
	printf("geheugenplaatsen = %d geheugen = %d\n\r", geheugenplaatsen, controle);
 8000852:	4b09      	ldr	r3, [pc, #36]	; (8000878 <DeleteFromGeheugen+0x14c>)
 8000854:	881b      	ldrh	r3, [r3, #0]
 8000856:	4619      	mov	r1, r3
 8000858:	7cfb      	ldrb	r3, [r7, #19]
 800085a:	461a      	mov	r2, r3
 800085c:	4807      	ldr	r0, [pc, #28]	; (800087c <DeleteFromGeheugen+0x150>)
 800085e:	f005 f9df 	bl	8005c20 <iprintf>
	}
}
 8000862:	bf00      	nop
 8000864:	3720      	adds	r7, #32
 8000866:	46bd      	mov	sp, r7
 8000868:	bd80      	pop	{r7, pc}
 800086a:	bf00      	nop
 800086c:	20004e28 	.word	0x20004e28
 8000870:	08006ef4 	.word	0x08006ef4
 8000874:	20000004 	.word	0x20000004
 8000878:	20004e24 	.word	0x20004e24
 800087c:	08006f14 	.word	0x08006f14

08000880 <TakefromGeheugen>:
void TakefromGeheugen(uint8_t device, uint8_t knop)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b086      	sub	sp, #24
 8000884:	af00      	add	r7, sp, #0
 8000886:	4603      	mov	r3, r0
 8000888:	460a      	mov	r2, r1
 800088a:	71fb      	strb	r3, [r7, #7]
 800088c:	4613      	mov	r3, r2
 800088e:	71bb      	strb	r3, [r7, #6]
		uint16_t plaatservoor = 0;
 8000890:	2300      	movs	r3, #0
 8000892:	82fb      	strh	r3, [r7, #22]
		uint8_t berekening = ((device-1) * 12) + knop-1 ;
 8000894:	79fb      	ldrb	r3, [r7, #7]
 8000896:	461a      	mov	r2, r3
 8000898:	0052      	lsls	r2, r2, #1
 800089a:	4413      	add	r3, r2
 800089c:	009b      	lsls	r3, r3, #2
 800089e:	b2da      	uxtb	r2, r3
 80008a0:	79bb      	ldrb	r3, [r7, #6]
 80008a2:	4413      	add	r3, r2
 80008a4:	b2db      	uxtb	r3, r3
 80008a6:	3b0d      	subs	r3, #13
 80008a8:	747b      	strb	r3, [r7, #17]
		if(lengte_signaal[berekening] == 0)
 80008aa:	7c7b      	ldrb	r3, [r7, #17]
 80008ac:	4a21      	ldr	r2, [pc, #132]	; (8000934 <TakefromGeheugen+0xb4>)
 80008ae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d106      	bne.n	80008c4 <TakefromGeheugen+0x44>
		{
			printf("device: %d knop: %d is niet ingesteld!\r\n", device, knop);
 80008b6:	79fb      	ldrb	r3, [r7, #7]
 80008b8:	79ba      	ldrb	r2, [r7, #6]
 80008ba:	4619      	mov	r1, r3
 80008bc:	481e      	ldr	r0, [pc, #120]	; (8000938 <TakefromGeheugen+0xb8>)
 80008be:	f005 f9af 	bl	8005c20 <iprintf>
			{
				printf("%d ", geheugen[i]);
			}
			printf("\r\n");
		}
}
 80008c2:	e032      	b.n	800092a <TakefromGeheugen+0xaa>
			for(uint8_t i = 0; i < berekening; i++)
 80008c4:	2300      	movs	r3, #0
 80008c6:	757b      	strb	r3, [r7, #21]
 80008c8:	e009      	b.n	80008de <TakefromGeheugen+0x5e>
				plaatservoor += lengte_signaal[i];
 80008ca:	7d7b      	ldrb	r3, [r7, #21]
 80008cc:	4a19      	ldr	r2, [pc, #100]	; (8000934 <TakefromGeheugen+0xb4>)
 80008ce:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80008d2:	8afb      	ldrh	r3, [r7, #22]
 80008d4:	4413      	add	r3, r2
 80008d6:	82fb      	strh	r3, [r7, #22]
			for(uint8_t i = 0; i < berekening; i++)
 80008d8:	7d7b      	ldrb	r3, [r7, #21]
 80008da:	3301      	adds	r3, #1
 80008dc:	757b      	strb	r3, [r7, #21]
 80008de:	7d7a      	ldrb	r2, [r7, #21]
 80008e0:	7c7b      	ldrb	r3, [r7, #17]
 80008e2:	429a      	cmp	r2, r3
 80008e4:	d3f1      	bcc.n	80008ca <TakefromGeheugen+0x4a>
			uint16_t plaatserna = plaatservoor + lengte_signaal[berekening];
 80008e6:	7c7b      	ldrb	r3, [r7, #17]
 80008e8:	4a12      	ldr	r2, [pc, #72]	; (8000934 <TakefromGeheugen+0xb4>)
 80008ea:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80008ee:	8afb      	ldrh	r3, [r7, #22]
 80008f0:	4413      	add	r3, r2
 80008f2:	81fb      	strh	r3, [r7, #14]
			printf("device: %d knop: %d = ", device, knop);
 80008f4:	79fb      	ldrb	r3, [r7, #7]
 80008f6:	79ba      	ldrb	r2, [r7, #6]
 80008f8:	4619      	mov	r1, r3
 80008fa:	4810      	ldr	r0, [pc, #64]	; (800093c <TakefromGeheugen+0xbc>)
 80008fc:	f005 f990 	bl	8005c20 <iprintf>
			for(uint16_t i = plaatservoor; i < plaatserna; i++)
 8000900:	8afb      	ldrh	r3, [r7, #22]
 8000902:	827b      	strh	r3, [r7, #18]
 8000904:	e00a      	b.n	800091c <TakefromGeheugen+0x9c>
				printf("%d ", geheugen[i]);
 8000906:	8a7b      	ldrh	r3, [r7, #18]
 8000908:	4a0d      	ldr	r2, [pc, #52]	; (8000940 <TakefromGeheugen+0xc0>)
 800090a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800090e:	4619      	mov	r1, r3
 8000910:	480c      	ldr	r0, [pc, #48]	; (8000944 <TakefromGeheugen+0xc4>)
 8000912:	f005 f985 	bl	8005c20 <iprintf>
			for(uint16_t i = plaatservoor; i < plaatserna; i++)
 8000916:	8a7b      	ldrh	r3, [r7, #18]
 8000918:	3301      	adds	r3, #1
 800091a:	827b      	strh	r3, [r7, #18]
 800091c:	8a7a      	ldrh	r2, [r7, #18]
 800091e:	89fb      	ldrh	r3, [r7, #14]
 8000920:	429a      	cmp	r2, r3
 8000922:	d3f0      	bcc.n	8000906 <TakefromGeheugen+0x86>
			printf("\r\n");
 8000924:	4808      	ldr	r0, [pc, #32]	; (8000948 <TakefromGeheugen+0xc8>)
 8000926:	f005 fa01 	bl	8005d2c <puts>
}
 800092a:	bf00      	nop
 800092c:	3718      	adds	r7, #24
 800092e:	46bd      	mov	sp, r7
 8000930:	bd80      	pop	{r7, pc}
 8000932:	bf00      	nop
 8000934:	20004e28 	.word	0x20004e28
 8000938:	08006f3c 	.word	0x08006f3c
 800093c:	08006f68 	.word	0x08006f68
 8000940:	20000004 	.word	0x20000004
 8000944:	08006f80 	.word	0x08006f80
 8000948:	08006f84 	.word	0x08006f84

0800094c <whilelus>:

void whilelus(){
 800094c:	b480      	push	{r7}
 800094e:	af00      	add	r7, sp, #0
//	ReadButton(i);
//	}



}
 8000950:	bf00      	nop
 8000952:	46bd      	mov	sp, r7
 8000954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000958:	4770      	bx	lr
	...

0800095c <CS_HIGH>:
#define ILI9488_GREENYELLOW 	0xAFE5      /* 173, 255,  47 */
#define ILI9488_PINK        			0xF81F

/* Some Easy Functions */ 
void CS_HIGH() //High = The chip is not selected and not accessible pg23
{HAL_GPIO_WritePin(CS_Port, CS_Pin, 1);}
 800095c:	b580      	push	{r7, lr}
 800095e:	af00      	add	r7, sp, #0
 8000960:	2201      	movs	r2, #1
 8000962:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000966:	4802      	ldr	r0, [pc, #8]	; (8000970 <CS_HIGH+0x14>)
 8000968:	f001 fa22 	bl	8001db0 <HAL_GPIO_WritePin>
 800096c:	bf00      	nop
 800096e:	bd80      	pop	{r7, pc}
 8000970:	40021400 	.word	0x40021400

08000974 <CS_LOW>:
void CS_LOW()  //Low = The chip is selected and accessible pg23
{HAL_GPIO_WritePin(CS_Port, CS_Pin, 0);}
 8000974:	b580      	push	{r7, lr}
 8000976:	af00      	add	r7, sp, #0
 8000978:	2200      	movs	r2, #0
 800097a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800097e:	4802      	ldr	r0, [pc, #8]	; (8000988 <CS_LOW+0x14>)
 8000980:	f001 fa16 	bl	8001db0 <HAL_GPIO_WritePin>
 8000984:	bf00      	nop
 8000986:	bd80      	pop	{r7, pc}
 8000988:	40021400 	.word	0x40021400

0800098c <DC_HIGH>:
void DC_HIGH() //High = Parameter pg23
{HAL_GPIO_WritePin(DC_Port, DC_Pin, 1);}
 800098c:	b580      	push	{r7, lr}
 800098e:	af00      	add	r7, sp, #0
 8000990:	2201      	movs	r2, #1
 8000992:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000996:	4802      	ldr	r0, [pc, #8]	; (80009a0 <DC_HIGH+0x14>)
 8000998:	f001 fa0a 	bl	8001db0 <HAL_GPIO_WritePin>
 800099c:	bf00      	nop
 800099e:	bd80      	pop	{r7, pc}
 80009a0:	40021400 	.word	0x40021400

080009a4 <DC_LOW>:
void DC_LOW()  //Low = command pg23
{HAL_GPIO_WritePin(DC_Port, DC_Pin, 0);}
 80009a4:	b580      	push	{r7, lr}
 80009a6:	af00      	add	r7, sp, #0
 80009a8:	2200      	movs	r2, #0
 80009aa:	f44f 7180 	mov.w	r1, #256	; 0x100
 80009ae:	4802      	ldr	r0, [pc, #8]	; (80009b8 <DC_LOW+0x14>)
 80009b0:	f001 f9fe 	bl	8001db0 <HAL_GPIO_WritePin>
 80009b4:	bf00      	nop
 80009b6:	bd80      	pop	{r7, pc}
 80009b8:	40021400 	.word	0x40021400

080009bc <RST_HIGH>:
void RST_HIGH() 
{HAL_GPIO_WritePin(RST_Port, RST_Pin, 1);}
 80009bc:	b580      	push	{r7, lr}
 80009be:	af00      	add	r7, sp, #0
 80009c0:	2201      	movs	r2, #1
 80009c2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80009c6:	4802      	ldr	r0, [pc, #8]	; (80009d0 <RST_HIGH+0x14>)
 80009c8:	f001 f9f2 	bl	8001db0 <HAL_GPIO_WritePin>
 80009cc:	bf00      	nop
 80009ce:	bd80      	pop	{r7, pc}
 80009d0:	40021400 	.word	0x40021400

080009d4 <RST_LOW>:
void RST_LOW() //initialize with a low input pg23
{HAL_GPIO_WritePin(RST_Port, RST_Pin, 0);}
 80009d4:	b580      	push	{r7, lr}
 80009d6:	af00      	add	r7, sp, #0
 80009d8:	2200      	movs	r2, #0
 80009da:	f44f 7100 	mov.w	r1, #512	; 0x200
 80009de:	4802      	ldr	r0, [pc, #8]	; (80009e8 <RST_LOW+0x14>)
 80009e0:	f001 f9e6 	bl	8001db0 <HAL_GPIO_WritePin>
 80009e4:	bf00      	nop
 80009e6:	bd80      	pop	{r7, pc}
 80009e8:	40021400 	.word	0x40021400

080009ec <DisplayBegin>:

//#define TIM_1us htim2

void DisplayBegin(void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	af00      	add	r7, sp, #0
	RST_LOW(); //initialize with a low input pg23
 80009f0:	f7ff fff0 	bl	80009d4 <RST_LOW>
	HAL_Delay(500);
 80009f4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80009f8:	f000 fef8 	bl	80017ec <HAL_Delay>
	RST_HIGH();
 80009fc:	f7ff ffde 	bl	80009bc <RST_HIGH>
	HAL_Delay(500);
 8000a00:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000a04:	f000 fef2 	bl	80017ec <HAL_Delay>
	writecommand(0xE0);
 8000a08:	20e0      	movs	r0, #224	; 0xe0
 8000a0a:	f000 f8bf 	bl	8000b8c <writecommand>
	writedata(0x00);
 8000a0e:	2000      	movs	r0, #0
 8000a10:	f000 f8d8 	bl	8000bc4 <writedata>
	writedata(0x03);
 8000a14:	2003      	movs	r0, #3
 8000a16:	f000 f8d5 	bl	8000bc4 <writedata>
	writedata(0x09);
 8000a1a:	2009      	movs	r0, #9
 8000a1c:	f000 f8d2 	bl	8000bc4 <writedata>
	writedata(0x08);
 8000a20:	2008      	movs	r0, #8
 8000a22:	f000 f8cf 	bl	8000bc4 <writedata>
	writedata(0x16);
 8000a26:	2016      	movs	r0, #22
 8000a28:	f000 f8cc 	bl	8000bc4 <writedata>
	writedata(0x0A);
 8000a2c:	200a      	movs	r0, #10
 8000a2e:	f000 f8c9 	bl	8000bc4 <writedata>
	writedata(0x3F);
 8000a32:	203f      	movs	r0, #63	; 0x3f
 8000a34:	f000 f8c6 	bl	8000bc4 <writedata>
	writedata(0x78);
 8000a38:	2078      	movs	r0, #120	; 0x78
 8000a3a:	f000 f8c3 	bl	8000bc4 <writedata>
	writedata(0x4C);
 8000a3e:	204c      	movs	r0, #76	; 0x4c
 8000a40:	f000 f8c0 	bl	8000bc4 <writedata>
	writedata(0x09);
 8000a44:	2009      	movs	r0, #9
 8000a46:	f000 f8bd 	bl	8000bc4 <writedata>
	writedata(0x0A);
 8000a4a:	200a      	movs	r0, #10
 8000a4c:	f000 f8ba 	bl	8000bc4 <writedata>
	writedata(0x08);
 8000a50:	2008      	movs	r0, #8
 8000a52:	f000 f8b7 	bl	8000bc4 <writedata>
	writedata(0x16);
 8000a56:	2016      	movs	r0, #22
 8000a58:	f000 f8b4 	bl	8000bc4 <writedata>
	writedata(0x1A);
 8000a5c:	201a      	movs	r0, #26
 8000a5e:	f000 f8b1 	bl	8000bc4 <writedata>
	writedata(0x0F);
 8000a62:	200f      	movs	r0, #15
 8000a64:	f000 f8ae 	bl	8000bc4 <writedata>

	writecommand(0XE1);
 8000a68:	20e1      	movs	r0, #225	; 0xe1
 8000a6a:	f000 f88f 	bl	8000b8c <writecommand>
	writedata(0x00);
 8000a6e:	2000      	movs	r0, #0
 8000a70:	f000 f8a8 	bl	8000bc4 <writedata>
	writedata(0x16);
 8000a74:	2016      	movs	r0, #22
 8000a76:	f000 f8a5 	bl	8000bc4 <writedata>
	writedata(0x19);
 8000a7a:	2019      	movs	r0, #25
 8000a7c:	f000 f8a2 	bl	8000bc4 <writedata>
	writedata(0x03);
 8000a80:	2003      	movs	r0, #3
 8000a82:	f000 f89f 	bl	8000bc4 <writedata>
	writedata(0x0F);
 8000a86:	200f      	movs	r0, #15
 8000a88:	f000 f89c 	bl	8000bc4 <writedata>
	writedata(0x05);
 8000a8c:	2005      	movs	r0, #5
 8000a8e:	f000 f899 	bl	8000bc4 <writedata>
	writedata(0x32);
 8000a92:	2032      	movs	r0, #50	; 0x32
 8000a94:	f000 f896 	bl	8000bc4 <writedata>
	writedata(0x45);
 8000a98:	2045      	movs	r0, #69	; 0x45
 8000a9a:	f000 f893 	bl	8000bc4 <writedata>
	writedata(0x46);
 8000a9e:	2046      	movs	r0, #70	; 0x46
 8000aa0:	f000 f890 	bl	8000bc4 <writedata>
	writedata(0x04);
 8000aa4:	2004      	movs	r0, #4
 8000aa6:	f000 f88d 	bl	8000bc4 <writedata>
	writedata(0x0E);
 8000aaa:	200e      	movs	r0, #14
 8000aac:	f000 f88a 	bl	8000bc4 <writedata>
	writedata(0x0D);
 8000ab0:	200d      	movs	r0, #13
 8000ab2:	f000 f887 	bl	8000bc4 <writedata>
	writedata(0x35);
 8000ab6:	2035      	movs	r0, #53	; 0x35
 8000ab8:	f000 f884 	bl	8000bc4 <writedata>
	writedata(0x37);
 8000abc:	2037      	movs	r0, #55	; 0x37
 8000abe:	f000 f881 	bl	8000bc4 <writedata>
	writedata(0x0F);
 8000ac2:	200f      	movs	r0, #15
 8000ac4:	f000 f87e 	bl	8000bc4 <writedata>

	writecommand(0XC0);      //Power Control 1 (pg 237)
 8000ac8:	20c0      	movs	r0, #192	; 0xc0
 8000aca:	f000 f85f 	bl	8000b8c <writecommand>
							
	writedata(0x17);    //Vreg1out =  5V zie pg 237
 8000ace:	2017      	movs	r0, #23
 8000ad0:	f000 f878 	bl	8000bc4 <writedata>
	writedata(0x15);    //Verg2out = -4.87V zie pg 237
 8000ad4:	2015      	movs	r0, #21
 8000ad6:	f000 f875 	bl	8000bc4 <writedata>
							//	Input voltage from the set-up circuit (-6 to -4.5V).
							
							//Op de DFR0669 staat een LevelShifter, zodat het op 5V werkt.
							

	writecommand(0xC1);      //Power Control 2 (pg 239)
 8000ada:	20c1      	movs	r0, #193	; 0xc1
 8000adc:	f000 f856 	bl	8000b8c <writecommand>
	writedata(0x41);    //VGH,VGL
 8000ae0:	2041      	movs	r0, #65	; 0x41
 8000ae2:	f000 f86f 	bl	8000bc4 <writedata>
						// = 3'h1 = 001
						// 0100 0XXX 
						// 0100 0001 = 41h  (65 decimaal)
						

	writecommand(0xC5);      //VCOM control pg243
 8000ae6:	20c5      	movs	r0, #197	; 0xc5
 8000ae8:	f000 f850 	bl	8000b8c <writecommand>
	writedata(0x00);		 //1e parameter standaard 00h
 8000aec:	2000      	movs	r0, #0
 8000aee:	f000 f869 	bl	8000bc4 <writedata>
	writedata(0x12);    	 //VCOM = -1.71    |VCOM| x 2 = VREG = 3.42V
 8000af2:	2012      	movs	r0, #18
 8000af4:	f000 f866 	bl	8000bc4 <writedata>
	writedata(0x80);		// ? 
 8000af8:	2080      	movs	r0, #128	; 0x80
 8000afa:	f000 f863 	bl	8000bc4 <writedata>

	writecommand(0x36);      //Memory Access pg192
 8000afe:	2036      	movs	r0, #54	; 0x36
 8000b00:	f000 f844 	bl	8000b8c <writecommand>
	writedata(0x48);		//MY = 0				//in vb 0x48
 8000b04:	2048      	movs	r0, #72	; 0x48
 8000b06:	f000 f85d 	bl	8000bc4 <writedata>
							//ML = 0
							//BGR = 0
							//MH = 0
							//=0h

	writecommand(0x3A);		// Interface Pixel Format (RGB 565 standaard 3Ah pg123
 8000b0a:	203a      	movs	r0, #58	; 0x3a
 8000b0c:	f000 f83e 	bl	8000b8c <writecommand>
	writedata(0x66); 	  	//pg 200 --> 16bits/pixel = 55 (decimal = 85)
 8000b10:	2066      	movs	r0, #102	; 0x66
 8000b12:	f000 f857 	bl	8000bc4 <writedata>
							//55 = 0101 0101

	writecommand(0XB0);      // Interface Mode Control pg219
 8000b16:	20b0      	movs	r0, #176	; 0xb0
 8000b18:	f000 f838 	bl	8000b8c <writecommand>
	writedata(0x80);     			 //SDO NOT USE
 8000b1c:	2080      	movs	r0, #128	; 0x80
 8000b1e:	f000 f851 	bl	8000bc4 <writedata>
									//1000 0000
									//High enable for RGB interface,
									//data fetched at the rising time,
									//and low level sync clock
									
	writecommand(0xB1);      //Frame rate pg 221
 8000b22:	20b1      	movs	r0, #177	; 0xb1
 8000b24:	f000 f832 	bl	8000b8c <writecommand>
	writedata(0xA0);    //60Hz      NOG UITREKENEN
 8000b28:	20a0      	movs	r0, #160	; 0xa0
 8000b2a:	f000 f84b 	bl	8000bc4 <writedata>

	writecommand(0xB4);      //Display Inversion Control  pg 225
 8000b2e:	20b4      	movs	r0, #180	; 0xb4
 8000b30:	f000 f82c 	bl	8000b8c <writecommand>
	writedata(0x02);    //2-dot inversion (standard)
 8000b34:	2002      	movs	r0, #2
 8000b36:	f000 f845 	bl	8000bc4 <writedata>

	writecommand(0XB6); //Display Function Control  RGB/MCU Interface Control pg228
 8000b3a:	20b6      	movs	r0, #182	; 0xb6
 8000b3c:	f000 f826 	bl	8000b8c <writecommand>

	writedata(0x02);    //MCU // 1e parameter standard    question Bypass= Memory or Shift register? 
 8000b40:	2002      	movs	r0, #2
 8000b42:	f000 f83f 	bl	8000bc4 <writedata>
	writedata(0x02);    //Source,Gate scan direction so frames at 84ms
 8000b46:	2002      	movs	r0, #2
 8000b48:	f000 f83c 	bl	8000bc4 <writedata>

	writecommand(0XE9);      // Set Image Function pg271 
 8000b4c:	20e9      	movs	r0, #233	; 0xe9
 8000b4e:	f000 f81d 	bl	8000b8c <writecommand>
	writedata(0x00);    // Disable 24 bit data
 8000b52:	2000      	movs	r0, #0
 8000b54:	f000 f836 	bl	8000bc4 <writedata>

	writecommand(0xF7);      // Adjust Control   pg 276
 8000b58:	20f7      	movs	r0, #247	; 0xf7
 8000b5a:	f000 f817 	bl	8000b8c <writecommand>
	writedata(0xA9);  //standard 1e parameter
 8000b5e:	20a9      	movs	r0, #169	; 0xa9
 8000b60:	f000 f830 	bl	8000bc4 <writedata>
	writedata(0x51);  //standard 2e parameter
 8000b64:	2051      	movs	r0, #81	; 0x51
 8000b66:	f000 f82d 	bl	8000bc4 <writedata>
	writedata(0x2C);  //standard 3e parameter
 8000b6a:	202c      	movs	r0, #44	; 0x2c
 8000b6c:	f000 f82a 	bl	8000bc4 <writedata>
	writedata(0x82);    // D7 stream, loose   //standard 4e parameter
 8000b70:	2082      	movs	r0, #130	; 0x82
 8000b72:	f000 f827 	bl	8000bc4 <writedata>

	writecommand(Display_ExitSleep);    //Exit Sleep
 8000b76:	2011      	movs	r0, #17
 8000b78:	f000 f808 	bl	8000b8c <writecommand>

	HAL_Delay(120);
 8000b7c:	2078      	movs	r0, #120	; 0x78
 8000b7e:	f000 fe35 	bl	80017ec <HAL_Delay>

	writecommand(Display_On);    //Display on
 8000b82:	2029      	movs	r0, #41	; 0x29
 8000b84:	f000 f802 	bl	8000b8c <writecommand>


	
}
 8000b88:	bf00      	nop
 8000b8a:	bd80      	pop	{r7, pc}

08000b8c <writecommand>:

void writecommand(uint8_t cmdo)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b084      	sub	sp, #16
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	4603      	mov	r3, r0
 8000b94:	71fb      	strb	r3, [r7, #7]
	uint8_t commando = cmdo;
 8000b96:	79fb      	ldrb	r3, [r7, #7]
 8000b98:	73fb      	strb	r3, [r7, #15]
	DC_LOW(); //Low = command pg23
 8000b9a:	f7ff ff03 	bl	80009a4 <DC_LOW>
	CS_LOW(); //The chip is selected and accessible pg23
 8000b9e:	f7ff fee9 	bl	8000974 <CS_LOW>
	HAL_SPI_Transmit(&mySPI, &commando, 1, HAL_MAX_DELAY); //Size = bytes
 8000ba2:	f107 010f 	add.w	r1, r7, #15
 8000ba6:	f04f 33ff 	mov.w	r3, #4294967295
 8000baa:	2201      	movs	r2, #1
 8000bac:	4804      	ldr	r0, [pc, #16]	; (8000bc0 <writecommand+0x34>)
 8000bae:	f003 f80c 	bl	8003bca <HAL_SPI_Transmit>
	CS_HIGH(); //The chip is not selected and not accessible pg23
 8000bb2:	f7ff fed3 	bl	800095c <CS_HIGH>
	


}
 8000bb6:	bf00      	nop
 8000bb8:	3710      	adds	r7, #16
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bd80      	pop	{r7, pc}
 8000bbe:	bf00      	nop
 8000bc0:	20004f80 	.word	0x20004f80

08000bc4 <writedata>:
void writedata(uint8_t dta )
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b084      	sub	sp, #16
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	4603      	mov	r3, r0
 8000bcc:	71fb      	strb	r3, [r7, #7]
	uint8_t data = dta;
 8000bce:	79fb      	ldrb	r3, [r7, #7]
 8000bd0:	73fb      	strb	r3, [r7, #15]
	DC_HIGH(); //High = Parameter pg23
 8000bd2:	f7ff fedb 	bl	800098c <DC_HIGH>
	CS_LOW(); //The chip is selected and accessible pg23
 8000bd6:	f7ff fecd 	bl	8000974 <CS_LOW>
	HAL_SPI_Transmit(&mySPI, &data, 1, HAL_MAX_DELAY); //Size = bytes
 8000bda:	f107 010f 	add.w	r1, r7, #15
 8000bde:	f04f 33ff 	mov.w	r3, #4294967295
 8000be2:	2201      	movs	r2, #1
 8000be4:	4804      	ldr	r0, [pc, #16]	; (8000bf8 <writedata+0x34>)
 8000be6:	f002 fff0 	bl	8003bca <HAL_SPI_Transmit>
	CS_HIGH(); //The chip is not selected and not accessible pg23
 8000bea:	f7ff feb7 	bl	800095c <CS_HIGH>
	//als ik het scherm uitschakel, krijg ik ook geen errors
	//wel leuk om optimistisch te zijn, maar dit doet niks
	//uint8_t StateSpiHulp = HAL_SPI_GetState(&hspi2);
	//uint8_t ErrorSpiHulp = HAL_SPI_GetError(&hspi2);
	//printf("    data: 0x %x Spi_State:%d Error: %d\r\n", dta, StateSpiHulp, ErrorSpiHulp);
}
 8000bee:	bf00      	nop
 8000bf0:	3710      	adds	r7, #16
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	bf00      	nop
 8000bf8:	20004f80 	.word	0x20004f80

08000bfc <InitTouch>:
uint16_t X_waarde;
uint16_t OldX;
uint16_t OldY;

void InitTouch()
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b088      	sub	sp, #32
 8000c00:	af02      	add	r7, sp, #8
	uint16_t device_address_write = 0xBA;
 8000c02:	23ba      	movs	r3, #186	; 0xba
 8000c04:	82fb      	strh	r3, [r7, #22]
	uint16_t device_address_read = 0xBB;
 8000c06:	23bb      	movs	r3, #187	; 0xbb
 8000c08:	82bb      	strh	r3, [r7, #20]
	uint8_t dataWrite[] = {0x81,0x40};
 8000c0a:	f244 0381 	movw	r3, #16513	; 0x4081
 8000c0e:	823b      	strh	r3, [r7, #16]
	uint8_t ontvangen[11];
	HAL_I2C_Master_Transmit(&hi2c1, device_address_write, 0, 0 , HAL_MAX_DELAY); //new
 8000c10:	8af9      	ldrh	r1, [r7, #22]
 8000c12:	f04f 33ff 	mov.w	r3, #4294967295
 8000c16:	9300      	str	r3, [sp, #0]
 8000c18:	2300      	movs	r3, #0
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	480c      	ldr	r0, [pc, #48]	; (8000c50 <InitTouch+0x54>)
 8000c1e:	f001 f971 	bl	8001f04 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Transmit(&hi2c1, device_address_write, dataWrite, 2 , HAL_MAX_DELAY);
 8000c22:	f107 0210 	add.w	r2, r7, #16
 8000c26:	8af9      	ldrh	r1, [r7, #22]
 8000c28:	f04f 33ff 	mov.w	r3, #4294967295
 8000c2c:	9300      	str	r3, [sp, #0]
 8000c2e:	2302      	movs	r3, #2
 8000c30:	4807      	ldr	r0, [pc, #28]	; (8000c50 <InitTouch+0x54>)
 8000c32:	f001 f967 	bl	8001f04 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1, device_address_read, ontvangen, 11, HAL_MAX_DELAY); //
 8000c36:	1d3a      	adds	r2, r7, #4
 8000c38:	8ab9      	ldrh	r1, [r7, #20]
 8000c3a:	f04f 33ff 	mov.w	r3, #4294967295
 8000c3e:	9300      	str	r3, [sp, #0]
 8000c40:	230b      	movs	r3, #11
 8000c42:	4803      	ldr	r0, [pc, #12]	; (8000c50 <InitTouch+0x54>)
 8000c44:	f001 fa52 	bl	80020ec <HAL_I2C_Master_Receive>
}
 8000c48:	bf00      	nop
 8000c4a:	3718      	adds	r7, #24
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	bd80      	pop	{r7, pc}
 8000c50:	20004f2c 	.word	0x20004f2c

08000c54 <_write>:
/* USER CODE BEGIN 0 */
#include <errno.h>
#include <sys/stat.h>
#include <sys/times.h>
#include <sys/unistd.h>
int _write(int file, char *ptr, int len) {
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b086      	sub	sp, #24
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	60f8      	str	r0, [r7, #12]
 8000c5c:	60b9      	str	r1, [r7, #8]
 8000c5e:	607a      	str	r2, [r7, #4]
    HAL_StatusTypeDef xStatus;
    switch (file) {
 8000c60:	68fb      	ldr	r3, [r7, #12]
 8000c62:	2b01      	cmp	r3, #1
 8000c64:	d003      	beq.n	8000c6e <_write+0x1a>
 8000c66:	68fb      	ldr	r3, [r7, #12]
 8000c68:	2b02      	cmp	r3, #2
 8000c6a:	d015      	beq.n	8000c98 <_write+0x44>
 8000c6c:	e029      	b.n	8000cc2 <_write+0x6e>
    case STDOUT_FILENO: /*stdout*/
		xStatus = HAL_UART_Transmit(&huart1, (uint8_t*)ptr, len, HAL_MAX_DELAY);
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	b29a      	uxth	r2, r3
 8000c72:	f04f 33ff 	mov.w	r3, #4294967295
 8000c76:	68b9      	ldr	r1, [r7, #8]
 8000c78:	481a      	ldr	r0, [pc, #104]	; (8000ce4 <_write+0x90>)
 8000c7a:	f004 fb17 	bl	80052ac <HAL_UART_Transmit>
 8000c7e:	4603      	mov	r3, r0
 8000c80:	75fb      	strb	r3, [r7, #23]
		if (xStatus != HAL_OK) {
 8000c82:	7dfb      	ldrb	r3, [r7, #23]
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d024      	beq.n	8000cd2 <_write+0x7e>
			errno = EIO;
 8000c88:	f004 ff98 	bl	8005bbc <__errno>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	2205      	movs	r2, #5
 8000c90:	601a      	str	r2, [r3, #0]
			return -1;
 8000c92:	f04f 33ff 	mov.w	r3, #4294967295
 8000c96:	e020      	b.n	8000cda <_write+0x86>
		}
        break;
    case STDERR_FILENO: /* stderr */
		xStatus = HAL_UART_Transmit(&huart1, (uint8_t*)ptr, len, HAL_MAX_DELAY);
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	b29a      	uxth	r2, r3
 8000c9c:	f04f 33ff 	mov.w	r3, #4294967295
 8000ca0:	68b9      	ldr	r1, [r7, #8]
 8000ca2:	4810      	ldr	r0, [pc, #64]	; (8000ce4 <_write+0x90>)
 8000ca4:	f004 fb02 	bl	80052ac <HAL_UART_Transmit>
 8000ca8:	4603      	mov	r3, r0
 8000caa:	75fb      	strb	r3, [r7, #23]
		if (xStatus != HAL_OK) {
 8000cac:	7dfb      	ldrb	r3, [r7, #23]
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d011      	beq.n	8000cd6 <_write+0x82>
			errno = EIO;
 8000cb2:	f004 ff83 	bl	8005bbc <__errno>
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	2205      	movs	r2, #5
 8000cba:	601a      	str	r2, [r3, #0]
			return -1;
 8000cbc:	f04f 33ff 	mov.w	r3, #4294967295
 8000cc0:	e00b      	b.n	8000cda <_write+0x86>
		}
        break;
    default:
        errno = EBADF;
 8000cc2:	f004 ff7b 	bl	8005bbc <__errno>
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	2209      	movs	r2, #9
 8000cca:	601a      	str	r2, [r3, #0]
        return -1;
 8000ccc:	f04f 33ff 	mov.w	r3, #4294967295
 8000cd0:	e003      	b.n	8000cda <_write+0x86>
        break;
 8000cd2:	bf00      	nop
 8000cd4:	e000      	b.n	8000cd8 <_write+0x84>
        break;
 8000cd6:	bf00      	nop
    }
    return len;
 8000cd8:	687b      	ldr	r3, [r7, #4]
}
 8000cda:	4618      	mov	r0, r3
 8000cdc:	3718      	adds	r7, #24
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bd80      	pop	{r7, pc}
 8000ce2:	bf00      	nop
 8000ce4:	2000507c 	.word	0x2000507c

08000ce8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000cec:	f000 fd21 	bl	8001732 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000cf0:	f000 f812 	bl	8000d18 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000cf4:	f000 f9c8 	bl	8001088 <MX_GPIO_Init>
  MX_SPI2_Init();
 8000cf8:	f000 f8bc 	bl	8000e74 <MX_SPI2_Init>
  MX_USART1_UART_Init();
 8000cfc:	f000 f994 	bl	8001028 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 8000d00:	f000 f878 	bl	8000df4 <MX_I2C1_Init>
  MX_TIM2_Init();
 8000d04:	f000 f8f4 	bl	8000ef0 <MX_TIM2_Init>
  MX_TIM10_Init();
 8000d08:	f000 f940 	bl	8000f8c <MX_TIM10_Init>
  /* USER CODE BEGIN 2 */
  All_Carl_Inits();
 8000d0c:	f7ff fc84 	bl	8000618 <All_Carl_Inits>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  whilelus();
 8000d10:	f7ff fe1c 	bl	800094c <whilelus>
 8000d14:	e7fc      	b.n	8000d10 <main+0x28>
	...

08000d18 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b094      	sub	sp, #80	; 0x50
 8000d1c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d1e:	f107 0320 	add.w	r3, r7, #32
 8000d22:	2230      	movs	r2, #48	; 0x30
 8000d24:	2100      	movs	r1, #0
 8000d26:	4618      	mov	r0, r3
 8000d28:	f004 ff72 	bl	8005c10 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d2c:	f107 030c 	add.w	r3, r7, #12
 8000d30:	2200      	movs	r2, #0
 8000d32:	601a      	str	r2, [r3, #0]
 8000d34:	605a      	str	r2, [r3, #4]
 8000d36:	609a      	str	r2, [r3, #8]
 8000d38:	60da      	str	r2, [r3, #12]
 8000d3a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d3c:	4b2b      	ldr	r3, [pc, #172]	; (8000dec <SystemClock_Config+0xd4>)
 8000d3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d40:	4a2a      	ldr	r2, [pc, #168]	; (8000dec <SystemClock_Config+0xd4>)
 8000d42:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d46:	6413      	str	r3, [r2, #64]	; 0x40
 8000d48:	4b28      	ldr	r3, [pc, #160]	; (8000dec <SystemClock_Config+0xd4>)
 8000d4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d50:	60bb      	str	r3, [r7, #8]
 8000d52:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000d54:	4b26      	ldr	r3, [pc, #152]	; (8000df0 <SystemClock_Config+0xd8>)
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000d5c:	4a24      	ldr	r2, [pc, #144]	; (8000df0 <SystemClock_Config+0xd8>)
 8000d5e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d62:	6013      	str	r3, [r2, #0]
 8000d64:	4b22      	ldr	r3, [pc, #136]	; (8000df0 <SystemClock_Config+0xd8>)
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000d6c:	607b      	str	r3, [r7, #4]
 8000d6e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000d70:	2302      	movs	r3, #2
 8000d72:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d74:	2301      	movs	r3, #1
 8000d76:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d78:	2310      	movs	r3, #16
 8000d7a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d7c:	2302      	movs	r3, #2
 8000d7e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000d80:	2300      	movs	r3, #0
 8000d82:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000d84:	2308      	movs	r3, #8
 8000d86:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8000d88:	2364      	movs	r3, #100	; 0x64
 8000d8a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000d8c:	2302      	movs	r3, #2
 8000d8e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000d90:	2302      	movs	r3, #2
 8000d92:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d94:	f107 0320 	add.w	r3, r7, #32
 8000d98:	4618      	mov	r0, r3
 8000d9a:	f001 fdf1 	bl	8002980 <HAL_RCC_OscConfig>
 8000d9e:	4603      	mov	r3, r0
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d001      	beq.n	8000da8 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000da4:	f000 f9f0 	bl	8001188 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000da8:	f001 fd9a 	bl	80028e0 <HAL_PWREx_EnableOverDrive>
 8000dac:	4603      	mov	r3, r0
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d001      	beq.n	8000db6 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000db2:	f000 f9e9 	bl	8001188 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000db6:	230f      	movs	r3, #15
 8000db8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000dba:	2302      	movs	r3, #2
 8000dbc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000dc2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000dc6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000dc8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000dcc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000dce:	f107 030c 	add.w	r3, r7, #12
 8000dd2:	2103      	movs	r1, #3
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	f002 f877 	bl	8002ec8 <HAL_RCC_ClockConfig>
 8000dda:	4603      	mov	r3, r0
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d001      	beq.n	8000de4 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8000de0:	f000 f9d2 	bl	8001188 <Error_Handler>
  }
}
 8000de4:	bf00      	nop
 8000de6:	3750      	adds	r7, #80	; 0x50
 8000de8:	46bd      	mov	sp, r7
 8000dea:	bd80      	pop	{r7, pc}
 8000dec:	40023800 	.word	0x40023800
 8000df0:	40007000 	.word	0x40007000

08000df4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000df8:	4b1b      	ldr	r3, [pc, #108]	; (8000e68 <MX_I2C1_Init+0x74>)
 8000dfa:	4a1c      	ldr	r2, [pc, #112]	; (8000e6c <MX_I2C1_Init+0x78>)
 8000dfc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00C0EAFF;
 8000dfe:	4b1a      	ldr	r3, [pc, #104]	; (8000e68 <MX_I2C1_Init+0x74>)
 8000e00:	4a1b      	ldr	r2, [pc, #108]	; (8000e70 <MX_I2C1_Init+0x7c>)
 8000e02:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000e04:	4b18      	ldr	r3, [pc, #96]	; (8000e68 <MX_I2C1_Init+0x74>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e0a:	4b17      	ldr	r3, [pc, #92]	; (8000e68 <MX_I2C1_Init+0x74>)
 8000e0c:	2201      	movs	r2, #1
 8000e0e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e10:	4b15      	ldr	r3, [pc, #84]	; (8000e68 <MX_I2C1_Init+0x74>)
 8000e12:	2200      	movs	r2, #0
 8000e14:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000e16:	4b14      	ldr	r3, [pc, #80]	; (8000e68 <MX_I2C1_Init+0x74>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000e1c:	4b12      	ldr	r3, [pc, #72]	; (8000e68 <MX_I2C1_Init+0x74>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e22:	4b11      	ldr	r3, [pc, #68]	; (8000e68 <MX_I2C1_Init+0x74>)
 8000e24:	2200      	movs	r2, #0
 8000e26:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e28:	4b0f      	ldr	r3, [pc, #60]	; (8000e68 <MX_I2C1_Init+0x74>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000e2e:	480e      	ldr	r0, [pc, #56]	; (8000e68 <MX_I2C1_Init+0x74>)
 8000e30:	f000 ffd8 	bl	8001de4 <HAL_I2C_Init>
 8000e34:	4603      	mov	r3, r0
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d001      	beq.n	8000e3e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000e3a:	f000 f9a5 	bl	8001188 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000e3e:	2100      	movs	r1, #0
 8000e40:	4809      	ldr	r0, [pc, #36]	; (8000e68 <MX_I2C1_Init+0x74>)
 8000e42:	f001 fcb5 	bl	80027b0 <HAL_I2CEx_ConfigAnalogFilter>
 8000e46:	4603      	mov	r3, r0
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d001      	beq.n	8000e50 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000e4c:	f000 f99c 	bl	8001188 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000e50:	2100      	movs	r1, #0
 8000e52:	4805      	ldr	r0, [pc, #20]	; (8000e68 <MX_I2C1_Init+0x74>)
 8000e54:	f001 fcf7 	bl	8002846 <HAL_I2CEx_ConfigDigitalFilter>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d001      	beq.n	8000e62 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000e5e:	f000 f993 	bl	8001188 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000e62:	bf00      	nop
 8000e64:	bd80      	pop	{r7, pc}
 8000e66:	bf00      	nop
 8000e68:	20004f2c 	.word	0x20004f2c
 8000e6c:	40005400 	.word	0x40005400
 8000e70:	00c0eaff 	.word	0x00c0eaff

08000e74 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000e78:	4b1b      	ldr	r3, [pc, #108]	; (8000ee8 <MX_SPI2_Init+0x74>)
 8000e7a:	4a1c      	ldr	r2, [pc, #112]	; (8000eec <MX_SPI2_Init+0x78>)
 8000e7c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000e7e:	4b1a      	ldr	r3, [pc, #104]	; (8000ee8 <MX_SPI2_Init+0x74>)
 8000e80:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000e84:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000e86:	4b18      	ldr	r3, [pc, #96]	; (8000ee8 <MX_SPI2_Init+0x74>)
 8000e88:	2200      	movs	r2, #0
 8000e8a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000e8c:	4b16      	ldr	r3, [pc, #88]	; (8000ee8 <MX_SPI2_Init+0x74>)
 8000e8e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000e92:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000e94:	4b14      	ldr	r3, [pc, #80]	; (8000ee8 <MX_SPI2_Init+0x74>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000e9a:	4b13      	ldr	r3, [pc, #76]	; (8000ee8 <MX_SPI2_Init+0x74>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000ea0:	4b11      	ldr	r3, [pc, #68]	; (8000ee8 <MX_SPI2_Init+0x74>)
 8000ea2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ea6:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000ea8:	4b0f      	ldr	r3, [pc, #60]	; (8000ee8 <MX_SPI2_Init+0x74>)
 8000eaa:	2208      	movs	r2, #8
 8000eac:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000eae:	4b0e      	ldr	r3, [pc, #56]	; (8000ee8 <MX_SPI2_Init+0x74>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000eb4:	4b0c      	ldr	r3, [pc, #48]	; (8000ee8 <MX_SPI2_Init+0x74>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000eba:	4b0b      	ldr	r3, [pc, #44]	; (8000ee8 <MX_SPI2_Init+0x74>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000ec0:	4b09      	ldr	r3, [pc, #36]	; (8000ee8 <MX_SPI2_Init+0x74>)
 8000ec2:	2207      	movs	r2, #7
 8000ec4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000ec6:	4b08      	ldr	r3, [pc, #32]	; (8000ee8 <MX_SPI2_Init+0x74>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000ecc:	4b06      	ldr	r3, [pc, #24]	; (8000ee8 <MX_SPI2_Init+0x74>)
 8000ece:	2208      	movs	r2, #8
 8000ed0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000ed2:	4805      	ldr	r0, [pc, #20]	; (8000ee8 <MX_SPI2_Init+0x74>)
 8000ed4:	f002 fdce 	bl	8003a74 <HAL_SPI_Init>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d001      	beq.n	8000ee2 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8000ede:	f000 f953 	bl	8001188 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000ee2:	bf00      	nop
 8000ee4:	bd80      	pop	{r7, pc}
 8000ee6:	bf00      	nop
 8000ee8:	20004f80 	.word	0x20004f80
 8000eec:	40003800 	.word	0x40003800

08000ef0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b088      	sub	sp, #32
 8000ef4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ef6:	f107 0310 	add.w	r3, r7, #16
 8000efa:	2200      	movs	r2, #0
 8000efc:	601a      	str	r2, [r3, #0]
 8000efe:	605a      	str	r2, [r3, #4]
 8000f00:	609a      	str	r2, [r3, #8]
 8000f02:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f04:	1d3b      	adds	r3, r7, #4
 8000f06:	2200      	movs	r2, #0
 8000f08:	601a      	str	r2, [r3, #0]
 8000f0a:	605a      	str	r2, [r3, #4]
 8000f0c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000f0e:	4b1e      	ldr	r3, [pc, #120]	; (8000f88 <MX_TIM2_Init+0x98>)
 8000f10:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000f14:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 100-1;
 8000f16:	4b1c      	ldr	r3, [pc, #112]	; (8000f88 <MX_TIM2_Init+0x98>)
 8000f18:	2263      	movs	r2, #99	; 0x63
 8000f1a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f1c:	4b1a      	ldr	r3, [pc, #104]	; (8000f88 <MX_TIM2_Init+0x98>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000f22:	4b19      	ldr	r3, [pc, #100]	; (8000f88 <MX_TIM2_Init+0x98>)
 8000f24:	f04f 32ff 	mov.w	r2, #4294967295
 8000f28:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f2a:	4b17      	ldr	r3, [pc, #92]	; (8000f88 <MX_TIM2_Init+0x98>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000f30:	4b15      	ldr	r3, [pc, #84]	; (8000f88 <MX_TIM2_Init+0x98>)
 8000f32:	2280      	movs	r2, #128	; 0x80
 8000f34:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000f36:	4814      	ldr	r0, [pc, #80]	; (8000f88 <MX_TIM2_Init+0x98>)
 8000f38:	f003 f93e 	bl	80041b8 <HAL_TIM_Base_Init>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d001      	beq.n	8000f46 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000f42:	f000 f921 	bl	8001188 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f46:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f4a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000f4c:	f107 0310 	add.w	r3, r7, #16
 8000f50:	4619      	mov	r1, r3
 8000f52:	480d      	ldr	r0, [pc, #52]	; (8000f88 <MX_TIM2_Init+0x98>)
 8000f54:	f003 fc1c 	bl	8004790 <HAL_TIM_ConfigClockSource>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d001      	beq.n	8000f62 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000f5e:	f000 f913 	bl	8001188 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f62:	2300      	movs	r3, #0
 8000f64:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f66:	2300      	movs	r3, #0
 8000f68:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000f6a:	1d3b      	adds	r3, r7, #4
 8000f6c:	4619      	mov	r1, r3
 8000f6e:	4806      	ldr	r0, [pc, #24]	; (8000f88 <MX_TIM2_Init+0x98>)
 8000f70:	f004 f8a2 	bl	80050b8 <HAL_TIMEx_MasterConfigSynchronization>
 8000f74:	4603      	mov	r3, r0
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d001      	beq.n	8000f7e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000f7a:	f000 f905 	bl	8001188 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000f7e:	bf00      	nop
 8000f80:	3720      	adds	r7, #32
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	bf00      	nop
 8000f88:	20004fe4 	.word	0x20004fe4

08000f8c <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b088      	sub	sp, #32
 8000f90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f92:	1d3b      	adds	r3, r7, #4
 8000f94:	2200      	movs	r2, #0
 8000f96:	601a      	str	r2, [r3, #0]
 8000f98:	605a      	str	r2, [r3, #4]
 8000f9a:	609a      	str	r2, [r3, #8]
 8000f9c:	60da      	str	r2, [r3, #12]
 8000f9e:	611a      	str	r2, [r3, #16]
 8000fa0:	615a      	str	r2, [r3, #20]
 8000fa2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8000fa4:	4b1e      	ldr	r3, [pc, #120]	; (8001020 <MX_TIM10_Init+0x94>)
 8000fa6:	4a1f      	ldr	r2, [pc, #124]	; (8001024 <MX_TIM10_Init+0x98>)
 8000fa8:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 255-1;
 8000faa:	4b1d      	ldr	r3, [pc, #116]	; (8001020 <MX_TIM10_Init+0x94>)
 8000fac:	22fe      	movs	r2, #254	; 0xfe
 8000fae:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fb0:	4b1b      	ldr	r3, [pc, #108]	; (8001020 <MX_TIM10_Init+0x94>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 65535;
 8000fb6:	4b1a      	ldr	r3, [pc, #104]	; (8001020 <MX_TIM10_Init+0x94>)
 8000fb8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000fbc:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fbe:	4b18      	ldr	r3, [pc, #96]	; (8001020 <MX_TIM10_Init+0x94>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000fc4:	4b16      	ldr	r3, [pc, #88]	; (8001020 <MX_TIM10_Init+0x94>)
 8000fc6:	2280      	movs	r2, #128	; 0x80
 8000fc8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8000fca:	4815      	ldr	r0, [pc, #84]	; (8001020 <MX_TIM10_Init+0x94>)
 8000fcc:	f003 f8f4 	bl	80041b8 <HAL_TIM_Base_Init>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d001      	beq.n	8000fda <MX_TIM10_Init+0x4e>
  {
    Error_Handler();
 8000fd6:	f000 f8d7 	bl	8001188 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 8000fda:	4811      	ldr	r0, [pc, #68]	; (8001020 <MX_TIM10_Init+0x94>)
 8000fdc:	f003 f943 	bl	8004266 <HAL_TIM_PWM_Init>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d001      	beq.n	8000fea <MX_TIM10_Init+0x5e>
  {
    Error_Handler();
 8000fe6:	f000 f8cf 	bl	8001188 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000fea:	2360      	movs	r3, #96	; 0x60
 8000fec:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 128-1;
 8000fee:	237f      	movs	r3, #127	; 0x7f
 8000ff0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000ffa:	1d3b      	adds	r3, r7, #4
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	4619      	mov	r1, r3
 8001000:	4807      	ldr	r0, [pc, #28]	; (8001020 <MX_TIM10_Init+0x94>)
 8001002:	f003 fab1 	bl	8004568 <HAL_TIM_PWM_ConfigChannel>
 8001006:	4603      	mov	r3, r0
 8001008:	2b00      	cmp	r3, #0
 800100a:	d001      	beq.n	8001010 <MX_TIM10_Init+0x84>
  {
    Error_Handler();
 800100c:	f000 f8bc 	bl	8001188 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */
  HAL_TIM_MspPostInit(&htim10);
 8001010:	4803      	ldr	r0, [pc, #12]	; (8001020 <MX_TIM10_Init+0x94>)
 8001012:	f000 f9dd 	bl	80013d0 <HAL_TIM_MspPostInit>

}
 8001016:	bf00      	nop
 8001018:	3720      	adds	r7, #32
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}
 800101e:	bf00      	nop
 8001020:	20005030 	.word	0x20005030
 8001024:	40014400 	.word	0x40014400

08001028 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800102c:	4b14      	ldr	r3, [pc, #80]	; (8001080 <MX_USART1_UART_Init+0x58>)
 800102e:	4a15      	ldr	r2, [pc, #84]	; (8001084 <MX_USART1_UART_Init+0x5c>)
 8001030:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001032:	4b13      	ldr	r3, [pc, #76]	; (8001080 <MX_USART1_UART_Init+0x58>)
 8001034:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001038:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800103a:	4b11      	ldr	r3, [pc, #68]	; (8001080 <MX_USART1_UART_Init+0x58>)
 800103c:	2200      	movs	r2, #0
 800103e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001040:	4b0f      	ldr	r3, [pc, #60]	; (8001080 <MX_USART1_UART_Init+0x58>)
 8001042:	2200      	movs	r2, #0
 8001044:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001046:	4b0e      	ldr	r3, [pc, #56]	; (8001080 <MX_USART1_UART_Init+0x58>)
 8001048:	2200      	movs	r2, #0
 800104a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800104c:	4b0c      	ldr	r3, [pc, #48]	; (8001080 <MX_USART1_UART_Init+0x58>)
 800104e:	220c      	movs	r2, #12
 8001050:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001052:	4b0b      	ldr	r3, [pc, #44]	; (8001080 <MX_USART1_UART_Init+0x58>)
 8001054:	2200      	movs	r2, #0
 8001056:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001058:	4b09      	ldr	r3, [pc, #36]	; (8001080 <MX_USART1_UART_Init+0x58>)
 800105a:	2200      	movs	r2, #0
 800105c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800105e:	4b08      	ldr	r3, [pc, #32]	; (8001080 <MX_USART1_UART_Init+0x58>)
 8001060:	2200      	movs	r2, #0
 8001062:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001064:	4b06      	ldr	r3, [pc, #24]	; (8001080 <MX_USART1_UART_Init+0x58>)
 8001066:	2200      	movs	r2, #0
 8001068:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800106a:	4805      	ldr	r0, [pc, #20]	; (8001080 <MX_USART1_UART_Init+0x58>)
 800106c:	f004 f8d0 	bl	8005210 <HAL_UART_Init>
 8001070:	4603      	mov	r3, r0
 8001072:	2b00      	cmp	r3, #0
 8001074:	d001      	beq.n	800107a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001076:	f000 f887 	bl	8001188 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800107a:	bf00      	nop
 800107c:	bd80      	pop	{r7, pc}
 800107e:	bf00      	nop
 8001080:	2000507c 	.word	0x2000507c
 8001084:	40011000 	.word	0x40011000

08001088 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b08a      	sub	sp, #40	; 0x28
 800108c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800108e:	f107 0314 	add.w	r3, r7, #20
 8001092:	2200      	movs	r2, #0
 8001094:	601a      	str	r2, [r3, #0]
 8001096:	605a      	str	r2, [r3, #4]
 8001098:	609a      	str	r2, [r3, #8]
 800109a:	60da      	str	r2, [r3, #12]
 800109c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800109e:	4b37      	ldr	r3, [pc, #220]	; (800117c <MX_GPIO_Init+0xf4>)
 80010a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010a2:	4a36      	ldr	r2, [pc, #216]	; (800117c <MX_GPIO_Init+0xf4>)
 80010a4:	f043 0302 	orr.w	r3, r3, #2
 80010a8:	6313      	str	r3, [r2, #48]	; 0x30
 80010aa:	4b34      	ldr	r3, [pc, #208]	; (800117c <MX_GPIO_Init+0xf4>)
 80010ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ae:	f003 0302 	and.w	r3, r3, #2
 80010b2:	613b      	str	r3, [r7, #16]
 80010b4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80010b6:	4b31      	ldr	r3, [pc, #196]	; (800117c <MX_GPIO_Init+0xf4>)
 80010b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ba:	4a30      	ldr	r2, [pc, #192]	; (800117c <MX_GPIO_Init+0xf4>)
 80010bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010c0:	6313      	str	r3, [r2, #48]	; 0x30
 80010c2:	4b2e      	ldr	r3, [pc, #184]	; (800117c <MX_GPIO_Init+0xf4>)
 80010c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010ca:	60fb      	str	r3, [r7, #12]
 80010cc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010ce:	4b2b      	ldr	r3, [pc, #172]	; (800117c <MX_GPIO_Init+0xf4>)
 80010d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010d2:	4a2a      	ldr	r2, [pc, #168]	; (800117c <MX_GPIO_Init+0xf4>)
 80010d4:	f043 0301 	orr.w	r3, r3, #1
 80010d8:	6313      	str	r3, [r2, #48]	; 0x30
 80010da:	4b28      	ldr	r3, [pc, #160]	; (800117c <MX_GPIO_Init+0xf4>)
 80010dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010de:	f003 0301 	and.w	r3, r3, #1
 80010e2:	60bb      	str	r3, [r7, #8]
 80010e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010e6:	4b25      	ldr	r3, [pc, #148]	; (800117c <MX_GPIO_Init+0xf4>)
 80010e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ea:	4a24      	ldr	r2, [pc, #144]	; (800117c <MX_GPIO_Init+0xf4>)
 80010ec:	f043 0304 	orr.w	r3, r3, #4
 80010f0:	6313      	str	r3, [r2, #48]	; 0x30
 80010f2:	4b22      	ldr	r3, [pc, #136]	; (800117c <MX_GPIO_Init+0xf4>)
 80010f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010f6:	f003 0304 	and.w	r3, r3, #4
 80010fa:	607b      	str	r3, [r7, #4]
 80010fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80010fe:	4b1f      	ldr	r3, [pc, #124]	; (800117c <MX_GPIO_Init+0xf4>)
 8001100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001102:	4a1e      	ldr	r2, [pc, #120]	; (800117c <MX_GPIO_Init+0xf4>)
 8001104:	f043 0320 	orr.w	r3, r3, #32
 8001108:	6313      	str	r3, [r2, #48]	; 0x30
 800110a:	4b1c      	ldr	r3, [pc, #112]	; (800117c <MX_GPIO_Init+0xf4>)
 800110c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800110e:	f003 0320 	and.w	r3, r3, #32
 8001112:	603b      	str	r3, [r7, #0]
 8001114:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(IR_send_GPIO_Port, IR_send_Pin, GPIO_PIN_RESET);
 8001116:	2200      	movs	r2, #0
 8001118:	2180      	movs	r1, #128	; 0x80
 800111a:	4819      	ldr	r0, [pc, #100]	; (8001180 <MX_GPIO_Init+0xf8>)
 800111c:	f000 fe48 	bl	8001db0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DISPLAY_CS_GPIO_Port, DISPLAY_CS_Pin, GPIO_PIN_SET);
 8001120:	2201      	movs	r2, #1
 8001122:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001126:	4817      	ldr	r0, [pc, #92]	; (8001184 <MX_GPIO_Init+0xfc>)
 8001128:	f000 fe42 	bl	8001db0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, DISPLAY_RESET_Pin|DISPLAY_DC_Pin, GPIO_PIN_RESET);
 800112c:	2200      	movs	r2, #0
 800112e:	f44f 7140 	mov.w	r1, #768	; 0x300
 8001132:	4814      	ldr	r0, [pc, #80]	; (8001184 <MX_GPIO_Init+0xfc>)
 8001134:	f000 fe3c 	bl	8001db0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : IR_send_Pin */
  GPIO_InitStruct.Pin = IR_send_Pin;
 8001138:	2380      	movs	r3, #128	; 0x80
 800113a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800113c:	2301      	movs	r3, #1
 800113e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001140:	2300      	movs	r3, #0
 8001142:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001144:	2303      	movs	r3, #3
 8001146:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(IR_send_GPIO_Port, &GPIO_InitStruct);
 8001148:	f107 0314 	add.w	r3, r7, #20
 800114c:	4619      	mov	r1, r3
 800114e:	480c      	ldr	r0, [pc, #48]	; (8001180 <MX_GPIO_Init+0xf8>)
 8001150:	f000 fc82 	bl	8001a58 <HAL_GPIO_Init>

  /*Configure GPIO pins : DISPLAY_CS_Pin DISPLAY_RESET_Pin DISPLAY_DC_Pin */
  GPIO_InitStruct.Pin = DISPLAY_CS_Pin|DISPLAY_RESET_Pin|DISPLAY_DC_Pin;
 8001154:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8001158:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800115a:	2301      	movs	r3, #1
 800115c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800115e:	2300      	movs	r3, #0
 8001160:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001162:	2303      	movs	r3, #3
 8001164:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001166:	f107 0314 	add.w	r3, r7, #20
 800116a:	4619      	mov	r1, r3
 800116c:	4805      	ldr	r0, [pc, #20]	; (8001184 <MX_GPIO_Init+0xfc>)
 800116e:	f000 fc73 	bl	8001a58 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001172:	bf00      	nop
 8001174:	3728      	adds	r7, #40	; 0x28
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}
 800117a:	bf00      	nop
 800117c:	40023800 	.word	0x40023800
 8001180:	40020800 	.word	0x40020800
 8001184:	40021400 	.word	0x40021400

08001188 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001188:	b480      	push	{r7}
 800118a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800118c:	b672      	cpsid	i
}
 800118e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001190:	e7fe      	b.n	8001190 <Error_Handler+0x8>
	...

08001194 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001194:	b480      	push	{r7}
 8001196:	b083      	sub	sp, #12
 8001198:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800119a:	4b0f      	ldr	r3, [pc, #60]	; (80011d8 <HAL_MspInit+0x44>)
 800119c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800119e:	4a0e      	ldr	r2, [pc, #56]	; (80011d8 <HAL_MspInit+0x44>)
 80011a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011a4:	6413      	str	r3, [r2, #64]	; 0x40
 80011a6:	4b0c      	ldr	r3, [pc, #48]	; (80011d8 <HAL_MspInit+0x44>)
 80011a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011ae:	607b      	str	r3, [r7, #4]
 80011b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011b2:	4b09      	ldr	r3, [pc, #36]	; (80011d8 <HAL_MspInit+0x44>)
 80011b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011b6:	4a08      	ldr	r2, [pc, #32]	; (80011d8 <HAL_MspInit+0x44>)
 80011b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011bc:	6453      	str	r3, [r2, #68]	; 0x44
 80011be:	4b06      	ldr	r3, [pc, #24]	; (80011d8 <HAL_MspInit+0x44>)
 80011c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011c6:	603b      	str	r3, [r7, #0]
 80011c8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011ca:	bf00      	nop
 80011cc:	370c      	adds	r7, #12
 80011ce:	46bd      	mov	sp, r7
 80011d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d4:	4770      	bx	lr
 80011d6:	bf00      	nop
 80011d8:	40023800 	.word	0x40023800

080011dc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b0aa      	sub	sp, #168	; 0xa8
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011e4:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80011e8:	2200      	movs	r2, #0
 80011ea:	601a      	str	r2, [r3, #0]
 80011ec:	605a      	str	r2, [r3, #4]
 80011ee:	609a      	str	r2, [r3, #8]
 80011f0:	60da      	str	r2, [r3, #12]
 80011f2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80011f4:	f107 0310 	add.w	r3, r7, #16
 80011f8:	2284      	movs	r2, #132	; 0x84
 80011fa:	2100      	movs	r1, #0
 80011fc:	4618      	mov	r0, r3
 80011fe:	f004 fd07 	bl	8005c10 <memset>
  if(hi2c->Instance==I2C1)
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	4a22      	ldr	r2, [pc, #136]	; (8001290 <HAL_I2C_MspInit+0xb4>)
 8001208:	4293      	cmp	r3, r2
 800120a:	d13c      	bne.n	8001286 <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800120c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001210:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001212:	2300      	movs	r3, #0
 8001214:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001216:	f107 0310 	add.w	r3, r7, #16
 800121a:	4618      	mov	r0, r3
 800121c:	f002 f83a 	bl	8003294 <HAL_RCCEx_PeriphCLKConfig>
 8001220:	4603      	mov	r3, r0
 8001222:	2b00      	cmp	r3, #0
 8001224:	d001      	beq.n	800122a <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001226:	f7ff ffaf 	bl	8001188 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800122a:	4b1a      	ldr	r3, [pc, #104]	; (8001294 <HAL_I2C_MspInit+0xb8>)
 800122c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800122e:	4a19      	ldr	r2, [pc, #100]	; (8001294 <HAL_I2C_MspInit+0xb8>)
 8001230:	f043 0302 	orr.w	r3, r3, #2
 8001234:	6313      	str	r3, [r2, #48]	; 0x30
 8001236:	4b17      	ldr	r3, [pc, #92]	; (8001294 <HAL_I2C_MspInit+0xb8>)
 8001238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800123a:	f003 0302 	and.w	r3, r3, #2
 800123e:	60fb      	str	r3, [r7, #12]
 8001240:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001242:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001246:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800124a:	2312      	movs	r3, #18
 800124c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001250:	2300      	movs	r3, #0
 8001252:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001256:	2303      	movs	r3, #3
 8001258:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800125c:	2304      	movs	r3, #4
 800125e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001262:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001266:	4619      	mov	r1, r3
 8001268:	480b      	ldr	r0, [pc, #44]	; (8001298 <HAL_I2C_MspInit+0xbc>)
 800126a:	f000 fbf5 	bl	8001a58 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800126e:	4b09      	ldr	r3, [pc, #36]	; (8001294 <HAL_I2C_MspInit+0xb8>)
 8001270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001272:	4a08      	ldr	r2, [pc, #32]	; (8001294 <HAL_I2C_MspInit+0xb8>)
 8001274:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001278:	6413      	str	r3, [r2, #64]	; 0x40
 800127a:	4b06      	ldr	r3, [pc, #24]	; (8001294 <HAL_I2C_MspInit+0xb8>)
 800127c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800127e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001282:	60bb      	str	r3, [r7, #8]
 8001284:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001286:	bf00      	nop
 8001288:	37a8      	adds	r7, #168	; 0xa8
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}
 800128e:	bf00      	nop
 8001290:	40005400 	.word	0x40005400
 8001294:	40023800 	.word	0x40023800
 8001298:	40020400 	.word	0x40020400

0800129c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b08a      	sub	sp, #40	; 0x28
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012a4:	f107 0314 	add.w	r3, r7, #20
 80012a8:	2200      	movs	r2, #0
 80012aa:	601a      	str	r2, [r3, #0]
 80012ac:	605a      	str	r2, [r3, #4]
 80012ae:	609a      	str	r2, [r3, #8]
 80012b0:	60da      	str	r2, [r3, #12]
 80012b2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	4a25      	ldr	r2, [pc, #148]	; (8001350 <HAL_SPI_MspInit+0xb4>)
 80012ba:	4293      	cmp	r3, r2
 80012bc:	d144      	bne.n	8001348 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80012be:	4b25      	ldr	r3, [pc, #148]	; (8001354 <HAL_SPI_MspInit+0xb8>)
 80012c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012c2:	4a24      	ldr	r2, [pc, #144]	; (8001354 <HAL_SPI_MspInit+0xb8>)
 80012c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012c8:	6413      	str	r3, [r2, #64]	; 0x40
 80012ca:	4b22      	ldr	r3, [pc, #136]	; (8001354 <HAL_SPI_MspInit+0xb8>)
 80012cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012d2:	613b      	str	r3, [r7, #16]
 80012d4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOI_CLK_ENABLE();
 80012d6:	4b1f      	ldr	r3, [pc, #124]	; (8001354 <HAL_SPI_MspInit+0xb8>)
 80012d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012da:	4a1e      	ldr	r2, [pc, #120]	; (8001354 <HAL_SPI_MspInit+0xb8>)
 80012dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012e0:	6313      	str	r3, [r2, #48]	; 0x30
 80012e2:	4b1c      	ldr	r3, [pc, #112]	; (8001354 <HAL_SPI_MspInit+0xb8>)
 80012e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012ea:	60fb      	str	r3, [r7, #12]
 80012ec:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012ee:	4b19      	ldr	r3, [pc, #100]	; (8001354 <HAL_SPI_MspInit+0xb8>)
 80012f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012f2:	4a18      	ldr	r2, [pc, #96]	; (8001354 <HAL_SPI_MspInit+0xb8>)
 80012f4:	f043 0302 	orr.w	r3, r3, #2
 80012f8:	6313      	str	r3, [r2, #48]	; 0x30
 80012fa:	4b16      	ldr	r3, [pc, #88]	; (8001354 <HAL_SPI_MspInit+0xb8>)
 80012fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012fe:	f003 0302 	and.w	r3, r3, #2
 8001302:	60bb      	str	r3, [r7, #8]
 8001304:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PI1     ------> SPI2_SCK
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001306:	2302      	movs	r3, #2
 8001308:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800130a:	2302      	movs	r3, #2
 800130c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800130e:	2300      	movs	r3, #0
 8001310:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001312:	2303      	movs	r3, #3
 8001314:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001316:	2305      	movs	r3, #5
 8001318:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800131a:	f107 0314 	add.w	r3, r7, #20
 800131e:	4619      	mov	r1, r3
 8001320:	480d      	ldr	r0, [pc, #52]	; (8001358 <HAL_SPI_MspInit+0xbc>)
 8001322:	f000 fb99 	bl	8001a58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001326:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800132a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800132c:	2302      	movs	r3, #2
 800132e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001330:	2300      	movs	r3, #0
 8001332:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001334:	2303      	movs	r3, #3
 8001336:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001338:	2305      	movs	r3, #5
 800133a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800133c:	f107 0314 	add.w	r3, r7, #20
 8001340:	4619      	mov	r1, r3
 8001342:	4806      	ldr	r0, [pc, #24]	; (800135c <HAL_SPI_MspInit+0xc0>)
 8001344:	f000 fb88 	bl	8001a58 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001348:	bf00      	nop
 800134a:	3728      	adds	r7, #40	; 0x28
 800134c:	46bd      	mov	sp, r7
 800134e:	bd80      	pop	{r7, pc}
 8001350:	40003800 	.word	0x40003800
 8001354:	40023800 	.word	0x40023800
 8001358:	40022000 	.word	0x40022000
 800135c:	40020400 	.word	0x40020400

08001360 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b084      	sub	sp, #16
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001370:	d114      	bne.n	800139c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001372:	4b15      	ldr	r3, [pc, #84]	; (80013c8 <HAL_TIM_Base_MspInit+0x68>)
 8001374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001376:	4a14      	ldr	r2, [pc, #80]	; (80013c8 <HAL_TIM_Base_MspInit+0x68>)
 8001378:	f043 0301 	orr.w	r3, r3, #1
 800137c:	6413      	str	r3, [r2, #64]	; 0x40
 800137e:	4b12      	ldr	r3, [pc, #72]	; (80013c8 <HAL_TIM_Base_MspInit+0x68>)
 8001380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001382:	f003 0301 	and.w	r3, r3, #1
 8001386:	60fb      	str	r3, [r7, #12]
 8001388:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800138a:	2200      	movs	r2, #0
 800138c:	2100      	movs	r1, #0
 800138e:	201c      	movs	r0, #28
 8001390:	f000 fb2b 	bl	80019ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001394:	201c      	movs	r0, #28
 8001396:	f000 fb44 	bl	8001a22 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 800139a:	e010      	b.n	80013be <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM10)
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	4a0a      	ldr	r2, [pc, #40]	; (80013cc <HAL_TIM_Base_MspInit+0x6c>)
 80013a2:	4293      	cmp	r3, r2
 80013a4:	d10b      	bne.n	80013be <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM10_CLK_ENABLE();
 80013a6:	4b08      	ldr	r3, [pc, #32]	; (80013c8 <HAL_TIM_Base_MspInit+0x68>)
 80013a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013aa:	4a07      	ldr	r2, [pc, #28]	; (80013c8 <HAL_TIM_Base_MspInit+0x68>)
 80013ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013b0:	6453      	str	r3, [r2, #68]	; 0x44
 80013b2:	4b05      	ldr	r3, [pc, #20]	; (80013c8 <HAL_TIM_Base_MspInit+0x68>)
 80013b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013ba:	60bb      	str	r3, [r7, #8]
 80013bc:	68bb      	ldr	r3, [r7, #8]
}
 80013be:	bf00      	nop
 80013c0:	3710      	adds	r7, #16
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}
 80013c6:	bf00      	nop
 80013c8:	40023800 	.word	0x40023800
 80013cc:	40014400 	.word	0x40014400

080013d0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b088      	sub	sp, #32
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013d8:	f107 030c 	add.w	r3, r7, #12
 80013dc:	2200      	movs	r2, #0
 80013de:	601a      	str	r2, [r3, #0]
 80013e0:	605a      	str	r2, [r3, #4]
 80013e2:	609a      	str	r2, [r3, #8]
 80013e4:	60da      	str	r2, [r3, #12]
 80013e6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM10)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	4a11      	ldr	r2, [pc, #68]	; (8001434 <HAL_TIM_MspPostInit+0x64>)
 80013ee:	4293      	cmp	r3, r2
 80013f0:	d11b      	bne.n	800142a <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM10_MspPostInit 0 */

  /* USER CODE END TIM10_MspPostInit 0 */

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80013f2:	4b11      	ldr	r3, [pc, #68]	; (8001438 <HAL_TIM_MspPostInit+0x68>)
 80013f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013f6:	4a10      	ldr	r2, [pc, #64]	; (8001438 <HAL_TIM_MspPostInit+0x68>)
 80013f8:	f043 0320 	orr.w	r3, r3, #32
 80013fc:	6313      	str	r3, [r2, #48]	; 0x30
 80013fe:	4b0e      	ldr	r3, [pc, #56]	; (8001438 <HAL_TIM_MspPostInit+0x68>)
 8001400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001402:	f003 0320 	and.w	r3, r3, #32
 8001406:	60bb      	str	r3, [r7, #8]
 8001408:	68bb      	ldr	r3, [r7, #8]
    /**TIM10 GPIO Configuration
    PF6     ------> TIM10_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800140a:	2340      	movs	r3, #64	; 0x40
 800140c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800140e:	2302      	movs	r3, #2
 8001410:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001412:	2300      	movs	r3, #0
 8001414:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001416:	2300      	movs	r3, #0
 8001418:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 800141a:	2303      	movs	r3, #3
 800141c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800141e:	f107 030c 	add.w	r3, r7, #12
 8001422:	4619      	mov	r1, r3
 8001424:	4805      	ldr	r0, [pc, #20]	; (800143c <HAL_TIM_MspPostInit+0x6c>)
 8001426:	f000 fb17 	bl	8001a58 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM10_MspPostInit 1 */

  /* USER CODE END TIM10_MspPostInit 1 */
  }

}
 800142a:	bf00      	nop
 800142c:	3720      	adds	r7, #32
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}
 8001432:	bf00      	nop
 8001434:	40014400 	.word	0x40014400
 8001438:	40023800 	.word	0x40023800
 800143c:	40021400 	.word	0x40021400

08001440 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b0ac      	sub	sp, #176	; 0xb0
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001448:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800144c:	2200      	movs	r2, #0
 800144e:	601a      	str	r2, [r3, #0]
 8001450:	605a      	str	r2, [r3, #4]
 8001452:	609a      	str	r2, [r3, #8]
 8001454:	60da      	str	r2, [r3, #12]
 8001456:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001458:	f107 0318 	add.w	r3, r7, #24
 800145c:	2284      	movs	r2, #132	; 0x84
 800145e:	2100      	movs	r1, #0
 8001460:	4618      	mov	r0, r3
 8001462:	f004 fbd5 	bl	8005c10 <memset>
  if(huart->Instance==USART1)
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	4a32      	ldr	r2, [pc, #200]	; (8001534 <HAL_UART_MspInit+0xf4>)
 800146c:	4293      	cmp	r3, r2
 800146e:	d15c      	bne.n	800152a <HAL_UART_MspInit+0xea>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001470:	2340      	movs	r3, #64	; 0x40
 8001472:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001474:	2300      	movs	r3, #0
 8001476:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001478:	f107 0318 	add.w	r3, r7, #24
 800147c:	4618      	mov	r0, r3
 800147e:	f001 ff09 	bl	8003294 <HAL_RCCEx_PeriphCLKConfig>
 8001482:	4603      	mov	r3, r0
 8001484:	2b00      	cmp	r3, #0
 8001486:	d001      	beq.n	800148c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001488:	f7ff fe7e 	bl	8001188 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800148c:	4b2a      	ldr	r3, [pc, #168]	; (8001538 <HAL_UART_MspInit+0xf8>)
 800148e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001490:	4a29      	ldr	r2, [pc, #164]	; (8001538 <HAL_UART_MspInit+0xf8>)
 8001492:	f043 0310 	orr.w	r3, r3, #16
 8001496:	6453      	str	r3, [r2, #68]	; 0x44
 8001498:	4b27      	ldr	r3, [pc, #156]	; (8001538 <HAL_UART_MspInit+0xf8>)
 800149a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800149c:	f003 0310 	and.w	r3, r3, #16
 80014a0:	617b      	str	r3, [r7, #20]
 80014a2:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014a4:	4b24      	ldr	r3, [pc, #144]	; (8001538 <HAL_UART_MspInit+0xf8>)
 80014a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014a8:	4a23      	ldr	r2, [pc, #140]	; (8001538 <HAL_UART_MspInit+0xf8>)
 80014aa:	f043 0302 	orr.w	r3, r3, #2
 80014ae:	6313      	str	r3, [r2, #48]	; 0x30
 80014b0:	4b21      	ldr	r3, [pc, #132]	; (8001538 <HAL_UART_MspInit+0xf8>)
 80014b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014b4:	f003 0302 	and.w	r3, r3, #2
 80014b8:	613b      	str	r3, [r7, #16]
 80014ba:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014bc:	4b1e      	ldr	r3, [pc, #120]	; (8001538 <HAL_UART_MspInit+0xf8>)
 80014be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014c0:	4a1d      	ldr	r2, [pc, #116]	; (8001538 <HAL_UART_MspInit+0xf8>)
 80014c2:	f043 0301 	orr.w	r3, r3, #1
 80014c6:	6313      	str	r3, [r2, #48]	; 0x30
 80014c8:	4b1b      	ldr	r3, [pc, #108]	; (8001538 <HAL_UART_MspInit+0xf8>)
 80014ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014cc:	f003 0301 	and.w	r3, r3, #1
 80014d0:	60fb      	str	r3, [r7, #12]
 80014d2:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80014d4:	2380      	movs	r3, #128	; 0x80
 80014d6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014da:	2302      	movs	r3, #2
 80014dc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e0:	2300      	movs	r3, #0
 80014e2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014e6:	2303      	movs	r3, #3
 80014e8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80014ec:	2307      	movs	r3, #7
 80014ee:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014f2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80014f6:	4619      	mov	r1, r3
 80014f8:	4810      	ldr	r0, [pc, #64]	; (800153c <HAL_UART_MspInit+0xfc>)
 80014fa:	f000 faad 	bl	8001a58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80014fe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001502:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001506:	2302      	movs	r3, #2
 8001508:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800150c:	2300      	movs	r3, #0
 800150e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001512:	2303      	movs	r3, #3
 8001514:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001518:	2307      	movs	r3, #7
 800151a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800151e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001522:	4619      	mov	r1, r3
 8001524:	4806      	ldr	r0, [pc, #24]	; (8001540 <HAL_UART_MspInit+0x100>)
 8001526:	f000 fa97 	bl	8001a58 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800152a:	bf00      	nop
 800152c:	37b0      	adds	r7, #176	; 0xb0
 800152e:	46bd      	mov	sp, r7
 8001530:	bd80      	pop	{r7, pc}
 8001532:	bf00      	nop
 8001534:	40011000 	.word	0x40011000
 8001538:	40023800 	.word	0x40023800
 800153c:	40020400 	.word	0x40020400
 8001540:	40020000 	.word	0x40020000

08001544 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001544:	b480      	push	{r7}
 8001546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001548:	e7fe      	b.n	8001548 <NMI_Handler+0x4>

0800154a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800154a:	b480      	push	{r7}
 800154c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800154e:	e7fe      	b.n	800154e <HardFault_Handler+0x4>

08001550 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001550:	b480      	push	{r7}
 8001552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001554:	e7fe      	b.n	8001554 <MemManage_Handler+0x4>

08001556 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001556:	b480      	push	{r7}
 8001558:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800155a:	e7fe      	b.n	800155a <BusFault_Handler+0x4>

0800155c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800155c:	b480      	push	{r7}
 800155e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001560:	e7fe      	b.n	8001560 <UsageFault_Handler+0x4>

08001562 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001562:	b480      	push	{r7}
 8001564:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001566:	bf00      	nop
 8001568:	46bd      	mov	sp, r7
 800156a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156e:	4770      	bx	lr

08001570 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001570:	b480      	push	{r7}
 8001572:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001574:	bf00      	nop
 8001576:	46bd      	mov	sp, r7
 8001578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157c:	4770      	bx	lr

0800157e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800157e:	b480      	push	{r7}
 8001580:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001582:	bf00      	nop
 8001584:	46bd      	mov	sp, r7
 8001586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158a:	4770      	bx	lr

0800158c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001590:	f000 f90c 	bl	80017ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001594:	bf00      	nop
 8001596:	bd80      	pop	{r7, pc}

08001598 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800159c:	4802      	ldr	r0, [pc, #8]	; (80015a8 <TIM2_IRQHandler+0x10>)
 800159e:	f002 fec3 	bl	8004328 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80015a2:	bf00      	nop
 80015a4:	bd80      	pop	{r7, pc}
 80015a6:	bf00      	nop
 80015a8:	20004fe4 	.word	0x20004fe4

080015ac <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b086      	sub	sp, #24
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	60f8      	str	r0, [r7, #12]
 80015b4:	60b9      	str	r1, [r7, #8]
 80015b6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015b8:	2300      	movs	r3, #0
 80015ba:	617b      	str	r3, [r7, #20]
 80015bc:	e00a      	b.n	80015d4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80015be:	f3af 8000 	nop.w
 80015c2:	4601      	mov	r1, r0
 80015c4:	68bb      	ldr	r3, [r7, #8]
 80015c6:	1c5a      	adds	r2, r3, #1
 80015c8:	60ba      	str	r2, [r7, #8]
 80015ca:	b2ca      	uxtb	r2, r1
 80015cc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015ce:	697b      	ldr	r3, [r7, #20]
 80015d0:	3301      	adds	r3, #1
 80015d2:	617b      	str	r3, [r7, #20]
 80015d4:	697a      	ldr	r2, [r7, #20]
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	429a      	cmp	r2, r3
 80015da:	dbf0      	blt.n	80015be <_read+0x12>
  }

  return len;
 80015dc:	687b      	ldr	r3, [r7, #4]
}
 80015de:	4618      	mov	r0, r3
 80015e0:	3718      	adds	r7, #24
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bd80      	pop	{r7, pc}

080015e6 <_close>:
  }
  return len;
}

int _close(int file)
{
 80015e6:	b480      	push	{r7}
 80015e8:	b083      	sub	sp, #12
 80015ea:	af00      	add	r7, sp, #0
 80015ec:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80015ee:	f04f 33ff 	mov.w	r3, #4294967295
}
 80015f2:	4618      	mov	r0, r3
 80015f4:	370c      	adds	r7, #12
 80015f6:	46bd      	mov	sp, r7
 80015f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fc:	4770      	bx	lr

080015fe <_fstat>:


int _fstat(int file, struct stat *st)
{
 80015fe:	b480      	push	{r7}
 8001600:	b083      	sub	sp, #12
 8001602:	af00      	add	r7, sp, #0
 8001604:	6078      	str	r0, [r7, #4]
 8001606:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001608:	683b      	ldr	r3, [r7, #0]
 800160a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800160e:	605a      	str	r2, [r3, #4]
  return 0;
 8001610:	2300      	movs	r3, #0
}
 8001612:	4618      	mov	r0, r3
 8001614:	370c      	adds	r7, #12
 8001616:	46bd      	mov	sp, r7
 8001618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161c:	4770      	bx	lr

0800161e <_isatty>:

int _isatty(int file)
{
 800161e:	b480      	push	{r7}
 8001620:	b083      	sub	sp, #12
 8001622:	af00      	add	r7, sp, #0
 8001624:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001626:	2301      	movs	r3, #1
}
 8001628:	4618      	mov	r0, r3
 800162a:	370c      	adds	r7, #12
 800162c:	46bd      	mov	sp, r7
 800162e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001632:	4770      	bx	lr

08001634 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001634:	b480      	push	{r7}
 8001636:	b085      	sub	sp, #20
 8001638:	af00      	add	r7, sp, #0
 800163a:	60f8      	str	r0, [r7, #12]
 800163c:	60b9      	str	r1, [r7, #8]
 800163e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001640:	2300      	movs	r3, #0
}
 8001642:	4618      	mov	r0, r3
 8001644:	3714      	adds	r7, #20
 8001646:	46bd      	mov	sp, r7
 8001648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164c:	4770      	bx	lr
	...

08001650 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b086      	sub	sp, #24
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001658:	4a14      	ldr	r2, [pc, #80]	; (80016ac <_sbrk+0x5c>)
 800165a:	4b15      	ldr	r3, [pc, #84]	; (80016b0 <_sbrk+0x60>)
 800165c:	1ad3      	subs	r3, r2, r3
 800165e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001660:	697b      	ldr	r3, [r7, #20]
 8001662:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001664:	4b13      	ldr	r3, [pc, #76]	; (80016b4 <_sbrk+0x64>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	2b00      	cmp	r3, #0
 800166a:	d102      	bne.n	8001672 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800166c:	4b11      	ldr	r3, [pc, #68]	; (80016b4 <_sbrk+0x64>)
 800166e:	4a12      	ldr	r2, [pc, #72]	; (80016b8 <_sbrk+0x68>)
 8001670:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001672:	4b10      	ldr	r3, [pc, #64]	; (80016b4 <_sbrk+0x64>)
 8001674:	681a      	ldr	r2, [r3, #0]
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	4413      	add	r3, r2
 800167a:	693a      	ldr	r2, [r7, #16]
 800167c:	429a      	cmp	r2, r3
 800167e:	d207      	bcs.n	8001690 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001680:	f004 fa9c 	bl	8005bbc <__errno>
 8001684:	4603      	mov	r3, r0
 8001686:	220c      	movs	r2, #12
 8001688:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800168a:	f04f 33ff 	mov.w	r3, #4294967295
 800168e:	e009      	b.n	80016a4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001690:	4b08      	ldr	r3, [pc, #32]	; (80016b4 <_sbrk+0x64>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001696:	4b07      	ldr	r3, [pc, #28]	; (80016b4 <_sbrk+0x64>)
 8001698:	681a      	ldr	r2, [r3, #0]
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	4413      	add	r3, r2
 800169e:	4a05      	ldr	r2, [pc, #20]	; (80016b4 <_sbrk+0x64>)
 80016a0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80016a2:	68fb      	ldr	r3, [r7, #12]
}
 80016a4:	4618      	mov	r0, r3
 80016a6:	3718      	adds	r7, #24
 80016a8:	46bd      	mov	sp, r7
 80016aa:	bd80      	pop	{r7, pc}
 80016ac:	20050000 	.word	0x20050000
 80016b0:	00000400 	.word	0x00000400
 80016b4:	20005104 	.word	0x20005104
 80016b8:	20005120 	.word	0x20005120

080016bc <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80016bc:	b480      	push	{r7}
 80016be:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80016c0:	4b06      	ldr	r3, [pc, #24]	; (80016dc <SystemInit+0x20>)
 80016c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80016c6:	4a05      	ldr	r2, [pc, #20]	; (80016dc <SystemInit+0x20>)
 80016c8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80016cc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80016d0:	bf00      	nop
 80016d2:	46bd      	mov	sp, r7
 80016d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d8:	4770      	bx	lr
 80016da:	bf00      	nop
 80016dc:	e000ed00 	.word	0xe000ed00

080016e0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80016e0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001718 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80016e4:	480d      	ldr	r0, [pc, #52]	; (800171c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80016e6:	490e      	ldr	r1, [pc, #56]	; (8001720 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80016e8:	4a0e      	ldr	r2, [pc, #56]	; (8001724 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80016ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016ec:	e002      	b.n	80016f4 <LoopCopyDataInit>

080016ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016f2:	3304      	adds	r3, #4

080016f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016f8:	d3f9      	bcc.n	80016ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016fa:	4a0b      	ldr	r2, [pc, #44]	; (8001728 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80016fc:	4c0b      	ldr	r4, [pc, #44]	; (800172c <LoopFillZerobss+0x26>)
  movs r3, #0
 80016fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001700:	e001      	b.n	8001706 <LoopFillZerobss>

08001702 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001702:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001704:	3204      	adds	r2, #4

08001706 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001706:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001708:	d3fb      	bcc.n	8001702 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800170a:	f7ff ffd7 	bl	80016bc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800170e:	f004 fa5b 	bl	8005bc8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001712:	f7ff fae9 	bl	8000ce8 <main>
  bx  lr    
 8001716:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001718:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 800171c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001720:	20004f10 	.word	0x20004f10
  ldr r2, =_sidata
 8001724:	08007048 	.word	0x08007048
  ldr r2, =_sbss
 8001728:	20004f10 	.word	0x20004f10
  ldr r4, =_ebss
 800172c:	2000511c 	.word	0x2000511c

08001730 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001730:	e7fe      	b.n	8001730 <ADC_IRQHandler>

08001732 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001732:	b580      	push	{r7, lr}
 8001734:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001736:	2003      	movs	r0, #3
 8001738:	f000 f94c 	bl	80019d4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800173c:	2000      	movs	r0, #0
 800173e:	f000 f805 	bl	800174c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001742:	f7ff fd27 	bl	8001194 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001746:	2300      	movs	r3, #0
}
 8001748:	4618      	mov	r0, r3
 800174a:	bd80      	pop	{r7, pc}

0800174c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b082      	sub	sp, #8
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001754:	4b12      	ldr	r3, [pc, #72]	; (80017a0 <HAL_InitTick+0x54>)
 8001756:	681a      	ldr	r2, [r3, #0]
 8001758:	4b12      	ldr	r3, [pc, #72]	; (80017a4 <HAL_InitTick+0x58>)
 800175a:	781b      	ldrb	r3, [r3, #0]
 800175c:	4619      	mov	r1, r3
 800175e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001762:	fbb3 f3f1 	udiv	r3, r3, r1
 8001766:	fbb2 f3f3 	udiv	r3, r2, r3
 800176a:	4618      	mov	r0, r3
 800176c:	f000 f967 	bl	8001a3e <HAL_SYSTICK_Config>
 8001770:	4603      	mov	r3, r0
 8001772:	2b00      	cmp	r3, #0
 8001774:	d001      	beq.n	800177a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001776:	2301      	movs	r3, #1
 8001778:	e00e      	b.n	8001798 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	2b0f      	cmp	r3, #15
 800177e:	d80a      	bhi.n	8001796 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001780:	2200      	movs	r2, #0
 8001782:	6879      	ldr	r1, [r7, #4]
 8001784:	f04f 30ff 	mov.w	r0, #4294967295
 8001788:	f000 f92f 	bl	80019ea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800178c:	4a06      	ldr	r2, [pc, #24]	; (80017a8 <HAL_InitTick+0x5c>)
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001792:	2300      	movs	r3, #0
 8001794:	e000      	b.n	8001798 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001796:	2301      	movs	r3, #1
}
 8001798:	4618      	mov	r0, r3
 800179a:	3708      	adds	r7, #8
 800179c:	46bd      	mov	sp, r7
 800179e:	bd80      	pop	{r7, pc}
 80017a0:	20004ea0 	.word	0x20004ea0
 80017a4:	20004ea8 	.word	0x20004ea8
 80017a8:	20004ea4 	.word	0x20004ea4

080017ac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017ac:	b480      	push	{r7}
 80017ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80017b0:	4b06      	ldr	r3, [pc, #24]	; (80017cc <HAL_IncTick+0x20>)
 80017b2:	781b      	ldrb	r3, [r3, #0]
 80017b4:	461a      	mov	r2, r3
 80017b6:	4b06      	ldr	r3, [pc, #24]	; (80017d0 <HAL_IncTick+0x24>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	4413      	add	r3, r2
 80017bc:	4a04      	ldr	r2, [pc, #16]	; (80017d0 <HAL_IncTick+0x24>)
 80017be:	6013      	str	r3, [r2, #0]
}
 80017c0:	bf00      	nop
 80017c2:	46bd      	mov	sp, r7
 80017c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c8:	4770      	bx	lr
 80017ca:	bf00      	nop
 80017cc:	20004ea8 	.word	0x20004ea8
 80017d0:	20005108 	.word	0x20005108

080017d4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017d4:	b480      	push	{r7}
 80017d6:	af00      	add	r7, sp, #0
  return uwTick;
 80017d8:	4b03      	ldr	r3, [pc, #12]	; (80017e8 <HAL_GetTick+0x14>)
 80017da:	681b      	ldr	r3, [r3, #0]
}
 80017dc:	4618      	mov	r0, r3
 80017de:	46bd      	mov	sp, r7
 80017e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e4:	4770      	bx	lr
 80017e6:	bf00      	nop
 80017e8:	20005108 	.word	0x20005108

080017ec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b084      	sub	sp, #16
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80017f4:	f7ff ffee 	bl	80017d4 <HAL_GetTick>
 80017f8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001804:	d005      	beq.n	8001812 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001806:	4b0a      	ldr	r3, [pc, #40]	; (8001830 <HAL_Delay+0x44>)
 8001808:	781b      	ldrb	r3, [r3, #0]
 800180a:	461a      	mov	r2, r3
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	4413      	add	r3, r2
 8001810:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001812:	bf00      	nop
 8001814:	f7ff ffde 	bl	80017d4 <HAL_GetTick>
 8001818:	4602      	mov	r2, r0
 800181a:	68bb      	ldr	r3, [r7, #8]
 800181c:	1ad3      	subs	r3, r2, r3
 800181e:	68fa      	ldr	r2, [r7, #12]
 8001820:	429a      	cmp	r2, r3
 8001822:	d8f7      	bhi.n	8001814 <HAL_Delay+0x28>
  {
  }
}
 8001824:	bf00      	nop
 8001826:	bf00      	nop
 8001828:	3710      	adds	r7, #16
 800182a:	46bd      	mov	sp, r7
 800182c:	bd80      	pop	{r7, pc}
 800182e:	bf00      	nop
 8001830:	20004ea8 	.word	0x20004ea8

08001834 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001834:	b480      	push	{r7}
 8001836:	b085      	sub	sp, #20
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	f003 0307 	and.w	r3, r3, #7
 8001842:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001844:	4b0b      	ldr	r3, [pc, #44]	; (8001874 <__NVIC_SetPriorityGrouping+0x40>)
 8001846:	68db      	ldr	r3, [r3, #12]
 8001848:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800184a:	68ba      	ldr	r2, [r7, #8]
 800184c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001850:	4013      	ands	r3, r2
 8001852:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001858:	68bb      	ldr	r3, [r7, #8]
 800185a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800185c:	4b06      	ldr	r3, [pc, #24]	; (8001878 <__NVIC_SetPriorityGrouping+0x44>)
 800185e:	4313      	orrs	r3, r2
 8001860:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001862:	4a04      	ldr	r2, [pc, #16]	; (8001874 <__NVIC_SetPriorityGrouping+0x40>)
 8001864:	68bb      	ldr	r3, [r7, #8]
 8001866:	60d3      	str	r3, [r2, #12]
}
 8001868:	bf00      	nop
 800186a:	3714      	adds	r7, #20
 800186c:	46bd      	mov	sp, r7
 800186e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001872:	4770      	bx	lr
 8001874:	e000ed00 	.word	0xe000ed00
 8001878:	05fa0000 	.word	0x05fa0000

0800187c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800187c:	b480      	push	{r7}
 800187e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001880:	4b04      	ldr	r3, [pc, #16]	; (8001894 <__NVIC_GetPriorityGrouping+0x18>)
 8001882:	68db      	ldr	r3, [r3, #12]
 8001884:	0a1b      	lsrs	r3, r3, #8
 8001886:	f003 0307 	and.w	r3, r3, #7
}
 800188a:	4618      	mov	r0, r3
 800188c:	46bd      	mov	sp, r7
 800188e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001892:	4770      	bx	lr
 8001894:	e000ed00 	.word	0xe000ed00

08001898 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001898:	b480      	push	{r7}
 800189a:	b083      	sub	sp, #12
 800189c:	af00      	add	r7, sp, #0
 800189e:	4603      	mov	r3, r0
 80018a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	db0b      	blt.n	80018c2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018aa:	79fb      	ldrb	r3, [r7, #7]
 80018ac:	f003 021f 	and.w	r2, r3, #31
 80018b0:	4907      	ldr	r1, [pc, #28]	; (80018d0 <__NVIC_EnableIRQ+0x38>)
 80018b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018b6:	095b      	lsrs	r3, r3, #5
 80018b8:	2001      	movs	r0, #1
 80018ba:	fa00 f202 	lsl.w	r2, r0, r2
 80018be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80018c2:	bf00      	nop
 80018c4:	370c      	adds	r7, #12
 80018c6:	46bd      	mov	sp, r7
 80018c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018cc:	4770      	bx	lr
 80018ce:	bf00      	nop
 80018d0:	e000e100 	.word	0xe000e100

080018d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018d4:	b480      	push	{r7}
 80018d6:	b083      	sub	sp, #12
 80018d8:	af00      	add	r7, sp, #0
 80018da:	4603      	mov	r3, r0
 80018dc:	6039      	str	r1, [r7, #0]
 80018de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	db0a      	blt.n	80018fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018e8:	683b      	ldr	r3, [r7, #0]
 80018ea:	b2da      	uxtb	r2, r3
 80018ec:	490c      	ldr	r1, [pc, #48]	; (8001920 <__NVIC_SetPriority+0x4c>)
 80018ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018f2:	0112      	lsls	r2, r2, #4
 80018f4:	b2d2      	uxtb	r2, r2
 80018f6:	440b      	add	r3, r1
 80018f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018fc:	e00a      	b.n	8001914 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018fe:	683b      	ldr	r3, [r7, #0]
 8001900:	b2da      	uxtb	r2, r3
 8001902:	4908      	ldr	r1, [pc, #32]	; (8001924 <__NVIC_SetPriority+0x50>)
 8001904:	79fb      	ldrb	r3, [r7, #7]
 8001906:	f003 030f 	and.w	r3, r3, #15
 800190a:	3b04      	subs	r3, #4
 800190c:	0112      	lsls	r2, r2, #4
 800190e:	b2d2      	uxtb	r2, r2
 8001910:	440b      	add	r3, r1
 8001912:	761a      	strb	r2, [r3, #24]
}
 8001914:	bf00      	nop
 8001916:	370c      	adds	r7, #12
 8001918:	46bd      	mov	sp, r7
 800191a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191e:	4770      	bx	lr
 8001920:	e000e100 	.word	0xe000e100
 8001924:	e000ed00 	.word	0xe000ed00

08001928 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001928:	b480      	push	{r7}
 800192a:	b089      	sub	sp, #36	; 0x24
 800192c:	af00      	add	r7, sp, #0
 800192e:	60f8      	str	r0, [r7, #12]
 8001930:	60b9      	str	r1, [r7, #8]
 8001932:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	f003 0307 	and.w	r3, r3, #7
 800193a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800193c:	69fb      	ldr	r3, [r7, #28]
 800193e:	f1c3 0307 	rsb	r3, r3, #7
 8001942:	2b04      	cmp	r3, #4
 8001944:	bf28      	it	cs
 8001946:	2304      	movcs	r3, #4
 8001948:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800194a:	69fb      	ldr	r3, [r7, #28]
 800194c:	3304      	adds	r3, #4
 800194e:	2b06      	cmp	r3, #6
 8001950:	d902      	bls.n	8001958 <NVIC_EncodePriority+0x30>
 8001952:	69fb      	ldr	r3, [r7, #28]
 8001954:	3b03      	subs	r3, #3
 8001956:	e000      	b.n	800195a <NVIC_EncodePriority+0x32>
 8001958:	2300      	movs	r3, #0
 800195a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800195c:	f04f 32ff 	mov.w	r2, #4294967295
 8001960:	69bb      	ldr	r3, [r7, #24]
 8001962:	fa02 f303 	lsl.w	r3, r2, r3
 8001966:	43da      	mvns	r2, r3
 8001968:	68bb      	ldr	r3, [r7, #8]
 800196a:	401a      	ands	r2, r3
 800196c:	697b      	ldr	r3, [r7, #20]
 800196e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001970:	f04f 31ff 	mov.w	r1, #4294967295
 8001974:	697b      	ldr	r3, [r7, #20]
 8001976:	fa01 f303 	lsl.w	r3, r1, r3
 800197a:	43d9      	mvns	r1, r3
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001980:	4313      	orrs	r3, r2
         );
}
 8001982:	4618      	mov	r0, r3
 8001984:	3724      	adds	r7, #36	; 0x24
 8001986:	46bd      	mov	sp, r7
 8001988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198c:	4770      	bx	lr
	...

08001990 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b082      	sub	sp, #8
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	3b01      	subs	r3, #1
 800199c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80019a0:	d301      	bcc.n	80019a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019a2:	2301      	movs	r3, #1
 80019a4:	e00f      	b.n	80019c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019a6:	4a0a      	ldr	r2, [pc, #40]	; (80019d0 <SysTick_Config+0x40>)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	3b01      	subs	r3, #1
 80019ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019ae:	210f      	movs	r1, #15
 80019b0:	f04f 30ff 	mov.w	r0, #4294967295
 80019b4:	f7ff ff8e 	bl	80018d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019b8:	4b05      	ldr	r3, [pc, #20]	; (80019d0 <SysTick_Config+0x40>)
 80019ba:	2200      	movs	r2, #0
 80019bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019be:	4b04      	ldr	r3, [pc, #16]	; (80019d0 <SysTick_Config+0x40>)
 80019c0:	2207      	movs	r2, #7
 80019c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019c4:	2300      	movs	r3, #0
}
 80019c6:	4618      	mov	r0, r3
 80019c8:	3708      	adds	r7, #8
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bd80      	pop	{r7, pc}
 80019ce:	bf00      	nop
 80019d0:	e000e010 	.word	0xe000e010

080019d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b082      	sub	sp, #8
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019dc:	6878      	ldr	r0, [r7, #4]
 80019de:	f7ff ff29 	bl	8001834 <__NVIC_SetPriorityGrouping>
}
 80019e2:	bf00      	nop
 80019e4:	3708      	adds	r7, #8
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bd80      	pop	{r7, pc}

080019ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80019ea:	b580      	push	{r7, lr}
 80019ec:	b086      	sub	sp, #24
 80019ee:	af00      	add	r7, sp, #0
 80019f0:	4603      	mov	r3, r0
 80019f2:	60b9      	str	r1, [r7, #8]
 80019f4:	607a      	str	r2, [r7, #4]
 80019f6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80019f8:	2300      	movs	r3, #0
 80019fa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80019fc:	f7ff ff3e 	bl	800187c <__NVIC_GetPriorityGrouping>
 8001a00:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a02:	687a      	ldr	r2, [r7, #4]
 8001a04:	68b9      	ldr	r1, [r7, #8]
 8001a06:	6978      	ldr	r0, [r7, #20]
 8001a08:	f7ff ff8e 	bl	8001928 <NVIC_EncodePriority>
 8001a0c:	4602      	mov	r2, r0
 8001a0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a12:	4611      	mov	r1, r2
 8001a14:	4618      	mov	r0, r3
 8001a16:	f7ff ff5d 	bl	80018d4 <__NVIC_SetPriority>
}
 8001a1a:	bf00      	nop
 8001a1c:	3718      	adds	r7, #24
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bd80      	pop	{r7, pc}

08001a22 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a22:	b580      	push	{r7, lr}
 8001a24:	b082      	sub	sp, #8
 8001a26:	af00      	add	r7, sp, #0
 8001a28:	4603      	mov	r3, r0
 8001a2a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a30:	4618      	mov	r0, r3
 8001a32:	f7ff ff31 	bl	8001898 <__NVIC_EnableIRQ>
}
 8001a36:	bf00      	nop
 8001a38:	3708      	adds	r7, #8
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bd80      	pop	{r7, pc}

08001a3e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a3e:	b580      	push	{r7, lr}
 8001a40:	b082      	sub	sp, #8
 8001a42:	af00      	add	r7, sp, #0
 8001a44:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a46:	6878      	ldr	r0, [r7, #4]
 8001a48:	f7ff ffa2 	bl	8001990 <SysTick_Config>
 8001a4c:	4603      	mov	r3, r0
}
 8001a4e:	4618      	mov	r0, r3
 8001a50:	3708      	adds	r7, #8
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bd80      	pop	{r7, pc}
	...

08001a58 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	b089      	sub	sp, #36	; 0x24
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
 8001a60:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001a62:	2300      	movs	r3, #0
 8001a64:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001a66:	2300      	movs	r3, #0
 8001a68:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001a72:	2300      	movs	r3, #0
 8001a74:	61fb      	str	r3, [r7, #28]
 8001a76:	e175      	b.n	8001d64 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001a78:	2201      	movs	r2, #1
 8001a7a:	69fb      	ldr	r3, [r7, #28]
 8001a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a80:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a82:	683b      	ldr	r3, [r7, #0]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	697a      	ldr	r2, [r7, #20]
 8001a88:	4013      	ands	r3, r2
 8001a8a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001a8c:	693a      	ldr	r2, [r7, #16]
 8001a8e:	697b      	ldr	r3, [r7, #20]
 8001a90:	429a      	cmp	r2, r3
 8001a92:	f040 8164 	bne.w	8001d5e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001a96:	683b      	ldr	r3, [r7, #0]
 8001a98:	685b      	ldr	r3, [r3, #4]
 8001a9a:	f003 0303 	and.w	r3, r3, #3
 8001a9e:	2b01      	cmp	r3, #1
 8001aa0:	d005      	beq.n	8001aae <HAL_GPIO_Init+0x56>
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	685b      	ldr	r3, [r3, #4]
 8001aa6:	f003 0303 	and.w	r3, r3, #3
 8001aaa:	2b02      	cmp	r3, #2
 8001aac:	d130      	bne.n	8001b10 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	689b      	ldr	r3, [r3, #8]
 8001ab2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001ab4:	69fb      	ldr	r3, [r7, #28]
 8001ab6:	005b      	lsls	r3, r3, #1
 8001ab8:	2203      	movs	r2, #3
 8001aba:	fa02 f303 	lsl.w	r3, r2, r3
 8001abe:	43db      	mvns	r3, r3
 8001ac0:	69ba      	ldr	r2, [r7, #24]
 8001ac2:	4013      	ands	r3, r2
 8001ac4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	68da      	ldr	r2, [r3, #12]
 8001aca:	69fb      	ldr	r3, [r7, #28]
 8001acc:	005b      	lsls	r3, r3, #1
 8001ace:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad2:	69ba      	ldr	r2, [r7, #24]
 8001ad4:	4313      	orrs	r3, r2
 8001ad6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	69ba      	ldr	r2, [r7, #24]
 8001adc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	685b      	ldr	r3, [r3, #4]
 8001ae2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ae4:	2201      	movs	r2, #1
 8001ae6:	69fb      	ldr	r3, [r7, #28]
 8001ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8001aec:	43db      	mvns	r3, r3
 8001aee:	69ba      	ldr	r2, [r7, #24]
 8001af0:	4013      	ands	r3, r2
 8001af2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	685b      	ldr	r3, [r3, #4]
 8001af8:	091b      	lsrs	r3, r3, #4
 8001afa:	f003 0201 	and.w	r2, r3, #1
 8001afe:	69fb      	ldr	r3, [r7, #28]
 8001b00:	fa02 f303 	lsl.w	r3, r2, r3
 8001b04:	69ba      	ldr	r2, [r7, #24]
 8001b06:	4313      	orrs	r3, r2
 8001b08:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	69ba      	ldr	r2, [r7, #24]
 8001b0e:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	685b      	ldr	r3, [r3, #4]
 8001b14:	f003 0303 	and.w	r3, r3, #3
 8001b18:	2b03      	cmp	r3, #3
 8001b1a:	d017      	beq.n	8001b4c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	68db      	ldr	r3, [r3, #12]
 8001b20:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001b22:	69fb      	ldr	r3, [r7, #28]
 8001b24:	005b      	lsls	r3, r3, #1
 8001b26:	2203      	movs	r2, #3
 8001b28:	fa02 f303 	lsl.w	r3, r2, r3
 8001b2c:	43db      	mvns	r3, r3
 8001b2e:	69ba      	ldr	r2, [r7, #24]
 8001b30:	4013      	ands	r3, r2
 8001b32:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	689a      	ldr	r2, [r3, #8]
 8001b38:	69fb      	ldr	r3, [r7, #28]
 8001b3a:	005b      	lsls	r3, r3, #1
 8001b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b40:	69ba      	ldr	r2, [r7, #24]
 8001b42:	4313      	orrs	r3, r2
 8001b44:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	69ba      	ldr	r2, [r7, #24]
 8001b4a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	685b      	ldr	r3, [r3, #4]
 8001b50:	f003 0303 	and.w	r3, r3, #3
 8001b54:	2b02      	cmp	r3, #2
 8001b56:	d123      	bne.n	8001ba0 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001b58:	69fb      	ldr	r3, [r7, #28]
 8001b5a:	08da      	lsrs	r2, r3, #3
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	3208      	adds	r2, #8
 8001b60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b64:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001b66:	69fb      	ldr	r3, [r7, #28]
 8001b68:	f003 0307 	and.w	r3, r3, #7
 8001b6c:	009b      	lsls	r3, r3, #2
 8001b6e:	220f      	movs	r2, #15
 8001b70:	fa02 f303 	lsl.w	r3, r2, r3
 8001b74:	43db      	mvns	r3, r3
 8001b76:	69ba      	ldr	r2, [r7, #24]
 8001b78:	4013      	ands	r3, r2
 8001b7a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	691a      	ldr	r2, [r3, #16]
 8001b80:	69fb      	ldr	r3, [r7, #28]
 8001b82:	f003 0307 	and.w	r3, r3, #7
 8001b86:	009b      	lsls	r3, r3, #2
 8001b88:	fa02 f303 	lsl.w	r3, r2, r3
 8001b8c:	69ba      	ldr	r2, [r7, #24]
 8001b8e:	4313      	orrs	r3, r2
 8001b90:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001b92:	69fb      	ldr	r3, [r7, #28]
 8001b94:	08da      	lsrs	r2, r3, #3
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	3208      	adds	r2, #8
 8001b9a:	69b9      	ldr	r1, [r7, #24]
 8001b9c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001ba6:	69fb      	ldr	r3, [r7, #28]
 8001ba8:	005b      	lsls	r3, r3, #1
 8001baa:	2203      	movs	r2, #3
 8001bac:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb0:	43db      	mvns	r3, r3
 8001bb2:	69ba      	ldr	r2, [r7, #24]
 8001bb4:	4013      	ands	r3, r2
 8001bb6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	685b      	ldr	r3, [r3, #4]
 8001bbc:	f003 0203 	and.w	r2, r3, #3
 8001bc0:	69fb      	ldr	r3, [r7, #28]
 8001bc2:	005b      	lsls	r3, r3, #1
 8001bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc8:	69ba      	ldr	r2, [r7, #24]
 8001bca:	4313      	orrs	r3, r2
 8001bcc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	69ba      	ldr	r2, [r7, #24]
 8001bd2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	685b      	ldr	r3, [r3, #4]
 8001bd8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	f000 80be 	beq.w	8001d5e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001be2:	4b66      	ldr	r3, [pc, #408]	; (8001d7c <HAL_GPIO_Init+0x324>)
 8001be4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001be6:	4a65      	ldr	r2, [pc, #404]	; (8001d7c <HAL_GPIO_Init+0x324>)
 8001be8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001bec:	6453      	str	r3, [r2, #68]	; 0x44
 8001bee:	4b63      	ldr	r3, [pc, #396]	; (8001d7c <HAL_GPIO_Init+0x324>)
 8001bf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bf2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001bf6:	60fb      	str	r3, [r7, #12]
 8001bf8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001bfa:	4a61      	ldr	r2, [pc, #388]	; (8001d80 <HAL_GPIO_Init+0x328>)
 8001bfc:	69fb      	ldr	r3, [r7, #28]
 8001bfe:	089b      	lsrs	r3, r3, #2
 8001c00:	3302      	adds	r3, #2
 8001c02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c06:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001c08:	69fb      	ldr	r3, [r7, #28]
 8001c0a:	f003 0303 	and.w	r3, r3, #3
 8001c0e:	009b      	lsls	r3, r3, #2
 8001c10:	220f      	movs	r2, #15
 8001c12:	fa02 f303 	lsl.w	r3, r2, r3
 8001c16:	43db      	mvns	r3, r3
 8001c18:	69ba      	ldr	r2, [r7, #24]
 8001c1a:	4013      	ands	r3, r2
 8001c1c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	4a58      	ldr	r2, [pc, #352]	; (8001d84 <HAL_GPIO_Init+0x32c>)
 8001c22:	4293      	cmp	r3, r2
 8001c24:	d037      	beq.n	8001c96 <HAL_GPIO_Init+0x23e>
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	4a57      	ldr	r2, [pc, #348]	; (8001d88 <HAL_GPIO_Init+0x330>)
 8001c2a:	4293      	cmp	r3, r2
 8001c2c:	d031      	beq.n	8001c92 <HAL_GPIO_Init+0x23a>
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	4a56      	ldr	r2, [pc, #344]	; (8001d8c <HAL_GPIO_Init+0x334>)
 8001c32:	4293      	cmp	r3, r2
 8001c34:	d02b      	beq.n	8001c8e <HAL_GPIO_Init+0x236>
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	4a55      	ldr	r2, [pc, #340]	; (8001d90 <HAL_GPIO_Init+0x338>)
 8001c3a:	4293      	cmp	r3, r2
 8001c3c:	d025      	beq.n	8001c8a <HAL_GPIO_Init+0x232>
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	4a54      	ldr	r2, [pc, #336]	; (8001d94 <HAL_GPIO_Init+0x33c>)
 8001c42:	4293      	cmp	r3, r2
 8001c44:	d01f      	beq.n	8001c86 <HAL_GPIO_Init+0x22e>
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	4a53      	ldr	r2, [pc, #332]	; (8001d98 <HAL_GPIO_Init+0x340>)
 8001c4a:	4293      	cmp	r3, r2
 8001c4c:	d019      	beq.n	8001c82 <HAL_GPIO_Init+0x22a>
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	4a52      	ldr	r2, [pc, #328]	; (8001d9c <HAL_GPIO_Init+0x344>)
 8001c52:	4293      	cmp	r3, r2
 8001c54:	d013      	beq.n	8001c7e <HAL_GPIO_Init+0x226>
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	4a51      	ldr	r2, [pc, #324]	; (8001da0 <HAL_GPIO_Init+0x348>)
 8001c5a:	4293      	cmp	r3, r2
 8001c5c:	d00d      	beq.n	8001c7a <HAL_GPIO_Init+0x222>
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	4a50      	ldr	r2, [pc, #320]	; (8001da4 <HAL_GPIO_Init+0x34c>)
 8001c62:	4293      	cmp	r3, r2
 8001c64:	d007      	beq.n	8001c76 <HAL_GPIO_Init+0x21e>
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	4a4f      	ldr	r2, [pc, #316]	; (8001da8 <HAL_GPIO_Init+0x350>)
 8001c6a:	4293      	cmp	r3, r2
 8001c6c:	d101      	bne.n	8001c72 <HAL_GPIO_Init+0x21a>
 8001c6e:	2309      	movs	r3, #9
 8001c70:	e012      	b.n	8001c98 <HAL_GPIO_Init+0x240>
 8001c72:	230a      	movs	r3, #10
 8001c74:	e010      	b.n	8001c98 <HAL_GPIO_Init+0x240>
 8001c76:	2308      	movs	r3, #8
 8001c78:	e00e      	b.n	8001c98 <HAL_GPIO_Init+0x240>
 8001c7a:	2307      	movs	r3, #7
 8001c7c:	e00c      	b.n	8001c98 <HAL_GPIO_Init+0x240>
 8001c7e:	2306      	movs	r3, #6
 8001c80:	e00a      	b.n	8001c98 <HAL_GPIO_Init+0x240>
 8001c82:	2305      	movs	r3, #5
 8001c84:	e008      	b.n	8001c98 <HAL_GPIO_Init+0x240>
 8001c86:	2304      	movs	r3, #4
 8001c88:	e006      	b.n	8001c98 <HAL_GPIO_Init+0x240>
 8001c8a:	2303      	movs	r3, #3
 8001c8c:	e004      	b.n	8001c98 <HAL_GPIO_Init+0x240>
 8001c8e:	2302      	movs	r3, #2
 8001c90:	e002      	b.n	8001c98 <HAL_GPIO_Init+0x240>
 8001c92:	2301      	movs	r3, #1
 8001c94:	e000      	b.n	8001c98 <HAL_GPIO_Init+0x240>
 8001c96:	2300      	movs	r3, #0
 8001c98:	69fa      	ldr	r2, [r7, #28]
 8001c9a:	f002 0203 	and.w	r2, r2, #3
 8001c9e:	0092      	lsls	r2, r2, #2
 8001ca0:	4093      	lsls	r3, r2
 8001ca2:	69ba      	ldr	r2, [r7, #24]
 8001ca4:	4313      	orrs	r3, r2
 8001ca6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001ca8:	4935      	ldr	r1, [pc, #212]	; (8001d80 <HAL_GPIO_Init+0x328>)
 8001caa:	69fb      	ldr	r3, [r7, #28]
 8001cac:	089b      	lsrs	r3, r3, #2
 8001cae:	3302      	adds	r3, #2
 8001cb0:	69ba      	ldr	r2, [r7, #24]
 8001cb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001cb6:	4b3d      	ldr	r3, [pc, #244]	; (8001dac <HAL_GPIO_Init+0x354>)
 8001cb8:	689b      	ldr	r3, [r3, #8]
 8001cba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cbc:	693b      	ldr	r3, [r7, #16]
 8001cbe:	43db      	mvns	r3, r3
 8001cc0:	69ba      	ldr	r2, [r7, #24]
 8001cc2:	4013      	ands	r3, r2
 8001cc4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001cc6:	683b      	ldr	r3, [r7, #0]
 8001cc8:	685b      	ldr	r3, [r3, #4]
 8001cca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d003      	beq.n	8001cda <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001cd2:	69ba      	ldr	r2, [r7, #24]
 8001cd4:	693b      	ldr	r3, [r7, #16]
 8001cd6:	4313      	orrs	r3, r2
 8001cd8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001cda:	4a34      	ldr	r2, [pc, #208]	; (8001dac <HAL_GPIO_Init+0x354>)
 8001cdc:	69bb      	ldr	r3, [r7, #24]
 8001cde:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001ce0:	4b32      	ldr	r3, [pc, #200]	; (8001dac <HAL_GPIO_Init+0x354>)
 8001ce2:	68db      	ldr	r3, [r3, #12]
 8001ce4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ce6:	693b      	ldr	r3, [r7, #16]
 8001ce8:	43db      	mvns	r3, r3
 8001cea:	69ba      	ldr	r2, [r7, #24]
 8001cec:	4013      	ands	r3, r2
 8001cee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	685b      	ldr	r3, [r3, #4]
 8001cf4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d003      	beq.n	8001d04 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001cfc:	69ba      	ldr	r2, [r7, #24]
 8001cfe:	693b      	ldr	r3, [r7, #16]
 8001d00:	4313      	orrs	r3, r2
 8001d02:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001d04:	4a29      	ldr	r2, [pc, #164]	; (8001dac <HAL_GPIO_Init+0x354>)
 8001d06:	69bb      	ldr	r3, [r7, #24]
 8001d08:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001d0a:	4b28      	ldr	r3, [pc, #160]	; (8001dac <HAL_GPIO_Init+0x354>)
 8001d0c:	685b      	ldr	r3, [r3, #4]
 8001d0e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d10:	693b      	ldr	r3, [r7, #16]
 8001d12:	43db      	mvns	r3, r3
 8001d14:	69ba      	ldr	r2, [r7, #24]
 8001d16:	4013      	ands	r3, r2
 8001d18:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	685b      	ldr	r3, [r3, #4]
 8001d1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d003      	beq.n	8001d2e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001d26:	69ba      	ldr	r2, [r7, #24]
 8001d28:	693b      	ldr	r3, [r7, #16]
 8001d2a:	4313      	orrs	r3, r2
 8001d2c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001d2e:	4a1f      	ldr	r2, [pc, #124]	; (8001dac <HAL_GPIO_Init+0x354>)
 8001d30:	69bb      	ldr	r3, [r7, #24]
 8001d32:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d34:	4b1d      	ldr	r3, [pc, #116]	; (8001dac <HAL_GPIO_Init+0x354>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d3a:	693b      	ldr	r3, [r7, #16]
 8001d3c:	43db      	mvns	r3, r3
 8001d3e:	69ba      	ldr	r2, [r7, #24]
 8001d40:	4013      	ands	r3, r2
 8001d42:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	685b      	ldr	r3, [r3, #4]
 8001d48:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d003      	beq.n	8001d58 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001d50:	69ba      	ldr	r2, [r7, #24]
 8001d52:	693b      	ldr	r3, [r7, #16]
 8001d54:	4313      	orrs	r3, r2
 8001d56:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001d58:	4a14      	ldr	r2, [pc, #80]	; (8001dac <HAL_GPIO_Init+0x354>)
 8001d5a:	69bb      	ldr	r3, [r7, #24]
 8001d5c:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001d5e:	69fb      	ldr	r3, [r7, #28]
 8001d60:	3301      	adds	r3, #1
 8001d62:	61fb      	str	r3, [r7, #28]
 8001d64:	69fb      	ldr	r3, [r7, #28]
 8001d66:	2b0f      	cmp	r3, #15
 8001d68:	f67f ae86 	bls.w	8001a78 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001d6c:	bf00      	nop
 8001d6e:	bf00      	nop
 8001d70:	3724      	adds	r7, #36	; 0x24
 8001d72:	46bd      	mov	sp, r7
 8001d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d78:	4770      	bx	lr
 8001d7a:	bf00      	nop
 8001d7c:	40023800 	.word	0x40023800
 8001d80:	40013800 	.word	0x40013800
 8001d84:	40020000 	.word	0x40020000
 8001d88:	40020400 	.word	0x40020400
 8001d8c:	40020800 	.word	0x40020800
 8001d90:	40020c00 	.word	0x40020c00
 8001d94:	40021000 	.word	0x40021000
 8001d98:	40021400 	.word	0x40021400
 8001d9c:	40021800 	.word	0x40021800
 8001da0:	40021c00 	.word	0x40021c00
 8001da4:	40022000 	.word	0x40022000
 8001da8:	40022400 	.word	0x40022400
 8001dac:	40013c00 	.word	0x40013c00

08001db0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001db0:	b480      	push	{r7}
 8001db2:	b083      	sub	sp, #12
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
 8001db8:	460b      	mov	r3, r1
 8001dba:	807b      	strh	r3, [r7, #2]
 8001dbc:	4613      	mov	r3, r2
 8001dbe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001dc0:	787b      	ldrb	r3, [r7, #1]
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d003      	beq.n	8001dce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001dc6:	887a      	ldrh	r2, [r7, #2]
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001dcc:	e003      	b.n	8001dd6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001dce:	887b      	ldrh	r3, [r7, #2]
 8001dd0:	041a      	lsls	r2, r3, #16
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	619a      	str	r2, [r3, #24]
}
 8001dd6:	bf00      	nop
 8001dd8:	370c      	adds	r7, #12
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de0:	4770      	bx	lr
	...

08001de4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b082      	sub	sp, #8
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d101      	bne.n	8001df6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001df2:	2301      	movs	r3, #1
 8001df4:	e07f      	b.n	8001ef6 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001dfc:	b2db      	uxtb	r3, r3
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d106      	bne.n	8001e10 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	2200      	movs	r2, #0
 8001e06:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001e0a:	6878      	ldr	r0, [r7, #4]
 8001e0c:	f7ff f9e6 	bl	80011dc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	2224      	movs	r2, #36	; 0x24
 8001e14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	681a      	ldr	r2, [r3, #0]
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f022 0201 	bic.w	r2, r2, #1
 8001e26:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	685a      	ldr	r2, [r3, #4]
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001e34:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	689a      	ldr	r2, [r3, #8]
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001e44:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	68db      	ldr	r3, [r3, #12]
 8001e4a:	2b01      	cmp	r3, #1
 8001e4c:	d107      	bne.n	8001e5e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	689a      	ldr	r2, [r3, #8]
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001e5a:	609a      	str	r2, [r3, #8]
 8001e5c:	e006      	b.n	8001e6c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	689a      	ldr	r2, [r3, #8]
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001e6a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	68db      	ldr	r3, [r3, #12]
 8001e70:	2b02      	cmp	r3, #2
 8001e72:	d104      	bne.n	8001e7e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001e7c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	6859      	ldr	r1, [r3, #4]
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681a      	ldr	r2, [r3, #0]
 8001e88:	4b1d      	ldr	r3, [pc, #116]	; (8001f00 <HAL_I2C_Init+0x11c>)
 8001e8a:	430b      	orrs	r3, r1
 8001e8c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	68da      	ldr	r2, [r3, #12]
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001e9c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	691a      	ldr	r2, [r3, #16]
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	695b      	ldr	r3, [r3, #20]
 8001ea6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	699b      	ldr	r3, [r3, #24]
 8001eae:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	430a      	orrs	r2, r1
 8001eb6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	69d9      	ldr	r1, [r3, #28]
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	6a1a      	ldr	r2, [r3, #32]
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	430a      	orrs	r2, r1
 8001ec6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	681a      	ldr	r2, [r3, #0]
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f042 0201 	orr.w	r2, r2, #1
 8001ed6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	2200      	movs	r2, #0
 8001edc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	2220      	movs	r2, #32
 8001ee2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	2200      	movs	r2, #0
 8001eea:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	2200      	movs	r2, #0
 8001ef0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001ef4:	2300      	movs	r3, #0
}
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	3708      	adds	r7, #8
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bd80      	pop	{r7, pc}
 8001efe:	bf00      	nop
 8001f00:	02008000 	.word	0x02008000

08001f04 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b088      	sub	sp, #32
 8001f08:	af02      	add	r7, sp, #8
 8001f0a:	60f8      	str	r0, [r7, #12]
 8001f0c:	607a      	str	r2, [r7, #4]
 8001f0e:	461a      	mov	r2, r3
 8001f10:	460b      	mov	r3, r1
 8001f12:	817b      	strh	r3, [r7, #10]
 8001f14:	4613      	mov	r3, r2
 8001f16:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001f1e:	b2db      	uxtb	r3, r3
 8001f20:	2b20      	cmp	r3, #32
 8001f22:	f040 80da 	bne.w	80020da <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001f2c:	2b01      	cmp	r3, #1
 8001f2e:	d101      	bne.n	8001f34 <HAL_I2C_Master_Transmit+0x30>
 8001f30:	2302      	movs	r3, #2
 8001f32:	e0d3      	b.n	80020dc <HAL_I2C_Master_Transmit+0x1d8>
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	2201      	movs	r2, #1
 8001f38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001f3c:	f7ff fc4a 	bl	80017d4 <HAL_GetTick>
 8001f40:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001f42:	697b      	ldr	r3, [r7, #20]
 8001f44:	9300      	str	r3, [sp, #0]
 8001f46:	2319      	movs	r3, #25
 8001f48:	2201      	movs	r2, #1
 8001f4a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001f4e:	68f8      	ldr	r0, [r7, #12]
 8001f50:	f000 f9e6 	bl	8002320 <I2C_WaitOnFlagUntilTimeout>
 8001f54:	4603      	mov	r3, r0
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d001      	beq.n	8001f5e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	e0be      	b.n	80020dc <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	2221      	movs	r2, #33	; 0x21
 8001f62:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	2210      	movs	r2, #16
 8001f6a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	2200      	movs	r2, #0
 8001f72:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	687a      	ldr	r2, [r7, #4]
 8001f78:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	893a      	ldrh	r2, [r7, #8]
 8001f7e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	2200      	movs	r2, #0
 8001f84:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f8a:	b29b      	uxth	r3, r3
 8001f8c:	2bff      	cmp	r3, #255	; 0xff
 8001f8e:	d90e      	bls.n	8001fae <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	22ff      	movs	r2, #255	; 0xff
 8001f94:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f9a:	b2da      	uxtb	r2, r3
 8001f9c:	8979      	ldrh	r1, [r7, #10]
 8001f9e:	4b51      	ldr	r3, [pc, #324]	; (80020e4 <HAL_I2C_Master_Transmit+0x1e0>)
 8001fa0:	9300      	str	r3, [sp, #0]
 8001fa2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001fa6:	68f8      	ldr	r0, [r7, #12]
 8001fa8:	f000 fbd0 	bl	800274c <I2C_TransferConfig>
 8001fac:	e06c      	b.n	8002088 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fb2:	b29a      	uxth	r2, r3
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fbc:	b2da      	uxtb	r2, r3
 8001fbe:	8979      	ldrh	r1, [r7, #10]
 8001fc0:	4b48      	ldr	r3, [pc, #288]	; (80020e4 <HAL_I2C_Master_Transmit+0x1e0>)
 8001fc2:	9300      	str	r3, [sp, #0]
 8001fc4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001fc8:	68f8      	ldr	r0, [r7, #12]
 8001fca:	f000 fbbf 	bl	800274c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8001fce:	e05b      	b.n	8002088 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001fd0:	697a      	ldr	r2, [r7, #20]
 8001fd2:	6a39      	ldr	r1, [r7, #32]
 8001fd4:	68f8      	ldr	r0, [r7, #12]
 8001fd6:	f000 f9e3 	bl	80023a0 <I2C_WaitOnTXISFlagUntilTimeout>
 8001fda:	4603      	mov	r3, r0
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d001      	beq.n	8001fe4 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8001fe0:	2301      	movs	r3, #1
 8001fe2:	e07b      	b.n	80020dc <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fe8:	781a      	ldrb	r2, [r3, #0]
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ff4:	1c5a      	adds	r2, r3, #1
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ffe:	b29b      	uxth	r3, r3
 8002000:	3b01      	subs	r3, #1
 8002002:	b29a      	uxth	r2, r3
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800200c:	3b01      	subs	r3, #1
 800200e:	b29a      	uxth	r2, r3
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002018:	b29b      	uxth	r3, r3
 800201a:	2b00      	cmp	r3, #0
 800201c:	d034      	beq.n	8002088 <HAL_I2C_Master_Transmit+0x184>
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002022:	2b00      	cmp	r3, #0
 8002024:	d130      	bne.n	8002088 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002026:	697b      	ldr	r3, [r7, #20]
 8002028:	9300      	str	r3, [sp, #0]
 800202a:	6a3b      	ldr	r3, [r7, #32]
 800202c:	2200      	movs	r2, #0
 800202e:	2180      	movs	r1, #128	; 0x80
 8002030:	68f8      	ldr	r0, [r7, #12]
 8002032:	f000 f975 	bl	8002320 <I2C_WaitOnFlagUntilTimeout>
 8002036:	4603      	mov	r3, r0
 8002038:	2b00      	cmp	r3, #0
 800203a:	d001      	beq.n	8002040 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 800203c:	2301      	movs	r3, #1
 800203e:	e04d      	b.n	80020dc <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002044:	b29b      	uxth	r3, r3
 8002046:	2bff      	cmp	r3, #255	; 0xff
 8002048:	d90e      	bls.n	8002068 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	22ff      	movs	r2, #255	; 0xff
 800204e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002054:	b2da      	uxtb	r2, r3
 8002056:	8979      	ldrh	r1, [r7, #10]
 8002058:	2300      	movs	r3, #0
 800205a:	9300      	str	r3, [sp, #0]
 800205c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002060:	68f8      	ldr	r0, [r7, #12]
 8002062:	f000 fb73 	bl	800274c <I2C_TransferConfig>
 8002066:	e00f      	b.n	8002088 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800206c:	b29a      	uxth	r2, r3
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002076:	b2da      	uxtb	r2, r3
 8002078:	8979      	ldrh	r1, [r7, #10]
 800207a:	2300      	movs	r3, #0
 800207c:	9300      	str	r3, [sp, #0]
 800207e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002082:	68f8      	ldr	r0, [r7, #12]
 8002084:	f000 fb62 	bl	800274c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800208c:	b29b      	uxth	r3, r3
 800208e:	2b00      	cmp	r3, #0
 8002090:	d19e      	bne.n	8001fd0 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002092:	697a      	ldr	r2, [r7, #20]
 8002094:	6a39      	ldr	r1, [r7, #32]
 8002096:	68f8      	ldr	r0, [r7, #12]
 8002098:	f000 f9c2 	bl	8002420 <I2C_WaitOnSTOPFlagUntilTimeout>
 800209c:	4603      	mov	r3, r0
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d001      	beq.n	80020a6 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 80020a2:	2301      	movs	r3, #1
 80020a4:	e01a      	b.n	80020dc <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	2220      	movs	r2, #32
 80020ac:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	6859      	ldr	r1, [r3, #4]
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	681a      	ldr	r2, [r3, #0]
 80020b8:	4b0b      	ldr	r3, [pc, #44]	; (80020e8 <HAL_I2C_Master_Transmit+0x1e4>)
 80020ba:	400b      	ands	r3, r1
 80020bc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	2220      	movs	r2, #32
 80020c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	2200      	movs	r2, #0
 80020ca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	2200      	movs	r2, #0
 80020d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80020d6:	2300      	movs	r3, #0
 80020d8:	e000      	b.n	80020dc <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 80020da:	2302      	movs	r3, #2
  }
}
 80020dc:	4618      	mov	r0, r3
 80020de:	3718      	adds	r7, #24
 80020e0:	46bd      	mov	sp, r7
 80020e2:	bd80      	pop	{r7, pc}
 80020e4:	80002000 	.word	0x80002000
 80020e8:	fe00e800 	.word	0xfe00e800

080020ec <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b088      	sub	sp, #32
 80020f0:	af02      	add	r7, sp, #8
 80020f2:	60f8      	str	r0, [r7, #12]
 80020f4:	607a      	str	r2, [r7, #4]
 80020f6:	461a      	mov	r2, r3
 80020f8:	460b      	mov	r3, r1
 80020fa:	817b      	strh	r3, [r7, #10]
 80020fc:	4613      	mov	r3, r2
 80020fe:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002106:	b2db      	uxtb	r3, r3
 8002108:	2b20      	cmp	r3, #32
 800210a:	f040 80db 	bne.w	80022c4 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002114:	2b01      	cmp	r3, #1
 8002116:	d101      	bne.n	800211c <HAL_I2C_Master_Receive+0x30>
 8002118:	2302      	movs	r3, #2
 800211a:	e0d4      	b.n	80022c6 <HAL_I2C_Master_Receive+0x1da>
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	2201      	movs	r2, #1
 8002120:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002124:	f7ff fb56 	bl	80017d4 <HAL_GetTick>
 8002128:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800212a:	697b      	ldr	r3, [r7, #20]
 800212c:	9300      	str	r3, [sp, #0]
 800212e:	2319      	movs	r3, #25
 8002130:	2201      	movs	r2, #1
 8002132:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002136:	68f8      	ldr	r0, [r7, #12]
 8002138:	f000 f8f2 	bl	8002320 <I2C_WaitOnFlagUntilTimeout>
 800213c:	4603      	mov	r3, r0
 800213e:	2b00      	cmp	r3, #0
 8002140:	d001      	beq.n	8002146 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8002142:	2301      	movs	r3, #1
 8002144:	e0bf      	b.n	80022c6 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	2222      	movs	r2, #34	; 0x22
 800214a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	2210      	movs	r2, #16
 8002152:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	2200      	movs	r2, #0
 800215a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	687a      	ldr	r2, [r7, #4]
 8002160:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	893a      	ldrh	r2, [r7, #8]
 8002166:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	2200      	movs	r2, #0
 800216c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002172:	b29b      	uxth	r3, r3
 8002174:	2bff      	cmp	r3, #255	; 0xff
 8002176:	d90e      	bls.n	8002196 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	22ff      	movs	r2, #255	; 0xff
 800217c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002182:	b2da      	uxtb	r2, r3
 8002184:	8979      	ldrh	r1, [r7, #10]
 8002186:	4b52      	ldr	r3, [pc, #328]	; (80022d0 <HAL_I2C_Master_Receive+0x1e4>)
 8002188:	9300      	str	r3, [sp, #0]
 800218a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800218e:	68f8      	ldr	r0, [r7, #12]
 8002190:	f000 fadc 	bl	800274c <I2C_TransferConfig>
 8002194:	e06d      	b.n	8002272 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800219a:	b29a      	uxth	r2, r3
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021a4:	b2da      	uxtb	r2, r3
 80021a6:	8979      	ldrh	r1, [r7, #10]
 80021a8:	4b49      	ldr	r3, [pc, #292]	; (80022d0 <HAL_I2C_Master_Receive+0x1e4>)
 80021aa:	9300      	str	r3, [sp, #0]
 80021ac:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80021b0:	68f8      	ldr	r0, [r7, #12]
 80021b2:	f000 facb 	bl	800274c <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80021b6:	e05c      	b.n	8002272 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80021b8:	697a      	ldr	r2, [r7, #20]
 80021ba:	6a39      	ldr	r1, [r7, #32]
 80021bc:	68f8      	ldr	r0, [r7, #12]
 80021be:	f000 f96b 	bl	8002498 <I2C_WaitOnRXNEFlagUntilTimeout>
 80021c2:	4603      	mov	r3, r0
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d001      	beq.n	80021cc <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 80021c8:	2301      	movs	r3, #1
 80021ca:	e07c      	b.n	80022c6 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021d6:	b2d2      	uxtb	r2, r2
 80021d8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021de:	1c5a      	adds	r2, r3, #1
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021e8:	3b01      	subs	r3, #1
 80021ea:	b29a      	uxth	r2, r3
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021f4:	b29b      	uxth	r3, r3
 80021f6:	3b01      	subs	r3, #1
 80021f8:	b29a      	uxth	r2, r3
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002202:	b29b      	uxth	r3, r3
 8002204:	2b00      	cmp	r3, #0
 8002206:	d034      	beq.n	8002272 <HAL_I2C_Master_Receive+0x186>
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800220c:	2b00      	cmp	r3, #0
 800220e:	d130      	bne.n	8002272 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002210:	697b      	ldr	r3, [r7, #20]
 8002212:	9300      	str	r3, [sp, #0]
 8002214:	6a3b      	ldr	r3, [r7, #32]
 8002216:	2200      	movs	r2, #0
 8002218:	2180      	movs	r1, #128	; 0x80
 800221a:	68f8      	ldr	r0, [r7, #12]
 800221c:	f000 f880 	bl	8002320 <I2C_WaitOnFlagUntilTimeout>
 8002220:	4603      	mov	r3, r0
 8002222:	2b00      	cmp	r3, #0
 8002224:	d001      	beq.n	800222a <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8002226:	2301      	movs	r3, #1
 8002228:	e04d      	b.n	80022c6 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800222e:	b29b      	uxth	r3, r3
 8002230:	2bff      	cmp	r3, #255	; 0xff
 8002232:	d90e      	bls.n	8002252 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	22ff      	movs	r2, #255	; 0xff
 8002238:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800223e:	b2da      	uxtb	r2, r3
 8002240:	8979      	ldrh	r1, [r7, #10]
 8002242:	2300      	movs	r3, #0
 8002244:	9300      	str	r3, [sp, #0]
 8002246:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800224a:	68f8      	ldr	r0, [r7, #12]
 800224c:	f000 fa7e 	bl	800274c <I2C_TransferConfig>
 8002250:	e00f      	b.n	8002272 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002256:	b29a      	uxth	r2, r3
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002260:	b2da      	uxtb	r2, r3
 8002262:	8979      	ldrh	r1, [r7, #10]
 8002264:	2300      	movs	r3, #0
 8002266:	9300      	str	r3, [sp, #0]
 8002268:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800226c:	68f8      	ldr	r0, [r7, #12]
 800226e:	f000 fa6d 	bl	800274c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002276:	b29b      	uxth	r3, r3
 8002278:	2b00      	cmp	r3, #0
 800227a:	d19d      	bne.n	80021b8 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800227c:	697a      	ldr	r2, [r7, #20]
 800227e:	6a39      	ldr	r1, [r7, #32]
 8002280:	68f8      	ldr	r0, [r7, #12]
 8002282:	f000 f8cd 	bl	8002420 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002286:	4603      	mov	r3, r0
 8002288:	2b00      	cmp	r3, #0
 800228a:	d001      	beq.n	8002290 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 800228c:	2301      	movs	r3, #1
 800228e:	e01a      	b.n	80022c6 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	2220      	movs	r2, #32
 8002296:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	6859      	ldr	r1, [r3, #4]
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	681a      	ldr	r2, [r3, #0]
 80022a2:	4b0c      	ldr	r3, [pc, #48]	; (80022d4 <HAL_I2C_Master_Receive+0x1e8>)
 80022a4:	400b      	ands	r3, r1
 80022a6:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	2220      	movs	r2, #32
 80022ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	2200      	movs	r2, #0
 80022b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	2200      	movs	r2, #0
 80022bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80022c0:	2300      	movs	r3, #0
 80022c2:	e000      	b.n	80022c6 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 80022c4:	2302      	movs	r3, #2
  }
}
 80022c6:	4618      	mov	r0, r3
 80022c8:	3718      	adds	r7, #24
 80022ca:	46bd      	mov	sp, r7
 80022cc:	bd80      	pop	{r7, pc}
 80022ce:	bf00      	nop
 80022d0:	80002400 	.word	0x80002400
 80022d4:	fe00e800 	.word	0xfe00e800

080022d8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80022d8:	b480      	push	{r7}
 80022da:	b083      	sub	sp, #12
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	699b      	ldr	r3, [r3, #24]
 80022e6:	f003 0302 	and.w	r3, r3, #2
 80022ea:	2b02      	cmp	r3, #2
 80022ec:	d103      	bne.n	80022f6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	2200      	movs	r2, #0
 80022f4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	699b      	ldr	r3, [r3, #24]
 80022fc:	f003 0301 	and.w	r3, r3, #1
 8002300:	2b01      	cmp	r3, #1
 8002302:	d007      	beq.n	8002314 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	699a      	ldr	r2, [r3, #24]
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f042 0201 	orr.w	r2, r2, #1
 8002312:	619a      	str	r2, [r3, #24]
  }
}
 8002314:	bf00      	nop
 8002316:	370c      	adds	r7, #12
 8002318:	46bd      	mov	sp, r7
 800231a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231e:	4770      	bx	lr

08002320 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b084      	sub	sp, #16
 8002324:	af00      	add	r7, sp, #0
 8002326:	60f8      	str	r0, [r7, #12]
 8002328:	60b9      	str	r1, [r7, #8]
 800232a:	603b      	str	r3, [r7, #0]
 800232c:	4613      	mov	r3, r2
 800232e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002330:	e022      	b.n	8002378 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002338:	d01e      	beq.n	8002378 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800233a:	f7ff fa4b 	bl	80017d4 <HAL_GetTick>
 800233e:	4602      	mov	r2, r0
 8002340:	69bb      	ldr	r3, [r7, #24]
 8002342:	1ad3      	subs	r3, r2, r3
 8002344:	683a      	ldr	r2, [r7, #0]
 8002346:	429a      	cmp	r2, r3
 8002348:	d302      	bcc.n	8002350 <I2C_WaitOnFlagUntilTimeout+0x30>
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	2b00      	cmp	r3, #0
 800234e:	d113      	bne.n	8002378 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002354:	f043 0220 	orr.w	r2, r3, #32
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	2220      	movs	r2, #32
 8002360:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	2200      	movs	r2, #0
 8002368:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	2200      	movs	r2, #0
 8002370:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8002374:	2301      	movs	r3, #1
 8002376:	e00f      	b.n	8002398 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	699a      	ldr	r2, [r3, #24]
 800237e:	68bb      	ldr	r3, [r7, #8]
 8002380:	4013      	ands	r3, r2
 8002382:	68ba      	ldr	r2, [r7, #8]
 8002384:	429a      	cmp	r2, r3
 8002386:	bf0c      	ite	eq
 8002388:	2301      	moveq	r3, #1
 800238a:	2300      	movne	r3, #0
 800238c:	b2db      	uxtb	r3, r3
 800238e:	461a      	mov	r2, r3
 8002390:	79fb      	ldrb	r3, [r7, #7]
 8002392:	429a      	cmp	r2, r3
 8002394:	d0cd      	beq.n	8002332 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002396:	2300      	movs	r3, #0
}
 8002398:	4618      	mov	r0, r3
 800239a:	3710      	adds	r7, #16
 800239c:	46bd      	mov	sp, r7
 800239e:	bd80      	pop	{r7, pc}

080023a0 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b084      	sub	sp, #16
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	60f8      	str	r0, [r7, #12]
 80023a8:	60b9      	str	r1, [r7, #8]
 80023aa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80023ac:	e02c      	b.n	8002408 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80023ae:	687a      	ldr	r2, [r7, #4]
 80023b0:	68b9      	ldr	r1, [r7, #8]
 80023b2:	68f8      	ldr	r0, [r7, #12]
 80023b4:	f000 f8ea 	bl	800258c <I2C_IsErrorOccurred>
 80023b8:	4603      	mov	r3, r0
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d001      	beq.n	80023c2 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80023be:	2301      	movs	r3, #1
 80023c0:	e02a      	b.n	8002418 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80023c2:	68bb      	ldr	r3, [r7, #8]
 80023c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023c8:	d01e      	beq.n	8002408 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80023ca:	f7ff fa03 	bl	80017d4 <HAL_GetTick>
 80023ce:	4602      	mov	r2, r0
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	1ad3      	subs	r3, r2, r3
 80023d4:	68ba      	ldr	r2, [r7, #8]
 80023d6:	429a      	cmp	r2, r3
 80023d8:	d302      	bcc.n	80023e0 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80023da:	68bb      	ldr	r3, [r7, #8]
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d113      	bne.n	8002408 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023e4:	f043 0220 	orr.w	r2, r3, #32
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	2220      	movs	r2, #32
 80023f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	2200      	movs	r2, #0
 80023f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	2200      	movs	r2, #0
 8002400:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002404:	2301      	movs	r3, #1
 8002406:	e007      	b.n	8002418 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	699b      	ldr	r3, [r3, #24]
 800240e:	f003 0302 	and.w	r3, r3, #2
 8002412:	2b02      	cmp	r3, #2
 8002414:	d1cb      	bne.n	80023ae <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002416:	2300      	movs	r3, #0
}
 8002418:	4618      	mov	r0, r3
 800241a:	3710      	adds	r7, #16
 800241c:	46bd      	mov	sp, r7
 800241e:	bd80      	pop	{r7, pc}

08002420 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b084      	sub	sp, #16
 8002424:	af00      	add	r7, sp, #0
 8002426:	60f8      	str	r0, [r7, #12]
 8002428:	60b9      	str	r1, [r7, #8]
 800242a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800242c:	e028      	b.n	8002480 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800242e:	687a      	ldr	r2, [r7, #4]
 8002430:	68b9      	ldr	r1, [r7, #8]
 8002432:	68f8      	ldr	r0, [r7, #12]
 8002434:	f000 f8aa 	bl	800258c <I2C_IsErrorOccurred>
 8002438:	4603      	mov	r3, r0
 800243a:	2b00      	cmp	r3, #0
 800243c:	d001      	beq.n	8002442 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800243e:	2301      	movs	r3, #1
 8002440:	e026      	b.n	8002490 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002442:	f7ff f9c7 	bl	80017d4 <HAL_GetTick>
 8002446:	4602      	mov	r2, r0
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	1ad3      	subs	r3, r2, r3
 800244c:	68ba      	ldr	r2, [r7, #8]
 800244e:	429a      	cmp	r2, r3
 8002450:	d302      	bcc.n	8002458 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002452:	68bb      	ldr	r3, [r7, #8]
 8002454:	2b00      	cmp	r3, #0
 8002456:	d113      	bne.n	8002480 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800245c:	f043 0220 	orr.w	r2, r3, #32
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	2220      	movs	r2, #32
 8002468:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	2200      	movs	r2, #0
 8002470:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	2200      	movs	r2, #0
 8002478:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800247c:	2301      	movs	r3, #1
 800247e:	e007      	b.n	8002490 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	699b      	ldr	r3, [r3, #24]
 8002486:	f003 0320 	and.w	r3, r3, #32
 800248a:	2b20      	cmp	r3, #32
 800248c:	d1cf      	bne.n	800242e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800248e:	2300      	movs	r3, #0
}
 8002490:	4618      	mov	r0, r3
 8002492:	3710      	adds	r7, #16
 8002494:	46bd      	mov	sp, r7
 8002496:	bd80      	pop	{r7, pc}

08002498 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b084      	sub	sp, #16
 800249c:	af00      	add	r7, sp, #0
 800249e:	60f8      	str	r0, [r7, #12]
 80024a0:	60b9      	str	r1, [r7, #8]
 80024a2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80024a4:	e064      	b.n	8002570 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80024a6:	687a      	ldr	r2, [r7, #4]
 80024a8:	68b9      	ldr	r1, [r7, #8]
 80024aa:	68f8      	ldr	r0, [r7, #12]
 80024ac:	f000 f86e 	bl	800258c <I2C_IsErrorOccurred>
 80024b0:	4603      	mov	r3, r0
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d001      	beq.n	80024ba <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80024b6:	2301      	movs	r3, #1
 80024b8:	e062      	b.n	8002580 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	699b      	ldr	r3, [r3, #24]
 80024c0:	f003 0320 	and.w	r3, r3, #32
 80024c4:	2b20      	cmp	r3, #32
 80024c6:	d138      	bne.n	800253a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	699b      	ldr	r3, [r3, #24]
 80024ce:	f003 0304 	and.w	r3, r3, #4
 80024d2:	2b04      	cmp	r3, #4
 80024d4:	d105      	bne.n	80024e2 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d001      	beq.n	80024e2 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 80024de:	2300      	movs	r3, #0
 80024e0:	e04e      	b.n	8002580 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	699b      	ldr	r3, [r3, #24]
 80024e8:	f003 0310 	and.w	r3, r3, #16
 80024ec:	2b10      	cmp	r3, #16
 80024ee:	d107      	bne.n	8002500 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	2210      	movs	r2, #16
 80024f6:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	2204      	movs	r2, #4
 80024fc:	645a      	str	r2, [r3, #68]	; 0x44
 80024fe:	e002      	b.n	8002506 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	2200      	movs	r2, #0
 8002504:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	2220      	movs	r2, #32
 800250c:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	6859      	ldr	r1, [r3, #4]
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	681a      	ldr	r2, [r3, #0]
 8002518:	4b1b      	ldr	r3, [pc, #108]	; (8002588 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 800251a:	400b      	ands	r3, r1
 800251c:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	2220      	movs	r2, #32
 8002522:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	2200      	movs	r2, #0
 800252a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	2200      	movs	r2, #0
 8002532:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002536:	2301      	movs	r3, #1
 8002538:	e022      	b.n	8002580 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800253a:	f7ff f94b 	bl	80017d4 <HAL_GetTick>
 800253e:	4602      	mov	r2, r0
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	1ad3      	subs	r3, r2, r3
 8002544:	68ba      	ldr	r2, [r7, #8]
 8002546:	429a      	cmp	r2, r3
 8002548:	d302      	bcc.n	8002550 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 800254a:	68bb      	ldr	r3, [r7, #8]
 800254c:	2b00      	cmp	r3, #0
 800254e:	d10f      	bne.n	8002570 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002554:	f043 0220 	orr.w	r2, r3, #32
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	2220      	movs	r2, #32
 8002560:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	2200      	movs	r2, #0
 8002568:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800256c:	2301      	movs	r3, #1
 800256e:	e007      	b.n	8002580 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	699b      	ldr	r3, [r3, #24]
 8002576:	f003 0304 	and.w	r3, r3, #4
 800257a:	2b04      	cmp	r3, #4
 800257c:	d193      	bne.n	80024a6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800257e:	2300      	movs	r3, #0
}
 8002580:	4618      	mov	r0, r3
 8002582:	3710      	adds	r7, #16
 8002584:	46bd      	mov	sp, r7
 8002586:	bd80      	pop	{r7, pc}
 8002588:	fe00e800 	.word	0xfe00e800

0800258c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b08a      	sub	sp, #40	; 0x28
 8002590:	af00      	add	r7, sp, #0
 8002592:	60f8      	str	r0, [r7, #12]
 8002594:	60b9      	str	r1, [r7, #8]
 8002596:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002598:	2300      	movs	r3, #0
 800259a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	699b      	ldr	r3, [r3, #24]
 80025a4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80025a6:	2300      	movs	r3, #0
 80025a8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80025ae:	69bb      	ldr	r3, [r7, #24]
 80025b0:	f003 0310 	and.w	r3, r3, #16
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d068      	beq.n	800268a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	2210      	movs	r2, #16
 80025be:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80025c0:	e049      	b.n	8002656 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80025c2:	68bb      	ldr	r3, [r7, #8]
 80025c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025c8:	d045      	beq.n	8002656 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80025ca:	f7ff f903 	bl	80017d4 <HAL_GetTick>
 80025ce:	4602      	mov	r2, r0
 80025d0:	69fb      	ldr	r3, [r7, #28]
 80025d2:	1ad3      	subs	r3, r2, r3
 80025d4:	68ba      	ldr	r2, [r7, #8]
 80025d6:	429a      	cmp	r2, r3
 80025d8:	d302      	bcc.n	80025e0 <I2C_IsErrorOccurred+0x54>
 80025da:	68bb      	ldr	r3, [r7, #8]
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d13a      	bne.n	8002656 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	685b      	ldr	r3, [r3, #4]
 80025e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025ea:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80025f2:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	699b      	ldr	r3, [r3, #24]
 80025fa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80025fe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002602:	d121      	bne.n	8002648 <I2C_IsErrorOccurred+0xbc>
 8002604:	697b      	ldr	r3, [r7, #20]
 8002606:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800260a:	d01d      	beq.n	8002648 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800260c:	7cfb      	ldrb	r3, [r7, #19]
 800260e:	2b20      	cmp	r3, #32
 8002610:	d01a      	beq.n	8002648 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	685a      	ldr	r2, [r3, #4]
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002620:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002622:	f7ff f8d7 	bl	80017d4 <HAL_GetTick>
 8002626:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002628:	e00e      	b.n	8002648 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800262a:	f7ff f8d3 	bl	80017d4 <HAL_GetTick>
 800262e:	4602      	mov	r2, r0
 8002630:	69fb      	ldr	r3, [r7, #28]
 8002632:	1ad3      	subs	r3, r2, r3
 8002634:	2b19      	cmp	r3, #25
 8002636:	d907      	bls.n	8002648 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 8002638:	6a3b      	ldr	r3, [r7, #32]
 800263a:	f043 0320 	orr.w	r3, r3, #32
 800263e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002640:	2301      	movs	r3, #1
 8002642:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8002646:	e006      	b.n	8002656 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	699b      	ldr	r3, [r3, #24]
 800264e:	f003 0320 	and.w	r3, r3, #32
 8002652:	2b20      	cmp	r3, #32
 8002654:	d1e9      	bne.n	800262a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	699b      	ldr	r3, [r3, #24]
 800265c:	f003 0320 	and.w	r3, r3, #32
 8002660:	2b20      	cmp	r3, #32
 8002662:	d003      	beq.n	800266c <I2C_IsErrorOccurred+0xe0>
 8002664:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002668:	2b00      	cmp	r3, #0
 800266a:	d0aa      	beq.n	80025c2 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800266c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002670:	2b00      	cmp	r3, #0
 8002672:	d103      	bne.n	800267c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	2220      	movs	r2, #32
 800267a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800267c:	6a3b      	ldr	r3, [r7, #32]
 800267e:	f043 0304 	orr.w	r3, r3, #4
 8002682:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002684:	2301      	movs	r3, #1
 8002686:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	699b      	ldr	r3, [r3, #24]
 8002690:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002692:	69bb      	ldr	r3, [r7, #24]
 8002694:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002698:	2b00      	cmp	r3, #0
 800269a:	d00b      	beq.n	80026b4 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800269c:	6a3b      	ldr	r3, [r7, #32]
 800269e:	f043 0301 	orr.w	r3, r3, #1
 80026a2:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80026ac:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80026ae:	2301      	movs	r3, #1
 80026b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80026b4:	69bb      	ldr	r3, [r7, #24]
 80026b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d00b      	beq.n	80026d6 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80026be:	6a3b      	ldr	r3, [r7, #32]
 80026c0:	f043 0308 	orr.w	r3, r3, #8
 80026c4:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80026ce:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80026d0:	2301      	movs	r3, #1
 80026d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80026d6:	69bb      	ldr	r3, [r7, #24]
 80026d8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d00b      	beq.n	80026f8 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80026e0:	6a3b      	ldr	r3, [r7, #32]
 80026e2:	f043 0302 	orr.w	r3, r3, #2
 80026e6:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 80026f0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80026f2:	2301      	movs	r3, #1
 80026f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80026f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d01c      	beq.n	800273a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002700:	68f8      	ldr	r0, [r7, #12]
 8002702:	f7ff fde9 	bl	80022d8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	6859      	ldr	r1, [r3, #4]
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	681a      	ldr	r2, [r3, #0]
 8002710:	4b0d      	ldr	r3, [pc, #52]	; (8002748 <I2C_IsErrorOccurred+0x1bc>)
 8002712:	400b      	ands	r3, r1
 8002714:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800271a:	6a3b      	ldr	r3, [r7, #32]
 800271c:	431a      	orrs	r2, r3
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	2220      	movs	r2, #32
 8002726:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	2200      	movs	r2, #0
 800272e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	2200      	movs	r2, #0
 8002736:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800273a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800273e:	4618      	mov	r0, r3
 8002740:	3728      	adds	r7, #40	; 0x28
 8002742:	46bd      	mov	sp, r7
 8002744:	bd80      	pop	{r7, pc}
 8002746:	bf00      	nop
 8002748:	fe00e800 	.word	0xfe00e800

0800274c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800274c:	b480      	push	{r7}
 800274e:	b087      	sub	sp, #28
 8002750:	af00      	add	r7, sp, #0
 8002752:	60f8      	str	r0, [r7, #12]
 8002754:	607b      	str	r3, [r7, #4]
 8002756:	460b      	mov	r3, r1
 8002758:	817b      	strh	r3, [r7, #10]
 800275a:	4613      	mov	r3, r2
 800275c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800275e:	897b      	ldrh	r3, [r7, #10]
 8002760:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002764:	7a7b      	ldrb	r3, [r7, #9]
 8002766:	041b      	lsls	r3, r3, #16
 8002768:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800276c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002772:	6a3b      	ldr	r3, [r7, #32]
 8002774:	4313      	orrs	r3, r2
 8002776:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800277a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	685a      	ldr	r2, [r3, #4]
 8002782:	6a3b      	ldr	r3, [r7, #32]
 8002784:	0d5b      	lsrs	r3, r3, #21
 8002786:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800278a:	4b08      	ldr	r3, [pc, #32]	; (80027ac <I2C_TransferConfig+0x60>)
 800278c:	430b      	orrs	r3, r1
 800278e:	43db      	mvns	r3, r3
 8002790:	ea02 0103 	and.w	r1, r2, r3
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	697a      	ldr	r2, [r7, #20]
 800279a:	430a      	orrs	r2, r1
 800279c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800279e:	bf00      	nop
 80027a0:	371c      	adds	r7, #28
 80027a2:	46bd      	mov	sp, r7
 80027a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a8:	4770      	bx	lr
 80027aa:	bf00      	nop
 80027ac:	03ff63ff 	.word	0x03ff63ff

080027b0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80027b0:	b480      	push	{r7}
 80027b2:	b083      	sub	sp, #12
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
 80027b8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80027c0:	b2db      	uxtb	r3, r3
 80027c2:	2b20      	cmp	r3, #32
 80027c4:	d138      	bne.n	8002838 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80027cc:	2b01      	cmp	r3, #1
 80027ce:	d101      	bne.n	80027d4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80027d0:	2302      	movs	r3, #2
 80027d2:	e032      	b.n	800283a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2201      	movs	r2, #1
 80027d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2224      	movs	r2, #36	; 0x24
 80027e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	681a      	ldr	r2, [r3, #0]
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f022 0201 	bic.w	r2, r2, #1
 80027f2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	681a      	ldr	r2, [r3, #0]
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002802:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	6819      	ldr	r1, [r3, #0]
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	683a      	ldr	r2, [r7, #0]
 8002810:	430a      	orrs	r2, r1
 8002812:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	681a      	ldr	r2, [r3, #0]
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f042 0201 	orr.w	r2, r2, #1
 8002822:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2220      	movs	r2, #32
 8002828:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2200      	movs	r2, #0
 8002830:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002834:	2300      	movs	r3, #0
 8002836:	e000      	b.n	800283a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002838:	2302      	movs	r3, #2
  }
}
 800283a:	4618      	mov	r0, r3
 800283c:	370c      	adds	r7, #12
 800283e:	46bd      	mov	sp, r7
 8002840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002844:	4770      	bx	lr

08002846 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002846:	b480      	push	{r7}
 8002848:	b085      	sub	sp, #20
 800284a:	af00      	add	r7, sp, #0
 800284c:	6078      	str	r0, [r7, #4]
 800284e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002856:	b2db      	uxtb	r3, r3
 8002858:	2b20      	cmp	r3, #32
 800285a:	d139      	bne.n	80028d0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002862:	2b01      	cmp	r3, #1
 8002864:	d101      	bne.n	800286a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002866:	2302      	movs	r3, #2
 8002868:	e033      	b.n	80028d2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	2201      	movs	r2, #1
 800286e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	2224      	movs	r2, #36	; 0x24
 8002876:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	681a      	ldr	r2, [r3, #0]
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f022 0201 	bic.w	r2, r2, #1
 8002888:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002898:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	021b      	lsls	r3, r3, #8
 800289e:	68fa      	ldr	r2, [r7, #12]
 80028a0:	4313      	orrs	r3, r2
 80028a2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	68fa      	ldr	r2, [r7, #12]
 80028aa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	681a      	ldr	r2, [r3, #0]
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f042 0201 	orr.w	r2, r2, #1
 80028ba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2220      	movs	r2, #32
 80028c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	2200      	movs	r2, #0
 80028c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80028cc:	2300      	movs	r3, #0
 80028ce:	e000      	b.n	80028d2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80028d0:	2302      	movs	r3, #2
  }
}
 80028d2:	4618      	mov	r0, r3
 80028d4:	3714      	adds	r7, #20
 80028d6:	46bd      	mov	sp, r7
 80028d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028dc:	4770      	bx	lr
	...

080028e0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b082      	sub	sp, #8
 80028e4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80028e6:	2300      	movs	r3, #0
 80028e8:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80028ea:	4b23      	ldr	r3, [pc, #140]	; (8002978 <HAL_PWREx_EnableOverDrive+0x98>)
 80028ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ee:	4a22      	ldr	r2, [pc, #136]	; (8002978 <HAL_PWREx_EnableOverDrive+0x98>)
 80028f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028f4:	6413      	str	r3, [r2, #64]	; 0x40
 80028f6:	4b20      	ldr	r3, [pc, #128]	; (8002978 <HAL_PWREx_EnableOverDrive+0x98>)
 80028f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028fe:	603b      	str	r3, [r7, #0]
 8002900:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002902:	4b1e      	ldr	r3, [pc, #120]	; (800297c <HAL_PWREx_EnableOverDrive+0x9c>)
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	4a1d      	ldr	r2, [pc, #116]	; (800297c <HAL_PWREx_EnableOverDrive+0x9c>)
 8002908:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800290c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800290e:	f7fe ff61 	bl	80017d4 <HAL_GetTick>
 8002912:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002914:	e009      	b.n	800292a <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002916:	f7fe ff5d 	bl	80017d4 <HAL_GetTick>
 800291a:	4602      	mov	r2, r0
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	1ad3      	subs	r3, r2, r3
 8002920:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002924:	d901      	bls.n	800292a <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8002926:	2303      	movs	r3, #3
 8002928:	e022      	b.n	8002970 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800292a:	4b14      	ldr	r3, [pc, #80]	; (800297c <HAL_PWREx_EnableOverDrive+0x9c>)
 800292c:	685b      	ldr	r3, [r3, #4]
 800292e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002932:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002936:	d1ee      	bne.n	8002916 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002938:	4b10      	ldr	r3, [pc, #64]	; (800297c <HAL_PWREx_EnableOverDrive+0x9c>)
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	4a0f      	ldr	r2, [pc, #60]	; (800297c <HAL_PWREx_EnableOverDrive+0x9c>)
 800293e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002942:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002944:	f7fe ff46 	bl	80017d4 <HAL_GetTick>
 8002948:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800294a:	e009      	b.n	8002960 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800294c:	f7fe ff42 	bl	80017d4 <HAL_GetTick>
 8002950:	4602      	mov	r2, r0
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	1ad3      	subs	r3, r2, r3
 8002956:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800295a:	d901      	bls.n	8002960 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 800295c:	2303      	movs	r3, #3
 800295e:	e007      	b.n	8002970 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002960:	4b06      	ldr	r3, [pc, #24]	; (800297c <HAL_PWREx_EnableOverDrive+0x9c>)
 8002962:	685b      	ldr	r3, [r3, #4]
 8002964:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002968:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800296c:	d1ee      	bne.n	800294c <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800296e:	2300      	movs	r3, #0
}
 8002970:	4618      	mov	r0, r3
 8002972:	3708      	adds	r7, #8
 8002974:	46bd      	mov	sp, r7
 8002976:	bd80      	pop	{r7, pc}
 8002978:	40023800 	.word	0x40023800
 800297c:	40007000 	.word	0x40007000

08002980 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	b086      	sub	sp, #24
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002988:	2300      	movs	r3, #0
 800298a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2b00      	cmp	r3, #0
 8002990:	d101      	bne.n	8002996 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002992:	2301      	movs	r3, #1
 8002994:	e291      	b.n	8002eba <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f003 0301 	and.w	r3, r3, #1
 800299e:	2b00      	cmp	r3, #0
 80029a0:	f000 8087 	beq.w	8002ab2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80029a4:	4b96      	ldr	r3, [pc, #600]	; (8002c00 <HAL_RCC_OscConfig+0x280>)
 80029a6:	689b      	ldr	r3, [r3, #8]
 80029a8:	f003 030c 	and.w	r3, r3, #12
 80029ac:	2b04      	cmp	r3, #4
 80029ae:	d00c      	beq.n	80029ca <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80029b0:	4b93      	ldr	r3, [pc, #588]	; (8002c00 <HAL_RCC_OscConfig+0x280>)
 80029b2:	689b      	ldr	r3, [r3, #8]
 80029b4:	f003 030c 	and.w	r3, r3, #12
 80029b8:	2b08      	cmp	r3, #8
 80029ba:	d112      	bne.n	80029e2 <HAL_RCC_OscConfig+0x62>
 80029bc:	4b90      	ldr	r3, [pc, #576]	; (8002c00 <HAL_RCC_OscConfig+0x280>)
 80029be:	685b      	ldr	r3, [r3, #4]
 80029c0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029c4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80029c8:	d10b      	bne.n	80029e2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029ca:	4b8d      	ldr	r3, [pc, #564]	; (8002c00 <HAL_RCC_OscConfig+0x280>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d06c      	beq.n	8002ab0 <HAL_RCC_OscConfig+0x130>
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	685b      	ldr	r3, [r3, #4]
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d168      	bne.n	8002ab0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80029de:	2301      	movs	r3, #1
 80029e0:	e26b      	b.n	8002eba <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	685b      	ldr	r3, [r3, #4]
 80029e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029ea:	d106      	bne.n	80029fa <HAL_RCC_OscConfig+0x7a>
 80029ec:	4b84      	ldr	r3, [pc, #528]	; (8002c00 <HAL_RCC_OscConfig+0x280>)
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	4a83      	ldr	r2, [pc, #524]	; (8002c00 <HAL_RCC_OscConfig+0x280>)
 80029f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029f6:	6013      	str	r3, [r2, #0]
 80029f8:	e02e      	b.n	8002a58 <HAL_RCC_OscConfig+0xd8>
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	685b      	ldr	r3, [r3, #4]
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d10c      	bne.n	8002a1c <HAL_RCC_OscConfig+0x9c>
 8002a02:	4b7f      	ldr	r3, [pc, #508]	; (8002c00 <HAL_RCC_OscConfig+0x280>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	4a7e      	ldr	r2, [pc, #504]	; (8002c00 <HAL_RCC_OscConfig+0x280>)
 8002a08:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a0c:	6013      	str	r3, [r2, #0]
 8002a0e:	4b7c      	ldr	r3, [pc, #496]	; (8002c00 <HAL_RCC_OscConfig+0x280>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	4a7b      	ldr	r2, [pc, #492]	; (8002c00 <HAL_RCC_OscConfig+0x280>)
 8002a14:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a18:	6013      	str	r3, [r2, #0]
 8002a1a:	e01d      	b.n	8002a58 <HAL_RCC_OscConfig+0xd8>
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	685b      	ldr	r3, [r3, #4]
 8002a20:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002a24:	d10c      	bne.n	8002a40 <HAL_RCC_OscConfig+0xc0>
 8002a26:	4b76      	ldr	r3, [pc, #472]	; (8002c00 <HAL_RCC_OscConfig+0x280>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	4a75      	ldr	r2, [pc, #468]	; (8002c00 <HAL_RCC_OscConfig+0x280>)
 8002a2c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a30:	6013      	str	r3, [r2, #0]
 8002a32:	4b73      	ldr	r3, [pc, #460]	; (8002c00 <HAL_RCC_OscConfig+0x280>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	4a72      	ldr	r2, [pc, #456]	; (8002c00 <HAL_RCC_OscConfig+0x280>)
 8002a38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a3c:	6013      	str	r3, [r2, #0]
 8002a3e:	e00b      	b.n	8002a58 <HAL_RCC_OscConfig+0xd8>
 8002a40:	4b6f      	ldr	r3, [pc, #444]	; (8002c00 <HAL_RCC_OscConfig+0x280>)
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	4a6e      	ldr	r2, [pc, #440]	; (8002c00 <HAL_RCC_OscConfig+0x280>)
 8002a46:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a4a:	6013      	str	r3, [r2, #0]
 8002a4c:	4b6c      	ldr	r3, [pc, #432]	; (8002c00 <HAL_RCC_OscConfig+0x280>)
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	4a6b      	ldr	r2, [pc, #428]	; (8002c00 <HAL_RCC_OscConfig+0x280>)
 8002a52:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a56:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	685b      	ldr	r3, [r3, #4]
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d013      	beq.n	8002a88 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a60:	f7fe feb8 	bl	80017d4 <HAL_GetTick>
 8002a64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a66:	e008      	b.n	8002a7a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a68:	f7fe feb4 	bl	80017d4 <HAL_GetTick>
 8002a6c:	4602      	mov	r2, r0
 8002a6e:	693b      	ldr	r3, [r7, #16]
 8002a70:	1ad3      	subs	r3, r2, r3
 8002a72:	2b64      	cmp	r3, #100	; 0x64
 8002a74:	d901      	bls.n	8002a7a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002a76:	2303      	movs	r3, #3
 8002a78:	e21f      	b.n	8002eba <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a7a:	4b61      	ldr	r3, [pc, #388]	; (8002c00 <HAL_RCC_OscConfig+0x280>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d0f0      	beq.n	8002a68 <HAL_RCC_OscConfig+0xe8>
 8002a86:	e014      	b.n	8002ab2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a88:	f7fe fea4 	bl	80017d4 <HAL_GetTick>
 8002a8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a8e:	e008      	b.n	8002aa2 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a90:	f7fe fea0 	bl	80017d4 <HAL_GetTick>
 8002a94:	4602      	mov	r2, r0
 8002a96:	693b      	ldr	r3, [r7, #16]
 8002a98:	1ad3      	subs	r3, r2, r3
 8002a9a:	2b64      	cmp	r3, #100	; 0x64
 8002a9c:	d901      	bls.n	8002aa2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002a9e:	2303      	movs	r3, #3
 8002aa0:	e20b      	b.n	8002eba <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002aa2:	4b57      	ldr	r3, [pc, #348]	; (8002c00 <HAL_RCC_OscConfig+0x280>)
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d1f0      	bne.n	8002a90 <HAL_RCC_OscConfig+0x110>
 8002aae:	e000      	b.n	8002ab2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ab0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f003 0302 	and.w	r3, r3, #2
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d069      	beq.n	8002b92 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002abe:	4b50      	ldr	r3, [pc, #320]	; (8002c00 <HAL_RCC_OscConfig+0x280>)
 8002ac0:	689b      	ldr	r3, [r3, #8]
 8002ac2:	f003 030c 	and.w	r3, r3, #12
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d00b      	beq.n	8002ae2 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002aca:	4b4d      	ldr	r3, [pc, #308]	; (8002c00 <HAL_RCC_OscConfig+0x280>)
 8002acc:	689b      	ldr	r3, [r3, #8]
 8002ace:	f003 030c 	and.w	r3, r3, #12
 8002ad2:	2b08      	cmp	r3, #8
 8002ad4:	d11c      	bne.n	8002b10 <HAL_RCC_OscConfig+0x190>
 8002ad6:	4b4a      	ldr	r3, [pc, #296]	; (8002c00 <HAL_RCC_OscConfig+0x280>)
 8002ad8:	685b      	ldr	r3, [r3, #4]
 8002ada:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d116      	bne.n	8002b10 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ae2:	4b47      	ldr	r3, [pc, #284]	; (8002c00 <HAL_RCC_OscConfig+0x280>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f003 0302 	and.w	r3, r3, #2
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d005      	beq.n	8002afa <HAL_RCC_OscConfig+0x17a>
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	68db      	ldr	r3, [r3, #12]
 8002af2:	2b01      	cmp	r3, #1
 8002af4:	d001      	beq.n	8002afa <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002af6:	2301      	movs	r3, #1
 8002af8:	e1df      	b.n	8002eba <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002afa:	4b41      	ldr	r3, [pc, #260]	; (8002c00 <HAL_RCC_OscConfig+0x280>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	691b      	ldr	r3, [r3, #16]
 8002b06:	00db      	lsls	r3, r3, #3
 8002b08:	493d      	ldr	r1, [pc, #244]	; (8002c00 <HAL_RCC_OscConfig+0x280>)
 8002b0a:	4313      	orrs	r3, r2
 8002b0c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b0e:	e040      	b.n	8002b92 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	68db      	ldr	r3, [r3, #12]
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d023      	beq.n	8002b60 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b18:	4b39      	ldr	r3, [pc, #228]	; (8002c00 <HAL_RCC_OscConfig+0x280>)
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	4a38      	ldr	r2, [pc, #224]	; (8002c00 <HAL_RCC_OscConfig+0x280>)
 8002b1e:	f043 0301 	orr.w	r3, r3, #1
 8002b22:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b24:	f7fe fe56 	bl	80017d4 <HAL_GetTick>
 8002b28:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b2a:	e008      	b.n	8002b3e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b2c:	f7fe fe52 	bl	80017d4 <HAL_GetTick>
 8002b30:	4602      	mov	r2, r0
 8002b32:	693b      	ldr	r3, [r7, #16]
 8002b34:	1ad3      	subs	r3, r2, r3
 8002b36:	2b02      	cmp	r3, #2
 8002b38:	d901      	bls.n	8002b3e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002b3a:	2303      	movs	r3, #3
 8002b3c:	e1bd      	b.n	8002eba <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b3e:	4b30      	ldr	r3, [pc, #192]	; (8002c00 <HAL_RCC_OscConfig+0x280>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f003 0302 	and.w	r3, r3, #2
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d0f0      	beq.n	8002b2c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b4a:	4b2d      	ldr	r3, [pc, #180]	; (8002c00 <HAL_RCC_OscConfig+0x280>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	691b      	ldr	r3, [r3, #16]
 8002b56:	00db      	lsls	r3, r3, #3
 8002b58:	4929      	ldr	r1, [pc, #164]	; (8002c00 <HAL_RCC_OscConfig+0x280>)
 8002b5a:	4313      	orrs	r3, r2
 8002b5c:	600b      	str	r3, [r1, #0]
 8002b5e:	e018      	b.n	8002b92 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b60:	4b27      	ldr	r3, [pc, #156]	; (8002c00 <HAL_RCC_OscConfig+0x280>)
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	4a26      	ldr	r2, [pc, #152]	; (8002c00 <HAL_RCC_OscConfig+0x280>)
 8002b66:	f023 0301 	bic.w	r3, r3, #1
 8002b6a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b6c:	f7fe fe32 	bl	80017d4 <HAL_GetTick>
 8002b70:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b72:	e008      	b.n	8002b86 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b74:	f7fe fe2e 	bl	80017d4 <HAL_GetTick>
 8002b78:	4602      	mov	r2, r0
 8002b7a:	693b      	ldr	r3, [r7, #16]
 8002b7c:	1ad3      	subs	r3, r2, r3
 8002b7e:	2b02      	cmp	r3, #2
 8002b80:	d901      	bls.n	8002b86 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002b82:	2303      	movs	r3, #3
 8002b84:	e199      	b.n	8002eba <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b86:	4b1e      	ldr	r3, [pc, #120]	; (8002c00 <HAL_RCC_OscConfig+0x280>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f003 0302 	and.w	r3, r3, #2
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d1f0      	bne.n	8002b74 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f003 0308 	and.w	r3, r3, #8
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d038      	beq.n	8002c10 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	695b      	ldr	r3, [r3, #20]
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d019      	beq.n	8002bda <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ba6:	4b16      	ldr	r3, [pc, #88]	; (8002c00 <HAL_RCC_OscConfig+0x280>)
 8002ba8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002baa:	4a15      	ldr	r2, [pc, #84]	; (8002c00 <HAL_RCC_OscConfig+0x280>)
 8002bac:	f043 0301 	orr.w	r3, r3, #1
 8002bb0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bb2:	f7fe fe0f 	bl	80017d4 <HAL_GetTick>
 8002bb6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002bb8:	e008      	b.n	8002bcc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002bba:	f7fe fe0b 	bl	80017d4 <HAL_GetTick>
 8002bbe:	4602      	mov	r2, r0
 8002bc0:	693b      	ldr	r3, [r7, #16]
 8002bc2:	1ad3      	subs	r3, r2, r3
 8002bc4:	2b02      	cmp	r3, #2
 8002bc6:	d901      	bls.n	8002bcc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002bc8:	2303      	movs	r3, #3
 8002bca:	e176      	b.n	8002eba <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002bcc:	4b0c      	ldr	r3, [pc, #48]	; (8002c00 <HAL_RCC_OscConfig+0x280>)
 8002bce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002bd0:	f003 0302 	and.w	r3, r3, #2
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d0f0      	beq.n	8002bba <HAL_RCC_OscConfig+0x23a>
 8002bd8:	e01a      	b.n	8002c10 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002bda:	4b09      	ldr	r3, [pc, #36]	; (8002c00 <HAL_RCC_OscConfig+0x280>)
 8002bdc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002bde:	4a08      	ldr	r2, [pc, #32]	; (8002c00 <HAL_RCC_OscConfig+0x280>)
 8002be0:	f023 0301 	bic.w	r3, r3, #1
 8002be4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002be6:	f7fe fdf5 	bl	80017d4 <HAL_GetTick>
 8002bea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002bec:	e00a      	b.n	8002c04 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002bee:	f7fe fdf1 	bl	80017d4 <HAL_GetTick>
 8002bf2:	4602      	mov	r2, r0
 8002bf4:	693b      	ldr	r3, [r7, #16]
 8002bf6:	1ad3      	subs	r3, r2, r3
 8002bf8:	2b02      	cmp	r3, #2
 8002bfa:	d903      	bls.n	8002c04 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002bfc:	2303      	movs	r3, #3
 8002bfe:	e15c      	b.n	8002eba <HAL_RCC_OscConfig+0x53a>
 8002c00:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c04:	4b91      	ldr	r3, [pc, #580]	; (8002e4c <HAL_RCC_OscConfig+0x4cc>)
 8002c06:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c08:	f003 0302 	and.w	r3, r3, #2
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d1ee      	bne.n	8002bee <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f003 0304 	and.w	r3, r3, #4
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	f000 80a4 	beq.w	8002d66 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c1e:	4b8b      	ldr	r3, [pc, #556]	; (8002e4c <HAL_RCC_OscConfig+0x4cc>)
 8002c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d10d      	bne.n	8002c46 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c2a:	4b88      	ldr	r3, [pc, #544]	; (8002e4c <HAL_RCC_OscConfig+0x4cc>)
 8002c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c2e:	4a87      	ldr	r2, [pc, #540]	; (8002e4c <HAL_RCC_OscConfig+0x4cc>)
 8002c30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c34:	6413      	str	r3, [r2, #64]	; 0x40
 8002c36:	4b85      	ldr	r3, [pc, #532]	; (8002e4c <HAL_RCC_OscConfig+0x4cc>)
 8002c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c3e:	60bb      	str	r3, [r7, #8]
 8002c40:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c42:	2301      	movs	r3, #1
 8002c44:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002c46:	4b82      	ldr	r3, [pc, #520]	; (8002e50 <HAL_RCC_OscConfig+0x4d0>)
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d118      	bne.n	8002c84 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002c52:	4b7f      	ldr	r3, [pc, #508]	; (8002e50 <HAL_RCC_OscConfig+0x4d0>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	4a7e      	ldr	r2, [pc, #504]	; (8002e50 <HAL_RCC_OscConfig+0x4d0>)
 8002c58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c5c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c5e:	f7fe fdb9 	bl	80017d4 <HAL_GetTick>
 8002c62:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002c64:	e008      	b.n	8002c78 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c66:	f7fe fdb5 	bl	80017d4 <HAL_GetTick>
 8002c6a:	4602      	mov	r2, r0
 8002c6c:	693b      	ldr	r3, [r7, #16]
 8002c6e:	1ad3      	subs	r3, r2, r3
 8002c70:	2b64      	cmp	r3, #100	; 0x64
 8002c72:	d901      	bls.n	8002c78 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002c74:	2303      	movs	r3, #3
 8002c76:	e120      	b.n	8002eba <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002c78:	4b75      	ldr	r3, [pc, #468]	; (8002e50 <HAL_RCC_OscConfig+0x4d0>)
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d0f0      	beq.n	8002c66 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	689b      	ldr	r3, [r3, #8]
 8002c88:	2b01      	cmp	r3, #1
 8002c8a:	d106      	bne.n	8002c9a <HAL_RCC_OscConfig+0x31a>
 8002c8c:	4b6f      	ldr	r3, [pc, #444]	; (8002e4c <HAL_RCC_OscConfig+0x4cc>)
 8002c8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c90:	4a6e      	ldr	r2, [pc, #440]	; (8002e4c <HAL_RCC_OscConfig+0x4cc>)
 8002c92:	f043 0301 	orr.w	r3, r3, #1
 8002c96:	6713      	str	r3, [r2, #112]	; 0x70
 8002c98:	e02d      	b.n	8002cf6 <HAL_RCC_OscConfig+0x376>
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	689b      	ldr	r3, [r3, #8]
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d10c      	bne.n	8002cbc <HAL_RCC_OscConfig+0x33c>
 8002ca2:	4b6a      	ldr	r3, [pc, #424]	; (8002e4c <HAL_RCC_OscConfig+0x4cc>)
 8002ca4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ca6:	4a69      	ldr	r2, [pc, #420]	; (8002e4c <HAL_RCC_OscConfig+0x4cc>)
 8002ca8:	f023 0301 	bic.w	r3, r3, #1
 8002cac:	6713      	str	r3, [r2, #112]	; 0x70
 8002cae:	4b67      	ldr	r3, [pc, #412]	; (8002e4c <HAL_RCC_OscConfig+0x4cc>)
 8002cb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cb2:	4a66      	ldr	r2, [pc, #408]	; (8002e4c <HAL_RCC_OscConfig+0x4cc>)
 8002cb4:	f023 0304 	bic.w	r3, r3, #4
 8002cb8:	6713      	str	r3, [r2, #112]	; 0x70
 8002cba:	e01c      	b.n	8002cf6 <HAL_RCC_OscConfig+0x376>
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	689b      	ldr	r3, [r3, #8]
 8002cc0:	2b05      	cmp	r3, #5
 8002cc2:	d10c      	bne.n	8002cde <HAL_RCC_OscConfig+0x35e>
 8002cc4:	4b61      	ldr	r3, [pc, #388]	; (8002e4c <HAL_RCC_OscConfig+0x4cc>)
 8002cc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cc8:	4a60      	ldr	r2, [pc, #384]	; (8002e4c <HAL_RCC_OscConfig+0x4cc>)
 8002cca:	f043 0304 	orr.w	r3, r3, #4
 8002cce:	6713      	str	r3, [r2, #112]	; 0x70
 8002cd0:	4b5e      	ldr	r3, [pc, #376]	; (8002e4c <HAL_RCC_OscConfig+0x4cc>)
 8002cd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cd4:	4a5d      	ldr	r2, [pc, #372]	; (8002e4c <HAL_RCC_OscConfig+0x4cc>)
 8002cd6:	f043 0301 	orr.w	r3, r3, #1
 8002cda:	6713      	str	r3, [r2, #112]	; 0x70
 8002cdc:	e00b      	b.n	8002cf6 <HAL_RCC_OscConfig+0x376>
 8002cde:	4b5b      	ldr	r3, [pc, #364]	; (8002e4c <HAL_RCC_OscConfig+0x4cc>)
 8002ce0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ce2:	4a5a      	ldr	r2, [pc, #360]	; (8002e4c <HAL_RCC_OscConfig+0x4cc>)
 8002ce4:	f023 0301 	bic.w	r3, r3, #1
 8002ce8:	6713      	str	r3, [r2, #112]	; 0x70
 8002cea:	4b58      	ldr	r3, [pc, #352]	; (8002e4c <HAL_RCC_OscConfig+0x4cc>)
 8002cec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cee:	4a57      	ldr	r2, [pc, #348]	; (8002e4c <HAL_RCC_OscConfig+0x4cc>)
 8002cf0:	f023 0304 	bic.w	r3, r3, #4
 8002cf4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	689b      	ldr	r3, [r3, #8]
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d015      	beq.n	8002d2a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cfe:	f7fe fd69 	bl	80017d4 <HAL_GetTick>
 8002d02:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d04:	e00a      	b.n	8002d1c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d06:	f7fe fd65 	bl	80017d4 <HAL_GetTick>
 8002d0a:	4602      	mov	r2, r0
 8002d0c:	693b      	ldr	r3, [r7, #16]
 8002d0e:	1ad3      	subs	r3, r2, r3
 8002d10:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d14:	4293      	cmp	r3, r2
 8002d16:	d901      	bls.n	8002d1c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002d18:	2303      	movs	r3, #3
 8002d1a:	e0ce      	b.n	8002eba <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d1c:	4b4b      	ldr	r3, [pc, #300]	; (8002e4c <HAL_RCC_OscConfig+0x4cc>)
 8002d1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d20:	f003 0302 	and.w	r3, r3, #2
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d0ee      	beq.n	8002d06 <HAL_RCC_OscConfig+0x386>
 8002d28:	e014      	b.n	8002d54 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d2a:	f7fe fd53 	bl	80017d4 <HAL_GetTick>
 8002d2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d30:	e00a      	b.n	8002d48 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d32:	f7fe fd4f 	bl	80017d4 <HAL_GetTick>
 8002d36:	4602      	mov	r2, r0
 8002d38:	693b      	ldr	r3, [r7, #16]
 8002d3a:	1ad3      	subs	r3, r2, r3
 8002d3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d40:	4293      	cmp	r3, r2
 8002d42:	d901      	bls.n	8002d48 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002d44:	2303      	movs	r3, #3
 8002d46:	e0b8      	b.n	8002eba <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d48:	4b40      	ldr	r3, [pc, #256]	; (8002e4c <HAL_RCC_OscConfig+0x4cc>)
 8002d4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d4c:	f003 0302 	and.w	r3, r3, #2
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d1ee      	bne.n	8002d32 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002d54:	7dfb      	ldrb	r3, [r7, #23]
 8002d56:	2b01      	cmp	r3, #1
 8002d58:	d105      	bne.n	8002d66 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d5a:	4b3c      	ldr	r3, [pc, #240]	; (8002e4c <HAL_RCC_OscConfig+0x4cc>)
 8002d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d5e:	4a3b      	ldr	r2, [pc, #236]	; (8002e4c <HAL_RCC_OscConfig+0x4cc>)
 8002d60:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d64:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	699b      	ldr	r3, [r3, #24]
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	f000 80a4 	beq.w	8002eb8 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002d70:	4b36      	ldr	r3, [pc, #216]	; (8002e4c <HAL_RCC_OscConfig+0x4cc>)
 8002d72:	689b      	ldr	r3, [r3, #8]
 8002d74:	f003 030c 	and.w	r3, r3, #12
 8002d78:	2b08      	cmp	r3, #8
 8002d7a:	d06b      	beq.n	8002e54 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	699b      	ldr	r3, [r3, #24]
 8002d80:	2b02      	cmp	r3, #2
 8002d82:	d149      	bne.n	8002e18 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d84:	4b31      	ldr	r3, [pc, #196]	; (8002e4c <HAL_RCC_OscConfig+0x4cc>)
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	4a30      	ldr	r2, [pc, #192]	; (8002e4c <HAL_RCC_OscConfig+0x4cc>)
 8002d8a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002d8e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d90:	f7fe fd20 	bl	80017d4 <HAL_GetTick>
 8002d94:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d96:	e008      	b.n	8002daa <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d98:	f7fe fd1c 	bl	80017d4 <HAL_GetTick>
 8002d9c:	4602      	mov	r2, r0
 8002d9e:	693b      	ldr	r3, [r7, #16]
 8002da0:	1ad3      	subs	r3, r2, r3
 8002da2:	2b02      	cmp	r3, #2
 8002da4:	d901      	bls.n	8002daa <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002da6:	2303      	movs	r3, #3
 8002da8:	e087      	b.n	8002eba <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002daa:	4b28      	ldr	r3, [pc, #160]	; (8002e4c <HAL_RCC_OscConfig+0x4cc>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d1f0      	bne.n	8002d98 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	69da      	ldr	r2, [r3, #28]
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6a1b      	ldr	r3, [r3, #32]
 8002dbe:	431a      	orrs	r2, r3
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dc4:	019b      	lsls	r3, r3, #6
 8002dc6:	431a      	orrs	r2, r3
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dcc:	085b      	lsrs	r3, r3, #1
 8002dce:	3b01      	subs	r3, #1
 8002dd0:	041b      	lsls	r3, r3, #16
 8002dd2:	431a      	orrs	r2, r3
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dd8:	061b      	lsls	r3, r3, #24
 8002dda:	4313      	orrs	r3, r2
 8002ddc:	4a1b      	ldr	r2, [pc, #108]	; (8002e4c <HAL_RCC_OscConfig+0x4cc>)
 8002dde:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002de2:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002de4:	4b19      	ldr	r3, [pc, #100]	; (8002e4c <HAL_RCC_OscConfig+0x4cc>)
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	4a18      	ldr	r2, [pc, #96]	; (8002e4c <HAL_RCC_OscConfig+0x4cc>)
 8002dea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002dee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002df0:	f7fe fcf0 	bl	80017d4 <HAL_GetTick>
 8002df4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002df6:	e008      	b.n	8002e0a <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002df8:	f7fe fcec 	bl	80017d4 <HAL_GetTick>
 8002dfc:	4602      	mov	r2, r0
 8002dfe:	693b      	ldr	r3, [r7, #16]
 8002e00:	1ad3      	subs	r3, r2, r3
 8002e02:	2b02      	cmp	r3, #2
 8002e04:	d901      	bls.n	8002e0a <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8002e06:	2303      	movs	r3, #3
 8002e08:	e057      	b.n	8002eba <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e0a:	4b10      	ldr	r3, [pc, #64]	; (8002e4c <HAL_RCC_OscConfig+0x4cc>)
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d0f0      	beq.n	8002df8 <HAL_RCC_OscConfig+0x478>
 8002e16:	e04f      	b.n	8002eb8 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e18:	4b0c      	ldr	r3, [pc, #48]	; (8002e4c <HAL_RCC_OscConfig+0x4cc>)
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	4a0b      	ldr	r2, [pc, #44]	; (8002e4c <HAL_RCC_OscConfig+0x4cc>)
 8002e1e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002e22:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e24:	f7fe fcd6 	bl	80017d4 <HAL_GetTick>
 8002e28:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e2a:	e008      	b.n	8002e3e <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e2c:	f7fe fcd2 	bl	80017d4 <HAL_GetTick>
 8002e30:	4602      	mov	r2, r0
 8002e32:	693b      	ldr	r3, [r7, #16]
 8002e34:	1ad3      	subs	r3, r2, r3
 8002e36:	2b02      	cmp	r3, #2
 8002e38:	d901      	bls.n	8002e3e <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8002e3a:	2303      	movs	r3, #3
 8002e3c:	e03d      	b.n	8002eba <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e3e:	4b03      	ldr	r3, [pc, #12]	; (8002e4c <HAL_RCC_OscConfig+0x4cc>)
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d1f0      	bne.n	8002e2c <HAL_RCC_OscConfig+0x4ac>
 8002e4a:	e035      	b.n	8002eb8 <HAL_RCC_OscConfig+0x538>
 8002e4c:	40023800 	.word	0x40023800
 8002e50:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002e54:	4b1b      	ldr	r3, [pc, #108]	; (8002ec4 <HAL_RCC_OscConfig+0x544>)
 8002e56:	685b      	ldr	r3, [r3, #4]
 8002e58:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	699b      	ldr	r3, [r3, #24]
 8002e5e:	2b01      	cmp	r3, #1
 8002e60:	d028      	beq.n	8002eb4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e6c:	429a      	cmp	r2, r3
 8002e6e:	d121      	bne.n	8002eb4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e7a:	429a      	cmp	r2, r3
 8002e7c:	d11a      	bne.n	8002eb4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002e7e:	68fa      	ldr	r2, [r7, #12]
 8002e80:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002e84:	4013      	ands	r3, r2
 8002e86:	687a      	ldr	r2, [r7, #4]
 8002e88:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002e8a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002e8c:	4293      	cmp	r3, r2
 8002e8e:	d111      	bne.n	8002eb4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e9a:	085b      	lsrs	r3, r3, #1
 8002e9c:	3b01      	subs	r3, #1
 8002e9e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002ea0:	429a      	cmp	r2, r3
 8002ea2:	d107      	bne.n	8002eb4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eae:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002eb0:	429a      	cmp	r2, r3
 8002eb2:	d001      	beq.n	8002eb8 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8002eb4:	2301      	movs	r3, #1
 8002eb6:	e000      	b.n	8002eba <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8002eb8:	2300      	movs	r3, #0
}
 8002eba:	4618      	mov	r0, r3
 8002ebc:	3718      	adds	r7, #24
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	bd80      	pop	{r7, pc}
 8002ec2:	bf00      	nop
 8002ec4:	40023800 	.word	0x40023800

08002ec8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b084      	sub	sp, #16
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
 8002ed0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d101      	bne.n	8002ee0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002edc:	2301      	movs	r3, #1
 8002ede:	e0d0      	b.n	8003082 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002ee0:	4b6a      	ldr	r3, [pc, #424]	; (800308c <HAL_RCC_ClockConfig+0x1c4>)
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f003 030f 	and.w	r3, r3, #15
 8002ee8:	683a      	ldr	r2, [r7, #0]
 8002eea:	429a      	cmp	r2, r3
 8002eec:	d910      	bls.n	8002f10 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002eee:	4b67      	ldr	r3, [pc, #412]	; (800308c <HAL_RCC_ClockConfig+0x1c4>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f023 020f 	bic.w	r2, r3, #15
 8002ef6:	4965      	ldr	r1, [pc, #404]	; (800308c <HAL_RCC_ClockConfig+0x1c4>)
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	4313      	orrs	r3, r2
 8002efc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002efe:	4b63      	ldr	r3, [pc, #396]	; (800308c <HAL_RCC_ClockConfig+0x1c4>)
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f003 030f 	and.w	r3, r3, #15
 8002f06:	683a      	ldr	r2, [r7, #0]
 8002f08:	429a      	cmp	r2, r3
 8002f0a:	d001      	beq.n	8002f10 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002f0c:	2301      	movs	r3, #1
 8002f0e:	e0b8      	b.n	8003082 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f003 0302 	and.w	r3, r3, #2
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d020      	beq.n	8002f5e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f003 0304 	and.w	r3, r3, #4
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d005      	beq.n	8002f34 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002f28:	4b59      	ldr	r3, [pc, #356]	; (8003090 <HAL_RCC_ClockConfig+0x1c8>)
 8002f2a:	689b      	ldr	r3, [r3, #8]
 8002f2c:	4a58      	ldr	r2, [pc, #352]	; (8003090 <HAL_RCC_ClockConfig+0x1c8>)
 8002f2e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002f32:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f003 0308 	and.w	r3, r3, #8
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d005      	beq.n	8002f4c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002f40:	4b53      	ldr	r3, [pc, #332]	; (8003090 <HAL_RCC_ClockConfig+0x1c8>)
 8002f42:	689b      	ldr	r3, [r3, #8]
 8002f44:	4a52      	ldr	r2, [pc, #328]	; (8003090 <HAL_RCC_ClockConfig+0x1c8>)
 8002f46:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002f4a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f4c:	4b50      	ldr	r3, [pc, #320]	; (8003090 <HAL_RCC_ClockConfig+0x1c8>)
 8002f4e:	689b      	ldr	r3, [r3, #8]
 8002f50:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	689b      	ldr	r3, [r3, #8]
 8002f58:	494d      	ldr	r1, [pc, #308]	; (8003090 <HAL_RCC_ClockConfig+0x1c8>)
 8002f5a:	4313      	orrs	r3, r2
 8002f5c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f003 0301 	and.w	r3, r3, #1
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d040      	beq.n	8002fec <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	685b      	ldr	r3, [r3, #4]
 8002f6e:	2b01      	cmp	r3, #1
 8002f70:	d107      	bne.n	8002f82 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f72:	4b47      	ldr	r3, [pc, #284]	; (8003090 <HAL_RCC_ClockConfig+0x1c8>)
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d115      	bne.n	8002faa <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002f7e:	2301      	movs	r3, #1
 8002f80:	e07f      	b.n	8003082 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	685b      	ldr	r3, [r3, #4]
 8002f86:	2b02      	cmp	r3, #2
 8002f88:	d107      	bne.n	8002f9a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f8a:	4b41      	ldr	r3, [pc, #260]	; (8003090 <HAL_RCC_ClockConfig+0x1c8>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d109      	bne.n	8002faa <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002f96:	2301      	movs	r3, #1
 8002f98:	e073      	b.n	8003082 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f9a:	4b3d      	ldr	r3, [pc, #244]	; (8003090 <HAL_RCC_ClockConfig+0x1c8>)
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f003 0302 	and.w	r3, r3, #2
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d101      	bne.n	8002faa <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	e06b      	b.n	8003082 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002faa:	4b39      	ldr	r3, [pc, #228]	; (8003090 <HAL_RCC_ClockConfig+0x1c8>)
 8002fac:	689b      	ldr	r3, [r3, #8]
 8002fae:	f023 0203 	bic.w	r2, r3, #3
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	685b      	ldr	r3, [r3, #4]
 8002fb6:	4936      	ldr	r1, [pc, #216]	; (8003090 <HAL_RCC_ClockConfig+0x1c8>)
 8002fb8:	4313      	orrs	r3, r2
 8002fba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002fbc:	f7fe fc0a 	bl	80017d4 <HAL_GetTick>
 8002fc0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fc2:	e00a      	b.n	8002fda <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002fc4:	f7fe fc06 	bl	80017d4 <HAL_GetTick>
 8002fc8:	4602      	mov	r2, r0
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	1ad3      	subs	r3, r2, r3
 8002fce:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	d901      	bls.n	8002fda <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002fd6:	2303      	movs	r3, #3
 8002fd8:	e053      	b.n	8003082 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fda:	4b2d      	ldr	r3, [pc, #180]	; (8003090 <HAL_RCC_ClockConfig+0x1c8>)
 8002fdc:	689b      	ldr	r3, [r3, #8]
 8002fde:	f003 020c 	and.w	r2, r3, #12
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	685b      	ldr	r3, [r3, #4]
 8002fe6:	009b      	lsls	r3, r3, #2
 8002fe8:	429a      	cmp	r2, r3
 8002fea:	d1eb      	bne.n	8002fc4 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002fec:	4b27      	ldr	r3, [pc, #156]	; (800308c <HAL_RCC_ClockConfig+0x1c4>)
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f003 030f 	and.w	r3, r3, #15
 8002ff4:	683a      	ldr	r2, [r7, #0]
 8002ff6:	429a      	cmp	r2, r3
 8002ff8:	d210      	bcs.n	800301c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ffa:	4b24      	ldr	r3, [pc, #144]	; (800308c <HAL_RCC_ClockConfig+0x1c4>)
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f023 020f 	bic.w	r2, r3, #15
 8003002:	4922      	ldr	r1, [pc, #136]	; (800308c <HAL_RCC_ClockConfig+0x1c4>)
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	4313      	orrs	r3, r2
 8003008:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800300a:	4b20      	ldr	r3, [pc, #128]	; (800308c <HAL_RCC_ClockConfig+0x1c4>)
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f003 030f 	and.w	r3, r3, #15
 8003012:	683a      	ldr	r2, [r7, #0]
 8003014:	429a      	cmp	r2, r3
 8003016:	d001      	beq.n	800301c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003018:	2301      	movs	r3, #1
 800301a:	e032      	b.n	8003082 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f003 0304 	and.w	r3, r3, #4
 8003024:	2b00      	cmp	r3, #0
 8003026:	d008      	beq.n	800303a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003028:	4b19      	ldr	r3, [pc, #100]	; (8003090 <HAL_RCC_ClockConfig+0x1c8>)
 800302a:	689b      	ldr	r3, [r3, #8]
 800302c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	68db      	ldr	r3, [r3, #12]
 8003034:	4916      	ldr	r1, [pc, #88]	; (8003090 <HAL_RCC_ClockConfig+0x1c8>)
 8003036:	4313      	orrs	r3, r2
 8003038:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f003 0308 	and.w	r3, r3, #8
 8003042:	2b00      	cmp	r3, #0
 8003044:	d009      	beq.n	800305a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003046:	4b12      	ldr	r3, [pc, #72]	; (8003090 <HAL_RCC_ClockConfig+0x1c8>)
 8003048:	689b      	ldr	r3, [r3, #8]
 800304a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	691b      	ldr	r3, [r3, #16]
 8003052:	00db      	lsls	r3, r3, #3
 8003054:	490e      	ldr	r1, [pc, #56]	; (8003090 <HAL_RCC_ClockConfig+0x1c8>)
 8003056:	4313      	orrs	r3, r2
 8003058:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800305a:	f000 f821 	bl	80030a0 <HAL_RCC_GetSysClockFreq>
 800305e:	4602      	mov	r2, r0
 8003060:	4b0b      	ldr	r3, [pc, #44]	; (8003090 <HAL_RCC_ClockConfig+0x1c8>)
 8003062:	689b      	ldr	r3, [r3, #8]
 8003064:	091b      	lsrs	r3, r3, #4
 8003066:	f003 030f 	and.w	r3, r3, #15
 800306a:	490a      	ldr	r1, [pc, #40]	; (8003094 <HAL_RCC_ClockConfig+0x1cc>)
 800306c:	5ccb      	ldrb	r3, [r1, r3]
 800306e:	fa22 f303 	lsr.w	r3, r2, r3
 8003072:	4a09      	ldr	r2, [pc, #36]	; (8003098 <HAL_RCC_ClockConfig+0x1d0>)
 8003074:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003076:	4b09      	ldr	r3, [pc, #36]	; (800309c <HAL_RCC_ClockConfig+0x1d4>)
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	4618      	mov	r0, r3
 800307c:	f7fe fb66 	bl	800174c <HAL_InitTick>

  return HAL_OK;
 8003080:	2300      	movs	r3, #0
}
 8003082:	4618      	mov	r0, r3
 8003084:	3710      	adds	r7, #16
 8003086:	46bd      	mov	sp, r7
 8003088:	bd80      	pop	{r7, pc}
 800308a:	bf00      	nop
 800308c:	40023c00 	.word	0x40023c00
 8003090:	40023800 	.word	0x40023800
 8003094:	08006f88 	.word	0x08006f88
 8003098:	20004ea0 	.word	0x20004ea0
 800309c:	20004ea4 	.word	0x20004ea4

080030a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80030a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80030a4:	b090      	sub	sp, #64	; 0x40
 80030a6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80030a8:	2300      	movs	r3, #0
 80030aa:	637b      	str	r3, [r7, #52]	; 0x34
 80030ac:	2300      	movs	r3, #0
 80030ae:	63fb      	str	r3, [r7, #60]	; 0x3c
 80030b0:	2300      	movs	r3, #0
 80030b2:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 80030b4:	2300      	movs	r3, #0
 80030b6:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80030b8:	4b59      	ldr	r3, [pc, #356]	; (8003220 <HAL_RCC_GetSysClockFreq+0x180>)
 80030ba:	689b      	ldr	r3, [r3, #8]
 80030bc:	f003 030c 	and.w	r3, r3, #12
 80030c0:	2b08      	cmp	r3, #8
 80030c2:	d00d      	beq.n	80030e0 <HAL_RCC_GetSysClockFreq+0x40>
 80030c4:	2b08      	cmp	r3, #8
 80030c6:	f200 80a1 	bhi.w	800320c <HAL_RCC_GetSysClockFreq+0x16c>
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d002      	beq.n	80030d4 <HAL_RCC_GetSysClockFreq+0x34>
 80030ce:	2b04      	cmp	r3, #4
 80030d0:	d003      	beq.n	80030da <HAL_RCC_GetSysClockFreq+0x3a>
 80030d2:	e09b      	b.n	800320c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80030d4:	4b53      	ldr	r3, [pc, #332]	; (8003224 <HAL_RCC_GetSysClockFreq+0x184>)
 80030d6:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80030d8:	e09b      	b.n	8003212 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80030da:	4b53      	ldr	r3, [pc, #332]	; (8003228 <HAL_RCC_GetSysClockFreq+0x188>)
 80030dc:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80030de:	e098      	b.n	8003212 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80030e0:	4b4f      	ldr	r3, [pc, #316]	; (8003220 <HAL_RCC_GetSysClockFreq+0x180>)
 80030e2:	685b      	ldr	r3, [r3, #4]
 80030e4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80030e8:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80030ea:	4b4d      	ldr	r3, [pc, #308]	; (8003220 <HAL_RCC_GetSysClockFreq+0x180>)
 80030ec:	685b      	ldr	r3, [r3, #4]
 80030ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d028      	beq.n	8003148 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80030f6:	4b4a      	ldr	r3, [pc, #296]	; (8003220 <HAL_RCC_GetSysClockFreq+0x180>)
 80030f8:	685b      	ldr	r3, [r3, #4]
 80030fa:	099b      	lsrs	r3, r3, #6
 80030fc:	2200      	movs	r2, #0
 80030fe:	623b      	str	r3, [r7, #32]
 8003100:	627a      	str	r2, [r7, #36]	; 0x24
 8003102:	6a3b      	ldr	r3, [r7, #32]
 8003104:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003108:	2100      	movs	r1, #0
 800310a:	4b47      	ldr	r3, [pc, #284]	; (8003228 <HAL_RCC_GetSysClockFreq+0x188>)
 800310c:	fb03 f201 	mul.w	r2, r3, r1
 8003110:	2300      	movs	r3, #0
 8003112:	fb00 f303 	mul.w	r3, r0, r3
 8003116:	4413      	add	r3, r2
 8003118:	4a43      	ldr	r2, [pc, #268]	; (8003228 <HAL_RCC_GetSysClockFreq+0x188>)
 800311a:	fba0 1202 	umull	r1, r2, r0, r2
 800311e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003120:	460a      	mov	r2, r1
 8003122:	62ba      	str	r2, [r7, #40]	; 0x28
 8003124:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003126:	4413      	add	r3, r2
 8003128:	62fb      	str	r3, [r7, #44]	; 0x2c
 800312a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800312c:	2200      	movs	r2, #0
 800312e:	61bb      	str	r3, [r7, #24]
 8003130:	61fa      	str	r2, [r7, #28]
 8003132:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003136:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800313a:	f7fd f8b9 	bl	80002b0 <__aeabi_uldivmod>
 800313e:	4602      	mov	r2, r0
 8003140:	460b      	mov	r3, r1
 8003142:	4613      	mov	r3, r2
 8003144:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003146:	e053      	b.n	80031f0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003148:	4b35      	ldr	r3, [pc, #212]	; (8003220 <HAL_RCC_GetSysClockFreq+0x180>)
 800314a:	685b      	ldr	r3, [r3, #4]
 800314c:	099b      	lsrs	r3, r3, #6
 800314e:	2200      	movs	r2, #0
 8003150:	613b      	str	r3, [r7, #16]
 8003152:	617a      	str	r2, [r7, #20]
 8003154:	693b      	ldr	r3, [r7, #16]
 8003156:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800315a:	f04f 0b00 	mov.w	fp, #0
 800315e:	4652      	mov	r2, sl
 8003160:	465b      	mov	r3, fp
 8003162:	f04f 0000 	mov.w	r0, #0
 8003166:	f04f 0100 	mov.w	r1, #0
 800316a:	0159      	lsls	r1, r3, #5
 800316c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003170:	0150      	lsls	r0, r2, #5
 8003172:	4602      	mov	r2, r0
 8003174:	460b      	mov	r3, r1
 8003176:	ebb2 080a 	subs.w	r8, r2, sl
 800317a:	eb63 090b 	sbc.w	r9, r3, fp
 800317e:	f04f 0200 	mov.w	r2, #0
 8003182:	f04f 0300 	mov.w	r3, #0
 8003186:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800318a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800318e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003192:	ebb2 0408 	subs.w	r4, r2, r8
 8003196:	eb63 0509 	sbc.w	r5, r3, r9
 800319a:	f04f 0200 	mov.w	r2, #0
 800319e:	f04f 0300 	mov.w	r3, #0
 80031a2:	00eb      	lsls	r3, r5, #3
 80031a4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80031a8:	00e2      	lsls	r2, r4, #3
 80031aa:	4614      	mov	r4, r2
 80031ac:	461d      	mov	r5, r3
 80031ae:	eb14 030a 	adds.w	r3, r4, sl
 80031b2:	603b      	str	r3, [r7, #0]
 80031b4:	eb45 030b 	adc.w	r3, r5, fp
 80031b8:	607b      	str	r3, [r7, #4]
 80031ba:	f04f 0200 	mov.w	r2, #0
 80031be:	f04f 0300 	mov.w	r3, #0
 80031c2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80031c6:	4629      	mov	r1, r5
 80031c8:	028b      	lsls	r3, r1, #10
 80031ca:	4621      	mov	r1, r4
 80031cc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80031d0:	4621      	mov	r1, r4
 80031d2:	028a      	lsls	r2, r1, #10
 80031d4:	4610      	mov	r0, r2
 80031d6:	4619      	mov	r1, r3
 80031d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80031da:	2200      	movs	r2, #0
 80031dc:	60bb      	str	r3, [r7, #8]
 80031de:	60fa      	str	r2, [r7, #12]
 80031e0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80031e4:	f7fd f864 	bl	80002b0 <__aeabi_uldivmod>
 80031e8:	4602      	mov	r2, r0
 80031ea:	460b      	mov	r3, r1
 80031ec:	4613      	mov	r3, r2
 80031ee:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80031f0:	4b0b      	ldr	r3, [pc, #44]	; (8003220 <HAL_RCC_GetSysClockFreq+0x180>)
 80031f2:	685b      	ldr	r3, [r3, #4]
 80031f4:	0c1b      	lsrs	r3, r3, #16
 80031f6:	f003 0303 	and.w	r3, r3, #3
 80031fa:	3301      	adds	r3, #1
 80031fc:	005b      	lsls	r3, r3, #1
 80031fe:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8003200:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003202:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003204:	fbb2 f3f3 	udiv	r3, r2, r3
 8003208:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800320a:	e002      	b.n	8003212 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800320c:	4b05      	ldr	r3, [pc, #20]	; (8003224 <HAL_RCC_GetSysClockFreq+0x184>)
 800320e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003210:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003212:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003214:	4618      	mov	r0, r3
 8003216:	3740      	adds	r7, #64	; 0x40
 8003218:	46bd      	mov	sp, r7
 800321a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800321e:	bf00      	nop
 8003220:	40023800 	.word	0x40023800
 8003224:	00f42400 	.word	0x00f42400
 8003228:	017d7840 	.word	0x017d7840

0800322c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800322c:	b480      	push	{r7}
 800322e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003230:	4b03      	ldr	r3, [pc, #12]	; (8003240 <HAL_RCC_GetHCLKFreq+0x14>)
 8003232:	681b      	ldr	r3, [r3, #0]
}
 8003234:	4618      	mov	r0, r3
 8003236:	46bd      	mov	sp, r7
 8003238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323c:	4770      	bx	lr
 800323e:	bf00      	nop
 8003240:	20004ea0 	.word	0x20004ea0

08003244 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003248:	f7ff fff0 	bl	800322c <HAL_RCC_GetHCLKFreq>
 800324c:	4602      	mov	r2, r0
 800324e:	4b05      	ldr	r3, [pc, #20]	; (8003264 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003250:	689b      	ldr	r3, [r3, #8]
 8003252:	0a9b      	lsrs	r3, r3, #10
 8003254:	f003 0307 	and.w	r3, r3, #7
 8003258:	4903      	ldr	r1, [pc, #12]	; (8003268 <HAL_RCC_GetPCLK1Freq+0x24>)
 800325a:	5ccb      	ldrb	r3, [r1, r3]
 800325c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003260:	4618      	mov	r0, r3
 8003262:	bd80      	pop	{r7, pc}
 8003264:	40023800 	.word	0x40023800
 8003268:	08006f98 	.word	0x08006f98

0800326c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800326c:	b580      	push	{r7, lr}
 800326e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003270:	f7ff ffdc 	bl	800322c <HAL_RCC_GetHCLKFreq>
 8003274:	4602      	mov	r2, r0
 8003276:	4b05      	ldr	r3, [pc, #20]	; (800328c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003278:	689b      	ldr	r3, [r3, #8]
 800327a:	0b5b      	lsrs	r3, r3, #13
 800327c:	f003 0307 	and.w	r3, r3, #7
 8003280:	4903      	ldr	r1, [pc, #12]	; (8003290 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003282:	5ccb      	ldrb	r3, [r1, r3]
 8003284:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003288:	4618      	mov	r0, r3
 800328a:	bd80      	pop	{r7, pc}
 800328c:	40023800 	.word	0x40023800
 8003290:	08006f98 	.word	0x08006f98

08003294 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003294:	b580      	push	{r7, lr}
 8003296:	b088      	sub	sp, #32
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800329c:	2300      	movs	r3, #0
 800329e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80032a0:	2300      	movs	r3, #0
 80032a2:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80032a4:	2300      	movs	r3, #0
 80032a6:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80032a8:	2300      	movs	r3, #0
 80032aa:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80032ac:	2300      	movs	r3, #0
 80032ae:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f003 0301 	and.w	r3, r3, #1
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d012      	beq.n	80032e2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80032bc:	4b69      	ldr	r3, [pc, #420]	; (8003464 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032be:	689b      	ldr	r3, [r3, #8]
 80032c0:	4a68      	ldr	r2, [pc, #416]	; (8003464 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032c2:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80032c6:	6093      	str	r3, [r2, #8]
 80032c8:	4b66      	ldr	r3, [pc, #408]	; (8003464 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032ca:	689a      	ldr	r2, [r3, #8]
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032d0:	4964      	ldr	r1, [pc, #400]	; (8003464 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032d2:	4313      	orrs	r3, r2
 80032d4:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d101      	bne.n	80032e2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80032de:	2301      	movs	r3, #1
 80032e0:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d017      	beq.n	800331e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80032ee:	4b5d      	ldr	r3, [pc, #372]	; (8003464 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80032f4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032fc:	4959      	ldr	r1, [pc, #356]	; (8003464 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032fe:	4313      	orrs	r3, r2
 8003300:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003308:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800330c:	d101      	bne.n	8003312 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800330e:	2301      	movs	r3, #1
 8003310:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003316:	2b00      	cmp	r3, #0
 8003318:	d101      	bne.n	800331e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800331a:	2301      	movs	r3, #1
 800331c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003326:	2b00      	cmp	r3, #0
 8003328:	d017      	beq.n	800335a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800332a:	4b4e      	ldr	r3, [pc, #312]	; (8003464 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800332c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003330:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003338:	494a      	ldr	r1, [pc, #296]	; (8003464 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800333a:	4313      	orrs	r3, r2
 800333c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003344:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003348:	d101      	bne.n	800334e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800334a:	2301      	movs	r3, #1
 800334c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003352:	2b00      	cmp	r3, #0
 8003354:	d101      	bne.n	800335a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003356:	2301      	movs	r3, #1
 8003358:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003362:	2b00      	cmp	r3, #0
 8003364:	d001      	beq.n	800336a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003366:	2301      	movs	r3, #1
 8003368:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f003 0320 	and.w	r3, r3, #32
 8003372:	2b00      	cmp	r3, #0
 8003374:	f000 808b 	beq.w	800348e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003378:	4b3a      	ldr	r3, [pc, #232]	; (8003464 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800337a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800337c:	4a39      	ldr	r2, [pc, #228]	; (8003464 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800337e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003382:	6413      	str	r3, [r2, #64]	; 0x40
 8003384:	4b37      	ldr	r3, [pc, #220]	; (8003464 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003386:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003388:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800338c:	60bb      	str	r3, [r7, #8]
 800338e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003390:	4b35      	ldr	r3, [pc, #212]	; (8003468 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	4a34      	ldr	r2, [pc, #208]	; (8003468 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003396:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800339a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800339c:	f7fe fa1a 	bl	80017d4 <HAL_GetTick>
 80033a0:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80033a2:	e008      	b.n	80033b6 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033a4:	f7fe fa16 	bl	80017d4 <HAL_GetTick>
 80033a8:	4602      	mov	r2, r0
 80033aa:	697b      	ldr	r3, [r7, #20]
 80033ac:	1ad3      	subs	r3, r2, r3
 80033ae:	2b64      	cmp	r3, #100	; 0x64
 80033b0:	d901      	bls.n	80033b6 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80033b2:	2303      	movs	r3, #3
 80033b4:	e357      	b.n	8003a66 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80033b6:	4b2c      	ldr	r3, [pc, #176]	; (8003468 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d0f0      	beq.n	80033a4 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80033c2:	4b28      	ldr	r3, [pc, #160]	; (8003464 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80033ca:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80033cc:	693b      	ldr	r3, [r7, #16]
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d035      	beq.n	800343e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80033da:	693a      	ldr	r2, [r7, #16]
 80033dc:	429a      	cmp	r2, r3
 80033de:	d02e      	beq.n	800343e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80033e0:	4b20      	ldr	r3, [pc, #128]	; (8003464 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80033e8:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80033ea:	4b1e      	ldr	r3, [pc, #120]	; (8003464 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033ee:	4a1d      	ldr	r2, [pc, #116]	; (8003464 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033f4:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80033f6:	4b1b      	ldr	r3, [pc, #108]	; (8003464 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033fa:	4a1a      	ldr	r2, [pc, #104]	; (8003464 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033fc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003400:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003402:	4a18      	ldr	r2, [pc, #96]	; (8003464 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003404:	693b      	ldr	r3, [r7, #16]
 8003406:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003408:	4b16      	ldr	r3, [pc, #88]	; (8003464 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800340a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800340c:	f003 0301 	and.w	r3, r3, #1
 8003410:	2b01      	cmp	r3, #1
 8003412:	d114      	bne.n	800343e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003414:	f7fe f9de 	bl	80017d4 <HAL_GetTick>
 8003418:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800341a:	e00a      	b.n	8003432 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800341c:	f7fe f9da 	bl	80017d4 <HAL_GetTick>
 8003420:	4602      	mov	r2, r0
 8003422:	697b      	ldr	r3, [r7, #20]
 8003424:	1ad3      	subs	r3, r2, r3
 8003426:	f241 3288 	movw	r2, #5000	; 0x1388
 800342a:	4293      	cmp	r3, r2
 800342c:	d901      	bls.n	8003432 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800342e:	2303      	movs	r3, #3
 8003430:	e319      	b.n	8003a66 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003432:	4b0c      	ldr	r3, [pc, #48]	; (8003464 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003434:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003436:	f003 0302 	and.w	r3, r3, #2
 800343a:	2b00      	cmp	r3, #0
 800343c:	d0ee      	beq.n	800341c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003442:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003446:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800344a:	d111      	bne.n	8003470 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800344c:	4b05      	ldr	r3, [pc, #20]	; (8003464 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800344e:	689b      	ldr	r3, [r3, #8]
 8003450:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003458:	4b04      	ldr	r3, [pc, #16]	; (800346c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800345a:	400b      	ands	r3, r1
 800345c:	4901      	ldr	r1, [pc, #4]	; (8003464 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800345e:	4313      	orrs	r3, r2
 8003460:	608b      	str	r3, [r1, #8]
 8003462:	e00b      	b.n	800347c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003464:	40023800 	.word	0x40023800
 8003468:	40007000 	.word	0x40007000
 800346c:	0ffffcff 	.word	0x0ffffcff
 8003470:	4baa      	ldr	r3, [pc, #680]	; (800371c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003472:	689b      	ldr	r3, [r3, #8]
 8003474:	4aa9      	ldr	r2, [pc, #676]	; (800371c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003476:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800347a:	6093      	str	r3, [r2, #8]
 800347c:	4ba7      	ldr	r3, [pc, #668]	; (800371c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800347e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003484:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003488:	49a4      	ldr	r1, [pc, #656]	; (800371c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800348a:	4313      	orrs	r3, r2
 800348c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f003 0310 	and.w	r3, r3, #16
 8003496:	2b00      	cmp	r3, #0
 8003498:	d010      	beq.n	80034bc <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800349a:	4ba0      	ldr	r3, [pc, #640]	; (800371c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800349c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80034a0:	4a9e      	ldr	r2, [pc, #632]	; (800371c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80034a2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80034a6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80034aa:	4b9c      	ldr	r3, [pc, #624]	; (800371c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80034ac:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034b4:	4999      	ldr	r1, [pc, #612]	; (800371c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80034b6:	4313      	orrs	r3, r2
 80034b8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d00a      	beq.n	80034de <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80034c8:	4b94      	ldr	r3, [pc, #592]	; (800371c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80034ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034ce:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80034d6:	4991      	ldr	r1, [pc, #580]	; (800371c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80034d8:	4313      	orrs	r3, r2
 80034da:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d00a      	beq.n	8003500 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80034ea:	4b8c      	ldr	r3, [pc, #560]	; (800371c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80034ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034f0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80034f8:	4988      	ldr	r1, [pc, #544]	; (800371c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80034fa:	4313      	orrs	r3, r2
 80034fc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003508:	2b00      	cmp	r3, #0
 800350a:	d00a      	beq.n	8003522 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800350c:	4b83      	ldr	r3, [pc, #524]	; (800371c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800350e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003512:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800351a:	4980      	ldr	r1, [pc, #512]	; (800371c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800351c:	4313      	orrs	r3, r2
 800351e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800352a:	2b00      	cmp	r3, #0
 800352c:	d00a      	beq.n	8003544 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800352e:	4b7b      	ldr	r3, [pc, #492]	; (800371c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003530:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003534:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800353c:	4977      	ldr	r1, [pc, #476]	; (800371c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800353e:	4313      	orrs	r3, r2
 8003540:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800354c:	2b00      	cmp	r3, #0
 800354e:	d00a      	beq.n	8003566 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003550:	4b72      	ldr	r3, [pc, #456]	; (800371c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003552:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003556:	f023 0203 	bic.w	r2, r3, #3
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800355e:	496f      	ldr	r1, [pc, #444]	; (800371c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003560:	4313      	orrs	r3, r2
 8003562:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800356e:	2b00      	cmp	r3, #0
 8003570:	d00a      	beq.n	8003588 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003572:	4b6a      	ldr	r3, [pc, #424]	; (800371c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003574:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003578:	f023 020c 	bic.w	r2, r3, #12
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003580:	4966      	ldr	r1, [pc, #408]	; (800371c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003582:	4313      	orrs	r3, r2
 8003584:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003590:	2b00      	cmp	r3, #0
 8003592:	d00a      	beq.n	80035aa <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003594:	4b61      	ldr	r3, [pc, #388]	; (800371c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003596:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800359a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035a2:	495e      	ldr	r1, [pc, #376]	; (800371c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80035a4:	4313      	orrs	r3, r2
 80035a6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d00a      	beq.n	80035cc <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80035b6:	4b59      	ldr	r3, [pc, #356]	; (800371c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80035b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035bc:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035c4:	4955      	ldr	r1, [pc, #340]	; (800371c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80035c6:	4313      	orrs	r3, r2
 80035c8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d00a      	beq.n	80035ee <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80035d8:	4b50      	ldr	r3, [pc, #320]	; (800371c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80035da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035de:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035e6:	494d      	ldr	r1, [pc, #308]	; (800371c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80035e8:	4313      	orrs	r3, r2
 80035ea:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d00a      	beq.n	8003610 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80035fa:	4b48      	ldr	r3, [pc, #288]	; (800371c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80035fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003600:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003608:	4944      	ldr	r1, [pc, #272]	; (800371c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800360a:	4313      	orrs	r3, r2
 800360c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003618:	2b00      	cmp	r3, #0
 800361a:	d00a      	beq.n	8003632 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800361c:	4b3f      	ldr	r3, [pc, #252]	; (800371c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800361e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003622:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800362a:	493c      	ldr	r1, [pc, #240]	; (800371c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800362c:	4313      	orrs	r3, r2
 800362e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800363a:	2b00      	cmp	r3, #0
 800363c:	d00a      	beq.n	8003654 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800363e:	4b37      	ldr	r3, [pc, #220]	; (800371c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003640:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003644:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800364c:	4933      	ldr	r1, [pc, #204]	; (800371c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800364e:	4313      	orrs	r3, r2
 8003650:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800365c:	2b00      	cmp	r3, #0
 800365e:	d00a      	beq.n	8003676 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003660:	4b2e      	ldr	r3, [pc, #184]	; (800371c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003662:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003666:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800366e:	492b      	ldr	r1, [pc, #172]	; (800371c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003670:	4313      	orrs	r3, r2
 8003672:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800367e:	2b00      	cmp	r3, #0
 8003680:	d011      	beq.n	80036a6 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003682:	4b26      	ldr	r3, [pc, #152]	; (800371c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003684:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003688:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003690:	4922      	ldr	r1, [pc, #136]	; (800371c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003692:	4313      	orrs	r3, r2
 8003694:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800369c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80036a0:	d101      	bne.n	80036a6 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80036a2:	2301      	movs	r3, #1
 80036a4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f003 0308 	and.w	r3, r3, #8
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d001      	beq.n	80036b6 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80036b2:	2301      	movs	r3, #1
 80036b4:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d00a      	beq.n	80036d8 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80036c2:	4b16      	ldr	r3, [pc, #88]	; (800371c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80036c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036c8:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036d0:	4912      	ldr	r1, [pc, #72]	; (800371c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80036d2:	4313      	orrs	r3, r2
 80036d4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d00b      	beq.n	80036fc <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80036e4:	4b0d      	ldr	r3, [pc, #52]	; (800371c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80036e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036ea:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80036f4:	4909      	ldr	r1, [pc, #36]	; (800371c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80036f6:	4313      	orrs	r3, r2
 80036f8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80036fc:	69fb      	ldr	r3, [r7, #28]
 80036fe:	2b01      	cmp	r3, #1
 8003700:	d006      	beq.n	8003710 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800370a:	2b00      	cmp	r3, #0
 800370c:	f000 80d9 	beq.w	80038c2 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003710:	4b02      	ldr	r3, [pc, #8]	; (800371c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	4a01      	ldr	r2, [pc, #4]	; (800371c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003716:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800371a:	e001      	b.n	8003720 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 800371c:	40023800 	.word	0x40023800
 8003720:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003722:	f7fe f857 	bl	80017d4 <HAL_GetTick>
 8003726:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003728:	e008      	b.n	800373c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800372a:	f7fe f853 	bl	80017d4 <HAL_GetTick>
 800372e:	4602      	mov	r2, r0
 8003730:	697b      	ldr	r3, [r7, #20]
 8003732:	1ad3      	subs	r3, r2, r3
 8003734:	2b64      	cmp	r3, #100	; 0x64
 8003736:	d901      	bls.n	800373c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003738:	2303      	movs	r3, #3
 800373a:	e194      	b.n	8003a66 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800373c:	4b6c      	ldr	r3, [pc, #432]	; (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003744:	2b00      	cmp	r3, #0
 8003746:	d1f0      	bne.n	800372a <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f003 0301 	and.w	r3, r3, #1
 8003750:	2b00      	cmp	r3, #0
 8003752:	d021      	beq.n	8003798 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003758:	2b00      	cmp	r3, #0
 800375a:	d11d      	bne.n	8003798 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800375c:	4b64      	ldr	r3, [pc, #400]	; (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800375e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003762:	0c1b      	lsrs	r3, r3, #16
 8003764:	f003 0303 	and.w	r3, r3, #3
 8003768:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800376a:	4b61      	ldr	r3, [pc, #388]	; (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800376c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003770:	0e1b      	lsrs	r3, r3, #24
 8003772:	f003 030f 	and.w	r3, r3, #15
 8003776:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	685b      	ldr	r3, [r3, #4]
 800377c:	019a      	lsls	r2, r3, #6
 800377e:	693b      	ldr	r3, [r7, #16]
 8003780:	041b      	lsls	r3, r3, #16
 8003782:	431a      	orrs	r2, r3
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	061b      	lsls	r3, r3, #24
 8003788:	431a      	orrs	r2, r3
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	689b      	ldr	r3, [r3, #8]
 800378e:	071b      	lsls	r3, r3, #28
 8003790:	4957      	ldr	r1, [pc, #348]	; (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003792:	4313      	orrs	r3, r2
 8003794:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d004      	beq.n	80037ae <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037a8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80037ac:	d00a      	beq.n	80037c4 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d02e      	beq.n	8003818 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037be:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80037c2:	d129      	bne.n	8003818 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80037c4:	4b4a      	ldr	r3, [pc, #296]	; (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80037c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80037ca:	0c1b      	lsrs	r3, r3, #16
 80037cc:	f003 0303 	and.w	r3, r3, #3
 80037d0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80037d2:	4b47      	ldr	r3, [pc, #284]	; (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80037d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80037d8:	0f1b      	lsrs	r3, r3, #28
 80037da:	f003 0307 	and.w	r3, r3, #7
 80037de:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	685b      	ldr	r3, [r3, #4]
 80037e4:	019a      	lsls	r2, r3, #6
 80037e6:	693b      	ldr	r3, [r7, #16]
 80037e8:	041b      	lsls	r3, r3, #16
 80037ea:	431a      	orrs	r2, r3
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	68db      	ldr	r3, [r3, #12]
 80037f0:	061b      	lsls	r3, r3, #24
 80037f2:	431a      	orrs	r2, r3
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	071b      	lsls	r3, r3, #28
 80037f8:	493d      	ldr	r1, [pc, #244]	; (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80037fa:	4313      	orrs	r3, r2
 80037fc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003800:	4b3b      	ldr	r3, [pc, #236]	; (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003802:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003806:	f023 021f 	bic.w	r2, r3, #31
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800380e:	3b01      	subs	r3, #1
 8003810:	4937      	ldr	r1, [pc, #220]	; (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003812:	4313      	orrs	r3, r2
 8003814:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003820:	2b00      	cmp	r3, #0
 8003822:	d01d      	beq.n	8003860 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003824:	4b32      	ldr	r3, [pc, #200]	; (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003826:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800382a:	0e1b      	lsrs	r3, r3, #24
 800382c:	f003 030f 	and.w	r3, r3, #15
 8003830:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003832:	4b2f      	ldr	r3, [pc, #188]	; (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003834:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003838:	0f1b      	lsrs	r3, r3, #28
 800383a:	f003 0307 	and.w	r3, r3, #7
 800383e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	685b      	ldr	r3, [r3, #4]
 8003844:	019a      	lsls	r2, r3, #6
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	691b      	ldr	r3, [r3, #16]
 800384a:	041b      	lsls	r3, r3, #16
 800384c:	431a      	orrs	r2, r3
 800384e:	693b      	ldr	r3, [r7, #16]
 8003850:	061b      	lsls	r3, r3, #24
 8003852:	431a      	orrs	r2, r3
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	071b      	lsls	r3, r3, #28
 8003858:	4925      	ldr	r1, [pc, #148]	; (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800385a:	4313      	orrs	r3, r2
 800385c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003868:	2b00      	cmp	r3, #0
 800386a:	d011      	beq.n	8003890 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	685b      	ldr	r3, [r3, #4]
 8003870:	019a      	lsls	r2, r3, #6
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	691b      	ldr	r3, [r3, #16]
 8003876:	041b      	lsls	r3, r3, #16
 8003878:	431a      	orrs	r2, r3
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	68db      	ldr	r3, [r3, #12]
 800387e:	061b      	lsls	r3, r3, #24
 8003880:	431a      	orrs	r2, r3
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	689b      	ldr	r3, [r3, #8]
 8003886:	071b      	lsls	r3, r3, #28
 8003888:	4919      	ldr	r1, [pc, #100]	; (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800388a:	4313      	orrs	r3, r2
 800388c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003890:	4b17      	ldr	r3, [pc, #92]	; (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	4a16      	ldr	r2, [pc, #88]	; (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003896:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800389a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800389c:	f7fd ff9a 	bl	80017d4 <HAL_GetTick>
 80038a0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80038a2:	e008      	b.n	80038b6 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80038a4:	f7fd ff96 	bl	80017d4 <HAL_GetTick>
 80038a8:	4602      	mov	r2, r0
 80038aa:	697b      	ldr	r3, [r7, #20]
 80038ac:	1ad3      	subs	r3, r2, r3
 80038ae:	2b64      	cmp	r3, #100	; 0x64
 80038b0:	d901      	bls.n	80038b6 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80038b2:	2303      	movs	r3, #3
 80038b4:	e0d7      	b.n	8003a66 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80038b6:	4b0e      	ldr	r3, [pc, #56]	; (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d0f0      	beq.n	80038a4 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80038c2:	69bb      	ldr	r3, [r7, #24]
 80038c4:	2b01      	cmp	r3, #1
 80038c6:	f040 80cd 	bne.w	8003a64 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80038ca:	4b09      	ldr	r3, [pc, #36]	; (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	4a08      	ldr	r2, [pc, #32]	; (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80038d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80038d4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80038d6:	f7fd ff7d 	bl	80017d4 <HAL_GetTick>
 80038da:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80038dc:	e00a      	b.n	80038f4 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80038de:	f7fd ff79 	bl	80017d4 <HAL_GetTick>
 80038e2:	4602      	mov	r2, r0
 80038e4:	697b      	ldr	r3, [r7, #20]
 80038e6:	1ad3      	subs	r3, r2, r3
 80038e8:	2b64      	cmp	r3, #100	; 0x64
 80038ea:	d903      	bls.n	80038f4 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80038ec:	2303      	movs	r3, #3
 80038ee:	e0ba      	b.n	8003a66 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 80038f0:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80038f4:	4b5e      	ldr	r3, [pc, #376]	; (8003a70 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80038fc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003900:	d0ed      	beq.n	80038de <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800390a:	2b00      	cmp	r3, #0
 800390c:	d003      	beq.n	8003916 <HAL_RCCEx_PeriphCLKConfig+0x682>
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003912:	2b00      	cmp	r3, #0
 8003914:	d009      	beq.n	800392a <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800391e:	2b00      	cmp	r3, #0
 8003920:	d02e      	beq.n	8003980 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003926:	2b00      	cmp	r3, #0
 8003928:	d12a      	bne.n	8003980 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800392a:	4b51      	ldr	r3, [pc, #324]	; (8003a70 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800392c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003930:	0c1b      	lsrs	r3, r3, #16
 8003932:	f003 0303 	and.w	r3, r3, #3
 8003936:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003938:	4b4d      	ldr	r3, [pc, #308]	; (8003a70 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800393a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800393e:	0f1b      	lsrs	r3, r3, #28
 8003940:	f003 0307 	and.w	r3, r3, #7
 8003944:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	695b      	ldr	r3, [r3, #20]
 800394a:	019a      	lsls	r2, r3, #6
 800394c:	693b      	ldr	r3, [r7, #16]
 800394e:	041b      	lsls	r3, r3, #16
 8003950:	431a      	orrs	r2, r3
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	699b      	ldr	r3, [r3, #24]
 8003956:	061b      	lsls	r3, r3, #24
 8003958:	431a      	orrs	r2, r3
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	071b      	lsls	r3, r3, #28
 800395e:	4944      	ldr	r1, [pc, #272]	; (8003a70 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003960:	4313      	orrs	r3, r2
 8003962:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003966:	4b42      	ldr	r3, [pc, #264]	; (8003a70 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003968:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800396c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003974:	3b01      	subs	r3, #1
 8003976:	021b      	lsls	r3, r3, #8
 8003978:	493d      	ldr	r1, [pc, #244]	; (8003a70 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800397a:	4313      	orrs	r3, r2
 800397c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003988:	2b00      	cmp	r3, #0
 800398a:	d022      	beq.n	80039d2 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003990:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003994:	d11d      	bne.n	80039d2 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003996:	4b36      	ldr	r3, [pc, #216]	; (8003a70 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003998:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800399c:	0e1b      	lsrs	r3, r3, #24
 800399e:	f003 030f 	and.w	r3, r3, #15
 80039a2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80039a4:	4b32      	ldr	r3, [pc, #200]	; (8003a70 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80039a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039aa:	0f1b      	lsrs	r3, r3, #28
 80039ac:	f003 0307 	and.w	r3, r3, #7
 80039b0:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	695b      	ldr	r3, [r3, #20]
 80039b6:	019a      	lsls	r2, r3, #6
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	6a1b      	ldr	r3, [r3, #32]
 80039bc:	041b      	lsls	r3, r3, #16
 80039be:	431a      	orrs	r2, r3
 80039c0:	693b      	ldr	r3, [r7, #16]
 80039c2:	061b      	lsls	r3, r3, #24
 80039c4:	431a      	orrs	r2, r3
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	071b      	lsls	r3, r3, #28
 80039ca:	4929      	ldr	r1, [pc, #164]	; (8003a70 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80039cc:	4313      	orrs	r3, r2
 80039ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f003 0308 	and.w	r3, r3, #8
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d028      	beq.n	8003a30 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80039de:	4b24      	ldr	r3, [pc, #144]	; (8003a70 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80039e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039e4:	0e1b      	lsrs	r3, r3, #24
 80039e6:	f003 030f 	and.w	r3, r3, #15
 80039ea:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80039ec:	4b20      	ldr	r3, [pc, #128]	; (8003a70 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80039ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039f2:	0c1b      	lsrs	r3, r3, #16
 80039f4:	f003 0303 	and.w	r3, r3, #3
 80039f8:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	695b      	ldr	r3, [r3, #20]
 80039fe:	019a      	lsls	r2, r3, #6
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	041b      	lsls	r3, r3, #16
 8003a04:	431a      	orrs	r2, r3
 8003a06:	693b      	ldr	r3, [r7, #16]
 8003a08:	061b      	lsls	r3, r3, #24
 8003a0a:	431a      	orrs	r2, r3
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	69db      	ldr	r3, [r3, #28]
 8003a10:	071b      	lsls	r3, r3, #28
 8003a12:	4917      	ldr	r1, [pc, #92]	; (8003a70 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003a14:	4313      	orrs	r3, r2
 8003a16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003a1a:	4b15      	ldr	r3, [pc, #84]	; (8003a70 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003a1c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003a20:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a28:	4911      	ldr	r1, [pc, #68]	; (8003a70 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003a2a:	4313      	orrs	r3, r2
 8003a2c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003a30:	4b0f      	ldr	r3, [pc, #60]	; (8003a70 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	4a0e      	ldr	r2, [pc, #56]	; (8003a70 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003a36:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a3a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a3c:	f7fd feca 	bl	80017d4 <HAL_GetTick>
 8003a40:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003a42:	e008      	b.n	8003a56 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003a44:	f7fd fec6 	bl	80017d4 <HAL_GetTick>
 8003a48:	4602      	mov	r2, r0
 8003a4a:	697b      	ldr	r3, [r7, #20]
 8003a4c:	1ad3      	subs	r3, r2, r3
 8003a4e:	2b64      	cmp	r3, #100	; 0x64
 8003a50:	d901      	bls.n	8003a56 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003a52:	2303      	movs	r3, #3
 8003a54:	e007      	b.n	8003a66 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003a56:	4b06      	ldr	r3, [pc, #24]	; (8003a70 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003a5e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003a62:	d1ef      	bne.n	8003a44 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8003a64:	2300      	movs	r3, #0
}
 8003a66:	4618      	mov	r0, r3
 8003a68:	3720      	adds	r7, #32
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	bd80      	pop	{r7, pc}
 8003a6e:	bf00      	nop
 8003a70:	40023800 	.word	0x40023800

08003a74 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003a74:	b580      	push	{r7, lr}
 8003a76:	b084      	sub	sp, #16
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d101      	bne.n	8003a86 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003a82:	2301      	movs	r3, #1
 8003a84:	e09d      	b.n	8003bc2 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d108      	bne.n	8003aa0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	685b      	ldr	r3, [r3, #4]
 8003a92:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003a96:	d009      	beq.n	8003aac <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	61da      	str	r2, [r3, #28]
 8003a9e:	e005      	b.n	8003aac <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2200      	movs	r2, #0
 8003ab0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003ab8:	b2db      	uxtb	r3, r3
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d106      	bne.n	8003acc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003ac6:	6878      	ldr	r0, [r7, #4]
 8003ac8:	f7fd fbe8 	bl	800129c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2202      	movs	r2, #2
 8003ad0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	681a      	ldr	r2, [r3, #0]
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003ae2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	68db      	ldr	r3, [r3, #12]
 8003ae8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003aec:	d902      	bls.n	8003af4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003aee:	2300      	movs	r3, #0
 8003af0:	60fb      	str	r3, [r7, #12]
 8003af2:	e002      	b.n	8003afa <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003af4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003af8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	68db      	ldr	r3, [r3, #12]
 8003afe:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003b02:	d007      	beq.n	8003b14 <HAL_SPI_Init+0xa0>
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	68db      	ldr	r3, [r3, #12]
 8003b08:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003b0c:	d002      	beq.n	8003b14 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	2200      	movs	r2, #0
 8003b12:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	685b      	ldr	r3, [r3, #4]
 8003b18:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	689b      	ldr	r3, [r3, #8]
 8003b20:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003b24:	431a      	orrs	r2, r3
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	691b      	ldr	r3, [r3, #16]
 8003b2a:	f003 0302 	and.w	r3, r3, #2
 8003b2e:	431a      	orrs	r2, r3
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	695b      	ldr	r3, [r3, #20]
 8003b34:	f003 0301 	and.w	r3, r3, #1
 8003b38:	431a      	orrs	r2, r3
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	699b      	ldr	r3, [r3, #24]
 8003b3e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003b42:	431a      	orrs	r2, r3
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	69db      	ldr	r3, [r3, #28]
 8003b48:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003b4c:	431a      	orrs	r2, r3
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6a1b      	ldr	r3, [r3, #32]
 8003b52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b56:	ea42 0103 	orr.w	r1, r2, r3
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b5e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	430a      	orrs	r2, r1
 8003b68:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	699b      	ldr	r3, [r3, #24]
 8003b6e:	0c1b      	lsrs	r3, r3, #16
 8003b70:	f003 0204 	and.w	r2, r3, #4
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b78:	f003 0310 	and.w	r3, r3, #16
 8003b7c:	431a      	orrs	r2, r3
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b82:	f003 0308 	and.w	r3, r3, #8
 8003b86:	431a      	orrs	r2, r3
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	68db      	ldr	r3, [r3, #12]
 8003b8c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003b90:	ea42 0103 	orr.w	r1, r2, r3
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	430a      	orrs	r2, r1
 8003ba0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	69da      	ldr	r2, [r3, #28]
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003bb0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2201      	movs	r2, #1
 8003bbc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003bc0:	2300      	movs	r3, #0
}
 8003bc2:	4618      	mov	r0, r3
 8003bc4:	3710      	adds	r7, #16
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	bd80      	pop	{r7, pc}

08003bca <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003bca:	b580      	push	{r7, lr}
 8003bcc:	b088      	sub	sp, #32
 8003bce:	af00      	add	r7, sp, #0
 8003bd0:	60f8      	str	r0, [r7, #12]
 8003bd2:	60b9      	str	r1, [r7, #8]
 8003bd4:	603b      	str	r3, [r7, #0]
 8003bd6:	4613      	mov	r3, r2
 8003bd8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003bda:	2300      	movs	r3, #0
 8003bdc:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003be4:	2b01      	cmp	r3, #1
 8003be6:	d101      	bne.n	8003bec <HAL_SPI_Transmit+0x22>
 8003be8:	2302      	movs	r3, #2
 8003bea:	e158      	b.n	8003e9e <HAL_SPI_Transmit+0x2d4>
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	2201      	movs	r2, #1
 8003bf0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003bf4:	f7fd fdee 	bl	80017d4 <HAL_GetTick>
 8003bf8:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003bfa:	88fb      	ldrh	r3, [r7, #6]
 8003bfc:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003c04:	b2db      	uxtb	r3, r3
 8003c06:	2b01      	cmp	r3, #1
 8003c08:	d002      	beq.n	8003c10 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003c0a:	2302      	movs	r3, #2
 8003c0c:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003c0e:	e13d      	b.n	8003e8c <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8003c10:	68bb      	ldr	r3, [r7, #8]
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d002      	beq.n	8003c1c <HAL_SPI_Transmit+0x52>
 8003c16:	88fb      	ldrh	r3, [r7, #6]
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d102      	bne.n	8003c22 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003c1c:	2301      	movs	r3, #1
 8003c1e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003c20:	e134      	b.n	8003e8c <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	2203      	movs	r2, #3
 8003c26:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	68ba      	ldr	r2, [r7, #8]
 8003c34:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	88fa      	ldrh	r2, [r7, #6]
 8003c3a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	88fa      	ldrh	r2, [r7, #6]
 8003c40:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	2200      	movs	r2, #0
 8003c46:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	2200      	movs	r2, #0
 8003c54:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	2200      	movs	r2, #0
 8003c62:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	689b      	ldr	r3, [r3, #8]
 8003c68:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c6c:	d10f      	bne.n	8003c8e <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	681a      	ldr	r2, [r3, #0]
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c7c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	681a      	ldr	r2, [r3, #0]
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003c8c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c98:	2b40      	cmp	r3, #64	; 0x40
 8003c9a:	d007      	beq.n	8003cac <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	681a      	ldr	r2, [r3, #0]
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003caa:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	68db      	ldr	r3, [r3, #12]
 8003cb0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003cb4:	d94b      	bls.n	8003d4e <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	685b      	ldr	r3, [r3, #4]
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d002      	beq.n	8003cc4 <HAL_SPI_Transmit+0xfa>
 8003cbe:	8afb      	ldrh	r3, [r7, #22]
 8003cc0:	2b01      	cmp	r3, #1
 8003cc2:	d13e      	bne.n	8003d42 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cc8:	881a      	ldrh	r2, [r3, #0]
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cd4:	1c9a      	adds	r2, r3, #2
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003cde:	b29b      	uxth	r3, r3
 8003ce0:	3b01      	subs	r3, #1
 8003ce2:	b29a      	uxth	r2, r3
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003ce8:	e02b      	b.n	8003d42 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	689b      	ldr	r3, [r3, #8]
 8003cf0:	f003 0302 	and.w	r3, r3, #2
 8003cf4:	2b02      	cmp	r3, #2
 8003cf6:	d112      	bne.n	8003d1e <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cfc:	881a      	ldrh	r2, [r3, #0]
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d08:	1c9a      	adds	r2, r3, #2
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d12:	b29b      	uxth	r3, r3
 8003d14:	3b01      	subs	r3, #1
 8003d16:	b29a      	uxth	r2, r3
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003d1c:	e011      	b.n	8003d42 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003d1e:	f7fd fd59 	bl	80017d4 <HAL_GetTick>
 8003d22:	4602      	mov	r2, r0
 8003d24:	69bb      	ldr	r3, [r7, #24]
 8003d26:	1ad3      	subs	r3, r2, r3
 8003d28:	683a      	ldr	r2, [r7, #0]
 8003d2a:	429a      	cmp	r2, r3
 8003d2c:	d803      	bhi.n	8003d36 <HAL_SPI_Transmit+0x16c>
 8003d2e:	683b      	ldr	r3, [r7, #0]
 8003d30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d34:	d102      	bne.n	8003d3c <HAL_SPI_Transmit+0x172>
 8003d36:	683b      	ldr	r3, [r7, #0]
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d102      	bne.n	8003d42 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8003d3c:	2303      	movs	r3, #3
 8003d3e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003d40:	e0a4      	b.n	8003e8c <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d46:	b29b      	uxth	r3, r3
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d1ce      	bne.n	8003cea <HAL_SPI_Transmit+0x120>
 8003d4c:	e07c      	b.n	8003e48 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	685b      	ldr	r3, [r3, #4]
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d002      	beq.n	8003d5c <HAL_SPI_Transmit+0x192>
 8003d56:	8afb      	ldrh	r3, [r7, #22]
 8003d58:	2b01      	cmp	r3, #1
 8003d5a:	d170      	bne.n	8003e3e <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d60:	b29b      	uxth	r3, r3
 8003d62:	2b01      	cmp	r3, #1
 8003d64:	d912      	bls.n	8003d8c <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d6a:	881a      	ldrh	r2, [r3, #0]
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d76:	1c9a      	adds	r2, r3, #2
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d80:	b29b      	uxth	r3, r3
 8003d82:	3b02      	subs	r3, #2
 8003d84:	b29a      	uxth	r2, r3
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003d8a:	e058      	b.n	8003e3e <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	330c      	adds	r3, #12
 8003d96:	7812      	ldrb	r2, [r2, #0]
 8003d98:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d9e:	1c5a      	adds	r2, r3, #1
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003da8:	b29b      	uxth	r3, r3
 8003daa:	3b01      	subs	r3, #1
 8003dac:	b29a      	uxth	r2, r3
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8003db2:	e044      	b.n	8003e3e <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	689b      	ldr	r3, [r3, #8]
 8003dba:	f003 0302 	and.w	r3, r3, #2
 8003dbe:	2b02      	cmp	r3, #2
 8003dc0:	d12b      	bne.n	8003e1a <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003dc6:	b29b      	uxth	r3, r3
 8003dc8:	2b01      	cmp	r3, #1
 8003dca:	d912      	bls.n	8003df2 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dd0:	881a      	ldrh	r2, [r3, #0]
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ddc:	1c9a      	adds	r2, r3, #2
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003de6:	b29b      	uxth	r3, r3
 8003de8:	3b02      	subs	r3, #2
 8003dea:	b29a      	uxth	r2, r3
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003df0:	e025      	b.n	8003e3e <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	330c      	adds	r3, #12
 8003dfc:	7812      	ldrb	r2, [r2, #0]
 8003dfe:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e04:	1c5a      	adds	r2, r3, #1
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e0e:	b29b      	uxth	r3, r3
 8003e10:	3b01      	subs	r3, #1
 8003e12:	b29a      	uxth	r2, r3
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003e18:	e011      	b.n	8003e3e <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003e1a:	f7fd fcdb 	bl	80017d4 <HAL_GetTick>
 8003e1e:	4602      	mov	r2, r0
 8003e20:	69bb      	ldr	r3, [r7, #24]
 8003e22:	1ad3      	subs	r3, r2, r3
 8003e24:	683a      	ldr	r2, [r7, #0]
 8003e26:	429a      	cmp	r2, r3
 8003e28:	d803      	bhi.n	8003e32 <HAL_SPI_Transmit+0x268>
 8003e2a:	683b      	ldr	r3, [r7, #0]
 8003e2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e30:	d102      	bne.n	8003e38 <HAL_SPI_Transmit+0x26e>
 8003e32:	683b      	ldr	r3, [r7, #0]
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d102      	bne.n	8003e3e <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8003e38:	2303      	movs	r3, #3
 8003e3a:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003e3c:	e026      	b.n	8003e8c <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e42:	b29b      	uxth	r3, r3
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d1b5      	bne.n	8003db4 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003e48:	69ba      	ldr	r2, [r7, #24]
 8003e4a:	6839      	ldr	r1, [r7, #0]
 8003e4c:	68f8      	ldr	r0, [r7, #12]
 8003e4e:	f000 f949 	bl	80040e4 <SPI_EndRxTxTransaction>
 8003e52:	4603      	mov	r3, r0
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d002      	beq.n	8003e5e <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	2220      	movs	r2, #32
 8003e5c:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	689b      	ldr	r3, [r3, #8]
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d10a      	bne.n	8003e7c <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003e66:	2300      	movs	r3, #0
 8003e68:	613b      	str	r3, [r7, #16]
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	68db      	ldr	r3, [r3, #12]
 8003e70:	613b      	str	r3, [r7, #16]
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	689b      	ldr	r3, [r3, #8]
 8003e78:	613b      	str	r3, [r7, #16]
 8003e7a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d002      	beq.n	8003e8a <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8003e84:	2301      	movs	r3, #1
 8003e86:	77fb      	strb	r3, [r7, #31]
 8003e88:	e000      	b.n	8003e8c <HAL_SPI_Transmit+0x2c2>
  }

error:
 8003e8a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	2201      	movs	r2, #1
 8003e90:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	2200      	movs	r2, #0
 8003e98:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003e9c:	7ffb      	ldrb	r3, [r7, #31]
}
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	3720      	adds	r7, #32
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	bd80      	pop	{r7, pc}
	...

08003ea8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	b088      	sub	sp, #32
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	60f8      	str	r0, [r7, #12]
 8003eb0:	60b9      	str	r1, [r7, #8]
 8003eb2:	603b      	str	r3, [r7, #0]
 8003eb4:	4613      	mov	r3, r2
 8003eb6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003eb8:	f7fd fc8c 	bl	80017d4 <HAL_GetTick>
 8003ebc:	4602      	mov	r2, r0
 8003ebe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ec0:	1a9b      	subs	r3, r3, r2
 8003ec2:	683a      	ldr	r2, [r7, #0]
 8003ec4:	4413      	add	r3, r2
 8003ec6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003ec8:	f7fd fc84 	bl	80017d4 <HAL_GetTick>
 8003ecc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003ece:	4b39      	ldr	r3, [pc, #228]	; (8003fb4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	015b      	lsls	r3, r3, #5
 8003ed4:	0d1b      	lsrs	r3, r3, #20
 8003ed6:	69fa      	ldr	r2, [r7, #28]
 8003ed8:	fb02 f303 	mul.w	r3, r2, r3
 8003edc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003ede:	e054      	b.n	8003f8a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003ee0:	683b      	ldr	r3, [r7, #0]
 8003ee2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ee6:	d050      	beq.n	8003f8a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003ee8:	f7fd fc74 	bl	80017d4 <HAL_GetTick>
 8003eec:	4602      	mov	r2, r0
 8003eee:	69bb      	ldr	r3, [r7, #24]
 8003ef0:	1ad3      	subs	r3, r2, r3
 8003ef2:	69fa      	ldr	r2, [r7, #28]
 8003ef4:	429a      	cmp	r2, r3
 8003ef6:	d902      	bls.n	8003efe <SPI_WaitFlagStateUntilTimeout+0x56>
 8003ef8:	69fb      	ldr	r3, [r7, #28]
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d13d      	bne.n	8003f7a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	685a      	ldr	r2, [r3, #4]
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003f0c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	685b      	ldr	r3, [r3, #4]
 8003f12:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003f16:	d111      	bne.n	8003f3c <SPI_WaitFlagStateUntilTimeout+0x94>
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	689b      	ldr	r3, [r3, #8]
 8003f1c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f20:	d004      	beq.n	8003f2c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	689b      	ldr	r3, [r3, #8]
 8003f26:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f2a:	d107      	bne.n	8003f3c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	681a      	ldr	r2, [r3, #0]
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f3a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f40:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f44:	d10f      	bne.n	8003f66 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	681a      	ldr	r2, [r3, #0]
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003f54:	601a      	str	r2, [r3, #0]
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	681a      	ldr	r2, [r3, #0]
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003f64:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	2201      	movs	r2, #1
 8003f6a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	2200      	movs	r2, #0
 8003f72:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003f76:	2303      	movs	r3, #3
 8003f78:	e017      	b.n	8003faa <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003f7a:	697b      	ldr	r3, [r7, #20]
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d101      	bne.n	8003f84 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003f80:	2300      	movs	r3, #0
 8003f82:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003f84:	697b      	ldr	r3, [r7, #20]
 8003f86:	3b01      	subs	r3, #1
 8003f88:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	689a      	ldr	r2, [r3, #8]
 8003f90:	68bb      	ldr	r3, [r7, #8]
 8003f92:	4013      	ands	r3, r2
 8003f94:	68ba      	ldr	r2, [r7, #8]
 8003f96:	429a      	cmp	r2, r3
 8003f98:	bf0c      	ite	eq
 8003f9a:	2301      	moveq	r3, #1
 8003f9c:	2300      	movne	r3, #0
 8003f9e:	b2db      	uxtb	r3, r3
 8003fa0:	461a      	mov	r2, r3
 8003fa2:	79fb      	ldrb	r3, [r7, #7]
 8003fa4:	429a      	cmp	r2, r3
 8003fa6:	d19b      	bne.n	8003ee0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003fa8:	2300      	movs	r3, #0
}
 8003faa:	4618      	mov	r0, r3
 8003fac:	3720      	adds	r7, #32
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	bd80      	pop	{r7, pc}
 8003fb2:	bf00      	nop
 8003fb4:	20004ea0 	.word	0x20004ea0

08003fb8 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	b08a      	sub	sp, #40	; 0x28
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	60f8      	str	r0, [r7, #12]
 8003fc0:	60b9      	str	r1, [r7, #8]
 8003fc2:	607a      	str	r2, [r7, #4]
 8003fc4:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8003fc6:	2300      	movs	r3, #0
 8003fc8:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003fca:	f7fd fc03 	bl	80017d4 <HAL_GetTick>
 8003fce:	4602      	mov	r2, r0
 8003fd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fd2:	1a9b      	subs	r3, r3, r2
 8003fd4:	683a      	ldr	r2, [r7, #0]
 8003fd6:	4413      	add	r3, r2
 8003fd8:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8003fda:	f7fd fbfb 	bl	80017d4 <HAL_GetTick>
 8003fde:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	330c      	adds	r3, #12
 8003fe6:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003fe8:	4b3d      	ldr	r3, [pc, #244]	; (80040e0 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8003fea:	681a      	ldr	r2, [r3, #0]
 8003fec:	4613      	mov	r3, r2
 8003fee:	009b      	lsls	r3, r3, #2
 8003ff0:	4413      	add	r3, r2
 8003ff2:	00da      	lsls	r2, r3, #3
 8003ff4:	1ad3      	subs	r3, r2, r3
 8003ff6:	0d1b      	lsrs	r3, r3, #20
 8003ff8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ffa:	fb02 f303 	mul.w	r3, r2, r3
 8003ffe:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8004000:	e060      	b.n	80040c4 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004002:	68bb      	ldr	r3, [r7, #8]
 8004004:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004008:	d107      	bne.n	800401a <SPI_WaitFifoStateUntilTimeout+0x62>
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	2b00      	cmp	r3, #0
 800400e:	d104      	bne.n	800401a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8004010:	69fb      	ldr	r3, [r7, #28]
 8004012:	781b      	ldrb	r3, [r3, #0]
 8004014:	b2db      	uxtb	r3, r3
 8004016:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8004018:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800401a:	683b      	ldr	r3, [r7, #0]
 800401c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004020:	d050      	beq.n	80040c4 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004022:	f7fd fbd7 	bl	80017d4 <HAL_GetTick>
 8004026:	4602      	mov	r2, r0
 8004028:	6a3b      	ldr	r3, [r7, #32]
 800402a:	1ad3      	subs	r3, r2, r3
 800402c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800402e:	429a      	cmp	r2, r3
 8004030:	d902      	bls.n	8004038 <SPI_WaitFifoStateUntilTimeout+0x80>
 8004032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004034:	2b00      	cmp	r3, #0
 8004036:	d13d      	bne.n	80040b4 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	685a      	ldr	r2, [r3, #4]
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004046:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	685b      	ldr	r3, [r3, #4]
 800404c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004050:	d111      	bne.n	8004076 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	689b      	ldr	r3, [r3, #8]
 8004056:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800405a:	d004      	beq.n	8004066 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	689b      	ldr	r3, [r3, #8]
 8004060:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004064:	d107      	bne.n	8004076 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	681a      	ldr	r2, [r3, #0]
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004074:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800407a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800407e:	d10f      	bne.n	80040a0 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	681a      	ldr	r2, [r3, #0]
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800408e:	601a      	str	r2, [r3, #0]
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	681a      	ldr	r2, [r3, #0]
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800409e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	2201      	movs	r2, #1
 80040a4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	2200      	movs	r2, #0
 80040ac:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80040b0:	2303      	movs	r3, #3
 80040b2:	e010      	b.n	80040d6 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80040b4:	69bb      	ldr	r3, [r7, #24]
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d101      	bne.n	80040be <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80040ba:	2300      	movs	r3, #0
 80040bc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 80040be:	69bb      	ldr	r3, [r7, #24]
 80040c0:	3b01      	subs	r3, #1
 80040c2:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	689a      	ldr	r2, [r3, #8]
 80040ca:	68bb      	ldr	r3, [r7, #8]
 80040cc:	4013      	ands	r3, r2
 80040ce:	687a      	ldr	r2, [r7, #4]
 80040d0:	429a      	cmp	r2, r3
 80040d2:	d196      	bne.n	8004002 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80040d4:	2300      	movs	r3, #0
}
 80040d6:	4618      	mov	r0, r3
 80040d8:	3728      	adds	r7, #40	; 0x28
 80040da:	46bd      	mov	sp, r7
 80040dc:	bd80      	pop	{r7, pc}
 80040de:	bf00      	nop
 80040e0:	20004ea0 	.word	0x20004ea0

080040e4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80040e4:	b580      	push	{r7, lr}
 80040e6:	b088      	sub	sp, #32
 80040e8:	af02      	add	r7, sp, #8
 80040ea:	60f8      	str	r0, [r7, #12]
 80040ec:	60b9      	str	r1, [r7, #8]
 80040ee:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	9300      	str	r3, [sp, #0]
 80040f4:	68bb      	ldr	r3, [r7, #8]
 80040f6:	2200      	movs	r2, #0
 80040f8:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80040fc:	68f8      	ldr	r0, [r7, #12]
 80040fe:	f7ff ff5b 	bl	8003fb8 <SPI_WaitFifoStateUntilTimeout>
 8004102:	4603      	mov	r3, r0
 8004104:	2b00      	cmp	r3, #0
 8004106:	d007      	beq.n	8004118 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800410c:	f043 0220 	orr.w	r2, r3, #32
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004114:	2303      	movs	r3, #3
 8004116:	e046      	b.n	80041a6 <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004118:	4b25      	ldr	r3, [pc, #148]	; (80041b0 <SPI_EndRxTxTransaction+0xcc>)
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	4a25      	ldr	r2, [pc, #148]	; (80041b4 <SPI_EndRxTxTransaction+0xd0>)
 800411e:	fba2 2303 	umull	r2, r3, r2, r3
 8004122:	0d5b      	lsrs	r3, r3, #21
 8004124:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004128:	fb02 f303 	mul.w	r3, r2, r3
 800412c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	685b      	ldr	r3, [r3, #4]
 8004132:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004136:	d112      	bne.n	800415e <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	9300      	str	r3, [sp, #0]
 800413c:	68bb      	ldr	r3, [r7, #8]
 800413e:	2200      	movs	r2, #0
 8004140:	2180      	movs	r1, #128	; 0x80
 8004142:	68f8      	ldr	r0, [r7, #12]
 8004144:	f7ff feb0 	bl	8003ea8 <SPI_WaitFlagStateUntilTimeout>
 8004148:	4603      	mov	r3, r0
 800414a:	2b00      	cmp	r3, #0
 800414c:	d016      	beq.n	800417c <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004152:	f043 0220 	orr.w	r2, r3, #32
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800415a:	2303      	movs	r3, #3
 800415c:	e023      	b.n	80041a6 <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800415e:	697b      	ldr	r3, [r7, #20]
 8004160:	2b00      	cmp	r3, #0
 8004162:	d00a      	beq.n	800417a <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 8004164:	697b      	ldr	r3, [r7, #20]
 8004166:	3b01      	subs	r3, #1
 8004168:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	689b      	ldr	r3, [r3, #8]
 8004170:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004174:	2b80      	cmp	r3, #128	; 0x80
 8004176:	d0f2      	beq.n	800415e <SPI_EndRxTxTransaction+0x7a>
 8004178:	e000      	b.n	800417c <SPI_EndRxTxTransaction+0x98>
        break;
 800417a:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	9300      	str	r3, [sp, #0]
 8004180:	68bb      	ldr	r3, [r7, #8]
 8004182:	2200      	movs	r2, #0
 8004184:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004188:	68f8      	ldr	r0, [r7, #12]
 800418a:	f7ff ff15 	bl	8003fb8 <SPI_WaitFifoStateUntilTimeout>
 800418e:	4603      	mov	r3, r0
 8004190:	2b00      	cmp	r3, #0
 8004192:	d007      	beq.n	80041a4 <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004198:	f043 0220 	orr.w	r2, r3, #32
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80041a0:	2303      	movs	r3, #3
 80041a2:	e000      	b.n	80041a6 <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 80041a4:	2300      	movs	r3, #0
}
 80041a6:	4618      	mov	r0, r3
 80041a8:	3718      	adds	r7, #24
 80041aa:	46bd      	mov	sp, r7
 80041ac:	bd80      	pop	{r7, pc}
 80041ae:	bf00      	nop
 80041b0:	20004ea0 	.word	0x20004ea0
 80041b4:	165e9f81 	.word	0x165e9f81

080041b8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80041b8:	b580      	push	{r7, lr}
 80041ba:	b082      	sub	sp, #8
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d101      	bne.n	80041ca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80041c6:	2301      	movs	r3, #1
 80041c8:	e049      	b.n	800425e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041d0:	b2db      	uxtb	r3, r3
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d106      	bne.n	80041e4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	2200      	movs	r2, #0
 80041da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80041de:	6878      	ldr	r0, [r7, #4]
 80041e0:	f7fd f8be 	bl	8001360 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2202      	movs	r2, #2
 80041e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681a      	ldr	r2, [r3, #0]
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	3304      	adds	r3, #4
 80041f4:	4619      	mov	r1, r3
 80041f6:	4610      	mov	r0, r2
 80041f8:	f000 fbc6 	bl	8004988 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2201      	movs	r2, #1
 8004200:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2201      	movs	r2, #1
 8004208:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2201      	movs	r2, #1
 8004210:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2201      	movs	r2, #1
 8004218:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2201      	movs	r2, #1
 8004220:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2201      	movs	r2, #1
 8004228:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2201      	movs	r2, #1
 8004230:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2201      	movs	r2, #1
 8004238:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2201      	movs	r2, #1
 8004240:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2201      	movs	r2, #1
 8004248:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2201      	movs	r2, #1
 8004250:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2201      	movs	r2, #1
 8004258:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800425c:	2300      	movs	r3, #0
}
 800425e:	4618      	mov	r0, r3
 8004260:	3708      	adds	r7, #8
 8004262:	46bd      	mov	sp, r7
 8004264:	bd80      	pop	{r7, pc}

08004266 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004266:	b580      	push	{r7, lr}
 8004268:	b082      	sub	sp, #8
 800426a:	af00      	add	r7, sp, #0
 800426c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	2b00      	cmp	r3, #0
 8004272:	d101      	bne.n	8004278 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004274:	2301      	movs	r3, #1
 8004276:	e049      	b.n	800430c <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800427e:	b2db      	uxtb	r3, r3
 8004280:	2b00      	cmp	r3, #0
 8004282:	d106      	bne.n	8004292 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2200      	movs	r2, #0
 8004288:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800428c:	6878      	ldr	r0, [r7, #4]
 800428e:	f000 f841 	bl	8004314 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	2202      	movs	r2, #2
 8004296:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681a      	ldr	r2, [r3, #0]
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	3304      	adds	r3, #4
 80042a2:	4619      	mov	r1, r3
 80042a4:	4610      	mov	r0, r2
 80042a6:	f000 fb6f 	bl	8004988 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	2201      	movs	r2, #1
 80042ae:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	2201      	movs	r2, #1
 80042b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	2201      	movs	r2, #1
 80042be:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	2201      	movs	r2, #1
 80042c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	2201      	movs	r2, #1
 80042ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	2201      	movs	r2, #1
 80042d6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	2201      	movs	r2, #1
 80042de:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	2201      	movs	r2, #1
 80042e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	2201      	movs	r2, #1
 80042ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	2201      	movs	r2, #1
 80042f6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	2201      	movs	r2, #1
 80042fe:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	2201      	movs	r2, #1
 8004306:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800430a:	2300      	movs	r3, #0
}
 800430c:	4618      	mov	r0, r3
 800430e:	3708      	adds	r7, #8
 8004310:	46bd      	mov	sp, r7
 8004312:	bd80      	pop	{r7, pc}

08004314 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004314:	b480      	push	{r7}
 8004316:	b083      	sub	sp, #12
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800431c:	bf00      	nop
 800431e:	370c      	adds	r7, #12
 8004320:	46bd      	mov	sp, r7
 8004322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004326:	4770      	bx	lr

08004328 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004328:	b580      	push	{r7, lr}
 800432a:	b082      	sub	sp, #8
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	691b      	ldr	r3, [r3, #16]
 8004336:	f003 0302 	and.w	r3, r3, #2
 800433a:	2b02      	cmp	r3, #2
 800433c:	d122      	bne.n	8004384 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	68db      	ldr	r3, [r3, #12]
 8004344:	f003 0302 	and.w	r3, r3, #2
 8004348:	2b02      	cmp	r3, #2
 800434a:	d11b      	bne.n	8004384 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f06f 0202 	mvn.w	r2, #2
 8004354:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	2201      	movs	r2, #1
 800435a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	699b      	ldr	r3, [r3, #24]
 8004362:	f003 0303 	and.w	r3, r3, #3
 8004366:	2b00      	cmp	r3, #0
 8004368:	d003      	beq.n	8004372 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800436a:	6878      	ldr	r0, [r7, #4]
 800436c:	f000 faee 	bl	800494c <HAL_TIM_IC_CaptureCallback>
 8004370:	e005      	b.n	800437e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004372:	6878      	ldr	r0, [r7, #4]
 8004374:	f000 fae0 	bl	8004938 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004378:	6878      	ldr	r0, [r7, #4]
 800437a:	f000 faf1 	bl	8004960 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	2200      	movs	r2, #0
 8004382:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	691b      	ldr	r3, [r3, #16]
 800438a:	f003 0304 	and.w	r3, r3, #4
 800438e:	2b04      	cmp	r3, #4
 8004390:	d122      	bne.n	80043d8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	68db      	ldr	r3, [r3, #12]
 8004398:	f003 0304 	and.w	r3, r3, #4
 800439c:	2b04      	cmp	r3, #4
 800439e:	d11b      	bne.n	80043d8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f06f 0204 	mvn.w	r2, #4
 80043a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	2202      	movs	r2, #2
 80043ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	699b      	ldr	r3, [r3, #24]
 80043b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d003      	beq.n	80043c6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80043be:	6878      	ldr	r0, [r7, #4]
 80043c0:	f000 fac4 	bl	800494c <HAL_TIM_IC_CaptureCallback>
 80043c4:	e005      	b.n	80043d2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80043c6:	6878      	ldr	r0, [r7, #4]
 80043c8:	f000 fab6 	bl	8004938 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043cc:	6878      	ldr	r0, [r7, #4]
 80043ce:	f000 fac7 	bl	8004960 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	2200      	movs	r2, #0
 80043d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	691b      	ldr	r3, [r3, #16]
 80043de:	f003 0308 	and.w	r3, r3, #8
 80043e2:	2b08      	cmp	r3, #8
 80043e4:	d122      	bne.n	800442c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	68db      	ldr	r3, [r3, #12]
 80043ec:	f003 0308 	and.w	r3, r3, #8
 80043f0:	2b08      	cmp	r3, #8
 80043f2:	d11b      	bne.n	800442c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f06f 0208 	mvn.w	r2, #8
 80043fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	2204      	movs	r2, #4
 8004402:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	69db      	ldr	r3, [r3, #28]
 800440a:	f003 0303 	and.w	r3, r3, #3
 800440e:	2b00      	cmp	r3, #0
 8004410:	d003      	beq.n	800441a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004412:	6878      	ldr	r0, [r7, #4]
 8004414:	f000 fa9a 	bl	800494c <HAL_TIM_IC_CaptureCallback>
 8004418:	e005      	b.n	8004426 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800441a:	6878      	ldr	r0, [r7, #4]
 800441c:	f000 fa8c 	bl	8004938 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004420:	6878      	ldr	r0, [r7, #4]
 8004422:	f000 fa9d 	bl	8004960 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	2200      	movs	r2, #0
 800442a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	691b      	ldr	r3, [r3, #16]
 8004432:	f003 0310 	and.w	r3, r3, #16
 8004436:	2b10      	cmp	r3, #16
 8004438:	d122      	bne.n	8004480 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	68db      	ldr	r3, [r3, #12]
 8004440:	f003 0310 	and.w	r3, r3, #16
 8004444:	2b10      	cmp	r3, #16
 8004446:	d11b      	bne.n	8004480 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f06f 0210 	mvn.w	r2, #16
 8004450:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	2208      	movs	r2, #8
 8004456:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	69db      	ldr	r3, [r3, #28]
 800445e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004462:	2b00      	cmp	r3, #0
 8004464:	d003      	beq.n	800446e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004466:	6878      	ldr	r0, [r7, #4]
 8004468:	f000 fa70 	bl	800494c <HAL_TIM_IC_CaptureCallback>
 800446c:	e005      	b.n	800447a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800446e:	6878      	ldr	r0, [r7, #4]
 8004470:	f000 fa62 	bl	8004938 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004474:	6878      	ldr	r0, [r7, #4]
 8004476:	f000 fa73 	bl	8004960 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	2200      	movs	r2, #0
 800447e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	691b      	ldr	r3, [r3, #16]
 8004486:	f003 0301 	and.w	r3, r3, #1
 800448a:	2b01      	cmp	r3, #1
 800448c:	d10e      	bne.n	80044ac <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	68db      	ldr	r3, [r3, #12]
 8004494:	f003 0301 	and.w	r3, r3, #1
 8004498:	2b01      	cmp	r3, #1
 800449a:	d107      	bne.n	80044ac <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f06f 0201 	mvn.w	r2, #1
 80044a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80044a6:	6878      	ldr	r0, [r7, #4]
 80044a8:	f000 fa3c 	bl	8004924 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	691b      	ldr	r3, [r3, #16]
 80044b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044b6:	2b80      	cmp	r3, #128	; 0x80
 80044b8:	d10e      	bne.n	80044d8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	68db      	ldr	r3, [r3, #12]
 80044c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044c4:	2b80      	cmp	r3, #128	; 0x80
 80044c6:	d107      	bne.n	80044d8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80044d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80044d2:	6878      	ldr	r0, [r7, #4]
 80044d4:	f000 fe88 	bl	80051e8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	691b      	ldr	r3, [r3, #16]
 80044de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80044e6:	d10e      	bne.n	8004506 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	68db      	ldr	r3, [r3, #12]
 80044ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044f2:	2b80      	cmp	r3, #128	; 0x80
 80044f4:	d107      	bne.n	8004506 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80044fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004500:	6878      	ldr	r0, [r7, #4]
 8004502:	f000 fe7b 	bl	80051fc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	691b      	ldr	r3, [r3, #16]
 800450c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004510:	2b40      	cmp	r3, #64	; 0x40
 8004512:	d10e      	bne.n	8004532 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	68db      	ldr	r3, [r3, #12]
 800451a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800451e:	2b40      	cmp	r3, #64	; 0x40
 8004520:	d107      	bne.n	8004532 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800452a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800452c:	6878      	ldr	r0, [r7, #4]
 800452e:	f000 fa21 	bl	8004974 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	691b      	ldr	r3, [r3, #16]
 8004538:	f003 0320 	and.w	r3, r3, #32
 800453c:	2b20      	cmp	r3, #32
 800453e:	d10e      	bne.n	800455e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	68db      	ldr	r3, [r3, #12]
 8004546:	f003 0320 	and.w	r3, r3, #32
 800454a:	2b20      	cmp	r3, #32
 800454c:	d107      	bne.n	800455e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f06f 0220 	mvn.w	r2, #32
 8004556:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004558:	6878      	ldr	r0, [r7, #4]
 800455a:	f000 fe3b 	bl	80051d4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800455e:	bf00      	nop
 8004560:	3708      	adds	r7, #8
 8004562:	46bd      	mov	sp, r7
 8004564:	bd80      	pop	{r7, pc}
	...

08004568 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004568:	b580      	push	{r7, lr}
 800456a:	b086      	sub	sp, #24
 800456c:	af00      	add	r7, sp, #0
 800456e:	60f8      	str	r0, [r7, #12]
 8004570:	60b9      	str	r1, [r7, #8]
 8004572:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004574:	2300      	movs	r3, #0
 8004576:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800457e:	2b01      	cmp	r3, #1
 8004580:	d101      	bne.n	8004586 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004582:	2302      	movs	r3, #2
 8004584:	e0ff      	b.n	8004786 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	2201      	movs	r2, #1
 800458a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	2b14      	cmp	r3, #20
 8004592:	f200 80f0 	bhi.w	8004776 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004596:	a201      	add	r2, pc, #4	; (adr r2, 800459c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004598:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800459c:	080045f1 	.word	0x080045f1
 80045a0:	08004777 	.word	0x08004777
 80045a4:	08004777 	.word	0x08004777
 80045a8:	08004777 	.word	0x08004777
 80045ac:	08004631 	.word	0x08004631
 80045b0:	08004777 	.word	0x08004777
 80045b4:	08004777 	.word	0x08004777
 80045b8:	08004777 	.word	0x08004777
 80045bc:	08004673 	.word	0x08004673
 80045c0:	08004777 	.word	0x08004777
 80045c4:	08004777 	.word	0x08004777
 80045c8:	08004777 	.word	0x08004777
 80045cc:	080046b3 	.word	0x080046b3
 80045d0:	08004777 	.word	0x08004777
 80045d4:	08004777 	.word	0x08004777
 80045d8:	08004777 	.word	0x08004777
 80045dc:	080046f5 	.word	0x080046f5
 80045e0:	08004777 	.word	0x08004777
 80045e4:	08004777 	.word	0x08004777
 80045e8:	08004777 	.word	0x08004777
 80045ec:	08004735 	.word	0x08004735
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	68b9      	ldr	r1, [r7, #8]
 80045f6:	4618      	mov	r0, r3
 80045f8:	f000 fa66 	bl	8004ac8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	699a      	ldr	r2, [r3, #24]
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f042 0208 	orr.w	r2, r2, #8
 800460a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	699a      	ldr	r2, [r3, #24]
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f022 0204 	bic.w	r2, r2, #4
 800461a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	6999      	ldr	r1, [r3, #24]
 8004622:	68bb      	ldr	r3, [r7, #8]
 8004624:	691a      	ldr	r2, [r3, #16]
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	430a      	orrs	r2, r1
 800462c:	619a      	str	r2, [r3, #24]
      break;
 800462e:	e0a5      	b.n	800477c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	68b9      	ldr	r1, [r7, #8]
 8004636:	4618      	mov	r0, r3
 8004638:	f000 fab8 	bl	8004bac <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	699a      	ldr	r2, [r3, #24]
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800464a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	699a      	ldr	r2, [r3, #24]
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800465a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	6999      	ldr	r1, [r3, #24]
 8004662:	68bb      	ldr	r3, [r7, #8]
 8004664:	691b      	ldr	r3, [r3, #16]
 8004666:	021a      	lsls	r2, r3, #8
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	430a      	orrs	r2, r1
 800466e:	619a      	str	r2, [r3, #24]
      break;
 8004670:	e084      	b.n	800477c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	68b9      	ldr	r1, [r7, #8]
 8004678:	4618      	mov	r0, r3
 800467a:	f000 fb0f 	bl	8004c9c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	69da      	ldr	r2, [r3, #28]
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f042 0208 	orr.w	r2, r2, #8
 800468c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	69da      	ldr	r2, [r3, #28]
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f022 0204 	bic.w	r2, r2, #4
 800469c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	69d9      	ldr	r1, [r3, #28]
 80046a4:	68bb      	ldr	r3, [r7, #8]
 80046a6:	691a      	ldr	r2, [r3, #16]
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	430a      	orrs	r2, r1
 80046ae:	61da      	str	r2, [r3, #28]
      break;
 80046b0:	e064      	b.n	800477c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	68b9      	ldr	r1, [r7, #8]
 80046b8:	4618      	mov	r0, r3
 80046ba:	f000 fb65 	bl	8004d88 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	69da      	ldr	r2, [r3, #28]
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80046cc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	69da      	ldr	r2, [r3, #28]
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80046dc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	69d9      	ldr	r1, [r3, #28]
 80046e4:	68bb      	ldr	r3, [r7, #8]
 80046e6:	691b      	ldr	r3, [r3, #16]
 80046e8:	021a      	lsls	r2, r3, #8
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	430a      	orrs	r2, r1
 80046f0:	61da      	str	r2, [r3, #28]
      break;
 80046f2:	e043      	b.n	800477c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	68b9      	ldr	r1, [r7, #8]
 80046fa:	4618      	mov	r0, r3
 80046fc:	f000 fb9c 	bl	8004e38 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f042 0208 	orr.w	r2, r2, #8
 800470e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f022 0204 	bic.w	r2, r2, #4
 800471e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004726:	68bb      	ldr	r3, [r7, #8]
 8004728:	691a      	ldr	r2, [r3, #16]
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	430a      	orrs	r2, r1
 8004730:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004732:	e023      	b.n	800477c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	68b9      	ldr	r1, [r7, #8]
 800473a:	4618      	mov	r0, r3
 800473c:	f000 fbce 	bl	8004edc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800474e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800475e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004766:	68bb      	ldr	r3, [r7, #8]
 8004768:	691b      	ldr	r3, [r3, #16]
 800476a:	021a      	lsls	r2, r3, #8
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	430a      	orrs	r2, r1
 8004772:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004774:	e002      	b.n	800477c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8004776:	2301      	movs	r3, #1
 8004778:	75fb      	strb	r3, [r7, #23]
      break;
 800477a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	2200      	movs	r2, #0
 8004780:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004784:	7dfb      	ldrb	r3, [r7, #23]
}
 8004786:	4618      	mov	r0, r3
 8004788:	3718      	adds	r7, #24
 800478a:	46bd      	mov	sp, r7
 800478c:	bd80      	pop	{r7, pc}
 800478e:	bf00      	nop

08004790 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004790:	b580      	push	{r7, lr}
 8004792:	b084      	sub	sp, #16
 8004794:	af00      	add	r7, sp, #0
 8004796:	6078      	str	r0, [r7, #4]
 8004798:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800479a:	2300      	movs	r3, #0
 800479c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80047a4:	2b01      	cmp	r3, #1
 80047a6:	d101      	bne.n	80047ac <HAL_TIM_ConfigClockSource+0x1c>
 80047a8:	2302      	movs	r3, #2
 80047aa:	e0b4      	b.n	8004916 <HAL_TIM_ConfigClockSource+0x186>
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2201      	movs	r2, #1
 80047b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2202      	movs	r2, #2
 80047b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	689b      	ldr	r3, [r3, #8]
 80047c2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80047c4:	68ba      	ldr	r2, [r7, #8]
 80047c6:	4b56      	ldr	r3, [pc, #344]	; (8004920 <HAL_TIM_ConfigClockSource+0x190>)
 80047c8:	4013      	ands	r3, r2
 80047ca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80047cc:	68bb      	ldr	r3, [r7, #8]
 80047ce:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80047d2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	68ba      	ldr	r2, [r7, #8]
 80047da:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80047dc:	683b      	ldr	r3, [r7, #0]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80047e4:	d03e      	beq.n	8004864 <HAL_TIM_ConfigClockSource+0xd4>
 80047e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80047ea:	f200 8087 	bhi.w	80048fc <HAL_TIM_ConfigClockSource+0x16c>
 80047ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047f2:	f000 8086 	beq.w	8004902 <HAL_TIM_ConfigClockSource+0x172>
 80047f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047fa:	d87f      	bhi.n	80048fc <HAL_TIM_ConfigClockSource+0x16c>
 80047fc:	2b70      	cmp	r3, #112	; 0x70
 80047fe:	d01a      	beq.n	8004836 <HAL_TIM_ConfigClockSource+0xa6>
 8004800:	2b70      	cmp	r3, #112	; 0x70
 8004802:	d87b      	bhi.n	80048fc <HAL_TIM_ConfigClockSource+0x16c>
 8004804:	2b60      	cmp	r3, #96	; 0x60
 8004806:	d050      	beq.n	80048aa <HAL_TIM_ConfigClockSource+0x11a>
 8004808:	2b60      	cmp	r3, #96	; 0x60
 800480a:	d877      	bhi.n	80048fc <HAL_TIM_ConfigClockSource+0x16c>
 800480c:	2b50      	cmp	r3, #80	; 0x50
 800480e:	d03c      	beq.n	800488a <HAL_TIM_ConfigClockSource+0xfa>
 8004810:	2b50      	cmp	r3, #80	; 0x50
 8004812:	d873      	bhi.n	80048fc <HAL_TIM_ConfigClockSource+0x16c>
 8004814:	2b40      	cmp	r3, #64	; 0x40
 8004816:	d058      	beq.n	80048ca <HAL_TIM_ConfigClockSource+0x13a>
 8004818:	2b40      	cmp	r3, #64	; 0x40
 800481a:	d86f      	bhi.n	80048fc <HAL_TIM_ConfigClockSource+0x16c>
 800481c:	2b30      	cmp	r3, #48	; 0x30
 800481e:	d064      	beq.n	80048ea <HAL_TIM_ConfigClockSource+0x15a>
 8004820:	2b30      	cmp	r3, #48	; 0x30
 8004822:	d86b      	bhi.n	80048fc <HAL_TIM_ConfigClockSource+0x16c>
 8004824:	2b20      	cmp	r3, #32
 8004826:	d060      	beq.n	80048ea <HAL_TIM_ConfigClockSource+0x15a>
 8004828:	2b20      	cmp	r3, #32
 800482a:	d867      	bhi.n	80048fc <HAL_TIM_ConfigClockSource+0x16c>
 800482c:	2b00      	cmp	r3, #0
 800482e:	d05c      	beq.n	80048ea <HAL_TIM_ConfigClockSource+0x15a>
 8004830:	2b10      	cmp	r3, #16
 8004832:	d05a      	beq.n	80048ea <HAL_TIM_ConfigClockSource+0x15a>
 8004834:	e062      	b.n	80048fc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	6818      	ldr	r0, [r3, #0]
 800483a:	683b      	ldr	r3, [r7, #0]
 800483c:	6899      	ldr	r1, [r3, #8]
 800483e:	683b      	ldr	r3, [r7, #0]
 8004840:	685a      	ldr	r2, [r3, #4]
 8004842:	683b      	ldr	r3, [r7, #0]
 8004844:	68db      	ldr	r3, [r3, #12]
 8004846:	f000 fc17 	bl	8005078 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	689b      	ldr	r3, [r3, #8]
 8004850:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004852:	68bb      	ldr	r3, [r7, #8]
 8004854:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004858:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	68ba      	ldr	r2, [r7, #8]
 8004860:	609a      	str	r2, [r3, #8]
      break;
 8004862:	e04f      	b.n	8004904 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	6818      	ldr	r0, [r3, #0]
 8004868:	683b      	ldr	r3, [r7, #0]
 800486a:	6899      	ldr	r1, [r3, #8]
 800486c:	683b      	ldr	r3, [r7, #0]
 800486e:	685a      	ldr	r2, [r3, #4]
 8004870:	683b      	ldr	r3, [r7, #0]
 8004872:	68db      	ldr	r3, [r3, #12]
 8004874:	f000 fc00 	bl	8005078 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	689a      	ldr	r2, [r3, #8]
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004886:	609a      	str	r2, [r3, #8]
      break;
 8004888:	e03c      	b.n	8004904 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	6818      	ldr	r0, [r3, #0]
 800488e:	683b      	ldr	r3, [r7, #0]
 8004890:	6859      	ldr	r1, [r3, #4]
 8004892:	683b      	ldr	r3, [r7, #0]
 8004894:	68db      	ldr	r3, [r3, #12]
 8004896:	461a      	mov	r2, r3
 8004898:	f000 fb74 	bl	8004f84 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	2150      	movs	r1, #80	; 0x50
 80048a2:	4618      	mov	r0, r3
 80048a4:	f000 fbcd 	bl	8005042 <TIM_ITRx_SetConfig>
      break;
 80048a8:	e02c      	b.n	8004904 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	6818      	ldr	r0, [r3, #0]
 80048ae:	683b      	ldr	r3, [r7, #0]
 80048b0:	6859      	ldr	r1, [r3, #4]
 80048b2:	683b      	ldr	r3, [r7, #0]
 80048b4:	68db      	ldr	r3, [r3, #12]
 80048b6:	461a      	mov	r2, r3
 80048b8:	f000 fb93 	bl	8004fe2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	2160      	movs	r1, #96	; 0x60
 80048c2:	4618      	mov	r0, r3
 80048c4:	f000 fbbd 	bl	8005042 <TIM_ITRx_SetConfig>
      break;
 80048c8:	e01c      	b.n	8004904 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	6818      	ldr	r0, [r3, #0]
 80048ce:	683b      	ldr	r3, [r7, #0]
 80048d0:	6859      	ldr	r1, [r3, #4]
 80048d2:	683b      	ldr	r3, [r7, #0]
 80048d4:	68db      	ldr	r3, [r3, #12]
 80048d6:	461a      	mov	r2, r3
 80048d8:	f000 fb54 	bl	8004f84 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	2140      	movs	r1, #64	; 0x40
 80048e2:	4618      	mov	r0, r3
 80048e4:	f000 fbad 	bl	8005042 <TIM_ITRx_SetConfig>
      break;
 80048e8:	e00c      	b.n	8004904 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681a      	ldr	r2, [r3, #0]
 80048ee:	683b      	ldr	r3, [r7, #0]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	4619      	mov	r1, r3
 80048f4:	4610      	mov	r0, r2
 80048f6:	f000 fba4 	bl	8005042 <TIM_ITRx_SetConfig>
      break;
 80048fa:	e003      	b.n	8004904 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80048fc:	2301      	movs	r3, #1
 80048fe:	73fb      	strb	r3, [r7, #15]
      break;
 8004900:	e000      	b.n	8004904 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004902:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2201      	movs	r2, #1
 8004908:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2200      	movs	r2, #0
 8004910:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004914:	7bfb      	ldrb	r3, [r7, #15]
}
 8004916:	4618      	mov	r0, r3
 8004918:	3710      	adds	r7, #16
 800491a:	46bd      	mov	sp, r7
 800491c:	bd80      	pop	{r7, pc}
 800491e:	bf00      	nop
 8004920:	fffeff88 	.word	0xfffeff88

08004924 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004924:	b480      	push	{r7}
 8004926:	b083      	sub	sp, #12
 8004928:	af00      	add	r7, sp, #0
 800492a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800492c:	bf00      	nop
 800492e:	370c      	adds	r7, #12
 8004930:	46bd      	mov	sp, r7
 8004932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004936:	4770      	bx	lr

08004938 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004938:	b480      	push	{r7}
 800493a:	b083      	sub	sp, #12
 800493c:	af00      	add	r7, sp, #0
 800493e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004940:	bf00      	nop
 8004942:	370c      	adds	r7, #12
 8004944:	46bd      	mov	sp, r7
 8004946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494a:	4770      	bx	lr

0800494c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800494c:	b480      	push	{r7}
 800494e:	b083      	sub	sp, #12
 8004950:	af00      	add	r7, sp, #0
 8004952:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004954:	bf00      	nop
 8004956:	370c      	adds	r7, #12
 8004958:	46bd      	mov	sp, r7
 800495a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495e:	4770      	bx	lr

08004960 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004960:	b480      	push	{r7}
 8004962:	b083      	sub	sp, #12
 8004964:	af00      	add	r7, sp, #0
 8004966:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004968:	bf00      	nop
 800496a:	370c      	adds	r7, #12
 800496c:	46bd      	mov	sp, r7
 800496e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004972:	4770      	bx	lr

08004974 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004974:	b480      	push	{r7}
 8004976:	b083      	sub	sp, #12
 8004978:	af00      	add	r7, sp, #0
 800497a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800497c:	bf00      	nop
 800497e:	370c      	adds	r7, #12
 8004980:	46bd      	mov	sp, r7
 8004982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004986:	4770      	bx	lr

08004988 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004988:	b480      	push	{r7}
 800498a:	b085      	sub	sp, #20
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]
 8004990:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	4a40      	ldr	r2, [pc, #256]	; (8004a9c <TIM_Base_SetConfig+0x114>)
 800499c:	4293      	cmp	r3, r2
 800499e:	d013      	beq.n	80049c8 <TIM_Base_SetConfig+0x40>
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049a6:	d00f      	beq.n	80049c8 <TIM_Base_SetConfig+0x40>
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	4a3d      	ldr	r2, [pc, #244]	; (8004aa0 <TIM_Base_SetConfig+0x118>)
 80049ac:	4293      	cmp	r3, r2
 80049ae:	d00b      	beq.n	80049c8 <TIM_Base_SetConfig+0x40>
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	4a3c      	ldr	r2, [pc, #240]	; (8004aa4 <TIM_Base_SetConfig+0x11c>)
 80049b4:	4293      	cmp	r3, r2
 80049b6:	d007      	beq.n	80049c8 <TIM_Base_SetConfig+0x40>
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	4a3b      	ldr	r2, [pc, #236]	; (8004aa8 <TIM_Base_SetConfig+0x120>)
 80049bc:	4293      	cmp	r3, r2
 80049be:	d003      	beq.n	80049c8 <TIM_Base_SetConfig+0x40>
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	4a3a      	ldr	r2, [pc, #232]	; (8004aac <TIM_Base_SetConfig+0x124>)
 80049c4:	4293      	cmp	r3, r2
 80049c6:	d108      	bne.n	80049da <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049ce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80049d0:	683b      	ldr	r3, [r7, #0]
 80049d2:	685b      	ldr	r3, [r3, #4]
 80049d4:	68fa      	ldr	r2, [r7, #12]
 80049d6:	4313      	orrs	r3, r2
 80049d8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	4a2f      	ldr	r2, [pc, #188]	; (8004a9c <TIM_Base_SetConfig+0x114>)
 80049de:	4293      	cmp	r3, r2
 80049e0:	d02b      	beq.n	8004a3a <TIM_Base_SetConfig+0xb2>
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049e8:	d027      	beq.n	8004a3a <TIM_Base_SetConfig+0xb2>
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	4a2c      	ldr	r2, [pc, #176]	; (8004aa0 <TIM_Base_SetConfig+0x118>)
 80049ee:	4293      	cmp	r3, r2
 80049f0:	d023      	beq.n	8004a3a <TIM_Base_SetConfig+0xb2>
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	4a2b      	ldr	r2, [pc, #172]	; (8004aa4 <TIM_Base_SetConfig+0x11c>)
 80049f6:	4293      	cmp	r3, r2
 80049f8:	d01f      	beq.n	8004a3a <TIM_Base_SetConfig+0xb2>
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	4a2a      	ldr	r2, [pc, #168]	; (8004aa8 <TIM_Base_SetConfig+0x120>)
 80049fe:	4293      	cmp	r3, r2
 8004a00:	d01b      	beq.n	8004a3a <TIM_Base_SetConfig+0xb2>
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	4a29      	ldr	r2, [pc, #164]	; (8004aac <TIM_Base_SetConfig+0x124>)
 8004a06:	4293      	cmp	r3, r2
 8004a08:	d017      	beq.n	8004a3a <TIM_Base_SetConfig+0xb2>
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	4a28      	ldr	r2, [pc, #160]	; (8004ab0 <TIM_Base_SetConfig+0x128>)
 8004a0e:	4293      	cmp	r3, r2
 8004a10:	d013      	beq.n	8004a3a <TIM_Base_SetConfig+0xb2>
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	4a27      	ldr	r2, [pc, #156]	; (8004ab4 <TIM_Base_SetConfig+0x12c>)
 8004a16:	4293      	cmp	r3, r2
 8004a18:	d00f      	beq.n	8004a3a <TIM_Base_SetConfig+0xb2>
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	4a26      	ldr	r2, [pc, #152]	; (8004ab8 <TIM_Base_SetConfig+0x130>)
 8004a1e:	4293      	cmp	r3, r2
 8004a20:	d00b      	beq.n	8004a3a <TIM_Base_SetConfig+0xb2>
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	4a25      	ldr	r2, [pc, #148]	; (8004abc <TIM_Base_SetConfig+0x134>)
 8004a26:	4293      	cmp	r3, r2
 8004a28:	d007      	beq.n	8004a3a <TIM_Base_SetConfig+0xb2>
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	4a24      	ldr	r2, [pc, #144]	; (8004ac0 <TIM_Base_SetConfig+0x138>)
 8004a2e:	4293      	cmp	r3, r2
 8004a30:	d003      	beq.n	8004a3a <TIM_Base_SetConfig+0xb2>
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	4a23      	ldr	r2, [pc, #140]	; (8004ac4 <TIM_Base_SetConfig+0x13c>)
 8004a36:	4293      	cmp	r3, r2
 8004a38:	d108      	bne.n	8004a4c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a40:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004a42:	683b      	ldr	r3, [r7, #0]
 8004a44:	68db      	ldr	r3, [r3, #12]
 8004a46:	68fa      	ldr	r2, [r7, #12]
 8004a48:	4313      	orrs	r3, r2
 8004a4a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004a52:	683b      	ldr	r3, [r7, #0]
 8004a54:	695b      	ldr	r3, [r3, #20]
 8004a56:	4313      	orrs	r3, r2
 8004a58:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	68fa      	ldr	r2, [r7, #12]
 8004a5e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004a60:	683b      	ldr	r3, [r7, #0]
 8004a62:	689a      	ldr	r2, [r3, #8]
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004a68:	683b      	ldr	r3, [r7, #0]
 8004a6a:	681a      	ldr	r2, [r3, #0]
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	4a0a      	ldr	r2, [pc, #40]	; (8004a9c <TIM_Base_SetConfig+0x114>)
 8004a74:	4293      	cmp	r3, r2
 8004a76:	d003      	beq.n	8004a80 <TIM_Base_SetConfig+0xf8>
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	4a0c      	ldr	r2, [pc, #48]	; (8004aac <TIM_Base_SetConfig+0x124>)
 8004a7c:	4293      	cmp	r3, r2
 8004a7e:	d103      	bne.n	8004a88 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004a80:	683b      	ldr	r3, [r7, #0]
 8004a82:	691a      	ldr	r2, [r3, #16]
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	2201      	movs	r2, #1
 8004a8c:	615a      	str	r2, [r3, #20]
}
 8004a8e:	bf00      	nop
 8004a90:	3714      	adds	r7, #20
 8004a92:	46bd      	mov	sp, r7
 8004a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a98:	4770      	bx	lr
 8004a9a:	bf00      	nop
 8004a9c:	40010000 	.word	0x40010000
 8004aa0:	40000400 	.word	0x40000400
 8004aa4:	40000800 	.word	0x40000800
 8004aa8:	40000c00 	.word	0x40000c00
 8004aac:	40010400 	.word	0x40010400
 8004ab0:	40014000 	.word	0x40014000
 8004ab4:	40014400 	.word	0x40014400
 8004ab8:	40014800 	.word	0x40014800
 8004abc:	40001800 	.word	0x40001800
 8004ac0:	40001c00 	.word	0x40001c00
 8004ac4:	40002000 	.word	0x40002000

08004ac8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004ac8:	b480      	push	{r7}
 8004aca:	b087      	sub	sp, #28
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	6078      	str	r0, [r7, #4]
 8004ad0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	6a1b      	ldr	r3, [r3, #32]
 8004ad6:	f023 0201 	bic.w	r2, r3, #1
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	6a1b      	ldr	r3, [r3, #32]
 8004ae2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	685b      	ldr	r3, [r3, #4]
 8004ae8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	699b      	ldr	r3, [r3, #24]
 8004aee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004af0:	68fa      	ldr	r2, [r7, #12]
 8004af2:	4b2b      	ldr	r3, [pc, #172]	; (8004ba0 <TIM_OC1_SetConfig+0xd8>)
 8004af4:	4013      	ands	r3, r2
 8004af6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	f023 0303 	bic.w	r3, r3, #3
 8004afe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004b00:	683b      	ldr	r3, [r7, #0]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	68fa      	ldr	r2, [r7, #12]
 8004b06:	4313      	orrs	r3, r2
 8004b08:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004b0a:	697b      	ldr	r3, [r7, #20]
 8004b0c:	f023 0302 	bic.w	r3, r3, #2
 8004b10:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004b12:	683b      	ldr	r3, [r7, #0]
 8004b14:	689b      	ldr	r3, [r3, #8]
 8004b16:	697a      	ldr	r2, [r7, #20]
 8004b18:	4313      	orrs	r3, r2
 8004b1a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	4a21      	ldr	r2, [pc, #132]	; (8004ba4 <TIM_OC1_SetConfig+0xdc>)
 8004b20:	4293      	cmp	r3, r2
 8004b22:	d003      	beq.n	8004b2c <TIM_OC1_SetConfig+0x64>
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	4a20      	ldr	r2, [pc, #128]	; (8004ba8 <TIM_OC1_SetConfig+0xe0>)
 8004b28:	4293      	cmp	r3, r2
 8004b2a:	d10c      	bne.n	8004b46 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004b2c:	697b      	ldr	r3, [r7, #20]
 8004b2e:	f023 0308 	bic.w	r3, r3, #8
 8004b32:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004b34:	683b      	ldr	r3, [r7, #0]
 8004b36:	68db      	ldr	r3, [r3, #12]
 8004b38:	697a      	ldr	r2, [r7, #20]
 8004b3a:	4313      	orrs	r3, r2
 8004b3c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004b3e:	697b      	ldr	r3, [r7, #20]
 8004b40:	f023 0304 	bic.w	r3, r3, #4
 8004b44:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	4a16      	ldr	r2, [pc, #88]	; (8004ba4 <TIM_OC1_SetConfig+0xdc>)
 8004b4a:	4293      	cmp	r3, r2
 8004b4c:	d003      	beq.n	8004b56 <TIM_OC1_SetConfig+0x8e>
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	4a15      	ldr	r2, [pc, #84]	; (8004ba8 <TIM_OC1_SetConfig+0xe0>)
 8004b52:	4293      	cmp	r3, r2
 8004b54:	d111      	bne.n	8004b7a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004b56:	693b      	ldr	r3, [r7, #16]
 8004b58:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004b5c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004b5e:	693b      	ldr	r3, [r7, #16]
 8004b60:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004b64:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004b66:	683b      	ldr	r3, [r7, #0]
 8004b68:	695b      	ldr	r3, [r3, #20]
 8004b6a:	693a      	ldr	r2, [r7, #16]
 8004b6c:	4313      	orrs	r3, r2
 8004b6e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004b70:	683b      	ldr	r3, [r7, #0]
 8004b72:	699b      	ldr	r3, [r3, #24]
 8004b74:	693a      	ldr	r2, [r7, #16]
 8004b76:	4313      	orrs	r3, r2
 8004b78:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	693a      	ldr	r2, [r7, #16]
 8004b7e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	68fa      	ldr	r2, [r7, #12]
 8004b84:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004b86:	683b      	ldr	r3, [r7, #0]
 8004b88:	685a      	ldr	r2, [r3, #4]
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	697a      	ldr	r2, [r7, #20]
 8004b92:	621a      	str	r2, [r3, #32]
}
 8004b94:	bf00      	nop
 8004b96:	371c      	adds	r7, #28
 8004b98:	46bd      	mov	sp, r7
 8004b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9e:	4770      	bx	lr
 8004ba0:	fffeff8f 	.word	0xfffeff8f
 8004ba4:	40010000 	.word	0x40010000
 8004ba8:	40010400 	.word	0x40010400

08004bac <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004bac:	b480      	push	{r7}
 8004bae:	b087      	sub	sp, #28
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	6078      	str	r0, [r7, #4]
 8004bb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	6a1b      	ldr	r3, [r3, #32]
 8004bba:	f023 0210 	bic.w	r2, r3, #16
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	6a1b      	ldr	r3, [r3, #32]
 8004bc6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	685b      	ldr	r3, [r3, #4]
 8004bcc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	699b      	ldr	r3, [r3, #24]
 8004bd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004bd4:	68fa      	ldr	r2, [r7, #12]
 8004bd6:	4b2e      	ldr	r3, [pc, #184]	; (8004c90 <TIM_OC2_SetConfig+0xe4>)
 8004bd8:	4013      	ands	r3, r2
 8004bda:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004be2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004be4:	683b      	ldr	r3, [r7, #0]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	021b      	lsls	r3, r3, #8
 8004bea:	68fa      	ldr	r2, [r7, #12]
 8004bec:	4313      	orrs	r3, r2
 8004bee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004bf0:	697b      	ldr	r3, [r7, #20]
 8004bf2:	f023 0320 	bic.w	r3, r3, #32
 8004bf6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004bf8:	683b      	ldr	r3, [r7, #0]
 8004bfa:	689b      	ldr	r3, [r3, #8]
 8004bfc:	011b      	lsls	r3, r3, #4
 8004bfe:	697a      	ldr	r2, [r7, #20]
 8004c00:	4313      	orrs	r3, r2
 8004c02:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	4a23      	ldr	r2, [pc, #140]	; (8004c94 <TIM_OC2_SetConfig+0xe8>)
 8004c08:	4293      	cmp	r3, r2
 8004c0a:	d003      	beq.n	8004c14 <TIM_OC2_SetConfig+0x68>
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	4a22      	ldr	r2, [pc, #136]	; (8004c98 <TIM_OC2_SetConfig+0xec>)
 8004c10:	4293      	cmp	r3, r2
 8004c12:	d10d      	bne.n	8004c30 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004c14:	697b      	ldr	r3, [r7, #20]
 8004c16:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004c1a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004c1c:	683b      	ldr	r3, [r7, #0]
 8004c1e:	68db      	ldr	r3, [r3, #12]
 8004c20:	011b      	lsls	r3, r3, #4
 8004c22:	697a      	ldr	r2, [r7, #20]
 8004c24:	4313      	orrs	r3, r2
 8004c26:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004c28:	697b      	ldr	r3, [r7, #20]
 8004c2a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c2e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	4a18      	ldr	r2, [pc, #96]	; (8004c94 <TIM_OC2_SetConfig+0xe8>)
 8004c34:	4293      	cmp	r3, r2
 8004c36:	d003      	beq.n	8004c40 <TIM_OC2_SetConfig+0x94>
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	4a17      	ldr	r2, [pc, #92]	; (8004c98 <TIM_OC2_SetConfig+0xec>)
 8004c3c:	4293      	cmp	r3, r2
 8004c3e:	d113      	bne.n	8004c68 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004c40:	693b      	ldr	r3, [r7, #16]
 8004c42:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004c46:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004c48:	693b      	ldr	r3, [r7, #16]
 8004c4a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004c4e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004c50:	683b      	ldr	r3, [r7, #0]
 8004c52:	695b      	ldr	r3, [r3, #20]
 8004c54:	009b      	lsls	r3, r3, #2
 8004c56:	693a      	ldr	r2, [r7, #16]
 8004c58:	4313      	orrs	r3, r2
 8004c5a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004c5c:	683b      	ldr	r3, [r7, #0]
 8004c5e:	699b      	ldr	r3, [r3, #24]
 8004c60:	009b      	lsls	r3, r3, #2
 8004c62:	693a      	ldr	r2, [r7, #16]
 8004c64:	4313      	orrs	r3, r2
 8004c66:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	693a      	ldr	r2, [r7, #16]
 8004c6c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	68fa      	ldr	r2, [r7, #12]
 8004c72:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004c74:	683b      	ldr	r3, [r7, #0]
 8004c76:	685a      	ldr	r2, [r3, #4]
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	697a      	ldr	r2, [r7, #20]
 8004c80:	621a      	str	r2, [r3, #32]
}
 8004c82:	bf00      	nop
 8004c84:	371c      	adds	r7, #28
 8004c86:	46bd      	mov	sp, r7
 8004c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8c:	4770      	bx	lr
 8004c8e:	bf00      	nop
 8004c90:	feff8fff 	.word	0xfeff8fff
 8004c94:	40010000 	.word	0x40010000
 8004c98:	40010400 	.word	0x40010400

08004c9c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004c9c:	b480      	push	{r7}
 8004c9e:	b087      	sub	sp, #28
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	6078      	str	r0, [r7, #4]
 8004ca4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	6a1b      	ldr	r3, [r3, #32]
 8004caa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	6a1b      	ldr	r3, [r3, #32]
 8004cb6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	685b      	ldr	r3, [r3, #4]
 8004cbc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	69db      	ldr	r3, [r3, #28]
 8004cc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004cc4:	68fa      	ldr	r2, [r7, #12]
 8004cc6:	4b2d      	ldr	r3, [pc, #180]	; (8004d7c <TIM_OC3_SetConfig+0xe0>)
 8004cc8:	4013      	ands	r3, r2
 8004cca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	f023 0303 	bic.w	r3, r3, #3
 8004cd2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004cd4:	683b      	ldr	r3, [r7, #0]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	68fa      	ldr	r2, [r7, #12]
 8004cda:	4313      	orrs	r3, r2
 8004cdc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004cde:	697b      	ldr	r3, [r7, #20]
 8004ce0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004ce4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004ce6:	683b      	ldr	r3, [r7, #0]
 8004ce8:	689b      	ldr	r3, [r3, #8]
 8004cea:	021b      	lsls	r3, r3, #8
 8004cec:	697a      	ldr	r2, [r7, #20]
 8004cee:	4313      	orrs	r3, r2
 8004cf0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	4a22      	ldr	r2, [pc, #136]	; (8004d80 <TIM_OC3_SetConfig+0xe4>)
 8004cf6:	4293      	cmp	r3, r2
 8004cf8:	d003      	beq.n	8004d02 <TIM_OC3_SetConfig+0x66>
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	4a21      	ldr	r2, [pc, #132]	; (8004d84 <TIM_OC3_SetConfig+0xe8>)
 8004cfe:	4293      	cmp	r3, r2
 8004d00:	d10d      	bne.n	8004d1e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004d02:	697b      	ldr	r3, [r7, #20]
 8004d04:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004d08:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004d0a:	683b      	ldr	r3, [r7, #0]
 8004d0c:	68db      	ldr	r3, [r3, #12]
 8004d0e:	021b      	lsls	r3, r3, #8
 8004d10:	697a      	ldr	r2, [r7, #20]
 8004d12:	4313      	orrs	r3, r2
 8004d14:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004d16:	697b      	ldr	r3, [r7, #20]
 8004d18:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004d1c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	4a17      	ldr	r2, [pc, #92]	; (8004d80 <TIM_OC3_SetConfig+0xe4>)
 8004d22:	4293      	cmp	r3, r2
 8004d24:	d003      	beq.n	8004d2e <TIM_OC3_SetConfig+0x92>
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	4a16      	ldr	r2, [pc, #88]	; (8004d84 <TIM_OC3_SetConfig+0xe8>)
 8004d2a:	4293      	cmp	r3, r2
 8004d2c:	d113      	bne.n	8004d56 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004d2e:	693b      	ldr	r3, [r7, #16]
 8004d30:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004d34:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004d36:	693b      	ldr	r3, [r7, #16]
 8004d38:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004d3c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004d3e:	683b      	ldr	r3, [r7, #0]
 8004d40:	695b      	ldr	r3, [r3, #20]
 8004d42:	011b      	lsls	r3, r3, #4
 8004d44:	693a      	ldr	r2, [r7, #16]
 8004d46:	4313      	orrs	r3, r2
 8004d48:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004d4a:	683b      	ldr	r3, [r7, #0]
 8004d4c:	699b      	ldr	r3, [r3, #24]
 8004d4e:	011b      	lsls	r3, r3, #4
 8004d50:	693a      	ldr	r2, [r7, #16]
 8004d52:	4313      	orrs	r3, r2
 8004d54:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	693a      	ldr	r2, [r7, #16]
 8004d5a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	68fa      	ldr	r2, [r7, #12]
 8004d60:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004d62:	683b      	ldr	r3, [r7, #0]
 8004d64:	685a      	ldr	r2, [r3, #4]
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	697a      	ldr	r2, [r7, #20]
 8004d6e:	621a      	str	r2, [r3, #32]
}
 8004d70:	bf00      	nop
 8004d72:	371c      	adds	r7, #28
 8004d74:	46bd      	mov	sp, r7
 8004d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7a:	4770      	bx	lr
 8004d7c:	fffeff8f 	.word	0xfffeff8f
 8004d80:	40010000 	.word	0x40010000
 8004d84:	40010400 	.word	0x40010400

08004d88 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004d88:	b480      	push	{r7}
 8004d8a:	b087      	sub	sp, #28
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	6078      	str	r0, [r7, #4]
 8004d90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	6a1b      	ldr	r3, [r3, #32]
 8004d96:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	6a1b      	ldr	r3, [r3, #32]
 8004da2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	685b      	ldr	r3, [r3, #4]
 8004da8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	69db      	ldr	r3, [r3, #28]
 8004dae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004db0:	68fa      	ldr	r2, [r7, #12]
 8004db2:	4b1e      	ldr	r3, [pc, #120]	; (8004e2c <TIM_OC4_SetConfig+0xa4>)
 8004db4:	4013      	ands	r3, r2
 8004db6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004dbe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004dc0:	683b      	ldr	r3, [r7, #0]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	021b      	lsls	r3, r3, #8
 8004dc6:	68fa      	ldr	r2, [r7, #12]
 8004dc8:	4313      	orrs	r3, r2
 8004dca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004dcc:	693b      	ldr	r3, [r7, #16]
 8004dce:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004dd2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004dd4:	683b      	ldr	r3, [r7, #0]
 8004dd6:	689b      	ldr	r3, [r3, #8]
 8004dd8:	031b      	lsls	r3, r3, #12
 8004dda:	693a      	ldr	r2, [r7, #16]
 8004ddc:	4313      	orrs	r3, r2
 8004dde:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	4a13      	ldr	r2, [pc, #76]	; (8004e30 <TIM_OC4_SetConfig+0xa8>)
 8004de4:	4293      	cmp	r3, r2
 8004de6:	d003      	beq.n	8004df0 <TIM_OC4_SetConfig+0x68>
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	4a12      	ldr	r2, [pc, #72]	; (8004e34 <TIM_OC4_SetConfig+0xac>)
 8004dec:	4293      	cmp	r3, r2
 8004dee:	d109      	bne.n	8004e04 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004df0:	697b      	ldr	r3, [r7, #20]
 8004df2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004df6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004df8:	683b      	ldr	r3, [r7, #0]
 8004dfa:	695b      	ldr	r3, [r3, #20]
 8004dfc:	019b      	lsls	r3, r3, #6
 8004dfe:	697a      	ldr	r2, [r7, #20]
 8004e00:	4313      	orrs	r3, r2
 8004e02:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	697a      	ldr	r2, [r7, #20]
 8004e08:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	68fa      	ldr	r2, [r7, #12]
 8004e0e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004e10:	683b      	ldr	r3, [r7, #0]
 8004e12:	685a      	ldr	r2, [r3, #4]
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	693a      	ldr	r2, [r7, #16]
 8004e1c:	621a      	str	r2, [r3, #32]
}
 8004e1e:	bf00      	nop
 8004e20:	371c      	adds	r7, #28
 8004e22:	46bd      	mov	sp, r7
 8004e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e28:	4770      	bx	lr
 8004e2a:	bf00      	nop
 8004e2c:	feff8fff 	.word	0xfeff8fff
 8004e30:	40010000 	.word	0x40010000
 8004e34:	40010400 	.word	0x40010400

08004e38 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004e38:	b480      	push	{r7}
 8004e3a:	b087      	sub	sp, #28
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	6078      	str	r0, [r7, #4]
 8004e40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	6a1b      	ldr	r3, [r3, #32]
 8004e46:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	6a1b      	ldr	r3, [r3, #32]
 8004e52:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	685b      	ldr	r3, [r3, #4]
 8004e58:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004e60:	68fa      	ldr	r2, [r7, #12]
 8004e62:	4b1b      	ldr	r3, [pc, #108]	; (8004ed0 <TIM_OC5_SetConfig+0x98>)
 8004e64:	4013      	ands	r3, r2
 8004e66:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004e68:	683b      	ldr	r3, [r7, #0]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	68fa      	ldr	r2, [r7, #12]
 8004e6e:	4313      	orrs	r3, r2
 8004e70:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004e72:	693b      	ldr	r3, [r7, #16]
 8004e74:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004e78:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004e7a:	683b      	ldr	r3, [r7, #0]
 8004e7c:	689b      	ldr	r3, [r3, #8]
 8004e7e:	041b      	lsls	r3, r3, #16
 8004e80:	693a      	ldr	r2, [r7, #16]
 8004e82:	4313      	orrs	r3, r2
 8004e84:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	4a12      	ldr	r2, [pc, #72]	; (8004ed4 <TIM_OC5_SetConfig+0x9c>)
 8004e8a:	4293      	cmp	r3, r2
 8004e8c:	d003      	beq.n	8004e96 <TIM_OC5_SetConfig+0x5e>
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	4a11      	ldr	r2, [pc, #68]	; (8004ed8 <TIM_OC5_SetConfig+0xa0>)
 8004e92:	4293      	cmp	r3, r2
 8004e94:	d109      	bne.n	8004eaa <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004e96:	697b      	ldr	r3, [r7, #20]
 8004e98:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004e9c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004e9e:	683b      	ldr	r3, [r7, #0]
 8004ea0:	695b      	ldr	r3, [r3, #20]
 8004ea2:	021b      	lsls	r3, r3, #8
 8004ea4:	697a      	ldr	r2, [r7, #20]
 8004ea6:	4313      	orrs	r3, r2
 8004ea8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	697a      	ldr	r2, [r7, #20]
 8004eae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	68fa      	ldr	r2, [r7, #12]
 8004eb4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004eb6:	683b      	ldr	r3, [r7, #0]
 8004eb8:	685a      	ldr	r2, [r3, #4]
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	693a      	ldr	r2, [r7, #16]
 8004ec2:	621a      	str	r2, [r3, #32]
}
 8004ec4:	bf00      	nop
 8004ec6:	371c      	adds	r7, #28
 8004ec8:	46bd      	mov	sp, r7
 8004eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ece:	4770      	bx	lr
 8004ed0:	fffeff8f 	.word	0xfffeff8f
 8004ed4:	40010000 	.word	0x40010000
 8004ed8:	40010400 	.word	0x40010400

08004edc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004edc:	b480      	push	{r7}
 8004ede:	b087      	sub	sp, #28
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	6078      	str	r0, [r7, #4]
 8004ee4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	6a1b      	ldr	r3, [r3, #32]
 8004eea:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	6a1b      	ldr	r3, [r3, #32]
 8004ef6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	685b      	ldr	r3, [r3, #4]
 8004efc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004f04:	68fa      	ldr	r2, [r7, #12]
 8004f06:	4b1c      	ldr	r3, [pc, #112]	; (8004f78 <TIM_OC6_SetConfig+0x9c>)
 8004f08:	4013      	ands	r3, r2
 8004f0a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004f0c:	683b      	ldr	r3, [r7, #0]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	021b      	lsls	r3, r3, #8
 8004f12:	68fa      	ldr	r2, [r7, #12]
 8004f14:	4313      	orrs	r3, r2
 8004f16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004f18:	693b      	ldr	r3, [r7, #16]
 8004f1a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004f1e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004f20:	683b      	ldr	r3, [r7, #0]
 8004f22:	689b      	ldr	r3, [r3, #8]
 8004f24:	051b      	lsls	r3, r3, #20
 8004f26:	693a      	ldr	r2, [r7, #16]
 8004f28:	4313      	orrs	r3, r2
 8004f2a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	4a13      	ldr	r2, [pc, #76]	; (8004f7c <TIM_OC6_SetConfig+0xa0>)
 8004f30:	4293      	cmp	r3, r2
 8004f32:	d003      	beq.n	8004f3c <TIM_OC6_SetConfig+0x60>
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	4a12      	ldr	r2, [pc, #72]	; (8004f80 <TIM_OC6_SetConfig+0xa4>)
 8004f38:	4293      	cmp	r3, r2
 8004f3a:	d109      	bne.n	8004f50 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004f3c:	697b      	ldr	r3, [r7, #20]
 8004f3e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004f42:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004f44:	683b      	ldr	r3, [r7, #0]
 8004f46:	695b      	ldr	r3, [r3, #20]
 8004f48:	029b      	lsls	r3, r3, #10
 8004f4a:	697a      	ldr	r2, [r7, #20]
 8004f4c:	4313      	orrs	r3, r2
 8004f4e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	697a      	ldr	r2, [r7, #20]
 8004f54:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	68fa      	ldr	r2, [r7, #12]
 8004f5a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004f5c:	683b      	ldr	r3, [r7, #0]
 8004f5e:	685a      	ldr	r2, [r3, #4]
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	693a      	ldr	r2, [r7, #16]
 8004f68:	621a      	str	r2, [r3, #32]
}
 8004f6a:	bf00      	nop
 8004f6c:	371c      	adds	r7, #28
 8004f6e:	46bd      	mov	sp, r7
 8004f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f74:	4770      	bx	lr
 8004f76:	bf00      	nop
 8004f78:	feff8fff 	.word	0xfeff8fff
 8004f7c:	40010000 	.word	0x40010000
 8004f80:	40010400 	.word	0x40010400

08004f84 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004f84:	b480      	push	{r7}
 8004f86:	b087      	sub	sp, #28
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	60f8      	str	r0, [r7, #12]
 8004f8c:	60b9      	str	r1, [r7, #8]
 8004f8e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	6a1b      	ldr	r3, [r3, #32]
 8004f94:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	6a1b      	ldr	r3, [r3, #32]
 8004f9a:	f023 0201 	bic.w	r2, r3, #1
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	699b      	ldr	r3, [r3, #24]
 8004fa6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004fa8:	693b      	ldr	r3, [r7, #16]
 8004faa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004fae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	011b      	lsls	r3, r3, #4
 8004fb4:	693a      	ldr	r2, [r7, #16]
 8004fb6:	4313      	orrs	r3, r2
 8004fb8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004fba:	697b      	ldr	r3, [r7, #20]
 8004fbc:	f023 030a 	bic.w	r3, r3, #10
 8004fc0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004fc2:	697a      	ldr	r2, [r7, #20]
 8004fc4:	68bb      	ldr	r3, [r7, #8]
 8004fc6:	4313      	orrs	r3, r2
 8004fc8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	693a      	ldr	r2, [r7, #16]
 8004fce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	697a      	ldr	r2, [r7, #20]
 8004fd4:	621a      	str	r2, [r3, #32]
}
 8004fd6:	bf00      	nop
 8004fd8:	371c      	adds	r7, #28
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe0:	4770      	bx	lr

08004fe2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004fe2:	b480      	push	{r7}
 8004fe4:	b087      	sub	sp, #28
 8004fe6:	af00      	add	r7, sp, #0
 8004fe8:	60f8      	str	r0, [r7, #12]
 8004fea:	60b9      	str	r1, [r7, #8]
 8004fec:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	6a1b      	ldr	r3, [r3, #32]
 8004ff2:	f023 0210 	bic.w	r2, r3, #16
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	699b      	ldr	r3, [r3, #24]
 8004ffe:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	6a1b      	ldr	r3, [r3, #32]
 8005004:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005006:	697b      	ldr	r3, [r7, #20]
 8005008:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800500c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	031b      	lsls	r3, r3, #12
 8005012:	697a      	ldr	r2, [r7, #20]
 8005014:	4313      	orrs	r3, r2
 8005016:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005018:	693b      	ldr	r3, [r7, #16]
 800501a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800501e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005020:	68bb      	ldr	r3, [r7, #8]
 8005022:	011b      	lsls	r3, r3, #4
 8005024:	693a      	ldr	r2, [r7, #16]
 8005026:	4313      	orrs	r3, r2
 8005028:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	697a      	ldr	r2, [r7, #20]
 800502e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	693a      	ldr	r2, [r7, #16]
 8005034:	621a      	str	r2, [r3, #32]
}
 8005036:	bf00      	nop
 8005038:	371c      	adds	r7, #28
 800503a:	46bd      	mov	sp, r7
 800503c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005040:	4770      	bx	lr

08005042 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005042:	b480      	push	{r7}
 8005044:	b085      	sub	sp, #20
 8005046:	af00      	add	r7, sp, #0
 8005048:	6078      	str	r0, [r7, #4]
 800504a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	689b      	ldr	r3, [r3, #8]
 8005050:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005058:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800505a:	683a      	ldr	r2, [r7, #0]
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	4313      	orrs	r3, r2
 8005060:	f043 0307 	orr.w	r3, r3, #7
 8005064:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	68fa      	ldr	r2, [r7, #12]
 800506a:	609a      	str	r2, [r3, #8]
}
 800506c:	bf00      	nop
 800506e:	3714      	adds	r7, #20
 8005070:	46bd      	mov	sp, r7
 8005072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005076:	4770      	bx	lr

08005078 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005078:	b480      	push	{r7}
 800507a:	b087      	sub	sp, #28
 800507c:	af00      	add	r7, sp, #0
 800507e:	60f8      	str	r0, [r7, #12]
 8005080:	60b9      	str	r1, [r7, #8]
 8005082:	607a      	str	r2, [r7, #4]
 8005084:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	689b      	ldr	r3, [r3, #8]
 800508a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800508c:	697b      	ldr	r3, [r7, #20]
 800508e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005092:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005094:	683b      	ldr	r3, [r7, #0]
 8005096:	021a      	lsls	r2, r3, #8
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	431a      	orrs	r2, r3
 800509c:	68bb      	ldr	r3, [r7, #8]
 800509e:	4313      	orrs	r3, r2
 80050a0:	697a      	ldr	r2, [r7, #20]
 80050a2:	4313      	orrs	r3, r2
 80050a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	697a      	ldr	r2, [r7, #20]
 80050aa:	609a      	str	r2, [r3, #8]
}
 80050ac:	bf00      	nop
 80050ae:	371c      	adds	r7, #28
 80050b0:	46bd      	mov	sp, r7
 80050b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b6:	4770      	bx	lr

080050b8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80050b8:	b480      	push	{r7}
 80050ba:	b085      	sub	sp, #20
 80050bc:	af00      	add	r7, sp, #0
 80050be:	6078      	str	r0, [r7, #4]
 80050c0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80050c8:	2b01      	cmp	r3, #1
 80050ca:	d101      	bne.n	80050d0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80050cc:	2302      	movs	r3, #2
 80050ce:	e06d      	b.n	80051ac <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	2201      	movs	r2, #1
 80050d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	2202      	movs	r2, #2
 80050dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	685b      	ldr	r3, [r3, #4]
 80050e6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	689b      	ldr	r3, [r3, #8]
 80050ee:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	4a30      	ldr	r2, [pc, #192]	; (80051b8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80050f6:	4293      	cmp	r3, r2
 80050f8:	d004      	beq.n	8005104 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	4a2f      	ldr	r2, [pc, #188]	; (80051bc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005100:	4293      	cmp	r3, r2
 8005102:	d108      	bne.n	8005116 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800510a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800510c:	683b      	ldr	r3, [r7, #0]
 800510e:	685b      	ldr	r3, [r3, #4]
 8005110:	68fa      	ldr	r2, [r7, #12]
 8005112:	4313      	orrs	r3, r2
 8005114:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800511c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800511e:	683b      	ldr	r3, [r7, #0]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	68fa      	ldr	r2, [r7, #12]
 8005124:	4313      	orrs	r3, r2
 8005126:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	68fa      	ldr	r2, [r7, #12]
 800512e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	4a20      	ldr	r2, [pc, #128]	; (80051b8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005136:	4293      	cmp	r3, r2
 8005138:	d022      	beq.n	8005180 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005142:	d01d      	beq.n	8005180 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	4a1d      	ldr	r2, [pc, #116]	; (80051c0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800514a:	4293      	cmp	r3, r2
 800514c:	d018      	beq.n	8005180 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	4a1c      	ldr	r2, [pc, #112]	; (80051c4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005154:	4293      	cmp	r3, r2
 8005156:	d013      	beq.n	8005180 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	4a1a      	ldr	r2, [pc, #104]	; (80051c8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800515e:	4293      	cmp	r3, r2
 8005160:	d00e      	beq.n	8005180 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	4a15      	ldr	r2, [pc, #84]	; (80051bc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005168:	4293      	cmp	r3, r2
 800516a:	d009      	beq.n	8005180 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	4a16      	ldr	r2, [pc, #88]	; (80051cc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005172:	4293      	cmp	r3, r2
 8005174:	d004      	beq.n	8005180 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	4a15      	ldr	r2, [pc, #84]	; (80051d0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800517c:	4293      	cmp	r3, r2
 800517e:	d10c      	bne.n	800519a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005180:	68bb      	ldr	r3, [r7, #8]
 8005182:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005186:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005188:	683b      	ldr	r3, [r7, #0]
 800518a:	689b      	ldr	r3, [r3, #8]
 800518c:	68ba      	ldr	r2, [r7, #8]
 800518e:	4313      	orrs	r3, r2
 8005190:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	68ba      	ldr	r2, [r7, #8]
 8005198:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	2201      	movs	r2, #1
 800519e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	2200      	movs	r2, #0
 80051a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80051aa:	2300      	movs	r3, #0
}
 80051ac:	4618      	mov	r0, r3
 80051ae:	3714      	adds	r7, #20
 80051b0:	46bd      	mov	sp, r7
 80051b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b6:	4770      	bx	lr
 80051b8:	40010000 	.word	0x40010000
 80051bc:	40010400 	.word	0x40010400
 80051c0:	40000400 	.word	0x40000400
 80051c4:	40000800 	.word	0x40000800
 80051c8:	40000c00 	.word	0x40000c00
 80051cc:	40014000 	.word	0x40014000
 80051d0:	40001800 	.word	0x40001800

080051d4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80051d4:	b480      	push	{r7}
 80051d6:	b083      	sub	sp, #12
 80051d8:	af00      	add	r7, sp, #0
 80051da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80051dc:	bf00      	nop
 80051de:	370c      	adds	r7, #12
 80051e0:	46bd      	mov	sp, r7
 80051e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e6:	4770      	bx	lr

080051e8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80051e8:	b480      	push	{r7}
 80051ea:	b083      	sub	sp, #12
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80051f0:	bf00      	nop
 80051f2:	370c      	adds	r7, #12
 80051f4:	46bd      	mov	sp, r7
 80051f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fa:	4770      	bx	lr

080051fc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80051fc:	b480      	push	{r7}
 80051fe:	b083      	sub	sp, #12
 8005200:	af00      	add	r7, sp, #0
 8005202:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005204:	bf00      	nop
 8005206:	370c      	adds	r7, #12
 8005208:	46bd      	mov	sp, r7
 800520a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520e:	4770      	bx	lr

08005210 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005210:	b580      	push	{r7, lr}
 8005212:	b082      	sub	sp, #8
 8005214:	af00      	add	r7, sp, #0
 8005216:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	2b00      	cmp	r3, #0
 800521c:	d101      	bne.n	8005222 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800521e:	2301      	movs	r3, #1
 8005220:	e040      	b.n	80052a4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005226:	2b00      	cmp	r3, #0
 8005228:	d106      	bne.n	8005238 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	2200      	movs	r2, #0
 800522e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005232:	6878      	ldr	r0, [r7, #4]
 8005234:	f7fc f904 	bl	8001440 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	2224      	movs	r2, #36	; 0x24
 800523c:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	681a      	ldr	r2, [r3, #0]
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	f022 0201 	bic.w	r2, r2, #1
 800524c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800524e:	6878      	ldr	r0, [r7, #4]
 8005250:	f000 f8b0 	bl	80053b4 <UART_SetConfig>
 8005254:	4603      	mov	r3, r0
 8005256:	2b01      	cmp	r3, #1
 8005258:	d101      	bne.n	800525e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800525a:	2301      	movs	r3, #1
 800525c:	e022      	b.n	80052a4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005262:	2b00      	cmp	r3, #0
 8005264:	d002      	beq.n	800526c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005266:	6878      	ldr	r0, [r7, #4]
 8005268:	f000 fb08 	bl	800587c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	685a      	ldr	r2, [r3, #4]
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800527a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	689a      	ldr	r2, [r3, #8]
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800528a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	681a      	ldr	r2, [r3, #0]
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	f042 0201 	orr.w	r2, r2, #1
 800529a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800529c:	6878      	ldr	r0, [r7, #4]
 800529e:	f000 fb8f 	bl	80059c0 <UART_CheckIdleState>
 80052a2:	4603      	mov	r3, r0
}
 80052a4:	4618      	mov	r0, r3
 80052a6:	3708      	adds	r7, #8
 80052a8:	46bd      	mov	sp, r7
 80052aa:	bd80      	pop	{r7, pc}

080052ac <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80052ac:	b580      	push	{r7, lr}
 80052ae:	b08a      	sub	sp, #40	; 0x28
 80052b0:	af02      	add	r7, sp, #8
 80052b2:	60f8      	str	r0, [r7, #12]
 80052b4:	60b9      	str	r1, [r7, #8]
 80052b6:	603b      	str	r3, [r7, #0]
 80052b8:	4613      	mov	r3, r2
 80052ba:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80052c0:	2b20      	cmp	r3, #32
 80052c2:	d171      	bne.n	80053a8 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80052c4:	68bb      	ldr	r3, [r7, #8]
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d002      	beq.n	80052d0 <HAL_UART_Transmit+0x24>
 80052ca:	88fb      	ldrh	r3, [r7, #6]
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d101      	bne.n	80052d4 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80052d0:	2301      	movs	r3, #1
 80052d2:	e06a      	b.n	80053aa <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	2200      	movs	r2, #0
 80052d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	2221      	movs	r2, #33	; 0x21
 80052e0:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80052e2:	f7fc fa77 	bl	80017d4 <HAL_GetTick>
 80052e6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	88fa      	ldrh	r2, [r7, #6]
 80052ec:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	88fa      	ldrh	r2, [r7, #6]
 80052f4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	689b      	ldr	r3, [r3, #8]
 80052fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005300:	d108      	bne.n	8005314 <HAL_UART_Transmit+0x68>
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	691b      	ldr	r3, [r3, #16]
 8005306:	2b00      	cmp	r3, #0
 8005308:	d104      	bne.n	8005314 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800530a:	2300      	movs	r3, #0
 800530c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800530e:	68bb      	ldr	r3, [r7, #8]
 8005310:	61bb      	str	r3, [r7, #24]
 8005312:	e003      	b.n	800531c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8005314:	68bb      	ldr	r3, [r7, #8]
 8005316:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005318:	2300      	movs	r3, #0
 800531a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800531c:	e02c      	b.n	8005378 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800531e:	683b      	ldr	r3, [r7, #0]
 8005320:	9300      	str	r3, [sp, #0]
 8005322:	697b      	ldr	r3, [r7, #20]
 8005324:	2200      	movs	r2, #0
 8005326:	2180      	movs	r1, #128	; 0x80
 8005328:	68f8      	ldr	r0, [r7, #12]
 800532a:	f000 fb80 	bl	8005a2e <UART_WaitOnFlagUntilTimeout>
 800532e:	4603      	mov	r3, r0
 8005330:	2b00      	cmp	r3, #0
 8005332:	d001      	beq.n	8005338 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8005334:	2303      	movs	r3, #3
 8005336:	e038      	b.n	80053aa <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8005338:	69fb      	ldr	r3, [r7, #28]
 800533a:	2b00      	cmp	r3, #0
 800533c:	d10b      	bne.n	8005356 <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800533e:	69bb      	ldr	r3, [r7, #24]
 8005340:	881b      	ldrh	r3, [r3, #0]
 8005342:	461a      	mov	r2, r3
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800534c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800534e:	69bb      	ldr	r3, [r7, #24]
 8005350:	3302      	adds	r3, #2
 8005352:	61bb      	str	r3, [r7, #24]
 8005354:	e007      	b.n	8005366 <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005356:	69fb      	ldr	r3, [r7, #28]
 8005358:	781a      	ldrb	r2, [r3, #0]
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005360:	69fb      	ldr	r3, [r7, #28]
 8005362:	3301      	adds	r3, #1
 8005364:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800536c:	b29b      	uxth	r3, r3
 800536e:	3b01      	subs	r3, #1
 8005370:	b29a      	uxth	r2, r3
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800537e:	b29b      	uxth	r3, r3
 8005380:	2b00      	cmp	r3, #0
 8005382:	d1cc      	bne.n	800531e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005384:	683b      	ldr	r3, [r7, #0]
 8005386:	9300      	str	r3, [sp, #0]
 8005388:	697b      	ldr	r3, [r7, #20]
 800538a:	2200      	movs	r2, #0
 800538c:	2140      	movs	r1, #64	; 0x40
 800538e:	68f8      	ldr	r0, [r7, #12]
 8005390:	f000 fb4d 	bl	8005a2e <UART_WaitOnFlagUntilTimeout>
 8005394:	4603      	mov	r3, r0
 8005396:	2b00      	cmp	r3, #0
 8005398:	d001      	beq.n	800539e <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 800539a:	2303      	movs	r3, #3
 800539c:	e005      	b.n	80053aa <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	2220      	movs	r2, #32
 80053a2:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80053a4:	2300      	movs	r3, #0
 80053a6:	e000      	b.n	80053aa <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80053a8:	2302      	movs	r3, #2
  }
}
 80053aa:	4618      	mov	r0, r3
 80053ac:	3720      	adds	r7, #32
 80053ae:	46bd      	mov	sp, r7
 80053b0:	bd80      	pop	{r7, pc}
	...

080053b4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80053b4:	b580      	push	{r7, lr}
 80053b6:	b088      	sub	sp, #32
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80053bc:	2300      	movs	r3, #0
 80053be:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	689a      	ldr	r2, [r3, #8]
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	691b      	ldr	r3, [r3, #16]
 80053c8:	431a      	orrs	r2, r3
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	695b      	ldr	r3, [r3, #20]
 80053ce:	431a      	orrs	r2, r3
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	69db      	ldr	r3, [r3, #28]
 80053d4:	4313      	orrs	r3, r2
 80053d6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	681a      	ldr	r2, [r3, #0]
 80053de:	4ba6      	ldr	r3, [pc, #664]	; (8005678 <UART_SetConfig+0x2c4>)
 80053e0:	4013      	ands	r3, r2
 80053e2:	687a      	ldr	r2, [r7, #4]
 80053e4:	6812      	ldr	r2, [r2, #0]
 80053e6:	6979      	ldr	r1, [r7, #20]
 80053e8:	430b      	orrs	r3, r1
 80053ea:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	685b      	ldr	r3, [r3, #4]
 80053f2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	68da      	ldr	r2, [r3, #12]
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	430a      	orrs	r2, r1
 8005400:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	699b      	ldr	r3, [r3, #24]
 8005406:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	6a1b      	ldr	r3, [r3, #32]
 800540c:	697a      	ldr	r2, [r7, #20]
 800540e:	4313      	orrs	r3, r2
 8005410:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	689b      	ldr	r3, [r3, #8]
 8005418:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	697a      	ldr	r2, [r7, #20]
 8005422:	430a      	orrs	r2, r1
 8005424:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	4a94      	ldr	r2, [pc, #592]	; (800567c <UART_SetConfig+0x2c8>)
 800542c:	4293      	cmp	r3, r2
 800542e:	d120      	bne.n	8005472 <UART_SetConfig+0xbe>
 8005430:	4b93      	ldr	r3, [pc, #588]	; (8005680 <UART_SetConfig+0x2cc>)
 8005432:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005436:	f003 0303 	and.w	r3, r3, #3
 800543a:	2b03      	cmp	r3, #3
 800543c:	d816      	bhi.n	800546c <UART_SetConfig+0xb8>
 800543e:	a201      	add	r2, pc, #4	; (adr r2, 8005444 <UART_SetConfig+0x90>)
 8005440:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005444:	08005455 	.word	0x08005455
 8005448:	08005461 	.word	0x08005461
 800544c:	0800545b 	.word	0x0800545b
 8005450:	08005467 	.word	0x08005467
 8005454:	2301      	movs	r3, #1
 8005456:	77fb      	strb	r3, [r7, #31]
 8005458:	e150      	b.n	80056fc <UART_SetConfig+0x348>
 800545a:	2302      	movs	r3, #2
 800545c:	77fb      	strb	r3, [r7, #31]
 800545e:	e14d      	b.n	80056fc <UART_SetConfig+0x348>
 8005460:	2304      	movs	r3, #4
 8005462:	77fb      	strb	r3, [r7, #31]
 8005464:	e14a      	b.n	80056fc <UART_SetConfig+0x348>
 8005466:	2308      	movs	r3, #8
 8005468:	77fb      	strb	r3, [r7, #31]
 800546a:	e147      	b.n	80056fc <UART_SetConfig+0x348>
 800546c:	2310      	movs	r3, #16
 800546e:	77fb      	strb	r3, [r7, #31]
 8005470:	e144      	b.n	80056fc <UART_SetConfig+0x348>
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	4a83      	ldr	r2, [pc, #524]	; (8005684 <UART_SetConfig+0x2d0>)
 8005478:	4293      	cmp	r3, r2
 800547a:	d132      	bne.n	80054e2 <UART_SetConfig+0x12e>
 800547c:	4b80      	ldr	r3, [pc, #512]	; (8005680 <UART_SetConfig+0x2cc>)
 800547e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005482:	f003 030c 	and.w	r3, r3, #12
 8005486:	2b0c      	cmp	r3, #12
 8005488:	d828      	bhi.n	80054dc <UART_SetConfig+0x128>
 800548a:	a201      	add	r2, pc, #4	; (adr r2, 8005490 <UART_SetConfig+0xdc>)
 800548c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005490:	080054c5 	.word	0x080054c5
 8005494:	080054dd 	.word	0x080054dd
 8005498:	080054dd 	.word	0x080054dd
 800549c:	080054dd 	.word	0x080054dd
 80054a0:	080054d1 	.word	0x080054d1
 80054a4:	080054dd 	.word	0x080054dd
 80054a8:	080054dd 	.word	0x080054dd
 80054ac:	080054dd 	.word	0x080054dd
 80054b0:	080054cb 	.word	0x080054cb
 80054b4:	080054dd 	.word	0x080054dd
 80054b8:	080054dd 	.word	0x080054dd
 80054bc:	080054dd 	.word	0x080054dd
 80054c0:	080054d7 	.word	0x080054d7
 80054c4:	2300      	movs	r3, #0
 80054c6:	77fb      	strb	r3, [r7, #31]
 80054c8:	e118      	b.n	80056fc <UART_SetConfig+0x348>
 80054ca:	2302      	movs	r3, #2
 80054cc:	77fb      	strb	r3, [r7, #31]
 80054ce:	e115      	b.n	80056fc <UART_SetConfig+0x348>
 80054d0:	2304      	movs	r3, #4
 80054d2:	77fb      	strb	r3, [r7, #31]
 80054d4:	e112      	b.n	80056fc <UART_SetConfig+0x348>
 80054d6:	2308      	movs	r3, #8
 80054d8:	77fb      	strb	r3, [r7, #31]
 80054da:	e10f      	b.n	80056fc <UART_SetConfig+0x348>
 80054dc:	2310      	movs	r3, #16
 80054de:	77fb      	strb	r3, [r7, #31]
 80054e0:	e10c      	b.n	80056fc <UART_SetConfig+0x348>
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	4a68      	ldr	r2, [pc, #416]	; (8005688 <UART_SetConfig+0x2d4>)
 80054e8:	4293      	cmp	r3, r2
 80054ea:	d120      	bne.n	800552e <UART_SetConfig+0x17a>
 80054ec:	4b64      	ldr	r3, [pc, #400]	; (8005680 <UART_SetConfig+0x2cc>)
 80054ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054f2:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80054f6:	2b30      	cmp	r3, #48	; 0x30
 80054f8:	d013      	beq.n	8005522 <UART_SetConfig+0x16e>
 80054fa:	2b30      	cmp	r3, #48	; 0x30
 80054fc:	d814      	bhi.n	8005528 <UART_SetConfig+0x174>
 80054fe:	2b20      	cmp	r3, #32
 8005500:	d009      	beq.n	8005516 <UART_SetConfig+0x162>
 8005502:	2b20      	cmp	r3, #32
 8005504:	d810      	bhi.n	8005528 <UART_SetConfig+0x174>
 8005506:	2b00      	cmp	r3, #0
 8005508:	d002      	beq.n	8005510 <UART_SetConfig+0x15c>
 800550a:	2b10      	cmp	r3, #16
 800550c:	d006      	beq.n	800551c <UART_SetConfig+0x168>
 800550e:	e00b      	b.n	8005528 <UART_SetConfig+0x174>
 8005510:	2300      	movs	r3, #0
 8005512:	77fb      	strb	r3, [r7, #31]
 8005514:	e0f2      	b.n	80056fc <UART_SetConfig+0x348>
 8005516:	2302      	movs	r3, #2
 8005518:	77fb      	strb	r3, [r7, #31]
 800551a:	e0ef      	b.n	80056fc <UART_SetConfig+0x348>
 800551c:	2304      	movs	r3, #4
 800551e:	77fb      	strb	r3, [r7, #31]
 8005520:	e0ec      	b.n	80056fc <UART_SetConfig+0x348>
 8005522:	2308      	movs	r3, #8
 8005524:	77fb      	strb	r3, [r7, #31]
 8005526:	e0e9      	b.n	80056fc <UART_SetConfig+0x348>
 8005528:	2310      	movs	r3, #16
 800552a:	77fb      	strb	r3, [r7, #31]
 800552c:	e0e6      	b.n	80056fc <UART_SetConfig+0x348>
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	4a56      	ldr	r2, [pc, #344]	; (800568c <UART_SetConfig+0x2d8>)
 8005534:	4293      	cmp	r3, r2
 8005536:	d120      	bne.n	800557a <UART_SetConfig+0x1c6>
 8005538:	4b51      	ldr	r3, [pc, #324]	; (8005680 <UART_SetConfig+0x2cc>)
 800553a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800553e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005542:	2bc0      	cmp	r3, #192	; 0xc0
 8005544:	d013      	beq.n	800556e <UART_SetConfig+0x1ba>
 8005546:	2bc0      	cmp	r3, #192	; 0xc0
 8005548:	d814      	bhi.n	8005574 <UART_SetConfig+0x1c0>
 800554a:	2b80      	cmp	r3, #128	; 0x80
 800554c:	d009      	beq.n	8005562 <UART_SetConfig+0x1ae>
 800554e:	2b80      	cmp	r3, #128	; 0x80
 8005550:	d810      	bhi.n	8005574 <UART_SetConfig+0x1c0>
 8005552:	2b00      	cmp	r3, #0
 8005554:	d002      	beq.n	800555c <UART_SetConfig+0x1a8>
 8005556:	2b40      	cmp	r3, #64	; 0x40
 8005558:	d006      	beq.n	8005568 <UART_SetConfig+0x1b4>
 800555a:	e00b      	b.n	8005574 <UART_SetConfig+0x1c0>
 800555c:	2300      	movs	r3, #0
 800555e:	77fb      	strb	r3, [r7, #31]
 8005560:	e0cc      	b.n	80056fc <UART_SetConfig+0x348>
 8005562:	2302      	movs	r3, #2
 8005564:	77fb      	strb	r3, [r7, #31]
 8005566:	e0c9      	b.n	80056fc <UART_SetConfig+0x348>
 8005568:	2304      	movs	r3, #4
 800556a:	77fb      	strb	r3, [r7, #31]
 800556c:	e0c6      	b.n	80056fc <UART_SetConfig+0x348>
 800556e:	2308      	movs	r3, #8
 8005570:	77fb      	strb	r3, [r7, #31]
 8005572:	e0c3      	b.n	80056fc <UART_SetConfig+0x348>
 8005574:	2310      	movs	r3, #16
 8005576:	77fb      	strb	r3, [r7, #31]
 8005578:	e0c0      	b.n	80056fc <UART_SetConfig+0x348>
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	4a44      	ldr	r2, [pc, #272]	; (8005690 <UART_SetConfig+0x2dc>)
 8005580:	4293      	cmp	r3, r2
 8005582:	d125      	bne.n	80055d0 <UART_SetConfig+0x21c>
 8005584:	4b3e      	ldr	r3, [pc, #248]	; (8005680 <UART_SetConfig+0x2cc>)
 8005586:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800558a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800558e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005592:	d017      	beq.n	80055c4 <UART_SetConfig+0x210>
 8005594:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005598:	d817      	bhi.n	80055ca <UART_SetConfig+0x216>
 800559a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800559e:	d00b      	beq.n	80055b8 <UART_SetConfig+0x204>
 80055a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80055a4:	d811      	bhi.n	80055ca <UART_SetConfig+0x216>
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d003      	beq.n	80055b2 <UART_SetConfig+0x1fe>
 80055aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80055ae:	d006      	beq.n	80055be <UART_SetConfig+0x20a>
 80055b0:	e00b      	b.n	80055ca <UART_SetConfig+0x216>
 80055b2:	2300      	movs	r3, #0
 80055b4:	77fb      	strb	r3, [r7, #31]
 80055b6:	e0a1      	b.n	80056fc <UART_SetConfig+0x348>
 80055b8:	2302      	movs	r3, #2
 80055ba:	77fb      	strb	r3, [r7, #31]
 80055bc:	e09e      	b.n	80056fc <UART_SetConfig+0x348>
 80055be:	2304      	movs	r3, #4
 80055c0:	77fb      	strb	r3, [r7, #31]
 80055c2:	e09b      	b.n	80056fc <UART_SetConfig+0x348>
 80055c4:	2308      	movs	r3, #8
 80055c6:	77fb      	strb	r3, [r7, #31]
 80055c8:	e098      	b.n	80056fc <UART_SetConfig+0x348>
 80055ca:	2310      	movs	r3, #16
 80055cc:	77fb      	strb	r3, [r7, #31]
 80055ce:	e095      	b.n	80056fc <UART_SetConfig+0x348>
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	4a2f      	ldr	r2, [pc, #188]	; (8005694 <UART_SetConfig+0x2e0>)
 80055d6:	4293      	cmp	r3, r2
 80055d8:	d125      	bne.n	8005626 <UART_SetConfig+0x272>
 80055da:	4b29      	ldr	r3, [pc, #164]	; (8005680 <UART_SetConfig+0x2cc>)
 80055dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055e0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80055e4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80055e8:	d017      	beq.n	800561a <UART_SetConfig+0x266>
 80055ea:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80055ee:	d817      	bhi.n	8005620 <UART_SetConfig+0x26c>
 80055f0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80055f4:	d00b      	beq.n	800560e <UART_SetConfig+0x25a>
 80055f6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80055fa:	d811      	bhi.n	8005620 <UART_SetConfig+0x26c>
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d003      	beq.n	8005608 <UART_SetConfig+0x254>
 8005600:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005604:	d006      	beq.n	8005614 <UART_SetConfig+0x260>
 8005606:	e00b      	b.n	8005620 <UART_SetConfig+0x26c>
 8005608:	2301      	movs	r3, #1
 800560a:	77fb      	strb	r3, [r7, #31]
 800560c:	e076      	b.n	80056fc <UART_SetConfig+0x348>
 800560e:	2302      	movs	r3, #2
 8005610:	77fb      	strb	r3, [r7, #31]
 8005612:	e073      	b.n	80056fc <UART_SetConfig+0x348>
 8005614:	2304      	movs	r3, #4
 8005616:	77fb      	strb	r3, [r7, #31]
 8005618:	e070      	b.n	80056fc <UART_SetConfig+0x348>
 800561a:	2308      	movs	r3, #8
 800561c:	77fb      	strb	r3, [r7, #31]
 800561e:	e06d      	b.n	80056fc <UART_SetConfig+0x348>
 8005620:	2310      	movs	r3, #16
 8005622:	77fb      	strb	r3, [r7, #31]
 8005624:	e06a      	b.n	80056fc <UART_SetConfig+0x348>
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	4a1b      	ldr	r2, [pc, #108]	; (8005698 <UART_SetConfig+0x2e4>)
 800562c:	4293      	cmp	r3, r2
 800562e:	d138      	bne.n	80056a2 <UART_SetConfig+0x2ee>
 8005630:	4b13      	ldr	r3, [pc, #76]	; (8005680 <UART_SetConfig+0x2cc>)
 8005632:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005636:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800563a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800563e:	d017      	beq.n	8005670 <UART_SetConfig+0x2bc>
 8005640:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005644:	d82a      	bhi.n	800569c <UART_SetConfig+0x2e8>
 8005646:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800564a:	d00b      	beq.n	8005664 <UART_SetConfig+0x2b0>
 800564c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005650:	d824      	bhi.n	800569c <UART_SetConfig+0x2e8>
 8005652:	2b00      	cmp	r3, #0
 8005654:	d003      	beq.n	800565e <UART_SetConfig+0x2aa>
 8005656:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800565a:	d006      	beq.n	800566a <UART_SetConfig+0x2b6>
 800565c:	e01e      	b.n	800569c <UART_SetConfig+0x2e8>
 800565e:	2300      	movs	r3, #0
 8005660:	77fb      	strb	r3, [r7, #31]
 8005662:	e04b      	b.n	80056fc <UART_SetConfig+0x348>
 8005664:	2302      	movs	r3, #2
 8005666:	77fb      	strb	r3, [r7, #31]
 8005668:	e048      	b.n	80056fc <UART_SetConfig+0x348>
 800566a:	2304      	movs	r3, #4
 800566c:	77fb      	strb	r3, [r7, #31]
 800566e:	e045      	b.n	80056fc <UART_SetConfig+0x348>
 8005670:	2308      	movs	r3, #8
 8005672:	77fb      	strb	r3, [r7, #31]
 8005674:	e042      	b.n	80056fc <UART_SetConfig+0x348>
 8005676:	bf00      	nop
 8005678:	efff69f3 	.word	0xefff69f3
 800567c:	40011000 	.word	0x40011000
 8005680:	40023800 	.word	0x40023800
 8005684:	40004400 	.word	0x40004400
 8005688:	40004800 	.word	0x40004800
 800568c:	40004c00 	.word	0x40004c00
 8005690:	40005000 	.word	0x40005000
 8005694:	40011400 	.word	0x40011400
 8005698:	40007800 	.word	0x40007800
 800569c:	2310      	movs	r3, #16
 800569e:	77fb      	strb	r3, [r7, #31]
 80056a0:	e02c      	b.n	80056fc <UART_SetConfig+0x348>
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	4a72      	ldr	r2, [pc, #456]	; (8005870 <UART_SetConfig+0x4bc>)
 80056a8:	4293      	cmp	r3, r2
 80056aa:	d125      	bne.n	80056f8 <UART_SetConfig+0x344>
 80056ac:	4b71      	ldr	r3, [pc, #452]	; (8005874 <UART_SetConfig+0x4c0>)
 80056ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056b2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80056b6:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80056ba:	d017      	beq.n	80056ec <UART_SetConfig+0x338>
 80056bc:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80056c0:	d817      	bhi.n	80056f2 <UART_SetConfig+0x33e>
 80056c2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80056c6:	d00b      	beq.n	80056e0 <UART_SetConfig+0x32c>
 80056c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80056cc:	d811      	bhi.n	80056f2 <UART_SetConfig+0x33e>
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d003      	beq.n	80056da <UART_SetConfig+0x326>
 80056d2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80056d6:	d006      	beq.n	80056e6 <UART_SetConfig+0x332>
 80056d8:	e00b      	b.n	80056f2 <UART_SetConfig+0x33e>
 80056da:	2300      	movs	r3, #0
 80056dc:	77fb      	strb	r3, [r7, #31]
 80056de:	e00d      	b.n	80056fc <UART_SetConfig+0x348>
 80056e0:	2302      	movs	r3, #2
 80056e2:	77fb      	strb	r3, [r7, #31]
 80056e4:	e00a      	b.n	80056fc <UART_SetConfig+0x348>
 80056e6:	2304      	movs	r3, #4
 80056e8:	77fb      	strb	r3, [r7, #31]
 80056ea:	e007      	b.n	80056fc <UART_SetConfig+0x348>
 80056ec:	2308      	movs	r3, #8
 80056ee:	77fb      	strb	r3, [r7, #31]
 80056f0:	e004      	b.n	80056fc <UART_SetConfig+0x348>
 80056f2:	2310      	movs	r3, #16
 80056f4:	77fb      	strb	r3, [r7, #31]
 80056f6:	e001      	b.n	80056fc <UART_SetConfig+0x348>
 80056f8:	2310      	movs	r3, #16
 80056fa:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	69db      	ldr	r3, [r3, #28]
 8005700:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005704:	d15b      	bne.n	80057be <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8005706:	7ffb      	ldrb	r3, [r7, #31]
 8005708:	2b08      	cmp	r3, #8
 800570a:	d828      	bhi.n	800575e <UART_SetConfig+0x3aa>
 800570c:	a201      	add	r2, pc, #4	; (adr r2, 8005714 <UART_SetConfig+0x360>)
 800570e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005712:	bf00      	nop
 8005714:	08005739 	.word	0x08005739
 8005718:	08005741 	.word	0x08005741
 800571c:	08005749 	.word	0x08005749
 8005720:	0800575f 	.word	0x0800575f
 8005724:	0800574f 	.word	0x0800574f
 8005728:	0800575f 	.word	0x0800575f
 800572c:	0800575f 	.word	0x0800575f
 8005730:	0800575f 	.word	0x0800575f
 8005734:	08005757 	.word	0x08005757
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005738:	f7fd fd84 	bl	8003244 <HAL_RCC_GetPCLK1Freq>
 800573c:	61b8      	str	r0, [r7, #24]
        break;
 800573e:	e013      	b.n	8005768 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005740:	f7fd fd94 	bl	800326c <HAL_RCC_GetPCLK2Freq>
 8005744:	61b8      	str	r0, [r7, #24]
        break;
 8005746:	e00f      	b.n	8005768 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005748:	4b4b      	ldr	r3, [pc, #300]	; (8005878 <UART_SetConfig+0x4c4>)
 800574a:	61bb      	str	r3, [r7, #24]
        break;
 800574c:	e00c      	b.n	8005768 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800574e:	f7fd fca7 	bl	80030a0 <HAL_RCC_GetSysClockFreq>
 8005752:	61b8      	str	r0, [r7, #24]
        break;
 8005754:	e008      	b.n	8005768 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005756:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800575a:	61bb      	str	r3, [r7, #24]
        break;
 800575c:	e004      	b.n	8005768 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800575e:	2300      	movs	r3, #0
 8005760:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005762:	2301      	movs	r3, #1
 8005764:	77bb      	strb	r3, [r7, #30]
        break;
 8005766:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005768:	69bb      	ldr	r3, [r7, #24]
 800576a:	2b00      	cmp	r3, #0
 800576c:	d074      	beq.n	8005858 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800576e:	69bb      	ldr	r3, [r7, #24]
 8005770:	005a      	lsls	r2, r3, #1
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	685b      	ldr	r3, [r3, #4]
 8005776:	085b      	lsrs	r3, r3, #1
 8005778:	441a      	add	r2, r3
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	685b      	ldr	r3, [r3, #4]
 800577e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005782:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005784:	693b      	ldr	r3, [r7, #16]
 8005786:	2b0f      	cmp	r3, #15
 8005788:	d916      	bls.n	80057b8 <UART_SetConfig+0x404>
 800578a:	693b      	ldr	r3, [r7, #16]
 800578c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005790:	d212      	bcs.n	80057b8 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005792:	693b      	ldr	r3, [r7, #16]
 8005794:	b29b      	uxth	r3, r3
 8005796:	f023 030f 	bic.w	r3, r3, #15
 800579a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800579c:	693b      	ldr	r3, [r7, #16]
 800579e:	085b      	lsrs	r3, r3, #1
 80057a0:	b29b      	uxth	r3, r3
 80057a2:	f003 0307 	and.w	r3, r3, #7
 80057a6:	b29a      	uxth	r2, r3
 80057a8:	89fb      	ldrh	r3, [r7, #14]
 80057aa:	4313      	orrs	r3, r2
 80057ac:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	89fa      	ldrh	r2, [r7, #14]
 80057b4:	60da      	str	r2, [r3, #12]
 80057b6:	e04f      	b.n	8005858 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80057b8:	2301      	movs	r3, #1
 80057ba:	77bb      	strb	r3, [r7, #30]
 80057bc:	e04c      	b.n	8005858 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80057be:	7ffb      	ldrb	r3, [r7, #31]
 80057c0:	2b08      	cmp	r3, #8
 80057c2:	d828      	bhi.n	8005816 <UART_SetConfig+0x462>
 80057c4:	a201      	add	r2, pc, #4	; (adr r2, 80057cc <UART_SetConfig+0x418>)
 80057c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057ca:	bf00      	nop
 80057cc:	080057f1 	.word	0x080057f1
 80057d0:	080057f9 	.word	0x080057f9
 80057d4:	08005801 	.word	0x08005801
 80057d8:	08005817 	.word	0x08005817
 80057dc:	08005807 	.word	0x08005807
 80057e0:	08005817 	.word	0x08005817
 80057e4:	08005817 	.word	0x08005817
 80057e8:	08005817 	.word	0x08005817
 80057ec:	0800580f 	.word	0x0800580f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80057f0:	f7fd fd28 	bl	8003244 <HAL_RCC_GetPCLK1Freq>
 80057f4:	61b8      	str	r0, [r7, #24]
        break;
 80057f6:	e013      	b.n	8005820 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80057f8:	f7fd fd38 	bl	800326c <HAL_RCC_GetPCLK2Freq>
 80057fc:	61b8      	str	r0, [r7, #24]
        break;
 80057fe:	e00f      	b.n	8005820 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005800:	4b1d      	ldr	r3, [pc, #116]	; (8005878 <UART_SetConfig+0x4c4>)
 8005802:	61bb      	str	r3, [r7, #24]
        break;
 8005804:	e00c      	b.n	8005820 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005806:	f7fd fc4b 	bl	80030a0 <HAL_RCC_GetSysClockFreq>
 800580a:	61b8      	str	r0, [r7, #24]
        break;
 800580c:	e008      	b.n	8005820 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800580e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005812:	61bb      	str	r3, [r7, #24]
        break;
 8005814:	e004      	b.n	8005820 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8005816:	2300      	movs	r3, #0
 8005818:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800581a:	2301      	movs	r3, #1
 800581c:	77bb      	strb	r3, [r7, #30]
        break;
 800581e:	bf00      	nop
    }

    if (pclk != 0U)
 8005820:	69bb      	ldr	r3, [r7, #24]
 8005822:	2b00      	cmp	r3, #0
 8005824:	d018      	beq.n	8005858 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	685b      	ldr	r3, [r3, #4]
 800582a:	085a      	lsrs	r2, r3, #1
 800582c:	69bb      	ldr	r3, [r7, #24]
 800582e:	441a      	add	r2, r3
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	685b      	ldr	r3, [r3, #4]
 8005834:	fbb2 f3f3 	udiv	r3, r2, r3
 8005838:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800583a:	693b      	ldr	r3, [r7, #16]
 800583c:	2b0f      	cmp	r3, #15
 800583e:	d909      	bls.n	8005854 <UART_SetConfig+0x4a0>
 8005840:	693b      	ldr	r3, [r7, #16]
 8005842:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005846:	d205      	bcs.n	8005854 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005848:	693b      	ldr	r3, [r7, #16]
 800584a:	b29a      	uxth	r2, r3
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	60da      	str	r2, [r3, #12]
 8005852:	e001      	b.n	8005858 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8005854:	2301      	movs	r3, #1
 8005856:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	2200      	movs	r2, #0
 800585c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	2200      	movs	r2, #0
 8005862:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8005864:	7fbb      	ldrb	r3, [r7, #30]
}
 8005866:	4618      	mov	r0, r3
 8005868:	3720      	adds	r7, #32
 800586a:	46bd      	mov	sp, r7
 800586c:	bd80      	pop	{r7, pc}
 800586e:	bf00      	nop
 8005870:	40007c00 	.word	0x40007c00
 8005874:	40023800 	.word	0x40023800
 8005878:	00f42400 	.word	0x00f42400

0800587c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800587c:	b480      	push	{r7}
 800587e:	b083      	sub	sp, #12
 8005880:	af00      	add	r7, sp, #0
 8005882:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005888:	f003 0301 	and.w	r3, r3, #1
 800588c:	2b00      	cmp	r3, #0
 800588e:	d00a      	beq.n	80058a6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	685b      	ldr	r3, [r3, #4]
 8005896:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	430a      	orrs	r2, r1
 80058a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058aa:	f003 0302 	and.w	r3, r3, #2
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d00a      	beq.n	80058c8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	685b      	ldr	r3, [r3, #4]
 80058b8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	430a      	orrs	r2, r1
 80058c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058cc:	f003 0304 	and.w	r3, r3, #4
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d00a      	beq.n	80058ea <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	685b      	ldr	r3, [r3, #4]
 80058da:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	430a      	orrs	r2, r1
 80058e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058ee:	f003 0308 	and.w	r3, r3, #8
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d00a      	beq.n	800590c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	685b      	ldr	r3, [r3, #4]
 80058fc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	430a      	orrs	r2, r1
 800590a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005910:	f003 0310 	and.w	r3, r3, #16
 8005914:	2b00      	cmp	r3, #0
 8005916:	d00a      	beq.n	800592e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	689b      	ldr	r3, [r3, #8]
 800591e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	430a      	orrs	r2, r1
 800592c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005932:	f003 0320 	and.w	r3, r3, #32
 8005936:	2b00      	cmp	r3, #0
 8005938:	d00a      	beq.n	8005950 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	689b      	ldr	r3, [r3, #8]
 8005940:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	430a      	orrs	r2, r1
 800594e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005954:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005958:	2b00      	cmp	r3, #0
 800595a:	d01a      	beq.n	8005992 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	685b      	ldr	r3, [r3, #4]
 8005962:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	430a      	orrs	r2, r1
 8005970:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005976:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800597a:	d10a      	bne.n	8005992 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	685b      	ldr	r3, [r3, #4]
 8005982:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	430a      	orrs	r2, r1
 8005990:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005996:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800599a:	2b00      	cmp	r3, #0
 800599c:	d00a      	beq.n	80059b4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	685b      	ldr	r3, [r3, #4]
 80059a4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	430a      	orrs	r2, r1
 80059b2:	605a      	str	r2, [r3, #4]
  }
}
 80059b4:	bf00      	nop
 80059b6:	370c      	adds	r7, #12
 80059b8:	46bd      	mov	sp, r7
 80059ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059be:	4770      	bx	lr

080059c0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80059c0:	b580      	push	{r7, lr}
 80059c2:	b086      	sub	sp, #24
 80059c4:	af02      	add	r7, sp, #8
 80059c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	2200      	movs	r2, #0
 80059cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80059d0:	f7fb ff00 	bl	80017d4 <HAL_GetTick>
 80059d4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	f003 0308 	and.w	r3, r3, #8
 80059e0:	2b08      	cmp	r3, #8
 80059e2:	d10e      	bne.n	8005a02 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80059e4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80059e8:	9300      	str	r3, [sp, #0]
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	2200      	movs	r2, #0
 80059ee:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80059f2:	6878      	ldr	r0, [r7, #4]
 80059f4:	f000 f81b 	bl	8005a2e <UART_WaitOnFlagUntilTimeout>
 80059f8:	4603      	mov	r3, r0
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d001      	beq.n	8005a02 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80059fe:	2303      	movs	r3, #3
 8005a00:	e011      	b.n	8005a26 <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	2220      	movs	r2, #32
 8005a06:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	2220      	movs	r2, #32
 8005a0c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	2200      	movs	r2, #0
 8005a14:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	2200      	movs	r2, #0
 8005a1a:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	2200      	movs	r2, #0
 8005a20:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8005a24:	2300      	movs	r3, #0
}
 8005a26:	4618      	mov	r0, r3
 8005a28:	3710      	adds	r7, #16
 8005a2a:	46bd      	mov	sp, r7
 8005a2c:	bd80      	pop	{r7, pc}

08005a2e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005a2e:	b580      	push	{r7, lr}
 8005a30:	b09c      	sub	sp, #112	; 0x70
 8005a32:	af00      	add	r7, sp, #0
 8005a34:	60f8      	str	r0, [r7, #12]
 8005a36:	60b9      	str	r1, [r7, #8]
 8005a38:	603b      	str	r3, [r7, #0]
 8005a3a:	4613      	mov	r3, r2
 8005a3c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005a3e:	e0a7      	b.n	8005b90 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005a40:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005a42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a46:	f000 80a3 	beq.w	8005b90 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a4a:	f7fb fec3 	bl	80017d4 <HAL_GetTick>
 8005a4e:	4602      	mov	r2, r0
 8005a50:	683b      	ldr	r3, [r7, #0]
 8005a52:	1ad3      	subs	r3, r2, r3
 8005a54:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005a56:	429a      	cmp	r2, r3
 8005a58:	d302      	bcc.n	8005a60 <UART_WaitOnFlagUntilTimeout+0x32>
 8005a5a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d13f      	bne.n	8005ae0 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a66:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005a68:	e853 3f00 	ldrex	r3, [r3]
 8005a6c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005a6e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a70:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005a74:	667b      	str	r3, [r7, #100]	; 0x64
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	461a      	mov	r2, r3
 8005a7c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005a7e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005a80:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a82:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005a84:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005a86:	e841 2300 	strex	r3, r2, [r1]
 8005a8a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005a8c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d1e6      	bne.n	8005a60 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	3308      	adds	r3, #8
 8005a98:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a9c:	e853 3f00 	ldrex	r3, [r3]
 8005aa0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005aa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005aa4:	f023 0301 	bic.w	r3, r3, #1
 8005aa8:	663b      	str	r3, [r7, #96]	; 0x60
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	3308      	adds	r3, #8
 8005ab0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005ab2:	64ba      	str	r2, [r7, #72]	; 0x48
 8005ab4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ab6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005ab8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005aba:	e841 2300 	strex	r3, r2, [r1]
 8005abe:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005ac0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d1e5      	bne.n	8005a92 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	2220      	movs	r2, #32
 8005aca:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	2220      	movs	r2, #32
 8005ad0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	2200      	movs	r2, #0
 8005ad8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8005adc:	2303      	movs	r3, #3
 8005ade:	e068      	b.n	8005bb2 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	f003 0304 	and.w	r3, r3, #4
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d050      	beq.n	8005b90 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	69db      	ldr	r3, [r3, #28]
 8005af4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005af8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005afc:	d148      	bne.n	8005b90 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005b06:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b10:	e853 3f00 	ldrex	r3, [r3]
 8005b14:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b18:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005b1c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	461a      	mov	r2, r3
 8005b24:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b26:	637b      	str	r3, [r7, #52]	; 0x34
 8005b28:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b2a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005b2c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005b2e:	e841 2300 	strex	r3, r2, [r1]
 8005b32:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005b34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d1e6      	bne.n	8005b08 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	3308      	adds	r3, #8
 8005b40:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b42:	697b      	ldr	r3, [r7, #20]
 8005b44:	e853 3f00 	ldrex	r3, [r3]
 8005b48:	613b      	str	r3, [r7, #16]
   return(result);
 8005b4a:	693b      	ldr	r3, [r7, #16]
 8005b4c:	f023 0301 	bic.w	r3, r3, #1
 8005b50:	66bb      	str	r3, [r7, #104]	; 0x68
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	3308      	adds	r3, #8
 8005b58:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005b5a:	623a      	str	r2, [r7, #32]
 8005b5c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b5e:	69f9      	ldr	r1, [r7, #28]
 8005b60:	6a3a      	ldr	r2, [r7, #32]
 8005b62:	e841 2300 	strex	r3, r2, [r1]
 8005b66:	61bb      	str	r3, [r7, #24]
   return(result);
 8005b68:	69bb      	ldr	r3, [r7, #24]
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d1e5      	bne.n	8005b3a <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	2220      	movs	r2, #32
 8005b72:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	2220      	movs	r2, #32
 8005b78:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	2220      	movs	r2, #32
 8005b80:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	2200      	movs	r2, #0
 8005b88:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8005b8c:	2303      	movs	r3, #3
 8005b8e:	e010      	b.n	8005bb2 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	69da      	ldr	r2, [r3, #28]
 8005b96:	68bb      	ldr	r3, [r7, #8]
 8005b98:	4013      	ands	r3, r2
 8005b9a:	68ba      	ldr	r2, [r7, #8]
 8005b9c:	429a      	cmp	r2, r3
 8005b9e:	bf0c      	ite	eq
 8005ba0:	2301      	moveq	r3, #1
 8005ba2:	2300      	movne	r3, #0
 8005ba4:	b2db      	uxtb	r3, r3
 8005ba6:	461a      	mov	r2, r3
 8005ba8:	79fb      	ldrb	r3, [r7, #7]
 8005baa:	429a      	cmp	r2, r3
 8005bac:	f43f af48 	beq.w	8005a40 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005bb0:	2300      	movs	r3, #0
}
 8005bb2:	4618      	mov	r0, r3
 8005bb4:	3770      	adds	r7, #112	; 0x70
 8005bb6:	46bd      	mov	sp, r7
 8005bb8:	bd80      	pop	{r7, pc}
	...

08005bbc <__errno>:
 8005bbc:	4b01      	ldr	r3, [pc, #4]	; (8005bc4 <__errno+0x8>)
 8005bbe:	6818      	ldr	r0, [r3, #0]
 8005bc0:	4770      	bx	lr
 8005bc2:	bf00      	nop
 8005bc4:	20004eac 	.word	0x20004eac

08005bc8 <__libc_init_array>:
 8005bc8:	b570      	push	{r4, r5, r6, lr}
 8005bca:	4d0d      	ldr	r5, [pc, #52]	; (8005c00 <__libc_init_array+0x38>)
 8005bcc:	4c0d      	ldr	r4, [pc, #52]	; (8005c04 <__libc_init_array+0x3c>)
 8005bce:	1b64      	subs	r4, r4, r5
 8005bd0:	10a4      	asrs	r4, r4, #2
 8005bd2:	2600      	movs	r6, #0
 8005bd4:	42a6      	cmp	r6, r4
 8005bd6:	d109      	bne.n	8005bec <__libc_init_array+0x24>
 8005bd8:	4d0b      	ldr	r5, [pc, #44]	; (8005c08 <__libc_init_array+0x40>)
 8005bda:	4c0c      	ldr	r4, [pc, #48]	; (8005c0c <__libc_init_array+0x44>)
 8005bdc:	f001 f824 	bl	8006c28 <_init>
 8005be0:	1b64      	subs	r4, r4, r5
 8005be2:	10a4      	asrs	r4, r4, #2
 8005be4:	2600      	movs	r6, #0
 8005be6:	42a6      	cmp	r6, r4
 8005be8:	d105      	bne.n	8005bf6 <__libc_init_array+0x2e>
 8005bea:	bd70      	pop	{r4, r5, r6, pc}
 8005bec:	f855 3b04 	ldr.w	r3, [r5], #4
 8005bf0:	4798      	blx	r3
 8005bf2:	3601      	adds	r6, #1
 8005bf4:	e7ee      	b.n	8005bd4 <__libc_init_array+0xc>
 8005bf6:	f855 3b04 	ldr.w	r3, [r5], #4
 8005bfa:	4798      	blx	r3
 8005bfc:	3601      	adds	r6, #1
 8005bfe:	e7f2      	b.n	8005be6 <__libc_init_array+0x1e>
 8005c00:	08007040 	.word	0x08007040
 8005c04:	08007040 	.word	0x08007040
 8005c08:	08007040 	.word	0x08007040
 8005c0c:	08007044 	.word	0x08007044

08005c10 <memset>:
 8005c10:	4402      	add	r2, r0
 8005c12:	4603      	mov	r3, r0
 8005c14:	4293      	cmp	r3, r2
 8005c16:	d100      	bne.n	8005c1a <memset+0xa>
 8005c18:	4770      	bx	lr
 8005c1a:	f803 1b01 	strb.w	r1, [r3], #1
 8005c1e:	e7f9      	b.n	8005c14 <memset+0x4>

08005c20 <iprintf>:
 8005c20:	b40f      	push	{r0, r1, r2, r3}
 8005c22:	4b0a      	ldr	r3, [pc, #40]	; (8005c4c <iprintf+0x2c>)
 8005c24:	b513      	push	{r0, r1, r4, lr}
 8005c26:	681c      	ldr	r4, [r3, #0]
 8005c28:	b124      	cbz	r4, 8005c34 <iprintf+0x14>
 8005c2a:	69a3      	ldr	r3, [r4, #24]
 8005c2c:	b913      	cbnz	r3, 8005c34 <iprintf+0x14>
 8005c2e:	4620      	mov	r0, r4
 8005c30:	f000 fa5e 	bl	80060f0 <__sinit>
 8005c34:	ab05      	add	r3, sp, #20
 8005c36:	9a04      	ldr	r2, [sp, #16]
 8005c38:	68a1      	ldr	r1, [r4, #8]
 8005c3a:	9301      	str	r3, [sp, #4]
 8005c3c:	4620      	mov	r0, r4
 8005c3e:	f000 fc67 	bl	8006510 <_vfiprintf_r>
 8005c42:	b002      	add	sp, #8
 8005c44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005c48:	b004      	add	sp, #16
 8005c4a:	4770      	bx	lr
 8005c4c:	20004eac 	.word	0x20004eac

08005c50 <_puts_r>:
 8005c50:	b570      	push	{r4, r5, r6, lr}
 8005c52:	460e      	mov	r6, r1
 8005c54:	4605      	mov	r5, r0
 8005c56:	b118      	cbz	r0, 8005c60 <_puts_r+0x10>
 8005c58:	6983      	ldr	r3, [r0, #24]
 8005c5a:	b90b      	cbnz	r3, 8005c60 <_puts_r+0x10>
 8005c5c:	f000 fa48 	bl	80060f0 <__sinit>
 8005c60:	69ab      	ldr	r3, [r5, #24]
 8005c62:	68ac      	ldr	r4, [r5, #8]
 8005c64:	b913      	cbnz	r3, 8005c6c <_puts_r+0x1c>
 8005c66:	4628      	mov	r0, r5
 8005c68:	f000 fa42 	bl	80060f0 <__sinit>
 8005c6c:	4b2c      	ldr	r3, [pc, #176]	; (8005d20 <_puts_r+0xd0>)
 8005c6e:	429c      	cmp	r4, r3
 8005c70:	d120      	bne.n	8005cb4 <_puts_r+0x64>
 8005c72:	686c      	ldr	r4, [r5, #4]
 8005c74:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005c76:	07db      	lsls	r3, r3, #31
 8005c78:	d405      	bmi.n	8005c86 <_puts_r+0x36>
 8005c7a:	89a3      	ldrh	r3, [r4, #12]
 8005c7c:	0598      	lsls	r0, r3, #22
 8005c7e:	d402      	bmi.n	8005c86 <_puts_r+0x36>
 8005c80:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005c82:	f000 fad3 	bl	800622c <__retarget_lock_acquire_recursive>
 8005c86:	89a3      	ldrh	r3, [r4, #12]
 8005c88:	0719      	lsls	r1, r3, #28
 8005c8a:	d51d      	bpl.n	8005cc8 <_puts_r+0x78>
 8005c8c:	6923      	ldr	r3, [r4, #16]
 8005c8e:	b1db      	cbz	r3, 8005cc8 <_puts_r+0x78>
 8005c90:	3e01      	subs	r6, #1
 8005c92:	68a3      	ldr	r3, [r4, #8]
 8005c94:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005c98:	3b01      	subs	r3, #1
 8005c9a:	60a3      	str	r3, [r4, #8]
 8005c9c:	bb39      	cbnz	r1, 8005cee <_puts_r+0x9e>
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	da38      	bge.n	8005d14 <_puts_r+0xc4>
 8005ca2:	4622      	mov	r2, r4
 8005ca4:	210a      	movs	r1, #10
 8005ca6:	4628      	mov	r0, r5
 8005ca8:	f000 f848 	bl	8005d3c <__swbuf_r>
 8005cac:	3001      	adds	r0, #1
 8005cae:	d011      	beq.n	8005cd4 <_puts_r+0x84>
 8005cb0:	250a      	movs	r5, #10
 8005cb2:	e011      	b.n	8005cd8 <_puts_r+0x88>
 8005cb4:	4b1b      	ldr	r3, [pc, #108]	; (8005d24 <_puts_r+0xd4>)
 8005cb6:	429c      	cmp	r4, r3
 8005cb8:	d101      	bne.n	8005cbe <_puts_r+0x6e>
 8005cba:	68ac      	ldr	r4, [r5, #8]
 8005cbc:	e7da      	b.n	8005c74 <_puts_r+0x24>
 8005cbe:	4b1a      	ldr	r3, [pc, #104]	; (8005d28 <_puts_r+0xd8>)
 8005cc0:	429c      	cmp	r4, r3
 8005cc2:	bf08      	it	eq
 8005cc4:	68ec      	ldreq	r4, [r5, #12]
 8005cc6:	e7d5      	b.n	8005c74 <_puts_r+0x24>
 8005cc8:	4621      	mov	r1, r4
 8005cca:	4628      	mov	r0, r5
 8005ccc:	f000 f888 	bl	8005de0 <__swsetup_r>
 8005cd0:	2800      	cmp	r0, #0
 8005cd2:	d0dd      	beq.n	8005c90 <_puts_r+0x40>
 8005cd4:	f04f 35ff 	mov.w	r5, #4294967295
 8005cd8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005cda:	07da      	lsls	r2, r3, #31
 8005cdc:	d405      	bmi.n	8005cea <_puts_r+0x9a>
 8005cde:	89a3      	ldrh	r3, [r4, #12]
 8005ce0:	059b      	lsls	r3, r3, #22
 8005ce2:	d402      	bmi.n	8005cea <_puts_r+0x9a>
 8005ce4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005ce6:	f000 faa2 	bl	800622e <__retarget_lock_release_recursive>
 8005cea:	4628      	mov	r0, r5
 8005cec:	bd70      	pop	{r4, r5, r6, pc}
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	da04      	bge.n	8005cfc <_puts_r+0xac>
 8005cf2:	69a2      	ldr	r2, [r4, #24]
 8005cf4:	429a      	cmp	r2, r3
 8005cf6:	dc06      	bgt.n	8005d06 <_puts_r+0xb6>
 8005cf8:	290a      	cmp	r1, #10
 8005cfa:	d004      	beq.n	8005d06 <_puts_r+0xb6>
 8005cfc:	6823      	ldr	r3, [r4, #0]
 8005cfe:	1c5a      	adds	r2, r3, #1
 8005d00:	6022      	str	r2, [r4, #0]
 8005d02:	7019      	strb	r1, [r3, #0]
 8005d04:	e7c5      	b.n	8005c92 <_puts_r+0x42>
 8005d06:	4622      	mov	r2, r4
 8005d08:	4628      	mov	r0, r5
 8005d0a:	f000 f817 	bl	8005d3c <__swbuf_r>
 8005d0e:	3001      	adds	r0, #1
 8005d10:	d1bf      	bne.n	8005c92 <_puts_r+0x42>
 8005d12:	e7df      	b.n	8005cd4 <_puts_r+0x84>
 8005d14:	6823      	ldr	r3, [r4, #0]
 8005d16:	250a      	movs	r5, #10
 8005d18:	1c5a      	adds	r2, r3, #1
 8005d1a:	6022      	str	r2, [r4, #0]
 8005d1c:	701d      	strb	r5, [r3, #0]
 8005d1e:	e7db      	b.n	8005cd8 <_puts_r+0x88>
 8005d20:	08006fc4 	.word	0x08006fc4
 8005d24:	08006fe4 	.word	0x08006fe4
 8005d28:	08006fa4 	.word	0x08006fa4

08005d2c <puts>:
 8005d2c:	4b02      	ldr	r3, [pc, #8]	; (8005d38 <puts+0xc>)
 8005d2e:	4601      	mov	r1, r0
 8005d30:	6818      	ldr	r0, [r3, #0]
 8005d32:	f7ff bf8d 	b.w	8005c50 <_puts_r>
 8005d36:	bf00      	nop
 8005d38:	20004eac 	.word	0x20004eac

08005d3c <__swbuf_r>:
 8005d3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d3e:	460e      	mov	r6, r1
 8005d40:	4614      	mov	r4, r2
 8005d42:	4605      	mov	r5, r0
 8005d44:	b118      	cbz	r0, 8005d4e <__swbuf_r+0x12>
 8005d46:	6983      	ldr	r3, [r0, #24]
 8005d48:	b90b      	cbnz	r3, 8005d4e <__swbuf_r+0x12>
 8005d4a:	f000 f9d1 	bl	80060f0 <__sinit>
 8005d4e:	4b21      	ldr	r3, [pc, #132]	; (8005dd4 <__swbuf_r+0x98>)
 8005d50:	429c      	cmp	r4, r3
 8005d52:	d12b      	bne.n	8005dac <__swbuf_r+0x70>
 8005d54:	686c      	ldr	r4, [r5, #4]
 8005d56:	69a3      	ldr	r3, [r4, #24]
 8005d58:	60a3      	str	r3, [r4, #8]
 8005d5a:	89a3      	ldrh	r3, [r4, #12]
 8005d5c:	071a      	lsls	r2, r3, #28
 8005d5e:	d52f      	bpl.n	8005dc0 <__swbuf_r+0x84>
 8005d60:	6923      	ldr	r3, [r4, #16]
 8005d62:	b36b      	cbz	r3, 8005dc0 <__swbuf_r+0x84>
 8005d64:	6923      	ldr	r3, [r4, #16]
 8005d66:	6820      	ldr	r0, [r4, #0]
 8005d68:	1ac0      	subs	r0, r0, r3
 8005d6a:	6963      	ldr	r3, [r4, #20]
 8005d6c:	b2f6      	uxtb	r6, r6
 8005d6e:	4283      	cmp	r3, r0
 8005d70:	4637      	mov	r7, r6
 8005d72:	dc04      	bgt.n	8005d7e <__swbuf_r+0x42>
 8005d74:	4621      	mov	r1, r4
 8005d76:	4628      	mov	r0, r5
 8005d78:	f000 f926 	bl	8005fc8 <_fflush_r>
 8005d7c:	bb30      	cbnz	r0, 8005dcc <__swbuf_r+0x90>
 8005d7e:	68a3      	ldr	r3, [r4, #8]
 8005d80:	3b01      	subs	r3, #1
 8005d82:	60a3      	str	r3, [r4, #8]
 8005d84:	6823      	ldr	r3, [r4, #0]
 8005d86:	1c5a      	adds	r2, r3, #1
 8005d88:	6022      	str	r2, [r4, #0]
 8005d8a:	701e      	strb	r6, [r3, #0]
 8005d8c:	6963      	ldr	r3, [r4, #20]
 8005d8e:	3001      	adds	r0, #1
 8005d90:	4283      	cmp	r3, r0
 8005d92:	d004      	beq.n	8005d9e <__swbuf_r+0x62>
 8005d94:	89a3      	ldrh	r3, [r4, #12]
 8005d96:	07db      	lsls	r3, r3, #31
 8005d98:	d506      	bpl.n	8005da8 <__swbuf_r+0x6c>
 8005d9a:	2e0a      	cmp	r6, #10
 8005d9c:	d104      	bne.n	8005da8 <__swbuf_r+0x6c>
 8005d9e:	4621      	mov	r1, r4
 8005da0:	4628      	mov	r0, r5
 8005da2:	f000 f911 	bl	8005fc8 <_fflush_r>
 8005da6:	b988      	cbnz	r0, 8005dcc <__swbuf_r+0x90>
 8005da8:	4638      	mov	r0, r7
 8005daa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005dac:	4b0a      	ldr	r3, [pc, #40]	; (8005dd8 <__swbuf_r+0x9c>)
 8005dae:	429c      	cmp	r4, r3
 8005db0:	d101      	bne.n	8005db6 <__swbuf_r+0x7a>
 8005db2:	68ac      	ldr	r4, [r5, #8]
 8005db4:	e7cf      	b.n	8005d56 <__swbuf_r+0x1a>
 8005db6:	4b09      	ldr	r3, [pc, #36]	; (8005ddc <__swbuf_r+0xa0>)
 8005db8:	429c      	cmp	r4, r3
 8005dba:	bf08      	it	eq
 8005dbc:	68ec      	ldreq	r4, [r5, #12]
 8005dbe:	e7ca      	b.n	8005d56 <__swbuf_r+0x1a>
 8005dc0:	4621      	mov	r1, r4
 8005dc2:	4628      	mov	r0, r5
 8005dc4:	f000 f80c 	bl	8005de0 <__swsetup_r>
 8005dc8:	2800      	cmp	r0, #0
 8005dca:	d0cb      	beq.n	8005d64 <__swbuf_r+0x28>
 8005dcc:	f04f 37ff 	mov.w	r7, #4294967295
 8005dd0:	e7ea      	b.n	8005da8 <__swbuf_r+0x6c>
 8005dd2:	bf00      	nop
 8005dd4:	08006fc4 	.word	0x08006fc4
 8005dd8:	08006fe4 	.word	0x08006fe4
 8005ddc:	08006fa4 	.word	0x08006fa4

08005de0 <__swsetup_r>:
 8005de0:	4b32      	ldr	r3, [pc, #200]	; (8005eac <__swsetup_r+0xcc>)
 8005de2:	b570      	push	{r4, r5, r6, lr}
 8005de4:	681d      	ldr	r5, [r3, #0]
 8005de6:	4606      	mov	r6, r0
 8005de8:	460c      	mov	r4, r1
 8005dea:	b125      	cbz	r5, 8005df6 <__swsetup_r+0x16>
 8005dec:	69ab      	ldr	r3, [r5, #24]
 8005dee:	b913      	cbnz	r3, 8005df6 <__swsetup_r+0x16>
 8005df0:	4628      	mov	r0, r5
 8005df2:	f000 f97d 	bl	80060f0 <__sinit>
 8005df6:	4b2e      	ldr	r3, [pc, #184]	; (8005eb0 <__swsetup_r+0xd0>)
 8005df8:	429c      	cmp	r4, r3
 8005dfa:	d10f      	bne.n	8005e1c <__swsetup_r+0x3c>
 8005dfc:	686c      	ldr	r4, [r5, #4]
 8005dfe:	89a3      	ldrh	r3, [r4, #12]
 8005e00:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005e04:	0719      	lsls	r1, r3, #28
 8005e06:	d42c      	bmi.n	8005e62 <__swsetup_r+0x82>
 8005e08:	06dd      	lsls	r5, r3, #27
 8005e0a:	d411      	bmi.n	8005e30 <__swsetup_r+0x50>
 8005e0c:	2309      	movs	r3, #9
 8005e0e:	6033      	str	r3, [r6, #0]
 8005e10:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005e14:	81a3      	strh	r3, [r4, #12]
 8005e16:	f04f 30ff 	mov.w	r0, #4294967295
 8005e1a:	e03e      	b.n	8005e9a <__swsetup_r+0xba>
 8005e1c:	4b25      	ldr	r3, [pc, #148]	; (8005eb4 <__swsetup_r+0xd4>)
 8005e1e:	429c      	cmp	r4, r3
 8005e20:	d101      	bne.n	8005e26 <__swsetup_r+0x46>
 8005e22:	68ac      	ldr	r4, [r5, #8]
 8005e24:	e7eb      	b.n	8005dfe <__swsetup_r+0x1e>
 8005e26:	4b24      	ldr	r3, [pc, #144]	; (8005eb8 <__swsetup_r+0xd8>)
 8005e28:	429c      	cmp	r4, r3
 8005e2a:	bf08      	it	eq
 8005e2c:	68ec      	ldreq	r4, [r5, #12]
 8005e2e:	e7e6      	b.n	8005dfe <__swsetup_r+0x1e>
 8005e30:	0758      	lsls	r0, r3, #29
 8005e32:	d512      	bpl.n	8005e5a <__swsetup_r+0x7a>
 8005e34:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005e36:	b141      	cbz	r1, 8005e4a <__swsetup_r+0x6a>
 8005e38:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005e3c:	4299      	cmp	r1, r3
 8005e3e:	d002      	beq.n	8005e46 <__swsetup_r+0x66>
 8005e40:	4630      	mov	r0, r6
 8005e42:	f000 fa5b 	bl	80062fc <_free_r>
 8005e46:	2300      	movs	r3, #0
 8005e48:	6363      	str	r3, [r4, #52]	; 0x34
 8005e4a:	89a3      	ldrh	r3, [r4, #12]
 8005e4c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005e50:	81a3      	strh	r3, [r4, #12]
 8005e52:	2300      	movs	r3, #0
 8005e54:	6063      	str	r3, [r4, #4]
 8005e56:	6923      	ldr	r3, [r4, #16]
 8005e58:	6023      	str	r3, [r4, #0]
 8005e5a:	89a3      	ldrh	r3, [r4, #12]
 8005e5c:	f043 0308 	orr.w	r3, r3, #8
 8005e60:	81a3      	strh	r3, [r4, #12]
 8005e62:	6923      	ldr	r3, [r4, #16]
 8005e64:	b94b      	cbnz	r3, 8005e7a <__swsetup_r+0x9a>
 8005e66:	89a3      	ldrh	r3, [r4, #12]
 8005e68:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005e6c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005e70:	d003      	beq.n	8005e7a <__swsetup_r+0x9a>
 8005e72:	4621      	mov	r1, r4
 8005e74:	4630      	mov	r0, r6
 8005e76:	f000 fa01 	bl	800627c <__smakebuf_r>
 8005e7a:	89a0      	ldrh	r0, [r4, #12]
 8005e7c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005e80:	f010 0301 	ands.w	r3, r0, #1
 8005e84:	d00a      	beq.n	8005e9c <__swsetup_r+0xbc>
 8005e86:	2300      	movs	r3, #0
 8005e88:	60a3      	str	r3, [r4, #8]
 8005e8a:	6963      	ldr	r3, [r4, #20]
 8005e8c:	425b      	negs	r3, r3
 8005e8e:	61a3      	str	r3, [r4, #24]
 8005e90:	6923      	ldr	r3, [r4, #16]
 8005e92:	b943      	cbnz	r3, 8005ea6 <__swsetup_r+0xc6>
 8005e94:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005e98:	d1ba      	bne.n	8005e10 <__swsetup_r+0x30>
 8005e9a:	bd70      	pop	{r4, r5, r6, pc}
 8005e9c:	0781      	lsls	r1, r0, #30
 8005e9e:	bf58      	it	pl
 8005ea0:	6963      	ldrpl	r3, [r4, #20]
 8005ea2:	60a3      	str	r3, [r4, #8]
 8005ea4:	e7f4      	b.n	8005e90 <__swsetup_r+0xb0>
 8005ea6:	2000      	movs	r0, #0
 8005ea8:	e7f7      	b.n	8005e9a <__swsetup_r+0xba>
 8005eaa:	bf00      	nop
 8005eac:	20004eac 	.word	0x20004eac
 8005eb0:	08006fc4 	.word	0x08006fc4
 8005eb4:	08006fe4 	.word	0x08006fe4
 8005eb8:	08006fa4 	.word	0x08006fa4

08005ebc <__sflush_r>:
 8005ebc:	898a      	ldrh	r2, [r1, #12]
 8005ebe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005ec2:	4605      	mov	r5, r0
 8005ec4:	0710      	lsls	r0, r2, #28
 8005ec6:	460c      	mov	r4, r1
 8005ec8:	d458      	bmi.n	8005f7c <__sflush_r+0xc0>
 8005eca:	684b      	ldr	r3, [r1, #4]
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	dc05      	bgt.n	8005edc <__sflush_r+0x20>
 8005ed0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	dc02      	bgt.n	8005edc <__sflush_r+0x20>
 8005ed6:	2000      	movs	r0, #0
 8005ed8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005edc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005ede:	2e00      	cmp	r6, #0
 8005ee0:	d0f9      	beq.n	8005ed6 <__sflush_r+0x1a>
 8005ee2:	2300      	movs	r3, #0
 8005ee4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005ee8:	682f      	ldr	r7, [r5, #0]
 8005eea:	602b      	str	r3, [r5, #0]
 8005eec:	d032      	beq.n	8005f54 <__sflush_r+0x98>
 8005eee:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005ef0:	89a3      	ldrh	r3, [r4, #12]
 8005ef2:	075a      	lsls	r2, r3, #29
 8005ef4:	d505      	bpl.n	8005f02 <__sflush_r+0x46>
 8005ef6:	6863      	ldr	r3, [r4, #4]
 8005ef8:	1ac0      	subs	r0, r0, r3
 8005efa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005efc:	b10b      	cbz	r3, 8005f02 <__sflush_r+0x46>
 8005efe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005f00:	1ac0      	subs	r0, r0, r3
 8005f02:	2300      	movs	r3, #0
 8005f04:	4602      	mov	r2, r0
 8005f06:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005f08:	6a21      	ldr	r1, [r4, #32]
 8005f0a:	4628      	mov	r0, r5
 8005f0c:	47b0      	blx	r6
 8005f0e:	1c43      	adds	r3, r0, #1
 8005f10:	89a3      	ldrh	r3, [r4, #12]
 8005f12:	d106      	bne.n	8005f22 <__sflush_r+0x66>
 8005f14:	6829      	ldr	r1, [r5, #0]
 8005f16:	291d      	cmp	r1, #29
 8005f18:	d82c      	bhi.n	8005f74 <__sflush_r+0xb8>
 8005f1a:	4a2a      	ldr	r2, [pc, #168]	; (8005fc4 <__sflush_r+0x108>)
 8005f1c:	40ca      	lsrs	r2, r1
 8005f1e:	07d6      	lsls	r6, r2, #31
 8005f20:	d528      	bpl.n	8005f74 <__sflush_r+0xb8>
 8005f22:	2200      	movs	r2, #0
 8005f24:	6062      	str	r2, [r4, #4]
 8005f26:	04d9      	lsls	r1, r3, #19
 8005f28:	6922      	ldr	r2, [r4, #16]
 8005f2a:	6022      	str	r2, [r4, #0]
 8005f2c:	d504      	bpl.n	8005f38 <__sflush_r+0x7c>
 8005f2e:	1c42      	adds	r2, r0, #1
 8005f30:	d101      	bne.n	8005f36 <__sflush_r+0x7a>
 8005f32:	682b      	ldr	r3, [r5, #0]
 8005f34:	b903      	cbnz	r3, 8005f38 <__sflush_r+0x7c>
 8005f36:	6560      	str	r0, [r4, #84]	; 0x54
 8005f38:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005f3a:	602f      	str	r7, [r5, #0]
 8005f3c:	2900      	cmp	r1, #0
 8005f3e:	d0ca      	beq.n	8005ed6 <__sflush_r+0x1a>
 8005f40:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005f44:	4299      	cmp	r1, r3
 8005f46:	d002      	beq.n	8005f4e <__sflush_r+0x92>
 8005f48:	4628      	mov	r0, r5
 8005f4a:	f000 f9d7 	bl	80062fc <_free_r>
 8005f4e:	2000      	movs	r0, #0
 8005f50:	6360      	str	r0, [r4, #52]	; 0x34
 8005f52:	e7c1      	b.n	8005ed8 <__sflush_r+0x1c>
 8005f54:	6a21      	ldr	r1, [r4, #32]
 8005f56:	2301      	movs	r3, #1
 8005f58:	4628      	mov	r0, r5
 8005f5a:	47b0      	blx	r6
 8005f5c:	1c41      	adds	r1, r0, #1
 8005f5e:	d1c7      	bne.n	8005ef0 <__sflush_r+0x34>
 8005f60:	682b      	ldr	r3, [r5, #0]
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d0c4      	beq.n	8005ef0 <__sflush_r+0x34>
 8005f66:	2b1d      	cmp	r3, #29
 8005f68:	d001      	beq.n	8005f6e <__sflush_r+0xb2>
 8005f6a:	2b16      	cmp	r3, #22
 8005f6c:	d101      	bne.n	8005f72 <__sflush_r+0xb6>
 8005f6e:	602f      	str	r7, [r5, #0]
 8005f70:	e7b1      	b.n	8005ed6 <__sflush_r+0x1a>
 8005f72:	89a3      	ldrh	r3, [r4, #12]
 8005f74:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005f78:	81a3      	strh	r3, [r4, #12]
 8005f7a:	e7ad      	b.n	8005ed8 <__sflush_r+0x1c>
 8005f7c:	690f      	ldr	r7, [r1, #16]
 8005f7e:	2f00      	cmp	r7, #0
 8005f80:	d0a9      	beq.n	8005ed6 <__sflush_r+0x1a>
 8005f82:	0793      	lsls	r3, r2, #30
 8005f84:	680e      	ldr	r6, [r1, #0]
 8005f86:	bf08      	it	eq
 8005f88:	694b      	ldreq	r3, [r1, #20]
 8005f8a:	600f      	str	r7, [r1, #0]
 8005f8c:	bf18      	it	ne
 8005f8e:	2300      	movne	r3, #0
 8005f90:	eba6 0807 	sub.w	r8, r6, r7
 8005f94:	608b      	str	r3, [r1, #8]
 8005f96:	f1b8 0f00 	cmp.w	r8, #0
 8005f9a:	dd9c      	ble.n	8005ed6 <__sflush_r+0x1a>
 8005f9c:	6a21      	ldr	r1, [r4, #32]
 8005f9e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005fa0:	4643      	mov	r3, r8
 8005fa2:	463a      	mov	r2, r7
 8005fa4:	4628      	mov	r0, r5
 8005fa6:	47b0      	blx	r6
 8005fa8:	2800      	cmp	r0, #0
 8005faa:	dc06      	bgt.n	8005fba <__sflush_r+0xfe>
 8005fac:	89a3      	ldrh	r3, [r4, #12]
 8005fae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005fb2:	81a3      	strh	r3, [r4, #12]
 8005fb4:	f04f 30ff 	mov.w	r0, #4294967295
 8005fb8:	e78e      	b.n	8005ed8 <__sflush_r+0x1c>
 8005fba:	4407      	add	r7, r0
 8005fbc:	eba8 0800 	sub.w	r8, r8, r0
 8005fc0:	e7e9      	b.n	8005f96 <__sflush_r+0xda>
 8005fc2:	bf00      	nop
 8005fc4:	20400001 	.word	0x20400001

08005fc8 <_fflush_r>:
 8005fc8:	b538      	push	{r3, r4, r5, lr}
 8005fca:	690b      	ldr	r3, [r1, #16]
 8005fcc:	4605      	mov	r5, r0
 8005fce:	460c      	mov	r4, r1
 8005fd0:	b913      	cbnz	r3, 8005fd8 <_fflush_r+0x10>
 8005fd2:	2500      	movs	r5, #0
 8005fd4:	4628      	mov	r0, r5
 8005fd6:	bd38      	pop	{r3, r4, r5, pc}
 8005fd8:	b118      	cbz	r0, 8005fe2 <_fflush_r+0x1a>
 8005fda:	6983      	ldr	r3, [r0, #24]
 8005fdc:	b90b      	cbnz	r3, 8005fe2 <_fflush_r+0x1a>
 8005fde:	f000 f887 	bl	80060f0 <__sinit>
 8005fe2:	4b14      	ldr	r3, [pc, #80]	; (8006034 <_fflush_r+0x6c>)
 8005fe4:	429c      	cmp	r4, r3
 8005fe6:	d11b      	bne.n	8006020 <_fflush_r+0x58>
 8005fe8:	686c      	ldr	r4, [r5, #4]
 8005fea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d0ef      	beq.n	8005fd2 <_fflush_r+0xa>
 8005ff2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005ff4:	07d0      	lsls	r0, r2, #31
 8005ff6:	d404      	bmi.n	8006002 <_fflush_r+0x3a>
 8005ff8:	0599      	lsls	r1, r3, #22
 8005ffa:	d402      	bmi.n	8006002 <_fflush_r+0x3a>
 8005ffc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005ffe:	f000 f915 	bl	800622c <__retarget_lock_acquire_recursive>
 8006002:	4628      	mov	r0, r5
 8006004:	4621      	mov	r1, r4
 8006006:	f7ff ff59 	bl	8005ebc <__sflush_r>
 800600a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800600c:	07da      	lsls	r2, r3, #31
 800600e:	4605      	mov	r5, r0
 8006010:	d4e0      	bmi.n	8005fd4 <_fflush_r+0xc>
 8006012:	89a3      	ldrh	r3, [r4, #12]
 8006014:	059b      	lsls	r3, r3, #22
 8006016:	d4dd      	bmi.n	8005fd4 <_fflush_r+0xc>
 8006018:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800601a:	f000 f908 	bl	800622e <__retarget_lock_release_recursive>
 800601e:	e7d9      	b.n	8005fd4 <_fflush_r+0xc>
 8006020:	4b05      	ldr	r3, [pc, #20]	; (8006038 <_fflush_r+0x70>)
 8006022:	429c      	cmp	r4, r3
 8006024:	d101      	bne.n	800602a <_fflush_r+0x62>
 8006026:	68ac      	ldr	r4, [r5, #8]
 8006028:	e7df      	b.n	8005fea <_fflush_r+0x22>
 800602a:	4b04      	ldr	r3, [pc, #16]	; (800603c <_fflush_r+0x74>)
 800602c:	429c      	cmp	r4, r3
 800602e:	bf08      	it	eq
 8006030:	68ec      	ldreq	r4, [r5, #12]
 8006032:	e7da      	b.n	8005fea <_fflush_r+0x22>
 8006034:	08006fc4 	.word	0x08006fc4
 8006038:	08006fe4 	.word	0x08006fe4
 800603c:	08006fa4 	.word	0x08006fa4

08006040 <std>:
 8006040:	2300      	movs	r3, #0
 8006042:	b510      	push	{r4, lr}
 8006044:	4604      	mov	r4, r0
 8006046:	e9c0 3300 	strd	r3, r3, [r0]
 800604a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800604e:	6083      	str	r3, [r0, #8]
 8006050:	8181      	strh	r1, [r0, #12]
 8006052:	6643      	str	r3, [r0, #100]	; 0x64
 8006054:	81c2      	strh	r2, [r0, #14]
 8006056:	6183      	str	r3, [r0, #24]
 8006058:	4619      	mov	r1, r3
 800605a:	2208      	movs	r2, #8
 800605c:	305c      	adds	r0, #92	; 0x5c
 800605e:	f7ff fdd7 	bl	8005c10 <memset>
 8006062:	4b05      	ldr	r3, [pc, #20]	; (8006078 <std+0x38>)
 8006064:	6263      	str	r3, [r4, #36]	; 0x24
 8006066:	4b05      	ldr	r3, [pc, #20]	; (800607c <std+0x3c>)
 8006068:	62a3      	str	r3, [r4, #40]	; 0x28
 800606a:	4b05      	ldr	r3, [pc, #20]	; (8006080 <std+0x40>)
 800606c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800606e:	4b05      	ldr	r3, [pc, #20]	; (8006084 <std+0x44>)
 8006070:	6224      	str	r4, [r4, #32]
 8006072:	6323      	str	r3, [r4, #48]	; 0x30
 8006074:	bd10      	pop	{r4, pc}
 8006076:	bf00      	nop
 8006078:	08006ab9 	.word	0x08006ab9
 800607c:	08006adb 	.word	0x08006adb
 8006080:	08006b13 	.word	0x08006b13
 8006084:	08006b37 	.word	0x08006b37

08006088 <_cleanup_r>:
 8006088:	4901      	ldr	r1, [pc, #4]	; (8006090 <_cleanup_r+0x8>)
 800608a:	f000 b8af 	b.w	80061ec <_fwalk_reent>
 800608e:	bf00      	nop
 8006090:	08005fc9 	.word	0x08005fc9

08006094 <__sfmoreglue>:
 8006094:	b570      	push	{r4, r5, r6, lr}
 8006096:	2268      	movs	r2, #104	; 0x68
 8006098:	1e4d      	subs	r5, r1, #1
 800609a:	4355      	muls	r5, r2
 800609c:	460e      	mov	r6, r1
 800609e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80060a2:	f000 f997 	bl	80063d4 <_malloc_r>
 80060a6:	4604      	mov	r4, r0
 80060a8:	b140      	cbz	r0, 80060bc <__sfmoreglue+0x28>
 80060aa:	2100      	movs	r1, #0
 80060ac:	e9c0 1600 	strd	r1, r6, [r0]
 80060b0:	300c      	adds	r0, #12
 80060b2:	60a0      	str	r0, [r4, #8]
 80060b4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80060b8:	f7ff fdaa 	bl	8005c10 <memset>
 80060bc:	4620      	mov	r0, r4
 80060be:	bd70      	pop	{r4, r5, r6, pc}

080060c0 <__sfp_lock_acquire>:
 80060c0:	4801      	ldr	r0, [pc, #4]	; (80060c8 <__sfp_lock_acquire+0x8>)
 80060c2:	f000 b8b3 	b.w	800622c <__retarget_lock_acquire_recursive>
 80060c6:	bf00      	nop
 80060c8:	2000510d 	.word	0x2000510d

080060cc <__sfp_lock_release>:
 80060cc:	4801      	ldr	r0, [pc, #4]	; (80060d4 <__sfp_lock_release+0x8>)
 80060ce:	f000 b8ae 	b.w	800622e <__retarget_lock_release_recursive>
 80060d2:	bf00      	nop
 80060d4:	2000510d 	.word	0x2000510d

080060d8 <__sinit_lock_acquire>:
 80060d8:	4801      	ldr	r0, [pc, #4]	; (80060e0 <__sinit_lock_acquire+0x8>)
 80060da:	f000 b8a7 	b.w	800622c <__retarget_lock_acquire_recursive>
 80060de:	bf00      	nop
 80060e0:	2000510e 	.word	0x2000510e

080060e4 <__sinit_lock_release>:
 80060e4:	4801      	ldr	r0, [pc, #4]	; (80060ec <__sinit_lock_release+0x8>)
 80060e6:	f000 b8a2 	b.w	800622e <__retarget_lock_release_recursive>
 80060ea:	bf00      	nop
 80060ec:	2000510e 	.word	0x2000510e

080060f0 <__sinit>:
 80060f0:	b510      	push	{r4, lr}
 80060f2:	4604      	mov	r4, r0
 80060f4:	f7ff fff0 	bl	80060d8 <__sinit_lock_acquire>
 80060f8:	69a3      	ldr	r3, [r4, #24]
 80060fa:	b11b      	cbz	r3, 8006104 <__sinit+0x14>
 80060fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006100:	f7ff bff0 	b.w	80060e4 <__sinit_lock_release>
 8006104:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006108:	6523      	str	r3, [r4, #80]	; 0x50
 800610a:	4b13      	ldr	r3, [pc, #76]	; (8006158 <__sinit+0x68>)
 800610c:	4a13      	ldr	r2, [pc, #76]	; (800615c <__sinit+0x6c>)
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	62a2      	str	r2, [r4, #40]	; 0x28
 8006112:	42a3      	cmp	r3, r4
 8006114:	bf04      	itt	eq
 8006116:	2301      	moveq	r3, #1
 8006118:	61a3      	streq	r3, [r4, #24]
 800611a:	4620      	mov	r0, r4
 800611c:	f000 f820 	bl	8006160 <__sfp>
 8006120:	6060      	str	r0, [r4, #4]
 8006122:	4620      	mov	r0, r4
 8006124:	f000 f81c 	bl	8006160 <__sfp>
 8006128:	60a0      	str	r0, [r4, #8]
 800612a:	4620      	mov	r0, r4
 800612c:	f000 f818 	bl	8006160 <__sfp>
 8006130:	2200      	movs	r2, #0
 8006132:	60e0      	str	r0, [r4, #12]
 8006134:	2104      	movs	r1, #4
 8006136:	6860      	ldr	r0, [r4, #4]
 8006138:	f7ff ff82 	bl	8006040 <std>
 800613c:	68a0      	ldr	r0, [r4, #8]
 800613e:	2201      	movs	r2, #1
 8006140:	2109      	movs	r1, #9
 8006142:	f7ff ff7d 	bl	8006040 <std>
 8006146:	68e0      	ldr	r0, [r4, #12]
 8006148:	2202      	movs	r2, #2
 800614a:	2112      	movs	r1, #18
 800614c:	f7ff ff78 	bl	8006040 <std>
 8006150:	2301      	movs	r3, #1
 8006152:	61a3      	str	r3, [r4, #24]
 8006154:	e7d2      	b.n	80060fc <__sinit+0xc>
 8006156:	bf00      	nop
 8006158:	08006fa0 	.word	0x08006fa0
 800615c:	08006089 	.word	0x08006089

08006160 <__sfp>:
 8006160:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006162:	4607      	mov	r7, r0
 8006164:	f7ff ffac 	bl	80060c0 <__sfp_lock_acquire>
 8006168:	4b1e      	ldr	r3, [pc, #120]	; (80061e4 <__sfp+0x84>)
 800616a:	681e      	ldr	r6, [r3, #0]
 800616c:	69b3      	ldr	r3, [r6, #24]
 800616e:	b913      	cbnz	r3, 8006176 <__sfp+0x16>
 8006170:	4630      	mov	r0, r6
 8006172:	f7ff ffbd 	bl	80060f0 <__sinit>
 8006176:	3648      	adds	r6, #72	; 0x48
 8006178:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800617c:	3b01      	subs	r3, #1
 800617e:	d503      	bpl.n	8006188 <__sfp+0x28>
 8006180:	6833      	ldr	r3, [r6, #0]
 8006182:	b30b      	cbz	r3, 80061c8 <__sfp+0x68>
 8006184:	6836      	ldr	r6, [r6, #0]
 8006186:	e7f7      	b.n	8006178 <__sfp+0x18>
 8006188:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800618c:	b9d5      	cbnz	r5, 80061c4 <__sfp+0x64>
 800618e:	4b16      	ldr	r3, [pc, #88]	; (80061e8 <__sfp+0x88>)
 8006190:	60e3      	str	r3, [r4, #12]
 8006192:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006196:	6665      	str	r5, [r4, #100]	; 0x64
 8006198:	f000 f847 	bl	800622a <__retarget_lock_init_recursive>
 800619c:	f7ff ff96 	bl	80060cc <__sfp_lock_release>
 80061a0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80061a4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80061a8:	6025      	str	r5, [r4, #0]
 80061aa:	61a5      	str	r5, [r4, #24]
 80061ac:	2208      	movs	r2, #8
 80061ae:	4629      	mov	r1, r5
 80061b0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80061b4:	f7ff fd2c 	bl	8005c10 <memset>
 80061b8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80061bc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80061c0:	4620      	mov	r0, r4
 80061c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80061c4:	3468      	adds	r4, #104	; 0x68
 80061c6:	e7d9      	b.n	800617c <__sfp+0x1c>
 80061c8:	2104      	movs	r1, #4
 80061ca:	4638      	mov	r0, r7
 80061cc:	f7ff ff62 	bl	8006094 <__sfmoreglue>
 80061d0:	4604      	mov	r4, r0
 80061d2:	6030      	str	r0, [r6, #0]
 80061d4:	2800      	cmp	r0, #0
 80061d6:	d1d5      	bne.n	8006184 <__sfp+0x24>
 80061d8:	f7ff ff78 	bl	80060cc <__sfp_lock_release>
 80061dc:	230c      	movs	r3, #12
 80061de:	603b      	str	r3, [r7, #0]
 80061e0:	e7ee      	b.n	80061c0 <__sfp+0x60>
 80061e2:	bf00      	nop
 80061e4:	08006fa0 	.word	0x08006fa0
 80061e8:	ffff0001 	.word	0xffff0001

080061ec <_fwalk_reent>:
 80061ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80061f0:	4606      	mov	r6, r0
 80061f2:	4688      	mov	r8, r1
 80061f4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80061f8:	2700      	movs	r7, #0
 80061fa:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80061fe:	f1b9 0901 	subs.w	r9, r9, #1
 8006202:	d505      	bpl.n	8006210 <_fwalk_reent+0x24>
 8006204:	6824      	ldr	r4, [r4, #0]
 8006206:	2c00      	cmp	r4, #0
 8006208:	d1f7      	bne.n	80061fa <_fwalk_reent+0xe>
 800620a:	4638      	mov	r0, r7
 800620c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006210:	89ab      	ldrh	r3, [r5, #12]
 8006212:	2b01      	cmp	r3, #1
 8006214:	d907      	bls.n	8006226 <_fwalk_reent+0x3a>
 8006216:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800621a:	3301      	adds	r3, #1
 800621c:	d003      	beq.n	8006226 <_fwalk_reent+0x3a>
 800621e:	4629      	mov	r1, r5
 8006220:	4630      	mov	r0, r6
 8006222:	47c0      	blx	r8
 8006224:	4307      	orrs	r7, r0
 8006226:	3568      	adds	r5, #104	; 0x68
 8006228:	e7e9      	b.n	80061fe <_fwalk_reent+0x12>

0800622a <__retarget_lock_init_recursive>:
 800622a:	4770      	bx	lr

0800622c <__retarget_lock_acquire_recursive>:
 800622c:	4770      	bx	lr

0800622e <__retarget_lock_release_recursive>:
 800622e:	4770      	bx	lr

08006230 <__swhatbuf_r>:
 8006230:	b570      	push	{r4, r5, r6, lr}
 8006232:	460e      	mov	r6, r1
 8006234:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006238:	2900      	cmp	r1, #0
 800623a:	b096      	sub	sp, #88	; 0x58
 800623c:	4614      	mov	r4, r2
 800623e:	461d      	mov	r5, r3
 8006240:	da08      	bge.n	8006254 <__swhatbuf_r+0x24>
 8006242:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8006246:	2200      	movs	r2, #0
 8006248:	602a      	str	r2, [r5, #0]
 800624a:	061a      	lsls	r2, r3, #24
 800624c:	d410      	bmi.n	8006270 <__swhatbuf_r+0x40>
 800624e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006252:	e00e      	b.n	8006272 <__swhatbuf_r+0x42>
 8006254:	466a      	mov	r2, sp
 8006256:	f000 fc95 	bl	8006b84 <_fstat_r>
 800625a:	2800      	cmp	r0, #0
 800625c:	dbf1      	blt.n	8006242 <__swhatbuf_r+0x12>
 800625e:	9a01      	ldr	r2, [sp, #4]
 8006260:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006264:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006268:	425a      	negs	r2, r3
 800626a:	415a      	adcs	r2, r3
 800626c:	602a      	str	r2, [r5, #0]
 800626e:	e7ee      	b.n	800624e <__swhatbuf_r+0x1e>
 8006270:	2340      	movs	r3, #64	; 0x40
 8006272:	2000      	movs	r0, #0
 8006274:	6023      	str	r3, [r4, #0]
 8006276:	b016      	add	sp, #88	; 0x58
 8006278:	bd70      	pop	{r4, r5, r6, pc}
	...

0800627c <__smakebuf_r>:
 800627c:	898b      	ldrh	r3, [r1, #12]
 800627e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006280:	079d      	lsls	r5, r3, #30
 8006282:	4606      	mov	r6, r0
 8006284:	460c      	mov	r4, r1
 8006286:	d507      	bpl.n	8006298 <__smakebuf_r+0x1c>
 8006288:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800628c:	6023      	str	r3, [r4, #0]
 800628e:	6123      	str	r3, [r4, #16]
 8006290:	2301      	movs	r3, #1
 8006292:	6163      	str	r3, [r4, #20]
 8006294:	b002      	add	sp, #8
 8006296:	bd70      	pop	{r4, r5, r6, pc}
 8006298:	ab01      	add	r3, sp, #4
 800629a:	466a      	mov	r2, sp
 800629c:	f7ff ffc8 	bl	8006230 <__swhatbuf_r>
 80062a0:	9900      	ldr	r1, [sp, #0]
 80062a2:	4605      	mov	r5, r0
 80062a4:	4630      	mov	r0, r6
 80062a6:	f000 f895 	bl	80063d4 <_malloc_r>
 80062aa:	b948      	cbnz	r0, 80062c0 <__smakebuf_r+0x44>
 80062ac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80062b0:	059a      	lsls	r2, r3, #22
 80062b2:	d4ef      	bmi.n	8006294 <__smakebuf_r+0x18>
 80062b4:	f023 0303 	bic.w	r3, r3, #3
 80062b8:	f043 0302 	orr.w	r3, r3, #2
 80062bc:	81a3      	strh	r3, [r4, #12]
 80062be:	e7e3      	b.n	8006288 <__smakebuf_r+0xc>
 80062c0:	4b0d      	ldr	r3, [pc, #52]	; (80062f8 <__smakebuf_r+0x7c>)
 80062c2:	62b3      	str	r3, [r6, #40]	; 0x28
 80062c4:	89a3      	ldrh	r3, [r4, #12]
 80062c6:	6020      	str	r0, [r4, #0]
 80062c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80062cc:	81a3      	strh	r3, [r4, #12]
 80062ce:	9b00      	ldr	r3, [sp, #0]
 80062d0:	6163      	str	r3, [r4, #20]
 80062d2:	9b01      	ldr	r3, [sp, #4]
 80062d4:	6120      	str	r0, [r4, #16]
 80062d6:	b15b      	cbz	r3, 80062f0 <__smakebuf_r+0x74>
 80062d8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80062dc:	4630      	mov	r0, r6
 80062de:	f000 fc63 	bl	8006ba8 <_isatty_r>
 80062e2:	b128      	cbz	r0, 80062f0 <__smakebuf_r+0x74>
 80062e4:	89a3      	ldrh	r3, [r4, #12]
 80062e6:	f023 0303 	bic.w	r3, r3, #3
 80062ea:	f043 0301 	orr.w	r3, r3, #1
 80062ee:	81a3      	strh	r3, [r4, #12]
 80062f0:	89a0      	ldrh	r0, [r4, #12]
 80062f2:	4305      	orrs	r5, r0
 80062f4:	81a5      	strh	r5, [r4, #12]
 80062f6:	e7cd      	b.n	8006294 <__smakebuf_r+0x18>
 80062f8:	08006089 	.word	0x08006089

080062fc <_free_r>:
 80062fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80062fe:	2900      	cmp	r1, #0
 8006300:	d044      	beq.n	800638c <_free_r+0x90>
 8006302:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006306:	9001      	str	r0, [sp, #4]
 8006308:	2b00      	cmp	r3, #0
 800630a:	f1a1 0404 	sub.w	r4, r1, #4
 800630e:	bfb8      	it	lt
 8006310:	18e4      	addlt	r4, r4, r3
 8006312:	f000 fc6b 	bl	8006bec <__malloc_lock>
 8006316:	4a1e      	ldr	r2, [pc, #120]	; (8006390 <_free_r+0x94>)
 8006318:	9801      	ldr	r0, [sp, #4]
 800631a:	6813      	ldr	r3, [r2, #0]
 800631c:	b933      	cbnz	r3, 800632c <_free_r+0x30>
 800631e:	6063      	str	r3, [r4, #4]
 8006320:	6014      	str	r4, [r2, #0]
 8006322:	b003      	add	sp, #12
 8006324:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006328:	f000 bc66 	b.w	8006bf8 <__malloc_unlock>
 800632c:	42a3      	cmp	r3, r4
 800632e:	d908      	bls.n	8006342 <_free_r+0x46>
 8006330:	6825      	ldr	r5, [r4, #0]
 8006332:	1961      	adds	r1, r4, r5
 8006334:	428b      	cmp	r3, r1
 8006336:	bf01      	itttt	eq
 8006338:	6819      	ldreq	r1, [r3, #0]
 800633a:	685b      	ldreq	r3, [r3, #4]
 800633c:	1949      	addeq	r1, r1, r5
 800633e:	6021      	streq	r1, [r4, #0]
 8006340:	e7ed      	b.n	800631e <_free_r+0x22>
 8006342:	461a      	mov	r2, r3
 8006344:	685b      	ldr	r3, [r3, #4]
 8006346:	b10b      	cbz	r3, 800634c <_free_r+0x50>
 8006348:	42a3      	cmp	r3, r4
 800634a:	d9fa      	bls.n	8006342 <_free_r+0x46>
 800634c:	6811      	ldr	r1, [r2, #0]
 800634e:	1855      	adds	r5, r2, r1
 8006350:	42a5      	cmp	r5, r4
 8006352:	d10b      	bne.n	800636c <_free_r+0x70>
 8006354:	6824      	ldr	r4, [r4, #0]
 8006356:	4421      	add	r1, r4
 8006358:	1854      	adds	r4, r2, r1
 800635a:	42a3      	cmp	r3, r4
 800635c:	6011      	str	r1, [r2, #0]
 800635e:	d1e0      	bne.n	8006322 <_free_r+0x26>
 8006360:	681c      	ldr	r4, [r3, #0]
 8006362:	685b      	ldr	r3, [r3, #4]
 8006364:	6053      	str	r3, [r2, #4]
 8006366:	4421      	add	r1, r4
 8006368:	6011      	str	r1, [r2, #0]
 800636a:	e7da      	b.n	8006322 <_free_r+0x26>
 800636c:	d902      	bls.n	8006374 <_free_r+0x78>
 800636e:	230c      	movs	r3, #12
 8006370:	6003      	str	r3, [r0, #0]
 8006372:	e7d6      	b.n	8006322 <_free_r+0x26>
 8006374:	6825      	ldr	r5, [r4, #0]
 8006376:	1961      	adds	r1, r4, r5
 8006378:	428b      	cmp	r3, r1
 800637a:	bf04      	itt	eq
 800637c:	6819      	ldreq	r1, [r3, #0]
 800637e:	685b      	ldreq	r3, [r3, #4]
 8006380:	6063      	str	r3, [r4, #4]
 8006382:	bf04      	itt	eq
 8006384:	1949      	addeq	r1, r1, r5
 8006386:	6021      	streq	r1, [r4, #0]
 8006388:	6054      	str	r4, [r2, #4]
 800638a:	e7ca      	b.n	8006322 <_free_r+0x26>
 800638c:	b003      	add	sp, #12
 800638e:	bd30      	pop	{r4, r5, pc}
 8006390:	20005110 	.word	0x20005110

08006394 <sbrk_aligned>:
 8006394:	b570      	push	{r4, r5, r6, lr}
 8006396:	4e0e      	ldr	r6, [pc, #56]	; (80063d0 <sbrk_aligned+0x3c>)
 8006398:	460c      	mov	r4, r1
 800639a:	6831      	ldr	r1, [r6, #0]
 800639c:	4605      	mov	r5, r0
 800639e:	b911      	cbnz	r1, 80063a6 <sbrk_aligned+0x12>
 80063a0:	f000 fb7a 	bl	8006a98 <_sbrk_r>
 80063a4:	6030      	str	r0, [r6, #0]
 80063a6:	4621      	mov	r1, r4
 80063a8:	4628      	mov	r0, r5
 80063aa:	f000 fb75 	bl	8006a98 <_sbrk_r>
 80063ae:	1c43      	adds	r3, r0, #1
 80063b0:	d00a      	beq.n	80063c8 <sbrk_aligned+0x34>
 80063b2:	1cc4      	adds	r4, r0, #3
 80063b4:	f024 0403 	bic.w	r4, r4, #3
 80063b8:	42a0      	cmp	r0, r4
 80063ba:	d007      	beq.n	80063cc <sbrk_aligned+0x38>
 80063bc:	1a21      	subs	r1, r4, r0
 80063be:	4628      	mov	r0, r5
 80063c0:	f000 fb6a 	bl	8006a98 <_sbrk_r>
 80063c4:	3001      	adds	r0, #1
 80063c6:	d101      	bne.n	80063cc <sbrk_aligned+0x38>
 80063c8:	f04f 34ff 	mov.w	r4, #4294967295
 80063cc:	4620      	mov	r0, r4
 80063ce:	bd70      	pop	{r4, r5, r6, pc}
 80063d0:	20005114 	.word	0x20005114

080063d4 <_malloc_r>:
 80063d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80063d8:	1ccd      	adds	r5, r1, #3
 80063da:	f025 0503 	bic.w	r5, r5, #3
 80063de:	3508      	adds	r5, #8
 80063e0:	2d0c      	cmp	r5, #12
 80063e2:	bf38      	it	cc
 80063e4:	250c      	movcc	r5, #12
 80063e6:	2d00      	cmp	r5, #0
 80063e8:	4607      	mov	r7, r0
 80063ea:	db01      	blt.n	80063f0 <_malloc_r+0x1c>
 80063ec:	42a9      	cmp	r1, r5
 80063ee:	d905      	bls.n	80063fc <_malloc_r+0x28>
 80063f0:	230c      	movs	r3, #12
 80063f2:	603b      	str	r3, [r7, #0]
 80063f4:	2600      	movs	r6, #0
 80063f6:	4630      	mov	r0, r6
 80063f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80063fc:	4e2e      	ldr	r6, [pc, #184]	; (80064b8 <_malloc_r+0xe4>)
 80063fe:	f000 fbf5 	bl	8006bec <__malloc_lock>
 8006402:	6833      	ldr	r3, [r6, #0]
 8006404:	461c      	mov	r4, r3
 8006406:	bb34      	cbnz	r4, 8006456 <_malloc_r+0x82>
 8006408:	4629      	mov	r1, r5
 800640a:	4638      	mov	r0, r7
 800640c:	f7ff ffc2 	bl	8006394 <sbrk_aligned>
 8006410:	1c43      	adds	r3, r0, #1
 8006412:	4604      	mov	r4, r0
 8006414:	d14d      	bne.n	80064b2 <_malloc_r+0xde>
 8006416:	6834      	ldr	r4, [r6, #0]
 8006418:	4626      	mov	r6, r4
 800641a:	2e00      	cmp	r6, #0
 800641c:	d140      	bne.n	80064a0 <_malloc_r+0xcc>
 800641e:	6823      	ldr	r3, [r4, #0]
 8006420:	4631      	mov	r1, r6
 8006422:	4638      	mov	r0, r7
 8006424:	eb04 0803 	add.w	r8, r4, r3
 8006428:	f000 fb36 	bl	8006a98 <_sbrk_r>
 800642c:	4580      	cmp	r8, r0
 800642e:	d13a      	bne.n	80064a6 <_malloc_r+0xd2>
 8006430:	6821      	ldr	r1, [r4, #0]
 8006432:	3503      	adds	r5, #3
 8006434:	1a6d      	subs	r5, r5, r1
 8006436:	f025 0503 	bic.w	r5, r5, #3
 800643a:	3508      	adds	r5, #8
 800643c:	2d0c      	cmp	r5, #12
 800643e:	bf38      	it	cc
 8006440:	250c      	movcc	r5, #12
 8006442:	4629      	mov	r1, r5
 8006444:	4638      	mov	r0, r7
 8006446:	f7ff ffa5 	bl	8006394 <sbrk_aligned>
 800644a:	3001      	adds	r0, #1
 800644c:	d02b      	beq.n	80064a6 <_malloc_r+0xd2>
 800644e:	6823      	ldr	r3, [r4, #0]
 8006450:	442b      	add	r3, r5
 8006452:	6023      	str	r3, [r4, #0]
 8006454:	e00e      	b.n	8006474 <_malloc_r+0xa0>
 8006456:	6822      	ldr	r2, [r4, #0]
 8006458:	1b52      	subs	r2, r2, r5
 800645a:	d41e      	bmi.n	800649a <_malloc_r+0xc6>
 800645c:	2a0b      	cmp	r2, #11
 800645e:	d916      	bls.n	800648e <_malloc_r+0xba>
 8006460:	1961      	adds	r1, r4, r5
 8006462:	42a3      	cmp	r3, r4
 8006464:	6025      	str	r5, [r4, #0]
 8006466:	bf18      	it	ne
 8006468:	6059      	strne	r1, [r3, #4]
 800646a:	6863      	ldr	r3, [r4, #4]
 800646c:	bf08      	it	eq
 800646e:	6031      	streq	r1, [r6, #0]
 8006470:	5162      	str	r2, [r4, r5]
 8006472:	604b      	str	r3, [r1, #4]
 8006474:	4638      	mov	r0, r7
 8006476:	f104 060b 	add.w	r6, r4, #11
 800647a:	f000 fbbd 	bl	8006bf8 <__malloc_unlock>
 800647e:	f026 0607 	bic.w	r6, r6, #7
 8006482:	1d23      	adds	r3, r4, #4
 8006484:	1af2      	subs	r2, r6, r3
 8006486:	d0b6      	beq.n	80063f6 <_malloc_r+0x22>
 8006488:	1b9b      	subs	r3, r3, r6
 800648a:	50a3      	str	r3, [r4, r2]
 800648c:	e7b3      	b.n	80063f6 <_malloc_r+0x22>
 800648e:	6862      	ldr	r2, [r4, #4]
 8006490:	42a3      	cmp	r3, r4
 8006492:	bf0c      	ite	eq
 8006494:	6032      	streq	r2, [r6, #0]
 8006496:	605a      	strne	r2, [r3, #4]
 8006498:	e7ec      	b.n	8006474 <_malloc_r+0xa0>
 800649a:	4623      	mov	r3, r4
 800649c:	6864      	ldr	r4, [r4, #4]
 800649e:	e7b2      	b.n	8006406 <_malloc_r+0x32>
 80064a0:	4634      	mov	r4, r6
 80064a2:	6876      	ldr	r6, [r6, #4]
 80064a4:	e7b9      	b.n	800641a <_malloc_r+0x46>
 80064a6:	230c      	movs	r3, #12
 80064a8:	603b      	str	r3, [r7, #0]
 80064aa:	4638      	mov	r0, r7
 80064ac:	f000 fba4 	bl	8006bf8 <__malloc_unlock>
 80064b0:	e7a1      	b.n	80063f6 <_malloc_r+0x22>
 80064b2:	6025      	str	r5, [r4, #0]
 80064b4:	e7de      	b.n	8006474 <_malloc_r+0xa0>
 80064b6:	bf00      	nop
 80064b8:	20005110 	.word	0x20005110

080064bc <__sfputc_r>:
 80064bc:	6893      	ldr	r3, [r2, #8]
 80064be:	3b01      	subs	r3, #1
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	b410      	push	{r4}
 80064c4:	6093      	str	r3, [r2, #8]
 80064c6:	da08      	bge.n	80064da <__sfputc_r+0x1e>
 80064c8:	6994      	ldr	r4, [r2, #24]
 80064ca:	42a3      	cmp	r3, r4
 80064cc:	db01      	blt.n	80064d2 <__sfputc_r+0x16>
 80064ce:	290a      	cmp	r1, #10
 80064d0:	d103      	bne.n	80064da <__sfputc_r+0x1e>
 80064d2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80064d6:	f7ff bc31 	b.w	8005d3c <__swbuf_r>
 80064da:	6813      	ldr	r3, [r2, #0]
 80064dc:	1c58      	adds	r0, r3, #1
 80064de:	6010      	str	r0, [r2, #0]
 80064e0:	7019      	strb	r1, [r3, #0]
 80064e2:	4608      	mov	r0, r1
 80064e4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80064e8:	4770      	bx	lr

080064ea <__sfputs_r>:
 80064ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064ec:	4606      	mov	r6, r0
 80064ee:	460f      	mov	r7, r1
 80064f0:	4614      	mov	r4, r2
 80064f2:	18d5      	adds	r5, r2, r3
 80064f4:	42ac      	cmp	r4, r5
 80064f6:	d101      	bne.n	80064fc <__sfputs_r+0x12>
 80064f8:	2000      	movs	r0, #0
 80064fa:	e007      	b.n	800650c <__sfputs_r+0x22>
 80064fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006500:	463a      	mov	r2, r7
 8006502:	4630      	mov	r0, r6
 8006504:	f7ff ffda 	bl	80064bc <__sfputc_r>
 8006508:	1c43      	adds	r3, r0, #1
 800650a:	d1f3      	bne.n	80064f4 <__sfputs_r+0xa>
 800650c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006510 <_vfiprintf_r>:
 8006510:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006514:	460d      	mov	r5, r1
 8006516:	b09d      	sub	sp, #116	; 0x74
 8006518:	4614      	mov	r4, r2
 800651a:	4698      	mov	r8, r3
 800651c:	4606      	mov	r6, r0
 800651e:	b118      	cbz	r0, 8006528 <_vfiprintf_r+0x18>
 8006520:	6983      	ldr	r3, [r0, #24]
 8006522:	b90b      	cbnz	r3, 8006528 <_vfiprintf_r+0x18>
 8006524:	f7ff fde4 	bl	80060f0 <__sinit>
 8006528:	4b89      	ldr	r3, [pc, #548]	; (8006750 <_vfiprintf_r+0x240>)
 800652a:	429d      	cmp	r5, r3
 800652c:	d11b      	bne.n	8006566 <_vfiprintf_r+0x56>
 800652e:	6875      	ldr	r5, [r6, #4]
 8006530:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006532:	07d9      	lsls	r1, r3, #31
 8006534:	d405      	bmi.n	8006542 <_vfiprintf_r+0x32>
 8006536:	89ab      	ldrh	r3, [r5, #12]
 8006538:	059a      	lsls	r2, r3, #22
 800653a:	d402      	bmi.n	8006542 <_vfiprintf_r+0x32>
 800653c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800653e:	f7ff fe75 	bl	800622c <__retarget_lock_acquire_recursive>
 8006542:	89ab      	ldrh	r3, [r5, #12]
 8006544:	071b      	lsls	r3, r3, #28
 8006546:	d501      	bpl.n	800654c <_vfiprintf_r+0x3c>
 8006548:	692b      	ldr	r3, [r5, #16]
 800654a:	b9eb      	cbnz	r3, 8006588 <_vfiprintf_r+0x78>
 800654c:	4629      	mov	r1, r5
 800654e:	4630      	mov	r0, r6
 8006550:	f7ff fc46 	bl	8005de0 <__swsetup_r>
 8006554:	b1c0      	cbz	r0, 8006588 <_vfiprintf_r+0x78>
 8006556:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006558:	07dc      	lsls	r4, r3, #31
 800655a:	d50e      	bpl.n	800657a <_vfiprintf_r+0x6a>
 800655c:	f04f 30ff 	mov.w	r0, #4294967295
 8006560:	b01d      	add	sp, #116	; 0x74
 8006562:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006566:	4b7b      	ldr	r3, [pc, #492]	; (8006754 <_vfiprintf_r+0x244>)
 8006568:	429d      	cmp	r5, r3
 800656a:	d101      	bne.n	8006570 <_vfiprintf_r+0x60>
 800656c:	68b5      	ldr	r5, [r6, #8]
 800656e:	e7df      	b.n	8006530 <_vfiprintf_r+0x20>
 8006570:	4b79      	ldr	r3, [pc, #484]	; (8006758 <_vfiprintf_r+0x248>)
 8006572:	429d      	cmp	r5, r3
 8006574:	bf08      	it	eq
 8006576:	68f5      	ldreq	r5, [r6, #12]
 8006578:	e7da      	b.n	8006530 <_vfiprintf_r+0x20>
 800657a:	89ab      	ldrh	r3, [r5, #12]
 800657c:	0598      	lsls	r0, r3, #22
 800657e:	d4ed      	bmi.n	800655c <_vfiprintf_r+0x4c>
 8006580:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006582:	f7ff fe54 	bl	800622e <__retarget_lock_release_recursive>
 8006586:	e7e9      	b.n	800655c <_vfiprintf_r+0x4c>
 8006588:	2300      	movs	r3, #0
 800658a:	9309      	str	r3, [sp, #36]	; 0x24
 800658c:	2320      	movs	r3, #32
 800658e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006592:	f8cd 800c 	str.w	r8, [sp, #12]
 8006596:	2330      	movs	r3, #48	; 0x30
 8006598:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800675c <_vfiprintf_r+0x24c>
 800659c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80065a0:	f04f 0901 	mov.w	r9, #1
 80065a4:	4623      	mov	r3, r4
 80065a6:	469a      	mov	sl, r3
 80065a8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80065ac:	b10a      	cbz	r2, 80065b2 <_vfiprintf_r+0xa2>
 80065ae:	2a25      	cmp	r2, #37	; 0x25
 80065b0:	d1f9      	bne.n	80065a6 <_vfiprintf_r+0x96>
 80065b2:	ebba 0b04 	subs.w	fp, sl, r4
 80065b6:	d00b      	beq.n	80065d0 <_vfiprintf_r+0xc0>
 80065b8:	465b      	mov	r3, fp
 80065ba:	4622      	mov	r2, r4
 80065bc:	4629      	mov	r1, r5
 80065be:	4630      	mov	r0, r6
 80065c0:	f7ff ff93 	bl	80064ea <__sfputs_r>
 80065c4:	3001      	adds	r0, #1
 80065c6:	f000 80aa 	beq.w	800671e <_vfiprintf_r+0x20e>
 80065ca:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80065cc:	445a      	add	r2, fp
 80065ce:	9209      	str	r2, [sp, #36]	; 0x24
 80065d0:	f89a 3000 	ldrb.w	r3, [sl]
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	f000 80a2 	beq.w	800671e <_vfiprintf_r+0x20e>
 80065da:	2300      	movs	r3, #0
 80065dc:	f04f 32ff 	mov.w	r2, #4294967295
 80065e0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80065e4:	f10a 0a01 	add.w	sl, sl, #1
 80065e8:	9304      	str	r3, [sp, #16]
 80065ea:	9307      	str	r3, [sp, #28]
 80065ec:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80065f0:	931a      	str	r3, [sp, #104]	; 0x68
 80065f2:	4654      	mov	r4, sl
 80065f4:	2205      	movs	r2, #5
 80065f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80065fa:	4858      	ldr	r0, [pc, #352]	; (800675c <_vfiprintf_r+0x24c>)
 80065fc:	f7f9 fe08 	bl	8000210 <memchr>
 8006600:	9a04      	ldr	r2, [sp, #16]
 8006602:	b9d8      	cbnz	r0, 800663c <_vfiprintf_r+0x12c>
 8006604:	06d1      	lsls	r1, r2, #27
 8006606:	bf44      	itt	mi
 8006608:	2320      	movmi	r3, #32
 800660a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800660e:	0713      	lsls	r3, r2, #28
 8006610:	bf44      	itt	mi
 8006612:	232b      	movmi	r3, #43	; 0x2b
 8006614:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006618:	f89a 3000 	ldrb.w	r3, [sl]
 800661c:	2b2a      	cmp	r3, #42	; 0x2a
 800661e:	d015      	beq.n	800664c <_vfiprintf_r+0x13c>
 8006620:	9a07      	ldr	r2, [sp, #28]
 8006622:	4654      	mov	r4, sl
 8006624:	2000      	movs	r0, #0
 8006626:	f04f 0c0a 	mov.w	ip, #10
 800662a:	4621      	mov	r1, r4
 800662c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006630:	3b30      	subs	r3, #48	; 0x30
 8006632:	2b09      	cmp	r3, #9
 8006634:	d94e      	bls.n	80066d4 <_vfiprintf_r+0x1c4>
 8006636:	b1b0      	cbz	r0, 8006666 <_vfiprintf_r+0x156>
 8006638:	9207      	str	r2, [sp, #28]
 800663a:	e014      	b.n	8006666 <_vfiprintf_r+0x156>
 800663c:	eba0 0308 	sub.w	r3, r0, r8
 8006640:	fa09 f303 	lsl.w	r3, r9, r3
 8006644:	4313      	orrs	r3, r2
 8006646:	9304      	str	r3, [sp, #16]
 8006648:	46a2      	mov	sl, r4
 800664a:	e7d2      	b.n	80065f2 <_vfiprintf_r+0xe2>
 800664c:	9b03      	ldr	r3, [sp, #12]
 800664e:	1d19      	adds	r1, r3, #4
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	9103      	str	r1, [sp, #12]
 8006654:	2b00      	cmp	r3, #0
 8006656:	bfbb      	ittet	lt
 8006658:	425b      	neglt	r3, r3
 800665a:	f042 0202 	orrlt.w	r2, r2, #2
 800665e:	9307      	strge	r3, [sp, #28]
 8006660:	9307      	strlt	r3, [sp, #28]
 8006662:	bfb8      	it	lt
 8006664:	9204      	strlt	r2, [sp, #16]
 8006666:	7823      	ldrb	r3, [r4, #0]
 8006668:	2b2e      	cmp	r3, #46	; 0x2e
 800666a:	d10c      	bne.n	8006686 <_vfiprintf_r+0x176>
 800666c:	7863      	ldrb	r3, [r4, #1]
 800666e:	2b2a      	cmp	r3, #42	; 0x2a
 8006670:	d135      	bne.n	80066de <_vfiprintf_r+0x1ce>
 8006672:	9b03      	ldr	r3, [sp, #12]
 8006674:	1d1a      	adds	r2, r3, #4
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	9203      	str	r2, [sp, #12]
 800667a:	2b00      	cmp	r3, #0
 800667c:	bfb8      	it	lt
 800667e:	f04f 33ff 	movlt.w	r3, #4294967295
 8006682:	3402      	adds	r4, #2
 8006684:	9305      	str	r3, [sp, #20]
 8006686:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800676c <_vfiprintf_r+0x25c>
 800668a:	7821      	ldrb	r1, [r4, #0]
 800668c:	2203      	movs	r2, #3
 800668e:	4650      	mov	r0, sl
 8006690:	f7f9 fdbe 	bl	8000210 <memchr>
 8006694:	b140      	cbz	r0, 80066a8 <_vfiprintf_r+0x198>
 8006696:	2340      	movs	r3, #64	; 0x40
 8006698:	eba0 000a 	sub.w	r0, r0, sl
 800669c:	fa03 f000 	lsl.w	r0, r3, r0
 80066a0:	9b04      	ldr	r3, [sp, #16]
 80066a2:	4303      	orrs	r3, r0
 80066a4:	3401      	adds	r4, #1
 80066a6:	9304      	str	r3, [sp, #16]
 80066a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80066ac:	482c      	ldr	r0, [pc, #176]	; (8006760 <_vfiprintf_r+0x250>)
 80066ae:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80066b2:	2206      	movs	r2, #6
 80066b4:	f7f9 fdac 	bl	8000210 <memchr>
 80066b8:	2800      	cmp	r0, #0
 80066ba:	d03f      	beq.n	800673c <_vfiprintf_r+0x22c>
 80066bc:	4b29      	ldr	r3, [pc, #164]	; (8006764 <_vfiprintf_r+0x254>)
 80066be:	bb1b      	cbnz	r3, 8006708 <_vfiprintf_r+0x1f8>
 80066c0:	9b03      	ldr	r3, [sp, #12]
 80066c2:	3307      	adds	r3, #7
 80066c4:	f023 0307 	bic.w	r3, r3, #7
 80066c8:	3308      	adds	r3, #8
 80066ca:	9303      	str	r3, [sp, #12]
 80066cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80066ce:	443b      	add	r3, r7
 80066d0:	9309      	str	r3, [sp, #36]	; 0x24
 80066d2:	e767      	b.n	80065a4 <_vfiprintf_r+0x94>
 80066d4:	fb0c 3202 	mla	r2, ip, r2, r3
 80066d8:	460c      	mov	r4, r1
 80066da:	2001      	movs	r0, #1
 80066dc:	e7a5      	b.n	800662a <_vfiprintf_r+0x11a>
 80066de:	2300      	movs	r3, #0
 80066e0:	3401      	adds	r4, #1
 80066e2:	9305      	str	r3, [sp, #20]
 80066e4:	4619      	mov	r1, r3
 80066e6:	f04f 0c0a 	mov.w	ip, #10
 80066ea:	4620      	mov	r0, r4
 80066ec:	f810 2b01 	ldrb.w	r2, [r0], #1
 80066f0:	3a30      	subs	r2, #48	; 0x30
 80066f2:	2a09      	cmp	r2, #9
 80066f4:	d903      	bls.n	80066fe <_vfiprintf_r+0x1ee>
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d0c5      	beq.n	8006686 <_vfiprintf_r+0x176>
 80066fa:	9105      	str	r1, [sp, #20]
 80066fc:	e7c3      	b.n	8006686 <_vfiprintf_r+0x176>
 80066fe:	fb0c 2101 	mla	r1, ip, r1, r2
 8006702:	4604      	mov	r4, r0
 8006704:	2301      	movs	r3, #1
 8006706:	e7f0      	b.n	80066ea <_vfiprintf_r+0x1da>
 8006708:	ab03      	add	r3, sp, #12
 800670a:	9300      	str	r3, [sp, #0]
 800670c:	462a      	mov	r2, r5
 800670e:	4b16      	ldr	r3, [pc, #88]	; (8006768 <_vfiprintf_r+0x258>)
 8006710:	a904      	add	r1, sp, #16
 8006712:	4630      	mov	r0, r6
 8006714:	f3af 8000 	nop.w
 8006718:	4607      	mov	r7, r0
 800671a:	1c78      	adds	r0, r7, #1
 800671c:	d1d6      	bne.n	80066cc <_vfiprintf_r+0x1bc>
 800671e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006720:	07d9      	lsls	r1, r3, #31
 8006722:	d405      	bmi.n	8006730 <_vfiprintf_r+0x220>
 8006724:	89ab      	ldrh	r3, [r5, #12]
 8006726:	059a      	lsls	r2, r3, #22
 8006728:	d402      	bmi.n	8006730 <_vfiprintf_r+0x220>
 800672a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800672c:	f7ff fd7f 	bl	800622e <__retarget_lock_release_recursive>
 8006730:	89ab      	ldrh	r3, [r5, #12]
 8006732:	065b      	lsls	r3, r3, #25
 8006734:	f53f af12 	bmi.w	800655c <_vfiprintf_r+0x4c>
 8006738:	9809      	ldr	r0, [sp, #36]	; 0x24
 800673a:	e711      	b.n	8006560 <_vfiprintf_r+0x50>
 800673c:	ab03      	add	r3, sp, #12
 800673e:	9300      	str	r3, [sp, #0]
 8006740:	462a      	mov	r2, r5
 8006742:	4b09      	ldr	r3, [pc, #36]	; (8006768 <_vfiprintf_r+0x258>)
 8006744:	a904      	add	r1, sp, #16
 8006746:	4630      	mov	r0, r6
 8006748:	f000 f880 	bl	800684c <_printf_i>
 800674c:	e7e4      	b.n	8006718 <_vfiprintf_r+0x208>
 800674e:	bf00      	nop
 8006750:	08006fc4 	.word	0x08006fc4
 8006754:	08006fe4 	.word	0x08006fe4
 8006758:	08006fa4 	.word	0x08006fa4
 800675c:	08007004 	.word	0x08007004
 8006760:	0800700e 	.word	0x0800700e
 8006764:	00000000 	.word	0x00000000
 8006768:	080064eb 	.word	0x080064eb
 800676c:	0800700a 	.word	0x0800700a

08006770 <_printf_common>:
 8006770:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006774:	4616      	mov	r6, r2
 8006776:	4699      	mov	r9, r3
 8006778:	688a      	ldr	r2, [r1, #8]
 800677a:	690b      	ldr	r3, [r1, #16]
 800677c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006780:	4293      	cmp	r3, r2
 8006782:	bfb8      	it	lt
 8006784:	4613      	movlt	r3, r2
 8006786:	6033      	str	r3, [r6, #0]
 8006788:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800678c:	4607      	mov	r7, r0
 800678e:	460c      	mov	r4, r1
 8006790:	b10a      	cbz	r2, 8006796 <_printf_common+0x26>
 8006792:	3301      	adds	r3, #1
 8006794:	6033      	str	r3, [r6, #0]
 8006796:	6823      	ldr	r3, [r4, #0]
 8006798:	0699      	lsls	r1, r3, #26
 800679a:	bf42      	ittt	mi
 800679c:	6833      	ldrmi	r3, [r6, #0]
 800679e:	3302      	addmi	r3, #2
 80067a0:	6033      	strmi	r3, [r6, #0]
 80067a2:	6825      	ldr	r5, [r4, #0]
 80067a4:	f015 0506 	ands.w	r5, r5, #6
 80067a8:	d106      	bne.n	80067b8 <_printf_common+0x48>
 80067aa:	f104 0a19 	add.w	sl, r4, #25
 80067ae:	68e3      	ldr	r3, [r4, #12]
 80067b0:	6832      	ldr	r2, [r6, #0]
 80067b2:	1a9b      	subs	r3, r3, r2
 80067b4:	42ab      	cmp	r3, r5
 80067b6:	dc26      	bgt.n	8006806 <_printf_common+0x96>
 80067b8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80067bc:	1e13      	subs	r3, r2, #0
 80067be:	6822      	ldr	r2, [r4, #0]
 80067c0:	bf18      	it	ne
 80067c2:	2301      	movne	r3, #1
 80067c4:	0692      	lsls	r2, r2, #26
 80067c6:	d42b      	bmi.n	8006820 <_printf_common+0xb0>
 80067c8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80067cc:	4649      	mov	r1, r9
 80067ce:	4638      	mov	r0, r7
 80067d0:	47c0      	blx	r8
 80067d2:	3001      	adds	r0, #1
 80067d4:	d01e      	beq.n	8006814 <_printf_common+0xa4>
 80067d6:	6823      	ldr	r3, [r4, #0]
 80067d8:	68e5      	ldr	r5, [r4, #12]
 80067da:	6832      	ldr	r2, [r6, #0]
 80067dc:	f003 0306 	and.w	r3, r3, #6
 80067e0:	2b04      	cmp	r3, #4
 80067e2:	bf08      	it	eq
 80067e4:	1aad      	subeq	r5, r5, r2
 80067e6:	68a3      	ldr	r3, [r4, #8]
 80067e8:	6922      	ldr	r2, [r4, #16]
 80067ea:	bf0c      	ite	eq
 80067ec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80067f0:	2500      	movne	r5, #0
 80067f2:	4293      	cmp	r3, r2
 80067f4:	bfc4      	itt	gt
 80067f6:	1a9b      	subgt	r3, r3, r2
 80067f8:	18ed      	addgt	r5, r5, r3
 80067fa:	2600      	movs	r6, #0
 80067fc:	341a      	adds	r4, #26
 80067fe:	42b5      	cmp	r5, r6
 8006800:	d11a      	bne.n	8006838 <_printf_common+0xc8>
 8006802:	2000      	movs	r0, #0
 8006804:	e008      	b.n	8006818 <_printf_common+0xa8>
 8006806:	2301      	movs	r3, #1
 8006808:	4652      	mov	r2, sl
 800680a:	4649      	mov	r1, r9
 800680c:	4638      	mov	r0, r7
 800680e:	47c0      	blx	r8
 8006810:	3001      	adds	r0, #1
 8006812:	d103      	bne.n	800681c <_printf_common+0xac>
 8006814:	f04f 30ff 	mov.w	r0, #4294967295
 8006818:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800681c:	3501      	adds	r5, #1
 800681e:	e7c6      	b.n	80067ae <_printf_common+0x3e>
 8006820:	18e1      	adds	r1, r4, r3
 8006822:	1c5a      	adds	r2, r3, #1
 8006824:	2030      	movs	r0, #48	; 0x30
 8006826:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800682a:	4422      	add	r2, r4
 800682c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006830:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006834:	3302      	adds	r3, #2
 8006836:	e7c7      	b.n	80067c8 <_printf_common+0x58>
 8006838:	2301      	movs	r3, #1
 800683a:	4622      	mov	r2, r4
 800683c:	4649      	mov	r1, r9
 800683e:	4638      	mov	r0, r7
 8006840:	47c0      	blx	r8
 8006842:	3001      	adds	r0, #1
 8006844:	d0e6      	beq.n	8006814 <_printf_common+0xa4>
 8006846:	3601      	adds	r6, #1
 8006848:	e7d9      	b.n	80067fe <_printf_common+0x8e>
	...

0800684c <_printf_i>:
 800684c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006850:	7e0f      	ldrb	r7, [r1, #24]
 8006852:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006854:	2f78      	cmp	r7, #120	; 0x78
 8006856:	4691      	mov	r9, r2
 8006858:	4680      	mov	r8, r0
 800685a:	460c      	mov	r4, r1
 800685c:	469a      	mov	sl, r3
 800685e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006862:	d807      	bhi.n	8006874 <_printf_i+0x28>
 8006864:	2f62      	cmp	r7, #98	; 0x62
 8006866:	d80a      	bhi.n	800687e <_printf_i+0x32>
 8006868:	2f00      	cmp	r7, #0
 800686a:	f000 80d8 	beq.w	8006a1e <_printf_i+0x1d2>
 800686e:	2f58      	cmp	r7, #88	; 0x58
 8006870:	f000 80a3 	beq.w	80069ba <_printf_i+0x16e>
 8006874:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006878:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800687c:	e03a      	b.n	80068f4 <_printf_i+0xa8>
 800687e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006882:	2b15      	cmp	r3, #21
 8006884:	d8f6      	bhi.n	8006874 <_printf_i+0x28>
 8006886:	a101      	add	r1, pc, #4	; (adr r1, 800688c <_printf_i+0x40>)
 8006888:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800688c:	080068e5 	.word	0x080068e5
 8006890:	080068f9 	.word	0x080068f9
 8006894:	08006875 	.word	0x08006875
 8006898:	08006875 	.word	0x08006875
 800689c:	08006875 	.word	0x08006875
 80068a0:	08006875 	.word	0x08006875
 80068a4:	080068f9 	.word	0x080068f9
 80068a8:	08006875 	.word	0x08006875
 80068ac:	08006875 	.word	0x08006875
 80068b0:	08006875 	.word	0x08006875
 80068b4:	08006875 	.word	0x08006875
 80068b8:	08006a05 	.word	0x08006a05
 80068bc:	08006929 	.word	0x08006929
 80068c0:	080069e7 	.word	0x080069e7
 80068c4:	08006875 	.word	0x08006875
 80068c8:	08006875 	.word	0x08006875
 80068cc:	08006a27 	.word	0x08006a27
 80068d0:	08006875 	.word	0x08006875
 80068d4:	08006929 	.word	0x08006929
 80068d8:	08006875 	.word	0x08006875
 80068dc:	08006875 	.word	0x08006875
 80068e0:	080069ef 	.word	0x080069ef
 80068e4:	682b      	ldr	r3, [r5, #0]
 80068e6:	1d1a      	adds	r2, r3, #4
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	602a      	str	r2, [r5, #0]
 80068ec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80068f0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80068f4:	2301      	movs	r3, #1
 80068f6:	e0a3      	b.n	8006a40 <_printf_i+0x1f4>
 80068f8:	6820      	ldr	r0, [r4, #0]
 80068fa:	6829      	ldr	r1, [r5, #0]
 80068fc:	0606      	lsls	r6, r0, #24
 80068fe:	f101 0304 	add.w	r3, r1, #4
 8006902:	d50a      	bpl.n	800691a <_printf_i+0xce>
 8006904:	680e      	ldr	r6, [r1, #0]
 8006906:	602b      	str	r3, [r5, #0]
 8006908:	2e00      	cmp	r6, #0
 800690a:	da03      	bge.n	8006914 <_printf_i+0xc8>
 800690c:	232d      	movs	r3, #45	; 0x2d
 800690e:	4276      	negs	r6, r6
 8006910:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006914:	485e      	ldr	r0, [pc, #376]	; (8006a90 <_printf_i+0x244>)
 8006916:	230a      	movs	r3, #10
 8006918:	e019      	b.n	800694e <_printf_i+0x102>
 800691a:	680e      	ldr	r6, [r1, #0]
 800691c:	602b      	str	r3, [r5, #0]
 800691e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006922:	bf18      	it	ne
 8006924:	b236      	sxthne	r6, r6
 8006926:	e7ef      	b.n	8006908 <_printf_i+0xbc>
 8006928:	682b      	ldr	r3, [r5, #0]
 800692a:	6820      	ldr	r0, [r4, #0]
 800692c:	1d19      	adds	r1, r3, #4
 800692e:	6029      	str	r1, [r5, #0]
 8006930:	0601      	lsls	r1, r0, #24
 8006932:	d501      	bpl.n	8006938 <_printf_i+0xec>
 8006934:	681e      	ldr	r6, [r3, #0]
 8006936:	e002      	b.n	800693e <_printf_i+0xf2>
 8006938:	0646      	lsls	r6, r0, #25
 800693a:	d5fb      	bpl.n	8006934 <_printf_i+0xe8>
 800693c:	881e      	ldrh	r6, [r3, #0]
 800693e:	4854      	ldr	r0, [pc, #336]	; (8006a90 <_printf_i+0x244>)
 8006940:	2f6f      	cmp	r7, #111	; 0x6f
 8006942:	bf0c      	ite	eq
 8006944:	2308      	moveq	r3, #8
 8006946:	230a      	movne	r3, #10
 8006948:	2100      	movs	r1, #0
 800694a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800694e:	6865      	ldr	r5, [r4, #4]
 8006950:	60a5      	str	r5, [r4, #8]
 8006952:	2d00      	cmp	r5, #0
 8006954:	bfa2      	ittt	ge
 8006956:	6821      	ldrge	r1, [r4, #0]
 8006958:	f021 0104 	bicge.w	r1, r1, #4
 800695c:	6021      	strge	r1, [r4, #0]
 800695e:	b90e      	cbnz	r6, 8006964 <_printf_i+0x118>
 8006960:	2d00      	cmp	r5, #0
 8006962:	d04d      	beq.n	8006a00 <_printf_i+0x1b4>
 8006964:	4615      	mov	r5, r2
 8006966:	fbb6 f1f3 	udiv	r1, r6, r3
 800696a:	fb03 6711 	mls	r7, r3, r1, r6
 800696e:	5dc7      	ldrb	r7, [r0, r7]
 8006970:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006974:	4637      	mov	r7, r6
 8006976:	42bb      	cmp	r3, r7
 8006978:	460e      	mov	r6, r1
 800697a:	d9f4      	bls.n	8006966 <_printf_i+0x11a>
 800697c:	2b08      	cmp	r3, #8
 800697e:	d10b      	bne.n	8006998 <_printf_i+0x14c>
 8006980:	6823      	ldr	r3, [r4, #0]
 8006982:	07de      	lsls	r6, r3, #31
 8006984:	d508      	bpl.n	8006998 <_printf_i+0x14c>
 8006986:	6923      	ldr	r3, [r4, #16]
 8006988:	6861      	ldr	r1, [r4, #4]
 800698a:	4299      	cmp	r1, r3
 800698c:	bfde      	ittt	le
 800698e:	2330      	movle	r3, #48	; 0x30
 8006990:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006994:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006998:	1b52      	subs	r2, r2, r5
 800699a:	6122      	str	r2, [r4, #16]
 800699c:	f8cd a000 	str.w	sl, [sp]
 80069a0:	464b      	mov	r3, r9
 80069a2:	aa03      	add	r2, sp, #12
 80069a4:	4621      	mov	r1, r4
 80069a6:	4640      	mov	r0, r8
 80069a8:	f7ff fee2 	bl	8006770 <_printf_common>
 80069ac:	3001      	adds	r0, #1
 80069ae:	d14c      	bne.n	8006a4a <_printf_i+0x1fe>
 80069b0:	f04f 30ff 	mov.w	r0, #4294967295
 80069b4:	b004      	add	sp, #16
 80069b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80069ba:	4835      	ldr	r0, [pc, #212]	; (8006a90 <_printf_i+0x244>)
 80069bc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80069c0:	6829      	ldr	r1, [r5, #0]
 80069c2:	6823      	ldr	r3, [r4, #0]
 80069c4:	f851 6b04 	ldr.w	r6, [r1], #4
 80069c8:	6029      	str	r1, [r5, #0]
 80069ca:	061d      	lsls	r5, r3, #24
 80069cc:	d514      	bpl.n	80069f8 <_printf_i+0x1ac>
 80069ce:	07df      	lsls	r7, r3, #31
 80069d0:	bf44      	itt	mi
 80069d2:	f043 0320 	orrmi.w	r3, r3, #32
 80069d6:	6023      	strmi	r3, [r4, #0]
 80069d8:	b91e      	cbnz	r6, 80069e2 <_printf_i+0x196>
 80069da:	6823      	ldr	r3, [r4, #0]
 80069dc:	f023 0320 	bic.w	r3, r3, #32
 80069e0:	6023      	str	r3, [r4, #0]
 80069e2:	2310      	movs	r3, #16
 80069e4:	e7b0      	b.n	8006948 <_printf_i+0xfc>
 80069e6:	6823      	ldr	r3, [r4, #0]
 80069e8:	f043 0320 	orr.w	r3, r3, #32
 80069ec:	6023      	str	r3, [r4, #0]
 80069ee:	2378      	movs	r3, #120	; 0x78
 80069f0:	4828      	ldr	r0, [pc, #160]	; (8006a94 <_printf_i+0x248>)
 80069f2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80069f6:	e7e3      	b.n	80069c0 <_printf_i+0x174>
 80069f8:	0659      	lsls	r1, r3, #25
 80069fa:	bf48      	it	mi
 80069fc:	b2b6      	uxthmi	r6, r6
 80069fe:	e7e6      	b.n	80069ce <_printf_i+0x182>
 8006a00:	4615      	mov	r5, r2
 8006a02:	e7bb      	b.n	800697c <_printf_i+0x130>
 8006a04:	682b      	ldr	r3, [r5, #0]
 8006a06:	6826      	ldr	r6, [r4, #0]
 8006a08:	6961      	ldr	r1, [r4, #20]
 8006a0a:	1d18      	adds	r0, r3, #4
 8006a0c:	6028      	str	r0, [r5, #0]
 8006a0e:	0635      	lsls	r5, r6, #24
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	d501      	bpl.n	8006a18 <_printf_i+0x1cc>
 8006a14:	6019      	str	r1, [r3, #0]
 8006a16:	e002      	b.n	8006a1e <_printf_i+0x1d2>
 8006a18:	0670      	lsls	r0, r6, #25
 8006a1a:	d5fb      	bpl.n	8006a14 <_printf_i+0x1c8>
 8006a1c:	8019      	strh	r1, [r3, #0]
 8006a1e:	2300      	movs	r3, #0
 8006a20:	6123      	str	r3, [r4, #16]
 8006a22:	4615      	mov	r5, r2
 8006a24:	e7ba      	b.n	800699c <_printf_i+0x150>
 8006a26:	682b      	ldr	r3, [r5, #0]
 8006a28:	1d1a      	adds	r2, r3, #4
 8006a2a:	602a      	str	r2, [r5, #0]
 8006a2c:	681d      	ldr	r5, [r3, #0]
 8006a2e:	6862      	ldr	r2, [r4, #4]
 8006a30:	2100      	movs	r1, #0
 8006a32:	4628      	mov	r0, r5
 8006a34:	f7f9 fbec 	bl	8000210 <memchr>
 8006a38:	b108      	cbz	r0, 8006a3e <_printf_i+0x1f2>
 8006a3a:	1b40      	subs	r0, r0, r5
 8006a3c:	6060      	str	r0, [r4, #4]
 8006a3e:	6863      	ldr	r3, [r4, #4]
 8006a40:	6123      	str	r3, [r4, #16]
 8006a42:	2300      	movs	r3, #0
 8006a44:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006a48:	e7a8      	b.n	800699c <_printf_i+0x150>
 8006a4a:	6923      	ldr	r3, [r4, #16]
 8006a4c:	462a      	mov	r2, r5
 8006a4e:	4649      	mov	r1, r9
 8006a50:	4640      	mov	r0, r8
 8006a52:	47d0      	blx	sl
 8006a54:	3001      	adds	r0, #1
 8006a56:	d0ab      	beq.n	80069b0 <_printf_i+0x164>
 8006a58:	6823      	ldr	r3, [r4, #0]
 8006a5a:	079b      	lsls	r3, r3, #30
 8006a5c:	d413      	bmi.n	8006a86 <_printf_i+0x23a>
 8006a5e:	68e0      	ldr	r0, [r4, #12]
 8006a60:	9b03      	ldr	r3, [sp, #12]
 8006a62:	4298      	cmp	r0, r3
 8006a64:	bfb8      	it	lt
 8006a66:	4618      	movlt	r0, r3
 8006a68:	e7a4      	b.n	80069b4 <_printf_i+0x168>
 8006a6a:	2301      	movs	r3, #1
 8006a6c:	4632      	mov	r2, r6
 8006a6e:	4649      	mov	r1, r9
 8006a70:	4640      	mov	r0, r8
 8006a72:	47d0      	blx	sl
 8006a74:	3001      	adds	r0, #1
 8006a76:	d09b      	beq.n	80069b0 <_printf_i+0x164>
 8006a78:	3501      	adds	r5, #1
 8006a7a:	68e3      	ldr	r3, [r4, #12]
 8006a7c:	9903      	ldr	r1, [sp, #12]
 8006a7e:	1a5b      	subs	r3, r3, r1
 8006a80:	42ab      	cmp	r3, r5
 8006a82:	dcf2      	bgt.n	8006a6a <_printf_i+0x21e>
 8006a84:	e7eb      	b.n	8006a5e <_printf_i+0x212>
 8006a86:	2500      	movs	r5, #0
 8006a88:	f104 0619 	add.w	r6, r4, #25
 8006a8c:	e7f5      	b.n	8006a7a <_printf_i+0x22e>
 8006a8e:	bf00      	nop
 8006a90:	08007015 	.word	0x08007015
 8006a94:	08007026 	.word	0x08007026

08006a98 <_sbrk_r>:
 8006a98:	b538      	push	{r3, r4, r5, lr}
 8006a9a:	4d06      	ldr	r5, [pc, #24]	; (8006ab4 <_sbrk_r+0x1c>)
 8006a9c:	2300      	movs	r3, #0
 8006a9e:	4604      	mov	r4, r0
 8006aa0:	4608      	mov	r0, r1
 8006aa2:	602b      	str	r3, [r5, #0]
 8006aa4:	f7fa fdd4 	bl	8001650 <_sbrk>
 8006aa8:	1c43      	adds	r3, r0, #1
 8006aaa:	d102      	bne.n	8006ab2 <_sbrk_r+0x1a>
 8006aac:	682b      	ldr	r3, [r5, #0]
 8006aae:	b103      	cbz	r3, 8006ab2 <_sbrk_r+0x1a>
 8006ab0:	6023      	str	r3, [r4, #0]
 8006ab2:	bd38      	pop	{r3, r4, r5, pc}
 8006ab4:	20005118 	.word	0x20005118

08006ab8 <__sread>:
 8006ab8:	b510      	push	{r4, lr}
 8006aba:	460c      	mov	r4, r1
 8006abc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ac0:	f000 f8a0 	bl	8006c04 <_read_r>
 8006ac4:	2800      	cmp	r0, #0
 8006ac6:	bfab      	itete	ge
 8006ac8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006aca:	89a3      	ldrhlt	r3, [r4, #12]
 8006acc:	181b      	addge	r3, r3, r0
 8006ace:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006ad2:	bfac      	ite	ge
 8006ad4:	6563      	strge	r3, [r4, #84]	; 0x54
 8006ad6:	81a3      	strhlt	r3, [r4, #12]
 8006ad8:	bd10      	pop	{r4, pc}

08006ada <__swrite>:
 8006ada:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006ade:	461f      	mov	r7, r3
 8006ae0:	898b      	ldrh	r3, [r1, #12]
 8006ae2:	05db      	lsls	r3, r3, #23
 8006ae4:	4605      	mov	r5, r0
 8006ae6:	460c      	mov	r4, r1
 8006ae8:	4616      	mov	r6, r2
 8006aea:	d505      	bpl.n	8006af8 <__swrite+0x1e>
 8006aec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006af0:	2302      	movs	r3, #2
 8006af2:	2200      	movs	r2, #0
 8006af4:	f000 f868 	bl	8006bc8 <_lseek_r>
 8006af8:	89a3      	ldrh	r3, [r4, #12]
 8006afa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006afe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006b02:	81a3      	strh	r3, [r4, #12]
 8006b04:	4632      	mov	r2, r6
 8006b06:	463b      	mov	r3, r7
 8006b08:	4628      	mov	r0, r5
 8006b0a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006b0e:	f000 b817 	b.w	8006b40 <_write_r>

08006b12 <__sseek>:
 8006b12:	b510      	push	{r4, lr}
 8006b14:	460c      	mov	r4, r1
 8006b16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006b1a:	f000 f855 	bl	8006bc8 <_lseek_r>
 8006b1e:	1c43      	adds	r3, r0, #1
 8006b20:	89a3      	ldrh	r3, [r4, #12]
 8006b22:	bf15      	itete	ne
 8006b24:	6560      	strne	r0, [r4, #84]	; 0x54
 8006b26:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006b2a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006b2e:	81a3      	strheq	r3, [r4, #12]
 8006b30:	bf18      	it	ne
 8006b32:	81a3      	strhne	r3, [r4, #12]
 8006b34:	bd10      	pop	{r4, pc}

08006b36 <__sclose>:
 8006b36:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006b3a:	f000 b813 	b.w	8006b64 <_close_r>
	...

08006b40 <_write_r>:
 8006b40:	b538      	push	{r3, r4, r5, lr}
 8006b42:	4d07      	ldr	r5, [pc, #28]	; (8006b60 <_write_r+0x20>)
 8006b44:	4604      	mov	r4, r0
 8006b46:	4608      	mov	r0, r1
 8006b48:	4611      	mov	r1, r2
 8006b4a:	2200      	movs	r2, #0
 8006b4c:	602a      	str	r2, [r5, #0]
 8006b4e:	461a      	mov	r2, r3
 8006b50:	f7fa f880 	bl	8000c54 <_write>
 8006b54:	1c43      	adds	r3, r0, #1
 8006b56:	d102      	bne.n	8006b5e <_write_r+0x1e>
 8006b58:	682b      	ldr	r3, [r5, #0]
 8006b5a:	b103      	cbz	r3, 8006b5e <_write_r+0x1e>
 8006b5c:	6023      	str	r3, [r4, #0]
 8006b5e:	bd38      	pop	{r3, r4, r5, pc}
 8006b60:	20005118 	.word	0x20005118

08006b64 <_close_r>:
 8006b64:	b538      	push	{r3, r4, r5, lr}
 8006b66:	4d06      	ldr	r5, [pc, #24]	; (8006b80 <_close_r+0x1c>)
 8006b68:	2300      	movs	r3, #0
 8006b6a:	4604      	mov	r4, r0
 8006b6c:	4608      	mov	r0, r1
 8006b6e:	602b      	str	r3, [r5, #0]
 8006b70:	f7fa fd39 	bl	80015e6 <_close>
 8006b74:	1c43      	adds	r3, r0, #1
 8006b76:	d102      	bne.n	8006b7e <_close_r+0x1a>
 8006b78:	682b      	ldr	r3, [r5, #0]
 8006b7a:	b103      	cbz	r3, 8006b7e <_close_r+0x1a>
 8006b7c:	6023      	str	r3, [r4, #0]
 8006b7e:	bd38      	pop	{r3, r4, r5, pc}
 8006b80:	20005118 	.word	0x20005118

08006b84 <_fstat_r>:
 8006b84:	b538      	push	{r3, r4, r5, lr}
 8006b86:	4d07      	ldr	r5, [pc, #28]	; (8006ba4 <_fstat_r+0x20>)
 8006b88:	2300      	movs	r3, #0
 8006b8a:	4604      	mov	r4, r0
 8006b8c:	4608      	mov	r0, r1
 8006b8e:	4611      	mov	r1, r2
 8006b90:	602b      	str	r3, [r5, #0]
 8006b92:	f7fa fd34 	bl	80015fe <_fstat>
 8006b96:	1c43      	adds	r3, r0, #1
 8006b98:	d102      	bne.n	8006ba0 <_fstat_r+0x1c>
 8006b9a:	682b      	ldr	r3, [r5, #0]
 8006b9c:	b103      	cbz	r3, 8006ba0 <_fstat_r+0x1c>
 8006b9e:	6023      	str	r3, [r4, #0]
 8006ba0:	bd38      	pop	{r3, r4, r5, pc}
 8006ba2:	bf00      	nop
 8006ba4:	20005118 	.word	0x20005118

08006ba8 <_isatty_r>:
 8006ba8:	b538      	push	{r3, r4, r5, lr}
 8006baa:	4d06      	ldr	r5, [pc, #24]	; (8006bc4 <_isatty_r+0x1c>)
 8006bac:	2300      	movs	r3, #0
 8006bae:	4604      	mov	r4, r0
 8006bb0:	4608      	mov	r0, r1
 8006bb2:	602b      	str	r3, [r5, #0]
 8006bb4:	f7fa fd33 	bl	800161e <_isatty>
 8006bb8:	1c43      	adds	r3, r0, #1
 8006bba:	d102      	bne.n	8006bc2 <_isatty_r+0x1a>
 8006bbc:	682b      	ldr	r3, [r5, #0]
 8006bbe:	b103      	cbz	r3, 8006bc2 <_isatty_r+0x1a>
 8006bc0:	6023      	str	r3, [r4, #0]
 8006bc2:	bd38      	pop	{r3, r4, r5, pc}
 8006bc4:	20005118 	.word	0x20005118

08006bc8 <_lseek_r>:
 8006bc8:	b538      	push	{r3, r4, r5, lr}
 8006bca:	4d07      	ldr	r5, [pc, #28]	; (8006be8 <_lseek_r+0x20>)
 8006bcc:	4604      	mov	r4, r0
 8006bce:	4608      	mov	r0, r1
 8006bd0:	4611      	mov	r1, r2
 8006bd2:	2200      	movs	r2, #0
 8006bd4:	602a      	str	r2, [r5, #0]
 8006bd6:	461a      	mov	r2, r3
 8006bd8:	f7fa fd2c 	bl	8001634 <_lseek>
 8006bdc:	1c43      	adds	r3, r0, #1
 8006bde:	d102      	bne.n	8006be6 <_lseek_r+0x1e>
 8006be0:	682b      	ldr	r3, [r5, #0]
 8006be2:	b103      	cbz	r3, 8006be6 <_lseek_r+0x1e>
 8006be4:	6023      	str	r3, [r4, #0]
 8006be6:	bd38      	pop	{r3, r4, r5, pc}
 8006be8:	20005118 	.word	0x20005118

08006bec <__malloc_lock>:
 8006bec:	4801      	ldr	r0, [pc, #4]	; (8006bf4 <__malloc_lock+0x8>)
 8006bee:	f7ff bb1d 	b.w	800622c <__retarget_lock_acquire_recursive>
 8006bf2:	bf00      	nop
 8006bf4:	2000510c 	.word	0x2000510c

08006bf8 <__malloc_unlock>:
 8006bf8:	4801      	ldr	r0, [pc, #4]	; (8006c00 <__malloc_unlock+0x8>)
 8006bfa:	f7ff bb18 	b.w	800622e <__retarget_lock_release_recursive>
 8006bfe:	bf00      	nop
 8006c00:	2000510c 	.word	0x2000510c

08006c04 <_read_r>:
 8006c04:	b538      	push	{r3, r4, r5, lr}
 8006c06:	4d07      	ldr	r5, [pc, #28]	; (8006c24 <_read_r+0x20>)
 8006c08:	4604      	mov	r4, r0
 8006c0a:	4608      	mov	r0, r1
 8006c0c:	4611      	mov	r1, r2
 8006c0e:	2200      	movs	r2, #0
 8006c10:	602a      	str	r2, [r5, #0]
 8006c12:	461a      	mov	r2, r3
 8006c14:	f7fa fcca 	bl	80015ac <_read>
 8006c18:	1c43      	adds	r3, r0, #1
 8006c1a:	d102      	bne.n	8006c22 <_read_r+0x1e>
 8006c1c:	682b      	ldr	r3, [r5, #0]
 8006c1e:	b103      	cbz	r3, 8006c22 <_read_r+0x1e>
 8006c20:	6023      	str	r3, [r4, #0]
 8006c22:	bd38      	pop	{r3, r4, r5, pc}
 8006c24:	20005118 	.word	0x20005118

08006c28 <_init>:
 8006c28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c2a:	bf00      	nop
 8006c2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c2e:	bc08      	pop	{r3}
 8006c30:	469e      	mov	lr, r3
 8006c32:	4770      	bx	lr

08006c34 <_fini>:
 8006c34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c36:	bf00      	nop
 8006c38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c3a:	bc08      	pop	{r3}
 8006c3c:	469e      	mov	lr, r3
 8006c3e:	4770      	bx	lr
