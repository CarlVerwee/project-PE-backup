
Display.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000825c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005d8  0800842c  0800842c  0001842c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008a04  08008a04  000227f0  2**0
                  CONTENTS
  4 .ARM          00000008  08008a04  08008a04  00018a04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008a0c  08008a0c  000227f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008a0c  08008a0c  00018a0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008a10  08008a10  00018a10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000027f0  20000000  08008a14  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000060c  200027f0  0800b204  000227f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002dfc  0800b204  00022dfc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000227f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001690e  00000000  00000000  00022820  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002bf3  00000000  00000000  0003912e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001360  00000000  00000000  0003bd28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001250  00000000  00000000  0003d088  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000283b1  00000000  00000000  0003e2d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018375  00000000  00000000  00066689  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f5e01  00000000  00000000  0007e9fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001747ff  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000059f4  00000000  00000000  00174850  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200027f0 	.word	0x200027f0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08008414 	.word	0x08008414

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200027f4 	.word	0x200027f4
 800020c:	08008414 	.word	0x08008414

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b974 	b.w	80005b0 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468e      	mov	lr, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14d      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4694      	mov	ip, r2
 80002f2:	d969      	bls.n	80003c8 <__udivmoddi4+0xe8>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b152      	cbz	r2, 8000310 <__udivmoddi4+0x30>
 80002fa:	fa01 f302 	lsl.w	r3, r1, r2
 80002fe:	f1c2 0120 	rsb	r1, r2, #32
 8000302:	fa20 f101 	lsr.w	r1, r0, r1
 8000306:	fa0c fc02 	lsl.w	ip, ip, r2
 800030a:	ea41 0e03 	orr.w	lr, r1, r3
 800030e:	4094      	lsls	r4, r2
 8000310:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000314:	0c21      	lsrs	r1, r4, #16
 8000316:	fbbe f6f8 	udiv	r6, lr, r8
 800031a:	fa1f f78c 	uxth.w	r7, ip
 800031e:	fb08 e316 	mls	r3, r8, r6, lr
 8000322:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000326:	fb06 f107 	mul.w	r1, r6, r7
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f106 30ff 	add.w	r0, r6, #4294967295
 8000336:	f080 811f 	bcs.w	8000578 <__udivmoddi4+0x298>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 811c 	bls.w	8000578 <__udivmoddi4+0x298>
 8000340:	3e02      	subs	r6, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a5b      	subs	r3, r3, r1
 8000346:	b2a4      	uxth	r4, r4
 8000348:	fbb3 f0f8 	udiv	r0, r3, r8
 800034c:	fb08 3310 	mls	r3, r8, r0, r3
 8000350:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000354:	fb00 f707 	mul.w	r7, r0, r7
 8000358:	42a7      	cmp	r7, r4
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x92>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f100 33ff 	add.w	r3, r0, #4294967295
 8000364:	f080 810a 	bcs.w	800057c <__udivmoddi4+0x29c>
 8000368:	42a7      	cmp	r7, r4
 800036a:	f240 8107 	bls.w	800057c <__udivmoddi4+0x29c>
 800036e:	4464      	add	r4, ip
 8000370:	3802      	subs	r0, #2
 8000372:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000376:	1be4      	subs	r4, r4, r7
 8000378:	2600      	movs	r6, #0
 800037a:	b11d      	cbz	r5, 8000384 <__udivmoddi4+0xa4>
 800037c:	40d4      	lsrs	r4, r2
 800037e:	2300      	movs	r3, #0
 8000380:	e9c5 4300 	strd	r4, r3, [r5]
 8000384:	4631      	mov	r1, r6
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d909      	bls.n	80003a2 <__udivmoddi4+0xc2>
 800038e:	2d00      	cmp	r5, #0
 8000390:	f000 80ef 	beq.w	8000572 <__udivmoddi4+0x292>
 8000394:	2600      	movs	r6, #0
 8000396:	e9c5 0100 	strd	r0, r1, [r5]
 800039a:	4630      	mov	r0, r6
 800039c:	4631      	mov	r1, r6
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	fab3 f683 	clz	r6, r3
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d14a      	bne.n	8000440 <__udivmoddi4+0x160>
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d302      	bcc.n	80003b4 <__udivmoddi4+0xd4>
 80003ae:	4282      	cmp	r2, r0
 80003b0:	f200 80f9 	bhi.w	80005a6 <__udivmoddi4+0x2c6>
 80003b4:	1a84      	subs	r4, r0, r2
 80003b6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ba:	2001      	movs	r0, #1
 80003bc:	469e      	mov	lr, r3
 80003be:	2d00      	cmp	r5, #0
 80003c0:	d0e0      	beq.n	8000384 <__udivmoddi4+0xa4>
 80003c2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003c6:	e7dd      	b.n	8000384 <__udivmoddi4+0xa4>
 80003c8:	b902      	cbnz	r2, 80003cc <__udivmoddi4+0xec>
 80003ca:	deff      	udf	#255	; 0xff
 80003cc:	fab2 f282 	clz	r2, r2
 80003d0:	2a00      	cmp	r2, #0
 80003d2:	f040 8092 	bne.w	80004fa <__udivmoddi4+0x21a>
 80003d6:	eba1 010c 	sub.w	r1, r1, ip
 80003da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003de:	fa1f fe8c 	uxth.w	lr, ip
 80003e2:	2601      	movs	r6, #1
 80003e4:	0c20      	lsrs	r0, r4, #16
 80003e6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ea:	fb07 1113 	mls	r1, r7, r3, r1
 80003ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f2:	fb0e f003 	mul.w	r0, lr, r3
 80003f6:	4288      	cmp	r0, r1
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x12c>
 80003fa:	eb1c 0101 	adds.w	r1, ip, r1
 80003fe:	f103 38ff 	add.w	r8, r3, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x12a>
 8000404:	4288      	cmp	r0, r1
 8000406:	f200 80cb 	bhi.w	80005a0 <__udivmoddi4+0x2c0>
 800040a:	4643      	mov	r3, r8
 800040c:	1a09      	subs	r1, r1, r0
 800040e:	b2a4      	uxth	r4, r4
 8000410:	fbb1 f0f7 	udiv	r0, r1, r7
 8000414:	fb07 1110 	mls	r1, r7, r0, r1
 8000418:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800041c:	fb0e fe00 	mul.w	lr, lr, r0
 8000420:	45a6      	cmp	lr, r4
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x156>
 8000424:	eb1c 0404 	adds.w	r4, ip, r4
 8000428:	f100 31ff 	add.w	r1, r0, #4294967295
 800042c:	d202      	bcs.n	8000434 <__udivmoddi4+0x154>
 800042e:	45a6      	cmp	lr, r4
 8000430:	f200 80bb 	bhi.w	80005aa <__udivmoddi4+0x2ca>
 8000434:	4608      	mov	r0, r1
 8000436:	eba4 040e 	sub.w	r4, r4, lr
 800043a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800043e:	e79c      	b.n	800037a <__udivmoddi4+0x9a>
 8000440:	f1c6 0720 	rsb	r7, r6, #32
 8000444:	40b3      	lsls	r3, r6
 8000446:	fa22 fc07 	lsr.w	ip, r2, r7
 800044a:	ea4c 0c03 	orr.w	ip, ip, r3
 800044e:	fa20 f407 	lsr.w	r4, r0, r7
 8000452:	fa01 f306 	lsl.w	r3, r1, r6
 8000456:	431c      	orrs	r4, r3
 8000458:	40f9      	lsrs	r1, r7
 800045a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800045e:	fa00 f306 	lsl.w	r3, r0, r6
 8000462:	fbb1 f8f9 	udiv	r8, r1, r9
 8000466:	0c20      	lsrs	r0, r4, #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fb09 1118 	mls	r1, r9, r8, r1
 8000470:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000474:	fb08 f00e 	mul.w	r0, r8, lr
 8000478:	4288      	cmp	r0, r1
 800047a:	fa02 f206 	lsl.w	r2, r2, r6
 800047e:	d90b      	bls.n	8000498 <__udivmoddi4+0x1b8>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f108 3aff 	add.w	sl, r8, #4294967295
 8000488:	f080 8088 	bcs.w	800059c <__udivmoddi4+0x2bc>
 800048c:	4288      	cmp	r0, r1
 800048e:	f240 8085 	bls.w	800059c <__udivmoddi4+0x2bc>
 8000492:	f1a8 0802 	sub.w	r8, r8, #2
 8000496:	4461      	add	r1, ip
 8000498:	1a09      	subs	r1, r1, r0
 800049a:	b2a4      	uxth	r4, r4
 800049c:	fbb1 f0f9 	udiv	r0, r1, r9
 80004a0:	fb09 1110 	mls	r1, r9, r0, r1
 80004a4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ac:	458e      	cmp	lr, r1
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x1e2>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004b8:	d26c      	bcs.n	8000594 <__udivmoddi4+0x2b4>
 80004ba:	458e      	cmp	lr, r1
 80004bc:	d96a      	bls.n	8000594 <__udivmoddi4+0x2b4>
 80004be:	3802      	subs	r0, #2
 80004c0:	4461      	add	r1, ip
 80004c2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004c6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ca:	eba1 010e 	sub.w	r1, r1, lr
 80004ce:	42a1      	cmp	r1, r4
 80004d0:	46c8      	mov	r8, r9
 80004d2:	46a6      	mov	lr, r4
 80004d4:	d356      	bcc.n	8000584 <__udivmoddi4+0x2a4>
 80004d6:	d053      	beq.n	8000580 <__udivmoddi4+0x2a0>
 80004d8:	b15d      	cbz	r5, 80004f2 <__udivmoddi4+0x212>
 80004da:	ebb3 0208 	subs.w	r2, r3, r8
 80004de:	eb61 010e 	sbc.w	r1, r1, lr
 80004e2:	fa01 f707 	lsl.w	r7, r1, r7
 80004e6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ea:	40f1      	lsrs	r1, r6
 80004ec:	431f      	orrs	r7, r3
 80004ee:	e9c5 7100 	strd	r7, r1, [r5]
 80004f2:	2600      	movs	r6, #0
 80004f4:	4631      	mov	r1, r6
 80004f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004fa:	f1c2 0320 	rsb	r3, r2, #32
 80004fe:	40d8      	lsrs	r0, r3
 8000500:	fa0c fc02 	lsl.w	ip, ip, r2
 8000504:	fa21 f303 	lsr.w	r3, r1, r3
 8000508:	4091      	lsls	r1, r2
 800050a:	4301      	orrs	r1, r0
 800050c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000510:	fa1f fe8c 	uxth.w	lr, ip
 8000514:	fbb3 f0f7 	udiv	r0, r3, r7
 8000518:	fb07 3610 	mls	r6, r7, r0, r3
 800051c:	0c0b      	lsrs	r3, r1, #16
 800051e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000522:	fb00 f60e 	mul.w	r6, r0, lr
 8000526:	429e      	cmp	r6, r3
 8000528:	fa04 f402 	lsl.w	r4, r4, r2
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x260>
 800052e:	eb1c 0303 	adds.w	r3, ip, r3
 8000532:	f100 38ff 	add.w	r8, r0, #4294967295
 8000536:	d22f      	bcs.n	8000598 <__udivmoddi4+0x2b8>
 8000538:	429e      	cmp	r6, r3
 800053a:	d92d      	bls.n	8000598 <__udivmoddi4+0x2b8>
 800053c:	3802      	subs	r0, #2
 800053e:	4463      	add	r3, ip
 8000540:	1b9b      	subs	r3, r3, r6
 8000542:	b289      	uxth	r1, r1
 8000544:	fbb3 f6f7 	udiv	r6, r3, r7
 8000548:	fb07 3316 	mls	r3, r7, r6, r3
 800054c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000550:	fb06 f30e 	mul.w	r3, r6, lr
 8000554:	428b      	cmp	r3, r1
 8000556:	d908      	bls.n	800056a <__udivmoddi4+0x28a>
 8000558:	eb1c 0101 	adds.w	r1, ip, r1
 800055c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000560:	d216      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000562:	428b      	cmp	r3, r1
 8000564:	d914      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000566:	3e02      	subs	r6, #2
 8000568:	4461      	add	r1, ip
 800056a:	1ac9      	subs	r1, r1, r3
 800056c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000570:	e738      	b.n	80003e4 <__udivmoddi4+0x104>
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e705      	b.n	8000384 <__udivmoddi4+0xa4>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e3      	b.n	8000344 <__udivmoddi4+0x64>
 800057c:	4618      	mov	r0, r3
 800057e:	e6f8      	b.n	8000372 <__udivmoddi4+0x92>
 8000580:	454b      	cmp	r3, r9
 8000582:	d2a9      	bcs.n	80004d8 <__udivmoddi4+0x1f8>
 8000584:	ebb9 0802 	subs.w	r8, r9, r2
 8000588:	eb64 0e0c 	sbc.w	lr, r4, ip
 800058c:	3801      	subs	r0, #1
 800058e:	e7a3      	b.n	80004d8 <__udivmoddi4+0x1f8>
 8000590:	4646      	mov	r6, r8
 8000592:	e7ea      	b.n	800056a <__udivmoddi4+0x28a>
 8000594:	4620      	mov	r0, r4
 8000596:	e794      	b.n	80004c2 <__udivmoddi4+0x1e2>
 8000598:	4640      	mov	r0, r8
 800059a:	e7d1      	b.n	8000540 <__udivmoddi4+0x260>
 800059c:	46d0      	mov	r8, sl
 800059e:	e77b      	b.n	8000498 <__udivmoddi4+0x1b8>
 80005a0:	3b02      	subs	r3, #2
 80005a2:	4461      	add	r1, ip
 80005a4:	e732      	b.n	800040c <__udivmoddi4+0x12c>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e709      	b.n	80003be <__udivmoddi4+0xde>
 80005aa:	4464      	add	r4, ip
 80005ac:	3802      	subs	r0, #2
 80005ae:	e742      	b.n	8000436 <__udivmoddi4+0x156>

080005b0 <__aeabi_idiv0>:
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop

080005b4 <Starting>:
extern uint16_t geheugenplaatsen;
extern uint16_t lengte_signaal[48]; //{1, 2, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0, 0};
extern uint16_t tijd[500];

void Starting()
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	af00      	add	r7, sp, #0
	  printf("\r\n-----------------------------------------------------------------------\r\n");
 80005b8:	480e      	ldr	r0, [pc, #56]	; (80005f4 <Starting+0x40>)
 80005ba:	f006 ffad 	bl	8007518 <puts>
	  printf("  ######  ########    ###    ########  ######## #### ##    ##  ######\r\n");
 80005be:	480e      	ldr	r0, [pc, #56]	; (80005f8 <Starting+0x44>)
 80005c0:	f006 ffaa 	bl	8007518 <puts>
	  printf(" ##    ##    ##      ## ##   ##     ##    ##     ##  ###   ## ##    ##\r\n");
 80005c4:	480d      	ldr	r0, [pc, #52]	; (80005fc <Starting+0x48>)
 80005c6:	f006 ffa7 	bl	8007518 <puts>
	  printf(" ##          ##     ##   ##  ##     ##    ##     ##  ####  ## ## \r\n");
 80005ca:	480d      	ldr	r0, [pc, #52]	; (8000600 <Starting+0x4c>)
 80005cc:	f006 ffa4 	bl	8007518 <puts>
	  printf("  ######     ##    ##     ## ########     ##     ##  ## ## ## ##   #### \r\n");
 80005d0:	480c      	ldr	r0, [pc, #48]	; (8000604 <Starting+0x50>)
 80005d2:	f006 ffa1 	bl	8007518 <puts>
	  printf("       ##    ##    ######### ##   ##      ##     ##  ##  #### ##    ##\r\n");
 80005d6:	480c      	ldr	r0, [pc, #48]	; (8000608 <Starting+0x54>)
 80005d8:	f006 ff9e 	bl	8007518 <puts>
	  printf(" ##    ##    ##    ##     ## ##    ##     ##     ##  ##   ### ##    ##  \r\n");
 80005dc:	480b      	ldr	r0, [pc, #44]	; (800060c <Starting+0x58>)
 80005de:	f006 ff9b 	bl	8007518 <puts>
	  printf("  ######     ##    ##     ## ##     ##    ##    #### ##    ##  ######\r\n");
 80005e2:	480b      	ldr	r0, [pc, #44]	; (8000610 <Starting+0x5c>)
 80005e4:	f006 ff98 	bl	8007518 <puts>
	  printf("-----------------------------------------------------------------------\r\n\r\n");
 80005e8:	480a      	ldr	r0, [pc, #40]	; (8000614 <Starting+0x60>)
 80005ea:	f006 ff95 	bl	8007518 <puts>
}
 80005ee:	bf00      	nop
 80005f0:	bd80      	pop	{r7, pc}
 80005f2:	bf00      	nop
 80005f4:	0800842c 	.word	0x0800842c
 80005f8:	08008478 	.word	0x08008478
 80005fc:	080084c0 	.word	0x080084c0
 8000600:	08008508 	.word	0x08008508
 8000604:	0800854c 	.word	0x0800854c
 8000608:	08008598 	.word	0x08008598
 800060c:	080085e0 	.word	0x080085e0
 8000610:	0800862c 	.word	0x0800862c
 8000614:	08008674 	.word	0x08008674

08000618 <All_Carl_Inits>:
void All_Carl_Inits()
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b082      	sub	sp, #8
 800061c:	af00      	add	r7, sp, #0
	if(UartScreen == 1)
 800061e:	4b12      	ldr	r3, [pc, #72]	; (8000668 <All_Carl_Inits+0x50>)
 8000620:	781b      	ldrb	r3, [r3, #0]
 8000622:	2b01      	cmp	r3, #1
 8000624:	d101      	bne.n	800062a <All_Carl_Inits+0x12>
	{
	Starting();
 8000626:	f7ff ffc5 	bl	80005b4 <Starting>
	}
	InitTouch();
 800062a:	f001 f9c5 	bl	80019b8 <InitTouch>
	DisplayBegin();
 800062e:	f000 f98d 	bl	800094c <DisplayBegin>
	IR_Carrier_OFF();
 8000632:	f001 f8bb 	bl	80017ac <IR_Carrier_OFF>

	//logo();
	mainscreen();
 8000636:	f000 ffd9 	bl	80015ec <mainscreen>
//	WriteToGeheugen(3, 12);
//	DeleteFromGeheugen(3, 11);
//	DeleteFromGeheugen(1, 1);
	//Wat zit er eigenlijk in mijn geheugen?
	for(uint8_t i = 1; i <= 4; i++)
 800063a:	2301      	movs	r3, #1
 800063c:	71fb      	strb	r3, [r7, #7]
 800063e:	e00b      	b.n	8000658 <All_Carl_Inits+0x40>
	{
		uint16_t *tijd;
		for(uint8_t j = 1; j <= 12; j ++)
 8000640:	2301      	movs	r3, #1
 8000642:	71bb      	strb	r3, [r7, #6]
 8000644:	e002      	b.n	800064c <All_Carl_Inits+0x34>
 8000646:	79bb      	ldrb	r3, [r7, #6]
 8000648:	3301      	adds	r3, #1
 800064a:	71bb      	strb	r3, [r7, #6]
 800064c:	79bb      	ldrb	r3, [r7, #6]
 800064e:	2b0c      	cmp	r3, #12
 8000650:	d9f9      	bls.n	8000646 <All_Carl_Inits+0x2e>
	for(uint8_t i = 1; i <= 4; i++)
 8000652:	79fb      	ldrb	r3, [r7, #7]
 8000654:	3301      	adds	r3, #1
 8000656:	71fb      	strb	r3, [r7, #7]
 8000658:	79fb      	ldrb	r3, [r7, #7]
 800065a:	2b04      	cmp	r3, #4
 800065c:	d9f0      	bls.n	8000640 <All_Carl_Inits+0x28>
		{
			//tijd = TakefromGeheugen(i, j);
		}
	}
}
 800065e:	bf00      	nop
 8000660:	bf00      	nop
 8000662:	3708      	adds	r7, #8
 8000664:	46bd      	mov	sp, r7
 8000666:	bd80      	pop	{r7, pc}
 8000668:	20000000 	.word	0x20000000

0800066c <WriteToGeheugen>:

void WriteToGeheugen(uint8_t *dev, uint8_t *kn)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b084      	sub	sp, #16
 8000670:	af00      	add	r7, sp, #0
 8000672:	6078      	str	r0, [r7, #4]
 8000674:	6039      	str	r1, [r7, #0]
	uint8_t device = *dev;
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	781b      	ldrb	r3, [r3, #0]
 800067a:	737b      	strb	r3, [r7, #13]
	uint8_t knop = *kn;
 800067c:	683b      	ldr	r3, [r7, #0]
 800067e:	781b      	ldrb	r3, [r3, #0]
 8000680:	733b      	strb	r3, [r7, #12]
	//stel singaal1 is 12 groot


	//stel Device 3 knop 4
	//berekening = 2*12 + 3 = 27
	uint8_t berekening = ((device-1) * 12) + knop-1 ; //zoek de plaats van lengte_signaal voor het knopje van het apparaat
 8000682:	7b7b      	ldrb	r3, [r7, #13]
 8000684:	461a      	mov	r2, r3
 8000686:	0052      	lsls	r2, r2, #1
 8000688:	4413      	add	r3, r2
 800068a:	009b      	lsls	r3, r3, #2
 800068c:	b2da      	uxtb	r2, r3
 800068e:	7b3b      	ldrb	r3, [r7, #12]
 8000690:	4413      	add	r3, r2
 8000692:	b2db      	uxtb	r3, r3
 8000694:	3b0d      	subs	r3, #13
 8000696:	72fb      	strb	r3, [r7, #11]

	printf("%d\r\n", berekening);
 8000698:	7afb      	ldrb	r3, [r7, #11]
 800069a:	4619      	mov	r1, r3
 800069c:	4817      	ldr	r0, [pc, #92]	; (80006fc <WriteToGeheugen+0x90>)
 800069e:	f006 feb5 	bl	800740c <iprintf>
	for(uint16_t i = 0; i < lengte_signaal[berekening] ; i++)
 80006a2:	2300      	movs	r3, #0
 80006a4:	81fb      	strh	r3, [r7, #14]
 80006a6:	e00e      	b.n	80006c6 <WriteToGeheugen+0x5a>
	{
		geheugen[geheugenplaatsen+i] = tijd[i];
 80006a8:	89fa      	ldrh	r2, [r7, #14]
 80006aa:	4b15      	ldr	r3, [pc, #84]	; (8000700 <WriteToGeheugen+0x94>)
 80006ac:	881b      	ldrh	r3, [r3, #0]
 80006ae:	4619      	mov	r1, r3
 80006b0:	89fb      	ldrh	r3, [r7, #14]
 80006b2:	440b      	add	r3, r1
 80006b4:	4913      	ldr	r1, [pc, #76]	; (8000704 <WriteToGeheugen+0x98>)
 80006b6:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 80006ba:	4a13      	ldr	r2, [pc, #76]	; (8000708 <WriteToGeheugen+0x9c>)
 80006bc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(uint16_t i = 0; i < lengte_signaal[berekening] ; i++)
 80006c0:	89fb      	ldrh	r3, [r7, #14]
 80006c2:	3301      	adds	r3, #1
 80006c4:	81fb      	strh	r3, [r7, #14]
 80006c6:	7afb      	ldrb	r3, [r7, #11]
 80006c8:	4a10      	ldr	r2, [pc, #64]	; (800070c <WriteToGeheugen+0xa0>)
 80006ca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80006ce:	89fa      	ldrh	r2, [r7, #14]
 80006d0:	429a      	cmp	r2, r3
 80006d2:	d3e9      	bcc.n	80006a8 <WriteToGeheugen+0x3c>
	}
	geheugenplaatsen += lengte_signaal[berekening];
 80006d4:	7afb      	ldrb	r3, [r7, #11]
 80006d6:	4a0d      	ldr	r2, [pc, #52]	; (800070c <WriteToGeheugen+0xa0>)
 80006d8:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80006dc:	4b08      	ldr	r3, [pc, #32]	; (8000700 <WriteToGeheugen+0x94>)
 80006de:	881b      	ldrh	r3, [r3, #0]
 80006e0:	4413      	add	r3, r2
 80006e2:	b29a      	uxth	r2, r3
 80006e4:	4b06      	ldr	r3, [pc, #24]	; (8000700 <WriteToGeheugen+0x94>)
 80006e6:	801a      	strh	r2, [r3, #0]

	printf("geheugenplaatsen %d\r\n", geheugenplaatsen);
 80006e8:	4b05      	ldr	r3, [pc, #20]	; (8000700 <WriteToGeheugen+0x94>)
 80006ea:	881b      	ldrh	r3, [r3, #0]
 80006ec:	4619      	mov	r1, r3
 80006ee:	4808      	ldr	r0, [pc, #32]	; (8000710 <WriteToGeheugen+0xa4>)
 80006f0:	f006 fe8c 	bl	800740c <iprintf>
}
 80006f4:	bf00      	nop
 80006f6:	3710      	adds	r7, #16
 80006f8:	46bd      	mov	sp, r7
 80006fa:	bd80      	pop	{r7, pc}
 80006fc:	080086c0 	.word	0x080086c0
 8000700:	2000271c 	.word	0x2000271c
 8000704:	20002818 	.word	0x20002818
 8000708:	2000000c 	.word	0x2000000c
 800070c:	20002720 	.word	0x20002720
 8000710:	080086c8 	.word	0x080086c8

08000714 <TakefromGeheugen>:
	printf("geheugenplaatsen = %d geheugen = %d\n\r", geheugenplaatsen, controle);
	}
}
*/
void TakefromGeheugen(uint8_t *dev, uint8_t *kn, uint16_t *DataFromGeheugen, uint8_t *controle)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b088      	sub	sp, #32
 8000718:	af00      	add	r7, sp, #0
 800071a:	60f8      	str	r0, [r7, #12]
 800071c:	60b9      	str	r1, [r7, #8]
 800071e:	607a      	str	r2, [r7, #4]
 8000720:	603b      	str	r3, [r7, #0]
		uint8_t device = *dev;
 8000722:	68fb      	ldr	r3, [r7, #12]
 8000724:	781b      	ldrb	r3, [r3, #0]
 8000726:	75fb      	strb	r3, [r7, #23]
		uint8_t knop = *kn;
 8000728:	68bb      	ldr	r3, [r7, #8]
 800072a:	781b      	ldrb	r3, [r3, #0]
 800072c:	75bb      	strb	r3, [r7, #22]
		uint16_t plaatservoor = 0;
 800072e:	2300      	movs	r3, #0
 8000730:	83fb      	strh	r3, [r7, #30]
		uint8_t berekening = ((device-1) * 12) + knop-1 ;
 8000732:	7dfb      	ldrb	r3, [r7, #23]
 8000734:	461a      	mov	r2, r3
 8000736:	0052      	lsls	r2, r2, #1
 8000738:	4413      	add	r3, r2
 800073a:	009b      	lsls	r3, r3, #2
 800073c:	b2da      	uxtb	r2, r3
 800073e:	7dbb      	ldrb	r3, [r7, #22]
 8000740:	4413      	add	r3, r2
 8000742:	b2db      	uxtb	r3, r3
 8000744:	3b0d      	subs	r3, #13
 8000746:	757b      	strb	r3, [r7, #21]
		if(lengte_signaal[berekening] == 0)
 8000748:	7d7b      	ldrb	r3, [r7, #21]
 800074a:	4a2c      	ldr	r2, [pc, #176]	; (80007fc <TakefromGeheugen+0xe8>)
 800074c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000750:	2b00      	cmp	r3, #0
 8000752:	d109      	bne.n	8000768 <TakefromGeheugen+0x54>
		{
			printf("device: %d knop: %d is niet ingesteld!\r\n", device, knop);
 8000754:	7dfb      	ldrb	r3, [r7, #23]
 8000756:	7dba      	ldrb	r2, [r7, #22]
 8000758:	4619      	mov	r1, r3
 800075a:	4829      	ldr	r0, [pc, #164]	; (8000800 <TakefromGeheugen+0xec>)
 800075c:	f006 fe56 	bl	800740c <iprintf>
			*controle=0;
 8000760:	683b      	ldr	r3, [r7, #0]
 8000762:	2200      	movs	r2, #0
 8000764:	701a      	strb	r2, [r3, #0]
				printf("%d ", DataFromGeheugen[index]);
				index++;
			}
			printf("\r\n");
		}
}
 8000766:	e044      	b.n	80007f2 <TakefromGeheugen+0xde>
			*controle=1;
 8000768:	683b      	ldr	r3, [r7, #0]
 800076a:	2201      	movs	r2, #1
 800076c:	701a      	strb	r2, [r3, #0]
			for(uint8_t i = 0; i < berekening; i++)
 800076e:	2300      	movs	r3, #0
 8000770:	777b      	strb	r3, [r7, #29]
 8000772:	e009      	b.n	8000788 <TakefromGeheugen+0x74>
				plaatservoor += lengte_signaal[i];
 8000774:	7f7b      	ldrb	r3, [r7, #29]
 8000776:	4a21      	ldr	r2, [pc, #132]	; (80007fc <TakefromGeheugen+0xe8>)
 8000778:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800077c:	8bfb      	ldrh	r3, [r7, #30]
 800077e:	4413      	add	r3, r2
 8000780:	83fb      	strh	r3, [r7, #30]
			for(uint8_t i = 0; i < berekening; i++)
 8000782:	7f7b      	ldrb	r3, [r7, #29]
 8000784:	3301      	adds	r3, #1
 8000786:	777b      	strb	r3, [r7, #29]
 8000788:	7f7a      	ldrb	r2, [r7, #29]
 800078a:	7d7b      	ldrb	r3, [r7, #21]
 800078c:	429a      	cmp	r2, r3
 800078e:	d3f1      	bcc.n	8000774 <TakefromGeheugen+0x60>
			uint16_t plaatserna = plaatservoor + lengte_signaal[berekening];
 8000790:	7d7b      	ldrb	r3, [r7, #21]
 8000792:	4a1a      	ldr	r2, [pc, #104]	; (80007fc <TakefromGeheugen+0xe8>)
 8000794:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000798:	8bfb      	ldrh	r3, [r7, #30]
 800079a:	4413      	add	r3, r2
 800079c:	827b      	strh	r3, [r7, #18]
			printf("device: %d knop: %d = ", device, knop);
 800079e:	7dfb      	ldrb	r3, [r7, #23]
 80007a0:	7dba      	ldrb	r2, [r7, #22]
 80007a2:	4619      	mov	r1, r3
 80007a4:	4817      	ldr	r0, [pc, #92]	; (8000804 <TakefromGeheugen+0xf0>)
 80007a6:	f006 fe31 	bl	800740c <iprintf>
			uint16_t index = 0;
 80007aa:	2300      	movs	r3, #0
 80007ac:	837b      	strh	r3, [r7, #26]
			for(uint16_t i = plaatservoor; i < plaatserna; i++)
 80007ae:	8bfb      	ldrh	r3, [r7, #30]
 80007b0:	833b      	strh	r3, [r7, #24]
 80007b2:	e017      	b.n	80007e4 <TakefromGeheugen+0xd0>
				DataFromGeheugen[index] = geheugen[i];
 80007b4:	8b3a      	ldrh	r2, [r7, #24]
 80007b6:	8b7b      	ldrh	r3, [r7, #26]
 80007b8:	005b      	lsls	r3, r3, #1
 80007ba:	6879      	ldr	r1, [r7, #4]
 80007bc:	440b      	add	r3, r1
 80007be:	4912      	ldr	r1, [pc, #72]	; (8000808 <TakefromGeheugen+0xf4>)
 80007c0:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 80007c4:	801a      	strh	r2, [r3, #0]
				printf("%d ", DataFromGeheugen[index]);
 80007c6:	8b7b      	ldrh	r3, [r7, #26]
 80007c8:	005b      	lsls	r3, r3, #1
 80007ca:	687a      	ldr	r2, [r7, #4]
 80007cc:	4413      	add	r3, r2
 80007ce:	881b      	ldrh	r3, [r3, #0]
 80007d0:	4619      	mov	r1, r3
 80007d2:	480e      	ldr	r0, [pc, #56]	; (800080c <TakefromGeheugen+0xf8>)
 80007d4:	f006 fe1a 	bl	800740c <iprintf>
				index++;
 80007d8:	8b7b      	ldrh	r3, [r7, #26]
 80007da:	3301      	adds	r3, #1
 80007dc:	837b      	strh	r3, [r7, #26]
			for(uint16_t i = plaatservoor; i < plaatserna; i++)
 80007de:	8b3b      	ldrh	r3, [r7, #24]
 80007e0:	3301      	adds	r3, #1
 80007e2:	833b      	strh	r3, [r7, #24]
 80007e4:	8b3a      	ldrh	r2, [r7, #24]
 80007e6:	8a7b      	ldrh	r3, [r7, #18]
 80007e8:	429a      	cmp	r2, r3
 80007ea:	d3e3      	bcc.n	80007b4 <TakefromGeheugen+0xa0>
			printf("\r\n");
 80007ec:	4808      	ldr	r0, [pc, #32]	; (8000810 <TakefromGeheugen+0xfc>)
 80007ee:	f006 fe93 	bl	8007518 <puts>
}
 80007f2:	bf00      	nop
 80007f4:	3720      	adds	r7, #32
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bd80      	pop	{r7, pc}
 80007fa:	bf00      	nop
 80007fc:	20002720 	.word	0x20002720
 8000800:	080086e0 	.word	0x080086e0
 8000804:	0800870c 	.word	0x0800870c
 8000808:	2000000c 	.word	0x2000000c
 800080c:	08008724 	.word	0x08008724
 8000810:	08008728 	.word	0x08008728

08000814 <whilelus>:
uint16_t Xvalue = 160;
uint16_t Yvalue = 363;


uint8_t tijden = 0;
void whilelus(){
 8000814:	b580      	push	{r7, lr}
 8000816:	b082      	sub	sp, #8
 8000818:	af02      	add	r7, sp, #8





	Touch(&aanraak, &Xvalue, &Yvalue);
 800081a:	4a22      	ldr	r2, [pc, #136]	; (80008a4 <whilelus+0x90>)
 800081c:	4922      	ldr	r1, [pc, #136]	; (80008a8 <whilelus+0x94>)
 800081e:	4823      	ldr	r0, [pc, #140]	; (80008ac <whilelus+0x98>)
 8000820:	f001 f8f6 	bl	8001a10 <Touch>
	ReadDevice(&device, &Xvalue, &Yvalue);
 8000824:	4a1f      	ldr	r2, [pc, #124]	; (80008a4 <whilelus+0x90>)
 8000826:	4920      	ldr	r1, [pc, #128]	; (80008a8 <whilelus+0x94>)
 8000828:	4821      	ldr	r0, [pc, #132]	; (80008b0 <whilelus+0x9c>)
 800082a:	f001 f973 	bl	8001b14 <ReadDevice>
	if(device != OldDevice)
 800082e:	4b20      	ldr	r3, [pc, #128]	; (80008b0 <whilelus+0x9c>)
 8000830:	781a      	ldrb	r2, [r3, #0]
 8000832:	4b20      	ldr	r3, [pc, #128]	; (80008b4 <whilelus+0xa0>)
 8000834:	781b      	ldrb	r3, [r3, #0]
 8000836:	429a      	cmp	r2, r3
 8000838:	d00d      	beq.n	8000856 <whilelus+0x42>
	{
		OldDevice=device;
 800083a:	4b1d      	ldr	r3, [pc, #116]	; (80008b0 <whilelus+0x9c>)
 800083c:	781a      	ldrb	r2, [r3, #0]
 800083e:	4b1d      	ldr	r3, [pc, #116]	; (80008b4 <whilelus+0xa0>)
 8000840:	701a      	strb	r2, [r3, #0]
		DevicePressed(&device);
 8000842:	481b      	ldr	r0, [pc, #108]	; (80008b0 <whilelus+0x9c>)
 8000844:	f000 fb46 	bl	8000ed4 <DevicePressed>
		Xvalue = 160; Yvalue = 363; //randomwaarde waar geen knop op staat
 8000848:	4b17      	ldr	r3, [pc, #92]	; (80008a8 <whilelus+0x94>)
 800084a:	22a0      	movs	r2, #160	; 0xa0
 800084c:	801a      	strh	r2, [r3, #0]
 800084e:	4b15      	ldr	r3, [pc, #84]	; (80008a4 <whilelus+0x90>)
 8000850:	f240 126b 	movw	r2, #363	; 0x16b
 8000854:	801a      	strh	r2, [r3, #0]
	}
	if(device != 0)
 8000856:	4b16      	ldr	r3, [pc, #88]	; (80008b0 <whilelus+0x9c>)
 8000858:	781b      	ldrb	r3, [r3, #0]
 800085a:	2b00      	cmp	r3, #0
 800085c:	d01e      	beq.n	800089c <whilelus+0x88>
	{
		ReadButton(&button, &Xvalue, &Yvalue);
 800085e:	4a11      	ldr	r2, [pc, #68]	; (80008a4 <whilelus+0x90>)
 8000860:	4911      	ldr	r1, [pc, #68]	; (80008a8 <whilelus+0x94>)
 8000862:	4815      	ldr	r0, [pc, #84]	; (80008b8 <whilelus+0xa4>)
 8000864:	f001 f9b0 	bl	8001bc8 <ReadButton>
		if(button != 0 && aanraak != 0)
 8000868:	4b13      	ldr	r3, [pc, #76]	; (80008b8 <whilelus+0xa4>)
 800086a:	781b      	ldrb	r3, [r3, #0]
 800086c:	2b00      	cmp	r3, #0
 800086e:	d015      	beq.n	800089c <whilelus+0x88>
 8000870:	4b0e      	ldr	r3, [pc, #56]	; (80008ac <whilelus+0x98>)
 8000872:	781b      	ldrb	r3, [r3, #0]
 8000874:	2b00      	cmp	r3, #0
 8000876:	d011      	beq.n	800089c <whilelus+0x88>
		{
		buttonPressed(&device, &button, &aanraak, &Xvalue, &Yvalue);
 8000878:	4b0a      	ldr	r3, [pc, #40]	; (80008a4 <whilelus+0x90>)
 800087a:	9300      	str	r3, [sp, #0]
 800087c:	4b0a      	ldr	r3, [pc, #40]	; (80008a8 <whilelus+0x94>)
 800087e:	4a0b      	ldr	r2, [pc, #44]	; (80008ac <whilelus+0x98>)
 8000880:	490d      	ldr	r1, [pc, #52]	; (80008b8 <whilelus+0xa4>)
 8000882:	480b      	ldr	r0, [pc, #44]	; (80008b0 <whilelus+0x9c>)
 8000884:	f000 fc62 	bl	800114c <buttonPressed>
		Xvalue = 160; Yvalue = 363; //randomwaarde waar geen knop op staat
 8000888:	4b07      	ldr	r3, [pc, #28]	; (80008a8 <whilelus+0x94>)
 800088a:	22a0      	movs	r2, #160	; 0xa0
 800088c:	801a      	strh	r2, [r3, #0]
 800088e:	4b05      	ldr	r3, [pc, #20]	; (80008a4 <whilelus+0x90>)
 8000890:	f240 126b 	movw	r2, #363	; 0x16b
 8000894:	801a      	strh	r2, [r3, #0]
		button=0;
 8000896:	4b08      	ldr	r3, [pc, #32]	; (80008b8 <whilelus+0xa4>)
 8000898:	2200      	movs	r2, #0
 800089a:	701a      	strb	r2, [r3, #0]



//printf("device:%d button: %d   aanraak %d\r\n", device, button, aanraak);
//printf("X:%d Y:%d ", Xvalue, Yvalue);
}
 800089c:	bf00      	nop
 800089e:	46bd      	mov	sp, r7
 80008a0:	bd80      	pop	{r7, pc}
 80008a2:	bf00      	nop
 80008a4:	20000004 	.word	0x20000004
 80008a8:	20000002 	.word	0x20000002
 80008ac:	2000280f 	.word	0x2000280f
 80008b0:	2000280c 	.word	0x2000280c
 80008b4:	2000280d 	.word	0x2000280d
 80008b8:	2000280e 	.word	0x2000280e

080008bc <CS_HIGH>:
#define ILI9488_GREENYELLOW 	0xAFE5      /* 173, 255,  47 */
#define ILI9488_PINK        			0xF81F

/* Some Easy Functions */ 
void CS_HIGH() //High = The chip is not selected and not accessible pg23
{HAL_GPIO_WritePin(CS_Port, CS_Pin, 1);}
 80008bc:	b580      	push	{r7, lr}
 80008be:	af00      	add	r7, sp, #0
 80008c0:	2201      	movs	r2, #1
 80008c2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80008c6:	4802      	ldr	r0, [pc, #8]	; (80008d0 <CS_HIGH+0x14>)
 80008c8:	f002 fb00 	bl	8002ecc <HAL_GPIO_WritePin>
 80008cc:	bf00      	nop
 80008ce:	bd80      	pop	{r7, pc}
 80008d0:	40021400 	.word	0x40021400

080008d4 <CS_LOW>:
void CS_LOW()  //Low = The chip is selected and accessible pg23
{HAL_GPIO_WritePin(CS_Port, CS_Pin, 0);}
 80008d4:	b580      	push	{r7, lr}
 80008d6:	af00      	add	r7, sp, #0
 80008d8:	2200      	movs	r2, #0
 80008da:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80008de:	4802      	ldr	r0, [pc, #8]	; (80008e8 <CS_LOW+0x14>)
 80008e0:	f002 faf4 	bl	8002ecc <HAL_GPIO_WritePin>
 80008e4:	bf00      	nop
 80008e6:	bd80      	pop	{r7, pc}
 80008e8:	40021400 	.word	0x40021400

080008ec <DC_HIGH>:
void DC_HIGH() //High = Parameter pg23
{HAL_GPIO_WritePin(DC_Port, DC_Pin, 1);}
 80008ec:	b580      	push	{r7, lr}
 80008ee:	af00      	add	r7, sp, #0
 80008f0:	2201      	movs	r2, #1
 80008f2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80008f6:	4802      	ldr	r0, [pc, #8]	; (8000900 <DC_HIGH+0x14>)
 80008f8:	f002 fae8 	bl	8002ecc <HAL_GPIO_WritePin>
 80008fc:	bf00      	nop
 80008fe:	bd80      	pop	{r7, pc}
 8000900:	40021400 	.word	0x40021400

08000904 <DC_LOW>:
void DC_LOW()  //Low = command pg23
{HAL_GPIO_WritePin(DC_Port, DC_Pin, 0);}
 8000904:	b580      	push	{r7, lr}
 8000906:	af00      	add	r7, sp, #0
 8000908:	2200      	movs	r2, #0
 800090a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800090e:	4802      	ldr	r0, [pc, #8]	; (8000918 <DC_LOW+0x14>)
 8000910:	f002 fadc 	bl	8002ecc <HAL_GPIO_WritePin>
 8000914:	bf00      	nop
 8000916:	bd80      	pop	{r7, pc}
 8000918:	40021400 	.word	0x40021400

0800091c <RST_HIGH>:
void RST_HIGH() 
{HAL_GPIO_WritePin(RST_Port, RST_Pin, 1);}
 800091c:	b580      	push	{r7, lr}
 800091e:	af00      	add	r7, sp, #0
 8000920:	2201      	movs	r2, #1
 8000922:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000926:	4802      	ldr	r0, [pc, #8]	; (8000930 <RST_HIGH+0x14>)
 8000928:	f002 fad0 	bl	8002ecc <HAL_GPIO_WritePin>
 800092c:	bf00      	nop
 800092e:	bd80      	pop	{r7, pc}
 8000930:	40021400 	.word	0x40021400

08000934 <RST_LOW>:
void RST_LOW() //initialize with a low input pg23
{HAL_GPIO_WritePin(RST_Port, RST_Pin, 0);}
 8000934:	b580      	push	{r7, lr}
 8000936:	af00      	add	r7, sp, #0
 8000938:	2200      	movs	r2, #0
 800093a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800093e:	4802      	ldr	r0, [pc, #8]	; (8000948 <RST_LOW+0x14>)
 8000940:	f002 fac4 	bl	8002ecc <HAL_GPIO_WritePin>
 8000944:	bf00      	nop
 8000946:	bd80      	pop	{r7, pc}
 8000948:	40021400 	.word	0x40021400

0800094c <DisplayBegin>:

//#define TIM_1us htim2

void DisplayBegin(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	af00      	add	r7, sp, #0
	RST_LOW(); //initialize with a low input pg23
 8000950:	f7ff fff0 	bl	8000934 <RST_LOW>
	HAL_Delay(500);
 8000954:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000958:	f001 ffd6 	bl	8002908 <HAL_Delay>
	RST_HIGH();
 800095c:	f7ff ffde 	bl	800091c <RST_HIGH>
	HAL_Delay(500);
 8000960:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000964:	f001 ffd0 	bl	8002908 <HAL_Delay>
	writecommand(0xE0);
 8000968:	20e0      	movs	r0, #224	; 0xe0
 800096a:	f000 f8bf 	bl	8000aec <writecommand>
	writedata(0x00);
 800096e:	2000      	movs	r0, #0
 8000970:	f000 f8d8 	bl	8000b24 <writedata>
	writedata(0x03);
 8000974:	2003      	movs	r0, #3
 8000976:	f000 f8d5 	bl	8000b24 <writedata>
	writedata(0x09);
 800097a:	2009      	movs	r0, #9
 800097c:	f000 f8d2 	bl	8000b24 <writedata>
	writedata(0x08);
 8000980:	2008      	movs	r0, #8
 8000982:	f000 f8cf 	bl	8000b24 <writedata>
	writedata(0x16);
 8000986:	2016      	movs	r0, #22
 8000988:	f000 f8cc 	bl	8000b24 <writedata>
	writedata(0x0A);
 800098c:	200a      	movs	r0, #10
 800098e:	f000 f8c9 	bl	8000b24 <writedata>
	writedata(0x3F);
 8000992:	203f      	movs	r0, #63	; 0x3f
 8000994:	f000 f8c6 	bl	8000b24 <writedata>
	writedata(0x78);
 8000998:	2078      	movs	r0, #120	; 0x78
 800099a:	f000 f8c3 	bl	8000b24 <writedata>
	writedata(0x4C);
 800099e:	204c      	movs	r0, #76	; 0x4c
 80009a0:	f000 f8c0 	bl	8000b24 <writedata>
	writedata(0x09);
 80009a4:	2009      	movs	r0, #9
 80009a6:	f000 f8bd 	bl	8000b24 <writedata>
	writedata(0x0A);
 80009aa:	200a      	movs	r0, #10
 80009ac:	f000 f8ba 	bl	8000b24 <writedata>
	writedata(0x08);
 80009b0:	2008      	movs	r0, #8
 80009b2:	f000 f8b7 	bl	8000b24 <writedata>
	writedata(0x16);
 80009b6:	2016      	movs	r0, #22
 80009b8:	f000 f8b4 	bl	8000b24 <writedata>
	writedata(0x1A);
 80009bc:	201a      	movs	r0, #26
 80009be:	f000 f8b1 	bl	8000b24 <writedata>
	writedata(0x0F);
 80009c2:	200f      	movs	r0, #15
 80009c4:	f000 f8ae 	bl	8000b24 <writedata>

	writecommand(0XE1);
 80009c8:	20e1      	movs	r0, #225	; 0xe1
 80009ca:	f000 f88f 	bl	8000aec <writecommand>
	writedata(0x00);
 80009ce:	2000      	movs	r0, #0
 80009d0:	f000 f8a8 	bl	8000b24 <writedata>
	writedata(0x16);
 80009d4:	2016      	movs	r0, #22
 80009d6:	f000 f8a5 	bl	8000b24 <writedata>
	writedata(0x19);
 80009da:	2019      	movs	r0, #25
 80009dc:	f000 f8a2 	bl	8000b24 <writedata>
	writedata(0x03);
 80009e0:	2003      	movs	r0, #3
 80009e2:	f000 f89f 	bl	8000b24 <writedata>
	writedata(0x0F);
 80009e6:	200f      	movs	r0, #15
 80009e8:	f000 f89c 	bl	8000b24 <writedata>
	writedata(0x05);
 80009ec:	2005      	movs	r0, #5
 80009ee:	f000 f899 	bl	8000b24 <writedata>
	writedata(0x32);
 80009f2:	2032      	movs	r0, #50	; 0x32
 80009f4:	f000 f896 	bl	8000b24 <writedata>
	writedata(0x45);
 80009f8:	2045      	movs	r0, #69	; 0x45
 80009fa:	f000 f893 	bl	8000b24 <writedata>
	writedata(0x46);
 80009fe:	2046      	movs	r0, #70	; 0x46
 8000a00:	f000 f890 	bl	8000b24 <writedata>
	writedata(0x04);
 8000a04:	2004      	movs	r0, #4
 8000a06:	f000 f88d 	bl	8000b24 <writedata>
	writedata(0x0E);
 8000a0a:	200e      	movs	r0, #14
 8000a0c:	f000 f88a 	bl	8000b24 <writedata>
	writedata(0x0D);
 8000a10:	200d      	movs	r0, #13
 8000a12:	f000 f887 	bl	8000b24 <writedata>
	writedata(0x35);
 8000a16:	2035      	movs	r0, #53	; 0x35
 8000a18:	f000 f884 	bl	8000b24 <writedata>
	writedata(0x37);
 8000a1c:	2037      	movs	r0, #55	; 0x37
 8000a1e:	f000 f881 	bl	8000b24 <writedata>
	writedata(0x0F);
 8000a22:	200f      	movs	r0, #15
 8000a24:	f000 f87e 	bl	8000b24 <writedata>

	writecommand(0XC0);      //Power Control 1 (pg 237)
 8000a28:	20c0      	movs	r0, #192	; 0xc0
 8000a2a:	f000 f85f 	bl	8000aec <writecommand>
							
	writedata(0x17);    //Vreg1out =  5V zie pg 237
 8000a2e:	2017      	movs	r0, #23
 8000a30:	f000 f878 	bl	8000b24 <writedata>
	writedata(0x15);    //Verg2out = -4.87V zie pg 237
 8000a34:	2015      	movs	r0, #21
 8000a36:	f000 f875 	bl	8000b24 <writedata>
							//	Input voltage from the set-up circuit (-6 to -4.5V).
							
							//Op de DFR0669 staat een LevelShifter, zodat het op 5V werkt.
							

	writecommand(0xC1);      //Power Control 2 (pg 239)
 8000a3a:	20c1      	movs	r0, #193	; 0xc1
 8000a3c:	f000 f856 	bl	8000aec <writecommand>
	writedata(0x41);    //VGH,VGL
 8000a40:	2041      	movs	r0, #65	; 0x41
 8000a42:	f000 f86f 	bl	8000b24 <writedata>
						// = 3'h1 = 001
						// 0100 0XXX 
						// 0100 0001 = 41h  (65 decimaal)
						

	writecommand(0xC5);      //VCOM control pg243
 8000a46:	20c5      	movs	r0, #197	; 0xc5
 8000a48:	f000 f850 	bl	8000aec <writecommand>
	writedata(0x00);		 //1e parameter standaard 00h
 8000a4c:	2000      	movs	r0, #0
 8000a4e:	f000 f869 	bl	8000b24 <writedata>
	writedata(0x12);    	 //VCOM = -1.71    |VCOM| x 2 = VREG = 3.42V
 8000a52:	2012      	movs	r0, #18
 8000a54:	f000 f866 	bl	8000b24 <writedata>
	writedata(0x80);		// ? 
 8000a58:	2080      	movs	r0, #128	; 0x80
 8000a5a:	f000 f863 	bl	8000b24 <writedata>

	writecommand(0x36);      //Memory Access pg192
 8000a5e:	2036      	movs	r0, #54	; 0x36
 8000a60:	f000 f844 	bl	8000aec <writecommand>
	writedata(0x48);		//MY = 0				//in vb 0x48
 8000a64:	2048      	movs	r0, #72	; 0x48
 8000a66:	f000 f85d 	bl	8000b24 <writedata>
							//ML = 0
							//BGR = 0
							//MH = 0
							//=0h

	writecommand(0x3A);		// Interface Pixel Format (RGB 565 standaard 3Ah pg123
 8000a6a:	203a      	movs	r0, #58	; 0x3a
 8000a6c:	f000 f83e 	bl	8000aec <writecommand>
	writedata(0x66); 	  	//pg 200 --> 16bits/pixel = 55 (decimal = 85)
 8000a70:	2066      	movs	r0, #102	; 0x66
 8000a72:	f000 f857 	bl	8000b24 <writedata>
							//55 = 0101 0101

	writecommand(0XB0);      // Interface Mode Control pg219
 8000a76:	20b0      	movs	r0, #176	; 0xb0
 8000a78:	f000 f838 	bl	8000aec <writecommand>
	writedata(0x80);     			 //SDO NOT USE
 8000a7c:	2080      	movs	r0, #128	; 0x80
 8000a7e:	f000 f851 	bl	8000b24 <writedata>
									//1000 0000
									//High enable for RGB interface,
									//data fetched at the rising time,
									//and low level sync clock
									
	writecommand(0xB1);      //Frame rate pg 221
 8000a82:	20b1      	movs	r0, #177	; 0xb1
 8000a84:	f000 f832 	bl	8000aec <writecommand>
	writedata(0xA0);    //60Hz      NOG UITREKENEN
 8000a88:	20a0      	movs	r0, #160	; 0xa0
 8000a8a:	f000 f84b 	bl	8000b24 <writedata>

	writecommand(0xB4);      //Display Inversion Control  pg 225
 8000a8e:	20b4      	movs	r0, #180	; 0xb4
 8000a90:	f000 f82c 	bl	8000aec <writecommand>
	writedata(0x02);    //2-dot inversion (standard)
 8000a94:	2002      	movs	r0, #2
 8000a96:	f000 f845 	bl	8000b24 <writedata>

	writecommand(0XB6); //Display Function Control  RGB/MCU Interface Control pg228
 8000a9a:	20b6      	movs	r0, #182	; 0xb6
 8000a9c:	f000 f826 	bl	8000aec <writecommand>

	writedata(0x02);    //MCU // 1e parameter standard    question Bypass= Memory or Shift register? 
 8000aa0:	2002      	movs	r0, #2
 8000aa2:	f000 f83f 	bl	8000b24 <writedata>
	writedata(0x02);    //Source,Gate scan direction so frames at 84ms
 8000aa6:	2002      	movs	r0, #2
 8000aa8:	f000 f83c 	bl	8000b24 <writedata>

	writecommand(0XE9);      // Set Image Function pg271 
 8000aac:	20e9      	movs	r0, #233	; 0xe9
 8000aae:	f000 f81d 	bl	8000aec <writecommand>
	writedata(0x00);    // Disable 24 bit data
 8000ab2:	2000      	movs	r0, #0
 8000ab4:	f000 f836 	bl	8000b24 <writedata>

	writecommand(0xF7);      // Adjust Control   pg 276
 8000ab8:	20f7      	movs	r0, #247	; 0xf7
 8000aba:	f000 f817 	bl	8000aec <writecommand>
	writedata(0xA9);  //standard 1e parameter
 8000abe:	20a9      	movs	r0, #169	; 0xa9
 8000ac0:	f000 f830 	bl	8000b24 <writedata>
	writedata(0x51);  //standard 2e parameter
 8000ac4:	2051      	movs	r0, #81	; 0x51
 8000ac6:	f000 f82d 	bl	8000b24 <writedata>
	writedata(0x2C);  //standard 3e parameter
 8000aca:	202c      	movs	r0, #44	; 0x2c
 8000acc:	f000 f82a 	bl	8000b24 <writedata>
	writedata(0x82);    // D7 stream, loose   //standard 4e parameter
 8000ad0:	2082      	movs	r0, #130	; 0x82
 8000ad2:	f000 f827 	bl	8000b24 <writedata>

	writecommand(Display_ExitSleep);    //Exit Sleep
 8000ad6:	2011      	movs	r0, #17
 8000ad8:	f000 f808 	bl	8000aec <writecommand>

	HAL_Delay(120);
 8000adc:	2078      	movs	r0, #120	; 0x78
 8000ade:	f001 ff13 	bl	8002908 <HAL_Delay>

	writecommand(Display_On);    //Display on
 8000ae2:	2029      	movs	r0, #41	; 0x29
 8000ae4:	f000 f802 	bl	8000aec <writecommand>


	
}
 8000ae8:	bf00      	nop
 8000aea:	bd80      	pop	{r7, pc}

08000aec <writecommand>:

void writecommand(uint8_t cmdo)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b084      	sub	sp, #16
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	4603      	mov	r3, r0
 8000af4:	71fb      	strb	r3, [r7, #7]
	uint8_t commando = cmdo;
 8000af6:	79fb      	ldrb	r3, [r7, #7]
 8000af8:	73fb      	strb	r3, [r7, #15]
	DC_LOW(); //Low = command pg23
 8000afa:	f7ff ff03 	bl	8000904 <DC_LOW>
	CS_LOW(); //The chip is selected and accessible pg23
 8000afe:	f7ff fee9 	bl	80008d4 <CS_LOW>
	HAL_SPI_Transmit(&mySPI, &commando, 1, HAL_MAX_DELAY); //Size = bytes
 8000b02:	f107 010f 	add.w	r1, r7, #15
 8000b06:	f04f 33ff 	mov.w	r3, #4294967295
 8000b0a:	2201      	movs	r2, #1
 8000b0c:	4804      	ldr	r0, [pc, #16]	; (8000b20 <writecommand+0x34>)
 8000b0e:	f004 fb94 	bl	800523a <HAL_SPI_Transmit>
	CS_HIGH(); //The chip is not selected and not accessible pg23
 8000b12:	f7ff fed3 	bl	80008bc <CS_HIGH>
	


}
 8000b16:	bf00      	nop
 8000b18:	3710      	adds	r7, #16
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bd80      	pop	{r7, pc}
 8000b1e:	bf00      	nop
 8000b20:	20002c60 	.word	0x20002c60

08000b24 <writedata>:
void writedata(uint8_t dta )
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b084      	sub	sp, #16
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	71fb      	strb	r3, [r7, #7]
	uint8_t data = dta;
 8000b2e:	79fb      	ldrb	r3, [r7, #7]
 8000b30:	73fb      	strb	r3, [r7, #15]
	DC_HIGH(); //High = Parameter pg23
 8000b32:	f7ff fedb 	bl	80008ec <DC_HIGH>
	CS_LOW(); //The chip is selected and accessible pg23
 8000b36:	f7ff fecd 	bl	80008d4 <CS_LOW>
	HAL_SPI_Transmit(&mySPI, &data, 1, HAL_MAX_DELAY); //Size = bytes
 8000b3a:	f107 010f 	add.w	r1, r7, #15
 8000b3e:	f04f 33ff 	mov.w	r3, #4294967295
 8000b42:	2201      	movs	r2, #1
 8000b44:	4804      	ldr	r0, [pc, #16]	; (8000b58 <writedata+0x34>)
 8000b46:	f004 fb78 	bl	800523a <HAL_SPI_Transmit>
	CS_HIGH(); //The chip is not selected and not accessible pg23
 8000b4a:	f7ff feb7 	bl	80008bc <CS_HIGH>
	//als ik het scherm uitschakel, krijg ik ook geen errors
	//wel leuk om optimistisch te zijn, maar dit doet niks
	//uint8_t StateSpiHulp = HAL_SPI_GetState(&hspi2);
	//uint8_t ErrorSpiHulp = HAL_SPI_GetError(&hspi2);
	//printf("    data: 0x %x Spi_State:%d Error: %d\r\n", dta, StateSpiHulp, ErrorSpiHulp);
}
 8000b4e:	bf00      	nop
 8000b50:	3710      	adds	r7, #16
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	bf00      	nop
 8000b58:	20002c60 	.word	0x20002c60

08000b5c <setAddrWindow>:
void setAddrWindow(uint16_t x0,uint16_t y0,uint16_t x1,uint16_t y1)
{
 8000b5c:	b590      	push	{r4, r7, lr}
 8000b5e:	b083      	sub	sp, #12
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	4604      	mov	r4, r0
 8000b64:	4608      	mov	r0, r1
 8000b66:	4611      	mov	r1, r2
 8000b68:	461a      	mov	r2, r3
 8000b6a:	4623      	mov	r3, r4
 8000b6c:	80fb      	strh	r3, [r7, #6]
 8000b6e:	4603      	mov	r3, r0
 8000b70:	80bb      	strh	r3, [r7, #4]
 8000b72:	460b      	mov	r3, r1
 8000b74:	807b      	strh	r3, [r7, #2]
 8000b76:	4613      	mov	r3, r2
 8000b78:	803b      	strh	r3, [r7, #0]
	//pg 175 -> Column Address Set = 2Ah
	writecommand(0x2A);
 8000b7a:	202a      	movs	r0, #42	; 0x2a
 8000b7c:	f7ff ffb6 	bl	8000aec <writecommand>
	
	writedata(x0 >> 8); //?
 8000b80:	88fb      	ldrh	r3, [r7, #6]
 8000b82:	0a1b      	lsrs	r3, r3, #8
 8000b84:	b29b      	uxth	r3, r3
 8000b86:	b2db      	uxtb	r3, r3
 8000b88:	4618      	mov	r0, r3
 8000b8a:	f7ff ffcb 	bl	8000b24 <writedata>
	writedata(x0 & 0xFF);     // XSTART ?
 8000b8e:	88fb      	ldrh	r3, [r7, #6]
 8000b90:	b2db      	uxtb	r3, r3
 8000b92:	4618      	mov	r0, r3
 8000b94:	f7ff ffc6 	bl	8000b24 <writedata>
	writedata(x1 >> 8); //?
 8000b98:	887b      	ldrh	r3, [r7, #2]
 8000b9a:	0a1b      	lsrs	r3, r3, #8
 8000b9c:	b29b      	uxth	r3, r3
 8000b9e:	b2db      	uxtb	r3, r3
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	f7ff ffbf 	bl	8000b24 <writedata>
	writedata(x1 & 0xFF);     // XEND //?
 8000ba6:	887b      	ldrh	r3, [r7, #2]
 8000ba8:	b2db      	uxtb	r3, r3
 8000baa:	4618      	mov	r0, r3
 8000bac:	f7ff ffba 	bl	8000b24 <writedata>
	
	//pg 177 -> Page Address Set = 2Bh = Row Address Set 
	writecommand(0x2B); // Row addr set
 8000bb0:	202b      	movs	r0, #43	; 0x2b
 8000bb2:	f7ff ff9b 	bl	8000aec <writecommand>
	writedata(y0 >> 8); //?
 8000bb6:	88bb      	ldrh	r3, [r7, #4]
 8000bb8:	0a1b      	lsrs	r3, r3, #8
 8000bba:	b29b      	uxth	r3, r3
 8000bbc:	b2db      	uxtb	r3, r3
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	f7ff ffb0 	bl	8000b24 <writedata>
	writedata(y0 & 0xff);     // YSTART   ?
 8000bc4:	88bb      	ldrh	r3, [r7, #4]
 8000bc6:	b2db      	uxtb	r3, r3
 8000bc8:	4618      	mov	r0, r3
 8000bca:	f7ff ffab 	bl	8000b24 <writedata>
	writedata(y1 >> 8); // ?
 8000bce:	883b      	ldrh	r3, [r7, #0]
 8000bd0:	0a1b      	lsrs	r3, r3, #8
 8000bd2:	b29b      	uxth	r3, r3
 8000bd4:	b2db      	uxtb	r3, r3
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	f7ff ffa4 	bl	8000b24 <writedata>
	writedata(y1 & 0xff);     // YEND //?
 8000bdc:	883b      	ldrh	r3, [r7, #0]
 8000bde:	b2db      	uxtb	r3, r3
 8000be0:	4618      	mov	r0, r3
 8000be2:	f7ff ff9f 	bl	8000b24 <writedata>
	writecommand(Display_Write_To_RAM);
 8000be6:	202c      	movs	r0, #44	; 0x2c
 8000be8:	f7ff ff80 	bl	8000aec <writecommand>
	
}
 8000bec:	bf00      	nop
 8000bee:	370c      	adds	r7, #12
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	bd90      	pop	{r4, r7, pc}

08000bf4 <drawPixel>:
void drawPixel(uint16_t x, uint16_t y, uint16_t color)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b082      	sub	sp, #8
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	80fb      	strh	r3, [r7, #6]
 8000bfe:	460b      	mov	r3, r1
 8000c00:	80bb      	strh	r3, [r7, #4]
 8000c02:	4613      	mov	r3, r2
 8000c04:	807b      	strh	r3, [r7, #2]
	setAddrWindow(x, y, x + 1, y + 1);
 8000c06:	88fb      	ldrh	r3, [r7, #6]
 8000c08:	3301      	adds	r3, #1
 8000c0a:	b29a      	uxth	r2, r3
 8000c0c:	88bb      	ldrh	r3, [r7, #4]
 8000c0e:	3301      	adds	r3, #1
 8000c10:	b29b      	uxth	r3, r3
 8000c12:	88b9      	ldrh	r1, [r7, #4]
 8000c14:	88f8      	ldrh	r0, [r7, #6]
 8000c16:	f7ff ffa1 	bl	8000b5c <setAddrWindow>
	DC_HIGH();
 8000c1a:	f7ff fe67 	bl	80008ec <DC_HIGH>
	CS_LOW();
 8000c1e:	f7ff fe59 	bl	80008d4 <CS_LOW>
	write16BitColor(color);
 8000c22:	887b      	ldrh	r3, [r7, #2]
 8000c24:	4618      	mov	r0, r3
 8000c26:	f000 f806 	bl	8000c36 <write16BitColor>
	CS_HIGH();
 8000c2a:	f7ff fe47 	bl	80008bc <CS_HIGH>
}
 8000c2e:	bf00      	nop
 8000c30:	3708      	adds	r7, #8
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bd80      	pop	{r7, pc}

08000c36 <write16BitColor>:
void DrawVolumebuttonDown()
{

}

void write16BitColor(uint16_t color){
 8000c36:	b580      	push	{r7, lr}
 8000c38:	b084      	sub	sp, #16
 8000c3a:	af00      	add	r7, sp, #0
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	80fb      	strh	r3, [r7, #6]
	//565  = rrrr rggg gggb bbbb
	//F800 = 1111 1000 0000 0000 //11 nullekes
	//07E0 = 0000 0111 1110 0000 //5 nulleks
	//001F = 0000 0000 0001 1111
	 uint8_t r = (color >> 8) & 0Xf8; //& 0xF800) >> 11;
 8000c40:	88fb      	ldrh	r3, [r7, #6]
 8000c42:	0a1b      	lsrs	r3, r3, #8
 8000c44:	b29b      	uxth	r3, r3
 8000c46:	b2db      	uxtb	r3, r3
 8000c48:	f023 0307 	bic.w	r3, r3, #7
 8000c4c:	73fb      	strb	r3, [r7, #15]
	 uint8_t g = (color >> 3) & 0Xfc; //& 0x07E0) >> 5;
 8000c4e:	88fb      	ldrh	r3, [r7, #6]
 8000c50:	08db      	lsrs	r3, r3, #3
 8000c52:	b29b      	uxth	r3, r3
 8000c54:	b2db      	uxtb	r3, r3
 8000c56:	f023 0303 	bic.w	r3, r3, #3
 8000c5a:	73bb      	strb	r3, [r7, #14]
	 uint8_t b = (color <<3); //& 0x001F;
 8000c5c:	88fb      	ldrh	r3, [r7, #6]
 8000c5e:	b2db      	uxtb	r3, r3
 8000c60:	00db      	lsls	r3, r3, #3
 8000c62:	737b      	strb	r3, [r7, #13]
	 //2^6 = 64  (0 tot 63)
	 //2^5 = 32 (0 tot 31)
	  //r = (r * 255) / 31;
	  //g = (g * 255) / 63;
	  //b = (b * 255) / 31;
	 writedata(r);
 8000c64:	7bfb      	ldrb	r3, [r7, #15]
 8000c66:	4618      	mov	r0, r3
 8000c68:	f7ff ff5c 	bl	8000b24 <writedata>
	 writedata(g);
 8000c6c:	7bbb      	ldrb	r3, [r7, #14]
 8000c6e:	4618      	mov	r0, r3
 8000c70:	f7ff ff58 	bl	8000b24 <writedata>
	 writedata(b);
 8000c74:	7b7b      	ldrb	r3, [r7, #13]
 8000c76:	4618      	mov	r0, r3
 8000c78:	f7ff ff54 	bl	8000b24 <writedata>
	  //HAL_SPI_Transmit(&mySPI, &r, 1, HAL_MAX_DELAY); //Size = bytes
	  //HAL_SPI_Transmit(&mySPI, &g, 1, HAL_MAX_DELAY); //Size = bytes
	  //HAL_SPI_Transmit(&mySPI, &b, 1, HAL_MAX_DELAY); //Size = bytes
}
 8000c7c:	bf00      	nop
 8000c7e:	3710      	adds	r7, #16
 8000c80:	46bd      	mov	sp, r7
 8000c82:	bd80      	pop	{r7, pc}

08000c84 <DrawRectangle>:



}
void DrawRectangle(uint16_t x, uint16_t y, uint16_t h, uint16_t w, uint16_t color, uint16_t contentcolor, uint8_t border)
{
 8000c84:	b590      	push	{r4, r7, lr}
 8000c86:	b089      	sub	sp, #36	; 0x24
 8000c88:	af02      	add	r7, sp, #8
 8000c8a:	4604      	mov	r4, r0
 8000c8c:	4608      	mov	r0, r1
 8000c8e:	4611      	mov	r1, r2
 8000c90:	461a      	mov	r2, r3
 8000c92:	4623      	mov	r3, r4
 8000c94:	80fb      	strh	r3, [r7, #6]
 8000c96:	4603      	mov	r3, r0
 8000c98:	80bb      	strh	r3, [r7, #4]
 8000c9a:	460b      	mov	r3, r1
 8000c9c:	807b      	strh	r3, [r7, #2]
 8000c9e:	4613      	mov	r3, r2
 8000ca0:	803b      	strh	r3, [r7, #0]


	//lijntje horizontaal 1
	for(uint8_t j = 0; j <= border; j++)
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	75fb      	strb	r3, [r7, #23]
 8000ca6:	e018      	b.n	8000cda <DrawRectangle+0x56>
	{
		for(uint16_t i = x; i <= (x+w); i++)
 8000ca8:	88fb      	ldrh	r3, [r7, #6]
 8000caa:	82bb      	strh	r3, [r7, #20]
 8000cac:	e00c      	b.n	8000cc8 <DrawRectangle+0x44>
		{
			drawPixel(i, y+j, color);
 8000cae:	7dfb      	ldrb	r3, [r7, #23]
 8000cb0:	b29a      	uxth	r2, r3
 8000cb2:	88bb      	ldrh	r3, [r7, #4]
 8000cb4:	4413      	add	r3, r2
 8000cb6:	b299      	uxth	r1, r3
 8000cb8:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8000cba:	8abb      	ldrh	r3, [r7, #20]
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	f7ff ff99 	bl	8000bf4 <drawPixel>
		for(uint16_t i = x; i <= (x+w); i++)
 8000cc2:	8abb      	ldrh	r3, [r7, #20]
 8000cc4:	3301      	adds	r3, #1
 8000cc6:	82bb      	strh	r3, [r7, #20]
 8000cc8:	8aba      	ldrh	r2, [r7, #20]
 8000cca:	88f9      	ldrh	r1, [r7, #6]
 8000ccc:	883b      	ldrh	r3, [r7, #0]
 8000cce:	440b      	add	r3, r1
 8000cd0:	429a      	cmp	r2, r3
 8000cd2:	ddec      	ble.n	8000cae <DrawRectangle+0x2a>
	for(uint8_t j = 0; j <= border; j++)
 8000cd4:	7dfb      	ldrb	r3, [r7, #23]
 8000cd6:	3301      	adds	r3, #1
 8000cd8:	75fb      	strb	r3, [r7, #23]
 8000cda:	7dfa      	ldrb	r2, [r7, #23]
 8000cdc:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8000ce0:	429a      	cmp	r2, r3
 8000ce2:	d9e1      	bls.n	8000ca8 <DrawRectangle+0x24>
		}
	}

//lijntje verticaal 1
for(uint8_t j = 0; j <= border; j++)
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	74fb      	strb	r3, [r7, #19]
 8000ce8:	e018      	b.n	8000d1c <DrawRectangle+0x98>
{
	for(uint16_t i = y; i <= (y+h); i++)
 8000cea:	88bb      	ldrh	r3, [r7, #4]
 8000cec:	823b      	strh	r3, [r7, #16]
 8000cee:	e00c      	b.n	8000d0a <DrawRectangle+0x86>
	{
		drawPixel(x+j, i, color);
 8000cf0:	7cfb      	ldrb	r3, [r7, #19]
 8000cf2:	b29a      	uxth	r2, r3
 8000cf4:	88fb      	ldrh	r3, [r7, #6]
 8000cf6:	4413      	add	r3, r2
 8000cf8:	b29b      	uxth	r3, r3
 8000cfa:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8000cfc:	8a39      	ldrh	r1, [r7, #16]
 8000cfe:	4618      	mov	r0, r3
 8000d00:	f7ff ff78 	bl	8000bf4 <drawPixel>
	for(uint16_t i = y; i <= (y+h); i++)
 8000d04:	8a3b      	ldrh	r3, [r7, #16]
 8000d06:	3301      	adds	r3, #1
 8000d08:	823b      	strh	r3, [r7, #16]
 8000d0a:	8a3a      	ldrh	r2, [r7, #16]
 8000d0c:	88b9      	ldrh	r1, [r7, #4]
 8000d0e:	887b      	ldrh	r3, [r7, #2]
 8000d10:	440b      	add	r3, r1
 8000d12:	429a      	cmp	r2, r3
 8000d14:	ddec      	ble.n	8000cf0 <DrawRectangle+0x6c>
for(uint8_t j = 0; j <= border; j++)
 8000d16:	7cfb      	ldrb	r3, [r7, #19]
 8000d18:	3301      	adds	r3, #1
 8000d1a:	74fb      	strb	r3, [r7, #19]
 8000d1c:	7cfa      	ldrb	r2, [r7, #19]
 8000d1e:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8000d22:	429a      	cmp	r2, r3
 8000d24:	d9e1      	bls.n	8000cea <DrawRectangle+0x66>
	}
}
//lijntje verticaal 2
for(uint8_t j = 0; j <= border; j++)
 8000d26:	2300      	movs	r3, #0
 8000d28:	73fb      	strb	r3, [r7, #15]
 8000d2a:	e01b      	b.n	8000d64 <DrawRectangle+0xe0>
{
	for(uint16_t i = y; i <= (y+h); i++)
 8000d2c:	88bb      	ldrh	r3, [r7, #4]
 8000d2e:	81bb      	strh	r3, [r7, #12]
 8000d30:	e00f      	b.n	8000d52 <DrawRectangle+0xce>
	{
		drawPixel((x+w)-j, i, color);
 8000d32:	88fa      	ldrh	r2, [r7, #6]
 8000d34:	883b      	ldrh	r3, [r7, #0]
 8000d36:	4413      	add	r3, r2
 8000d38:	b29a      	uxth	r2, r3
 8000d3a:	7bfb      	ldrb	r3, [r7, #15]
 8000d3c:	b29b      	uxth	r3, r3
 8000d3e:	1ad3      	subs	r3, r2, r3
 8000d40:	b29b      	uxth	r3, r3
 8000d42:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8000d44:	89b9      	ldrh	r1, [r7, #12]
 8000d46:	4618      	mov	r0, r3
 8000d48:	f7ff ff54 	bl	8000bf4 <drawPixel>
	for(uint16_t i = y; i <= (y+h); i++)
 8000d4c:	89bb      	ldrh	r3, [r7, #12]
 8000d4e:	3301      	adds	r3, #1
 8000d50:	81bb      	strh	r3, [r7, #12]
 8000d52:	89ba      	ldrh	r2, [r7, #12]
 8000d54:	88b9      	ldrh	r1, [r7, #4]
 8000d56:	887b      	ldrh	r3, [r7, #2]
 8000d58:	440b      	add	r3, r1
 8000d5a:	429a      	cmp	r2, r3
 8000d5c:	dde9      	ble.n	8000d32 <DrawRectangle+0xae>
for(uint8_t j = 0; j <= border; j++)
 8000d5e:	7bfb      	ldrb	r3, [r7, #15]
 8000d60:	3301      	adds	r3, #1
 8000d62:	73fb      	strb	r3, [r7, #15]
 8000d64:	7bfa      	ldrb	r2, [r7, #15]
 8000d66:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8000d6a:	429a      	cmp	r2, r3
 8000d6c:	d9de      	bls.n	8000d2c <DrawRectangle+0xa8>
	}
}

//lijntje horizontaal 2
for(uint8_t j = 0; j <= border; j++)
 8000d6e:	2300      	movs	r3, #0
 8000d70:	72fb      	strb	r3, [r7, #11]
 8000d72:	e01b      	b.n	8000dac <DrawRectangle+0x128>
{
	for(uint16_t i = x; i <= (x+w); i++)
 8000d74:	88fb      	ldrh	r3, [r7, #6]
 8000d76:	813b      	strh	r3, [r7, #8]
 8000d78:	e00f      	b.n	8000d9a <DrawRectangle+0x116>
	{
		drawPixel(i, (y+h)-j, color);
 8000d7a:	88ba      	ldrh	r2, [r7, #4]
 8000d7c:	887b      	ldrh	r3, [r7, #2]
 8000d7e:	4413      	add	r3, r2
 8000d80:	b29a      	uxth	r2, r3
 8000d82:	7afb      	ldrb	r3, [r7, #11]
 8000d84:	b29b      	uxth	r3, r3
 8000d86:	1ad3      	subs	r3, r2, r3
 8000d88:	b299      	uxth	r1, r3
 8000d8a:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8000d8c:	893b      	ldrh	r3, [r7, #8]
 8000d8e:	4618      	mov	r0, r3
 8000d90:	f7ff ff30 	bl	8000bf4 <drawPixel>
	for(uint16_t i = x; i <= (x+w); i++)
 8000d94:	893b      	ldrh	r3, [r7, #8]
 8000d96:	3301      	adds	r3, #1
 8000d98:	813b      	strh	r3, [r7, #8]
 8000d9a:	893a      	ldrh	r2, [r7, #8]
 8000d9c:	88f9      	ldrh	r1, [r7, #6]
 8000d9e:	883b      	ldrh	r3, [r7, #0]
 8000da0:	440b      	add	r3, r1
 8000da2:	429a      	cmp	r2, r3
 8000da4:	dde9      	ble.n	8000d7a <DrawRectangle+0xf6>
for(uint8_t j = 0; j <= border; j++)
 8000da6:	7afb      	ldrb	r3, [r7, #11]
 8000da8:	3301      	adds	r3, #1
 8000daa:	72fb      	strb	r3, [r7, #11]
 8000dac:	7afa      	ldrb	r2, [r7, #11]
 8000dae:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8000db2:	429a      	cmp	r2, r3
 8000db4:	d9de      	bls.n	8000d74 <DrawRectangle+0xf0>
	}
}
//contentcolor
fillRect(x+border, y+border, w-(border*2), h-(border*2), contentcolor);
 8000db6:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8000dba:	b29a      	uxth	r2, r3
 8000dbc:	88fb      	ldrh	r3, [r7, #6]
 8000dbe:	4413      	add	r3, r2
 8000dc0:	b298      	uxth	r0, r3
 8000dc2:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8000dc6:	b29a      	uxth	r2, r3
 8000dc8:	88bb      	ldrh	r3, [r7, #4]
 8000dca:	4413      	add	r3, r2
 8000dcc:	b299      	uxth	r1, r3
 8000dce:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8000dd2:	b29b      	uxth	r3, r3
 8000dd4:	005b      	lsls	r3, r3, #1
 8000dd6:	b29b      	uxth	r3, r3
 8000dd8:	883a      	ldrh	r2, [r7, #0]
 8000dda:	1ad3      	subs	r3, r2, r3
 8000ddc:	b29c      	uxth	r4, r3
 8000dde:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8000de2:	b29b      	uxth	r3, r3
 8000de4:	005b      	lsls	r3, r3, #1
 8000de6:	b29b      	uxth	r3, r3
 8000de8:	887a      	ldrh	r2, [r7, #2]
 8000dea:	1ad3      	subs	r3, r2, r3
 8000dec:	b29a      	uxth	r2, r3
 8000dee:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8000df0:	9300      	str	r3, [sp, #0]
 8000df2:	4613      	mov	r3, r2
 8000df4:	4622      	mov	r2, r4
 8000df6:	f000 f805 	bl	8000e04 <fillRect>



}
 8000dfa:	bf00      	nop
 8000dfc:	371c      	adds	r7, #28
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	bd90      	pop	{r4, r7, pc}
	...

08000e04 <fillRect>:
void fillRect(uint16_t x, uint16_t y , uint16_t w , uint16_t h, uint16_t color)
{
 8000e04:	b590      	push	{r4, r7, lr}
 8000e06:	b083      	sub	sp, #12
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	4604      	mov	r4, r0
 8000e0c:	4608      	mov	r0, r1
 8000e0e:	4611      	mov	r1, r2
 8000e10:	461a      	mov	r2, r3
 8000e12:	4623      	mov	r3, r4
 8000e14:	80fb      	strh	r3, [r7, #6]
 8000e16:	4603      	mov	r3, r0
 8000e18:	80bb      	strh	r3, [r7, #4]
 8000e1a:	460b      	mov	r3, r1
 8000e1c:	807b      	strh	r3, [r7, #2]
 8000e1e:	4613      	mov	r3, r2
 8000e20:	803b      	strh	r3, [r7, #0]
	if ((x >= Display_width) || (y >= Display_height))
 8000e22:	4b2a      	ldr	r3, [pc, #168]	; (8000ecc <fillRect+0xc8>)
 8000e24:	881b      	ldrh	r3, [r3, #0]
 8000e26:	88fa      	ldrh	r2, [r7, #6]
 8000e28:	429a      	cmp	r2, r3
 8000e2a:	d24a      	bcs.n	8000ec2 <fillRect+0xbe>
 8000e2c:	4b28      	ldr	r3, [pc, #160]	; (8000ed0 <fillRect+0xcc>)
 8000e2e:	881b      	ldrh	r3, [r3, #0]
 8000e30:	88ba      	ldrh	r2, [r7, #4]
 8000e32:	429a      	cmp	r2, r3
 8000e34:	d245      	bcs.n	8000ec2 <fillRect+0xbe>
		return;
	if ((x + w - 1) >= Display_width)
 8000e36:	88fa      	ldrh	r2, [r7, #6]
 8000e38:	887b      	ldrh	r3, [r7, #2]
 8000e3a:	4413      	add	r3, r2
 8000e3c:	4a23      	ldr	r2, [pc, #140]	; (8000ecc <fillRect+0xc8>)
 8000e3e:	8812      	ldrh	r2, [r2, #0]
 8000e40:	4293      	cmp	r3, r2
 8000e42:	dd04      	ble.n	8000e4e <fillRect+0x4a>
		w = Display_width - x;
 8000e44:	4b21      	ldr	r3, [pc, #132]	; (8000ecc <fillRect+0xc8>)
 8000e46:	881a      	ldrh	r2, [r3, #0]
 8000e48:	88fb      	ldrh	r3, [r7, #6]
 8000e4a:	1ad3      	subs	r3, r2, r3
 8000e4c:	807b      	strh	r3, [r7, #2]
	if ((y + h - 1) >= Display_height)
 8000e4e:	88ba      	ldrh	r2, [r7, #4]
 8000e50:	883b      	ldrh	r3, [r7, #0]
 8000e52:	4413      	add	r3, r2
 8000e54:	4a1e      	ldr	r2, [pc, #120]	; (8000ed0 <fillRect+0xcc>)
 8000e56:	8812      	ldrh	r2, [r2, #0]
 8000e58:	4293      	cmp	r3, r2
 8000e5a:	dd04      	ble.n	8000e66 <fillRect+0x62>
		h = Display_height - y;
 8000e5c:	4b1c      	ldr	r3, [pc, #112]	; (8000ed0 <fillRect+0xcc>)
 8000e5e:	881a      	ldrh	r2, [r3, #0]
 8000e60:	88bb      	ldrh	r3, [r7, #4]
 8000e62:	1ad3      	subs	r3, r2, r3
 8000e64:	803b      	strh	r3, [r7, #0]

	setAddrWindow(x, y, x + w - 1, y + h - 1);
 8000e66:	88fa      	ldrh	r2, [r7, #6]
 8000e68:	887b      	ldrh	r3, [r7, #2]
 8000e6a:	4413      	add	r3, r2
 8000e6c:	b29b      	uxth	r3, r3
 8000e6e:	3b01      	subs	r3, #1
 8000e70:	b29c      	uxth	r4, r3
 8000e72:	88ba      	ldrh	r2, [r7, #4]
 8000e74:	883b      	ldrh	r3, [r7, #0]
 8000e76:	4413      	add	r3, r2
 8000e78:	b29b      	uxth	r3, r3
 8000e7a:	3b01      	subs	r3, #1
 8000e7c:	b29b      	uxth	r3, r3
 8000e7e:	88b9      	ldrh	r1, [r7, #4]
 8000e80:	88f8      	ldrh	r0, [r7, #6]
 8000e82:	4622      	mov	r2, r4
 8000e84:	f7ff fe6a 	bl	8000b5c <setAddrWindow>

	DC_HIGH();
 8000e88:	f7ff fd30 	bl	80008ec <DC_HIGH>
	CS_LOW();
 8000e8c:	f7ff fd22 	bl	80008d4 <CS_LOW>

	for (y = h; y > 0; y--) {
 8000e90:	883b      	ldrh	r3, [r7, #0]
 8000e92:	80bb      	strh	r3, [r7, #4]
 8000e94:	e00f      	b.n	8000eb6 <fillRect+0xb2>
		for (x = w; x > 0; x--) {
 8000e96:	887b      	ldrh	r3, [r7, #2]
 8000e98:	80fb      	strh	r3, [r7, #6]
 8000e9a:	e006      	b.n	8000eaa <fillRect+0xa6>

			write16BitColor(color);
 8000e9c:	8b3b      	ldrh	r3, [r7, #24]
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	f7ff fec9 	bl	8000c36 <write16BitColor>
		for (x = w; x > 0; x--) {
 8000ea4:	88fb      	ldrh	r3, [r7, #6]
 8000ea6:	3b01      	subs	r3, #1
 8000ea8:	80fb      	strh	r3, [r7, #6]
 8000eaa:	88fb      	ldrh	r3, [r7, #6]
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d1f5      	bne.n	8000e9c <fillRect+0x98>
	for (y = h; y > 0; y--) {
 8000eb0:	88bb      	ldrh	r3, [r7, #4]
 8000eb2:	3b01      	subs	r3, #1
 8000eb4:	80bb      	strh	r3, [r7, #4]
 8000eb6:	88bb      	ldrh	r3, [r7, #4]
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d1ec      	bne.n	8000e96 <fillRect+0x92>
		}
	}

	CS_HIGH();
 8000ebc:	f7ff fcfe 	bl	80008bc <CS_HIGH>
 8000ec0:	e000      	b.n	8000ec4 <fillRect+0xc0>
		return;
 8000ec2:	bf00      	nop



}
 8000ec4:	370c      	adds	r7, #12
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd90      	pop	{r4, r7, pc}
 8000eca:	bf00      	nop
 8000ecc:	20000006 	.word	0x20000006
 8000ed0:	20000008 	.word	0x20000008

08000ed4 <DevicePressed>:


void DevicePressed(uint8_t *apparaat)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b088      	sub	sp, #32
 8000ed8:	af04      	add	r7, sp, #16
 8000eda:	6078      	str	r0, [r7, #4]
	uint16_t color;
	uint16_t contentcolor;
	uint8_t device = *apparaat;
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	781b      	ldrb	r3, [r3, #0]
 8000ee0:	72bb      	strb	r3, [r7, #10]
	switch(device)
 8000ee2:	7abb      	ldrb	r3, [r7, #10]
 8000ee4:	3b01      	subs	r3, #1
 8000ee6:	2b03      	cmp	r3, #3
 8000ee8:	d819      	bhi.n	8000f1e <DevicePressed+0x4a>
 8000eea:	a201      	add	r2, pc, #4	; (adr r2, 8000ef0 <DevicePressed+0x1c>)
 8000eec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ef0:	08000f01 	.word	0x08000f01
 8000ef4:	08000f07 	.word	0x08000f07
 8000ef8:	08000f0f 	.word	0x08000f0f
 8000efc:	08000f17 	.word	0x08000f17
	{
	case 1:
		color = ILI9488_BLUE;
 8000f00:	231f      	movs	r3, #31
 8000f02:	81fb      	strh	r3, [r7, #14]
		break;
 8000f04:	e00c      	b.n	8000f20 <DevicePressed+0x4c>
	case 2:
		color = ILI9488_YELLOW;
 8000f06:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8000f0a:	81fb      	strh	r3, [r7, #14]
		break;
 8000f0c:	e008      	b.n	8000f20 <DevicePressed+0x4c>
	case 3:
		color = ILI9488_GREEN;
 8000f0e:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8000f12:	81fb      	strh	r3, [r7, #14]
		break;
 8000f14:	e004      	b.n	8000f20 <DevicePressed+0x4c>
	case 4:
		color = ILI9488_WHITE;
 8000f16:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000f1a:	81fb      	strh	r3, [r7, #14]
		break;
 8000f1c:	e000      	b.n	8000f20 <DevicePressed+0x4c>
	default:
		break;
 8000f1e:	bf00      	nop
	}
	for(uint8_t knop = 1; knop <= 14; knop++)
 8000f20:	2301      	movs	r3, #1
 8000f22:	72fb      	strb	r3, [r7, #11]
 8000f24:	e107      	b.n	8001136 <DevicePressed+0x262>
	{
		if(knop <= 12)
 8000f26:	7afb      	ldrb	r3, [r7, #11]
 8000f28:	2b0c      	cmp	r3, #12
 8000f2a:	d81d      	bhi.n	8000f68 <DevicePressed+0x94>
		{
			uint8_t berekening = ((device-1) * 12) + knop-1 ;
 8000f2c:	7abb      	ldrb	r3, [r7, #10]
 8000f2e:	461a      	mov	r2, r3
 8000f30:	0052      	lsls	r2, r2, #1
 8000f32:	4413      	add	r3, r2
 8000f34:	009b      	lsls	r3, r3, #2
 8000f36:	b2da      	uxtb	r2, r3
 8000f38:	7afb      	ldrb	r3, [r7, #11]
 8000f3a:	4413      	add	r3, r2
 8000f3c:	b2db      	uxtb	r3, r3
 8000f3e:	3b0d      	subs	r3, #13
 8000f40:	727b      	strb	r3, [r7, #9]
			if(lengte_signaal[berekening] != 0)
 8000f42:	7a7b      	ldrb	r3, [r7, #9]
 8000f44:	4a80      	ldr	r2, [pc, #512]	; (8001148 <DevicePressed+0x274>)
 8000f46:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d00a      	beq.n	8000f64 <DevicePressed+0x90>
			{
				if(knop == 1)
 8000f4e:	7afb      	ldrb	r3, [r7, #11]
 8000f50:	2b01      	cmp	r3, #1
 8000f52:	d103      	bne.n	8000f5c <DevicePressed+0x88>
				{
					contentcolor = ILI9488_RED;
 8000f54:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8000f58:	81bb      	strh	r3, [r7, #12]
 8000f5a:	e005      	b.n	8000f68 <DevicePressed+0x94>
				}
				else
				{
					contentcolor = ILI9488_DARKGREY;
 8000f5c:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8000f60:	81bb      	strh	r3, [r7, #12]
 8000f62:	e001      	b.n	8000f68 <DevicePressed+0x94>
				}

			}
			else
			{
			contentcolor = ILI9488_BLACK;
 8000f64:	2300      	movs	r3, #0
 8000f66:	81bb      	strh	r3, [r7, #12]
			}
		}
		switch(knop)
 8000f68:	7afb      	ldrb	r3, [r7, #11]
 8000f6a:	3b01      	subs	r3, #1
 8000f6c:	2b0d      	cmp	r3, #13
 8000f6e:	f200 80de 	bhi.w	800112e <DevicePressed+0x25a>
 8000f72:	a201      	add	r2, pc, #4	; (adr r2, 8000f78 <DevicePressed+0xa4>)
 8000f74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f78:	08000fb1 	.word	0x08000fb1
 8000f7c:	08000fcb 	.word	0x08000fcb
 8000f80:	08000fe5 	.word	0x08000fe5
 8000f84:	08000fff 	.word	0x08000fff
 8000f88:	08001019 	.word	0x08001019
 8000f8c:	08001033 	.word	0x08001033
 8000f90:	0800104d 	.word	0x0800104d
 8000f94:	08001067 	.word	0x08001067
 8000f98:	08001083 	.word	0x08001083
 8000f9c:	0800109f 	.word	0x0800109f
 8000fa0:	080010bb 	.word	0x080010bb
 8000fa4:	080010d7 	.word	0x080010d7
 8000fa8:	080010f3 	.word	0x080010f3
 8000fac:	08001111 	.word	0x08001111
		{
		case 1:
			//Power
			DrawRectangle(23, 50, 75, 75, color, contentcolor, 5);
 8000fb0:	2305      	movs	r3, #5
 8000fb2:	9302      	str	r3, [sp, #8]
 8000fb4:	89bb      	ldrh	r3, [r7, #12]
 8000fb6:	9301      	str	r3, [sp, #4]
 8000fb8:	89fb      	ldrh	r3, [r7, #14]
 8000fba:	9300      	str	r3, [sp, #0]
 8000fbc:	234b      	movs	r3, #75	; 0x4b
 8000fbe:	224b      	movs	r2, #75	; 0x4b
 8000fc0:	2132      	movs	r1, #50	; 0x32
 8000fc2:	2017      	movs	r0, #23
 8000fc4:	f7ff fe5e 	bl	8000c84 <DrawRectangle>
			break;
 8000fc8:	e0b2      	b.n	8001130 <DevicePressed+0x25c>
		case 2:
			//Src
			DrawRectangle(219, 50, 75, 75, color, contentcolor, 5);
 8000fca:	2305      	movs	r3, #5
 8000fcc:	9302      	str	r3, [sp, #8]
 8000fce:	89bb      	ldrh	r3, [r7, #12]
 8000fd0:	9301      	str	r3, [sp, #4]
 8000fd2:	89fb      	ldrh	r3, [r7, #14]
 8000fd4:	9300      	str	r3, [sp, #0]
 8000fd6:	234b      	movs	r3, #75	; 0x4b
 8000fd8:	224b      	movs	r2, #75	; 0x4b
 8000fda:	2132      	movs	r1, #50	; 0x32
 8000fdc:	20db      	movs	r0, #219	; 0xdb
 8000fde:	f7ff fe51 	bl	8000c84 <DrawRectangle>
			break;
 8000fe2:	e0a5      	b.n	8001130 <DevicePressed+0x25c>
		case 3:
			//^
			DrawRectangle(121, 80, 75, 75, color, contentcolor, 5);
 8000fe4:	2305      	movs	r3, #5
 8000fe6:	9302      	str	r3, [sp, #8]
 8000fe8:	89bb      	ldrh	r3, [r7, #12]
 8000fea:	9301      	str	r3, [sp, #4]
 8000fec:	89fb      	ldrh	r3, [r7, #14]
 8000fee:	9300      	str	r3, [sp, #0]
 8000ff0:	234b      	movs	r3, #75	; 0x4b
 8000ff2:	224b      	movs	r2, #75	; 0x4b
 8000ff4:	2150      	movs	r1, #80	; 0x50
 8000ff6:	2079      	movs	r0, #121	; 0x79
 8000ff8:	f7ff fe44 	bl	8000c84 <DrawRectangle>
			break;
 8000ffc:	e098      	b.n	8001130 <DevicePressed+0x25c>
		case 4:
			//<
			DrawRectangle(23, 165, 75, 75, color, contentcolor, 5);
 8000ffe:	2305      	movs	r3, #5
 8001000:	9302      	str	r3, [sp, #8]
 8001002:	89bb      	ldrh	r3, [r7, #12]
 8001004:	9301      	str	r3, [sp, #4]
 8001006:	89fb      	ldrh	r3, [r7, #14]
 8001008:	9300      	str	r3, [sp, #0]
 800100a:	234b      	movs	r3, #75	; 0x4b
 800100c:	224b      	movs	r2, #75	; 0x4b
 800100e:	21a5      	movs	r1, #165	; 0xa5
 8001010:	2017      	movs	r0, #23
 8001012:	f7ff fe37 	bl	8000c84 <DrawRectangle>
			break;
 8001016:	e08b      	b.n	8001130 <DevicePressed+0x25c>
		case 5:
			//OK
			DrawRectangle(121, 165, 75, 75, color, contentcolor, 5);
 8001018:	2305      	movs	r3, #5
 800101a:	9302      	str	r3, [sp, #8]
 800101c:	89bb      	ldrh	r3, [r7, #12]
 800101e:	9301      	str	r3, [sp, #4]
 8001020:	89fb      	ldrh	r3, [r7, #14]
 8001022:	9300      	str	r3, [sp, #0]
 8001024:	234b      	movs	r3, #75	; 0x4b
 8001026:	224b      	movs	r2, #75	; 0x4b
 8001028:	21a5      	movs	r1, #165	; 0xa5
 800102a:	2079      	movs	r0, #121	; 0x79
 800102c:	f7ff fe2a 	bl	8000c84 <DrawRectangle>
			break;
 8001030:	e07e      	b.n	8001130 <DevicePressed+0x25c>
		case 6:
			//>
			DrawRectangle(219, 165, 75, 75, color, contentcolor, 5);
 8001032:	2305      	movs	r3, #5
 8001034:	9302      	str	r3, [sp, #8]
 8001036:	89bb      	ldrh	r3, [r7, #12]
 8001038:	9301      	str	r3, [sp, #4]
 800103a:	89fb      	ldrh	r3, [r7, #14]
 800103c:	9300      	str	r3, [sp, #0]
 800103e:	234b      	movs	r3, #75	; 0x4b
 8001040:	224b      	movs	r2, #75	; 0x4b
 8001042:	21a5      	movs	r1, #165	; 0xa5
 8001044:	20db      	movs	r0, #219	; 0xdb
 8001046:	f7ff fe1d 	bl	8000c84 <DrawRectangle>
			break;
 800104a:	e071      	b.n	8001130 <DevicePressed+0x25c>
		case 7:
			//V
			DrawRectangle(121, 250, 75, 75, color, contentcolor, 5);
 800104c:	2305      	movs	r3, #5
 800104e:	9302      	str	r3, [sp, #8]
 8001050:	89bb      	ldrh	r3, [r7, #12]
 8001052:	9301      	str	r3, [sp, #4]
 8001054:	89fb      	ldrh	r3, [r7, #14]
 8001056:	9300      	str	r3, [sp, #0]
 8001058:	234b      	movs	r3, #75	; 0x4b
 800105a:	224b      	movs	r2, #75	; 0x4b
 800105c:	21fa      	movs	r1, #250	; 0xfa
 800105e:	2079      	movs	r0, #121	; 0x79
 8001060:	f7ff fe10 	bl	8000c84 <DrawRectangle>
			break;
 8001064:	e064      	b.n	8001130 <DevicePressed+0x25c>
		case 8:
			//volume up
				DrawRectangle(23, 298, 75, 75, color, contentcolor, 5);
 8001066:	2305      	movs	r3, #5
 8001068:	9302      	str	r3, [sp, #8]
 800106a:	89bb      	ldrh	r3, [r7, #12]
 800106c:	9301      	str	r3, [sp, #4]
 800106e:	89fb      	ldrh	r3, [r7, #14]
 8001070:	9300      	str	r3, [sp, #0]
 8001072:	234b      	movs	r3, #75	; 0x4b
 8001074:	224b      	movs	r2, #75	; 0x4b
 8001076:	f44f 7195 	mov.w	r1, #298	; 0x12a
 800107a:	2017      	movs	r0, #23
 800107c:	f7ff fe02 	bl	8000c84 <DrawRectangle>
			break;
 8001080:	e056      	b.n	8001130 <DevicePressed+0x25c>
		case 9:
			//volume down
				DrawRectangle(23, 393, 75, 75, color, contentcolor, 5);
 8001082:	2305      	movs	r3, #5
 8001084:	9302      	str	r3, [sp, #8]
 8001086:	89bb      	ldrh	r3, [r7, #12]
 8001088:	9301      	str	r3, [sp, #4]
 800108a:	89fb      	ldrh	r3, [r7, #14]
 800108c:	9300      	str	r3, [sp, #0]
 800108e:	234b      	movs	r3, #75	; 0x4b
 8001090:	224b      	movs	r2, #75	; 0x4b
 8001092:	f240 1189 	movw	r1, #393	; 0x189
 8001096:	2017      	movs	r0, #23
 8001098:	f7ff fdf4 	bl	8000c84 <DrawRectangle>
			break;
 800109c:	e048      	b.n	8001130 <DevicePressed+0x25c>
		case 10:
			//mute
				DrawRectangle(121, 393, 75, 75, color, contentcolor, 5);
 800109e:	2305      	movs	r3, #5
 80010a0:	9302      	str	r3, [sp, #8]
 80010a2:	89bb      	ldrh	r3, [r7, #12]
 80010a4:	9301      	str	r3, [sp, #4]
 80010a6:	89fb      	ldrh	r3, [r7, #14]
 80010a8:	9300      	str	r3, [sp, #0]
 80010aa:	234b      	movs	r3, #75	; 0x4b
 80010ac:	224b      	movs	r2, #75	; 0x4b
 80010ae:	f240 1189 	movw	r1, #393	; 0x189
 80010b2:	2079      	movs	r0, #121	; 0x79
 80010b4:	f7ff fde6 	bl	8000c84 <DrawRectangle>
			break;
 80010b8:	e03a      	b.n	8001130 <DevicePressed+0x25c>
		case 11:
			//channel up
				DrawRectangle(219, 298, 75, 75, color, contentcolor, 5);
 80010ba:	2305      	movs	r3, #5
 80010bc:	9302      	str	r3, [sp, #8]
 80010be:	89bb      	ldrh	r3, [r7, #12]
 80010c0:	9301      	str	r3, [sp, #4]
 80010c2:	89fb      	ldrh	r3, [r7, #14]
 80010c4:	9300      	str	r3, [sp, #0]
 80010c6:	234b      	movs	r3, #75	; 0x4b
 80010c8:	224b      	movs	r2, #75	; 0x4b
 80010ca:	f44f 7195 	mov.w	r1, #298	; 0x12a
 80010ce:	20db      	movs	r0, #219	; 0xdb
 80010d0:	f7ff fdd8 	bl	8000c84 <DrawRectangle>
			break;
 80010d4:	e02c      	b.n	8001130 <DevicePressed+0x25c>
		case 12:
			//channel down
				DrawRectangle(219, 393, 75, 75, color, contentcolor, 5);
 80010d6:	2305      	movs	r3, #5
 80010d8:	9302      	str	r3, [sp, #8]
 80010da:	89bb      	ldrh	r3, [r7, #12]
 80010dc:	9301      	str	r3, [sp, #4]
 80010de:	89fb      	ldrh	r3, [r7, #14]
 80010e0:	9300      	str	r3, [sp, #0]
 80010e2:	234b      	movs	r3, #75	; 0x4b
 80010e4:	224b      	movs	r2, #75	; 0x4b
 80010e6:	f240 1189 	movw	r1, #393	; 0x189
 80010ea:	20db      	movs	r0, #219	; 0xdb
 80010ec:	f7ff fdca 	bl	8000c84 <DrawRectangle>
			break;
 80010f0:	e01e      	b.n	8001130 <DevicePressed+0x25c>
		case 13:
			//Add
				DrawRectangle(23, 245, 48, 75, ILI9488_GREENYELLOW, ILI9488_GREENYELLOW, 0);
 80010f2:	2300      	movs	r3, #0
 80010f4:	9302      	str	r3, [sp, #8]
 80010f6:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 80010fa:	9301      	str	r3, [sp, #4]
 80010fc:	f64a 73e5 	movw	r3, #45029	; 0xafe5
 8001100:	9300      	str	r3, [sp, #0]
 8001102:	234b      	movs	r3, #75	; 0x4b
 8001104:	2230      	movs	r2, #48	; 0x30
 8001106:	21f5      	movs	r1, #245	; 0xf5
 8001108:	2017      	movs	r0, #23
 800110a:	f7ff fdbb 	bl	8000c84 <DrawRectangle>
			break;
 800110e:	e00f      	b.n	8001130 <DevicePressed+0x25c>
		case 14:
			//Delete
					DrawRectangle(219, 245, 48, 75, ILI9488_RED, ILI9488_RED, 0);
 8001110:	2300      	movs	r3, #0
 8001112:	9302      	str	r3, [sp, #8]
 8001114:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001118:	9301      	str	r3, [sp, #4]
 800111a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800111e:	9300      	str	r3, [sp, #0]
 8001120:	234b      	movs	r3, #75	; 0x4b
 8001122:	2230      	movs	r2, #48	; 0x30
 8001124:	21f5      	movs	r1, #245	; 0xf5
 8001126:	20db      	movs	r0, #219	; 0xdb
 8001128:	f7ff fdac 	bl	8000c84 <DrawRectangle>
			break;
 800112c:	e000      	b.n	8001130 <DevicePressed+0x25c>
		default:
			break;
 800112e:	bf00      	nop
	for(uint8_t knop = 1; knop <= 14; knop++)
 8001130:	7afb      	ldrb	r3, [r7, #11]
 8001132:	3301      	adds	r3, #1
 8001134:	72fb      	strb	r3, [r7, #11]
 8001136:	7afb      	ldrb	r3, [r7, #11]
 8001138:	2b0e      	cmp	r3, #14
 800113a:	f67f aef4 	bls.w	8000f26 <DevicePressed+0x52>





}
 800113e:	bf00      	nop
 8001140:	bf00      	nop
 8001142:	3710      	adds	r7, #16
 8001144:	46bd      	mov	sp, r7
 8001146:	bd80      	pop	{r7, pc}
 8001148:	20002720 	.word	0x20002720

0800114c <buttonPressed>:
void buttonPressed(uint8_t *dev, uint8_t *knop, uint8_t *Sensingtouch, uint16_t *X_w, uint16_t *Y_w)
{
 800114c:	b590      	push	{r4, r7, lr}
 800114e:	f2ad 4d0c 	subw	sp, sp, #1036	; 0x40c
 8001152:	af00      	add	r7, sp, #0
 8001154:	f507 6481 	add.w	r4, r7, #1032	; 0x408
 8001158:	f5a4 747f 	sub.w	r4, r4, #1020	; 0x3fc
 800115c:	6020      	str	r0, [r4, #0]
 800115e:	f507 6081 	add.w	r0, r7, #1032	; 0x408
 8001162:	f5a0 6080 	sub.w	r0, r0, #1024	; 0x400
 8001166:	6001      	str	r1, [r0, #0]
 8001168:	f507 6181 	add.w	r1, r7, #1032	; 0x408
 800116c:	f2a1 4104 	subw	r1, r1, #1028	; 0x404
 8001170:	600a      	str	r2, [r1, #0]
 8001172:	f507 6281 	add.w	r2, r7, #1032	; 0x408
 8001176:	f5a2 6281 	sub.w	r2, r2, #1032	; 0x408
 800117a:	6013      	str	r3, [r2, #0]
uint8_t device = *dev;
 800117c:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 8001180:	f5a3 737f 	sub.w	r3, r3, #1020	; 0x3fc
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	781b      	ldrb	r3, [r3, #0]
 8001188:	f887 3403 	strb.w	r3, [r7, #1027]	; 0x403
uint8_t button = *knop;
 800118c:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 8001190:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	781b      	ldrb	r3, [r3, #0]
 8001198:	f887 3402 	strb.w	r3, [r7, #1026]	; 0x402
uint8_t aanraak = *Sensingtouch;
 800119c:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 80011a0:	f2a3 4304 	subw	r3, r3, #1028	; 0x404
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	781b      	ldrb	r3, [r3, #0]
 80011a8:	f887 3401 	strb.w	r3, [r7, #1025]	; 0x401
uint16_t X_waarde = *X_w;
 80011ac:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 80011b0:	f5a3 6381 	sub.w	r3, r3, #1032	; 0x408
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	881b      	ldrh	r3, [r3, #0]
 80011b8:	f8a7 33fe 	strh.w	r3, [r7, #1022]	; 0x3fe
uint16_t Y_waarde = *Y_w;
 80011bc:	f8d7 3418 	ldr.w	r3, [r7, #1048]	; 0x418
 80011c0:	881b      	ldrh	r3, [r3, #0]
 80011c2:	f8a7 33fc 	strh.w	r3, [r7, #1020]	; 0x3fc

uint8_t controle = 0;
 80011c6:	2300      	movs	r3, #0
 80011c8:	f887 33fb 	strb.w	r3, [r7, #1019]	; 0x3fb
uint8_t berekening = ((device-1) * 12) + button-1 ;
 80011cc:	f897 3403 	ldrb.w	r3, [r7, #1027]	; 0x403
 80011d0:	461a      	mov	r2, r3
 80011d2:	0052      	lsls	r2, r2, #1
 80011d4:	4413      	add	r3, r2
 80011d6:	009b      	lsls	r3, r3, #2
 80011d8:	b2da      	uxtb	r2, r3
 80011da:	f897 3402 	ldrb.w	r3, [r7, #1026]	; 0x402
 80011de:	4413      	add	r3, r2
 80011e0:	b2db      	uxtb	r3, r3
 80011e2:	3b0d      	subs	r3, #13
 80011e4:	b2db      	uxtb	r3, r3
 80011e6:	f887 33fa 	strb.w	r3, [r7, #1018]	; 0x3fa
	 if(button >= 13) //Is de knop een ADD/Delete button?
 80011ea:	f897 3402 	ldrb.w	r3, [r7, #1026]	; 0x402
 80011ee:	2b0c      	cmp	r3, #12
 80011f0:	f240 80c6 	bls.w	8001380 <buttonPressed+0x234>
	 {
		 switch(button)
 80011f4:	f897 3402 	ldrb.w	r3, [r7, #1026]	; 0x402
 80011f8:	2b0d      	cmp	r3, #13
 80011fa:	d003      	beq.n	8001204 <buttonPressed+0xb8>
 80011fc:	2b0e      	cmp	r3, #14
 80011fe:	f000 8087 	beq.w	8001310 <buttonPressed+0x1c4>
			 	 printf("button %d , duw op een knop van de andere afstandsbediening, die je wilt instellen\r\n", button);
			 	 IR_Read();

			 break;
		 default:
			 break;
 8001202:	e112      	b.n	800142a <buttonPressed+0x2de>
			 button = 0;
 8001204:	2300      	movs	r3, #0
 8001206:	f887 3402 	strb.w	r3, [r7, #1026]	; 0x402
			 cleartijd();
 800120a:	f000 fa49 	bl	80016a0 <cleartijd>
			 X_waarde = 160; Y_waarde = 363;
 800120e:	23a0      	movs	r3, #160	; 0xa0
 8001210:	f8a7 33fe 	strh.w	r3, [r7, #1022]	; 0x3fe
 8001214:	f240 136b 	movw	r3, #363	; 0x16b
 8001218:	f8a7 33fc 	strh.w	r3, [r7, #1020]	; 0x3fc
			 printf("button %d , duw op een knop van de andere afstandsbediening, die je wilt instellen\r\n", button);
 800121c:	f897 3402 	ldrb.w	r3, [r7, #1026]	; 0x402
 8001220:	4619      	mov	r1, r3
 8001222:	4884      	ldr	r0, [pc, #528]	; (8001434 <buttonPressed+0x2e8>)
 8001224:	f006 f8f2 	bl	800740c <iprintf>
			 while(button == 0)
 8001228:	e02f      	b.n	800128a <buttonPressed+0x13e>
				 Touch(&aanraak, &X_waarde, &Y_waarde);
 800122a:	f507 727f 	add.w	r2, r7, #1020	; 0x3fc
 800122e:	f207 31fe 	addw	r1, r7, #1022	; 0x3fe
 8001232:	f207 4301 	addw	r3, r7, #1025	; 0x401
 8001236:	4618      	mov	r0, r3
 8001238:	f000 fbea 	bl	8001a10 <Touch>
				 ReadButton(&button, &X_waarde, &Y_waarde);
 800123c:	f507 727f 	add.w	r2, r7, #1020	; 0x3fc
 8001240:	f207 31fe 	addw	r1, r7, #1022	; 0x3fe
 8001244:	f207 4302 	addw	r3, r7, #1026	; 0x402
 8001248:	4618      	mov	r0, r3
 800124a:	f000 fcbd 	bl	8001bc8 <ReadButton>
				 berekening = ((device-1) * 12) + button-1;
 800124e:	f897 3403 	ldrb.w	r3, [r7, #1027]	; 0x403
 8001252:	461a      	mov	r2, r3
 8001254:	0052      	lsls	r2, r2, #1
 8001256:	4413      	add	r3, r2
 8001258:	009b      	lsls	r3, r3, #2
 800125a:	b2da      	uxtb	r2, r3
 800125c:	f897 3402 	ldrb.w	r3, [r7, #1026]	; 0x402
 8001260:	4413      	add	r3, r2
 8001262:	b2db      	uxtb	r3, r3
 8001264:	3b0d      	subs	r3, #13
 8001266:	b2db      	uxtb	r3, r3
 8001268:	f887 33fa 	strb.w	r3, [r7, #1018]	; 0x3fa
				 if(button > 12 || lengte_signaal[berekening] != 0 ) //als add/delete knop ingesteld is, of als knop al ingesteld is
 800126c:	f897 3402 	ldrb.w	r3, [r7, #1026]	; 0x402
 8001270:	2b0c      	cmp	r3, #12
 8001272:	d807      	bhi.n	8001284 <buttonPressed+0x138>
 8001274:	f897 33fa 	ldrb.w	r3, [r7, #1018]	; 0x3fa
 8001278:	461a      	mov	r2, r3
 800127a:	4b6f      	ldr	r3, [pc, #444]	; (8001438 <buttonPressed+0x2ec>)
 800127c:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001280:	2b00      	cmp	r3, #0
 8001282:	d002      	beq.n	800128a <buttonPressed+0x13e>
					 button=0;
 8001284:	2300      	movs	r3, #0
 8001286:	f887 3402 	strb.w	r3, [r7, #1026]	; 0x402
			 while(button == 0)
 800128a:	f897 3402 	ldrb.w	r3, [r7, #1026]	; 0x402
 800128e:	2b00      	cmp	r3, #0
 8001290:	d0cb      	beq.n	800122a <buttonPressed+0xde>
			 berekening = ((device-1) * 12) + button-1;
 8001292:	f897 3403 	ldrb.w	r3, [r7, #1027]	; 0x403
 8001296:	461a      	mov	r2, r3
 8001298:	0052      	lsls	r2, r2, #1
 800129a:	4413      	add	r3, r2
 800129c:	009b      	lsls	r3, r3, #2
 800129e:	b2da      	uxtb	r2, r3
 80012a0:	f897 3402 	ldrb.w	r3, [r7, #1026]	; 0x402
 80012a4:	4413      	add	r3, r2
 80012a6:	b2db      	uxtb	r3, r3
 80012a8:	3b0d      	subs	r3, #13
 80012aa:	b2db      	uxtb	r3, r3
 80012ac:	f887 33fa 	strb.w	r3, [r7, #1018]	; 0x3fa
			 ColorToSelectedbutton(&button, 0x07E0);
 80012b0:	f207 4302 	addw	r3, r7, #1026	; 0x402
 80012b4:	f44f 61fc 	mov.w	r1, #2016	; 0x7e0
 80012b8:	4618      	mov	r0, r3
 80012ba:	f000 f8c7 	bl	800144c <ColorToSelectedbutton>
			 IR_Read();
 80012be:	f000 fa7f 	bl	80017c0 <IR_Read>
			 uint8_t nosignal = 0; //In het begin gaan we er vanuit dat er geen signaal is
 80012c2:	2300      	movs	r3, #0
 80012c4:	f887 33f9 	strb.w	r3, [r7, #1017]	; 0x3f9
			 uint8_t lengte_signaal_gevonden = 0; //In het begin gaan we er vanuit dat er nog geen lengte van het signaal gevonden is
 80012c8:	2300      	movs	r3, #0
 80012ca:	f887 33f8 	strb.w	r3, [r7, #1016]	; 0x3f8
			 while(nosignal != 2)
 80012ce:	e008      	b.n	80012e2 <buttonPressed+0x196>
			 IR_UNDERSTAND(&berekening, &nosignal, &lengte_signaal_gevonden);
 80012d0:	f507 727e 	add.w	r2, r7, #1016	; 0x3f8
 80012d4:	f207 31f9 	addw	r1, r7, #1017	; 0x3f9
 80012d8:	f207 33fa 	addw	r3, r7, #1018	; 0x3fa
 80012dc:	4618      	mov	r0, r3
 80012de:	f000 fa7b 	bl	80017d8 <IR_UNDERSTAND>
			 while(nosignal != 2)
 80012e2:	f897 33f9 	ldrb.w	r3, [r7, #1017]	; 0x3f9
 80012e6:	2b02      	cmp	r3, #2
 80012e8:	d1f2      	bne.n	80012d0 <buttonPressed+0x184>
			 IR_READ_flag = 0;
 80012ea:	4b54      	ldr	r3, [pc, #336]	; (800143c <buttonPressed+0x2f0>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	701a      	strb	r2, [r3, #0]
			 WriteToGeheugen(&device,&button);
 80012f0:	f207 4202 	addw	r2, r7, #1026	; 0x402
 80012f4:	f207 4303 	addw	r3, r7, #1027	; 0x403
 80012f8:	4611      	mov	r1, r2
 80012fa:	4618      	mov	r0, r3
 80012fc:	f7ff f9b6 	bl	800066c <WriteToGeheugen>
			 ColorToSelectedbutton(&button, 0x7BEF);
 8001300:	f207 4302 	addw	r3, r7, #1026	; 0x402
 8001304:	f647 31ef 	movw	r1, #31727	; 0x7bef
 8001308:	4618      	mov	r0, r3
 800130a:	f000 f89f 	bl	800144c <ColorToSelectedbutton>
			 break;
 800130e:	e08c      	b.n	800142a <buttonPressed+0x2de>
			 button = 0;
 8001310:	2300      	movs	r3, #0
 8001312:	f887 3402 	strb.w	r3, [r7, #1026]	; 0x402
			 X_waarde = 160; Y_waarde = 363;
 8001316:	23a0      	movs	r3, #160	; 0xa0
 8001318:	f8a7 33fe 	strh.w	r3, [r7, #1022]	; 0x3fe
 800131c:	f240 136b 	movw	r3, #363	; 0x16b
 8001320:	f8a7 33fc 	strh.w	r3, [r7, #1020]	; 0x3fc
			 while(button == 0)
 8001324:	e018      	b.n	8001358 <buttonPressed+0x20c>
				 Touch(&aanraak, &X_waarde, &Y_waarde);
 8001326:	f507 727f 	add.w	r2, r7, #1020	; 0x3fc
 800132a:	f207 31fe 	addw	r1, r7, #1022	; 0x3fe
 800132e:	f207 4301 	addw	r3, r7, #1025	; 0x401
 8001332:	4618      	mov	r0, r3
 8001334:	f000 fb6c 	bl	8001a10 <Touch>
				 ReadButton(&button, &X_waarde, &Y_waarde);
 8001338:	f507 727f 	add.w	r2, r7, #1020	; 0x3fc
 800133c:	f207 31fe 	addw	r1, r7, #1022	; 0x3fe
 8001340:	f207 4302 	addw	r3, r7, #1026	; 0x402
 8001344:	4618      	mov	r0, r3
 8001346:	f000 fc3f 	bl	8001bc8 <ReadButton>
				if(button > 12)
 800134a:	f897 3402 	ldrb.w	r3, [r7, #1026]	; 0x402
 800134e:	2b0c      	cmp	r3, #12
 8001350:	d902      	bls.n	8001358 <buttonPressed+0x20c>
					button=0;
 8001352:	2300      	movs	r3, #0
 8001354:	f887 3402 	strb.w	r3, [r7, #1026]	; 0x402
			 while(button == 0)
 8001358:	f897 3402 	ldrb.w	r3, [r7, #1026]	; 0x402
 800135c:	2b00      	cmp	r3, #0
 800135e:	d0e2      	beq.n	8001326 <buttonPressed+0x1da>
			 	 ColorToSelectedbutton(&button, 0xF800);
 8001360:	f207 4302 	addw	r3, r7, #1026	; 0x402
 8001364:	f44f 4178 	mov.w	r1, #63488	; 0xf800
 8001368:	4618      	mov	r0, r3
 800136a:	f000 f86f 	bl	800144c <ColorToSelectedbutton>
			 	 printf("button %d , duw op een knop van de andere afstandsbediening, die je wilt instellen\r\n", button);
 800136e:	f897 3402 	ldrb.w	r3, [r7, #1026]	; 0x402
 8001372:	4619      	mov	r1, r3
 8001374:	482f      	ldr	r0, [pc, #188]	; (8001434 <buttonPressed+0x2e8>)
 8001376:	f006 f849 	bl	800740c <iprintf>
			 	 IR_Read();
 800137a:	f000 fa21 	bl	80017c0 <IR_Read>
			 break;
 800137e:	e054      	b.n	800142a <buttonPressed+0x2de>
	 }
	 else
	 {
		 //Heeft ingeduwde knop tijdswaarden? Ja dan is controle = 1
		 uint16_t tijd_geheugen[500];
		 TakefromGeheugen(&device, &button, &tijd_geheugen, &controle);
 8001380:	f207 33fb 	addw	r3, r7, #1019	; 0x3fb
 8001384:	f107 0210 	add.w	r2, r7, #16
 8001388:	f207 4102 	addw	r1, r7, #1026	; 0x402
 800138c:	f207 4003 	addw	r0, r7, #1027	; 0x403
 8001390:	f7ff f9c0 	bl	8000714 <TakefromGeheugen>
		 if(controle == 0)
 8001394:	f897 33fb 	ldrb.w	r3, [r7, #1019]	; 0x3fb
 8001398:	2b00      	cmp	r3, #0
 800139a:	d103      	bne.n	80013a4 <buttonPressed+0x258>
		 {
			 printf("knop is niet ingesteld\r\n");
 800139c:	4828      	ldr	r0, [pc, #160]	; (8001440 <buttonPressed+0x2f4>)
 800139e:	f006 f8bb 	bl	8007518 <puts>

		 }


	 }
}
 80013a2:	e042      	b.n	800142a <buttonPressed+0x2de>
			 	 	 uint16_t lensignaal = lengte_signaal[berekening];
 80013a4:	f897 33fa 	ldrb.w	r3, [r7, #1018]	; 0x3fa
 80013a8:	461a      	mov	r2, r3
 80013aa:	4b23      	ldr	r3, [pc, #140]	; (8001438 <buttonPressed+0x2ec>)
 80013ac:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80013b0:	f8a7 3404 	strh.w	r3, [r7, #1028]	; 0x404
			 	 	 printf("berekening is %d lengte is %d\r\n", berekening, lensignaal);
 80013b4:	f897 33fa 	ldrb.w	r3, [r7, #1018]	; 0x3fa
 80013b8:	4619      	mov	r1, r3
 80013ba:	f8b7 3404 	ldrh.w	r3, [r7, #1028]	; 0x404
 80013be:	461a      	mov	r2, r3
 80013c0:	4820      	ldr	r0, [pc, #128]	; (8001444 <buttonPressed+0x2f8>)
 80013c2:	f006 f823 	bl	800740c <iprintf>
					 for(uint16_t i = 0; i < lengte_signaal[berekening]; i ++)
 80013c6:	2300      	movs	r3, #0
 80013c8:	f8a7 3406 	strh.w	r3, [r7, #1030]	; 0x406
 80013cc:	e013      	b.n	80013f6 <buttonPressed+0x2aa>
					 printf("ik werk %d  controle= %d\r\n ", tijd_geheugen[i], controle);
 80013ce:	f8b7 2406 	ldrh.w	r2, [r7, #1030]	; 0x406
 80013d2:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 80013d6:	f5a3 737e 	sub.w	r3, r3, #1016	; 0x3f8
 80013da:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80013de:	4619      	mov	r1, r3
 80013e0:	f897 33fb 	ldrb.w	r3, [r7, #1019]	; 0x3fb
 80013e4:	461a      	mov	r2, r3
 80013e6:	4818      	ldr	r0, [pc, #96]	; (8001448 <buttonPressed+0x2fc>)
 80013e8:	f006 f810 	bl	800740c <iprintf>
					 for(uint16_t i = 0; i < lengte_signaal[berekening]; i ++)
 80013ec:	f8b7 3406 	ldrh.w	r3, [r7, #1030]	; 0x406
 80013f0:	3301      	adds	r3, #1
 80013f2:	f8a7 3406 	strh.w	r3, [r7, #1030]	; 0x406
 80013f6:	f897 33fa 	ldrb.w	r3, [r7, #1018]	; 0x3fa
 80013fa:	461a      	mov	r2, r3
 80013fc:	4b0e      	ldr	r3, [pc, #56]	; (8001438 <buttonPressed+0x2ec>)
 80013fe:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001402:	f8b7 2406 	ldrh.w	r2, [r7, #1030]	; 0x406
 8001406:	429a      	cmp	r2, r3
 8001408:	d3e1      	bcc.n	80013ce <buttonPressed+0x282>
					 IR_sent(&tijd_geheugen, lensignaal);
 800140a:	f8b7 2404 	ldrh.w	r2, [r7, #1028]	; 0x404
 800140e:	f107 0310 	add.w	r3, r7, #16
 8001412:	4611      	mov	r1, r2
 8001414:	4618      	mov	r0, r3
 8001416:	f000 fa73 	bl	8001900 <IR_sent>
					 *knop = 0;
 800141a:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 800141e:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	2200      	movs	r2, #0
 8001426:	701a      	strb	r2, [r3, #0]
}
 8001428:	e7ff      	b.n	800142a <buttonPressed+0x2de>
 800142a:	bf00      	nop
 800142c:	f207 470c 	addw	r7, r7, #1036	; 0x40c
 8001430:	46bd      	mov	sp, r7
 8001432:	bd90      	pop	{r4, r7, pc}
 8001434:	0800872c 	.word	0x0800872c
 8001438:	20002720 	.word	0x20002720
 800143c:	20002812 	.word	0x20002812
 8001440:	08008784 	.word	0x08008784
 8001444:	0800879c 	.word	0x0800879c
 8001448:	080087bc 	.word	0x080087bc

0800144c <ColorToSelectedbutton>:
void ColorToSelectedbutton(uint8_t *button, uint16_t color)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b088      	sub	sp, #32
 8001450:	af04      	add	r7, sp, #16
 8001452:	6078      	str	r0, [r7, #4]
 8001454:	460b      	mov	r3, r1
 8001456:	807b      	strh	r3, [r7, #2]
	uint8_t knop = *button;
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	781b      	ldrb	r3, [r3, #0]
 800145c:	73fb      	strb	r3, [r7, #15]
	switch(knop)
 800145e:	7bfb      	ldrb	r3, [r7, #15]
 8001460:	3b01      	subs	r3, #1
 8001462:	2b0b      	cmp	r3, #11
 8001464:	f200 80bd 	bhi.w	80015e2 <ColorToSelectedbutton+0x196>
 8001468:	a201      	add	r2, pc, #4	; (adr r2, 8001470 <ColorToSelectedbutton+0x24>)
 800146a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800146e:	bf00      	nop
 8001470:	080014a1 	.word	0x080014a1
 8001474:	080014bb 	.word	0x080014bb
 8001478:	080014d5 	.word	0x080014d5
 800147c:	080014ef 	.word	0x080014ef
 8001480:	08001509 	.word	0x08001509
 8001484:	08001523 	.word	0x08001523
 8001488:	0800153d 	.word	0x0800153d
 800148c:	08001557 	.word	0x08001557
 8001490:	08001573 	.word	0x08001573
 8001494:	0800158f 	.word	0x0800158f
 8001498:	080015ab 	.word	0x080015ab
 800149c:	080015c7 	.word	0x080015c7
			{
			case 1:
				//Power
				DrawRectangle(23, 50, 75, 75, ILI9488_BLACK, color, 5);
 80014a0:	2305      	movs	r3, #5
 80014a2:	9302      	str	r3, [sp, #8]
 80014a4:	887b      	ldrh	r3, [r7, #2]
 80014a6:	9301      	str	r3, [sp, #4]
 80014a8:	2300      	movs	r3, #0
 80014aa:	9300      	str	r3, [sp, #0]
 80014ac:	234b      	movs	r3, #75	; 0x4b
 80014ae:	224b      	movs	r2, #75	; 0x4b
 80014b0:	2132      	movs	r1, #50	; 0x32
 80014b2:	2017      	movs	r0, #23
 80014b4:	f7ff fbe6 	bl	8000c84 <DrawRectangle>
				break;
 80014b8:	e094      	b.n	80015e4 <ColorToSelectedbutton+0x198>
			case 2:
				//Src
				DrawRectangle(219, 50, 75, 75, ILI9488_BLACK, color, 5);
 80014ba:	2305      	movs	r3, #5
 80014bc:	9302      	str	r3, [sp, #8]
 80014be:	887b      	ldrh	r3, [r7, #2]
 80014c0:	9301      	str	r3, [sp, #4]
 80014c2:	2300      	movs	r3, #0
 80014c4:	9300      	str	r3, [sp, #0]
 80014c6:	234b      	movs	r3, #75	; 0x4b
 80014c8:	224b      	movs	r2, #75	; 0x4b
 80014ca:	2132      	movs	r1, #50	; 0x32
 80014cc:	20db      	movs	r0, #219	; 0xdb
 80014ce:	f7ff fbd9 	bl	8000c84 <DrawRectangle>
				break;
 80014d2:	e087      	b.n	80015e4 <ColorToSelectedbutton+0x198>
			case 3:
				//^
				DrawRectangle(121, 80, 75, 75, ILI9488_BLACK, color, 5);
 80014d4:	2305      	movs	r3, #5
 80014d6:	9302      	str	r3, [sp, #8]
 80014d8:	887b      	ldrh	r3, [r7, #2]
 80014da:	9301      	str	r3, [sp, #4]
 80014dc:	2300      	movs	r3, #0
 80014de:	9300      	str	r3, [sp, #0]
 80014e0:	234b      	movs	r3, #75	; 0x4b
 80014e2:	224b      	movs	r2, #75	; 0x4b
 80014e4:	2150      	movs	r1, #80	; 0x50
 80014e6:	2079      	movs	r0, #121	; 0x79
 80014e8:	f7ff fbcc 	bl	8000c84 <DrawRectangle>
				break;
 80014ec:	e07a      	b.n	80015e4 <ColorToSelectedbutton+0x198>
			case 4:
				//<
				DrawRectangle(23, 165, 75, 75, ILI9488_BLACK, color, 5);
 80014ee:	2305      	movs	r3, #5
 80014f0:	9302      	str	r3, [sp, #8]
 80014f2:	887b      	ldrh	r3, [r7, #2]
 80014f4:	9301      	str	r3, [sp, #4]
 80014f6:	2300      	movs	r3, #0
 80014f8:	9300      	str	r3, [sp, #0]
 80014fa:	234b      	movs	r3, #75	; 0x4b
 80014fc:	224b      	movs	r2, #75	; 0x4b
 80014fe:	21a5      	movs	r1, #165	; 0xa5
 8001500:	2017      	movs	r0, #23
 8001502:	f7ff fbbf 	bl	8000c84 <DrawRectangle>
				break;
 8001506:	e06d      	b.n	80015e4 <ColorToSelectedbutton+0x198>
			case 5:
				//OK
				DrawRectangle(121, 165, 75, 75, ILI9488_BLACK, color, 5);
 8001508:	2305      	movs	r3, #5
 800150a:	9302      	str	r3, [sp, #8]
 800150c:	887b      	ldrh	r3, [r7, #2]
 800150e:	9301      	str	r3, [sp, #4]
 8001510:	2300      	movs	r3, #0
 8001512:	9300      	str	r3, [sp, #0]
 8001514:	234b      	movs	r3, #75	; 0x4b
 8001516:	224b      	movs	r2, #75	; 0x4b
 8001518:	21a5      	movs	r1, #165	; 0xa5
 800151a:	2079      	movs	r0, #121	; 0x79
 800151c:	f7ff fbb2 	bl	8000c84 <DrawRectangle>
				break;
 8001520:	e060      	b.n	80015e4 <ColorToSelectedbutton+0x198>
			case 6:
				//>
				DrawRectangle(219, 165, 75, 75, ILI9488_BLACK, color, 5);
 8001522:	2305      	movs	r3, #5
 8001524:	9302      	str	r3, [sp, #8]
 8001526:	887b      	ldrh	r3, [r7, #2]
 8001528:	9301      	str	r3, [sp, #4]
 800152a:	2300      	movs	r3, #0
 800152c:	9300      	str	r3, [sp, #0]
 800152e:	234b      	movs	r3, #75	; 0x4b
 8001530:	224b      	movs	r2, #75	; 0x4b
 8001532:	21a5      	movs	r1, #165	; 0xa5
 8001534:	20db      	movs	r0, #219	; 0xdb
 8001536:	f7ff fba5 	bl	8000c84 <DrawRectangle>
				break;
 800153a:	e053      	b.n	80015e4 <ColorToSelectedbutton+0x198>
			case 7:
				//V
				DrawRectangle(121, 250, 75, 75, ILI9488_BLACK, color, 5);
 800153c:	2305      	movs	r3, #5
 800153e:	9302      	str	r3, [sp, #8]
 8001540:	887b      	ldrh	r3, [r7, #2]
 8001542:	9301      	str	r3, [sp, #4]
 8001544:	2300      	movs	r3, #0
 8001546:	9300      	str	r3, [sp, #0]
 8001548:	234b      	movs	r3, #75	; 0x4b
 800154a:	224b      	movs	r2, #75	; 0x4b
 800154c:	21fa      	movs	r1, #250	; 0xfa
 800154e:	2079      	movs	r0, #121	; 0x79
 8001550:	f7ff fb98 	bl	8000c84 <DrawRectangle>
				break;
 8001554:	e046      	b.n	80015e4 <ColorToSelectedbutton+0x198>
			case 8:
				//volume up
					DrawRectangle(23, 298, 75, 75, ILI9488_BLACK, color, 5);
 8001556:	2305      	movs	r3, #5
 8001558:	9302      	str	r3, [sp, #8]
 800155a:	887b      	ldrh	r3, [r7, #2]
 800155c:	9301      	str	r3, [sp, #4]
 800155e:	2300      	movs	r3, #0
 8001560:	9300      	str	r3, [sp, #0]
 8001562:	234b      	movs	r3, #75	; 0x4b
 8001564:	224b      	movs	r2, #75	; 0x4b
 8001566:	f44f 7195 	mov.w	r1, #298	; 0x12a
 800156a:	2017      	movs	r0, #23
 800156c:	f7ff fb8a 	bl	8000c84 <DrawRectangle>
				break;
 8001570:	e038      	b.n	80015e4 <ColorToSelectedbutton+0x198>
			case 9:
				//volume down
					DrawRectangle(23, 393, 75, 75, ILI9488_BLACK, color, 5);
 8001572:	2305      	movs	r3, #5
 8001574:	9302      	str	r3, [sp, #8]
 8001576:	887b      	ldrh	r3, [r7, #2]
 8001578:	9301      	str	r3, [sp, #4]
 800157a:	2300      	movs	r3, #0
 800157c:	9300      	str	r3, [sp, #0]
 800157e:	234b      	movs	r3, #75	; 0x4b
 8001580:	224b      	movs	r2, #75	; 0x4b
 8001582:	f240 1189 	movw	r1, #393	; 0x189
 8001586:	2017      	movs	r0, #23
 8001588:	f7ff fb7c 	bl	8000c84 <DrawRectangle>
				break;
 800158c:	e02a      	b.n	80015e4 <ColorToSelectedbutton+0x198>
			case 10:
				//mute
					DrawRectangle(121, 393, 75, 75, ILI9488_BLACK, color, 5);
 800158e:	2305      	movs	r3, #5
 8001590:	9302      	str	r3, [sp, #8]
 8001592:	887b      	ldrh	r3, [r7, #2]
 8001594:	9301      	str	r3, [sp, #4]
 8001596:	2300      	movs	r3, #0
 8001598:	9300      	str	r3, [sp, #0]
 800159a:	234b      	movs	r3, #75	; 0x4b
 800159c:	224b      	movs	r2, #75	; 0x4b
 800159e:	f240 1189 	movw	r1, #393	; 0x189
 80015a2:	2079      	movs	r0, #121	; 0x79
 80015a4:	f7ff fb6e 	bl	8000c84 <DrawRectangle>
				break;
 80015a8:	e01c      	b.n	80015e4 <ColorToSelectedbutton+0x198>
			case 11:
				//channel up
					DrawRectangle(219, 298, 75, 75, ILI9488_BLACK, color, 5);
 80015aa:	2305      	movs	r3, #5
 80015ac:	9302      	str	r3, [sp, #8]
 80015ae:	887b      	ldrh	r3, [r7, #2]
 80015b0:	9301      	str	r3, [sp, #4]
 80015b2:	2300      	movs	r3, #0
 80015b4:	9300      	str	r3, [sp, #0]
 80015b6:	234b      	movs	r3, #75	; 0x4b
 80015b8:	224b      	movs	r2, #75	; 0x4b
 80015ba:	f44f 7195 	mov.w	r1, #298	; 0x12a
 80015be:	20db      	movs	r0, #219	; 0xdb
 80015c0:	f7ff fb60 	bl	8000c84 <DrawRectangle>
				break;
 80015c4:	e00e      	b.n	80015e4 <ColorToSelectedbutton+0x198>
			case 12:
				//channel down
					DrawRectangle(219, 393, 75, 75, ILI9488_BLACK, color, 5);
 80015c6:	2305      	movs	r3, #5
 80015c8:	9302      	str	r3, [sp, #8]
 80015ca:	887b      	ldrh	r3, [r7, #2]
 80015cc:	9301      	str	r3, [sp, #4]
 80015ce:	2300      	movs	r3, #0
 80015d0:	9300      	str	r3, [sp, #0]
 80015d2:	234b      	movs	r3, #75	; 0x4b
 80015d4:	224b      	movs	r2, #75	; 0x4b
 80015d6:	f240 1189 	movw	r1, #393	; 0x189
 80015da:	20db      	movs	r0, #219	; 0xdb
 80015dc:	f7ff fb52 	bl	8000c84 <DrawRectangle>
				break;
 80015e0:	e000      	b.n	80015e4 <ColorToSelectedbutton+0x198>
			default:
				break;
 80015e2:	bf00      	nop
			}
}
 80015e4:	bf00      	nop
 80015e6:	3710      	adds	r7, #16
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bd80      	pop	{r7, pc}

080015ec <mainscreen>:
void mainscreen()
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b084      	sub	sp, #16
 80015f0:	af04      	add	r7, sp, #16
	if(UartScreen == 1)
 80015f2:	4b28      	ldr	r3, [pc, #160]	; (8001694 <mainscreen+0xa8>)
 80015f4:	781b      	ldrb	r3, [r3, #0]
 80015f6:	2b01      	cmp	r3, #1
 80015f8:	d102      	bne.n	8001600 <mainscreen+0x14>
		{
		printf("Even geduld...\r\n");
 80015fa:	4827      	ldr	r0, [pc, #156]	; (8001698 <mainscreen+0xac>)
 80015fc:	f005 ff8c 	bl	8007518 <puts>
		}
	fillRect(0, 0, 320, 480, 0x0000);
 8001600:	2300      	movs	r3, #0
 8001602:	9300      	str	r3, [sp, #0]
 8001604:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8001608:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800160c:	2100      	movs	r1, #0
 800160e:	2000      	movs	r0, #0
 8001610:	f7ff fbf8 	bl	8000e04 <fillRect>
	//DrawImage(0, 0, POWERBUTTON_DATA_X_PIXEL, POWERBUTTON_DATA_Y_PIXEL, POWERBUTTON_DATA);
	//DrawRectangle(x, y, h, w, color, contentcolor, border)
	DrawRectangle(0, 0, 40, 79, ILI9488_BLUE, ILI9488_BLUE, 0);
 8001614:	2300      	movs	r3, #0
 8001616:	9302      	str	r3, [sp, #8]
 8001618:	231f      	movs	r3, #31
 800161a:	9301      	str	r3, [sp, #4]
 800161c:	231f      	movs	r3, #31
 800161e:	9300      	str	r3, [sp, #0]
 8001620:	234f      	movs	r3, #79	; 0x4f
 8001622:	2228      	movs	r2, #40	; 0x28
 8001624:	2100      	movs	r1, #0
 8001626:	2000      	movs	r0, #0
 8001628:	f7ff fb2c 	bl	8000c84 <DrawRectangle>
	DrawRectangle(80, 0, 40, 79, ILI9488_YELLOW, ILI9488_YELLOW, 0);
 800162c:	2300      	movs	r3, #0
 800162e:	9302      	str	r3, [sp, #8]
 8001630:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001634:	9301      	str	r3, [sp, #4]
 8001636:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800163a:	9300      	str	r3, [sp, #0]
 800163c:	234f      	movs	r3, #79	; 0x4f
 800163e:	2228      	movs	r2, #40	; 0x28
 8001640:	2100      	movs	r1, #0
 8001642:	2050      	movs	r0, #80	; 0x50
 8001644:	f7ff fb1e 	bl	8000c84 <DrawRectangle>
	DrawRectangle(160, 0, 40, 79, ILI9488_GREEN, ILI9488_GREEN, 0);
 8001648:	2300      	movs	r3, #0
 800164a:	9302      	str	r3, [sp, #8]
 800164c:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8001650:	9301      	str	r3, [sp, #4]
 8001652:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8001656:	9300      	str	r3, [sp, #0]
 8001658:	234f      	movs	r3, #79	; 0x4f
 800165a:	2228      	movs	r2, #40	; 0x28
 800165c:	2100      	movs	r1, #0
 800165e:	20a0      	movs	r0, #160	; 0xa0
 8001660:	f7ff fb10 	bl	8000c84 <DrawRectangle>
	DrawRectangle(240, 0, 40, 79, ILI9488_WHITE, ILI9488_WHITE, 0);
 8001664:	2300      	movs	r3, #0
 8001666:	9302      	str	r3, [sp, #8]
 8001668:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800166c:	9301      	str	r3, [sp, #4]
 800166e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001672:	9300      	str	r3, [sp, #0]
 8001674:	234f      	movs	r3, #79	; 0x4f
 8001676:	2228      	movs	r2, #40	; 0x28
 8001678:	2100      	movs	r1, #0
 800167a:	20f0      	movs	r0, #240	; 0xf0
 800167c:	f7ff fb02 	bl	8000c84 <DrawRectangle>

	if(UartScreen == 1)
 8001680:	4b04      	ldr	r3, [pc, #16]	; (8001694 <mainscreen+0xa8>)
 8001682:	781b      	ldrb	r3, [r3, #0]
 8001684:	2b01      	cmp	r3, #1
 8001686:	d102      	bne.n	800168e <mainscreen+0xa2>
	{
	printf("MainScreen ingeladen\r\n");
 8001688:	4804      	ldr	r0, [pc, #16]	; (800169c <mainscreen+0xb0>)
 800168a:	f005 ff45 	bl	8007518 <puts>
	}
}
 800168e:	bf00      	nop
 8001690:	46bd      	mov	sp, r7
 8001692:	bd80      	pop	{r7, pc}
 8001694:	20000000 	.word	0x20000000
 8001698:	080087d8 	.word	0x080087d8
 800169c:	080087e8 	.word	0x080087e8

080016a0 <cleartijd>:
uint16_t eerste_flank = 0;
uint32_t eerste_flank_plus_2sec = 0;
uint8_t IR_Done = 0;

void cleartijd()
{
 80016a0:	b480      	push	{r7}
 80016a2:	b083      	sub	sp, #12
 80016a4:	af00      	add	r7, sp, #0
	eerste_flank = 0;
 80016a6:	4b0f      	ldr	r3, [pc, #60]	; (80016e4 <cleartijd+0x44>)
 80016a8:	2200      	movs	r2, #0
 80016aa:	801a      	strh	r2, [r3, #0]
	eerste_flank_plus_2sec = 0;
 80016ac:	4b0e      	ldr	r3, [pc, #56]	; (80016e8 <cleartijd+0x48>)
 80016ae:	2200      	movs	r2, #0
 80016b0:	601a      	str	r2, [r3, #0]
	IR_Done = 0;
 80016b2:	4b0e      	ldr	r3, [pc, #56]	; (80016ec <cleartijd+0x4c>)
 80016b4:	2200      	movs	r2, #0
 80016b6:	701a      	strb	r2, [r3, #0]
	for(uint16_t i = 0; i < 500; i++)
 80016b8:	2300      	movs	r3, #0
 80016ba:	80fb      	strh	r3, [r7, #6]
 80016bc:	e007      	b.n	80016ce <cleartijd+0x2e>
	{
		tijd[i]=0;
 80016be:	88fb      	ldrh	r3, [r7, #6]
 80016c0:	4a0b      	ldr	r2, [pc, #44]	; (80016f0 <cleartijd+0x50>)
 80016c2:	2100      	movs	r1, #0
 80016c4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(uint16_t i = 0; i < 500; i++)
 80016c8:	88fb      	ldrh	r3, [r7, #6]
 80016ca:	3301      	adds	r3, #1
 80016cc:	80fb      	strh	r3, [r7, #6]
 80016ce:	88fb      	ldrh	r3, [r7, #6]
 80016d0:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80016d4:	d3f3      	bcc.n	80016be <cleartijd+0x1e>
	}
}
 80016d6:	bf00      	nop
 80016d8:	bf00      	nop
 80016da:	370c      	adds	r7, #12
 80016dc:	46bd      	mov	sp, r7
 80016de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e2:	4770      	bx	lr
 80016e4:	20002c02 	.word	0x20002c02
 80016e8:	20002c04 	.word	0x20002c04
 80016ec:	20002c08 	.word	0x20002c08
 80016f0:	20002818 	.word	0x20002818

080016f4 <Interrupt_flank>:

void Interrupt_flank()
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	af00      	add	r7, sp, #0

	if(IR_READ_flag == 1)
 80016f8:	4b1f      	ldr	r3, [pc, #124]	; (8001778 <Interrupt_flank+0x84>)
 80016fa:	781b      	ldrb	r3, [r3, #0]
 80016fc:	2b01      	cmp	r3, #1
 80016fe:	d136      	bne.n	800176e <Interrupt_flank+0x7a>
	{
		eerste_flank++;
 8001700:	4b1e      	ldr	r3, [pc, #120]	; (800177c <Interrupt_flank+0x88>)
 8001702:	881b      	ldrh	r3, [r3, #0]
 8001704:	3301      	adds	r3, #1
 8001706:	b29a      	uxth	r2, r3
 8001708:	4b1c      	ldr	r3, [pc, #112]	; (800177c <Interrupt_flank+0x88>)
 800170a:	801a      	strh	r2, [r3, #0]
		if(eerste_flank == 1) //eerste flank
 800170c:	4b1b      	ldr	r3, [pc, #108]	; (800177c <Interrupt_flank+0x88>)
 800170e:	881b      	ldrh	r3, [r3, #0]
 8001710:	2b01      	cmp	r3, #1
 8001712:	d109      	bne.n	8001728 <Interrupt_flank+0x34>
			{
					HAL_TIM_Base_Start(&TIM_1us);
 8001714:	481a      	ldr	r0, [pc, #104]	; (8001780 <Interrupt_flank+0x8c>)
 8001716:	f004 f8df 	bl	80058d8 <HAL_TIM_Base_Start>
					eerste_flank_plus_2sec = HAL_GetTick() + 2000;
 800171a:	f001 f8e9 	bl	80028f0 <HAL_GetTick>
 800171e:	4603      	mov	r3, r0
 8001720:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8001724:	4a17      	ldr	r2, [pc, #92]	; (8001784 <Interrupt_flank+0x90>)
 8001726:	6013      	str	r3, [r2, #0]
			}
		if(eerste_flank >= 2) // alle andere flanken
 8001728:	4b14      	ldr	r3, [pc, #80]	; (800177c <Interrupt_flank+0x88>)
 800172a:	881b      	ldrh	r3, [r3, #0]
 800172c:	2b01      	cmp	r3, #1
 800172e:	d921      	bls.n	8001774 <Interrupt_flank+0x80>
			{
				HAL_TIM_Base_Stop(&TIM_1us); //timer stoppen
 8001730:	4813      	ldr	r0, [pc, #76]	; (8001780 <Interrupt_flank+0x8c>)
 8001732:	f004 f941 	bl	80059b8 <HAL_TIM_Base_Stop>
				tijd[pulsecounter] = TIM_1us.Instance -> CNT; //timer opslaan
 8001736:	4b12      	ldr	r3, [pc, #72]	; (8001780 <Interrupt_flank+0x8c>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800173c:	4b12      	ldr	r3, [pc, #72]	; (8001788 <Interrupt_flank+0x94>)
 800173e:	881b      	ldrh	r3, [r3, #0]
 8001740:	461a      	mov	r2, r3
 8001742:	b289      	uxth	r1, r1
 8001744:	4b11      	ldr	r3, [pc, #68]	; (800178c <Interrupt_flank+0x98>)
 8001746:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
				lengte = pulsecounter;
 800174a:	4b0f      	ldr	r3, [pc, #60]	; (8001788 <Interrupt_flank+0x94>)
 800174c:	881a      	ldrh	r2, [r3, #0]
 800174e:	4b10      	ldr	r3, [pc, #64]	; (8001790 <Interrupt_flank+0x9c>)
 8001750:	801a      	strh	r2, [r3, #0]
				pulsecounter++;
 8001752:	4b0d      	ldr	r3, [pc, #52]	; (8001788 <Interrupt_flank+0x94>)
 8001754:	881b      	ldrh	r3, [r3, #0]
 8001756:	3301      	adds	r3, #1
 8001758:	b29a      	uxth	r2, r3
 800175a:	4b0b      	ldr	r3, [pc, #44]	; (8001788 <Interrupt_flank+0x94>)
 800175c:	801a      	strh	r2, [r3, #0]
				TIM_1us.Instance -> CNT = 0;
 800175e:	4b08      	ldr	r3, [pc, #32]	; (8001780 <Interrupt_flank+0x8c>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	2200      	movs	r2, #0
 8001764:	625a      	str	r2, [r3, #36]	; 0x24
				HAL_TIM_Base_Start(&TIM_1us);
 8001766:	4806      	ldr	r0, [pc, #24]	; (8001780 <Interrupt_flank+0x8c>)
 8001768:	f004 f8b6 	bl	80058d8 <HAL_TIM_Base_Start>
	else
	{
		printf("ik kan niet werken, aangezien ik uit sta\r\n");
	}

}
 800176c:	e002      	b.n	8001774 <Interrupt_flank+0x80>
		printf("ik kan niet werken, aangezien ik uit sta\r\n");
 800176e:	4809      	ldr	r0, [pc, #36]	; (8001794 <Interrupt_flank+0xa0>)
 8001770:	f005 fed2 	bl	8007518 <puts>
}
 8001774:	bf00      	nop
 8001776:	bd80      	pop	{r7, pc}
 8001778:	20002812 	.word	0x20002812
 800177c:	20002c02 	.word	0x20002c02
 8001780:	20002cc4 	.word	0x20002cc4
 8001784:	20002c04 	.word	0x20002c04
 8001788:	20002810 	.word	0x20002810
 800178c:	20002818 	.word	0x20002818
 8001790:	20002814 	.word	0x20002814
 8001794:	08008800 	.word	0x08008800

08001798 <IR_Carrier_ON>:
void IR_Carrier_ON()
{
 8001798:	b580      	push	{r7, lr}
 800179a:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&TIM_PWM_CARRIER, TIM_PWM_CARRIER_CHANNEL);
 800179c:	2104      	movs	r1, #4
 800179e:	4802      	ldr	r0, [pc, #8]	; (80017a8 <IR_Carrier_ON+0x10>)
 80017a0:	f004 f988 	bl	8005ab4 <HAL_TIM_PWM_Start>
}
 80017a4:	bf00      	nop
 80017a6:	bd80      	pop	{r7, pc}
 80017a8:	20002d10 	.word	0x20002d10

080017ac <IR_Carrier_OFF>:
void IR_Carrier_OFF()
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Stop(&TIM_PWM_CARRIER, TIM_PWM_CARRIER_CHANNEL);
 80017b0:	2104      	movs	r1, #4
 80017b2:	4802      	ldr	r0, [pc, #8]	; (80017bc <IR_Carrier_OFF+0x10>)
 80017b4:	f004 fa78 	bl	8005ca8 <HAL_TIM_PWM_Stop>
}
 80017b8:	bf00      	nop
 80017ba:	bd80      	pop	{r7, pc}
 80017bc:	20002d10 	.word	0x20002d10

080017c0 <IR_Read>:
void IR_Read()
{
 80017c0:	b480      	push	{r7}
 80017c2:	af00      	add	r7, sp, #0
	IR_READ_flag = 1 ;
 80017c4:	4b03      	ldr	r3, [pc, #12]	; (80017d4 <IR_Read+0x14>)
 80017c6:	2201      	movs	r2, #1
 80017c8:	701a      	strb	r2, [r3, #0]
}
 80017ca:	bf00      	nop
 80017cc:	46bd      	mov	sp, r7
 80017ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d2:	4770      	bx	lr
 80017d4:	20002812 	.word	0x20002812

080017d8 <IR_UNDERSTAND>:

void IR_UNDERSTAND(uint8_t *berekening, uint8_t *geen_signaal, uint8_t *lengte_signaal_gevonden)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b086      	sub	sp, #24
 80017dc:	af00      	add	r7, sp, #0
 80017de:	60f8      	str	r0, [r7, #12]
 80017e0:	60b9      	str	r1, [r7, #8]
 80017e2:	607a      	str	r2, [r7, #4]



	if(HAL_GetTick() >= eerste_flank_plus_2sec)
 80017e4:	f001 f884 	bl	80028f0 <HAL_GetTick>
 80017e8:	4602      	mov	r2, r0
 80017ea:	4b3c      	ldr	r3, [pc, #240]	; (80018dc <IR_UNDERSTAND+0x104>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	429a      	cmp	r2, r3
 80017f0:	d36f      	bcc.n	80018d2 <IR_UNDERSTAND+0xfa>
	{
	//geen_signaal in het begin op 0 zetten, geen signaal =0, wel een signaal = 1, lengte gevonden = 2
	//5 metingen test
	uint8_t measurement = 0;
 80017f2:	2300      	movs	r3, #0
 80017f4:	75fb      	strb	r3, [r7, #23]
	for(uint8_t five_measurements = 0; five_measurements < 5; five_measurements++)
 80017f6:	2300      	movs	r3, #0
 80017f8:	75bb      	strb	r3, [r7, #22]
 80017fa:	e00b      	b.n	8001814 <IR_UNDERSTAND+0x3c>
	{
		if(tijd[five_measurements] == 0)
 80017fc:	7dbb      	ldrb	r3, [r7, #22]
 80017fe:	4a38      	ldr	r2, [pc, #224]	; (80018e0 <IR_UNDERSTAND+0x108>)
 8001800:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001804:	2b00      	cmp	r3, #0
 8001806:	d102      	bne.n	800180e <IR_UNDERSTAND+0x36>
			{
				measurement++;
 8001808:	7dfb      	ldrb	r3, [r7, #23]
 800180a:	3301      	adds	r3, #1
 800180c:	75fb      	strb	r3, [r7, #23]
	for(uint8_t five_measurements = 0; five_measurements < 5; five_measurements++)
 800180e:	7dbb      	ldrb	r3, [r7, #22]
 8001810:	3301      	adds	r3, #1
 8001812:	75bb      	strb	r3, [r7, #22]
 8001814:	7dbb      	ldrb	r3, [r7, #22]
 8001816:	2b04      	cmp	r3, #4
 8001818:	d9f0      	bls.n	80017fc <IR_UNDERSTAND+0x24>
			}
		}
	if(measurement == 5)
 800181a:	7dfb      	ldrb	r3, [r7, #23]
 800181c:	2b05      	cmp	r3, #5
 800181e:	d106      	bne.n	800182e <IR_UNDERSTAND+0x56>
		{
				printf("Er is niks gemeten \r\n");
 8001820:	4830      	ldr	r0, [pc, #192]	; (80018e4 <IR_UNDERSTAND+0x10c>)
 8001822:	f005 fe79 	bl	8007518 <puts>
				*geen_signaal = 0;
 8001826:	68bb      	ldr	r3, [r7, #8]
 8001828:	2200      	movs	r2, #0
 800182a:	701a      	strb	r2, [r3, #0]
 800182c:	e00c      	b.n	8001848 <IR_UNDERSTAND+0x70>
		}
	else
		{
		printf("Er is iets gemeten %d \r\n", lengte_signaal[commando]);
 800182e:	4b2e      	ldr	r3, [pc, #184]	; (80018e8 <IR_UNDERSTAND+0x110>)
 8001830:	781b      	ldrb	r3, [r3, #0]
 8001832:	461a      	mov	r2, r3
 8001834:	4b2d      	ldr	r3, [pc, #180]	; (80018ec <IR_UNDERSTAND+0x114>)
 8001836:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800183a:	4619      	mov	r1, r3
 800183c:	482c      	ldr	r0, [pc, #176]	; (80018f0 <IR_UNDERSTAND+0x118>)
 800183e:	f005 fde5 	bl	800740c <iprintf>
		*geen_signaal = 1;
 8001842:	68bb      	ldr	r3, [r7, #8]
 8001844:	2201      	movs	r2, #1
 8001846:	701a      	strb	r2, [r3, #0]
		}
	if(*geen_signaal == 1)   //als er een signaal gevonden is
 8001848:	68bb      	ldr	r3, [r7, #8]
 800184a:	781b      	ldrb	r3, [r3, #0]
 800184c:	2b01      	cmp	r3, #1
 800184e:	d140      	bne.n	80018d2 <IR_UNDERSTAND+0xfa>
		{

			if(*lengte_signaal_gevonden == 0)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	781b      	ldrb	r3, [r3, #0]
 8001854:	2b00      	cmp	r3, #0
 8001856:	d13c      	bne.n	80018d2 <IR_UNDERSTAND+0xfa>
			{

				for(uint16_t debugwaarde = 0; debugwaarde < 500 ; debugwaarde++)
 8001858:	2300      	movs	r3, #0
 800185a:	82bb      	strh	r3, [r7, #20]
 800185c:	e00b      	b.n	8001876 <IR_UNDERSTAND+0x9e>
				{
				 printf("tijd[%d] = %d \r\n", debugwaarde, tijd[debugwaarde]);
 800185e:	8ab9      	ldrh	r1, [r7, #20]
 8001860:	8abb      	ldrh	r3, [r7, #20]
 8001862:	4a1f      	ldr	r2, [pc, #124]	; (80018e0 <IR_UNDERSTAND+0x108>)
 8001864:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001868:	461a      	mov	r2, r3
 800186a:	4822      	ldr	r0, [pc, #136]	; (80018f4 <IR_UNDERSTAND+0x11c>)
 800186c:	f005 fdce 	bl	800740c <iprintf>
				for(uint16_t debugwaarde = 0; debugwaarde < 500 ; debugwaarde++)
 8001870:	8abb      	ldrh	r3, [r7, #20]
 8001872:	3301      	adds	r3, #1
 8001874:	82bb      	strh	r3, [r7, #20]
 8001876:	8abb      	ldrh	r3, [r7, #20]
 8001878:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800187c:	d3ef      	bcc.n	800185e <IR_UNDERSTAND+0x86>
				}
				uint16_t waarde = 499;
 800187e:	f240 13f3 	movw	r3, #499	; 0x1f3
 8001882:	827b      	strh	r3, [r7, #18]
				while(tijd[waarde] == 0)
 8001884:	e002      	b.n	800188c <IR_UNDERSTAND+0xb4>
				{
				waarde--;
 8001886:	8a7b      	ldrh	r3, [r7, #18]
 8001888:	3b01      	subs	r3, #1
 800188a:	827b      	strh	r3, [r7, #18]
				while(tijd[waarde] == 0)
 800188c:	8a7b      	ldrh	r3, [r7, #18]
 800188e:	4a14      	ldr	r2, [pc, #80]	; (80018e0 <IR_UNDERSTAND+0x108>)
 8001890:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001894:	2b00      	cmp	r3, #0
 8001896:	d0f6      	beq.n	8001886 <IR_UNDERSTAND+0xae>
				}
				lengte_signaal[*berekening] = waarde;
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	781b      	ldrb	r3, [r3, #0]
 800189c:	4619      	mov	r1, r3
 800189e:	4a13      	ldr	r2, [pc, #76]	; (80018ec <IR_UNDERSTAND+0x114>)
 80018a0:	8a7b      	ldrh	r3, [r7, #18]
 80018a2:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
				printf("lengte signaal = %d\r\n", lengte_signaal[*berekening]);
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	781b      	ldrb	r3, [r3, #0]
 80018aa:	461a      	mov	r2, r3
 80018ac:	4b0f      	ldr	r3, [pc, #60]	; (80018ec <IR_UNDERSTAND+0x114>)
 80018ae:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80018b2:	4619      	mov	r1, r3
 80018b4:	4810      	ldr	r0, [pc, #64]	; (80018f8 <IR_UNDERSTAND+0x120>)
 80018b6:	f005 fda9 	bl	800740c <iprintf>
				printf("trouwens berekening= %d\r\n", *berekening);
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	781b      	ldrb	r3, [r3, #0]
 80018be:	4619      	mov	r1, r3
 80018c0:	480e      	ldr	r0, [pc, #56]	; (80018fc <IR_UNDERSTAND+0x124>)
 80018c2:	f005 fda3 	bl	800740c <iprintf>
				*lengte_signaal_gevonden = 1;
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	2201      	movs	r2, #1
 80018ca:	701a      	strb	r2, [r3, #0]
				*geen_signaal=2;
 80018cc:	68bb      	ldr	r3, [r7, #8]
 80018ce:	2202      	movs	r2, #2
 80018d0:	701a      	strb	r2, [r3, #0]
			}
		}
	}

}
 80018d2:	bf00      	nop
 80018d4:	3718      	adds	r7, #24
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bd80      	pop	{r7, pc}
 80018da:	bf00      	nop
 80018dc:	20002c04 	.word	0x20002c04
 80018e0:	20002818 	.word	0x20002818
 80018e4:	0800882c 	.word	0x0800882c
 80018e8:	20002c00 	.word	0x20002c00
 80018ec:	20002720 	.word	0x20002720
 80018f0:	08008844 	.word	0x08008844
 80018f4:	08008860 	.word	0x08008860
 80018f8:	08008874 	.word	0x08008874
 80018fc:	0800888c 	.word	0x0800888c

08001900 <IR_sent>:



void IR_sent(uint16_t *tijd, uint16_t lengte_sig)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b084      	sub	sp, #16
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
 8001908:	460b      	mov	r3, r1
 800190a:	807b      	strh	r3, [r7, #2]
	printf("lengte in IR_sent is %d en eerste tijdswaarden is %d\r\n", lengte_sig, tijd[0]);
 800190c:	8879      	ldrh	r1, [r7, #2]
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	881b      	ldrh	r3, [r3, #0]
 8001912:	461a      	mov	r2, r3
 8001914:	4825      	ldr	r0, [pc, #148]	; (80019ac <IR_sent+0xac>)
 8001916:	f005 fd79 	bl	800740c <iprintf>
   IR_READ_flag = 0; //er kan niks meer ingelezen worden
 800191a:	4b25      	ldr	r3, [pc, #148]	; (80019b0 <IR_sent+0xb0>)
 800191c:	2200      	movs	r2, #0
 800191e:	701a      	strb	r2, [r3, #0]
   for(uint8_t i = 0; i < lengte_sig; i++)
 8001920:	2300      	movs	r3, #0
 8001922:	73fb      	strb	r3, [r7, #15]
 8001924:	e037      	b.n	8001996 <IR_sent+0x96>
   {

	   if((i%2)==0)
 8001926:	7bfb      	ldrb	r3, [r7, #15]
 8001928:	f003 0301 	and.w	r3, r3, #1
 800192c:	b2db      	uxtb	r3, r3
 800192e:	2b00      	cmp	r3, #0
 8001930:	d117      	bne.n	8001962 <IR_sent+0x62>
	   {
		   HAL_TIM_Base_Stop(&TIM_1us);
 8001932:	4820      	ldr	r0, [pc, #128]	; (80019b4 <IR_sent+0xb4>)
 8001934:	f004 f840 	bl	80059b8 <HAL_TIM_Base_Stop>
		   TIM_1us.Instance->CNT = 0;
 8001938:	4b1e      	ldr	r3, [pc, #120]	; (80019b4 <IR_sent+0xb4>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	2200      	movs	r2, #0
 800193e:	625a      	str	r2, [r3, #36]	; 0x24
		   HAL_TIM_Base_Start(&TIM_1us);
 8001940:	481c      	ldr	r0, [pc, #112]	; (80019b4 <IR_sent+0xb4>)
 8001942:	f003 ffc9 	bl	80058d8 <HAL_TIM_Base_Start>
		   IR_Carrier_ON();
 8001946:	f7ff ff27 	bl	8001798 <IR_Carrier_ON>
		   while((TIM_1us.Instance->CNT) <= tijd[i]){}
 800194a:	bf00      	nop
 800194c:	4b19      	ldr	r3, [pc, #100]	; (80019b4 <IR_sent+0xb4>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001952:	7bfa      	ldrb	r2, [r7, #15]
 8001954:	0052      	lsls	r2, r2, #1
 8001956:	6879      	ldr	r1, [r7, #4]
 8001958:	440a      	add	r2, r1
 800195a:	8812      	ldrh	r2, [r2, #0]
 800195c:	4293      	cmp	r3, r2
 800195e:	d9f5      	bls.n	800194c <IR_sent+0x4c>
 8001960:	e016      	b.n	8001990 <IR_sent+0x90>
	   }
	   else
	   {
		   HAL_TIM_Base_Stop(&TIM_1us);
 8001962:	4814      	ldr	r0, [pc, #80]	; (80019b4 <IR_sent+0xb4>)
 8001964:	f004 f828 	bl	80059b8 <HAL_TIM_Base_Stop>
		   TIM_1us.Instance->CNT = 0;
 8001968:	4b12      	ldr	r3, [pc, #72]	; (80019b4 <IR_sent+0xb4>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	2200      	movs	r2, #0
 800196e:	625a      	str	r2, [r3, #36]	; 0x24
		   HAL_TIM_Base_Start(&TIM_1us);
 8001970:	4810      	ldr	r0, [pc, #64]	; (80019b4 <IR_sent+0xb4>)
 8001972:	f003 ffb1 	bl	80058d8 <HAL_TIM_Base_Start>
		   IR_Carrier_OFF();
 8001976:	f7ff ff19 	bl	80017ac <IR_Carrier_OFF>
		   while((TIM_1us.Instance->CNT) <= tijd[i]){}
 800197a:	bf00      	nop
 800197c:	4b0d      	ldr	r3, [pc, #52]	; (80019b4 <IR_sent+0xb4>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001982:	7bfa      	ldrb	r2, [r7, #15]
 8001984:	0052      	lsls	r2, r2, #1
 8001986:	6879      	ldr	r1, [r7, #4]
 8001988:	440a      	add	r2, r1
 800198a:	8812      	ldrh	r2, [r2, #0]
 800198c:	4293      	cmp	r3, r2
 800198e:	d9f5      	bls.n	800197c <IR_sent+0x7c>
   for(uint8_t i = 0; i < lengte_sig; i++)
 8001990:	7bfb      	ldrb	r3, [r7, #15]
 8001992:	3301      	adds	r3, #1
 8001994:	73fb      	strb	r3, [r7, #15]
 8001996:	7bfb      	ldrb	r3, [r7, #15]
 8001998:	b29b      	uxth	r3, r3
 800199a:	887a      	ldrh	r2, [r7, #2]
 800199c:	429a      	cmp	r2, r3
 800199e:	d8c2      	bhi.n	8001926 <IR_sent+0x26>

	   }
   }
   IR_Carrier_OFF();
 80019a0:	f7ff ff04 	bl	80017ac <IR_Carrier_OFF>
}
 80019a4:	bf00      	nop
 80019a6:	3710      	adds	r7, #16
 80019a8:	46bd      	mov	sp, r7
 80019aa:	bd80      	pop	{r7, pc}
 80019ac:	080088a8 	.word	0x080088a8
 80019b0:	20002812 	.word	0x20002812
 80019b4:	20002cc4 	.word	0x20002cc4

080019b8 <InitTouch>:
#define Tim_Backlight htim10



void InitTouch()
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b088      	sub	sp, #32
 80019bc:	af02      	add	r7, sp, #8
	uint16_t device_address_write = 0xBA;
 80019be:	23ba      	movs	r3, #186	; 0xba
 80019c0:	82fb      	strh	r3, [r7, #22]
	uint16_t device_address_read = 0xBB;
 80019c2:	23bb      	movs	r3, #187	; 0xbb
 80019c4:	82bb      	strh	r3, [r7, #20]
	uint8_t dataWrite[] = {0x81,0x40};
 80019c6:	f244 0381 	movw	r3, #16513	; 0x4081
 80019ca:	823b      	strh	r3, [r7, #16]
	uint8_t ontvangen[11];
	HAL_I2C_Master_Transmit(&hi2c1, device_address_write, 0, 0 , HAL_MAX_DELAY); //new
 80019cc:	8af9      	ldrh	r1, [r7, #22]
 80019ce:	f04f 33ff 	mov.w	r3, #4294967295
 80019d2:	9300      	str	r3, [sp, #0]
 80019d4:	2300      	movs	r3, #0
 80019d6:	2200      	movs	r2, #0
 80019d8:	480c      	ldr	r0, [pc, #48]	; (8001a0c <InitTouch+0x54>)
 80019da:	f001 fb45 	bl	8003068 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Transmit(&hi2c1, device_address_write, dataWrite, 2 , HAL_MAX_DELAY);
 80019de:	f107 0210 	add.w	r2, r7, #16
 80019e2:	8af9      	ldrh	r1, [r7, #22]
 80019e4:	f04f 33ff 	mov.w	r3, #4294967295
 80019e8:	9300      	str	r3, [sp, #0]
 80019ea:	2302      	movs	r3, #2
 80019ec:	4807      	ldr	r0, [pc, #28]	; (8001a0c <InitTouch+0x54>)
 80019ee:	f001 fb3b 	bl	8003068 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1, device_address_read, ontvangen, 11, HAL_MAX_DELAY); //
 80019f2:	1d3a      	adds	r2, r7, #4
 80019f4:	8ab9      	ldrh	r1, [r7, #20]
 80019f6:	f04f 33ff 	mov.w	r3, #4294967295
 80019fa:	9300      	str	r3, [sp, #0]
 80019fc:	230b      	movs	r3, #11
 80019fe:	4803      	ldr	r0, [pc, #12]	; (8001a0c <InitTouch+0x54>)
 8001a00:	f001 fc26 	bl	8003250 <HAL_I2C_Master_Receive>
}
 8001a04:	bf00      	nop
 8001a06:	3718      	adds	r7, #24
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	bd80      	pop	{r7, pc}
 8001a0c:	20002c0c 	.word	0x20002c0c

08001a10 <Touch>:
void Touch(uint8_t *Sensingtouch, uint16_t *X_waarde, uint16_t *Y_waarde)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b08e      	sub	sp, #56	; 0x38
 8001a14:	af04      	add	r7, sp, #16
 8001a16:	60f8      	str	r0, [r7, #12]
 8001a18:	60b9      	str	r1, [r7, #8]
 8001a1a:	607a      	str	r2, [r7, #4]
	uint16_t device_address_write = 0xBA;
 8001a1c:	23ba      	movs	r3, #186	; 0xba
 8001a1e:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint16_t device_address_read = 0xBB;
 8001a20:	23bb      	movs	r3, #187	; 0xbb
 8001a22:	84bb      	strh	r3, [r7, #36]	; 0x24
	uint8_t nulladdress = 0x00;
 8001a24:	2300      	movs	r3, #0
 8001a26:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23





		HAL_Delay(5);
 8001a2a:	2005      	movs	r0, #5
 8001a2c:	f000 ff6c 	bl	8002908 <HAL_Delay>
		HAL_I2C_Mem_Read(&myI2C, device_address_read, 0x814E, 2, buffer1, 1, HAL_MAX_DELAY);
 8001a30:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 8001a32:	f04f 33ff 	mov.w	r3, #4294967295
 8001a36:	9302      	str	r3, [sp, #8]
 8001a38:	2301      	movs	r3, #1
 8001a3a:	9301      	str	r3, [sp, #4]
 8001a3c:	f107 0314 	add.w	r3, r7, #20
 8001a40:	9300      	str	r3, [sp, #0]
 8001a42:	2302      	movs	r3, #2
 8001a44:	f248 124e 	movw	r2, #33102	; 0x814e
 8001a48:	482e      	ldr	r0, [pc, #184]	; (8001b04 <Touch+0xf4>)
 8001a4a:	f001 fe0b 	bl	8003664 <HAL_I2C_Mem_Read>
		if(buffer1[0] != 0x00)
 8001a4e:	7d3b      	ldrb	r3, [r7, #20]
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d04d      	beq.n	8001af0 <Touch+0xe0>
		{
			*Sensingtouch = 1;
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	2201      	movs	r2, #1
 8001a58:	701a      	strb	r2, [r3, #0]
			HAL_I2C_Mem_Read(&myI2C, device_address_read, 0x814F, 2, buffer, 12, HAL_MAX_DELAY);
 8001a5a:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 8001a5c:	f04f 33ff 	mov.w	r3, #4294967295
 8001a60:	9302      	str	r3, [sp, #8]
 8001a62:	230c      	movs	r3, #12
 8001a64:	9301      	str	r3, [sp, #4]
 8001a66:	f107 0314 	add.w	r3, r7, #20
 8001a6a:	9300      	str	r3, [sp, #0]
 8001a6c:	2302      	movs	r3, #2
 8001a6e:	f248 124f 	movw	r2, #33103	; 0x814f
 8001a72:	4824      	ldr	r0, [pc, #144]	; (8001b04 <Touch+0xf4>)
 8001a74:	f001 fdf6 	bl	8003664 <HAL_I2C_Mem_Read>
			if(buffer[4] == 1) //als buffer[3] het midden overschrijdt, dan gaat hij van 255 terug naar 0, en wordt buffer[4] op 1 gezet.
 8001a78:	7e3b      	ldrb	r3, [r7, #24]
 8001a7a:	2b01      	cmp	r3, #1
 8001a7c:	d106      	bne.n	8001a8c <Touch+0x7c>
			{
				*Y_waarde = 0xFF + buffer[3];
 8001a7e:	7dfb      	ldrb	r3, [r7, #23]
 8001a80:	b29b      	uxth	r3, r3
 8001a82:	33ff      	adds	r3, #255	; 0xff
 8001a84:	b29a      	uxth	r2, r3
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	801a      	strh	r2, [r3, #0]
 8001a8a:	e003      	b.n	8001a94 <Touch+0x84>
			}
			else
			{
				*Y_waarde = buffer[3];
 8001a8c:	7dfb      	ldrb	r3, [r7, #23]
 8001a8e:	b29a      	uxth	r2, r3
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	801a      	strh	r2, [r3, #0]
			}
			if(buffer[2] == 1)
 8001a94:	7dbb      	ldrb	r3, [r7, #22]
 8001a96:	2b01      	cmp	r3, #1
 8001a98:	d106      	bne.n	8001aa8 <Touch+0x98>
			{
				*X_waarde = 0xFF + buffer[1];
 8001a9a:	7d7b      	ldrb	r3, [r7, #21]
 8001a9c:	b29b      	uxth	r3, r3
 8001a9e:	33ff      	adds	r3, #255	; 0xff
 8001aa0:	b29a      	uxth	r2, r3
 8001aa2:	68bb      	ldr	r3, [r7, #8]
 8001aa4:	801a      	strh	r2, [r3, #0]
 8001aa6:	e003      	b.n	8001ab0 <Touch+0xa0>
			}
			else
			{
				*X_waarde = buffer[1];
 8001aa8:	7d7b      	ldrb	r3, [r7, #21]
 8001aaa:	b29a      	uxth	r2, r3
 8001aac:	68bb      	ldr	r3, [r7, #8]
 8001aae:	801a      	strh	r2, [r3, #0]
			}
						if(UartScreen == 1)
 8001ab0:	4b15      	ldr	r3, [pc, #84]	; (8001b08 <Touch+0xf8>)
 8001ab2:	781b      	ldrb	r3, [r3, #0]
 8001ab4:	2b01      	cmp	r3, #1
 8001ab6:	d10b      	bne.n	8001ad0 <Touch+0xc0>
							{
						printf("X= %d\r\n", *X_waarde);
 8001ab8:	68bb      	ldr	r3, [r7, #8]
 8001aba:	881b      	ldrh	r3, [r3, #0]
 8001abc:	4619      	mov	r1, r3
 8001abe:	4813      	ldr	r0, [pc, #76]	; (8001b0c <Touch+0xfc>)
 8001ac0:	f005 fca4 	bl	800740c <iprintf>
						printf("Y= %d\r\n", *Y_waarde);
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	881b      	ldrh	r3, [r3, #0]
 8001ac8:	4619      	mov	r1, r3
 8001aca:	4811      	ldr	r0, [pc, #68]	; (8001b10 <Touch+0x100>)
 8001acc:	f005 fc9e 	bl	800740c <iprintf>
							}

			HAL_I2C_Mem_Write(&myI2C, device_address_write, 0x814E, 2, &nulladdress, 1, HAL_MAX_DELAY); //de flag uitzetten
 8001ad0:	8cf9      	ldrh	r1, [r7, #38]	; 0x26
 8001ad2:	f04f 33ff 	mov.w	r3, #4294967295
 8001ad6:	9302      	str	r3, [sp, #8]
 8001ad8:	2301      	movs	r3, #1
 8001ada:	9301      	str	r3, [sp, #4]
 8001adc:	f107 0323 	add.w	r3, r7, #35	; 0x23
 8001ae0:	9300      	str	r3, [sp, #0]
 8001ae2:	2302      	movs	r3, #2
 8001ae4:	f248 124e 	movw	r2, #33102	; 0x814e
 8001ae8:	4806      	ldr	r0, [pc, #24]	; (8001b04 <Touch+0xf4>)
 8001aea:	f001 fca7 	bl	800343c <HAL_I2C_Mem_Write>
 8001aee:	e002      	b.n	8001af6 <Touch+0xe6>
		}
		else
		{
			*Sensingtouch = 0;
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	2200      	movs	r2, #0
 8001af4:	701a      	strb	r2, [r3, #0]
		}
		HAL_Delay(100);
 8001af6:	2064      	movs	r0, #100	; 0x64
 8001af8:	f000 ff06 	bl	8002908 <HAL_Delay>
		}
 8001afc:	bf00      	nop
 8001afe:	3728      	adds	r7, #40	; 0x28
 8001b00:	46bd      	mov	sp, r7
 8001b02:	bd80      	pop	{r7, pc}
 8001b04:	20002c0c 	.word	0x20002c0c
 8001b08:	20000000 	.word	0x20000000
 8001b0c:	080088e0 	.word	0x080088e0
 8001b10:	080088e8 	.word	0x080088e8

08001b14 <ReadDevice>:

void ReadDevice(uint8_t *device, uint16_t *X_w, uint16_t *Y_w)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b08a      	sub	sp, #40	; 0x28
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	60f8      	str	r0, [r7, #12]
 8001b1c:	60b9      	str	r1, [r7, #8]
 8001b1e:	607a      	str	r2, [r7, #4]
	uint16_t X_waarde = *X_w;
 8001b20:	68bb      	ldr	r3, [r7, #8]
 8001b22:	881b      	ldrh	r3, [r3, #0]
 8001b24:	84bb      	strh	r3, [r7, #36]	; 0x24
	uint16_t Y_waarde = *Y_w;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	881b      	ldrh	r3, [r3, #0]
 8001b2a:	847b      	strh	r3, [r7, #34]	; 0x22
	const uint16_t X_waarde_knoppen[] = {0,80,160,240};
 8001b2c:	4a24      	ldr	r2, [pc, #144]	; (8001bc0 <ReadDevice+0xac>)
 8001b2e:	f107 0318 	add.w	r3, r7, #24
 8001b32:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001b36:	e883 0003 	stmia.w	r3, {r0, r1}
	const uint16_t Y_waarde_knoppen[] = {0,40};
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	82bb      	strh	r3, [r7, #20]
 8001b3e:	2328      	movs	r3, #40	; 0x28
 8001b40:	82fb      	strh	r3, [r7, #22]
	uint8_t apparaat = 0; //if device = 0 , dan is er geen device geselecteerd
 8001b42:	2300      	movs	r3, #0
 8001b44:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21

		for(uint8_t i = 1; i<= 4; i++)
 8001b48:	2301      	movs	r3, #1
 8001b4a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001b4e:	e02d      	b.n	8001bac <ReadDevice+0x98>
		{
		if((X_waarde >= X_waarde_knoppen[i-1])&&(X_waarde <=X_waarde_knoppen[i-1]+79)&&(Y_waarde >= Y_waarde_knoppen[0])&&(Y_waarde <=Y_waarde_knoppen[1]))
 8001b50:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001b54:	3b01      	subs	r3, #1
 8001b56:	005b      	lsls	r3, r3, #1
 8001b58:	3328      	adds	r3, #40	; 0x28
 8001b5a:	443b      	add	r3, r7
 8001b5c:	f833 3c10 	ldrh.w	r3, [r3, #-16]
 8001b60:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001b62:	429a      	cmp	r2, r3
 8001b64:	d31d      	bcc.n	8001ba2 <ReadDevice+0x8e>
 8001b66:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001b68:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001b6c:	3b01      	subs	r3, #1
 8001b6e:	005b      	lsls	r3, r3, #1
 8001b70:	3328      	adds	r3, #40	; 0x28
 8001b72:	443b      	add	r3, r7
 8001b74:	f833 3c10 	ldrh.w	r3, [r3, #-16]
 8001b78:	334f      	adds	r3, #79	; 0x4f
 8001b7a:	429a      	cmp	r2, r3
 8001b7c:	dc11      	bgt.n	8001ba2 <ReadDevice+0x8e>
 8001b7e:	8abb      	ldrh	r3, [r7, #20]
 8001b80:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8001b82:	429a      	cmp	r2, r3
 8001b84:	d30d      	bcc.n	8001ba2 <ReadDevice+0x8e>
 8001b86:	8afb      	ldrh	r3, [r7, #22]
 8001b88:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8001b8a:	429a      	cmp	r2, r3
 8001b8c:	d809      	bhi.n	8001ba2 <ReadDevice+0x8e>
		{
			*device = i;
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8001b94:	701a      	strb	r2, [r3, #0]
			printf("device %d\r\n", i);
 8001b96:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001b9a:	4619      	mov	r1, r3
 8001b9c:	4809      	ldr	r0, [pc, #36]	; (8001bc4 <ReadDevice+0xb0>)
 8001b9e:	f005 fc35 	bl	800740c <iprintf>
		for(uint8_t i = 1; i<= 4; i++)
 8001ba2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001ba6:	3301      	adds	r3, #1
 8001ba8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001bac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001bb0:	2b04      	cmp	r3, #4
 8001bb2:	d9cd      	bls.n	8001b50 <ReadDevice+0x3c>

		}
		}


}
 8001bb4:	bf00      	nop
 8001bb6:	bf00      	nop
 8001bb8:	3728      	adds	r7, #40	; 0x28
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bd80      	pop	{r7, pc}
 8001bbe:	bf00      	nop
 8001bc0:	080088fc 	.word	0x080088fc
 8001bc4:	080088f0 	.word	0x080088f0

08001bc8 <ReadButton>:
void ReadButton(uint8_t *button, uint16_t *X_w, uint16_t *Y_w){
 8001bc8:	b5b0      	push	{r4, r5, r7, lr}
 8001bca:	b094      	sub	sp, #80	; 0x50
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	60f8      	str	r0, [r7, #12]
 8001bd0:	60b9      	str	r1, [r7, #8]
 8001bd2:	607a      	str	r2, [r7, #4]
	uint16_t X_waarde = *X_w;
 8001bd4:	68bb      	ldr	r3, [r7, #8]
 8001bd6:	881b      	ldrh	r3, [r3, #0]
 8001bd8:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
	uint16_t Y_waarde = *Y_w;
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	881b      	ldrh	r3, [r3, #0]
 8001be0:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
	const uint16_t X_waarde_knoppen[] = {23,219,121,23,121,219,121,23,23,121,219,219,23,219};
 8001be4:	4b51      	ldr	r3, [pc, #324]	; (8001d2c <ReadButton+0x164>)
 8001be6:	f107 042c 	add.w	r4, r7, #44	; 0x2c
 8001bea:	461d      	mov	r5, r3
 8001bec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001bee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001bf0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001bf4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	const uint16_t Y_waarde_knoppen[] = {50,50,90,175,175,175,260,298,393,393,298,393,245,245};
 8001bf8:	4b4d      	ldr	r3, [pc, #308]	; (8001d30 <ReadButton+0x168>)
 8001bfa:	f107 0410 	add.w	r4, r7, #16
 8001bfe:	461d      	mov	r5, r3
 8001c00:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001c02:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001c04:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001c08:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	 * knop13: Add
	 * knop14: Delete
	 */


		for(uint8_t i = 1; i<= 14; i++)
 8001c0c:	2301      	movs	r3, #1
 8001c0e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8001c12:	e081      	b.n	8001d18 <ReadButton+0x150>
		{
			if(i <= 12)
 8001c14:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001c18:	2b0c      	cmp	r3, #12
 8001c1a:	d83c      	bhi.n	8001c96 <ReadButton+0xce>
			{
				//hier lees ik mijn touch uit
				if((X_waarde >= X_waarde_knoppen[i-1])&&(X_waarde <=X_waarde_knoppen[i-1]+75)&&(Y_waarde >= Y_waarde_knoppen[i-1])&&(Y_waarde <=Y_waarde_knoppen[i-1]+75))
 8001c1c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001c20:	3b01      	subs	r3, #1
 8001c22:	005b      	lsls	r3, r3, #1
 8001c24:	3350      	adds	r3, #80	; 0x50
 8001c26:	443b      	add	r3, r7
 8001c28:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 8001c2c:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 8001c30:	429a      	cmp	r2, r3
 8001c32:	d36c      	bcc.n	8001d0e <ReadButton+0x146>
 8001c34:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 8001c38:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001c3c:	3b01      	subs	r3, #1
 8001c3e:	005b      	lsls	r3, r3, #1
 8001c40:	3350      	adds	r3, #80	; 0x50
 8001c42:	443b      	add	r3, r7
 8001c44:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 8001c48:	334b      	adds	r3, #75	; 0x4b
 8001c4a:	429a      	cmp	r2, r3
 8001c4c:	dc5f      	bgt.n	8001d0e <ReadButton+0x146>
 8001c4e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001c52:	3b01      	subs	r3, #1
 8001c54:	005b      	lsls	r3, r3, #1
 8001c56:	3350      	adds	r3, #80	; 0x50
 8001c58:	443b      	add	r3, r7
 8001c5a:	f833 3c40 	ldrh.w	r3, [r3, #-64]
 8001c5e:	f8b7 204a 	ldrh.w	r2, [r7, #74]	; 0x4a
 8001c62:	429a      	cmp	r2, r3
 8001c64:	d353      	bcc.n	8001d0e <ReadButton+0x146>
 8001c66:	f8b7 204a 	ldrh.w	r2, [r7, #74]	; 0x4a
 8001c6a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001c6e:	3b01      	subs	r3, #1
 8001c70:	005b      	lsls	r3, r3, #1
 8001c72:	3350      	adds	r3, #80	; 0x50
 8001c74:	443b      	add	r3, r7
 8001c76:	f833 3c40 	ldrh.w	r3, [r3, #-64]
 8001c7a:	334b      	adds	r3, #75	; 0x4b
 8001c7c:	429a      	cmp	r2, r3
 8001c7e:	dc46      	bgt.n	8001d0e <ReadButton+0x146>
				{

					*button = i;
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 8001c86:	701a      	strb	r2, [r3, #0]
					printf("geduwd op button %d\r\n", i);
 8001c88:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001c8c:	4619      	mov	r1, r3
 8001c8e:	4829      	ldr	r0, [pc, #164]	; (8001d34 <ReadButton+0x16c>)
 8001c90:	f005 fbbc 	bl	800740c <iprintf>
 8001c94:	e03b      	b.n	8001d0e <ReadButton+0x146>
				}
			}
			else
			{
				if((X_waarde >= X_waarde_knoppen[i-1])&&(X_waarde <=X_waarde_knoppen[i-1]+75)&&(Y_waarde >= Y_waarde_knoppen[i-1])&&(Y_waarde <=Y_waarde_knoppen[i-1]+48))
 8001c96:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001c9a:	3b01      	subs	r3, #1
 8001c9c:	005b      	lsls	r3, r3, #1
 8001c9e:	3350      	adds	r3, #80	; 0x50
 8001ca0:	443b      	add	r3, r7
 8001ca2:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 8001ca6:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 8001caa:	429a      	cmp	r2, r3
 8001cac:	d32f      	bcc.n	8001d0e <ReadButton+0x146>
 8001cae:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 8001cb2:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001cb6:	3b01      	subs	r3, #1
 8001cb8:	005b      	lsls	r3, r3, #1
 8001cba:	3350      	adds	r3, #80	; 0x50
 8001cbc:	443b      	add	r3, r7
 8001cbe:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 8001cc2:	334b      	adds	r3, #75	; 0x4b
 8001cc4:	429a      	cmp	r2, r3
 8001cc6:	dc22      	bgt.n	8001d0e <ReadButton+0x146>
 8001cc8:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001ccc:	3b01      	subs	r3, #1
 8001cce:	005b      	lsls	r3, r3, #1
 8001cd0:	3350      	adds	r3, #80	; 0x50
 8001cd2:	443b      	add	r3, r7
 8001cd4:	f833 3c40 	ldrh.w	r3, [r3, #-64]
 8001cd8:	f8b7 204a 	ldrh.w	r2, [r7, #74]	; 0x4a
 8001cdc:	429a      	cmp	r2, r3
 8001cde:	d316      	bcc.n	8001d0e <ReadButton+0x146>
 8001ce0:	f8b7 204a 	ldrh.w	r2, [r7, #74]	; 0x4a
 8001ce4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001ce8:	3b01      	subs	r3, #1
 8001cea:	005b      	lsls	r3, r3, #1
 8001cec:	3350      	adds	r3, #80	; 0x50
 8001cee:	443b      	add	r3, r7
 8001cf0:	f833 3c40 	ldrh.w	r3, [r3, #-64]
 8001cf4:	3330      	adds	r3, #48	; 0x30
 8001cf6:	429a      	cmp	r2, r3
 8001cf8:	dc09      	bgt.n	8001d0e <ReadButton+0x146>
				{

				*button = i;
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 8001d00:	701a      	strb	r2, [r3, #0]
				printf("geduwd op button %d\r\n", i);
 8001d02:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001d06:	4619      	mov	r1, r3
 8001d08:	480a      	ldr	r0, [pc, #40]	; (8001d34 <ReadButton+0x16c>)
 8001d0a:	f005 fb7f 	bl	800740c <iprintf>
		for(uint8_t i = 1; i<= 14; i++)
 8001d0e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001d12:	3301      	adds	r3, #1
 8001d14:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8001d18:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001d1c:	2b0e      	cmp	r3, #14
 8001d1e:	f67f af79 	bls.w	8001c14 <ReadButton+0x4c>
				}
			}
		}

}
 8001d22:	bf00      	nop
 8001d24:	bf00      	nop
 8001d26:	3750      	adds	r7, #80	; 0x50
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	bdb0      	pop	{r4, r5, r7, pc}
 8001d2c:	0800891c 	.word	0x0800891c
 8001d30:	08008938 	.word	0x08008938
 8001d34:	08008904 	.word	0x08008904

08001d38 <_write>:
/* USER CODE BEGIN 0 */
#include <errno.h>
#include <sys/stat.h>
#include <sys/times.h>
#include <sys/unistd.h>
int _write(int file, char *ptr, int len) {
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b086      	sub	sp, #24
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	60f8      	str	r0, [r7, #12]
 8001d40:	60b9      	str	r1, [r7, #8]
 8001d42:	607a      	str	r2, [r7, #4]
    HAL_StatusTypeDef xStatus;
    switch (file) {
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	2b01      	cmp	r3, #1
 8001d48:	d003      	beq.n	8001d52 <_write+0x1a>
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	2b02      	cmp	r3, #2
 8001d4e:	d015      	beq.n	8001d7c <_write+0x44>
 8001d50:	e029      	b.n	8001da6 <_write+0x6e>
    case STDOUT_FILENO: /*stdout*/
		xStatus = HAL_UART_Transmit(&huart1, (uint8_t*)ptr, len, HAL_MAX_DELAY);
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	b29a      	uxth	r2, r3
 8001d56:	f04f 33ff 	mov.w	r3, #4294967295
 8001d5a:	68b9      	ldr	r1, [r7, #8]
 8001d5c:	481a      	ldr	r0, [pc, #104]	; (8001dc8 <_write+0x90>)
 8001d5e:	f004 fe9b 	bl	8006a98 <HAL_UART_Transmit>
 8001d62:	4603      	mov	r3, r0
 8001d64:	75fb      	strb	r3, [r7, #23]
		if (xStatus != HAL_OK) {
 8001d66:	7dfb      	ldrb	r3, [r7, #23]
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d024      	beq.n	8001db6 <_write+0x7e>
			errno = EIO;
 8001d6c:	f005 fb1c 	bl	80073a8 <__errno>
 8001d70:	4603      	mov	r3, r0
 8001d72:	2205      	movs	r2, #5
 8001d74:	601a      	str	r2, [r3, #0]
			return -1;
 8001d76:	f04f 33ff 	mov.w	r3, #4294967295
 8001d7a:	e020      	b.n	8001dbe <_write+0x86>
		}
        break;
    case STDERR_FILENO: /* stderr */
		xStatus = HAL_UART_Transmit(&huart1, (uint8_t*)ptr, len, HAL_MAX_DELAY);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	b29a      	uxth	r2, r3
 8001d80:	f04f 33ff 	mov.w	r3, #4294967295
 8001d84:	68b9      	ldr	r1, [r7, #8]
 8001d86:	4810      	ldr	r0, [pc, #64]	; (8001dc8 <_write+0x90>)
 8001d88:	f004 fe86 	bl	8006a98 <HAL_UART_Transmit>
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	75fb      	strb	r3, [r7, #23]
		if (xStatus != HAL_OK) {
 8001d90:	7dfb      	ldrb	r3, [r7, #23]
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d011      	beq.n	8001dba <_write+0x82>
			errno = EIO;
 8001d96:	f005 fb07 	bl	80073a8 <__errno>
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	2205      	movs	r2, #5
 8001d9e:	601a      	str	r2, [r3, #0]
			return -1;
 8001da0:	f04f 33ff 	mov.w	r3, #4294967295
 8001da4:	e00b      	b.n	8001dbe <_write+0x86>
		}
        break;
    default:
        errno = EBADF;
 8001da6:	f005 faff 	bl	80073a8 <__errno>
 8001daa:	4603      	mov	r3, r0
 8001dac:	2209      	movs	r2, #9
 8001dae:	601a      	str	r2, [r3, #0]
        return -1;
 8001db0:	f04f 33ff 	mov.w	r3, #4294967295
 8001db4:	e003      	b.n	8001dbe <_write+0x86>
        break;
 8001db6:	bf00      	nop
 8001db8:	e000      	b.n	8001dbc <_write+0x84>
        break;
 8001dba:	bf00      	nop
    }
    return len;
 8001dbc:	687b      	ldr	r3, [r7, #4]
}
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	3718      	adds	r7, #24
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bd80      	pop	{r7, pc}
 8001dc6:	bf00      	nop
 8001dc8:	20002d5c 	.word	0x20002d5c

08001dcc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001dd0:	f000 fd3d 	bl	800284e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001dd4:	f000 f812 	bl	8001dfc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001dd8:	f000 f9ce 	bl	8002178 <MX_GPIO_Init>
  MX_SPI2_Init();
 8001ddc:	f000 f8b6 	bl	8001f4c <MX_SPI2_Init>
  MX_USART1_UART_Init();
 8001de0:	f000 f99a 	bl	8002118 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 8001de4:	f000 f872 	bl	8001ecc <MX_I2C1_Init>
  MX_TIM3_Init();
 8001de8:	f000 f93c 	bl	8002064 <MX_TIM3_Init>
  MX_TIM2_Init();
 8001dec:	f000 f8ec 	bl	8001fc8 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  All_Carl_Inits();
 8001df0:	f7fe fc12 	bl	8000618 <All_Carl_Inits>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	 whilelus();
 8001df4:	f7fe fd0e 	bl	8000814 <whilelus>
 8001df8:	e7fc      	b.n	8001df4 <main+0x28>
	...

08001dfc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b094      	sub	sp, #80	; 0x50
 8001e00:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001e02:	f107 0320 	add.w	r3, r7, #32
 8001e06:	2230      	movs	r2, #48	; 0x30
 8001e08:	2100      	movs	r1, #0
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	f005 faf6 	bl	80073fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001e10:	f107 030c 	add.w	r3, r7, #12
 8001e14:	2200      	movs	r2, #0
 8001e16:	601a      	str	r2, [r3, #0]
 8001e18:	605a      	str	r2, [r3, #4]
 8001e1a:	609a      	str	r2, [r3, #8]
 8001e1c:	60da      	str	r2, [r3, #12]
 8001e1e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e20:	4b28      	ldr	r3, [pc, #160]	; (8001ec4 <SystemClock_Config+0xc8>)
 8001e22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e24:	4a27      	ldr	r2, [pc, #156]	; (8001ec4 <SystemClock_Config+0xc8>)
 8001e26:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e2a:	6413      	str	r3, [r2, #64]	; 0x40
 8001e2c:	4b25      	ldr	r3, [pc, #148]	; (8001ec4 <SystemClock_Config+0xc8>)
 8001e2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e34:	60bb      	str	r3, [r7, #8]
 8001e36:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001e38:	4b23      	ldr	r3, [pc, #140]	; (8001ec8 <SystemClock_Config+0xcc>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001e40:	4a21      	ldr	r2, [pc, #132]	; (8001ec8 <SystemClock_Config+0xcc>)
 8001e42:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e46:	6013      	str	r3, [r2, #0]
 8001e48:	4b1f      	ldr	r3, [pc, #124]	; (8001ec8 <SystemClock_Config+0xcc>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001e50:	607b      	str	r3, [r7, #4]
 8001e52:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001e54:	2302      	movs	r3, #2
 8001e56:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001e58:	2301      	movs	r3, #1
 8001e5a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001e5c:	2310      	movs	r3, #16
 8001e5e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001e60:	2302      	movs	r3, #2
 8001e62:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001e64:	2300      	movs	r3, #0
 8001e66:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001e68:	2308      	movs	r3, #8
 8001e6a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 64;
 8001e6c:	2340      	movs	r3, #64	; 0x40
 8001e6e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001e70:	2302      	movs	r3, #2
 8001e72:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001e74:	2302      	movs	r3, #2
 8001e76:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001e78:	f107 0320 	add.w	r3, r7, #32
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	f002 f8b7 	bl	8003ff0 <HAL_RCC_OscConfig>
 8001e82:	4603      	mov	r3, r0
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d001      	beq.n	8001e8c <SystemClock_Config+0x90>
  {
    Error_Handler();
 8001e88:	f000 fa08 	bl	800229c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001e8c:	230f      	movs	r3, #15
 8001e8e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001e90:	2302      	movs	r3, #2
 8001e92:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001e94:	2300      	movs	r3, #0
 8001e96:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001e98:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e9c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001e9e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ea2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001ea4:	f107 030c 	add.w	r3, r7, #12
 8001ea8:	2102      	movs	r1, #2
 8001eaa:	4618      	mov	r0, r3
 8001eac:	f002 fb44 	bl	8004538 <HAL_RCC_ClockConfig>
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d001      	beq.n	8001eba <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8001eb6:	f000 f9f1 	bl	800229c <Error_Handler>
  }
}
 8001eba:	bf00      	nop
 8001ebc:	3750      	adds	r7, #80	; 0x50
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bd80      	pop	{r7, pc}
 8001ec2:	bf00      	nop
 8001ec4:	40023800 	.word	0x40023800
 8001ec8:	40007000 	.word	0x40007000

08001ecc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001ed0:	4b1b      	ldr	r3, [pc, #108]	; (8001f40 <MX_I2C1_Init+0x74>)
 8001ed2:	4a1c      	ldr	r2, [pc, #112]	; (8001f44 <MX_I2C1_Init+0x78>)
 8001ed4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 8001ed6:	4b1a      	ldr	r3, [pc, #104]	; (8001f40 <MX_I2C1_Init+0x74>)
 8001ed8:	4a1b      	ldr	r2, [pc, #108]	; (8001f48 <MX_I2C1_Init+0x7c>)
 8001eda:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001edc:	4b18      	ldr	r3, [pc, #96]	; (8001f40 <MX_I2C1_Init+0x74>)
 8001ede:	2200      	movs	r2, #0
 8001ee0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001ee2:	4b17      	ldr	r3, [pc, #92]	; (8001f40 <MX_I2C1_Init+0x74>)
 8001ee4:	2201      	movs	r2, #1
 8001ee6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001ee8:	4b15      	ldr	r3, [pc, #84]	; (8001f40 <MX_I2C1_Init+0x74>)
 8001eea:	2200      	movs	r2, #0
 8001eec:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001eee:	4b14      	ldr	r3, [pc, #80]	; (8001f40 <MX_I2C1_Init+0x74>)
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001ef4:	4b12      	ldr	r3, [pc, #72]	; (8001f40 <MX_I2C1_Init+0x74>)
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001efa:	4b11      	ldr	r3, [pc, #68]	; (8001f40 <MX_I2C1_Init+0x74>)
 8001efc:	2200      	movs	r2, #0
 8001efe:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001f00:	4b0f      	ldr	r3, [pc, #60]	; (8001f40 <MX_I2C1_Init+0x74>)
 8001f02:	2200      	movs	r2, #0
 8001f04:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001f06:	480e      	ldr	r0, [pc, #56]	; (8001f40 <MX_I2C1_Init+0x74>)
 8001f08:	f001 f81e 	bl	8002f48 <HAL_I2C_Init>
 8001f0c:	4603      	mov	r3, r0
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d001      	beq.n	8001f16 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001f12:	f000 f9c3 	bl	800229c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001f16:	2100      	movs	r1, #0
 8001f18:	4809      	ldr	r0, [pc, #36]	; (8001f40 <MX_I2C1_Init+0x74>)
 8001f1a:	f001 ffd1 	bl	8003ec0 <HAL_I2CEx_ConfigAnalogFilter>
 8001f1e:	4603      	mov	r3, r0
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d001      	beq.n	8001f28 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001f24:	f000 f9ba 	bl	800229c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001f28:	2100      	movs	r1, #0
 8001f2a:	4805      	ldr	r0, [pc, #20]	; (8001f40 <MX_I2C1_Init+0x74>)
 8001f2c:	f002 f813 	bl	8003f56 <HAL_I2CEx_ConfigDigitalFilter>
 8001f30:	4603      	mov	r3, r0
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d001      	beq.n	8001f3a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001f36:	f000 f9b1 	bl	800229c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001f3a:	bf00      	nop
 8001f3c:	bd80      	pop	{r7, pc}
 8001f3e:	bf00      	nop
 8001f40:	20002c0c 	.word	0x20002c0c
 8001f44:	40005400 	.word	0x40005400
 8001f48:	00707cbb 	.word	0x00707cbb

08001f4c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001f50:	4b1b      	ldr	r3, [pc, #108]	; (8001fc0 <MX_SPI2_Init+0x74>)
 8001f52:	4a1c      	ldr	r2, [pc, #112]	; (8001fc4 <MX_SPI2_Init+0x78>)
 8001f54:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001f56:	4b1a      	ldr	r3, [pc, #104]	; (8001fc0 <MX_SPI2_Init+0x74>)
 8001f58:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001f5c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001f5e:	4b18      	ldr	r3, [pc, #96]	; (8001fc0 <MX_SPI2_Init+0x74>)
 8001f60:	2200      	movs	r2, #0
 8001f62:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001f64:	4b16      	ldr	r3, [pc, #88]	; (8001fc0 <MX_SPI2_Init+0x74>)
 8001f66:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001f6a:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001f6c:	4b14      	ldr	r3, [pc, #80]	; (8001fc0 <MX_SPI2_Init+0x74>)
 8001f6e:	2200      	movs	r2, #0
 8001f70:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001f72:	4b13      	ldr	r3, [pc, #76]	; (8001fc0 <MX_SPI2_Init+0x74>)
 8001f74:	2200      	movs	r2, #0
 8001f76:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001f78:	4b11      	ldr	r3, [pc, #68]	; (8001fc0 <MX_SPI2_Init+0x74>)
 8001f7a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001f7e:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001f80:	4b0f      	ldr	r3, [pc, #60]	; (8001fc0 <MX_SPI2_Init+0x74>)
 8001f82:	2200      	movs	r2, #0
 8001f84:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001f86:	4b0e      	ldr	r3, [pc, #56]	; (8001fc0 <MX_SPI2_Init+0x74>)
 8001f88:	2200      	movs	r2, #0
 8001f8a:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001f8c:	4b0c      	ldr	r3, [pc, #48]	; (8001fc0 <MX_SPI2_Init+0x74>)
 8001f8e:	2200      	movs	r2, #0
 8001f90:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001f92:	4b0b      	ldr	r3, [pc, #44]	; (8001fc0 <MX_SPI2_Init+0x74>)
 8001f94:	2200      	movs	r2, #0
 8001f96:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8001f98:	4b09      	ldr	r3, [pc, #36]	; (8001fc0 <MX_SPI2_Init+0x74>)
 8001f9a:	2207      	movs	r2, #7
 8001f9c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001f9e:	4b08      	ldr	r3, [pc, #32]	; (8001fc0 <MX_SPI2_Init+0x74>)
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001fa4:	4b06      	ldr	r3, [pc, #24]	; (8001fc0 <MX_SPI2_Init+0x74>)
 8001fa6:	2208      	movs	r2, #8
 8001fa8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001faa:	4805      	ldr	r0, [pc, #20]	; (8001fc0 <MX_SPI2_Init+0x74>)
 8001fac:	f003 f89a 	bl	80050e4 <HAL_SPI_Init>
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d001      	beq.n	8001fba <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8001fb6:	f000 f971 	bl	800229c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001fba:	bf00      	nop
 8001fbc:	bd80      	pop	{r7, pc}
 8001fbe:	bf00      	nop
 8001fc0:	20002c60 	.word	0x20002c60
 8001fc4:	40003800 	.word	0x40003800

08001fc8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b088      	sub	sp, #32
 8001fcc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001fce:	f107 0310 	add.w	r3, r7, #16
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	601a      	str	r2, [r3, #0]
 8001fd6:	605a      	str	r2, [r3, #4]
 8001fd8:	609a      	str	r2, [r3, #8]
 8001fda:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001fdc:	1d3b      	adds	r3, r7, #4
 8001fde:	2200      	movs	r2, #0
 8001fe0:	601a      	str	r2, [r3, #0]
 8001fe2:	605a      	str	r2, [r3, #4]
 8001fe4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001fe6:	4b1e      	ldr	r3, [pc, #120]	; (8002060 <MX_TIM2_Init+0x98>)
 8001fe8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001fec:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 64-1;
 8001fee:	4b1c      	ldr	r3, [pc, #112]	; (8002060 <MX_TIM2_Init+0x98>)
 8001ff0:	223f      	movs	r2, #63	; 0x3f
 8001ff2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ff4:	4b1a      	ldr	r3, [pc, #104]	; (8002060 <MX_TIM2_Init+0x98>)
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001ffa:	4b19      	ldr	r3, [pc, #100]	; (8002060 <MX_TIM2_Init+0x98>)
 8001ffc:	f04f 32ff 	mov.w	r2, #4294967295
 8002000:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002002:	4b17      	ldr	r3, [pc, #92]	; (8002060 <MX_TIM2_Init+0x98>)
 8002004:	2200      	movs	r2, #0
 8002006:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002008:	4b15      	ldr	r3, [pc, #84]	; (8002060 <MX_TIM2_Init+0x98>)
 800200a:	2280      	movs	r2, #128	; 0x80
 800200c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800200e:	4814      	ldr	r0, [pc, #80]	; (8002060 <MX_TIM2_Init+0x98>)
 8002010:	f003 fc0a 	bl	8005828 <HAL_TIM_Base_Init>
 8002014:	4603      	mov	r3, r0
 8002016:	2b00      	cmp	r3, #0
 8002018:	d001      	beq.n	800201e <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800201a:	f000 f93f 	bl	800229c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800201e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002022:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002024:	f107 0310 	add.w	r3, r7, #16
 8002028:	4619      	mov	r1, r3
 800202a:	480d      	ldr	r0, [pc, #52]	; (8002060 <MX_TIM2_Init+0x98>)
 800202c:	f003 ffd0 	bl	8005fd0 <HAL_TIM_ConfigClockSource>
 8002030:	4603      	mov	r3, r0
 8002032:	2b00      	cmp	r3, #0
 8002034:	d001      	beq.n	800203a <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8002036:	f000 f931 	bl	800229c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800203a:	2300      	movs	r3, #0
 800203c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800203e:	2300      	movs	r3, #0
 8002040:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002042:	1d3b      	adds	r3, r7, #4
 8002044:	4619      	mov	r1, r3
 8002046:	4806      	ldr	r0, [pc, #24]	; (8002060 <MX_TIM2_Init+0x98>)
 8002048:	f004 fc4a 	bl	80068e0 <HAL_TIMEx_MasterConfigSynchronization>
 800204c:	4603      	mov	r3, r0
 800204e:	2b00      	cmp	r3, #0
 8002050:	d001      	beq.n	8002056 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8002052:	f000 f923 	bl	800229c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002056:	bf00      	nop
 8002058:	3720      	adds	r7, #32
 800205a:	46bd      	mov	sp, r7
 800205c:	bd80      	pop	{r7, pc}
 800205e:	bf00      	nop
 8002060:	20002cc4 	.word	0x20002cc4

08002064 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b08a      	sub	sp, #40	; 0x28
 8002068:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800206a:	f107 031c 	add.w	r3, r7, #28
 800206e:	2200      	movs	r2, #0
 8002070:	601a      	str	r2, [r3, #0]
 8002072:	605a      	str	r2, [r3, #4]
 8002074:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002076:	463b      	mov	r3, r7
 8002078:	2200      	movs	r2, #0
 800207a:	601a      	str	r2, [r3, #0]
 800207c:	605a      	str	r2, [r3, #4]
 800207e:	609a      	str	r2, [r3, #8]
 8002080:	60da      	str	r2, [r3, #12]
 8002082:	611a      	str	r2, [r3, #16]
 8002084:	615a      	str	r2, [r3, #20]
 8002086:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002088:	4b21      	ldr	r3, [pc, #132]	; (8002110 <MX_TIM3_Init+0xac>)
 800208a:	4a22      	ldr	r2, [pc, #136]	; (8002114 <MX_TIM3_Init+0xb0>)
 800208c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 4-1;
 800208e:	4b20      	ldr	r3, [pc, #128]	; (8002110 <MX_TIM3_Init+0xac>)
 8002090:	2203      	movs	r2, #3
 8002092:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002094:	4b1e      	ldr	r3, [pc, #120]	; (8002110 <MX_TIM3_Init+0xac>)
 8002096:	2200      	movs	r2, #0
 8002098:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 422-1;
 800209a:	4b1d      	ldr	r3, [pc, #116]	; (8002110 <MX_TIM3_Init+0xac>)
 800209c:	f240 12a5 	movw	r2, #421	; 0x1a5
 80020a0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020a2:	4b1b      	ldr	r3, [pc, #108]	; (8002110 <MX_TIM3_Init+0xac>)
 80020a4:	2200      	movs	r2, #0
 80020a6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80020a8:	4b19      	ldr	r3, [pc, #100]	; (8002110 <MX_TIM3_Init+0xac>)
 80020aa:	2280      	movs	r2, #128	; 0x80
 80020ac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80020ae:	4818      	ldr	r0, [pc, #96]	; (8002110 <MX_TIM3_Init+0xac>)
 80020b0:	f003 fca9 	bl	8005a06 <HAL_TIM_PWM_Init>
 80020b4:	4603      	mov	r3, r0
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d001      	beq.n	80020be <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 80020ba:	f000 f8ef 	bl	800229c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80020be:	2300      	movs	r3, #0
 80020c0:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020c2:	2300      	movs	r3, #0
 80020c4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80020c6:	f107 031c 	add.w	r3, r7, #28
 80020ca:	4619      	mov	r1, r3
 80020cc:	4810      	ldr	r0, [pc, #64]	; (8002110 <MX_TIM3_Init+0xac>)
 80020ce:	f004 fc07 	bl	80068e0 <HAL_TIMEx_MasterConfigSynchronization>
 80020d2:	4603      	mov	r3, r0
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d001      	beq.n	80020dc <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 80020d8:	f000 f8e0 	bl	800229c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80020dc:	2360      	movs	r3, #96	; 0x60
 80020de:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 211-1;
 80020e0:	23d2      	movs	r3, #210	; 0xd2
 80020e2:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80020e4:	2300      	movs	r3, #0
 80020e6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80020e8:	2300      	movs	r3, #0
 80020ea:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80020ec:	463b      	mov	r3, r7
 80020ee:	2204      	movs	r2, #4
 80020f0:	4619      	mov	r1, r3
 80020f2:	4807      	ldr	r0, [pc, #28]	; (8002110 <MX_TIM3_Init+0xac>)
 80020f4:	f003 fe58 	bl	8005da8 <HAL_TIM_PWM_ConfigChannel>
 80020f8:	4603      	mov	r3, r0
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d001      	beq.n	8002102 <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 80020fe:	f000 f8cd 	bl	800229c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002102:	4803      	ldr	r0, [pc, #12]	; (8002110 <MX_TIM3_Init+0xac>)
 8002104:	f000 f9f4 	bl	80024f0 <HAL_TIM_MspPostInit>

}
 8002108:	bf00      	nop
 800210a:	3728      	adds	r7, #40	; 0x28
 800210c:	46bd      	mov	sp, r7
 800210e:	bd80      	pop	{r7, pc}
 8002110:	20002d10 	.word	0x20002d10
 8002114:	40000400 	.word	0x40000400

08002118 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800211c:	4b14      	ldr	r3, [pc, #80]	; (8002170 <MX_USART1_UART_Init+0x58>)
 800211e:	4a15      	ldr	r2, [pc, #84]	; (8002174 <MX_USART1_UART_Init+0x5c>)
 8002120:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002122:	4b13      	ldr	r3, [pc, #76]	; (8002170 <MX_USART1_UART_Init+0x58>)
 8002124:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002128:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800212a:	4b11      	ldr	r3, [pc, #68]	; (8002170 <MX_USART1_UART_Init+0x58>)
 800212c:	2200      	movs	r2, #0
 800212e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002130:	4b0f      	ldr	r3, [pc, #60]	; (8002170 <MX_USART1_UART_Init+0x58>)
 8002132:	2200      	movs	r2, #0
 8002134:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002136:	4b0e      	ldr	r3, [pc, #56]	; (8002170 <MX_USART1_UART_Init+0x58>)
 8002138:	2200      	movs	r2, #0
 800213a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800213c:	4b0c      	ldr	r3, [pc, #48]	; (8002170 <MX_USART1_UART_Init+0x58>)
 800213e:	220c      	movs	r2, #12
 8002140:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002142:	4b0b      	ldr	r3, [pc, #44]	; (8002170 <MX_USART1_UART_Init+0x58>)
 8002144:	2200      	movs	r2, #0
 8002146:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002148:	4b09      	ldr	r3, [pc, #36]	; (8002170 <MX_USART1_UART_Init+0x58>)
 800214a:	2200      	movs	r2, #0
 800214c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800214e:	4b08      	ldr	r3, [pc, #32]	; (8002170 <MX_USART1_UART_Init+0x58>)
 8002150:	2200      	movs	r2, #0
 8002152:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002154:	4b06      	ldr	r3, [pc, #24]	; (8002170 <MX_USART1_UART_Init+0x58>)
 8002156:	2200      	movs	r2, #0
 8002158:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800215a:	4805      	ldr	r0, [pc, #20]	; (8002170 <MX_USART1_UART_Init+0x58>)
 800215c:	f004 fc4e 	bl	80069fc <HAL_UART_Init>
 8002160:	4603      	mov	r3, r0
 8002162:	2b00      	cmp	r3, #0
 8002164:	d001      	beq.n	800216a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8002166:	f000 f899 	bl	800229c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800216a:	bf00      	nop
 800216c:	bd80      	pop	{r7, pc}
 800216e:	bf00      	nop
 8002170:	20002d5c 	.word	0x20002d5c
 8002174:	40011000 	.word	0x40011000

08002178 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b08a      	sub	sp, #40	; 0x28
 800217c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800217e:	f107 0314 	add.w	r3, r7, #20
 8002182:	2200      	movs	r2, #0
 8002184:	601a      	str	r2, [r3, #0]
 8002186:	605a      	str	r2, [r3, #4]
 8002188:	609a      	str	r2, [r3, #8]
 800218a:	60da      	str	r2, [r3, #12]
 800218c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800218e:	4b40      	ldr	r3, [pc, #256]	; (8002290 <MX_GPIO_Init+0x118>)
 8002190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002192:	4a3f      	ldr	r2, [pc, #252]	; (8002290 <MX_GPIO_Init+0x118>)
 8002194:	f043 0302 	orr.w	r3, r3, #2
 8002198:	6313      	str	r3, [r2, #48]	; 0x30
 800219a:	4b3d      	ldr	r3, [pc, #244]	; (8002290 <MX_GPIO_Init+0x118>)
 800219c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800219e:	f003 0302 	and.w	r3, r3, #2
 80021a2:	613b      	str	r3, [r7, #16]
 80021a4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80021a6:	4b3a      	ldr	r3, [pc, #232]	; (8002290 <MX_GPIO_Init+0x118>)
 80021a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021aa:	4a39      	ldr	r2, [pc, #228]	; (8002290 <MX_GPIO_Init+0x118>)
 80021ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021b0:	6313      	str	r3, [r2, #48]	; 0x30
 80021b2:	4b37      	ldr	r3, [pc, #220]	; (8002290 <MX_GPIO_Init+0x118>)
 80021b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021ba:	60fb      	str	r3, [r7, #12]
 80021bc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80021be:	4b34      	ldr	r3, [pc, #208]	; (8002290 <MX_GPIO_Init+0x118>)
 80021c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021c2:	4a33      	ldr	r2, [pc, #204]	; (8002290 <MX_GPIO_Init+0x118>)
 80021c4:	f043 0301 	orr.w	r3, r3, #1
 80021c8:	6313      	str	r3, [r2, #48]	; 0x30
 80021ca:	4b31      	ldr	r3, [pc, #196]	; (8002290 <MX_GPIO_Init+0x118>)
 80021cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ce:	f003 0301 	and.w	r3, r3, #1
 80021d2:	60bb      	str	r3, [r7, #8]
 80021d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80021d6:	4b2e      	ldr	r3, [pc, #184]	; (8002290 <MX_GPIO_Init+0x118>)
 80021d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021da:	4a2d      	ldr	r2, [pc, #180]	; (8002290 <MX_GPIO_Init+0x118>)
 80021dc:	f043 0304 	orr.w	r3, r3, #4
 80021e0:	6313      	str	r3, [r2, #48]	; 0x30
 80021e2:	4b2b      	ldr	r3, [pc, #172]	; (8002290 <MX_GPIO_Init+0x118>)
 80021e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021e6:	f003 0304 	and.w	r3, r3, #4
 80021ea:	607b      	str	r3, [r7, #4]
 80021ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80021ee:	4b28      	ldr	r3, [pc, #160]	; (8002290 <MX_GPIO_Init+0x118>)
 80021f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021f2:	4a27      	ldr	r2, [pc, #156]	; (8002290 <MX_GPIO_Init+0x118>)
 80021f4:	f043 0320 	orr.w	r3, r3, #32
 80021f8:	6313      	str	r3, [r2, #48]	; 0x30
 80021fa:	4b25      	ldr	r3, [pc, #148]	; (8002290 <MX_GPIO_Init+0x118>)
 80021fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021fe:	f003 0320 	and.w	r3, r3, #32
 8002202:	603b      	str	r3, [r7, #0]
 8002204:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DISPLAY_CS_GPIO_Port, DISPLAY_CS_Pin, GPIO_PIN_SET);
 8002206:	2201      	movs	r2, #1
 8002208:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800220c:	4821      	ldr	r0, [pc, #132]	; (8002294 <MX_GPIO_Init+0x11c>)
 800220e:	f000 fe5d 	bl	8002ecc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, DISPLAY_RESET_Pin|DISPLAY_DC_Pin, GPIO_PIN_RESET);
 8002212:	2200      	movs	r2, #0
 8002214:	f44f 7140 	mov.w	r1, #768	; 0x300
 8002218:	481e      	ldr	r0, [pc, #120]	; (8002294 <MX_GPIO_Init+0x11c>)
 800221a:	f000 fe57 	bl	8002ecc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PF6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 800221e:	2340      	movs	r3, #64	; 0x40
 8002220:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002222:	2302      	movs	r3, #2
 8002224:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002226:	2300      	movs	r3, #0
 8002228:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800222a:	2300      	movs	r3, #0
 800222c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 800222e:	2303      	movs	r3, #3
 8002230:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002232:	f107 0314 	add.w	r3, r7, #20
 8002236:	4619      	mov	r1, r3
 8002238:	4816      	ldr	r0, [pc, #88]	; (8002294 <MX_GPIO_Init+0x11c>)
 800223a:	f000 fc9b 	bl	8002b74 <HAL_GPIO_Init>

  /*Configure GPIO pins : DISPLAY_CS_Pin DISPLAY_RESET_Pin DISPLAY_DC_Pin */
  GPIO_InitStruct.Pin = DISPLAY_CS_Pin|DISPLAY_RESET_Pin|DISPLAY_DC_Pin;
 800223e:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8002242:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002244:	2301      	movs	r3, #1
 8002246:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002248:	2300      	movs	r3, #0
 800224a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800224c:	2303      	movs	r3, #3
 800224e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002250:	f107 0314 	add.w	r3, r7, #20
 8002254:	4619      	mov	r1, r3
 8002256:	480f      	ldr	r0, [pc, #60]	; (8002294 <MX_GPIO_Init+0x11c>)
 8002258:	f000 fc8c 	bl	8002b74 <HAL_GPIO_Init>

  /*Configure GPIO pin : IRread_Pin */
  GPIO_InitStruct.Pin = IRread_Pin;
 800225c:	2301      	movs	r3, #1
 800225e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8002260:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8002264:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002266:	2300      	movs	r3, #0
 8002268:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(IRread_GPIO_Port, &GPIO_InitStruct);
 800226a:	f107 0314 	add.w	r3, r7, #20
 800226e:	4619      	mov	r1, r3
 8002270:	4809      	ldr	r0, [pc, #36]	; (8002298 <MX_GPIO_Init+0x120>)
 8002272:	f000 fc7f 	bl	8002b74 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8002276:	2200      	movs	r2, #0
 8002278:	2100      	movs	r1, #0
 800227a:	2006      	movs	r0, #6
 800227c:	f000 fc43 	bl	8002b06 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8002280:	2006      	movs	r0, #6
 8002282:	f000 fc5c 	bl	8002b3e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002286:	bf00      	nop
 8002288:	3728      	adds	r7, #40	; 0x28
 800228a:	46bd      	mov	sp, r7
 800228c:	bd80      	pop	{r7, pc}
 800228e:	bf00      	nop
 8002290:	40023800 	.word	0x40023800
 8002294:	40021400 	.word	0x40021400
 8002298:	40020000 	.word	0x40020000

0800229c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800229c:	b480      	push	{r7}
 800229e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80022a0:	b672      	cpsid	i
}
 80022a2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80022a4:	e7fe      	b.n	80022a4 <Error_Handler+0x8>
	...

080022a8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80022a8:	b480      	push	{r7}
 80022aa:	b083      	sub	sp, #12
 80022ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80022ae:	4b0f      	ldr	r3, [pc, #60]	; (80022ec <HAL_MspInit+0x44>)
 80022b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022b2:	4a0e      	ldr	r2, [pc, #56]	; (80022ec <HAL_MspInit+0x44>)
 80022b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022b8:	6413      	str	r3, [r2, #64]	; 0x40
 80022ba:	4b0c      	ldr	r3, [pc, #48]	; (80022ec <HAL_MspInit+0x44>)
 80022bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022c2:	607b      	str	r3, [r7, #4]
 80022c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022c6:	4b09      	ldr	r3, [pc, #36]	; (80022ec <HAL_MspInit+0x44>)
 80022c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022ca:	4a08      	ldr	r2, [pc, #32]	; (80022ec <HAL_MspInit+0x44>)
 80022cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80022d0:	6453      	str	r3, [r2, #68]	; 0x44
 80022d2:	4b06      	ldr	r3, [pc, #24]	; (80022ec <HAL_MspInit+0x44>)
 80022d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022da:	603b      	str	r3, [r7, #0]
 80022dc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80022de:	bf00      	nop
 80022e0:	370c      	adds	r7, #12
 80022e2:	46bd      	mov	sp, r7
 80022e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e8:	4770      	bx	lr
 80022ea:	bf00      	nop
 80022ec:	40023800 	.word	0x40023800

080022f0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b0aa      	sub	sp, #168	; 0xa8
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022f8:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80022fc:	2200      	movs	r2, #0
 80022fe:	601a      	str	r2, [r3, #0]
 8002300:	605a      	str	r2, [r3, #4]
 8002302:	609a      	str	r2, [r3, #8]
 8002304:	60da      	str	r2, [r3, #12]
 8002306:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002308:	f107 0310 	add.w	r3, r7, #16
 800230c:	2284      	movs	r2, #132	; 0x84
 800230e:	2100      	movs	r1, #0
 8002310:	4618      	mov	r0, r3
 8002312:	f005 f873 	bl	80073fc <memset>
  if(hi2c->Instance==I2C1)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	4a22      	ldr	r2, [pc, #136]	; (80023a4 <HAL_I2C_MspInit+0xb4>)
 800231c:	4293      	cmp	r3, r2
 800231e:	d13c      	bne.n	800239a <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002320:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002324:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002326:	2300      	movs	r3, #0
 8002328:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800232a:	f107 0310 	add.w	r3, r7, #16
 800232e:	4618      	mov	r0, r3
 8002330:	f002 fae8 	bl	8004904 <HAL_RCCEx_PeriphCLKConfig>
 8002334:	4603      	mov	r3, r0
 8002336:	2b00      	cmp	r3, #0
 8002338:	d001      	beq.n	800233e <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800233a:	f7ff ffaf 	bl	800229c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800233e:	4b1a      	ldr	r3, [pc, #104]	; (80023a8 <HAL_I2C_MspInit+0xb8>)
 8002340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002342:	4a19      	ldr	r2, [pc, #100]	; (80023a8 <HAL_I2C_MspInit+0xb8>)
 8002344:	f043 0302 	orr.w	r3, r3, #2
 8002348:	6313      	str	r3, [r2, #48]	; 0x30
 800234a:	4b17      	ldr	r3, [pc, #92]	; (80023a8 <HAL_I2C_MspInit+0xb8>)
 800234c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800234e:	f003 0302 	and.w	r3, r3, #2
 8002352:	60fb      	str	r3, [r7, #12]
 8002354:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002356:	f44f 7340 	mov.w	r3, #768	; 0x300
 800235a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800235e:	2312      	movs	r3, #18
 8002360:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002364:	2300      	movs	r3, #0
 8002366:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800236a:	2303      	movs	r3, #3
 800236c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002370:	2304      	movs	r3, #4
 8002372:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002376:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800237a:	4619      	mov	r1, r3
 800237c:	480b      	ldr	r0, [pc, #44]	; (80023ac <HAL_I2C_MspInit+0xbc>)
 800237e:	f000 fbf9 	bl	8002b74 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002382:	4b09      	ldr	r3, [pc, #36]	; (80023a8 <HAL_I2C_MspInit+0xb8>)
 8002384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002386:	4a08      	ldr	r2, [pc, #32]	; (80023a8 <HAL_I2C_MspInit+0xb8>)
 8002388:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800238c:	6413      	str	r3, [r2, #64]	; 0x40
 800238e:	4b06      	ldr	r3, [pc, #24]	; (80023a8 <HAL_I2C_MspInit+0xb8>)
 8002390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002392:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002396:	60bb      	str	r3, [r7, #8]
 8002398:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800239a:	bf00      	nop
 800239c:	37a8      	adds	r7, #168	; 0xa8
 800239e:	46bd      	mov	sp, r7
 80023a0:	bd80      	pop	{r7, pc}
 80023a2:	bf00      	nop
 80023a4:	40005400 	.word	0x40005400
 80023a8:	40023800 	.word	0x40023800
 80023ac:	40020400 	.word	0x40020400

080023b0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b08a      	sub	sp, #40	; 0x28
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023b8:	f107 0314 	add.w	r3, r7, #20
 80023bc:	2200      	movs	r2, #0
 80023be:	601a      	str	r2, [r3, #0]
 80023c0:	605a      	str	r2, [r3, #4]
 80023c2:	609a      	str	r2, [r3, #8]
 80023c4:	60da      	str	r2, [r3, #12]
 80023c6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	4a25      	ldr	r2, [pc, #148]	; (8002464 <HAL_SPI_MspInit+0xb4>)
 80023ce:	4293      	cmp	r3, r2
 80023d0:	d144      	bne.n	800245c <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80023d2:	4b25      	ldr	r3, [pc, #148]	; (8002468 <HAL_SPI_MspInit+0xb8>)
 80023d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023d6:	4a24      	ldr	r2, [pc, #144]	; (8002468 <HAL_SPI_MspInit+0xb8>)
 80023d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80023dc:	6413      	str	r3, [r2, #64]	; 0x40
 80023de:	4b22      	ldr	r3, [pc, #136]	; (8002468 <HAL_SPI_MspInit+0xb8>)
 80023e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80023e6:	613b      	str	r3, [r7, #16]
 80023e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOI_CLK_ENABLE();
 80023ea:	4b1f      	ldr	r3, [pc, #124]	; (8002468 <HAL_SPI_MspInit+0xb8>)
 80023ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ee:	4a1e      	ldr	r2, [pc, #120]	; (8002468 <HAL_SPI_MspInit+0xb8>)
 80023f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023f4:	6313      	str	r3, [r2, #48]	; 0x30
 80023f6:	4b1c      	ldr	r3, [pc, #112]	; (8002468 <HAL_SPI_MspInit+0xb8>)
 80023f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023fe:	60fb      	str	r3, [r7, #12]
 8002400:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002402:	4b19      	ldr	r3, [pc, #100]	; (8002468 <HAL_SPI_MspInit+0xb8>)
 8002404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002406:	4a18      	ldr	r2, [pc, #96]	; (8002468 <HAL_SPI_MspInit+0xb8>)
 8002408:	f043 0302 	orr.w	r3, r3, #2
 800240c:	6313      	str	r3, [r2, #48]	; 0x30
 800240e:	4b16      	ldr	r3, [pc, #88]	; (8002468 <HAL_SPI_MspInit+0xb8>)
 8002410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002412:	f003 0302 	and.w	r3, r3, #2
 8002416:	60bb      	str	r3, [r7, #8]
 8002418:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PI1     ------> SPI2_SCK
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800241a:	2302      	movs	r3, #2
 800241c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800241e:	2302      	movs	r3, #2
 8002420:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002422:	2300      	movs	r3, #0
 8002424:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002426:	2303      	movs	r3, #3
 8002428:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800242a:	2305      	movs	r3, #5
 800242c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800242e:	f107 0314 	add.w	r3, r7, #20
 8002432:	4619      	mov	r1, r3
 8002434:	480d      	ldr	r0, [pc, #52]	; (800246c <HAL_SPI_MspInit+0xbc>)
 8002436:	f000 fb9d 	bl	8002b74 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800243a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800243e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002440:	2302      	movs	r3, #2
 8002442:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002444:	2300      	movs	r3, #0
 8002446:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002448:	2303      	movs	r3, #3
 800244a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800244c:	2305      	movs	r3, #5
 800244e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002450:	f107 0314 	add.w	r3, r7, #20
 8002454:	4619      	mov	r1, r3
 8002456:	4806      	ldr	r0, [pc, #24]	; (8002470 <HAL_SPI_MspInit+0xc0>)
 8002458:	f000 fb8c 	bl	8002b74 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800245c:	bf00      	nop
 800245e:	3728      	adds	r7, #40	; 0x28
 8002460:	46bd      	mov	sp, r7
 8002462:	bd80      	pop	{r7, pc}
 8002464:	40003800 	.word	0x40003800
 8002468:	40023800 	.word	0x40023800
 800246c:	40022000 	.word	0x40022000
 8002470:	40020400 	.word	0x40020400

08002474 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002474:	b480      	push	{r7}
 8002476:	b085      	sub	sp, #20
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002484:	d10b      	bne.n	800249e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002486:	4b09      	ldr	r3, [pc, #36]	; (80024ac <HAL_TIM_Base_MspInit+0x38>)
 8002488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800248a:	4a08      	ldr	r2, [pc, #32]	; (80024ac <HAL_TIM_Base_MspInit+0x38>)
 800248c:	f043 0301 	orr.w	r3, r3, #1
 8002490:	6413      	str	r3, [r2, #64]	; 0x40
 8002492:	4b06      	ldr	r3, [pc, #24]	; (80024ac <HAL_TIM_Base_MspInit+0x38>)
 8002494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002496:	f003 0301 	and.w	r3, r3, #1
 800249a:	60fb      	str	r3, [r7, #12]
 800249c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800249e:	bf00      	nop
 80024a0:	3714      	adds	r7, #20
 80024a2:	46bd      	mov	sp, r7
 80024a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a8:	4770      	bx	lr
 80024aa:	bf00      	nop
 80024ac:	40023800 	.word	0x40023800

080024b0 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80024b0:	b480      	push	{r7}
 80024b2:	b085      	sub	sp, #20
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	4a0a      	ldr	r2, [pc, #40]	; (80024e8 <HAL_TIM_PWM_MspInit+0x38>)
 80024be:	4293      	cmp	r3, r2
 80024c0:	d10b      	bne.n	80024da <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80024c2:	4b0a      	ldr	r3, [pc, #40]	; (80024ec <HAL_TIM_PWM_MspInit+0x3c>)
 80024c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024c6:	4a09      	ldr	r2, [pc, #36]	; (80024ec <HAL_TIM_PWM_MspInit+0x3c>)
 80024c8:	f043 0302 	orr.w	r3, r3, #2
 80024cc:	6413      	str	r3, [r2, #64]	; 0x40
 80024ce:	4b07      	ldr	r3, [pc, #28]	; (80024ec <HAL_TIM_PWM_MspInit+0x3c>)
 80024d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024d2:	f003 0302 	and.w	r3, r3, #2
 80024d6:	60fb      	str	r3, [r7, #12]
 80024d8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80024da:	bf00      	nop
 80024dc:	3714      	adds	r7, #20
 80024de:	46bd      	mov	sp, r7
 80024e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e4:	4770      	bx	lr
 80024e6:	bf00      	nop
 80024e8:	40000400 	.word	0x40000400
 80024ec:	40023800 	.word	0x40023800

080024f0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b088      	sub	sp, #32
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024f8:	f107 030c 	add.w	r3, r7, #12
 80024fc:	2200      	movs	r2, #0
 80024fe:	601a      	str	r2, [r3, #0]
 8002500:	605a      	str	r2, [r3, #4]
 8002502:	609a      	str	r2, [r3, #8]
 8002504:	60da      	str	r2, [r3, #12]
 8002506:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	4a11      	ldr	r2, [pc, #68]	; (8002554 <HAL_TIM_MspPostInit+0x64>)
 800250e:	4293      	cmp	r3, r2
 8002510:	d11b      	bne.n	800254a <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002512:	4b11      	ldr	r3, [pc, #68]	; (8002558 <HAL_TIM_MspPostInit+0x68>)
 8002514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002516:	4a10      	ldr	r2, [pc, #64]	; (8002558 <HAL_TIM_MspPostInit+0x68>)
 8002518:	f043 0304 	orr.w	r3, r3, #4
 800251c:	6313      	str	r3, [r2, #48]	; 0x30
 800251e:	4b0e      	ldr	r3, [pc, #56]	; (8002558 <HAL_TIM_MspPostInit+0x68>)
 8002520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002522:	f003 0304 	and.w	r3, r3, #4
 8002526:	60bb      	str	r3, [r7, #8]
 8002528:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800252a:	2380      	movs	r3, #128	; 0x80
 800252c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800252e:	2302      	movs	r3, #2
 8002530:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002532:	2300      	movs	r3, #0
 8002534:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002536:	2300      	movs	r3, #0
 8002538:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800253a:	2302      	movs	r3, #2
 800253c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800253e:	f107 030c 	add.w	r3, r7, #12
 8002542:	4619      	mov	r1, r3
 8002544:	4805      	ldr	r0, [pc, #20]	; (800255c <HAL_TIM_MspPostInit+0x6c>)
 8002546:	f000 fb15 	bl	8002b74 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800254a:	bf00      	nop
 800254c:	3720      	adds	r7, #32
 800254e:	46bd      	mov	sp, r7
 8002550:	bd80      	pop	{r7, pc}
 8002552:	bf00      	nop
 8002554:	40000400 	.word	0x40000400
 8002558:	40023800 	.word	0x40023800
 800255c:	40020800 	.word	0x40020800

08002560 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b0ac      	sub	sp, #176	; 0xb0
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002568:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800256c:	2200      	movs	r2, #0
 800256e:	601a      	str	r2, [r3, #0]
 8002570:	605a      	str	r2, [r3, #4]
 8002572:	609a      	str	r2, [r3, #8]
 8002574:	60da      	str	r2, [r3, #12]
 8002576:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002578:	f107 0318 	add.w	r3, r7, #24
 800257c:	2284      	movs	r2, #132	; 0x84
 800257e:	2100      	movs	r1, #0
 8002580:	4618      	mov	r0, r3
 8002582:	f004 ff3b 	bl	80073fc <memset>
  if(huart->Instance==USART1)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	4a32      	ldr	r2, [pc, #200]	; (8002654 <HAL_UART_MspInit+0xf4>)
 800258c:	4293      	cmp	r3, r2
 800258e:	d15c      	bne.n	800264a <HAL_UART_MspInit+0xea>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002590:	2340      	movs	r3, #64	; 0x40
 8002592:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002594:	2300      	movs	r3, #0
 8002596:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002598:	f107 0318 	add.w	r3, r7, #24
 800259c:	4618      	mov	r0, r3
 800259e:	f002 f9b1 	bl	8004904 <HAL_RCCEx_PeriphCLKConfig>
 80025a2:	4603      	mov	r3, r0
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d001      	beq.n	80025ac <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80025a8:	f7ff fe78 	bl	800229c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80025ac:	4b2a      	ldr	r3, [pc, #168]	; (8002658 <HAL_UART_MspInit+0xf8>)
 80025ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025b0:	4a29      	ldr	r2, [pc, #164]	; (8002658 <HAL_UART_MspInit+0xf8>)
 80025b2:	f043 0310 	orr.w	r3, r3, #16
 80025b6:	6453      	str	r3, [r2, #68]	; 0x44
 80025b8:	4b27      	ldr	r3, [pc, #156]	; (8002658 <HAL_UART_MspInit+0xf8>)
 80025ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025bc:	f003 0310 	and.w	r3, r3, #16
 80025c0:	617b      	str	r3, [r7, #20]
 80025c2:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80025c4:	4b24      	ldr	r3, [pc, #144]	; (8002658 <HAL_UART_MspInit+0xf8>)
 80025c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025c8:	4a23      	ldr	r2, [pc, #140]	; (8002658 <HAL_UART_MspInit+0xf8>)
 80025ca:	f043 0302 	orr.w	r3, r3, #2
 80025ce:	6313      	str	r3, [r2, #48]	; 0x30
 80025d0:	4b21      	ldr	r3, [pc, #132]	; (8002658 <HAL_UART_MspInit+0xf8>)
 80025d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025d4:	f003 0302 	and.w	r3, r3, #2
 80025d8:	613b      	str	r3, [r7, #16]
 80025da:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025dc:	4b1e      	ldr	r3, [pc, #120]	; (8002658 <HAL_UART_MspInit+0xf8>)
 80025de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025e0:	4a1d      	ldr	r2, [pc, #116]	; (8002658 <HAL_UART_MspInit+0xf8>)
 80025e2:	f043 0301 	orr.w	r3, r3, #1
 80025e6:	6313      	str	r3, [r2, #48]	; 0x30
 80025e8:	4b1b      	ldr	r3, [pc, #108]	; (8002658 <HAL_UART_MspInit+0xf8>)
 80025ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ec:	f003 0301 	and.w	r3, r3, #1
 80025f0:	60fb      	str	r3, [r7, #12]
 80025f2:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80025f4:	2380      	movs	r3, #128	; 0x80
 80025f6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025fa:	2302      	movs	r3, #2
 80025fc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002600:	2300      	movs	r3, #0
 8002602:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002606:	2303      	movs	r3, #3
 8002608:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800260c:	2307      	movs	r3, #7
 800260e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002612:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002616:	4619      	mov	r1, r3
 8002618:	4810      	ldr	r0, [pc, #64]	; (800265c <HAL_UART_MspInit+0xfc>)
 800261a:	f000 faab 	bl	8002b74 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800261e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002622:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002626:	2302      	movs	r3, #2
 8002628:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800262c:	2300      	movs	r3, #0
 800262e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002632:	2303      	movs	r3, #3
 8002634:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002638:	2307      	movs	r3, #7
 800263a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800263e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002642:	4619      	mov	r1, r3
 8002644:	4806      	ldr	r0, [pc, #24]	; (8002660 <HAL_UART_MspInit+0x100>)
 8002646:	f000 fa95 	bl	8002b74 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800264a:	bf00      	nop
 800264c:	37b0      	adds	r7, #176	; 0xb0
 800264e:	46bd      	mov	sp, r7
 8002650:	bd80      	pop	{r7, pc}
 8002652:	bf00      	nop
 8002654:	40011000 	.word	0x40011000
 8002658:	40023800 	.word	0x40023800
 800265c:	40020400 	.word	0x40020400
 8002660:	40020000 	.word	0x40020000

08002664 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002664:	b480      	push	{r7}
 8002666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002668:	e7fe      	b.n	8002668 <NMI_Handler+0x4>

0800266a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800266a:	b480      	push	{r7}
 800266c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800266e:	e7fe      	b.n	800266e <HardFault_Handler+0x4>

08002670 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002670:	b480      	push	{r7}
 8002672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002674:	e7fe      	b.n	8002674 <MemManage_Handler+0x4>

08002676 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002676:	b480      	push	{r7}
 8002678:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800267a:	e7fe      	b.n	800267a <BusFault_Handler+0x4>

0800267c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800267c:	b480      	push	{r7}
 800267e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002680:	e7fe      	b.n	8002680 <UsageFault_Handler+0x4>

08002682 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002682:	b480      	push	{r7}
 8002684:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002686:	bf00      	nop
 8002688:	46bd      	mov	sp, r7
 800268a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268e:	4770      	bx	lr

08002690 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002690:	b480      	push	{r7}
 8002692:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002694:	bf00      	nop
 8002696:	46bd      	mov	sp, r7
 8002698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269c:	4770      	bx	lr

0800269e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800269e:	b480      	push	{r7}
 80026a0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80026a2:	bf00      	nop
 80026a4:	46bd      	mov	sp, r7
 80026a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026aa:	4770      	bx	lr

080026ac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80026b0:	f000 f90a 	bl	80028c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80026b4:	bf00      	nop
 80026b6:	bd80      	pop	{r7, pc}

080026b8 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

	Interrupt_flank();
 80026bc:	f7ff f81a 	bl	80016f4 <Interrupt_flank>
  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(IRread_Pin);
 80026c0:	2001      	movs	r0, #1
 80026c2:	f000 fc1d 	bl	8002f00 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80026c6:	bf00      	nop
 80026c8:	bd80      	pop	{r7, pc}

080026ca <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80026ca:	b580      	push	{r7, lr}
 80026cc:	b086      	sub	sp, #24
 80026ce:	af00      	add	r7, sp, #0
 80026d0:	60f8      	str	r0, [r7, #12]
 80026d2:	60b9      	str	r1, [r7, #8]
 80026d4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026d6:	2300      	movs	r3, #0
 80026d8:	617b      	str	r3, [r7, #20]
 80026da:	e00a      	b.n	80026f2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80026dc:	f3af 8000 	nop.w
 80026e0:	4601      	mov	r1, r0
 80026e2:	68bb      	ldr	r3, [r7, #8]
 80026e4:	1c5a      	adds	r2, r3, #1
 80026e6:	60ba      	str	r2, [r7, #8]
 80026e8:	b2ca      	uxtb	r2, r1
 80026ea:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026ec:	697b      	ldr	r3, [r7, #20]
 80026ee:	3301      	adds	r3, #1
 80026f0:	617b      	str	r3, [r7, #20]
 80026f2:	697a      	ldr	r2, [r7, #20]
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	429a      	cmp	r2, r3
 80026f8:	dbf0      	blt.n	80026dc <_read+0x12>
  }

  return len;
 80026fa:	687b      	ldr	r3, [r7, #4]
}
 80026fc:	4618      	mov	r0, r3
 80026fe:	3718      	adds	r7, #24
 8002700:	46bd      	mov	sp, r7
 8002702:	bd80      	pop	{r7, pc}

08002704 <_close>:
  }
  return len;
}

int _close(int file)
{
 8002704:	b480      	push	{r7}
 8002706:	b083      	sub	sp, #12
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800270c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002710:	4618      	mov	r0, r3
 8002712:	370c      	adds	r7, #12
 8002714:	46bd      	mov	sp, r7
 8002716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271a:	4770      	bx	lr

0800271c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800271c:	b480      	push	{r7}
 800271e:	b083      	sub	sp, #12
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
 8002724:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800272c:	605a      	str	r2, [r3, #4]
  return 0;
 800272e:	2300      	movs	r3, #0
}
 8002730:	4618      	mov	r0, r3
 8002732:	370c      	adds	r7, #12
 8002734:	46bd      	mov	sp, r7
 8002736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273a:	4770      	bx	lr

0800273c <_isatty>:

int _isatty(int file)
{
 800273c:	b480      	push	{r7}
 800273e:	b083      	sub	sp, #12
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002744:	2301      	movs	r3, #1
}
 8002746:	4618      	mov	r0, r3
 8002748:	370c      	adds	r7, #12
 800274a:	46bd      	mov	sp, r7
 800274c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002750:	4770      	bx	lr

08002752 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002752:	b480      	push	{r7}
 8002754:	b085      	sub	sp, #20
 8002756:	af00      	add	r7, sp, #0
 8002758:	60f8      	str	r0, [r7, #12]
 800275a:	60b9      	str	r1, [r7, #8]
 800275c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800275e:	2300      	movs	r3, #0
}
 8002760:	4618      	mov	r0, r3
 8002762:	3714      	adds	r7, #20
 8002764:	46bd      	mov	sp, r7
 8002766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276a:	4770      	bx	lr

0800276c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b086      	sub	sp, #24
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002774:	4a14      	ldr	r2, [pc, #80]	; (80027c8 <_sbrk+0x5c>)
 8002776:	4b15      	ldr	r3, [pc, #84]	; (80027cc <_sbrk+0x60>)
 8002778:	1ad3      	subs	r3, r2, r3
 800277a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800277c:	697b      	ldr	r3, [r7, #20]
 800277e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002780:	4b13      	ldr	r3, [pc, #76]	; (80027d0 <_sbrk+0x64>)
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	2b00      	cmp	r3, #0
 8002786:	d102      	bne.n	800278e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002788:	4b11      	ldr	r3, [pc, #68]	; (80027d0 <_sbrk+0x64>)
 800278a:	4a12      	ldr	r2, [pc, #72]	; (80027d4 <_sbrk+0x68>)
 800278c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800278e:	4b10      	ldr	r3, [pc, #64]	; (80027d0 <_sbrk+0x64>)
 8002790:	681a      	ldr	r2, [r3, #0]
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	4413      	add	r3, r2
 8002796:	693a      	ldr	r2, [r7, #16]
 8002798:	429a      	cmp	r2, r3
 800279a:	d207      	bcs.n	80027ac <_sbrk+0x40>
  {
    errno = ENOMEM;
 800279c:	f004 fe04 	bl	80073a8 <__errno>
 80027a0:	4603      	mov	r3, r0
 80027a2:	220c      	movs	r2, #12
 80027a4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80027a6:	f04f 33ff 	mov.w	r3, #4294967295
 80027aa:	e009      	b.n	80027c0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80027ac:	4b08      	ldr	r3, [pc, #32]	; (80027d0 <_sbrk+0x64>)
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80027b2:	4b07      	ldr	r3, [pc, #28]	; (80027d0 <_sbrk+0x64>)
 80027b4:	681a      	ldr	r2, [r3, #0]
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	4413      	add	r3, r2
 80027ba:	4a05      	ldr	r2, [pc, #20]	; (80027d0 <_sbrk+0x64>)
 80027bc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80027be:	68fb      	ldr	r3, [r7, #12]
}
 80027c0:	4618      	mov	r0, r3
 80027c2:	3718      	adds	r7, #24
 80027c4:	46bd      	mov	sp, r7
 80027c6:	bd80      	pop	{r7, pc}
 80027c8:	20050000 	.word	0x20050000
 80027cc:	00000400 	.word	0x00000400
 80027d0:	20002de4 	.word	0x20002de4
 80027d4:	20002e00 	.word	0x20002e00

080027d8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80027d8:	b480      	push	{r7}
 80027da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80027dc:	4b06      	ldr	r3, [pc, #24]	; (80027f8 <SystemInit+0x20>)
 80027de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027e2:	4a05      	ldr	r2, [pc, #20]	; (80027f8 <SystemInit+0x20>)
 80027e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80027e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80027ec:	bf00      	nop
 80027ee:	46bd      	mov	sp, r7
 80027f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f4:	4770      	bx	lr
 80027f6:	bf00      	nop
 80027f8:	e000ed00 	.word	0xe000ed00

080027fc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80027fc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002834 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002800:	480d      	ldr	r0, [pc, #52]	; (8002838 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002802:	490e      	ldr	r1, [pc, #56]	; (800283c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002804:	4a0e      	ldr	r2, [pc, #56]	; (8002840 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002806:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002808:	e002      	b.n	8002810 <LoopCopyDataInit>

0800280a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800280a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800280c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800280e:	3304      	adds	r3, #4

08002810 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002810:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002812:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002814:	d3f9      	bcc.n	800280a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002816:	4a0b      	ldr	r2, [pc, #44]	; (8002844 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002818:	4c0b      	ldr	r4, [pc, #44]	; (8002848 <LoopFillZerobss+0x26>)
  movs r3, #0
 800281a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800281c:	e001      	b.n	8002822 <LoopFillZerobss>

0800281e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800281e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002820:	3204      	adds	r2, #4

08002822 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002822:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002824:	d3fb      	bcc.n	800281e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002826:	f7ff ffd7 	bl	80027d8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800282a:	f004 fdc3 	bl	80073b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800282e:	f7ff facd 	bl	8001dcc <main>
  bx  lr    
 8002832:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002834:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8002838:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800283c:	200027f0 	.word	0x200027f0
  ldr r2, =_sidata
 8002840:	08008a14 	.word	0x08008a14
  ldr r2, =_sbss
 8002844:	200027f0 	.word	0x200027f0
  ldr r4, =_ebss
 8002848:	20002dfc 	.word	0x20002dfc

0800284c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800284c:	e7fe      	b.n	800284c <ADC_IRQHandler>

0800284e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800284e:	b580      	push	{r7, lr}
 8002850:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002852:	2003      	movs	r0, #3
 8002854:	f000 f94c 	bl	8002af0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002858:	2000      	movs	r0, #0
 800285a:	f000 f805 	bl	8002868 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800285e:	f7ff fd23 	bl	80022a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002862:	2300      	movs	r3, #0
}
 8002864:	4618      	mov	r0, r3
 8002866:	bd80      	pop	{r7, pc}

08002868 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	b082      	sub	sp, #8
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002870:	4b12      	ldr	r3, [pc, #72]	; (80028bc <HAL_InitTick+0x54>)
 8002872:	681a      	ldr	r2, [r3, #0]
 8002874:	4b12      	ldr	r3, [pc, #72]	; (80028c0 <HAL_InitTick+0x58>)
 8002876:	781b      	ldrb	r3, [r3, #0]
 8002878:	4619      	mov	r1, r3
 800287a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800287e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002882:	fbb2 f3f3 	udiv	r3, r2, r3
 8002886:	4618      	mov	r0, r3
 8002888:	f000 f967 	bl	8002b5a <HAL_SYSTICK_Config>
 800288c:	4603      	mov	r3, r0
 800288e:	2b00      	cmp	r3, #0
 8002890:	d001      	beq.n	8002896 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002892:	2301      	movs	r3, #1
 8002894:	e00e      	b.n	80028b4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	2b0f      	cmp	r3, #15
 800289a:	d80a      	bhi.n	80028b2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800289c:	2200      	movs	r2, #0
 800289e:	6879      	ldr	r1, [r7, #4]
 80028a0:	f04f 30ff 	mov.w	r0, #4294967295
 80028a4:	f000 f92f 	bl	8002b06 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80028a8:	4a06      	ldr	r2, [pc, #24]	; (80028c4 <HAL_InitTick+0x5c>)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80028ae:	2300      	movs	r3, #0
 80028b0:	e000      	b.n	80028b4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80028b2:	2301      	movs	r3, #1
}
 80028b4:	4618      	mov	r0, r3
 80028b6:	3708      	adds	r7, #8
 80028b8:	46bd      	mov	sp, r7
 80028ba:	bd80      	pop	{r7, pc}
 80028bc:	20002780 	.word	0x20002780
 80028c0:	20002788 	.word	0x20002788
 80028c4:	20002784 	.word	0x20002784

080028c8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80028c8:	b480      	push	{r7}
 80028ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80028cc:	4b06      	ldr	r3, [pc, #24]	; (80028e8 <HAL_IncTick+0x20>)
 80028ce:	781b      	ldrb	r3, [r3, #0]
 80028d0:	461a      	mov	r2, r3
 80028d2:	4b06      	ldr	r3, [pc, #24]	; (80028ec <HAL_IncTick+0x24>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	4413      	add	r3, r2
 80028d8:	4a04      	ldr	r2, [pc, #16]	; (80028ec <HAL_IncTick+0x24>)
 80028da:	6013      	str	r3, [r2, #0]
}
 80028dc:	bf00      	nop
 80028de:	46bd      	mov	sp, r7
 80028e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e4:	4770      	bx	lr
 80028e6:	bf00      	nop
 80028e8:	20002788 	.word	0x20002788
 80028ec:	20002de8 	.word	0x20002de8

080028f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80028f0:	b480      	push	{r7}
 80028f2:	af00      	add	r7, sp, #0
  return uwTick;
 80028f4:	4b03      	ldr	r3, [pc, #12]	; (8002904 <HAL_GetTick+0x14>)
 80028f6:	681b      	ldr	r3, [r3, #0]
}
 80028f8:	4618      	mov	r0, r3
 80028fa:	46bd      	mov	sp, r7
 80028fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002900:	4770      	bx	lr
 8002902:	bf00      	nop
 8002904:	20002de8 	.word	0x20002de8

08002908 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	b084      	sub	sp, #16
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002910:	f7ff ffee 	bl	80028f0 <HAL_GetTick>
 8002914:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002920:	d005      	beq.n	800292e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002922:	4b0a      	ldr	r3, [pc, #40]	; (800294c <HAL_Delay+0x44>)
 8002924:	781b      	ldrb	r3, [r3, #0]
 8002926:	461a      	mov	r2, r3
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	4413      	add	r3, r2
 800292c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800292e:	bf00      	nop
 8002930:	f7ff ffde 	bl	80028f0 <HAL_GetTick>
 8002934:	4602      	mov	r2, r0
 8002936:	68bb      	ldr	r3, [r7, #8]
 8002938:	1ad3      	subs	r3, r2, r3
 800293a:	68fa      	ldr	r2, [r7, #12]
 800293c:	429a      	cmp	r2, r3
 800293e:	d8f7      	bhi.n	8002930 <HAL_Delay+0x28>
  {
  }
}
 8002940:	bf00      	nop
 8002942:	bf00      	nop
 8002944:	3710      	adds	r7, #16
 8002946:	46bd      	mov	sp, r7
 8002948:	bd80      	pop	{r7, pc}
 800294a:	bf00      	nop
 800294c:	20002788 	.word	0x20002788

08002950 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002950:	b480      	push	{r7}
 8002952:	b085      	sub	sp, #20
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	f003 0307 	and.w	r3, r3, #7
 800295e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002960:	4b0b      	ldr	r3, [pc, #44]	; (8002990 <__NVIC_SetPriorityGrouping+0x40>)
 8002962:	68db      	ldr	r3, [r3, #12]
 8002964:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002966:	68ba      	ldr	r2, [r7, #8]
 8002968:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800296c:	4013      	ands	r3, r2
 800296e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002974:	68bb      	ldr	r3, [r7, #8]
 8002976:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002978:	4b06      	ldr	r3, [pc, #24]	; (8002994 <__NVIC_SetPriorityGrouping+0x44>)
 800297a:	4313      	orrs	r3, r2
 800297c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800297e:	4a04      	ldr	r2, [pc, #16]	; (8002990 <__NVIC_SetPriorityGrouping+0x40>)
 8002980:	68bb      	ldr	r3, [r7, #8]
 8002982:	60d3      	str	r3, [r2, #12]
}
 8002984:	bf00      	nop
 8002986:	3714      	adds	r7, #20
 8002988:	46bd      	mov	sp, r7
 800298a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298e:	4770      	bx	lr
 8002990:	e000ed00 	.word	0xe000ed00
 8002994:	05fa0000 	.word	0x05fa0000

08002998 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002998:	b480      	push	{r7}
 800299a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800299c:	4b04      	ldr	r3, [pc, #16]	; (80029b0 <__NVIC_GetPriorityGrouping+0x18>)
 800299e:	68db      	ldr	r3, [r3, #12]
 80029a0:	0a1b      	lsrs	r3, r3, #8
 80029a2:	f003 0307 	and.w	r3, r3, #7
}
 80029a6:	4618      	mov	r0, r3
 80029a8:	46bd      	mov	sp, r7
 80029aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ae:	4770      	bx	lr
 80029b0:	e000ed00 	.word	0xe000ed00

080029b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029b4:	b480      	push	{r7}
 80029b6:	b083      	sub	sp, #12
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	4603      	mov	r3, r0
 80029bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	db0b      	blt.n	80029de <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80029c6:	79fb      	ldrb	r3, [r7, #7]
 80029c8:	f003 021f 	and.w	r2, r3, #31
 80029cc:	4907      	ldr	r1, [pc, #28]	; (80029ec <__NVIC_EnableIRQ+0x38>)
 80029ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029d2:	095b      	lsrs	r3, r3, #5
 80029d4:	2001      	movs	r0, #1
 80029d6:	fa00 f202 	lsl.w	r2, r0, r2
 80029da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80029de:	bf00      	nop
 80029e0:	370c      	adds	r7, #12
 80029e2:	46bd      	mov	sp, r7
 80029e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e8:	4770      	bx	lr
 80029ea:	bf00      	nop
 80029ec:	e000e100 	.word	0xe000e100

080029f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80029f0:	b480      	push	{r7}
 80029f2:	b083      	sub	sp, #12
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	4603      	mov	r3, r0
 80029f8:	6039      	str	r1, [r7, #0]
 80029fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	db0a      	blt.n	8002a1a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	b2da      	uxtb	r2, r3
 8002a08:	490c      	ldr	r1, [pc, #48]	; (8002a3c <__NVIC_SetPriority+0x4c>)
 8002a0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a0e:	0112      	lsls	r2, r2, #4
 8002a10:	b2d2      	uxtb	r2, r2
 8002a12:	440b      	add	r3, r1
 8002a14:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002a18:	e00a      	b.n	8002a30 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	b2da      	uxtb	r2, r3
 8002a1e:	4908      	ldr	r1, [pc, #32]	; (8002a40 <__NVIC_SetPriority+0x50>)
 8002a20:	79fb      	ldrb	r3, [r7, #7]
 8002a22:	f003 030f 	and.w	r3, r3, #15
 8002a26:	3b04      	subs	r3, #4
 8002a28:	0112      	lsls	r2, r2, #4
 8002a2a:	b2d2      	uxtb	r2, r2
 8002a2c:	440b      	add	r3, r1
 8002a2e:	761a      	strb	r2, [r3, #24]
}
 8002a30:	bf00      	nop
 8002a32:	370c      	adds	r7, #12
 8002a34:	46bd      	mov	sp, r7
 8002a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3a:	4770      	bx	lr
 8002a3c:	e000e100 	.word	0xe000e100
 8002a40:	e000ed00 	.word	0xe000ed00

08002a44 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a44:	b480      	push	{r7}
 8002a46:	b089      	sub	sp, #36	; 0x24
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	60f8      	str	r0, [r7, #12]
 8002a4c:	60b9      	str	r1, [r7, #8]
 8002a4e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	f003 0307 	and.w	r3, r3, #7
 8002a56:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a58:	69fb      	ldr	r3, [r7, #28]
 8002a5a:	f1c3 0307 	rsb	r3, r3, #7
 8002a5e:	2b04      	cmp	r3, #4
 8002a60:	bf28      	it	cs
 8002a62:	2304      	movcs	r3, #4
 8002a64:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a66:	69fb      	ldr	r3, [r7, #28]
 8002a68:	3304      	adds	r3, #4
 8002a6a:	2b06      	cmp	r3, #6
 8002a6c:	d902      	bls.n	8002a74 <NVIC_EncodePriority+0x30>
 8002a6e:	69fb      	ldr	r3, [r7, #28]
 8002a70:	3b03      	subs	r3, #3
 8002a72:	e000      	b.n	8002a76 <NVIC_EncodePriority+0x32>
 8002a74:	2300      	movs	r3, #0
 8002a76:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a78:	f04f 32ff 	mov.w	r2, #4294967295
 8002a7c:	69bb      	ldr	r3, [r7, #24]
 8002a7e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a82:	43da      	mvns	r2, r3
 8002a84:	68bb      	ldr	r3, [r7, #8]
 8002a86:	401a      	ands	r2, r3
 8002a88:	697b      	ldr	r3, [r7, #20]
 8002a8a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a8c:	f04f 31ff 	mov.w	r1, #4294967295
 8002a90:	697b      	ldr	r3, [r7, #20]
 8002a92:	fa01 f303 	lsl.w	r3, r1, r3
 8002a96:	43d9      	mvns	r1, r3
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a9c:	4313      	orrs	r3, r2
         );
}
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	3724      	adds	r7, #36	; 0x24
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa8:	4770      	bx	lr
	...

08002aac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b082      	sub	sp, #8
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	3b01      	subs	r3, #1
 8002ab8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002abc:	d301      	bcc.n	8002ac2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002abe:	2301      	movs	r3, #1
 8002ac0:	e00f      	b.n	8002ae2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002ac2:	4a0a      	ldr	r2, [pc, #40]	; (8002aec <SysTick_Config+0x40>)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	3b01      	subs	r3, #1
 8002ac8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002aca:	210f      	movs	r1, #15
 8002acc:	f04f 30ff 	mov.w	r0, #4294967295
 8002ad0:	f7ff ff8e 	bl	80029f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002ad4:	4b05      	ldr	r3, [pc, #20]	; (8002aec <SysTick_Config+0x40>)
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002ada:	4b04      	ldr	r3, [pc, #16]	; (8002aec <SysTick_Config+0x40>)
 8002adc:	2207      	movs	r2, #7
 8002ade:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002ae0:	2300      	movs	r3, #0
}
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	3708      	adds	r7, #8
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	bd80      	pop	{r7, pc}
 8002aea:	bf00      	nop
 8002aec:	e000e010 	.word	0xe000e010

08002af0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b082      	sub	sp, #8
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002af8:	6878      	ldr	r0, [r7, #4]
 8002afa:	f7ff ff29 	bl	8002950 <__NVIC_SetPriorityGrouping>
}
 8002afe:	bf00      	nop
 8002b00:	3708      	adds	r7, #8
 8002b02:	46bd      	mov	sp, r7
 8002b04:	bd80      	pop	{r7, pc}

08002b06 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002b06:	b580      	push	{r7, lr}
 8002b08:	b086      	sub	sp, #24
 8002b0a:	af00      	add	r7, sp, #0
 8002b0c:	4603      	mov	r3, r0
 8002b0e:	60b9      	str	r1, [r7, #8]
 8002b10:	607a      	str	r2, [r7, #4]
 8002b12:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002b14:	2300      	movs	r3, #0
 8002b16:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002b18:	f7ff ff3e 	bl	8002998 <__NVIC_GetPriorityGrouping>
 8002b1c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002b1e:	687a      	ldr	r2, [r7, #4]
 8002b20:	68b9      	ldr	r1, [r7, #8]
 8002b22:	6978      	ldr	r0, [r7, #20]
 8002b24:	f7ff ff8e 	bl	8002a44 <NVIC_EncodePriority>
 8002b28:	4602      	mov	r2, r0
 8002b2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b2e:	4611      	mov	r1, r2
 8002b30:	4618      	mov	r0, r3
 8002b32:	f7ff ff5d 	bl	80029f0 <__NVIC_SetPriority>
}
 8002b36:	bf00      	nop
 8002b38:	3718      	adds	r7, #24
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	bd80      	pop	{r7, pc}

08002b3e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b3e:	b580      	push	{r7, lr}
 8002b40:	b082      	sub	sp, #8
 8002b42:	af00      	add	r7, sp, #0
 8002b44:	4603      	mov	r3, r0
 8002b46:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002b48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	f7ff ff31 	bl	80029b4 <__NVIC_EnableIRQ>
}
 8002b52:	bf00      	nop
 8002b54:	3708      	adds	r7, #8
 8002b56:	46bd      	mov	sp, r7
 8002b58:	bd80      	pop	{r7, pc}

08002b5a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002b5a:	b580      	push	{r7, lr}
 8002b5c:	b082      	sub	sp, #8
 8002b5e:	af00      	add	r7, sp, #0
 8002b60:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002b62:	6878      	ldr	r0, [r7, #4]
 8002b64:	f7ff ffa2 	bl	8002aac <SysTick_Config>
 8002b68:	4603      	mov	r3, r0
}
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	3708      	adds	r7, #8
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	bd80      	pop	{r7, pc}
	...

08002b74 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b74:	b480      	push	{r7}
 8002b76:	b089      	sub	sp, #36	; 0x24
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
 8002b7c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002b7e:	2300      	movs	r3, #0
 8002b80:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002b82:	2300      	movs	r3, #0
 8002b84:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002b86:	2300      	movs	r3, #0
 8002b88:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002b8e:	2300      	movs	r3, #0
 8002b90:	61fb      	str	r3, [r7, #28]
 8002b92:	e175      	b.n	8002e80 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002b94:	2201      	movs	r2, #1
 8002b96:	69fb      	ldr	r3, [r7, #28]
 8002b98:	fa02 f303 	lsl.w	r3, r2, r3
 8002b9c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002b9e:	683b      	ldr	r3, [r7, #0]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	697a      	ldr	r2, [r7, #20]
 8002ba4:	4013      	ands	r3, r2
 8002ba6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002ba8:	693a      	ldr	r2, [r7, #16]
 8002baa:	697b      	ldr	r3, [r7, #20]
 8002bac:	429a      	cmp	r2, r3
 8002bae:	f040 8164 	bne.w	8002e7a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002bb2:	683b      	ldr	r3, [r7, #0]
 8002bb4:	685b      	ldr	r3, [r3, #4]
 8002bb6:	f003 0303 	and.w	r3, r3, #3
 8002bba:	2b01      	cmp	r3, #1
 8002bbc:	d005      	beq.n	8002bca <HAL_GPIO_Init+0x56>
 8002bbe:	683b      	ldr	r3, [r7, #0]
 8002bc0:	685b      	ldr	r3, [r3, #4]
 8002bc2:	f003 0303 	and.w	r3, r3, #3
 8002bc6:	2b02      	cmp	r3, #2
 8002bc8:	d130      	bne.n	8002c2c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	689b      	ldr	r3, [r3, #8]
 8002bce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002bd0:	69fb      	ldr	r3, [r7, #28]
 8002bd2:	005b      	lsls	r3, r3, #1
 8002bd4:	2203      	movs	r2, #3
 8002bd6:	fa02 f303 	lsl.w	r3, r2, r3
 8002bda:	43db      	mvns	r3, r3
 8002bdc:	69ba      	ldr	r2, [r7, #24]
 8002bde:	4013      	ands	r3, r2
 8002be0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002be2:	683b      	ldr	r3, [r7, #0]
 8002be4:	68da      	ldr	r2, [r3, #12]
 8002be6:	69fb      	ldr	r3, [r7, #28]
 8002be8:	005b      	lsls	r3, r3, #1
 8002bea:	fa02 f303 	lsl.w	r3, r2, r3
 8002bee:	69ba      	ldr	r2, [r7, #24]
 8002bf0:	4313      	orrs	r3, r2
 8002bf2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	69ba      	ldr	r2, [r7, #24]
 8002bf8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	685b      	ldr	r3, [r3, #4]
 8002bfe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002c00:	2201      	movs	r2, #1
 8002c02:	69fb      	ldr	r3, [r7, #28]
 8002c04:	fa02 f303 	lsl.w	r3, r2, r3
 8002c08:	43db      	mvns	r3, r3
 8002c0a:	69ba      	ldr	r2, [r7, #24]
 8002c0c:	4013      	ands	r3, r2
 8002c0e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	685b      	ldr	r3, [r3, #4]
 8002c14:	091b      	lsrs	r3, r3, #4
 8002c16:	f003 0201 	and.w	r2, r3, #1
 8002c1a:	69fb      	ldr	r3, [r7, #28]
 8002c1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c20:	69ba      	ldr	r2, [r7, #24]
 8002c22:	4313      	orrs	r3, r2
 8002c24:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	69ba      	ldr	r2, [r7, #24]
 8002c2a:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	685b      	ldr	r3, [r3, #4]
 8002c30:	f003 0303 	and.w	r3, r3, #3
 8002c34:	2b03      	cmp	r3, #3
 8002c36:	d017      	beq.n	8002c68 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	68db      	ldr	r3, [r3, #12]
 8002c3c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002c3e:	69fb      	ldr	r3, [r7, #28]
 8002c40:	005b      	lsls	r3, r3, #1
 8002c42:	2203      	movs	r2, #3
 8002c44:	fa02 f303 	lsl.w	r3, r2, r3
 8002c48:	43db      	mvns	r3, r3
 8002c4a:	69ba      	ldr	r2, [r7, #24]
 8002c4c:	4013      	ands	r3, r2
 8002c4e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	689a      	ldr	r2, [r3, #8]
 8002c54:	69fb      	ldr	r3, [r7, #28]
 8002c56:	005b      	lsls	r3, r3, #1
 8002c58:	fa02 f303 	lsl.w	r3, r2, r3
 8002c5c:	69ba      	ldr	r2, [r7, #24]
 8002c5e:	4313      	orrs	r3, r2
 8002c60:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	69ba      	ldr	r2, [r7, #24]
 8002c66:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	685b      	ldr	r3, [r3, #4]
 8002c6c:	f003 0303 	and.w	r3, r3, #3
 8002c70:	2b02      	cmp	r3, #2
 8002c72:	d123      	bne.n	8002cbc <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002c74:	69fb      	ldr	r3, [r7, #28]
 8002c76:	08da      	lsrs	r2, r3, #3
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	3208      	adds	r2, #8
 8002c7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c80:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002c82:	69fb      	ldr	r3, [r7, #28]
 8002c84:	f003 0307 	and.w	r3, r3, #7
 8002c88:	009b      	lsls	r3, r3, #2
 8002c8a:	220f      	movs	r2, #15
 8002c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c90:	43db      	mvns	r3, r3
 8002c92:	69ba      	ldr	r2, [r7, #24]
 8002c94:	4013      	ands	r3, r2
 8002c96:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	691a      	ldr	r2, [r3, #16]
 8002c9c:	69fb      	ldr	r3, [r7, #28]
 8002c9e:	f003 0307 	and.w	r3, r3, #7
 8002ca2:	009b      	lsls	r3, r3, #2
 8002ca4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ca8:	69ba      	ldr	r2, [r7, #24]
 8002caa:	4313      	orrs	r3, r2
 8002cac:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002cae:	69fb      	ldr	r3, [r7, #28]
 8002cb0:	08da      	lsrs	r2, r3, #3
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	3208      	adds	r2, #8
 8002cb6:	69b9      	ldr	r1, [r7, #24]
 8002cb8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002cc2:	69fb      	ldr	r3, [r7, #28]
 8002cc4:	005b      	lsls	r3, r3, #1
 8002cc6:	2203      	movs	r2, #3
 8002cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8002ccc:	43db      	mvns	r3, r3
 8002cce:	69ba      	ldr	r2, [r7, #24]
 8002cd0:	4013      	ands	r3, r2
 8002cd2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	685b      	ldr	r3, [r3, #4]
 8002cd8:	f003 0203 	and.w	r2, r3, #3
 8002cdc:	69fb      	ldr	r3, [r7, #28]
 8002cde:	005b      	lsls	r3, r3, #1
 8002ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ce4:	69ba      	ldr	r2, [r7, #24]
 8002ce6:	4313      	orrs	r3, r2
 8002ce8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	69ba      	ldr	r2, [r7, #24]
 8002cee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	685b      	ldr	r3, [r3, #4]
 8002cf4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	f000 80be 	beq.w	8002e7a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002cfe:	4b66      	ldr	r3, [pc, #408]	; (8002e98 <HAL_GPIO_Init+0x324>)
 8002d00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d02:	4a65      	ldr	r2, [pc, #404]	; (8002e98 <HAL_GPIO_Init+0x324>)
 8002d04:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002d08:	6453      	str	r3, [r2, #68]	; 0x44
 8002d0a:	4b63      	ldr	r3, [pc, #396]	; (8002e98 <HAL_GPIO_Init+0x324>)
 8002d0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d12:	60fb      	str	r3, [r7, #12]
 8002d14:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002d16:	4a61      	ldr	r2, [pc, #388]	; (8002e9c <HAL_GPIO_Init+0x328>)
 8002d18:	69fb      	ldr	r3, [r7, #28]
 8002d1a:	089b      	lsrs	r3, r3, #2
 8002d1c:	3302      	adds	r3, #2
 8002d1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d22:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002d24:	69fb      	ldr	r3, [r7, #28]
 8002d26:	f003 0303 	and.w	r3, r3, #3
 8002d2a:	009b      	lsls	r3, r3, #2
 8002d2c:	220f      	movs	r2, #15
 8002d2e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d32:	43db      	mvns	r3, r3
 8002d34:	69ba      	ldr	r2, [r7, #24]
 8002d36:	4013      	ands	r3, r2
 8002d38:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	4a58      	ldr	r2, [pc, #352]	; (8002ea0 <HAL_GPIO_Init+0x32c>)
 8002d3e:	4293      	cmp	r3, r2
 8002d40:	d037      	beq.n	8002db2 <HAL_GPIO_Init+0x23e>
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	4a57      	ldr	r2, [pc, #348]	; (8002ea4 <HAL_GPIO_Init+0x330>)
 8002d46:	4293      	cmp	r3, r2
 8002d48:	d031      	beq.n	8002dae <HAL_GPIO_Init+0x23a>
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	4a56      	ldr	r2, [pc, #344]	; (8002ea8 <HAL_GPIO_Init+0x334>)
 8002d4e:	4293      	cmp	r3, r2
 8002d50:	d02b      	beq.n	8002daa <HAL_GPIO_Init+0x236>
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	4a55      	ldr	r2, [pc, #340]	; (8002eac <HAL_GPIO_Init+0x338>)
 8002d56:	4293      	cmp	r3, r2
 8002d58:	d025      	beq.n	8002da6 <HAL_GPIO_Init+0x232>
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	4a54      	ldr	r2, [pc, #336]	; (8002eb0 <HAL_GPIO_Init+0x33c>)
 8002d5e:	4293      	cmp	r3, r2
 8002d60:	d01f      	beq.n	8002da2 <HAL_GPIO_Init+0x22e>
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	4a53      	ldr	r2, [pc, #332]	; (8002eb4 <HAL_GPIO_Init+0x340>)
 8002d66:	4293      	cmp	r3, r2
 8002d68:	d019      	beq.n	8002d9e <HAL_GPIO_Init+0x22a>
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	4a52      	ldr	r2, [pc, #328]	; (8002eb8 <HAL_GPIO_Init+0x344>)
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	d013      	beq.n	8002d9a <HAL_GPIO_Init+0x226>
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	4a51      	ldr	r2, [pc, #324]	; (8002ebc <HAL_GPIO_Init+0x348>)
 8002d76:	4293      	cmp	r3, r2
 8002d78:	d00d      	beq.n	8002d96 <HAL_GPIO_Init+0x222>
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	4a50      	ldr	r2, [pc, #320]	; (8002ec0 <HAL_GPIO_Init+0x34c>)
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d007      	beq.n	8002d92 <HAL_GPIO_Init+0x21e>
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	4a4f      	ldr	r2, [pc, #316]	; (8002ec4 <HAL_GPIO_Init+0x350>)
 8002d86:	4293      	cmp	r3, r2
 8002d88:	d101      	bne.n	8002d8e <HAL_GPIO_Init+0x21a>
 8002d8a:	2309      	movs	r3, #9
 8002d8c:	e012      	b.n	8002db4 <HAL_GPIO_Init+0x240>
 8002d8e:	230a      	movs	r3, #10
 8002d90:	e010      	b.n	8002db4 <HAL_GPIO_Init+0x240>
 8002d92:	2308      	movs	r3, #8
 8002d94:	e00e      	b.n	8002db4 <HAL_GPIO_Init+0x240>
 8002d96:	2307      	movs	r3, #7
 8002d98:	e00c      	b.n	8002db4 <HAL_GPIO_Init+0x240>
 8002d9a:	2306      	movs	r3, #6
 8002d9c:	e00a      	b.n	8002db4 <HAL_GPIO_Init+0x240>
 8002d9e:	2305      	movs	r3, #5
 8002da0:	e008      	b.n	8002db4 <HAL_GPIO_Init+0x240>
 8002da2:	2304      	movs	r3, #4
 8002da4:	e006      	b.n	8002db4 <HAL_GPIO_Init+0x240>
 8002da6:	2303      	movs	r3, #3
 8002da8:	e004      	b.n	8002db4 <HAL_GPIO_Init+0x240>
 8002daa:	2302      	movs	r3, #2
 8002dac:	e002      	b.n	8002db4 <HAL_GPIO_Init+0x240>
 8002dae:	2301      	movs	r3, #1
 8002db0:	e000      	b.n	8002db4 <HAL_GPIO_Init+0x240>
 8002db2:	2300      	movs	r3, #0
 8002db4:	69fa      	ldr	r2, [r7, #28]
 8002db6:	f002 0203 	and.w	r2, r2, #3
 8002dba:	0092      	lsls	r2, r2, #2
 8002dbc:	4093      	lsls	r3, r2
 8002dbe:	69ba      	ldr	r2, [r7, #24]
 8002dc0:	4313      	orrs	r3, r2
 8002dc2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002dc4:	4935      	ldr	r1, [pc, #212]	; (8002e9c <HAL_GPIO_Init+0x328>)
 8002dc6:	69fb      	ldr	r3, [r7, #28]
 8002dc8:	089b      	lsrs	r3, r3, #2
 8002dca:	3302      	adds	r3, #2
 8002dcc:	69ba      	ldr	r2, [r7, #24]
 8002dce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002dd2:	4b3d      	ldr	r3, [pc, #244]	; (8002ec8 <HAL_GPIO_Init+0x354>)
 8002dd4:	689b      	ldr	r3, [r3, #8]
 8002dd6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002dd8:	693b      	ldr	r3, [r7, #16]
 8002dda:	43db      	mvns	r3, r3
 8002ddc:	69ba      	ldr	r2, [r7, #24]
 8002dde:	4013      	ands	r3, r2
 8002de0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	685b      	ldr	r3, [r3, #4]
 8002de6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d003      	beq.n	8002df6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002dee:	69ba      	ldr	r2, [r7, #24]
 8002df0:	693b      	ldr	r3, [r7, #16]
 8002df2:	4313      	orrs	r3, r2
 8002df4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002df6:	4a34      	ldr	r2, [pc, #208]	; (8002ec8 <HAL_GPIO_Init+0x354>)
 8002df8:	69bb      	ldr	r3, [r7, #24]
 8002dfa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002dfc:	4b32      	ldr	r3, [pc, #200]	; (8002ec8 <HAL_GPIO_Init+0x354>)
 8002dfe:	68db      	ldr	r3, [r3, #12]
 8002e00:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e02:	693b      	ldr	r3, [r7, #16]
 8002e04:	43db      	mvns	r3, r3
 8002e06:	69ba      	ldr	r2, [r7, #24]
 8002e08:	4013      	ands	r3, r2
 8002e0a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	685b      	ldr	r3, [r3, #4]
 8002e10:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d003      	beq.n	8002e20 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002e18:	69ba      	ldr	r2, [r7, #24]
 8002e1a:	693b      	ldr	r3, [r7, #16]
 8002e1c:	4313      	orrs	r3, r2
 8002e1e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002e20:	4a29      	ldr	r2, [pc, #164]	; (8002ec8 <HAL_GPIO_Init+0x354>)
 8002e22:	69bb      	ldr	r3, [r7, #24]
 8002e24:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002e26:	4b28      	ldr	r3, [pc, #160]	; (8002ec8 <HAL_GPIO_Init+0x354>)
 8002e28:	685b      	ldr	r3, [r3, #4]
 8002e2a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e2c:	693b      	ldr	r3, [r7, #16]
 8002e2e:	43db      	mvns	r3, r3
 8002e30:	69ba      	ldr	r2, [r7, #24]
 8002e32:	4013      	ands	r3, r2
 8002e34:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002e36:	683b      	ldr	r3, [r7, #0]
 8002e38:	685b      	ldr	r3, [r3, #4]
 8002e3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d003      	beq.n	8002e4a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002e42:	69ba      	ldr	r2, [r7, #24]
 8002e44:	693b      	ldr	r3, [r7, #16]
 8002e46:	4313      	orrs	r3, r2
 8002e48:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002e4a:	4a1f      	ldr	r2, [pc, #124]	; (8002ec8 <HAL_GPIO_Init+0x354>)
 8002e4c:	69bb      	ldr	r3, [r7, #24]
 8002e4e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002e50:	4b1d      	ldr	r3, [pc, #116]	; (8002ec8 <HAL_GPIO_Init+0x354>)
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e56:	693b      	ldr	r3, [r7, #16]
 8002e58:	43db      	mvns	r3, r3
 8002e5a:	69ba      	ldr	r2, [r7, #24]
 8002e5c:	4013      	ands	r3, r2
 8002e5e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	685b      	ldr	r3, [r3, #4]
 8002e64:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d003      	beq.n	8002e74 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002e6c:	69ba      	ldr	r2, [r7, #24]
 8002e6e:	693b      	ldr	r3, [r7, #16]
 8002e70:	4313      	orrs	r3, r2
 8002e72:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002e74:	4a14      	ldr	r2, [pc, #80]	; (8002ec8 <HAL_GPIO_Init+0x354>)
 8002e76:	69bb      	ldr	r3, [r7, #24]
 8002e78:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002e7a:	69fb      	ldr	r3, [r7, #28]
 8002e7c:	3301      	adds	r3, #1
 8002e7e:	61fb      	str	r3, [r7, #28]
 8002e80:	69fb      	ldr	r3, [r7, #28]
 8002e82:	2b0f      	cmp	r3, #15
 8002e84:	f67f ae86 	bls.w	8002b94 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002e88:	bf00      	nop
 8002e8a:	bf00      	nop
 8002e8c:	3724      	adds	r7, #36	; 0x24
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e94:	4770      	bx	lr
 8002e96:	bf00      	nop
 8002e98:	40023800 	.word	0x40023800
 8002e9c:	40013800 	.word	0x40013800
 8002ea0:	40020000 	.word	0x40020000
 8002ea4:	40020400 	.word	0x40020400
 8002ea8:	40020800 	.word	0x40020800
 8002eac:	40020c00 	.word	0x40020c00
 8002eb0:	40021000 	.word	0x40021000
 8002eb4:	40021400 	.word	0x40021400
 8002eb8:	40021800 	.word	0x40021800
 8002ebc:	40021c00 	.word	0x40021c00
 8002ec0:	40022000 	.word	0x40022000
 8002ec4:	40022400 	.word	0x40022400
 8002ec8:	40013c00 	.word	0x40013c00

08002ecc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ecc:	b480      	push	{r7}
 8002ece:	b083      	sub	sp, #12
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
 8002ed4:	460b      	mov	r3, r1
 8002ed6:	807b      	strh	r3, [r7, #2]
 8002ed8:	4613      	mov	r3, r2
 8002eda:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002edc:	787b      	ldrb	r3, [r7, #1]
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d003      	beq.n	8002eea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002ee2:	887a      	ldrh	r2, [r7, #2]
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002ee8:	e003      	b.n	8002ef2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002eea:	887b      	ldrh	r3, [r7, #2]
 8002eec:	041a      	lsls	r2, r3, #16
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	619a      	str	r2, [r3, #24]
}
 8002ef2:	bf00      	nop
 8002ef4:	370c      	adds	r7, #12
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efc:	4770      	bx	lr
	...

08002f00 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b082      	sub	sp, #8
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	4603      	mov	r3, r0
 8002f08:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002f0a:	4b08      	ldr	r3, [pc, #32]	; (8002f2c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002f0c:	695a      	ldr	r2, [r3, #20]
 8002f0e:	88fb      	ldrh	r3, [r7, #6]
 8002f10:	4013      	ands	r3, r2
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d006      	beq.n	8002f24 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002f16:	4a05      	ldr	r2, [pc, #20]	; (8002f2c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002f18:	88fb      	ldrh	r3, [r7, #6]
 8002f1a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002f1c:	88fb      	ldrh	r3, [r7, #6]
 8002f1e:	4618      	mov	r0, r3
 8002f20:	f000 f806 	bl	8002f30 <HAL_GPIO_EXTI_Callback>
  }
}
 8002f24:	bf00      	nop
 8002f26:	3708      	adds	r7, #8
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	bd80      	pop	{r7, pc}
 8002f2c:	40013c00 	.word	0x40013c00

08002f30 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002f30:	b480      	push	{r7}
 8002f32:	b083      	sub	sp, #12
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	4603      	mov	r3, r0
 8002f38:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);
  
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002f3a:	bf00      	nop
 8002f3c:	370c      	adds	r7, #12
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f44:	4770      	bx	lr
	...

08002f48 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b082      	sub	sp, #8
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d101      	bne.n	8002f5a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002f56:	2301      	movs	r3, #1
 8002f58:	e07f      	b.n	800305a <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f60:	b2db      	uxtb	r3, r3
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d106      	bne.n	8002f74 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	2200      	movs	r2, #0
 8002f6a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002f6e:	6878      	ldr	r0, [r7, #4]
 8002f70:	f7ff f9be 	bl	80022f0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	2224      	movs	r2, #36	; 0x24
 8002f78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	681a      	ldr	r2, [r3, #0]
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f022 0201 	bic.w	r2, r2, #1
 8002f8a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	685a      	ldr	r2, [r3, #4]
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002f98:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	689a      	ldr	r2, [r3, #8]
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002fa8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	68db      	ldr	r3, [r3, #12]
 8002fae:	2b01      	cmp	r3, #1
 8002fb0:	d107      	bne.n	8002fc2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	689a      	ldr	r2, [r3, #8]
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002fbe:	609a      	str	r2, [r3, #8]
 8002fc0:	e006      	b.n	8002fd0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	689a      	ldr	r2, [r3, #8]
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002fce:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	68db      	ldr	r3, [r3, #12]
 8002fd4:	2b02      	cmp	r3, #2
 8002fd6:	d104      	bne.n	8002fe2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002fe0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	6859      	ldr	r1, [r3, #4]
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681a      	ldr	r2, [r3, #0]
 8002fec:	4b1d      	ldr	r3, [pc, #116]	; (8003064 <HAL_I2C_Init+0x11c>)
 8002fee:	430b      	orrs	r3, r1
 8002ff0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	68da      	ldr	r2, [r3, #12]
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003000:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	691a      	ldr	r2, [r3, #16]
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	695b      	ldr	r3, [r3, #20]
 800300a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	699b      	ldr	r3, [r3, #24]
 8003012:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	430a      	orrs	r2, r1
 800301a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	69d9      	ldr	r1, [r3, #28]
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	6a1a      	ldr	r2, [r3, #32]
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	430a      	orrs	r2, r1
 800302a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	681a      	ldr	r2, [r3, #0]
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f042 0201 	orr.w	r2, r2, #1
 800303a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2200      	movs	r2, #0
 8003040:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	2220      	movs	r2, #32
 8003046:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	2200      	movs	r2, #0
 800304e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2200      	movs	r2, #0
 8003054:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003058:	2300      	movs	r3, #0
}
 800305a:	4618      	mov	r0, r3
 800305c:	3708      	adds	r7, #8
 800305e:	46bd      	mov	sp, r7
 8003060:	bd80      	pop	{r7, pc}
 8003062:	bf00      	nop
 8003064:	02008000 	.word	0x02008000

08003068 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8003068:	b580      	push	{r7, lr}
 800306a:	b088      	sub	sp, #32
 800306c:	af02      	add	r7, sp, #8
 800306e:	60f8      	str	r0, [r7, #12]
 8003070:	607a      	str	r2, [r7, #4]
 8003072:	461a      	mov	r2, r3
 8003074:	460b      	mov	r3, r1
 8003076:	817b      	strh	r3, [r7, #10]
 8003078:	4613      	mov	r3, r2
 800307a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003082:	b2db      	uxtb	r3, r3
 8003084:	2b20      	cmp	r3, #32
 8003086:	f040 80da 	bne.w	800323e <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003090:	2b01      	cmp	r3, #1
 8003092:	d101      	bne.n	8003098 <HAL_I2C_Master_Transmit+0x30>
 8003094:	2302      	movs	r3, #2
 8003096:	e0d3      	b.n	8003240 <HAL_I2C_Master_Transmit+0x1d8>
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	2201      	movs	r2, #1
 800309c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80030a0:	f7ff fc26 	bl	80028f0 <HAL_GetTick>
 80030a4:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80030a6:	697b      	ldr	r3, [r7, #20]
 80030a8:	9300      	str	r3, [sp, #0]
 80030aa:	2319      	movs	r3, #25
 80030ac:	2201      	movs	r2, #1
 80030ae:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80030b2:	68f8      	ldr	r0, [r7, #12]
 80030b4:	f000 fcbc 	bl	8003a30 <I2C_WaitOnFlagUntilTimeout>
 80030b8:	4603      	mov	r3, r0
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d001      	beq.n	80030c2 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80030be:	2301      	movs	r3, #1
 80030c0:	e0be      	b.n	8003240 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	2221      	movs	r2, #33	; 0x21
 80030c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	2210      	movs	r2, #16
 80030ce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	2200      	movs	r2, #0
 80030d6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	687a      	ldr	r2, [r7, #4]
 80030dc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	893a      	ldrh	r2, [r7, #8]
 80030e2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	2200      	movs	r2, #0
 80030e8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030ee:	b29b      	uxth	r3, r3
 80030f0:	2bff      	cmp	r3, #255	; 0xff
 80030f2:	d90e      	bls.n	8003112 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	22ff      	movs	r2, #255	; 0xff
 80030f8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030fe:	b2da      	uxtb	r2, r3
 8003100:	8979      	ldrh	r1, [r7, #10]
 8003102:	4b51      	ldr	r3, [pc, #324]	; (8003248 <HAL_I2C_Master_Transmit+0x1e0>)
 8003104:	9300      	str	r3, [sp, #0]
 8003106:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800310a:	68f8      	ldr	r0, [r7, #12]
 800310c:	f000 fea6 	bl	8003e5c <I2C_TransferConfig>
 8003110:	e06c      	b.n	80031ec <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003116:	b29a      	uxth	r2, r3
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003120:	b2da      	uxtb	r2, r3
 8003122:	8979      	ldrh	r1, [r7, #10]
 8003124:	4b48      	ldr	r3, [pc, #288]	; (8003248 <HAL_I2C_Master_Transmit+0x1e0>)
 8003126:	9300      	str	r3, [sp, #0]
 8003128:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800312c:	68f8      	ldr	r0, [r7, #12]
 800312e:	f000 fe95 	bl	8003e5c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8003132:	e05b      	b.n	80031ec <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003134:	697a      	ldr	r2, [r7, #20]
 8003136:	6a39      	ldr	r1, [r7, #32]
 8003138:	68f8      	ldr	r0, [r7, #12]
 800313a:	f000 fcb9 	bl	8003ab0 <I2C_WaitOnTXISFlagUntilTimeout>
 800313e:	4603      	mov	r3, r0
 8003140:	2b00      	cmp	r3, #0
 8003142:	d001      	beq.n	8003148 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8003144:	2301      	movs	r3, #1
 8003146:	e07b      	b.n	8003240 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800314c:	781a      	ldrb	r2, [r3, #0]
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003158:	1c5a      	adds	r2, r3, #1
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003162:	b29b      	uxth	r3, r3
 8003164:	3b01      	subs	r3, #1
 8003166:	b29a      	uxth	r2, r3
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003170:	3b01      	subs	r3, #1
 8003172:	b29a      	uxth	r2, r3
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800317c:	b29b      	uxth	r3, r3
 800317e:	2b00      	cmp	r3, #0
 8003180:	d034      	beq.n	80031ec <HAL_I2C_Master_Transmit+0x184>
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003186:	2b00      	cmp	r3, #0
 8003188:	d130      	bne.n	80031ec <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800318a:	697b      	ldr	r3, [r7, #20]
 800318c:	9300      	str	r3, [sp, #0]
 800318e:	6a3b      	ldr	r3, [r7, #32]
 8003190:	2200      	movs	r2, #0
 8003192:	2180      	movs	r1, #128	; 0x80
 8003194:	68f8      	ldr	r0, [r7, #12]
 8003196:	f000 fc4b 	bl	8003a30 <I2C_WaitOnFlagUntilTimeout>
 800319a:	4603      	mov	r3, r0
 800319c:	2b00      	cmp	r3, #0
 800319e:	d001      	beq.n	80031a4 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 80031a0:	2301      	movs	r3, #1
 80031a2:	e04d      	b.n	8003240 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031a8:	b29b      	uxth	r3, r3
 80031aa:	2bff      	cmp	r3, #255	; 0xff
 80031ac:	d90e      	bls.n	80031cc <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	22ff      	movs	r2, #255	; 0xff
 80031b2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031b8:	b2da      	uxtb	r2, r3
 80031ba:	8979      	ldrh	r1, [r7, #10]
 80031bc:	2300      	movs	r3, #0
 80031be:	9300      	str	r3, [sp, #0]
 80031c0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80031c4:	68f8      	ldr	r0, [r7, #12]
 80031c6:	f000 fe49 	bl	8003e5c <I2C_TransferConfig>
 80031ca:	e00f      	b.n	80031ec <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031d0:	b29a      	uxth	r2, r3
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031da:	b2da      	uxtb	r2, r3
 80031dc:	8979      	ldrh	r1, [r7, #10]
 80031de:	2300      	movs	r3, #0
 80031e0:	9300      	str	r3, [sp, #0]
 80031e2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80031e6:	68f8      	ldr	r0, [r7, #12]
 80031e8:	f000 fe38 	bl	8003e5c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031f0:	b29b      	uxth	r3, r3
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d19e      	bne.n	8003134 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80031f6:	697a      	ldr	r2, [r7, #20]
 80031f8:	6a39      	ldr	r1, [r7, #32]
 80031fa:	68f8      	ldr	r0, [r7, #12]
 80031fc:	f000 fc98 	bl	8003b30 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003200:	4603      	mov	r3, r0
 8003202:	2b00      	cmp	r3, #0
 8003204:	d001      	beq.n	800320a <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8003206:	2301      	movs	r3, #1
 8003208:	e01a      	b.n	8003240 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	2220      	movs	r2, #32
 8003210:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	6859      	ldr	r1, [r3, #4]
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	681a      	ldr	r2, [r3, #0]
 800321c:	4b0b      	ldr	r3, [pc, #44]	; (800324c <HAL_I2C_Master_Transmit+0x1e4>)
 800321e:	400b      	ands	r3, r1
 8003220:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	2220      	movs	r2, #32
 8003226:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	2200      	movs	r2, #0
 800322e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	2200      	movs	r2, #0
 8003236:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800323a:	2300      	movs	r3, #0
 800323c:	e000      	b.n	8003240 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 800323e:	2302      	movs	r3, #2
  }
}
 8003240:	4618      	mov	r0, r3
 8003242:	3718      	adds	r7, #24
 8003244:	46bd      	mov	sp, r7
 8003246:	bd80      	pop	{r7, pc}
 8003248:	80002000 	.word	0x80002000
 800324c:	fe00e800 	.word	0xfe00e800

08003250 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8003250:	b580      	push	{r7, lr}
 8003252:	b088      	sub	sp, #32
 8003254:	af02      	add	r7, sp, #8
 8003256:	60f8      	str	r0, [r7, #12]
 8003258:	607a      	str	r2, [r7, #4]
 800325a:	461a      	mov	r2, r3
 800325c:	460b      	mov	r3, r1
 800325e:	817b      	strh	r3, [r7, #10]
 8003260:	4613      	mov	r3, r2
 8003262:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800326a:	b2db      	uxtb	r3, r3
 800326c:	2b20      	cmp	r3, #32
 800326e:	f040 80db 	bne.w	8003428 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003278:	2b01      	cmp	r3, #1
 800327a:	d101      	bne.n	8003280 <HAL_I2C_Master_Receive+0x30>
 800327c:	2302      	movs	r3, #2
 800327e:	e0d4      	b.n	800342a <HAL_I2C_Master_Receive+0x1da>
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	2201      	movs	r2, #1
 8003284:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003288:	f7ff fb32 	bl	80028f0 <HAL_GetTick>
 800328c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800328e:	697b      	ldr	r3, [r7, #20]
 8003290:	9300      	str	r3, [sp, #0]
 8003292:	2319      	movs	r3, #25
 8003294:	2201      	movs	r2, #1
 8003296:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800329a:	68f8      	ldr	r0, [r7, #12]
 800329c:	f000 fbc8 	bl	8003a30 <I2C_WaitOnFlagUntilTimeout>
 80032a0:	4603      	mov	r3, r0
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d001      	beq.n	80032aa <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 80032a6:	2301      	movs	r3, #1
 80032a8:	e0bf      	b.n	800342a <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	2222      	movs	r2, #34	; 0x22
 80032ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	2210      	movs	r2, #16
 80032b6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	2200      	movs	r2, #0
 80032be:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	687a      	ldr	r2, [r7, #4]
 80032c4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	893a      	ldrh	r2, [r7, #8]
 80032ca:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	2200      	movs	r2, #0
 80032d0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032d6:	b29b      	uxth	r3, r3
 80032d8:	2bff      	cmp	r3, #255	; 0xff
 80032da:	d90e      	bls.n	80032fa <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	22ff      	movs	r2, #255	; 0xff
 80032e0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032e6:	b2da      	uxtb	r2, r3
 80032e8:	8979      	ldrh	r1, [r7, #10]
 80032ea:	4b52      	ldr	r3, [pc, #328]	; (8003434 <HAL_I2C_Master_Receive+0x1e4>)
 80032ec:	9300      	str	r3, [sp, #0]
 80032ee:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80032f2:	68f8      	ldr	r0, [r7, #12]
 80032f4:	f000 fdb2 	bl	8003e5c <I2C_TransferConfig>
 80032f8:	e06d      	b.n	80033d6 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032fe:	b29a      	uxth	r2, r3
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003308:	b2da      	uxtb	r2, r3
 800330a:	8979      	ldrh	r1, [r7, #10]
 800330c:	4b49      	ldr	r3, [pc, #292]	; (8003434 <HAL_I2C_Master_Receive+0x1e4>)
 800330e:	9300      	str	r3, [sp, #0]
 8003310:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003314:	68f8      	ldr	r0, [r7, #12]
 8003316:	f000 fda1 	bl	8003e5c <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 800331a:	e05c      	b.n	80033d6 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800331c:	697a      	ldr	r2, [r7, #20]
 800331e:	6a39      	ldr	r1, [r7, #32]
 8003320:	68f8      	ldr	r0, [r7, #12]
 8003322:	f000 fc41 	bl	8003ba8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003326:	4603      	mov	r3, r0
 8003328:	2b00      	cmp	r3, #0
 800332a:	d001      	beq.n	8003330 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 800332c:	2301      	movs	r3, #1
 800332e:	e07c      	b.n	800342a <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800333a:	b2d2      	uxtb	r2, r2
 800333c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003342:	1c5a      	adds	r2, r3, #1
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800334c:	3b01      	subs	r3, #1
 800334e:	b29a      	uxth	r2, r3
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003358:	b29b      	uxth	r3, r3
 800335a:	3b01      	subs	r3, #1
 800335c:	b29a      	uxth	r2, r3
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003366:	b29b      	uxth	r3, r3
 8003368:	2b00      	cmp	r3, #0
 800336a:	d034      	beq.n	80033d6 <HAL_I2C_Master_Receive+0x186>
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003370:	2b00      	cmp	r3, #0
 8003372:	d130      	bne.n	80033d6 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003374:	697b      	ldr	r3, [r7, #20]
 8003376:	9300      	str	r3, [sp, #0]
 8003378:	6a3b      	ldr	r3, [r7, #32]
 800337a:	2200      	movs	r2, #0
 800337c:	2180      	movs	r1, #128	; 0x80
 800337e:	68f8      	ldr	r0, [r7, #12]
 8003380:	f000 fb56 	bl	8003a30 <I2C_WaitOnFlagUntilTimeout>
 8003384:	4603      	mov	r3, r0
 8003386:	2b00      	cmp	r3, #0
 8003388:	d001      	beq.n	800338e <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800338a:	2301      	movs	r3, #1
 800338c:	e04d      	b.n	800342a <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003392:	b29b      	uxth	r3, r3
 8003394:	2bff      	cmp	r3, #255	; 0xff
 8003396:	d90e      	bls.n	80033b6 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	22ff      	movs	r2, #255	; 0xff
 800339c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033a2:	b2da      	uxtb	r2, r3
 80033a4:	8979      	ldrh	r1, [r7, #10]
 80033a6:	2300      	movs	r3, #0
 80033a8:	9300      	str	r3, [sp, #0]
 80033aa:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80033ae:	68f8      	ldr	r0, [r7, #12]
 80033b0:	f000 fd54 	bl	8003e5c <I2C_TransferConfig>
 80033b4:	e00f      	b.n	80033d6 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033ba:	b29a      	uxth	r2, r3
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033c4:	b2da      	uxtb	r2, r3
 80033c6:	8979      	ldrh	r1, [r7, #10]
 80033c8:	2300      	movs	r3, #0
 80033ca:	9300      	str	r3, [sp, #0]
 80033cc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80033d0:	68f8      	ldr	r0, [r7, #12]
 80033d2:	f000 fd43 	bl	8003e5c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033da:	b29b      	uxth	r3, r3
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d19d      	bne.n	800331c <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80033e0:	697a      	ldr	r2, [r7, #20]
 80033e2:	6a39      	ldr	r1, [r7, #32]
 80033e4:	68f8      	ldr	r0, [r7, #12]
 80033e6:	f000 fba3 	bl	8003b30 <I2C_WaitOnSTOPFlagUntilTimeout>
 80033ea:	4603      	mov	r3, r0
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d001      	beq.n	80033f4 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 80033f0:	2301      	movs	r3, #1
 80033f2:	e01a      	b.n	800342a <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	2220      	movs	r2, #32
 80033fa:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	6859      	ldr	r1, [r3, #4]
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	681a      	ldr	r2, [r3, #0]
 8003406:	4b0c      	ldr	r3, [pc, #48]	; (8003438 <HAL_I2C_Master_Receive+0x1e8>)
 8003408:	400b      	ands	r3, r1
 800340a:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	2220      	movs	r2, #32
 8003410:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	2200      	movs	r2, #0
 8003418:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	2200      	movs	r2, #0
 8003420:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003424:	2300      	movs	r3, #0
 8003426:	e000      	b.n	800342a <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8003428:	2302      	movs	r3, #2
  }
}
 800342a:	4618      	mov	r0, r3
 800342c:	3718      	adds	r7, #24
 800342e:	46bd      	mov	sp, r7
 8003430:	bd80      	pop	{r7, pc}
 8003432:	bf00      	nop
 8003434:	80002400 	.word	0x80002400
 8003438:	fe00e800 	.word	0xfe00e800

0800343c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800343c:	b580      	push	{r7, lr}
 800343e:	b088      	sub	sp, #32
 8003440:	af02      	add	r7, sp, #8
 8003442:	60f8      	str	r0, [r7, #12]
 8003444:	4608      	mov	r0, r1
 8003446:	4611      	mov	r1, r2
 8003448:	461a      	mov	r2, r3
 800344a:	4603      	mov	r3, r0
 800344c:	817b      	strh	r3, [r7, #10]
 800344e:	460b      	mov	r3, r1
 8003450:	813b      	strh	r3, [r7, #8]
 8003452:	4613      	mov	r3, r2
 8003454:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800345c:	b2db      	uxtb	r3, r3
 800345e:	2b20      	cmp	r3, #32
 8003460:	f040 80f9 	bne.w	8003656 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003464:	6a3b      	ldr	r3, [r7, #32]
 8003466:	2b00      	cmp	r3, #0
 8003468:	d002      	beq.n	8003470 <HAL_I2C_Mem_Write+0x34>
 800346a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800346c:	2b00      	cmp	r3, #0
 800346e:	d105      	bne.n	800347c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003476:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003478:	2301      	movs	r3, #1
 800347a:	e0ed      	b.n	8003658 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003482:	2b01      	cmp	r3, #1
 8003484:	d101      	bne.n	800348a <HAL_I2C_Mem_Write+0x4e>
 8003486:	2302      	movs	r3, #2
 8003488:	e0e6      	b.n	8003658 <HAL_I2C_Mem_Write+0x21c>
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	2201      	movs	r2, #1
 800348e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003492:	f7ff fa2d 	bl	80028f0 <HAL_GetTick>
 8003496:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003498:	697b      	ldr	r3, [r7, #20]
 800349a:	9300      	str	r3, [sp, #0]
 800349c:	2319      	movs	r3, #25
 800349e:	2201      	movs	r2, #1
 80034a0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80034a4:	68f8      	ldr	r0, [r7, #12]
 80034a6:	f000 fac3 	bl	8003a30 <I2C_WaitOnFlagUntilTimeout>
 80034aa:	4603      	mov	r3, r0
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d001      	beq.n	80034b4 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80034b0:	2301      	movs	r3, #1
 80034b2:	e0d1      	b.n	8003658 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	2221      	movs	r2, #33	; 0x21
 80034b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	2240      	movs	r2, #64	; 0x40
 80034c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	2200      	movs	r2, #0
 80034c8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	6a3a      	ldr	r2, [r7, #32]
 80034ce:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80034d4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	2200      	movs	r2, #0
 80034da:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80034dc:	88f8      	ldrh	r0, [r7, #6]
 80034de:	893a      	ldrh	r2, [r7, #8]
 80034e0:	8979      	ldrh	r1, [r7, #10]
 80034e2:	697b      	ldr	r3, [r7, #20]
 80034e4:	9301      	str	r3, [sp, #4]
 80034e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034e8:	9300      	str	r3, [sp, #0]
 80034ea:	4603      	mov	r3, r0
 80034ec:	68f8      	ldr	r0, [r7, #12]
 80034ee:	f000 f9d3 	bl	8003898 <I2C_RequestMemoryWrite>
 80034f2:	4603      	mov	r3, r0
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d005      	beq.n	8003504 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	2200      	movs	r2, #0
 80034fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003500:	2301      	movs	r3, #1
 8003502:	e0a9      	b.n	8003658 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003508:	b29b      	uxth	r3, r3
 800350a:	2bff      	cmp	r3, #255	; 0xff
 800350c:	d90e      	bls.n	800352c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	22ff      	movs	r2, #255	; 0xff
 8003512:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003518:	b2da      	uxtb	r2, r3
 800351a:	8979      	ldrh	r1, [r7, #10]
 800351c:	2300      	movs	r3, #0
 800351e:	9300      	str	r3, [sp, #0]
 8003520:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003524:	68f8      	ldr	r0, [r7, #12]
 8003526:	f000 fc99 	bl	8003e5c <I2C_TransferConfig>
 800352a:	e00f      	b.n	800354c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003530:	b29a      	uxth	r2, r3
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800353a:	b2da      	uxtb	r2, r3
 800353c:	8979      	ldrh	r1, [r7, #10]
 800353e:	2300      	movs	r3, #0
 8003540:	9300      	str	r3, [sp, #0]
 8003542:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003546:	68f8      	ldr	r0, [r7, #12]
 8003548:	f000 fc88 	bl	8003e5c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800354c:	697a      	ldr	r2, [r7, #20]
 800354e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003550:	68f8      	ldr	r0, [r7, #12]
 8003552:	f000 faad 	bl	8003ab0 <I2C_WaitOnTXISFlagUntilTimeout>
 8003556:	4603      	mov	r3, r0
 8003558:	2b00      	cmp	r3, #0
 800355a:	d001      	beq.n	8003560 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800355c:	2301      	movs	r3, #1
 800355e:	e07b      	b.n	8003658 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003564:	781a      	ldrb	r2, [r3, #0]
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003570:	1c5a      	adds	r2, r3, #1
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800357a:	b29b      	uxth	r3, r3
 800357c:	3b01      	subs	r3, #1
 800357e:	b29a      	uxth	r2, r3
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003588:	3b01      	subs	r3, #1
 800358a:	b29a      	uxth	r2, r3
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003594:	b29b      	uxth	r3, r3
 8003596:	2b00      	cmp	r3, #0
 8003598:	d034      	beq.n	8003604 <HAL_I2C_Mem_Write+0x1c8>
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d130      	bne.n	8003604 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80035a2:	697b      	ldr	r3, [r7, #20]
 80035a4:	9300      	str	r3, [sp, #0]
 80035a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035a8:	2200      	movs	r2, #0
 80035aa:	2180      	movs	r1, #128	; 0x80
 80035ac:	68f8      	ldr	r0, [r7, #12]
 80035ae:	f000 fa3f 	bl	8003a30 <I2C_WaitOnFlagUntilTimeout>
 80035b2:	4603      	mov	r3, r0
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d001      	beq.n	80035bc <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80035b8:	2301      	movs	r3, #1
 80035ba:	e04d      	b.n	8003658 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035c0:	b29b      	uxth	r3, r3
 80035c2:	2bff      	cmp	r3, #255	; 0xff
 80035c4:	d90e      	bls.n	80035e4 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	22ff      	movs	r2, #255	; 0xff
 80035ca:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035d0:	b2da      	uxtb	r2, r3
 80035d2:	8979      	ldrh	r1, [r7, #10]
 80035d4:	2300      	movs	r3, #0
 80035d6:	9300      	str	r3, [sp, #0]
 80035d8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80035dc:	68f8      	ldr	r0, [r7, #12]
 80035de:	f000 fc3d 	bl	8003e5c <I2C_TransferConfig>
 80035e2:	e00f      	b.n	8003604 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035e8:	b29a      	uxth	r2, r3
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035f2:	b2da      	uxtb	r2, r3
 80035f4:	8979      	ldrh	r1, [r7, #10]
 80035f6:	2300      	movs	r3, #0
 80035f8:	9300      	str	r3, [sp, #0]
 80035fa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80035fe:	68f8      	ldr	r0, [r7, #12]
 8003600:	f000 fc2c 	bl	8003e5c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003608:	b29b      	uxth	r3, r3
 800360a:	2b00      	cmp	r3, #0
 800360c:	d19e      	bne.n	800354c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800360e:	697a      	ldr	r2, [r7, #20]
 8003610:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003612:	68f8      	ldr	r0, [r7, #12]
 8003614:	f000 fa8c 	bl	8003b30 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003618:	4603      	mov	r3, r0
 800361a:	2b00      	cmp	r3, #0
 800361c:	d001      	beq.n	8003622 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800361e:	2301      	movs	r3, #1
 8003620:	e01a      	b.n	8003658 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	2220      	movs	r2, #32
 8003628:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	6859      	ldr	r1, [r3, #4]
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	681a      	ldr	r2, [r3, #0]
 8003634:	4b0a      	ldr	r3, [pc, #40]	; (8003660 <HAL_I2C_Mem_Write+0x224>)
 8003636:	400b      	ands	r3, r1
 8003638:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	2220      	movs	r2, #32
 800363e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	2200      	movs	r2, #0
 8003646:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	2200      	movs	r2, #0
 800364e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003652:	2300      	movs	r3, #0
 8003654:	e000      	b.n	8003658 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8003656:	2302      	movs	r3, #2
  }
}
 8003658:	4618      	mov	r0, r3
 800365a:	3718      	adds	r7, #24
 800365c:	46bd      	mov	sp, r7
 800365e:	bd80      	pop	{r7, pc}
 8003660:	fe00e800 	.word	0xfe00e800

08003664 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003664:	b580      	push	{r7, lr}
 8003666:	b088      	sub	sp, #32
 8003668:	af02      	add	r7, sp, #8
 800366a:	60f8      	str	r0, [r7, #12]
 800366c:	4608      	mov	r0, r1
 800366e:	4611      	mov	r1, r2
 8003670:	461a      	mov	r2, r3
 8003672:	4603      	mov	r3, r0
 8003674:	817b      	strh	r3, [r7, #10]
 8003676:	460b      	mov	r3, r1
 8003678:	813b      	strh	r3, [r7, #8]
 800367a:	4613      	mov	r3, r2
 800367c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003684:	b2db      	uxtb	r3, r3
 8003686:	2b20      	cmp	r3, #32
 8003688:	f040 80fd 	bne.w	8003886 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800368c:	6a3b      	ldr	r3, [r7, #32]
 800368e:	2b00      	cmp	r3, #0
 8003690:	d002      	beq.n	8003698 <HAL_I2C_Mem_Read+0x34>
 8003692:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003694:	2b00      	cmp	r3, #0
 8003696:	d105      	bne.n	80036a4 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800369e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80036a0:	2301      	movs	r3, #1
 80036a2:	e0f1      	b.n	8003888 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80036aa:	2b01      	cmp	r3, #1
 80036ac:	d101      	bne.n	80036b2 <HAL_I2C_Mem_Read+0x4e>
 80036ae:	2302      	movs	r3, #2
 80036b0:	e0ea      	b.n	8003888 <HAL_I2C_Mem_Read+0x224>
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	2201      	movs	r2, #1
 80036b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80036ba:	f7ff f919 	bl	80028f0 <HAL_GetTick>
 80036be:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80036c0:	697b      	ldr	r3, [r7, #20]
 80036c2:	9300      	str	r3, [sp, #0]
 80036c4:	2319      	movs	r3, #25
 80036c6:	2201      	movs	r2, #1
 80036c8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80036cc:	68f8      	ldr	r0, [r7, #12]
 80036ce:	f000 f9af 	bl	8003a30 <I2C_WaitOnFlagUntilTimeout>
 80036d2:	4603      	mov	r3, r0
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d001      	beq.n	80036dc <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80036d8:	2301      	movs	r3, #1
 80036da:	e0d5      	b.n	8003888 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	2222      	movs	r2, #34	; 0x22
 80036e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	2240      	movs	r2, #64	; 0x40
 80036e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	2200      	movs	r2, #0
 80036f0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	6a3a      	ldr	r2, [r7, #32]
 80036f6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80036fc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	2200      	movs	r2, #0
 8003702:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003704:	88f8      	ldrh	r0, [r7, #6]
 8003706:	893a      	ldrh	r2, [r7, #8]
 8003708:	8979      	ldrh	r1, [r7, #10]
 800370a:	697b      	ldr	r3, [r7, #20]
 800370c:	9301      	str	r3, [sp, #4]
 800370e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003710:	9300      	str	r3, [sp, #0]
 8003712:	4603      	mov	r3, r0
 8003714:	68f8      	ldr	r0, [r7, #12]
 8003716:	f000 f913 	bl	8003940 <I2C_RequestMemoryRead>
 800371a:	4603      	mov	r3, r0
 800371c:	2b00      	cmp	r3, #0
 800371e:	d005      	beq.n	800372c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	2200      	movs	r2, #0
 8003724:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003728:	2301      	movs	r3, #1
 800372a:	e0ad      	b.n	8003888 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003730:	b29b      	uxth	r3, r3
 8003732:	2bff      	cmp	r3, #255	; 0xff
 8003734:	d90e      	bls.n	8003754 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	22ff      	movs	r2, #255	; 0xff
 800373a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003740:	b2da      	uxtb	r2, r3
 8003742:	8979      	ldrh	r1, [r7, #10]
 8003744:	4b52      	ldr	r3, [pc, #328]	; (8003890 <HAL_I2C_Mem_Read+0x22c>)
 8003746:	9300      	str	r3, [sp, #0]
 8003748:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800374c:	68f8      	ldr	r0, [r7, #12]
 800374e:	f000 fb85 	bl	8003e5c <I2C_TransferConfig>
 8003752:	e00f      	b.n	8003774 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003758:	b29a      	uxth	r2, r3
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003762:	b2da      	uxtb	r2, r3
 8003764:	8979      	ldrh	r1, [r7, #10]
 8003766:	4b4a      	ldr	r3, [pc, #296]	; (8003890 <HAL_I2C_Mem_Read+0x22c>)
 8003768:	9300      	str	r3, [sp, #0]
 800376a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800376e:	68f8      	ldr	r0, [r7, #12]
 8003770:	f000 fb74 	bl	8003e5c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8003774:	697b      	ldr	r3, [r7, #20]
 8003776:	9300      	str	r3, [sp, #0]
 8003778:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800377a:	2200      	movs	r2, #0
 800377c:	2104      	movs	r1, #4
 800377e:	68f8      	ldr	r0, [r7, #12]
 8003780:	f000 f956 	bl	8003a30 <I2C_WaitOnFlagUntilTimeout>
 8003784:	4603      	mov	r3, r0
 8003786:	2b00      	cmp	r3, #0
 8003788:	d001      	beq.n	800378e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800378a:	2301      	movs	r3, #1
 800378c:	e07c      	b.n	8003888 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003798:	b2d2      	uxtb	r2, r2
 800379a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037a0:	1c5a      	adds	r2, r3, #1
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037aa:	3b01      	subs	r3, #1
 80037ac:	b29a      	uxth	r2, r3
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037b6:	b29b      	uxth	r3, r3
 80037b8:	3b01      	subs	r3, #1
 80037ba:	b29a      	uxth	r2, r3
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037c4:	b29b      	uxth	r3, r3
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d034      	beq.n	8003834 <HAL_I2C_Mem_Read+0x1d0>
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d130      	bne.n	8003834 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80037d2:	697b      	ldr	r3, [r7, #20]
 80037d4:	9300      	str	r3, [sp, #0]
 80037d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037d8:	2200      	movs	r2, #0
 80037da:	2180      	movs	r1, #128	; 0x80
 80037dc:	68f8      	ldr	r0, [r7, #12]
 80037de:	f000 f927 	bl	8003a30 <I2C_WaitOnFlagUntilTimeout>
 80037e2:	4603      	mov	r3, r0
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d001      	beq.n	80037ec <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80037e8:	2301      	movs	r3, #1
 80037ea:	e04d      	b.n	8003888 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037f0:	b29b      	uxth	r3, r3
 80037f2:	2bff      	cmp	r3, #255	; 0xff
 80037f4:	d90e      	bls.n	8003814 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	22ff      	movs	r2, #255	; 0xff
 80037fa:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003800:	b2da      	uxtb	r2, r3
 8003802:	8979      	ldrh	r1, [r7, #10]
 8003804:	2300      	movs	r3, #0
 8003806:	9300      	str	r3, [sp, #0]
 8003808:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800380c:	68f8      	ldr	r0, [r7, #12]
 800380e:	f000 fb25 	bl	8003e5c <I2C_TransferConfig>
 8003812:	e00f      	b.n	8003834 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003818:	b29a      	uxth	r2, r3
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003822:	b2da      	uxtb	r2, r3
 8003824:	8979      	ldrh	r1, [r7, #10]
 8003826:	2300      	movs	r3, #0
 8003828:	9300      	str	r3, [sp, #0]
 800382a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800382e:	68f8      	ldr	r0, [r7, #12]
 8003830:	f000 fb14 	bl	8003e5c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003838:	b29b      	uxth	r3, r3
 800383a:	2b00      	cmp	r3, #0
 800383c:	d19a      	bne.n	8003774 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800383e:	697a      	ldr	r2, [r7, #20]
 8003840:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003842:	68f8      	ldr	r0, [r7, #12]
 8003844:	f000 f974 	bl	8003b30 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003848:	4603      	mov	r3, r0
 800384a:	2b00      	cmp	r3, #0
 800384c:	d001      	beq.n	8003852 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800384e:	2301      	movs	r3, #1
 8003850:	e01a      	b.n	8003888 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	2220      	movs	r2, #32
 8003858:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	6859      	ldr	r1, [r3, #4]
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	681a      	ldr	r2, [r3, #0]
 8003864:	4b0b      	ldr	r3, [pc, #44]	; (8003894 <HAL_I2C_Mem_Read+0x230>)
 8003866:	400b      	ands	r3, r1
 8003868:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	2220      	movs	r2, #32
 800386e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	2200      	movs	r2, #0
 8003876:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	2200      	movs	r2, #0
 800387e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003882:	2300      	movs	r3, #0
 8003884:	e000      	b.n	8003888 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8003886:	2302      	movs	r3, #2
  }
}
 8003888:	4618      	mov	r0, r3
 800388a:	3718      	adds	r7, #24
 800388c:	46bd      	mov	sp, r7
 800388e:	bd80      	pop	{r7, pc}
 8003890:	80002400 	.word	0x80002400
 8003894:	fe00e800 	.word	0xfe00e800

08003898 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8003898:	b580      	push	{r7, lr}
 800389a:	b086      	sub	sp, #24
 800389c:	af02      	add	r7, sp, #8
 800389e:	60f8      	str	r0, [r7, #12]
 80038a0:	4608      	mov	r0, r1
 80038a2:	4611      	mov	r1, r2
 80038a4:	461a      	mov	r2, r3
 80038a6:	4603      	mov	r3, r0
 80038a8:	817b      	strh	r3, [r7, #10]
 80038aa:	460b      	mov	r3, r1
 80038ac:	813b      	strh	r3, [r7, #8]
 80038ae:	4613      	mov	r3, r2
 80038b0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80038b2:	88fb      	ldrh	r3, [r7, #6]
 80038b4:	b2da      	uxtb	r2, r3
 80038b6:	8979      	ldrh	r1, [r7, #10]
 80038b8:	4b20      	ldr	r3, [pc, #128]	; (800393c <I2C_RequestMemoryWrite+0xa4>)
 80038ba:	9300      	str	r3, [sp, #0]
 80038bc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80038c0:	68f8      	ldr	r0, [r7, #12]
 80038c2:	f000 facb 	bl	8003e5c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80038c6:	69fa      	ldr	r2, [r7, #28]
 80038c8:	69b9      	ldr	r1, [r7, #24]
 80038ca:	68f8      	ldr	r0, [r7, #12]
 80038cc:	f000 f8f0 	bl	8003ab0 <I2C_WaitOnTXISFlagUntilTimeout>
 80038d0:	4603      	mov	r3, r0
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d001      	beq.n	80038da <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80038d6:	2301      	movs	r3, #1
 80038d8:	e02c      	b.n	8003934 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80038da:	88fb      	ldrh	r3, [r7, #6]
 80038dc:	2b01      	cmp	r3, #1
 80038de:	d105      	bne.n	80038ec <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80038e0:	893b      	ldrh	r3, [r7, #8]
 80038e2:	b2da      	uxtb	r2, r3
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	629a      	str	r2, [r3, #40]	; 0x28
 80038ea:	e015      	b.n	8003918 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80038ec:	893b      	ldrh	r3, [r7, #8]
 80038ee:	0a1b      	lsrs	r3, r3, #8
 80038f0:	b29b      	uxth	r3, r3
 80038f2:	b2da      	uxtb	r2, r3
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80038fa:	69fa      	ldr	r2, [r7, #28]
 80038fc:	69b9      	ldr	r1, [r7, #24]
 80038fe:	68f8      	ldr	r0, [r7, #12]
 8003900:	f000 f8d6 	bl	8003ab0 <I2C_WaitOnTXISFlagUntilTimeout>
 8003904:	4603      	mov	r3, r0
 8003906:	2b00      	cmp	r3, #0
 8003908:	d001      	beq.n	800390e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800390a:	2301      	movs	r3, #1
 800390c:	e012      	b.n	8003934 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800390e:	893b      	ldrh	r3, [r7, #8]
 8003910:	b2da      	uxtb	r2, r3
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003918:	69fb      	ldr	r3, [r7, #28]
 800391a:	9300      	str	r3, [sp, #0]
 800391c:	69bb      	ldr	r3, [r7, #24]
 800391e:	2200      	movs	r2, #0
 8003920:	2180      	movs	r1, #128	; 0x80
 8003922:	68f8      	ldr	r0, [r7, #12]
 8003924:	f000 f884 	bl	8003a30 <I2C_WaitOnFlagUntilTimeout>
 8003928:	4603      	mov	r3, r0
 800392a:	2b00      	cmp	r3, #0
 800392c:	d001      	beq.n	8003932 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800392e:	2301      	movs	r3, #1
 8003930:	e000      	b.n	8003934 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8003932:	2300      	movs	r3, #0
}
 8003934:	4618      	mov	r0, r3
 8003936:	3710      	adds	r7, #16
 8003938:	46bd      	mov	sp, r7
 800393a:	bd80      	pop	{r7, pc}
 800393c:	80002000 	.word	0x80002000

08003940 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	b086      	sub	sp, #24
 8003944:	af02      	add	r7, sp, #8
 8003946:	60f8      	str	r0, [r7, #12]
 8003948:	4608      	mov	r0, r1
 800394a:	4611      	mov	r1, r2
 800394c:	461a      	mov	r2, r3
 800394e:	4603      	mov	r3, r0
 8003950:	817b      	strh	r3, [r7, #10]
 8003952:	460b      	mov	r3, r1
 8003954:	813b      	strh	r3, [r7, #8]
 8003956:	4613      	mov	r3, r2
 8003958:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800395a:	88fb      	ldrh	r3, [r7, #6]
 800395c:	b2da      	uxtb	r2, r3
 800395e:	8979      	ldrh	r1, [r7, #10]
 8003960:	4b20      	ldr	r3, [pc, #128]	; (80039e4 <I2C_RequestMemoryRead+0xa4>)
 8003962:	9300      	str	r3, [sp, #0]
 8003964:	2300      	movs	r3, #0
 8003966:	68f8      	ldr	r0, [r7, #12]
 8003968:	f000 fa78 	bl	8003e5c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800396c:	69fa      	ldr	r2, [r7, #28]
 800396e:	69b9      	ldr	r1, [r7, #24]
 8003970:	68f8      	ldr	r0, [r7, #12]
 8003972:	f000 f89d 	bl	8003ab0 <I2C_WaitOnTXISFlagUntilTimeout>
 8003976:	4603      	mov	r3, r0
 8003978:	2b00      	cmp	r3, #0
 800397a:	d001      	beq.n	8003980 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800397c:	2301      	movs	r3, #1
 800397e:	e02c      	b.n	80039da <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003980:	88fb      	ldrh	r3, [r7, #6]
 8003982:	2b01      	cmp	r3, #1
 8003984:	d105      	bne.n	8003992 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003986:	893b      	ldrh	r3, [r7, #8]
 8003988:	b2da      	uxtb	r2, r3
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	629a      	str	r2, [r3, #40]	; 0x28
 8003990:	e015      	b.n	80039be <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003992:	893b      	ldrh	r3, [r7, #8]
 8003994:	0a1b      	lsrs	r3, r3, #8
 8003996:	b29b      	uxth	r3, r3
 8003998:	b2da      	uxtb	r2, r3
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80039a0:	69fa      	ldr	r2, [r7, #28]
 80039a2:	69b9      	ldr	r1, [r7, #24]
 80039a4:	68f8      	ldr	r0, [r7, #12]
 80039a6:	f000 f883 	bl	8003ab0 <I2C_WaitOnTXISFlagUntilTimeout>
 80039aa:	4603      	mov	r3, r0
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d001      	beq.n	80039b4 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80039b0:	2301      	movs	r3, #1
 80039b2:	e012      	b.n	80039da <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80039b4:	893b      	ldrh	r3, [r7, #8]
 80039b6:	b2da      	uxtb	r2, r3
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80039be:	69fb      	ldr	r3, [r7, #28]
 80039c0:	9300      	str	r3, [sp, #0]
 80039c2:	69bb      	ldr	r3, [r7, #24]
 80039c4:	2200      	movs	r2, #0
 80039c6:	2140      	movs	r1, #64	; 0x40
 80039c8:	68f8      	ldr	r0, [r7, #12]
 80039ca:	f000 f831 	bl	8003a30 <I2C_WaitOnFlagUntilTimeout>
 80039ce:	4603      	mov	r3, r0
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d001      	beq.n	80039d8 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80039d4:	2301      	movs	r3, #1
 80039d6:	e000      	b.n	80039da <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80039d8:	2300      	movs	r3, #0
}
 80039da:	4618      	mov	r0, r3
 80039dc:	3710      	adds	r7, #16
 80039de:	46bd      	mov	sp, r7
 80039e0:	bd80      	pop	{r7, pc}
 80039e2:	bf00      	nop
 80039e4:	80002000 	.word	0x80002000

080039e8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80039e8:	b480      	push	{r7}
 80039ea:	b083      	sub	sp, #12
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	699b      	ldr	r3, [r3, #24]
 80039f6:	f003 0302 	and.w	r3, r3, #2
 80039fa:	2b02      	cmp	r3, #2
 80039fc:	d103      	bne.n	8003a06 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	2200      	movs	r2, #0
 8003a04:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	699b      	ldr	r3, [r3, #24]
 8003a0c:	f003 0301 	and.w	r3, r3, #1
 8003a10:	2b01      	cmp	r3, #1
 8003a12:	d007      	beq.n	8003a24 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	699a      	ldr	r2, [r3, #24]
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f042 0201 	orr.w	r2, r2, #1
 8003a22:	619a      	str	r2, [r3, #24]
  }
}
 8003a24:	bf00      	nop
 8003a26:	370c      	adds	r7, #12
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2e:	4770      	bx	lr

08003a30 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003a30:	b580      	push	{r7, lr}
 8003a32:	b084      	sub	sp, #16
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	60f8      	str	r0, [r7, #12]
 8003a38:	60b9      	str	r1, [r7, #8]
 8003a3a:	603b      	str	r3, [r7, #0]
 8003a3c:	4613      	mov	r3, r2
 8003a3e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003a40:	e022      	b.n	8003a88 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a42:	683b      	ldr	r3, [r7, #0]
 8003a44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a48:	d01e      	beq.n	8003a88 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a4a:	f7fe ff51 	bl	80028f0 <HAL_GetTick>
 8003a4e:	4602      	mov	r2, r0
 8003a50:	69bb      	ldr	r3, [r7, #24]
 8003a52:	1ad3      	subs	r3, r2, r3
 8003a54:	683a      	ldr	r2, [r7, #0]
 8003a56:	429a      	cmp	r2, r3
 8003a58:	d302      	bcc.n	8003a60 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003a5a:	683b      	ldr	r3, [r7, #0]
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d113      	bne.n	8003a88 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a64:	f043 0220 	orr.w	r2, r3, #32
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	2220      	movs	r2, #32
 8003a70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	2200      	movs	r2, #0
 8003a78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	2200      	movs	r2, #0
 8003a80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8003a84:	2301      	movs	r3, #1
 8003a86:	e00f      	b.n	8003aa8 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	699a      	ldr	r2, [r3, #24]
 8003a8e:	68bb      	ldr	r3, [r7, #8]
 8003a90:	4013      	ands	r3, r2
 8003a92:	68ba      	ldr	r2, [r7, #8]
 8003a94:	429a      	cmp	r2, r3
 8003a96:	bf0c      	ite	eq
 8003a98:	2301      	moveq	r3, #1
 8003a9a:	2300      	movne	r3, #0
 8003a9c:	b2db      	uxtb	r3, r3
 8003a9e:	461a      	mov	r2, r3
 8003aa0:	79fb      	ldrb	r3, [r7, #7]
 8003aa2:	429a      	cmp	r2, r3
 8003aa4:	d0cd      	beq.n	8003a42 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003aa6:	2300      	movs	r3, #0
}
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	3710      	adds	r7, #16
 8003aac:	46bd      	mov	sp, r7
 8003aae:	bd80      	pop	{r7, pc}

08003ab0 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	b084      	sub	sp, #16
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	60f8      	str	r0, [r7, #12]
 8003ab8:	60b9      	str	r1, [r7, #8]
 8003aba:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003abc:	e02c      	b.n	8003b18 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003abe:	687a      	ldr	r2, [r7, #4]
 8003ac0:	68b9      	ldr	r1, [r7, #8]
 8003ac2:	68f8      	ldr	r0, [r7, #12]
 8003ac4:	f000 f8ea 	bl	8003c9c <I2C_IsErrorOccurred>
 8003ac8:	4603      	mov	r3, r0
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d001      	beq.n	8003ad2 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003ace:	2301      	movs	r3, #1
 8003ad0:	e02a      	b.n	8003b28 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ad2:	68bb      	ldr	r3, [r7, #8]
 8003ad4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ad8:	d01e      	beq.n	8003b18 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ada:	f7fe ff09 	bl	80028f0 <HAL_GetTick>
 8003ade:	4602      	mov	r2, r0
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	1ad3      	subs	r3, r2, r3
 8003ae4:	68ba      	ldr	r2, [r7, #8]
 8003ae6:	429a      	cmp	r2, r3
 8003ae8:	d302      	bcc.n	8003af0 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003aea:	68bb      	ldr	r3, [r7, #8]
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d113      	bne.n	8003b18 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003af4:	f043 0220 	orr.w	r2, r3, #32
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	2220      	movs	r2, #32
 8003b00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	2200      	movs	r2, #0
 8003b08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	2200      	movs	r2, #0
 8003b10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003b14:	2301      	movs	r3, #1
 8003b16:	e007      	b.n	8003b28 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	699b      	ldr	r3, [r3, #24]
 8003b1e:	f003 0302 	and.w	r3, r3, #2
 8003b22:	2b02      	cmp	r3, #2
 8003b24:	d1cb      	bne.n	8003abe <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003b26:	2300      	movs	r3, #0
}
 8003b28:	4618      	mov	r0, r3
 8003b2a:	3710      	adds	r7, #16
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	bd80      	pop	{r7, pc}

08003b30 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003b30:	b580      	push	{r7, lr}
 8003b32:	b084      	sub	sp, #16
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	60f8      	str	r0, [r7, #12]
 8003b38:	60b9      	str	r1, [r7, #8]
 8003b3a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003b3c:	e028      	b.n	8003b90 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b3e:	687a      	ldr	r2, [r7, #4]
 8003b40:	68b9      	ldr	r1, [r7, #8]
 8003b42:	68f8      	ldr	r0, [r7, #12]
 8003b44:	f000 f8aa 	bl	8003c9c <I2C_IsErrorOccurred>
 8003b48:	4603      	mov	r3, r0
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d001      	beq.n	8003b52 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003b4e:	2301      	movs	r3, #1
 8003b50:	e026      	b.n	8003ba0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b52:	f7fe fecd 	bl	80028f0 <HAL_GetTick>
 8003b56:	4602      	mov	r2, r0
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	1ad3      	subs	r3, r2, r3
 8003b5c:	68ba      	ldr	r2, [r7, #8]
 8003b5e:	429a      	cmp	r2, r3
 8003b60:	d302      	bcc.n	8003b68 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003b62:	68bb      	ldr	r3, [r7, #8]
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d113      	bne.n	8003b90 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b6c:	f043 0220 	orr.w	r2, r3, #32
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	2220      	movs	r2, #32
 8003b78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	2200      	movs	r2, #0
 8003b80:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	2200      	movs	r2, #0
 8003b88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003b8c:	2301      	movs	r3, #1
 8003b8e:	e007      	b.n	8003ba0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	699b      	ldr	r3, [r3, #24]
 8003b96:	f003 0320 	and.w	r3, r3, #32
 8003b9a:	2b20      	cmp	r3, #32
 8003b9c:	d1cf      	bne.n	8003b3e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003b9e:	2300      	movs	r3, #0
}
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	3710      	adds	r7, #16
 8003ba4:	46bd      	mov	sp, r7
 8003ba6:	bd80      	pop	{r7, pc}

08003ba8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003ba8:	b580      	push	{r7, lr}
 8003baa:	b084      	sub	sp, #16
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	60f8      	str	r0, [r7, #12]
 8003bb0:	60b9      	str	r1, [r7, #8]
 8003bb2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003bb4:	e064      	b.n	8003c80 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003bb6:	687a      	ldr	r2, [r7, #4]
 8003bb8:	68b9      	ldr	r1, [r7, #8]
 8003bba:	68f8      	ldr	r0, [r7, #12]
 8003bbc:	f000 f86e 	bl	8003c9c <I2C_IsErrorOccurred>
 8003bc0:	4603      	mov	r3, r0
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d001      	beq.n	8003bca <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003bc6:	2301      	movs	r3, #1
 8003bc8:	e062      	b.n	8003c90 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	699b      	ldr	r3, [r3, #24]
 8003bd0:	f003 0320 	and.w	r3, r3, #32
 8003bd4:	2b20      	cmp	r3, #32
 8003bd6:	d138      	bne.n	8003c4a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	699b      	ldr	r3, [r3, #24]
 8003bde:	f003 0304 	and.w	r3, r3, #4
 8003be2:	2b04      	cmp	r3, #4
 8003be4:	d105      	bne.n	8003bf2 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d001      	beq.n	8003bf2 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8003bee:	2300      	movs	r3, #0
 8003bf0:	e04e      	b.n	8003c90 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	699b      	ldr	r3, [r3, #24]
 8003bf8:	f003 0310 	and.w	r3, r3, #16
 8003bfc:	2b10      	cmp	r3, #16
 8003bfe:	d107      	bne.n	8003c10 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	2210      	movs	r2, #16
 8003c06:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	2204      	movs	r2, #4
 8003c0c:	645a      	str	r2, [r3, #68]	; 0x44
 8003c0e:	e002      	b.n	8003c16 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	2200      	movs	r2, #0
 8003c14:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	2220      	movs	r2, #32
 8003c1c:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	6859      	ldr	r1, [r3, #4]
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	681a      	ldr	r2, [r3, #0]
 8003c28:	4b1b      	ldr	r3, [pc, #108]	; (8003c98 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 8003c2a:	400b      	ands	r3, r1
 8003c2c:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	2220      	movs	r2, #32
 8003c32:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	2200      	movs	r2, #0
 8003c3a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	2200      	movs	r2, #0
 8003c42:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003c46:	2301      	movs	r3, #1
 8003c48:	e022      	b.n	8003c90 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c4a:	f7fe fe51 	bl	80028f0 <HAL_GetTick>
 8003c4e:	4602      	mov	r2, r0
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	1ad3      	subs	r3, r2, r3
 8003c54:	68ba      	ldr	r2, [r7, #8]
 8003c56:	429a      	cmp	r2, r3
 8003c58:	d302      	bcc.n	8003c60 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8003c5a:	68bb      	ldr	r3, [r7, #8]
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d10f      	bne.n	8003c80 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c64:	f043 0220 	orr.w	r2, r3, #32
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	2220      	movs	r2, #32
 8003c70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	2200      	movs	r2, #0
 8003c78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003c7c:	2301      	movs	r3, #1
 8003c7e:	e007      	b.n	8003c90 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	699b      	ldr	r3, [r3, #24]
 8003c86:	f003 0304 	and.w	r3, r3, #4
 8003c8a:	2b04      	cmp	r3, #4
 8003c8c:	d193      	bne.n	8003bb6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003c8e:	2300      	movs	r3, #0
}
 8003c90:	4618      	mov	r0, r3
 8003c92:	3710      	adds	r7, #16
 8003c94:	46bd      	mov	sp, r7
 8003c96:	bd80      	pop	{r7, pc}
 8003c98:	fe00e800 	.word	0xfe00e800

08003c9c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	b08a      	sub	sp, #40	; 0x28
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	60f8      	str	r0, [r7, #12]
 8003ca4:	60b9      	str	r1, [r7, #8]
 8003ca6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003ca8:	2300      	movs	r3, #0
 8003caa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	699b      	ldr	r3, [r3, #24]
 8003cb4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003cb6:	2300      	movs	r3, #0
 8003cb8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003cbe:	69bb      	ldr	r3, [r7, #24]
 8003cc0:	f003 0310 	and.w	r3, r3, #16
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d068      	beq.n	8003d9a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	2210      	movs	r2, #16
 8003cce:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003cd0:	e049      	b.n	8003d66 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003cd2:	68bb      	ldr	r3, [r7, #8]
 8003cd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cd8:	d045      	beq.n	8003d66 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003cda:	f7fe fe09 	bl	80028f0 <HAL_GetTick>
 8003cde:	4602      	mov	r2, r0
 8003ce0:	69fb      	ldr	r3, [r7, #28]
 8003ce2:	1ad3      	subs	r3, r2, r3
 8003ce4:	68ba      	ldr	r2, [r7, #8]
 8003ce6:	429a      	cmp	r2, r3
 8003ce8:	d302      	bcc.n	8003cf0 <I2C_IsErrorOccurred+0x54>
 8003cea:	68bb      	ldr	r3, [r7, #8]
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d13a      	bne.n	8003d66 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	685b      	ldr	r3, [r3, #4]
 8003cf6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003cfa:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003d02:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	699b      	ldr	r3, [r3, #24]
 8003d0a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003d0e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d12:	d121      	bne.n	8003d58 <I2C_IsErrorOccurred+0xbc>
 8003d14:	697b      	ldr	r3, [r7, #20]
 8003d16:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003d1a:	d01d      	beq.n	8003d58 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8003d1c:	7cfb      	ldrb	r3, [r7, #19]
 8003d1e:	2b20      	cmp	r3, #32
 8003d20:	d01a      	beq.n	8003d58 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	685a      	ldr	r2, [r3, #4]
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003d30:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003d32:	f7fe fddd 	bl	80028f0 <HAL_GetTick>
 8003d36:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003d38:	e00e      	b.n	8003d58 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003d3a:	f7fe fdd9 	bl	80028f0 <HAL_GetTick>
 8003d3e:	4602      	mov	r2, r0
 8003d40:	69fb      	ldr	r3, [r7, #28]
 8003d42:	1ad3      	subs	r3, r2, r3
 8003d44:	2b19      	cmp	r3, #25
 8003d46:	d907      	bls.n	8003d58 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 8003d48:	6a3b      	ldr	r3, [r7, #32]
 8003d4a:	f043 0320 	orr.w	r3, r3, #32
 8003d4e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003d50:	2301      	movs	r3, #1
 8003d52:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8003d56:	e006      	b.n	8003d66 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	699b      	ldr	r3, [r3, #24]
 8003d5e:	f003 0320 	and.w	r3, r3, #32
 8003d62:	2b20      	cmp	r3, #32
 8003d64:	d1e9      	bne.n	8003d3a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	699b      	ldr	r3, [r3, #24]
 8003d6c:	f003 0320 	and.w	r3, r3, #32
 8003d70:	2b20      	cmp	r3, #32
 8003d72:	d003      	beq.n	8003d7c <I2C_IsErrorOccurred+0xe0>
 8003d74:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d0aa      	beq.n	8003cd2 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003d7c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d103      	bne.n	8003d8c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	2220      	movs	r2, #32
 8003d8a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003d8c:	6a3b      	ldr	r3, [r7, #32]
 8003d8e:	f043 0304 	orr.w	r3, r3, #4
 8003d92:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003d94:	2301      	movs	r3, #1
 8003d96:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	699b      	ldr	r3, [r3, #24]
 8003da0:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003da2:	69bb      	ldr	r3, [r7, #24]
 8003da4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d00b      	beq.n	8003dc4 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003dac:	6a3b      	ldr	r3, [r7, #32]
 8003dae:	f043 0301 	orr.w	r3, r3, #1
 8003db2:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003dbc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003dbe:	2301      	movs	r3, #1
 8003dc0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003dc4:	69bb      	ldr	r3, [r7, #24]
 8003dc6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d00b      	beq.n	8003de6 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003dce:	6a3b      	ldr	r3, [r7, #32]
 8003dd0:	f043 0308 	orr.w	r3, r3, #8
 8003dd4:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003dde:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003de0:	2301      	movs	r3, #1
 8003de2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003de6:	69bb      	ldr	r3, [r7, #24]
 8003de8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d00b      	beq.n	8003e08 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003df0:	6a3b      	ldr	r3, [r7, #32]
 8003df2:	f043 0302 	orr.w	r3, r3, #2
 8003df6:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003e00:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003e02:	2301      	movs	r3, #1
 8003e04:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8003e08:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d01c      	beq.n	8003e4a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003e10:	68f8      	ldr	r0, [r7, #12]
 8003e12:	f7ff fde9 	bl	80039e8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	6859      	ldr	r1, [r3, #4]
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	681a      	ldr	r2, [r3, #0]
 8003e20:	4b0d      	ldr	r3, [pc, #52]	; (8003e58 <I2C_IsErrorOccurred+0x1bc>)
 8003e22:	400b      	ands	r3, r1
 8003e24:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003e2a:	6a3b      	ldr	r3, [r7, #32]
 8003e2c:	431a      	orrs	r2, r3
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	2220      	movs	r2, #32
 8003e36:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	2200      	movs	r2, #0
 8003e46:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8003e4a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8003e4e:	4618      	mov	r0, r3
 8003e50:	3728      	adds	r7, #40	; 0x28
 8003e52:	46bd      	mov	sp, r7
 8003e54:	bd80      	pop	{r7, pc}
 8003e56:	bf00      	nop
 8003e58:	fe00e800 	.word	0xfe00e800

08003e5c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003e5c:	b480      	push	{r7}
 8003e5e:	b087      	sub	sp, #28
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	60f8      	str	r0, [r7, #12]
 8003e64:	607b      	str	r3, [r7, #4]
 8003e66:	460b      	mov	r3, r1
 8003e68:	817b      	strh	r3, [r7, #10]
 8003e6a:	4613      	mov	r3, r2
 8003e6c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003e6e:	897b      	ldrh	r3, [r7, #10]
 8003e70:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003e74:	7a7b      	ldrb	r3, [r7, #9]
 8003e76:	041b      	lsls	r3, r3, #16
 8003e78:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003e7c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003e82:	6a3b      	ldr	r3, [r7, #32]
 8003e84:	4313      	orrs	r3, r2
 8003e86:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003e8a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	685a      	ldr	r2, [r3, #4]
 8003e92:	6a3b      	ldr	r3, [r7, #32]
 8003e94:	0d5b      	lsrs	r3, r3, #21
 8003e96:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8003e9a:	4b08      	ldr	r3, [pc, #32]	; (8003ebc <I2C_TransferConfig+0x60>)
 8003e9c:	430b      	orrs	r3, r1
 8003e9e:	43db      	mvns	r3, r3
 8003ea0:	ea02 0103 	and.w	r1, r2, r3
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	697a      	ldr	r2, [r7, #20]
 8003eaa:	430a      	orrs	r2, r1
 8003eac:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003eae:	bf00      	nop
 8003eb0:	371c      	adds	r7, #28
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb8:	4770      	bx	lr
 8003eba:	bf00      	nop
 8003ebc:	03ff63ff 	.word	0x03ff63ff

08003ec0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003ec0:	b480      	push	{r7}
 8003ec2:	b083      	sub	sp, #12
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	6078      	str	r0, [r7, #4]
 8003ec8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ed0:	b2db      	uxtb	r3, r3
 8003ed2:	2b20      	cmp	r3, #32
 8003ed4:	d138      	bne.n	8003f48 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003edc:	2b01      	cmp	r3, #1
 8003ede:	d101      	bne.n	8003ee4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003ee0:	2302      	movs	r3, #2
 8003ee2:	e032      	b.n	8003f4a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2201      	movs	r2, #1
 8003ee8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2224      	movs	r2, #36	; 0x24
 8003ef0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	681a      	ldr	r2, [r3, #0]
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f022 0201 	bic.w	r2, r2, #1
 8003f02:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	681a      	ldr	r2, [r3, #0]
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003f12:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	6819      	ldr	r1, [r3, #0]
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	683a      	ldr	r2, [r7, #0]
 8003f20:	430a      	orrs	r2, r1
 8003f22:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	681a      	ldr	r2, [r3, #0]
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f042 0201 	orr.w	r2, r2, #1
 8003f32:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2220      	movs	r2, #32
 8003f38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2200      	movs	r2, #0
 8003f40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003f44:	2300      	movs	r3, #0
 8003f46:	e000      	b.n	8003f4a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003f48:	2302      	movs	r3, #2
  }
}
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	370c      	adds	r7, #12
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f54:	4770      	bx	lr

08003f56 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003f56:	b480      	push	{r7}
 8003f58:	b085      	sub	sp, #20
 8003f5a:	af00      	add	r7, sp, #0
 8003f5c:	6078      	str	r0, [r7, #4]
 8003f5e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003f66:	b2db      	uxtb	r3, r3
 8003f68:	2b20      	cmp	r3, #32
 8003f6a:	d139      	bne.n	8003fe0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003f72:	2b01      	cmp	r3, #1
 8003f74:	d101      	bne.n	8003f7a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003f76:	2302      	movs	r3, #2
 8003f78:	e033      	b.n	8003fe2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	2201      	movs	r2, #1
 8003f7e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	2224      	movs	r2, #36	; 0x24
 8003f86:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	681a      	ldr	r2, [r3, #0]
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f022 0201 	bic.w	r2, r2, #1
 8003f98:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003fa8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003faa:	683b      	ldr	r3, [r7, #0]
 8003fac:	021b      	lsls	r3, r3, #8
 8003fae:	68fa      	ldr	r2, [r7, #12]
 8003fb0:	4313      	orrs	r3, r2
 8003fb2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	68fa      	ldr	r2, [r7, #12]
 8003fba:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	681a      	ldr	r2, [r3, #0]
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f042 0201 	orr.w	r2, r2, #1
 8003fca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2220      	movs	r2, #32
 8003fd0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003fdc:	2300      	movs	r3, #0
 8003fde:	e000      	b.n	8003fe2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003fe0:	2302      	movs	r3, #2
  }
}
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	3714      	adds	r7, #20
 8003fe6:	46bd      	mov	sp, r7
 8003fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fec:	4770      	bx	lr
	...

08003ff0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	b086      	sub	sp, #24
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003ff8:	2300      	movs	r3, #0
 8003ffa:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d101      	bne.n	8004006 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8004002:	2301      	movs	r3, #1
 8004004:	e291      	b.n	800452a <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f003 0301 	and.w	r3, r3, #1
 800400e:	2b00      	cmp	r3, #0
 8004010:	f000 8087 	beq.w	8004122 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004014:	4b96      	ldr	r3, [pc, #600]	; (8004270 <HAL_RCC_OscConfig+0x280>)
 8004016:	689b      	ldr	r3, [r3, #8]
 8004018:	f003 030c 	and.w	r3, r3, #12
 800401c:	2b04      	cmp	r3, #4
 800401e:	d00c      	beq.n	800403a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004020:	4b93      	ldr	r3, [pc, #588]	; (8004270 <HAL_RCC_OscConfig+0x280>)
 8004022:	689b      	ldr	r3, [r3, #8]
 8004024:	f003 030c 	and.w	r3, r3, #12
 8004028:	2b08      	cmp	r3, #8
 800402a:	d112      	bne.n	8004052 <HAL_RCC_OscConfig+0x62>
 800402c:	4b90      	ldr	r3, [pc, #576]	; (8004270 <HAL_RCC_OscConfig+0x280>)
 800402e:	685b      	ldr	r3, [r3, #4]
 8004030:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004034:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004038:	d10b      	bne.n	8004052 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800403a:	4b8d      	ldr	r3, [pc, #564]	; (8004270 <HAL_RCC_OscConfig+0x280>)
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004042:	2b00      	cmp	r3, #0
 8004044:	d06c      	beq.n	8004120 <HAL_RCC_OscConfig+0x130>
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	685b      	ldr	r3, [r3, #4]
 800404a:	2b00      	cmp	r3, #0
 800404c:	d168      	bne.n	8004120 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800404e:	2301      	movs	r3, #1
 8004050:	e26b      	b.n	800452a <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	685b      	ldr	r3, [r3, #4]
 8004056:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800405a:	d106      	bne.n	800406a <HAL_RCC_OscConfig+0x7a>
 800405c:	4b84      	ldr	r3, [pc, #528]	; (8004270 <HAL_RCC_OscConfig+0x280>)
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	4a83      	ldr	r2, [pc, #524]	; (8004270 <HAL_RCC_OscConfig+0x280>)
 8004062:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004066:	6013      	str	r3, [r2, #0]
 8004068:	e02e      	b.n	80040c8 <HAL_RCC_OscConfig+0xd8>
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	685b      	ldr	r3, [r3, #4]
 800406e:	2b00      	cmp	r3, #0
 8004070:	d10c      	bne.n	800408c <HAL_RCC_OscConfig+0x9c>
 8004072:	4b7f      	ldr	r3, [pc, #508]	; (8004270 <HAL_RCC_OscConfig+0x280>)
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	4a7e      	ldr	r2, [pc, #504]	; (8004270 <HAL_RCC_OscConfig+0x280>)
 8004078:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800407c:	6013      	str	r3, [r2, #0]
 800407e:	4b7c      	ldr	r3, [pc, #496]	; (8004270 <HAL_RCC_OscConfig+0x280>)
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	4a7b      	ldr	r2, [pc, #492]	; (8004270 <HAL_RCC_OscConfig+0x280>)
 8004084:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004088:	6013      	str	r3, [r2, #0]
 800408a:	e01d      	b.n	80040c8 <HAL_RCC_OscConfig+0xd8>
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	685b      	ldr	r3, [r3, #4]
 8004090:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004094:	d10c      	bne.n	80040b0 <HAL_RCC_OscConfig+0xc0>
 8004096:	4b76      	ldr	r3, [pc, #472]	; (8004270 <HAL_RCC_OscConfig+0x280>)
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	4a75      	ldr	r2, [pc, #468]	; (8004270 <HAL_RCC_OscConfig+0x280>)
 800409c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80040a0:	6013      	str	r3, [r2, #0]
 80040a2:	4b73      	ldr	r3, [pc, #460]	; (8004270 <HAL_RCC_OscConfig+0x280>)
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	4a72      	ldr	r2, [pc, #456]	; (8004270 <HAL_RCC_OscConfig+0x280>)
 80040a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040ac:	6013      	str	r3, [r2, #0]
 80040ae:	e00b      	b.n	80040c8 <HAL_RCC_OscConfig+0xd8>
 80040b0:	4b6f      	ldr	r3, [pc, #444]	; (8004270 <HAL_RCC_OscConfig+0x280>)
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	4a6e      	ldr	r2, [pc, #440]	; (8004270 <HAL_RCC_OscConfig+0x280>)
 80040b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80040ba:	6013      	str	r3, [r2, #0]
 80040bc:	4b6c      	ldr	r3, [pc, #432]	; (8004270 <HAL_RCC_OscConfig+0x280>)
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	4a6b      	ldr	r2, [pc, #428]	; (8004270 <HAL_RCC_OscConfig+0x280>)
 80040c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80040c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	685b      	ldr	r3, [r3, #4]
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d013      	beq.n	80040f8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040d0:	f7fe fc0e 	bl	80028f0 <HAL_GetTick>
 80040d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040d6:	e008      	b.n	80040ea <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80040d8:	f7fe fc0a 	bl	80028f0 <HAL_GetTick>
 80040dc:	4602      	mov	r2, r0
 80040de:	693b      	ldr	r3, [r7, #16]
 80040e0:	1ad3      	subs	r3, r2, r3
 80040e2:	2b64      	cmp	r3, #100	; 0x64
 80040e4:	d901      	bls.n	80040ea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80040e6:	2303      	movs	r3, #3
 80040e8:	e21f      	b.n	800452a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040ea:	4b61      	ldr	r3, [pc, #388]	; (8004270 <HAL_RCC_OscConfig+0x280>)
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d0f0      	beq.n	80040d8 <HAL_RCC_OscConfig+0xe8>
 80040f6:	e014      	b.n	8004122 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040f8:	f7fe fbfa 	bl	80028f0 <HAL_GetTick>
 80040fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80040fe:	e008      	b.n	8004112 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004100:	f7fe fbf6 	bl	80028f0 <HAL_GetTick>
 8004104:	4602      	mov	r2, r0
 8004106:	693b      	ldr	r3, [r7, #16]
 8004108:	1ad3      	subs	r3, r2, r3
 800410a:	2b64      	cmp	r3, #100	; 0x64
 800410c:	d901      	bls.n	8004112 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800410e:	2303      	movs	r3, #3
 8004110:	e20b      	b.n	800452a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004112:	4b57      	ldr	r3, [pc, #348]	; (8004270 <HAL_RCC_OscConfig+0x280>)
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800411a:	2b00      	cmp	r3, #0
 800411c:	d1f0      	bne.n	8004100 <HAL_RCC_OscConfig+0x110>
 800411e:	e000      	b.n	8004122 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004120:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f003 0302 	and.w	r3, r3, #2
 800412a:	2b00      	cmp	r3, #0
 800412c:	d069      	beq.n	8004202 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800412e:	4b50      	ldr	r3, [pc, #320]	; (8004270 <HAL_RCC_OscConfig+0x280>)
 8004130:	689b      	ldr	r3, [r3, #8]
 8004132:	f003 030c 	and.w	r3, r3, #12
 8004136:	2b00      	cmp	r3, #0
 8004138:	d00b      	beq.n	8004152 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800413a:	4b4d      	ldr	r3, [pc, #308]	; (8004270 <HAL_RCC_OscConfig+0x280>)
 800413c:	689b      	ldr	r3, [r3, #8]
 800413e:	f003 030c 	and.w	r3, r3, #12
 8004142:	2b08      	cmp	r3, #8
 8004144:	d11c      	bne.n	8004180 <HAL_RCC_OscConfig+0x190>
 8004146:	4b4a      	ldr	r3, [pc, #296]	; (8004270 <HAL_RCC_OscConfig+0x280>)
 8004148:	685b      	ldr	r3, [r3, #4]
 800414a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800414e:	2b00      	cmp	r3, #0
 8004150:	d116      	bne.n	8004180 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004152:	4b47      	ldr	r3, [pc, #284]	; (8004270 <HAL_RCC_OscConfig+0x280>)
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f003 0302 	and.w	r3, r3, #2
 800415a:	2b00      	cmp	r3, #0
 800415c:	d005      	beq.n	800416a <HAL_RCC_OscConfig+0x17a>
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	68db      	ldr	r3, [r3, #12]
 8004162:	2b01      	cmp	r3, #1
 8004164:	d001      	beq.n	800416a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8004166:	2301      	movs	r3, #1
 8004168:	e1df      	b.n	800452a <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800416a:	4b41      	ldr	r3, [pc, #260]	; (8004270 <HAL_RCC_OscConfig+0x280>)
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	691b      	ldr	r3, [r3, #16]
 8004176:	00db      	lsls	r3, r3, #3
 8004178:	493d      	ldr	r1, [pc, #244]	; (8004270 <HAL_RCC_OscConfig+0x280>)
 800417a:	4313      	orrs	r3, r2
 800417c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800417e:	e040      	b.n	8004202 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	68db      	ldr	r3, [r3, #12]
 8004184:	2b00      	cmp	r3, #0
 8004186:	d023      	beq.n	80041d0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004188:	4b39      	ldr	r3, [pc, #228]	; (8004270 <HAL_RCC_OscConfig+0x280>)
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	4a38      	ldr	r2, [pc, #224]	; (8004270 <HAL_RCC_OscConfig+0x280>)
 800418e:	f043 0301 	orr.w	r3, r3, #1
 8004192:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004194:	f7fe fbac 	bl	80028f0 <HAL_GetTick>
 8004198:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800419a:	e008      	b.n	80041ae <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800419c:	f7fe fba8 	bl	80028f0 <HAL_GetTick>
 80041a0:	4602      	mov	r2, r0
 80041a2:	693b      	ldr	r3, [r7, #16]
 80041a4:	1ad3      	subs	r3, r2, r3
 80041a6:	2b02      	cmp	r3, #2
 80041a8:	d901      	bls.n	80041ae <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80041aa:	2303      	movs	r3, #3
 80041ac:	e1bd      	b.n	800452a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041ae:	4b30      	ldr	r3, [pc, #192]	; (8004270 <HAL_RCC_OscConfig+0x280>)
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f003 0302 	and.w	r3, r3, #2
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d0f0      	beq.n	800419c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041ba:	4b2d      	ldr	r3, [pc, #180]	; (8004270 <HAL_RCC_OscConfig+0x280>)
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	691b      	ldr	r3, [r3, #16]
 80041c6:	00db      	lsls	r3, r3, #3
 80041c8:	4929      	ldr	r1, [pc, #164]	; (8004270 <HAL_RCC_OscConfig+0x280>)
 80041ca:	4313      	orrs	r3, r2
 80041cc:	600b      	str	r3, [r1, #0]
 80041ce:	e018      	b.n	8004202 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80041d0:	4b27      	ldr	r3, [pc, #156]	; (8004270 <HAL_RCC_OscConfig+0x280>)
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	4a26      	ldr	r2, [pc, #152]	; (8004270 <HAL_RCC_OscConfig+0x280>)
 80041d6:	f023 0301 	bic.w	r3, r3, #1
 80041da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041dc:	f7fe fb88 	bl	80028f0 <HAL_GetTick>
 80041e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80041e2:	e008      	b.n	80041f6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80041e4:	f7fe fb84 	bl	80028f0 <HAL_GetTick>
 80041e8:	4602      	mov	r2, r0
 80041ea:	693b      	ldr	r3, [r7, #16]
 80041ec:	1ad3      	subs	r3, r2, r3
 80041ee:	2b02      	cmp	r3, #2
 80041f0:	d901      	bls.n	80041f6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80041f2:	2303      	movs	r3, #3
 80041f4:	e199      	b.n	800452a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80041f6:	4b1e      	ldr	r3, [pc, #120]	; (8004270 <HAL_RCC_OscConfig+0x280>)
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f003 0302 	and.w	r3, r3, #2
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d1f0      	bne.n	80041e4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f003 0308 	and.w	r3, r3, #8
 800420a:	2b00      	cmp	r3, #0
 800420c:	d038      	beq.n	8004280 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	695b      	ldr	r3, [r3, #20]
 8004212:	2b00      	cmp	r3, #0
 8004214:	d019      	beq.n	800424a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004216:	4b16      	ldr	r3, [pc, #88]	; (8004270 <HAL_RCC_OscConfig+0x280>)
 8004218:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800421a:	4a15      	ldr	r2, [pc, #84]	; (8004270 <HAL_RCC_OscConfig+0x280>)
 800421c:	f043 0301 	orr.w	r3, r3, #1
 8004220:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004222:	f7fe fb65 	bl	80028f0 <HAL_GetTick>
 8004226:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004228:	e008      	b.n	800423c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800422a:	f7fe fb61 	bl	80028f0 <HAL_GetTick>
 800422e:	4602      	mov	r2, r0
 8004230:	693b      	ldr	r3, [r7, #16]
 8004232:	1ad3      	subs	r3, r2, r3
 8004234:	2b02      	cmp	r3, #2
 8004236:	d901      	bls.n	800423c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004238:	2303      	movs	r3, #3
 800423a:	e176      	b.n	800452a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800423c:	4b0c      	ldr	r3, [pc, #48]	; (8004270 <HAL_RCC_OscConfig+0x280>)
 800423e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004240:	f003 0302 	and.w	r3, r3, #2
 8004244:	2b00      	cmp	r3, #0
 8004246:	d0f0      	beq.n	800422a <HAL_RCC_OscConfig+0x23a>
 8004248:	e01a      	b.n	8004280 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800424a:	4b09      	ldr	r3, [pc, #36]	; (8004270 <HAL_RCC_OscConfig+0x280>)
 800424c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800424e:	4a08      	ldr	r2, [pc, #32]	; (8004270 <HAL_RCC_OscConfig+0x280>)
 8004250:	f023 0301 	bic.w	r3, r3, #1
 8004254:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004256:	f7fe fb4b 	bl	80028f0 <HAL_GetTick>
 800425a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800425c:	e00a      	b.n	8004274 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800425e:	f7fe fb47 	bl	80028f0 <HAL_GetTick>
 8004262:	4602      	mov	r2, r0
 8004264:	693b      	ldr	r3, [r7, #16]
 8004266:	1ad3      	subs	r3, r2, r3
 8004268:	2b02      	cmp	r3, #2
 800426a:	d903      	bls.n	8004274 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800426c:	2303      	movs	r3, #3
 800426e:	e15c      	b.n	800452a <HAL_RCC_OscConfig+0x53a>
 8004270:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004274:	4b91      	ldr	r3, [pc, #580]	; (80044bc <HAL_RCC_OscConfig+0x4cc>)
 8004276:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004278:	f003 0302 	and.w	r3, r3, #2
 800427c:	2b00      	cmp	r3, #0
 800427e:	d1ee      	bne.n	800425e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f003 0304 	and.w	r3, r3, #4
 8004288:	2b00      	cmp	r3, #0
 800428a:	f000 80a4 	beq.w	80043d6 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800428e:	4b8b      	ldr	r3, [pc, #556]	; (80044bc <HAL_RCC_OscConfig+0x4cc>)
 8004290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004292:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004296:	2b00      	cmp	r3, #0
 8004298:	d10d      	bne.n	80042b6 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800429a:	4b88      	ldr	r3, [pc, #544]	; (80044bc <HAL_RCC_OscConfig+0x4cc>)
 800429c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800429e:	4a87      	ldr	r2, [pc, #540]	; (80044bc <HAL_RCC_OscConfig+0x4cc>)
 80042a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042a4:	6413      	str	r3, [r2, #64]	; 0x40
 80042a6:	4b85      	ldr	r3, [pc, #532]	; (80044bc <HAL_RCC_OscConfig+0x4cc>)
 80042a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042ae:	60bb      	str	r3, [r7, #8]
 80042b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80042b2:	2301      	movs	r3, #1
 80042b4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80042b6:	4b82      	ldr	r3, [pc, #520]	; (80044c0 <HAL_RCC_OscConfig+0x4d0>)
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d118      	bne.n	80042f4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80042c2:	4b7f      	ldr	r3, [pc, #508]	; (80044c0 <HAL_RCC_OscConfig+0x4d0>)
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	4a7e      	ldr	r2, [pc, #504]	; (80044c0 <HAL_RCC_OscConfig+0x4d0>)
 80042c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80042cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80042ce:	f7fe fb0f 	bl	80028f0 <HAL_GetTick>
 80042d2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80042d4:	e008      	b.n	80042e8 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80042d6:	f7fe fb0b 	bl	80028f0 <HAL_GetTick>
 80042da:	4602      	mov	r2, r0
 80042dc:	693b      	ldr	r3, [r7, #16]
 80042de:	1ad3      	subs	r3, r2, r3
 80042e0:	2b64      	cmp	r3, #100	; 0x64
 80042e2:	d901      	bls.n	80042e8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80042e4:	2303      	movs	r3, #3
 80042e6:	e120      	b.n	800452a <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80042e8:	4b75      	ldr	r3, [pc, #468]	; (80044c0 <HAL_RCC_OscConfig+0x4d0>)
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d0f0      	beq.n	80042d6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	689b      	ldr	r3, [r3, #8]
 80042f8:	2b01      	cmp	r3, #1
 80042fa:	d106      	bne.n	800430a <HAL_RCC_OscConfig+0x31a>
 80042fc:	4b6f      	ldr	r3, [pc, #444]	; (80044bc <HAL_RCC_OscConfig+0x4cc>)
 80042fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004300:	4a6e      	ldr	r2, [pc, #440]	; (80044bc <HAL_RCC_OscConfig+0x4cc>)
 8004302:	f043 0301 	orr.w	r3, r3, #1
 8004306:	6713      	str	r3, [r2, #112]	; 0x70
 8004308:	e02d      	b.n	8004366 <HAL_RCC_OscConfig+0x376>
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	689b      	ldr	r3, [r3, #8]
 800430e:	2b00      	cmp	r3, #0
 8004310:	d10c      	bne.n	800432c <HAL_RCC_OscConfig+0x33c>
 8004312:	4b6a      	ldr	r3, [pc, #424]	; (80044bc <HAL_RCC_OscConfig+0x4cc>)
 8004314:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004316:	4a69      	ldr	r2, [pc, #420]	; (80044bc <HAL_RCC_OscConfig+0x4cc>)
 8004318:	f023 0301 	bic.w	r3, r3, #1
 800431c:	6713      	str	r3, [r2, #112]	; 0x70
 800431e:	4b67      	ldr	r3, [pc, #412]	; (80044bc <HAL_RCC_OscConfig+0x4cc>)
 8004320:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004322:	4a66      	ldr	r2, [pc, #408]	; (80044bc <HAL_RCC_OscConfig+0x4cc>)
 8004324:	f023 0304 	bic.w	r3, r3, #4
 8004328:	6713      	str	r3, [r2, #112]	; 0x70
 800432a:	e01c      	b.n	8004366 <HAL_RCC_OscConfig+0x376>
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	689b      	ldr	r3, [r3, #8]
 8004330:	2b05      	cmp	r3, #5
 8004332:	d10c      	bne.n	800434e <HAL_RCC_OscConfig+0x35e>
 8004334:	4b61      	ldr	r3, [pc, #388]	; (80044bc <HAL_RCC_OscConfig+0x4cc>)
 8004336:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004338:	4a60      	ldr	r2, [pc, #384]	; (80044bc <HAL_RCC_OscConfig+0x4cc>)
 800433a:	f043 0304 	orr.w	r3, r3, #4
 800433e:	6713      	str	r3, [r2, #112]	; 0x70
 8004340:	4b5e      	ldr	r3, [pc, #376]	; (80044bc <HAL_RCC_OscConfig+0x4cc>)
 8004342:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004344:	4a5d      	ldr	r2, [pc, #372]	; (80044bc <HAL_RCC_OscConfig+0x4cc>)
 8004346:	f043 0301 	orr.w	r3, r3, #1
 800434a:	6713      	str	r3, [r2, #112]	; 0x70
 800434c:	e00b      	b.n	8004366 <HAL_RCC_OscConfig+0x376>
 800434e:	4b5b      	ldr	r3, [pc, #364]	; (80044bc <HAL_RCC_OscConfig+0x4cc>)
 8004350:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004352:	4a5a      	ldr	r2, [pc, #360]	; (80044bc <HAL_RCC_OscConfig+0x4cc>)
 8004354:	f023 0301 	bic.w	r3, r3, #1
 8004358:	6713      	str	r3, [r2, #112]	; 0x70
 800435a:	4b58      	ldr	r3, [pc, #352]	; (80044bc <HAL_RCC_OscConfig+0x4cc>)
 800435c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800435e:	4a57      	ldr	r2, [pc, #348]	; (80044bc <HAL_RCC_OscConfig+0x4cc>)
 8004360:	f023 0304 	bic.w	r3, r3, #4
 8004364:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	689b      	ldr	r3, [r3, #8]
 800436a:	2b00      	cmp	r3, #0
 800436c:	d015      	beq.n	800439a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800436e:	f7fe fabf 	bl	80028f0 <HAL_GetTick>
 8004372:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004374:	e00a      	b.n	800438c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004376:	f7fe fabb 	bl	80028f0 <HAL_GetTick>
 800437a:	4602      	mov	r2, r0
 800437c:	693b      	ldr	r3, [r7, #16]
 800437e:	1ad3      	subs	r3, r2, r3
 8004380:	f241 3288 	movw	r2, #5000	; 0x1388
 8004384:	4293      	cmp	r3, r2
 8004386:	d901      	bls.n	800438c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8004388:	2303      	movs	r3, #3
 800438a:	e0ce      	b.n	800452a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800438c:	4b4b      	ldr	r3, [pc, #300]	; (80044bc <HAL_RCC_OscConfig+0x4cc>)
 800438e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004390:	f003 0302 	and.w	r3, r3, #2
 8004394:	2b00      	cmp	r3, #0
 8004396:	d0ee      	beq.n	8004376 <HAL_RCC_OscConfig+0x386>
 8004398:	e014      	b.n	80043c4 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800439a:	f7fe faa9 	bl	80028f0 <HAL_GetTick>
 800439e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80043a0:	e00a      	b.n	80043b8 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80043a2:	f7fe faa5 	bl	80028f0 <HAL_GetTick>
 80043a6:	4602      	mov	r2, r0
 80043a8:	693b      	ldr	r3, [r7, #16]
 80043aa:	1ad3      	subs	r3, r2, r3
 80043ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80043b0:	4293      	cmp	r3, r2
 80043b2:	d901      	bls.n	80043b8 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80043b4:	2303      	movs	r3, #3
 80043b6:	e0b8      	b.n	800452a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80043b8:	4b40      	ldr	r3, [pc, #256]	; (80044bc <HAL_RCC_OscConfig+0x4cc>)
 80043ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043bc:	f003 0302 	and.w	r3, r3, #2
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d1ee      	bne.n	80043a2 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80043c4:	7dfb      	ldrb	r3, [r7, #23]
 80043c6:	2b01      	cmp	r3, #1
 80043c8:	d105      	bne.n	80043d6 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80043ca:	4b3c      	ldr	r3, [pc, #240]	; (80044bc <HAL_RCC_OscConfig+0x4cc>)
 80043cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043ce:	4a3b      	ldr	r2, [pc, #236]	; (80044bc <HAL_RCC_OscConfig+0x4cc>)
 80043d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80043d4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	699b      	ldr	r3, [r3, #24]
 80043da:	2b00      	cmp	r3, #0
 80043dc:	f000 80a4 	beq.w	8004528 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80043e0:	4b36      	ldr	r3, [pc, #216]	; (80044bc <HAL_RCC_OscConfig+0x4cc>)
 80043e2:	689b      	ldr	r3, [r3, #8]
 80043e4:	f003 030c 	and.w	r3, r3, #12
 80043e8:	2b08      	cmp	r3, #8
 80043ea:	d06b      	beq.n	80044c4 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	699b      	ldr	r3, [r3, #24]
 80043f0:	2b02      	cmp	r3, #2
 80043f2:	d149      	bne.n	8004488 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80043f4:	4b31      	ldr	r3, [pc, #196]	; (80044bc <HAL_RCC_OscConfig+0x4cc>)
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	4a30      	ldr	r2, [pc, #192]	; (80044bc <HAL_RCC_OscConfig+0x4cc>)
 80043fa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80043fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004400:	f7fe fa76 	bl	80028f0 <HAL_GetTick>
 8004404:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004406:	e008      	b.n	800441a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004408:	f7fe fa72 	bl	80028f0 <HAL_GetTick>
 800440c:	4602      	mov	r2, r0
 800440e:	693b      	ldr	r3, [r7, #16]
 8004410:	1ad3      	subs	r3, r2, r3
 8004412:	2b02      	cmp	r3, #2
 8004414:	d901      	bls.n	800441a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8004416:	2303      	movs	r3, #3
 8004418:	e087      	b.n	800452a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800441a:	4b28      	ldr	r3, [pc, #160]	; (80044bc <HAL_RCC_OscConfig+0x4cc>)
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004422:	2b00      	cmp	r3, #0
 8004424:	d1f0      	bne.n	8004408 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	69da      	ldr	r2, [r3, #28]
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6a1b      	ldr	r3, [r3, #32]
 800442e:	431a      	orrs	r2, r3
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004434:	019b      	lsls	r3, r3, #6
 8004436:	431a      	orrs	r2, r3
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800443c:	085b      	lsrs	r3, r3, #1
 800443e:	3b01      	subs	r3, #1
 8004440:	041b      	lsls	r3, r3, #16
 8004442:	431a      	orrs	r2, r3
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004448:	061b      	lsls	r3, r3, #24
 800444a:	4313      	orrs	r3, r2
 800444c:	4a1b      	ldr	r2, [pc, #108]	; (80044bc <HAL_RCC_OscConfig+0x4cc>)
 800444e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004452:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004454:	4b19      	ldr	r3, [pc, #100]	; (80044bc <HAL_RCC_OscConfig+0x4cc>)
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	4a18      	ldr	r2, [pc, #96]	; (80044bc <HAL_RCC_OscConfig+0x4cc>)
 800445a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800445e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004460:	f7fe fa46 	bl	80028f0 <HAL_GetTick>
 8004464:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004466:	e008      	b.n	800447a <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004468:	f7fe fa42 	bl	80028f0 <HAL_GetTick>
 800446c:	4602      	mov	r2, r0
 800446e:	693b      	ldr	r3, [r7, #16]
 8004470:	1ad3      	subs	r3, r2, r3
 8004472:	2b02      	cmp	r3, #2
 8004474:	d901      	bls.n	800447a <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8004476:	2303      	movs	r3, #3
 8004478:	e057      	b.n	800452a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800447a:	4b10      	ldr	r3, [pc, #64]	; (80044bc <HAL_RCC_OscConfig+0x4cc>)
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004482:	2b00      	cmp	r3, #0
 8004484:	d0f0      	beq.n	8004468 <HAL_RCC_OscConfig+0x478>
 8004486:	e04f      	b.n	8004528 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004488:	4b0c      	ldr	r3, [pc, #48]	; (80044bc <HAL_RCC_OscConfig+0x4cc>)
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	4a0b      	ldr	r2, [pc, #44]	; (80044bc <HAL_RCC_OscConfig+0x4cc>)
 800448e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004492:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004494:	f7fe fa2c 	bl	80028f0 <HAL_GetTick>
 8004498:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800449a:	e008      	b.n	80044ae <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800449c:	f7fe fa28 	bl	80028f0 <HAL_GetTick>
 80044a0:	4602      	mov	r2, r0
 80044a2:	693b      	ldr	r3, [r7, #16]
 80044a4:	1ad3      	subs	r3, r2, r3
 80044a6:	2b02      	cmp	r3, #2
 80044a8:	d901      	bls.n	80044ae <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 80044aa:	2303      	movs	r3, #3
 80044ac:	e03d      	b.n	800452a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80044ae:	4b03      	ldr	r3, [pc, #12]	; (80044bc <HAL_RCC_OscConfig+0x4cc>)
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d1f0      	bne.n	800449c <HAL_RCC_OscConfig+0x4ac>
 80044ba:	e035      	b.n	8004528 <HAL_RCC_OscConfig+0x538>
 80044bc:	40023800 	.word	0x40023800
 80044c0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80044c4:	4b1b      	ldr	r3, [pc, #108]	; (8004534 <HAL_RCC_OscConfig+0x544>)
 80044c6:	685b      	ldr	r3, [r3, #4]
 80044c8:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	699b      	ldr	r3, [r3, #24]
 80044ce:	2b01      	cmp	r3, #1
 80044d0:	d028      	beq.n	8004524 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80044dc:	429a      	cmp	r2, r3
 80044de:	d121      	bne.n	8004524 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80044ea:	429a      	cmp	r2, r3
 80044ec:	d11a      	bne.n	8004524 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80044ee:	68fa      	ldr	r2, [r7, #12]
 80044f0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80044f4:	4013      	ands	r3, r2
 80044f6:	687a      	ldr	r2, [r7, #4]
 80044f8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80044fa:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80044fc:	4293      	cmp	r3, r2
 80044fe:	d111      	bne.n	8004524 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800450a:	085b      	lsrs	r3, r3, #1
 800450c:	3b01      	subs	r3, #1
 800450e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004510:	429a      	cmp	r2, r3
 8004512:	d107      	bne.n	8004524 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800451e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004520:	429a      	cmp	r2, r3
 8004522:	d001      	beq.n	8004528 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8004524:	2301      	movs	r3, #1
 8004526:	e000      	b.n	800452a <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8004528:	2300      	movs	r3, #0
}
 800452a:	4618      	mov	r0, r3
 800452c:	3718      	adds	r7, #24
 800452e:	46bd      	mov	sp, r7
 8004530:	bd80      	pop	{r7, pc}
 8004532:	bf00      	nop
 8004534:	40023800 	.word	0x40023800

08004538 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004538:	b580      	push	{r7, lr}
 800453a:	b084      	sub	sp, #16
 800453c:	af00      	add	r7, sp, #0
 800453e:	6078      	str	r0, [r7, #4]
 8004540:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8004542:	2300      	movs	r3, #0
 8004544:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	2b00      	cmp	r3, #0
 800454a:	d101      	bne.n	8004550 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800454c:	2301      	movs	r3, #1
 800454e:	e0d0      	b.n	80046f2 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004550:	4b6a      	ldr	r3, [pc, #424]	; (80046fc <HAL_RCC_ClockConfig+0x1c4>)
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f003 030f 	and.w	r3, r3, #15
 8004558:	683a      	ldr	r2, [r7, #0]
 800455a:	429a      	cmp	r2, r3
 800455c:	d910      	bls.n	8004580 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800455e:	4b67      	ldr	r3, [pc, #412]	; (80046fc <HAL_RCC_ClockConfig+0x1c4>)
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f023 020f 	bic.w	r2, r3, #15
 8004566:	4965      	ldr	r1, [pc, #404]	; (80046fc <HAL_RCC_ClockConfig+0x1c4>)
 8004568:	683b      	ldr	r3, [r7, #0]
 800456a:	4313      	orrs	r3, r2
 800456c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800456e:	4b63      	ldr	r3, [pc, #396]	; (80046fc <HAL_RCC_ClockConfig+0x1c4>)
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f003 030f 	and.w	r3, r3, #15
 8004576:	683a      	ldr	r2, [r7, #0]
 8004578:	429a      	cmp	r2, r3
 800457a:	d001      	beq.n	8004580 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800457c:	2301      	movs	r3, #1
 800457e:	e0b8      	b.n	80046f2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f003 0302 	and.w	r3, r3, #2
 8004588:	2b00      	cmp	r3, #0
 800458a:	d020      	beq.n	80045ce <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f003 0304 	and.w	r3, r3, #4
 8004594:	2b00      	cmp	r3, #0
 8004596:	d005      	beq.n	80045a4 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004598:	4b59      	ldr	r3, [pc, #356]	; (8004700 <HAL_RCC_ClockConfig+0x1c8>)
 800459a:	689b      	ldr	r3, [r3, #8]
 800459c:	4a58      	ldr	r2, [pc, #352]	; (8004700 <HAL_RCC_ClockConfig+0x1c8>)
 800459e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80045a2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f003 0308 	and.w	r3, r3, #8
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d005      	beq.n	80045bc <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80045b0:	4b53      	ldr	r3, [pc, #332]	; (8004700 <HAL_RCC_ClockConfig+0x1c8>)
 80045b2:	689b      	ldr	r3, [r3, #8]
 80045b4:	4a52      	ldr	r2, [pc, #328]	; (8004700 <HAL_RCC_ClockConfig+0x1c8>)
 80045b6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80045ba:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80045bc:	4b50      	ldr	r3, [pc, #320]	; (8004700 <HAL_RCC_ClockConfig+0x1c8>)
 80045be:	689b      	ldr	r3, [r3, #8]
 80045c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	689b      	ldr	r3, [r3, #8]
 80045c8:	494d      	ldr	r1, [pc, #308]	; (8004700 <HAL_RCC_ClockConfig+0x1c8>)
 80045ca:	4313      	orrs	r3, r2
 80045cc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f003 0301 	and.w	r3, r3, #1
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d040      	beq.n	800465c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	685b      	ldr	r3, [r3, #4]
 80045de:	2b01      	cmp	r3, #1
 80045e0:	d107      	bne.n	80045f2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80045e2:	4b47      	ldr	r3, [pc, #284]	; (8004700 <HAL_RCC_ClockConfig+0x1c8>)
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d115      	bne.n	800461a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80045ee:	2301      	movs	r3, #1
 80045f0:	e07f      	b.n	80046f2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	685b      	ldr	r3, [r3, #4]
 80045f6:	2b02      	cmp	r3, #2
 80045f8:	d107      	bne.n	800460a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80045fa:	4b41      	ldr	r3, [pc, #260]	; (8004700 <HAL_RCC_ClockConfig+0x1c8>)
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004602:	2b00      	cmp	r3, #0
 8004604:	d109      	bne.n	800461a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004606:	2301      	movs	r3, #1
 8004608:	e073      	b.n	80046f2 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800460a:	4b3d      	ldr	r3, [pc, #244]	; (8004700 <HAL_RCC_ClockConfig+0x1c8>)
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f003 0302 	and.w	r3, r3, #2
 8004612:	2b00      	cmp	r3, #0
 8004614:	d101      	bne.n	800461a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004616:	2301      	movs	r3, #1
 8004618:	e06b      	b.n	80046f2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800461a:	4b39      	ldr	r3, [pc, #228]	; (8004700 <HAL_RCC_ClockConfig+0x1c8>)
 800461c:	689b      	ldr	r3, [r3, #8]
 800461e:	f023 0203 	bic.w	r2, r3, #3
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	685b      	ldr	r3, [r3, #4]
 8004626:	4936      	ldr	r1, [pc, #216]	; (8004700 <HAL_RCC_ClockConfig+0x1c8>)
 8004628:	4313      	orrs	r3, r2
 800462a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800462c:	f7fe f960 	bl	80028f0 <HAL_GetTick>
 8004630:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004632:	e00a      	b.n	800464a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004634:	f7fe f95c 	bl	80028f0 <HAL_GetTick>
 8004638:	4602      	mov	r2, r0
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	1ad3      	subs	r3, r2, r3
 800463e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004642:	4293      	cmp	r3, r2
 8004644:	d901      	bls.n	800464a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8004646:	2303      	movs	r3, #3
 8004648:	e053      	b.n	80046f2 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800464a:	4b2d      	ldr	r3, [pc, #180]	; (8004700 <HAL_RCC_ClockConfig+0x1c8>)
 800464c:	689b      	ldr	r3, [r3, #8]
 800464e:	f003 020c 	and.w	r2, r3, #12
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	685b      	ldr	r3, [r3, #4]
 8004656:	009b      	lsls	r3, r3, #2
 8004658:	429a      	cmp	r2, r3
 800465a:	d1eb      	bne.n	8004634 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800465c:	4b27      	ldr	r3, [pc, #156]	; (80046fc <HAL_RCC_ClockConfig+0x1c4>)
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f003 030f 	and.w	r3, r3, #15
 8004664:	683a      	ldr	r2, [r7, #0]
 8004666:	429a      	cmp	r2, r3
 8004668:	d210      	bcs.n	800468c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800466a:	4b24      	ldr	r3, [pc, #144]	; (80046fc <HAL_RCC_ClockConfig+0x1c4>)
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f023 020f 	bic.w	r2, r3, #15
 8004672:	4922      	ldr	r1, [pc, #136]	; (80046fc <HAL_RCC_ClockConfig+0x1c4>)
 8004674:	683b      	ldr	r3, [r7, #0]
 8004676:	4313      	orrs	r3, r2
 8004678:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800467a:	4b20      	ldr	r3, [pc, #128]	; (80046fc <HAL_RCC_ClockConfig+0x1c4>)
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f003 030f 	and.w	r3, r3, #15
 8004682:	683a      	ldr	r2, [r7, #0]
 8004684:	429a      	cmp	r2, r3
 8004686:	d001      	beq.n	800468c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004688:	2301      	movs	r3, #1
 800468a:	e032      	b.n	80046f2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f003 0304 	and.w	r3, r3, #4
 8004694:	2b00      	cmp	r3, #0
 8004696:	d008      	beq.n	80046aa <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004698:	4b19      	ldr	r3, [pc, #100]	; (8004700 <HAL_RCC_ClockConfig+0x1c8>)
 800469a:	689b      	ldr	r3, [r3, #8]
 800469c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	68db      	ldr	r3, [r3, #12]
 80046a4:	4916      	ldr	r1, [pc, #88]	; (8004700 <HAL_RCC_ClockConfig+0x1c8>)
 80046a6:	4313      	orrs	r3, r2
 80046a8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f003 0308 	and.w	r3, r3, #8
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d009      	beq.n	80046ca <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80046b6:	4b12      	ldr	r3, [pc, #72]	; (8004700 <HAL_RCC_ClockConfig+0x1c8>)
 80046b8:	689b      	ldr	r3, [r3, #8]
 80046ba:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	691b      	ldr	r3, [r3, #16]
 80046c2:	00db      	lsls	r3, r3, #3
 80046c4:	490e      	ldr	r1, [pc, #56]	; (8004700 <HAL_RCC_ClockConfig+0x1c8>)
 80046c6:	4313      	orrs	r3, r2
 80046c8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80046ca:	f000 f821 	bl	8004710 <HAL_RCC_GetSysClockFreq>
 80046ce:	4602      	mov	r2, r0
 80046d0:	4b0b      	ldr	r3, [pc, #44]	; (8004700 <HAL_RCC_ClockConfig+0x1c8>)
 80046d2:	689b      	ldr	r3, [r3, #8]
 80046d4:	091b      	lsrs	r3, r3, #4
 80046d6:	f003 030f 	and.w	r3, r3, #15
 80046da:	490a      	ldr	r1, [pc, #40]	; (8004704 <HAL_RCC_ClockConfig+0x1cc>)
 80046dc:	5ccb      	ldrb	r3, [r1, r3]
 80046de:	fa22 f303 	lsr.w	r3, r2, r3
 80046e2:	4a09      	ldr	r2, [pc, #36]	; (8004708 <HAL_RCC_ClockConfig+0x1d0>)
 80046e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80046e6:	4b09      	ldr	r3, [pc, #36]	; (800470c <HAL_RCC_ClockConfig+0x1d4>)
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	4618      	mov	r0, r3
 80046ec:	f7fe f8bc 	bl	8002868 <HAL_InitTick>

  return HAL_OK;
 80046f0:	2300      	movs	r3, #0
}
 80046f2:	4618      	mov	r0, r3
 80046f4:	3710      	adds	r7, #16
 80046f6:	46bd      	mov	sp, r7
 80046f8:	bd80      	pop	{r7, pc}
 80046fa:	bf00      	nop
 80046fc:	40023c00 	.word	0x40023c00
 8004700:	40023800 	.word	0x40023800
 8004704:	08008954 	.word	0x08008954
 8004708:	20002780 	.word	0x20002780
 800470c:	20002784 	.word	0x20002784

08004710 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004710:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004714:	b090      	sub	sp, #64	; 0x40
 8004716:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004718:	2300      	movs	r3, #0
 800471a:	637b      	str	r3, [r7, #52]	; 0x34
 800471c:	2300      	movs	r3, #0
 800471e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004720:	2300      	movs	r3, #0
 8004722:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 8004724:	2300      	movs	r3, #0
 8004726:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004728:	4b59      	ldr	r3, [pc, #356]	; (8004890 <HAL_RCC_GetSysClockFreq+0x180>)
 800472a:	689b      	ldr	r3, [r3, #8]
 800472c:	f003 030c 	and.w	r3, r3, #12
 8004730:	2b08      	cmp	r3, #8
 8004732:	d00d      	beq.n	8004750 <HAL_RCC_GetSysClockFreq+0x40>
 8004734:	2b08      	cmp	r3, #8
 8004736:	f200 80a1 	bhi.w	800487c <HAL_RCC_GetSysClockFreq+0x16c>
 800473a:	2b00      	cmp	r3, #0
 800473c:	d002      	beq.n	8004744 <HAL_RCC_GetSysClockFreq+0x34>
 800473e:	2b04      	cmp	r3, #4
 8004740:	d003      	beq.n	800474a <HAL_RCC_GetSysClockFreq+0x3a>
 8004742:	e09b      	b.n	800487c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004744:	4b53      	ldr	r3, [pc, #332]	; (8004894 <HAL_RCC_GetSysClockFreq+0x184>)
 8004746:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004748:	e09b      	b.n	8004882 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800474a:	4b53      	ldr	r3, [pc, #332]	; (8004898 <HAL_RCC_GetSysClockFreq+0x188>)
 800474c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800474e:	e098      	b.n	8004882 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004750:	4b4f      	ldr	r3, [pc, #316]	; (8004890 <HAL_RCC_GetSysClockFreq+0x180>)
 8004752:	685b      	ldr	r3, [r3, #4]
 8004754:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004758:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800475a:	4b4d      	ldr	r3, [pc, #308]	; (8004890 <HAL_RCC_GetSysClockFreq+0x180>)
 800475c:	685b      	ldr	r3, [r3, #4]
 800475e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004762:	2b00      	cmp	r3, #0
 8004764:	d028      	beq.n	80047b8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004766:	4b4a      	ldr	r3, [pc, #296]	; (8004890 <HAL_RCC_GetSysClockFreq+0x180>)
 8004768:	685b      	ldr	r3, [r3, #4]
 800476a:	099b      	lsrs	r3, r3, #6
 800476c:	2200      	movs	r2, #0
 800476e:	623b      	str	r3, [r7, #32]
 8004770:	627a      	str	r2, [r7, #36]	; 0x24
 8004772:	6a3b      	ldr	r3, [r7, #32]
 8004774:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004778:	2100      	movs	r1, #0
 800477a:	4b47      	ldr	r3, [pc, #284]	; (8004898 <HAL_RCC_GetSysClockFreq+0x188>)
 800477c:	fb03 f201 	mul.w	r2, r3, r1
 8004780:	2300      	movs	r3, #0
 8004782:	fb00 f303 	mul.w	r3, r0, r3
 8004786:	4413      	add	r3, r2
 8004788:	4a43      	ldr	r2, [pc, #268]	; (8004898 <HAL_RCC_GetSysClockFreq+0x188>)
 800478a:	fba0 1202 	umull	r1, r2, r0, r2
 800478e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004790:	460a      	mov	r2, r1
 8004792:	62ba      	str	r2, [r7, #40]	; 0x28
 8004794:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004796:	4413      	add	r3, r2
 8004798:	62fb      	str	r3, [r7, #44]	; 0x2c
 800479a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800479c:	2200      	movs	r2, #0
 800479e:	61bb      	str	r3, [r7, #24]
 80047a0:	61fa      	str	r2, [r7, #28]
 80047a2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80047a6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80047aa:	f7fb fd81 	bl	80002b0 <__aeabi_uldivmod>
 80047ae:	4602      	mov	r2, r0
 80047b0:	460b      	mov	r3, r1
 80047b2:	4613      	mov	r3, r2
 80047b4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80047b6:	e053      	b.n	8004860 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80047b8:	4b35      	ldr	r3, [pc, #212]	; (8004890 <HAL_RCC_GetSysClockFreq+0x180>)
 80047ba:	685b      	ldr	r3, [r3, #4]
 80047bc:	099b      	lsrs	r3, r3, #6
 80047be:	2200      	movs	r2, #0
 80047c0:	613b      	str	r3, [r7, #16]
 80047c2:	617a      	str	r2, [r7, #20]
 80047c4:	693b      	ldr	r3, [r7, #16]
 80047c6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80047ca:	f04f 0b00 	mov.w	fp, #0
 80047ce:	4652      	mov	r2, sl
 80047d0:	465b      	mov	r3, fp
 80047d2:	f04f 0000 	mov.w	r0, #0
 80047d6:	f04f 0100 	mov.w	r1, #0
 80047da:	0159      	lsls	r1, r3, #5
 80047dc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80047e0:	0150      	lsls	r0, r2, #5
 80047e2:	4602      	mov	r2, r0
 80047e4:	460b      	mov	r3, r1
 80047e6:	ebb2 080a 	subs.w	r8, r2, sl
 80047ea:	eb63 090b 	sbc.w	r9, r3, fp
 80047ee:	f04f 0200 	mov.w	r2, #0
 80047f2:	f04f 0300 	mov.w	r3, #0
 80047f6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80047fa:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80047fe:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004802:	ebb2 0408 	subs.w	r4, r2, r8
 8004806:	eb63 0509 	sbc.w	r5, r3, r9
 800480a:	f04f 0200 	mov.w	r2, #0
 800480e:	f04f 0300 	mov.w	r3, #0
 8004812:	00eb      	lsls	r3, r5, #3
 8004814:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004818:	00e2      	lsls	r2, r4, #3
 800481a:	4614      	mov	r4, r2
 800481c:	461d      	mov	r5, r3
 800481e:	eb14 030a 	adds.w	r3, r4, sl
 8004822:	603b      	str	r3, [r7, #0]
 8004824:	eb45 030b 	adc.w	r3, r5, fp
 8004828:	607b      	str	r3, [r7, #4]
 800482a:	f04f 0200 	mov.w	r2, #0
 800482e:	f04f 0300 	mov.w	r3, #0
 8004832:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004836:	4629      	mov	r1, r5
 8004838:	028b      	lsls	r3, r1, #10
 800483a:	4621      	mov	r1, r4
 800483c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004840:	4621      	mov	r1, r4
 8004842:	028a      	lsls	r2, r1, #10
 8004844:	4610      	mov	r0, r2
 8004846:	4619      	mov	r1, r3
 8004848:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800484a:	2200      	movs	r2, #0
 800484c:	60bb      	str	r3, [r7, #8]
 800484e:	60fa      	str	r2, [r7, #12]
 8004850:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004854:	f7fb fd2c 	bl	80002b0 <__aeabi_uldivmod>
 8004858:	4602      	mov	r2, r0
 800485a:	460b      	mov	r3, r1
 800485c:	4613      	mov	r3, r2
 800485e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8004860:	4b0b      	ldr	r3, [pc, #44]	; (8004890 <HAL_RCC_GetSysClockFreq+0x180>)
 8004862:	685b      	ldr	r3, [r3, #4]
 8004864:	0c1b      	lsrs	r3, r3, #16
 8004866:	f003 0303 	and.w	r3, r3, #3
 800486a:	3301      	adds	r3, #1
 800486c:	005b      	lsls	r3, r3, #1
 800486e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8004870:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004872:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004874:	fbb2 f3f3 	udiv	r3, r2, r3
 8004878:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800487a:	e002      	b.n	8004882 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800487c:	4b05      	ldr	r3, [pc, #20]	; (8004894 <HAL_RCC_GetSysClockFreq+0x184>)
 800487e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004880:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004882:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8004884:	4618      	mov	r0, r3
 8004886:	3740      	adds	r7, #64	; 0x40
 8004888:	46bd      	mov	sp, r7
 800488a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800488e:	bf00      	nop
 8004890:	40023800 	.word	0x40023800
 8004894:	00f42400 	.word	0x00f42400
 8004898:	017d7840 	.word	0x017d7840

0800489c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800489c:	b480      	push	{r7}
 800489e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80048a0:	4b03      	ldr	r3, [pc, #12]	; (80048b0 <HAL_RCC_GetHCLKFreq+0x14>)
 80048a2:	681b      	ldr	r3, [r3, #0]
}
 80048a4:	4618      	mov	r0, r3
 80048a6:	46bd      	mov	sp, r7
 80048a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ac:	4770      	bx	lr
 80048ae:	bf00      	nop
 80048b0:	20002780 	.word	0x20002780

080048b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80048b4:	b580      	push	{r7, lr}
 80048b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80048b8:	f7ff fff0 	bl	800489c <HAL_RCC_GetHCLKFreq>
 80048bc:	4602      	mov	r2, r0
 80048be:	4b05      	ldr	r3, [pc, #20]	; (80048d4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80048c0:	689b      	ldr	r3, [r3, #8]
 80048c2:	0a9b      	lsrs	r3, r3, #10
 80048c4:	f003 0307 	and.w	r3, r3, #7
 80048c8:	4903      	ldr	r1, [pc, #12]	; (80048d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80048ca:	5ccb      	ldrb	r3, [r1, r3]
 80048cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80048d0:	4618      	mov	r0, r3
 80048d2:	bd80      	pop	{r7, pc}
 80048d4:	40023800 	.word	0x40023800
 80048d8:	08008964 	.word	0x08008964

080048dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80048dc:	b580      	push	{r7, lr}
 80048de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80048e0:	f7ff ffdc 	bl	800489c <HAL_RCC_GetHCLKFreq>
 80048e4:	4602      	mov	r2, r0
 80048e6:	4b05      	ldr	r3, [pc, #20]	; (80048fc <HAL_RCC_GetPCLK2Freq+0x20>)
 80048e8:	689b      	ldr	r3, [r3, #8]
 80048ea:	0b5b      	lsrs	r3, r3, #13
 80048ec:	f003 0307 	and.w	r3, r3, #7
 80048f0:	4903      	ldr	r1, [pc, #12]	; (8004900 <HAL_RCC_GetPCLK2Freq+0x24>)
 80048f2:	5ccb      	ldrb	r3, [r1, r3]
 80048f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80048f8:	4618      	mov	r0, r3
 80048fa:	bd80      	pop	{r7, pc}
 80048fc:	40023800 	.word	0x40023800
 8004900:	08008964 	.word	0x08008964

08004904 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004904:	b580      	push	{r7, lr}
 8004906:	b088      	sub	sp, #32
 8004908:	af00      	add	r7, sp, #0
 800490a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800490c:	2300      	movs	r3, #0
 800490e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8004910:	2300      	movs	r3, #0
 8004912:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8004914:	2300      	movs	r3, #0
 8004916:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8004918:	2300      	movs	r3, #0
 800491a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800491c:	2300      	movs	r3, #0
 800491e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f003 0301 	and.w	r3, r3, #1
 8004928:	2b00      	cmp	r3, #0
 800492a:	d012      	beq.n	8004952 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800492c:	4b69      	ldr	r3, [pc, #420]	; (8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800492e:	689b      	ldr	r3, [r3, #8]
 8004930:	4a68      	ldr	r2, [pc, #416]	; (8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004932:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004936:	6093      	str	r3, [r2, #8]
 8004938:	4b66      	ldr	r3, [pc, #408]	; (8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800493a:	689a      	ldr	r2, [r3, #8]
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004940:	4964      	ldr	r1, [pc, #400]	; (8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004942:	4313      	orrs	r3, r2
 8004944:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800494a:	2b00      	cmp	r3, #0
 800494c:	d101      	bne.n	8004952 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800494e:	2301      	movs	r3, #1
 8004950:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800495a:	2b00      	cmp	r3, #0
 800495c:	d017      	beq.n	800498e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800495e:	4b5d      	ldr	r3, [pc, #372]	; (8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004960:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004964:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800496c:	4959      	ldr	r1, [pc, #356]	; (8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800496e:	4313      	orrs	r3, r2
 8004970:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004978:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800497c:	d101      	bne.n	8004982 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800497e:	2301      	movs	r3, #1
 8004980:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004986:	2b00      	cmp	r3, #0
 8004988:	d101      	bne.n	800498e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800498a:	2301      	movs	r3, #1
 800498c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004996:	2b00      	cmp	r3, #0
 8004998:	d017      	beq.n	80049ca <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800499a:	4b4e      	ldr	r3, [pc, #312]	; (8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800499c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80049a0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049a8:	494a      	ldr	r1, [pc, #296]	; (8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80049aa:	4313      	orrs	r3, r2
 80049ac:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049b4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80049b8:	d101      	bne.n	80049be <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80049ba:	2301      	movs	r3, #1
 80049bc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d101      	bne.n	80049ca <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80049c6:	2301      	movs	r3, #1
 80049c8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d001      	beq.n	80049da <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80049d6:	2301      	movs	r3, #1
 80049d8:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f003 0320 	and.w	r3, r3, #32
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	f000 808b 	beq.w	8004afe <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80049e8:	4b3a      	ldr	r3, [pc, #232]	; (8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80049ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049ec:	4a39      	ldr	r2, [pc, #228]	; (8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80049ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80049f2:	6413      	str	r3, [r2, #64]	; 0x40
 80049f4:	4b37      	ldr	r3, [pc, #220]	; (8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80049f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049fc:	60bb      	str	r3, [r7, #8]
 80049fe:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004a00:	4b35      	ldr	r3, [pc, #212]	; (8004ad8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	4a34      	ldr	r2, [pc, #208]	; (8004ad8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004a06:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a0a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a0c:	f7fd ff70 	bl	80028f0 <HAL_GetTick>
 8004a10:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004a12:	e008      	b.n	8004a26 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a14:	f7fd ff6c 	bl	80028f0 <HAL_GetTick>
 8004a18:	4602      	mov	r2, r0
 8004a1a:	697b      	ldr	r3, [r7, #20]
 8004a1c:	1ad3      	subs	r3, r2, r3
 8004a1e:	2b64      	cmp	r3, #100	; 0x64
 8004a20:	d901      	bls.n	8004a26 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8004a22:	2303      	movs	r3, #3
 8004a24:	e357      	b.n	80050d6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004a26:	4b2c      	ldr	r3, [pc, #176]	; (8004ad8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d0f0      	beq.n	8004a14 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004a32:	4b28      	ldr	r3, [pc, #160]	; (8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a3a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004a3c:	693b      	ldr	r3, [r7, #16]
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d035      	beq.n	8004aae <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a46:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a4a:	693a      	ldr	r2, [r7, #16]
 8004a4c:	429a      	cmp	r2, r3
 8004a4e:	d02e      	beq.n	8004aae <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004a50:	4b20      	ldr	r3, [pc, #128]	; (8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a54:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a58:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004a5a:	4b1e      	ldr	r3, [pc, #120]	; (8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a5e:	4a1d      	ldr	r2, [pc, #116]	; (8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a64:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004a66:	4b1b      	ldr	r3, [pc, #108]	; (8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a6a:	4a1a      	ldr	r2, [pc, #104]	; (8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a6c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a70:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8004a72:	4a18      	ldr	r2, [pc, #96]	; (8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a74:	693b      	ldr	r3, [r7, #16]
 8004a76:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004a78:	4b16      	ldr	r3, [pc, #88]	; (8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a7c:	f003 0301 	and.w	r3, r3, #1
 8004a80:	2b01      	cmp	r3, #1
 8004a82:	d114      	bne.n	8004aae <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a84:	f7fd ff34 	bl	80028f0 <HAL_GetTick>
 8004a88:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a8a:	e00a      	b.n	8004aa2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004a8c:	f7fd ff30 	bl	80028f0 <HAL_GetTick>
 8004a90:	4602      	mov	r2, r0
 8004a92:	697b      	ldr	r3, [r7, #20]
 8004a94:	1ad3      	subs	r3, r2, r3
 8004a96:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a9a:	4293      	cmp	r3, r2
 8004a9c:	d901      	bls.n	8004aa2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8004a9e:	2303      	movs	r3, #3
 8004aa0:	e319      	b.n	80050d6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004aa2:	4b0c      	ldr	r3, [pc, #48]	; (8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004aa4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004aa6:	f003 0302 	and.w	r3, r3, #2
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d0ee      	beq.n	8004a8c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ab2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ab6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004aba:	d111      	bne.n	8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004abc:	4b05      	ldr	r3, [pc, #20]	; (8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004abe:	689b      	ldr	r3, [r3, #8]
 8004ac0:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004ac8:	4b04      	ldr	r3, [pc, #16]	; (8004adc <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004aca:	400b      	ands	r3, r1
 8004acc:	4901      	ldr	r1, [pc, #4]	; (8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ace:	4313      	orrs	r3, r2
 8004ad0:	608b      	str	r3, [r1, #8]
 8004ad2:	e00b      	b.n	8004aec <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004ad4:	40023800 	.word	0x40023800
 8004ad8:	40007000 	.word	0x40007000
 8004adc:	0ffffcff 	.word	0x0ffffcff
 8004ae0:	4baa      	ldr	r3, [pc, #680]	; (8004d8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004ae2:	689b      	ldr	r3, [r3, #8]
 8004ae4:	4aa9      	ldr	r2, [pc, #676]	; (8004d8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004ae6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004aea:	6093      	str	r3, [r2, #8]
 8004aec:	4ba7      	ldr	r3, [pc, #668]	; (8004d8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004aee:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004af4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004af8:	49a4      	ldr	r1, [pc, #656]	; (8004d8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004afa:	4313      	orrs	r3, r2
 8004afc:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f003 0310 	and.w	r3, r3, #16
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d010      	beq.n	8004b2c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004b0a:	4ba0      	ldr	r3, [pc, #640]	; (8004d8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004b0c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004b10:	4a9e      	ldr	r2, [pc, #632]	; (8004d8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004b12:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004b16:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004b1a:	4b9c      	ldr	r3, [pc, #624]	; (8004d8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004b1c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b24:	4999      	ldr	r1, [pc, #612]	; (8004d8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004b26:	4313      	orrs	r3, r2
 8004b28:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d00a      	beq.n	8004b4e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004b38:	4b94      	ldr	r3, [pc, #592]	; (8004d8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004b3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b3e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004b46:	4991      	ldr	r1, [pc, #580]	; (8004d8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004b48:	4313      	orrs	r3, r2
 8004b4a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d00a      	beq.n	8004b70 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004b5a:	4b8c      	ldr	r3, [pc, #560]	; (8004d8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004b5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b60:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004b68:	4988      	ldr	r1, [pc, #544]	; (8004d8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004b6a:	4313      	orrs	r3, r2
 8004b6c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d00a      	beq.n	8004b92 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004b7c:	4b83      	ldr	r3, [pc, #524]	; (8004d8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004b7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b82:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004b8a:	4980      	ldr	r1, [pc, #512]	; (8004d8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004b8c:	4313      	orrs	r3, r2
 8004b8e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d00a      	beq.n	8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004b9e:	4b7b      	ldr	r3, [pc, #492]	; (8004d8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004ba0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ba4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bac:	4977      	ldr	r1, [pc, #476]	; (8004d8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004bae:	4313      	orrs	r3, r2
 8004bb0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d00a      	beq.n	8004bd6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004bc0:	4b72      	ldr	r3, [pc, #456]	; (8004d8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004bc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bc6:	f023 0203 	bic.w	r2, r3, #3
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bce:	496f      	ldr	r1, [pc, #444]	; (8004d8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004bd0:	4313      	orrs	r3, r2
 8004bd2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d00a      	beq.n	8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004be2:	4b6a      	ldr	r3, [pc, #424]	; (8004d8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004be4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004be8:	f023 020c 	bic.w	r2, r3, #12
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004bf0:	4966      	ldr	r1, [pc, #408]	; (8004d8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004bf2:	4313      	orrs	r3, r2
 8004bf4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d00a      	beq.n	8004c1a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004c04:	4b61      	ldr	r3, [pc, #388]	; (8004d8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004c06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c0a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c12:	495e      	ldr	r1, [pc, #376]	; (8004d8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004c14:	4313      	orrs	r3, r2
 8004c16:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d00a      	beq.n	8004c3c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004c26:	4b59      	ldr	r3, [pc, #356]	; (8004d8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004c28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c2c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c34:	4955      	ldr	r1, [pc, #340]	; (8004d8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004c36:	4313      	orrs	r3, r2
 8004c38:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d00a      	beq.n	8004c5e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004c48:	4b50      	ldr	r3, [pc, #320]	; (8004d8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004c4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c4e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c56:	494d      	ldr	r1, [pc, #308]	; (8004d8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004c58:	4313      	orrs	r3, r2
 8004c5a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d00a      	beq.n	8004c80 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8004c6a:	4b48      	ldr	r3, [pc, #288]	; (8004d8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004c6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c70:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c78:	4944      	ldr	r1, [pc, #272]	; (8004d8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004c7a:	4313      	orrs	r3, r2
 8004c7c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d00a      	beq.n	8004ca2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004c8c:	4b3f      	ldr	r3, [pc, #252]	; (8004d8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004c8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c92:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c9a:	493c      	ldr	r1, [pc, #240]	; (8004d8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004c9c:	4313      	orrs	r3, r2
 8004c9e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d00a      	beq.n	8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004cae:	4b37      	ldr	r3, [pc, #220]	; (8004d8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004cb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cb4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004cbc:	4933      	ldr	r1, [pc, #204]	; (8004d8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004cbe:	4313      	orrs	r3, r2
 8004cc0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d00a      	beq.n	8004ce6 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004cd0:	4b2e      	ldr	r3, [pc, #184]	; (8004d8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004cd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cd6:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004cde:	492b      	ldr	r1, [pc, #172]	; (8004d8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004ce0:	4313      	orrs	r3, r2
 8004ce2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d011      	beq.n	8004d16 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004cf2:	4b26      	ldr	r3, [pc, #152]	; (8004d8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004cf4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cf8:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004d00:	4922      	ldr	r1, [pc, #136]	; (8004d8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004d02:	4313      	orrs	r3, r2
 8004d04:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004d0c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004d10:	d101      	bne.n	8004d16 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8004d12:	2301      	movs	r3, #1
 8004d14:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f003 0308 	and.w	r3, r3, #8
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d001      	beq.n	8004d26 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8004d22:	2301      	movs	r3, #1
 8004d24:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d00a      	beq.n	8004d48 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004d32:	4b16      	ldr	r3, [pc, #88]	; (8004d8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004d34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d38:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d40:	4912      	ldr	r1, [pc, #72]	; (8004d8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004d42:	4313      	orrs	r3, r2
 8004d44:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d00b      	beq.n	8004d6c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004d54:	4b0d      	ldr	r3, [pc, #52]	; (8004d8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004d56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d5a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004d64:	4909      	ldr	r1, [pc, #36]	; (8004d8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004d66:	4313      	orrs	r3, r2
 8004d68:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004d6c:	69fb      	ldr	r3, [r7, #28]
 8004d6e:	2b01      	cmp	r3, #1
 8004d70:	d006      	beq.n	8004d80 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	f000 80d9 	beq.w	8004f32 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004d80:	4b02      	ldr	r3, [pc, #8]	; (8004d8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	4a01      	ldr	r2, [pc, #4]	; (8004d8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004d86:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004d8a:	e001      	b.n	8004d90 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8004d8c:	40023800 	.word	0x40023800
 8004d90:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d92:	f7fd fdad 	bl	80028f0 <HAL_GetTick>
 8004d96:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004d98:	e008      	b.n	8004dac <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004d9a:	f7fd fda9 	bl	80028f0 <HAL_GetTick>
 8004d9e:	4602      	mov	r2, r0
 8004da0:	697b      	ldr	r3, [r7, #20]
 8004da2:	1ad3      	subs	r3, r2, r3
 8004da4:	2b64      	cmp	r3, #100	; 0x64
 8004da6:	d901      	bls.n	8004dac <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004da8:	2303      	movs	r3, #3
 8004daa:	e194      	b.n	80050d6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004dac:	4b6c      	ldr	r3, [pc, #432]	; (8004f60 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d1f0      	bne.n	8004d9a <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	f003 0301 	and.w	r3, r3, #1
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d021      	beq.n	8004e08 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d11d      	bne.n	8004e08 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004dcc:	4b64      	ldr	r3, [pc, #400]	; (8004f60 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004dce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004dd2:	0c1b      	lsrs	r3, r3, #16
 8004dd4:	f003 0303 	and.w	r3, r3, #3
 8004dd8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004dda:	4b61      	ldr	r3, [pc, #388]	; (8004f60 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004ddc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004de0:	0e1b      	lsrs	r3, r3, #24
 8004de2:	f003 030f 	and.w	r3, r3, #15
 8004de6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	685b      	ldr	r3, [r3, #4]
 8004dec:	019a      	lsls	r2, r3, #6
 8004dee:	693b      	ldr	r3, [r7, #16]
 8004df0:	041b      	lsls	r3, r3, #16
 8004df2:	431a      	orrs	r2, r3
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	061b      	lsls	r3, r3, #24
 8004df8:	431a      	orrs	r2, r3
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	689b      	ldr	r3, [r3, #8]
 8004dfe:	071b      	lsls	r3, r3, #28
 8004e00:	4957      	ldr	r1, [pc, #348]	; (8004f60 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004e02:	4313      	orrs	r3, r2
 8004e04:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d004      	beq.n	8004e1e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e18:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004e1c:	d00a      	beq.n	8004e34 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d02e      	beq.n	8004e88 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e2e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004e32:	d129      	bne.n	8004e88 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004e34:	4b4a      	ldr	r3, [pc, #296]	; (8004f60 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004e36:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004e3a:	0c1b      	lsrs	r3, r3, #16
 8004e3c:	f003 0303 	and.w	r3, r3, #3
 8004e40:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004e42:	4b47      	ldr	r3, [pc, #284]	; (8004f60 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004e44:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004e48:	0f1b      	lsrs	r3, r3, #28
 8004e4a:	f003 0307 	and.w	r3, r3, #7
 8004e4e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	685b      	ldr	r3, [r3, #4]
 8004e54:	019a      	lsls	r2, r3, #6
 8004e56:	693b      	ldr	r3, [r7, #16]
 8004e58:	041b      	lsls	r3, r3, #16
 8004e5a:	431a      	orrs	r2, r3
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	68db      	ldr	r3, [r3, #12]
 8004e60:	061b      	lsls	r3, r3, #24
 8004e62:	431a      	orrs	r2, r3
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	071b      	lsls	r3, r3, #28
 8004e68:	493d      	ldr	r1, [pc, #244]	; (8004f60 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004e6a:	4313      	orrs	r3, r2
 8004e6c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004e70:	4b3b      	ldr	r3, [pc, #236]	; (8004f60 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004e72:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004e76:	f023 021f 	bic.w	r2, r3, #31
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e7e:	3b01      	subs	r3, #1
 8004e80:	4937      	ldr	r1, [pc, #220]	; (8004f60 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004e82:	4313      	orrs	r3, r2
 8004e84:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d01d      	beq.n	8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004e94:	4b32      	ldr	r3, [pc, #200]	; (8004f60 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004e96:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004e9a:	0e1b      	lsrs	r3, r3, #24
 8004e9c:	f003 030f 	and.w	r3, r3, #15
 8004ea0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004ea2:	4b2f      	ldr	r3, [pc, #188]	; (8004f60 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004ea4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004ea8:	0f1b      	lsrs	r3, r3, #28
 8004eaa:	f003 0307 	and.w	r3, r3, #7
 8004eae:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	685b      	ldr	r3, [r3, #4]
 8004eb4:	019a      	lsls	r2, r3, #6
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	691b      	ldr	r3, [r3, #16]
 8004eba:	041b      	lsls	r3, r3, #16
 8004ebc:	431a      	orrs	r2, r3
 8004ebe:	693b      	ldr	r3, [r7, #16]
 8004ec0:	061b      	lsls	r3, r3, #24
 8004ec2:	431a      	orrs	r2, r3
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	071b      	lsls	r3, r3, #28
 8004ec8:	4925      	ldr	r1, [pc, #148]	; (8004f60 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004eca:	4313      	orrs	r3, r2
 8004ecc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d011      	beq.n	8004f00 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	685b      	ldr	r3, [r3, #4]
 8004ee0:	019a      	lsls	r2, r3, #6
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	691b      	ldr	r3, [r3, #16]
 8004ee6:	041b      	lsls	r3, r3, #16
 8004ee8:	431a      	orrs	r2, r3
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	68db      	ldr	r3, [r3, #12]
 8004eee:	061b      	lsls	r3, r3, #24
 8004ef0:	431a      	orrs	r2, r3
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	689b      	ldr	r3, [r3, #8]
 8004ef6:	071b      	lsls	r3, r3, #28
 8004ef8:	4919      	ldr	r1, [pc, #100]	; (8004f60 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004efa:	4313      	orrs	r3, r2
 8004efc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004f00:	4b17      	ldr	r3, [pc, #92]	; (8004f60 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	4a16      	ldr	r2, [pc, #88]	; (8004f60 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004f06:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004f0a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f0c:	f7fd fcf0 	bl	80028f0 <HAL_GetTick>
 8004f10:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004f12:	e008      	b.n	8004f26 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004f14:	f7fd fcec 	bl	80028f0 <HAL_GetTick>
 8004f18:	4602      	mov	r2, r0
 8004f1a:	697b      	ldr	r3, [r7, #20]
 8004f1c:	1ad3      	subs	r3, r2, r3
 8004f1e:	2b64      	cmp	r3, #100	; 0x64
 8004f20:	d901      	bls.n	8004f26 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004f22:	2303      	movs	r3, #3
 8004f24:	e0d7      	b.n	80050d6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004f26:	4b0e      	ldr	r3, [pc, #56]	; (8004f60 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d0f0      	beq.n	8004f14 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004f32:	69bb      	ldr	r3, [r7, #24]
 8004f34:	2b01      	cmp	r3, #1
 8004f36:	f040 80cd 	bne.w	80050d4 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004f3a:	4b09      	ldr	r3, [pc, #36]	; (8004f60 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	4a08      	ldr	r2, [pc, #32]	; (8004f60 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004f40:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004f44:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f46:	f7fd fcd3 	bl	80028f0 <HAL_GetTick>
 8004f4a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004f4c:	e00a      	b.n	8004f64 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004f4e:	f7fd fccf 	bl	80028f0 <HAL_GetTick>
 8004f52:	4602      	mov	r2, r0
 8004f54:	697b      	ldr	r3, [r7, #20]
 8004f56:	1ad3      	subs	r3, r2, r3
 8004f58:	2b64      	cmp	r3, #100	; 0x64
 8004f5a:	d903      	bls.n	8004f64 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004f5c:	2303      	movs	r3, #3
 8004f5e:	e0ba      	b.n	80050d6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8004f60:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004f64:	4b5e      	ldr	r3, [pc, #376]	; (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004f6c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004f70:	d0ed      	beq.n	8004f4e <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d003      	beq.n	8004f86 <HAL_RCCEx_PeriphCLKConfig+0x682>
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d009      	beq.n	8004f9a <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d02e      	beq.n	8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d12a      	bne.n	8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004f9a:	4b51      	ldr	r3, [pc, #324]	; (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004f9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fa0:	0c1b      	lsrs	r3, r3, #16
 8004fa2:	f003 0303 	and.w	r3, r3, #3
 8004fa6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004fa8:	4b4d      	ldr	r3, [pc, #308]	; (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004faa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fae:	0f1b      	lsrs	r3, r3, #28
 8004fb0:	f003 0307 	and.w	r3, r3, #7
 8004fb4:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	695b      	ldr	r3, [r3, #20]
 8004fba:	019a      	lsls	r2, r3, #6
 8004fbc:	693b      	ldr	r3, [r7, #16]
 8004fbe:	041b      	lsls	r3, r3, #16
 8004fc0:	431a      	orrs	r2, r3
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	699b      	ldr	r3, [r3, #24]
 8004fc6:	061b      	lsls	r3, r3, #24
 8004fc8:	431a      	orrs	r2, r3
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	071b      	lsls	r3, r3, #28
 8004fce:	4944      	ldr	r1, [pc, #272]	; (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004fd0:	4313      	orrs	r3, r2
 8004fd2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004fd6:	4b42      	ldr	r3, [pc, #264]	; (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004fd8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004fdc:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fe4:	3b01      	subs	r3, #1
 8004fe6:	021b      	lsls	r3, r3, #8
 8004fe8:	493d      	ldr	r1, [pc, #244]	; (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004fea:	4313      	orrs	r3, r2
 8004fec:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d022      	beq.n	8005042 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005000:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005004:	d11d      	bne.n	8005042 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005006:	4b36      	ldr	r3, [pc, #216]	; (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005008:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800500c:	0e1b      	lsrs	r3, r3, #24
 800500e:	f003 030f 	and.w	r3, r3, #15
 8005012:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005014:	4b32      	ldr	r3, [pc, #200]	; (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005016:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800501a:	0f1b      	lsrs	r3, r3, #28
 800501c:	f003 0307 	and.w	r3, r3, #7
 8005020:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	695b      	ldr	r3, [r3, #20]
 8005026:	019a      	lsls	r2, r3, #6
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	6a1b      	ldr	r3, [r3, #32]
 800502c:	041b      	lsls	r3, r3, #16
 800502e:	431a      	orrs	r2, r3
 8005030:	693b      	ldr	r3, [r7, #16]
 8005032:	061b      	lsls	r3, r3, #24
 8005034:	431a      	orrs	r2, r3
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	071b      	lsls	r3, r3, #28
 800503a:	4929      	ldr	r1, [pc, #164]	; (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800503c:	4313      	orrs	r3, r2
 800503e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	f003 0308 	and.w	r3, r3, #8
 800504a:	2b00      	cmp	r3, #0
 800504c:	d028      	beq.n	80050a0 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800504e:	4b24      	ldr	r3, [pc, #144]	; (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005050:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005054:	0e1b      	lsrs	r3, r3, #24
 8005056:	f003 030f 	and.w	r3, r3, #15
 800505a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800505c:	4b20      	ldr	r3, [pc, #128]	; (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800505e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005062:	0c1b      	lsrs	r3, r3, #16
 8005064:	f003 0303 	and.w	r3, r3, #3
 8005068:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	695b      	ldr	r3, [r3, #20]
 800506e:	019a      	lsls	r2, r3, #6
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	041b      	lsls	r3, r3, #16
 8005074:	431a      	orrs	r2, r3
 8005076:	693b      	ldr	r3, [r7, #16]
 8005078:	061b      	lsls	r3, r3, #24
 800507a:	431a      	orrs	r2, r3
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	69db      	ldr	r3, [r3, #28]
 8005080:	071b      	lsls	r3, r3, #28
 8005082:	4917      	ldr	r1, [pc, #92]	; (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005084:	4313      	orrs	r3, r2
 8005086:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800508a:	4b15      	ldr	r3, [pc, #84]	; (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800508c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005090:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005098:	4911      	ldr	r1, [pc, #68]	; (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800509a:	4313      	orrs	r3, r2
 800509c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80050a0:	4b0f      	ldr	r3, [pc, #60]	; (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	4a0e      	ldr	r2, [pc, #56]	; (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80050a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80050aa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80050ac:	f7fd fc20 	bl	80028f0 <HAL_GetTick>
 80050b0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80050b2:	e008      	b.n	80050c6 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80050b4:	f7fd fc1c 	bl	80028f0 <HAL_GetTick>
 80050b8:	4602      	mov	r2, r0
 80050ba:	697b      	ldr	r3, [r7, #20]
 80050bc:	1ad3      	subs	r3, r2, r3
 80050be:	2b64      	cmp	r3, #100	; 0x64
 80050c0:	d901      	bls.n	80050c6 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80050c2:	2303      	movs	r3, #3
 80050c4:	e007      	b.n	80050d6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80050c6:	4b06      	ldr	r3, [pc, #24]	; (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80050ce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80050d2:	d1ef      	bne.n	80050b4 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 80050d4:	2300      	movs	r3, #0
}
 80050d6:	4618      	mov	r0, r3
 80050d8:	3720      	adds	r7, #32
 80050da:	46bd      	mov	sp, r7
 80050dc:	bd80      	pop	{r7, pc}
 80050de:	bf00      	nop
 80050e0:	40023800 	.word	0x40023800

080050e4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80050e4:	b580      	push	{r7, lr}
 80050e6:	b084      	sub	sp, #16
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d101      	bne.n	80050f6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80050f2:	2301      	movs	r3, #1
 80050f4:	e09d      	b.n	8005232 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d108      	bne.n	8005110 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	685b      	ldr	r3, [r3, #4]
 8005102:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005106:	d009      	beq.n	800511c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2200      	movs	r2, #0
 800510c:	61da      	str	r2, [r3, #28]
 800510e:	e005      	b.n	800511c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	2200      	movs	r2, #0
 8005114:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	2200      	movs	r2, #0
 800511a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	2200      	movs	r2, #0
 8005120:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005128:	b2db      	uxtb	r3, r3
 800512a:	2b00      	cmp	r3, #0
 800512c:	d106      	bne.n	800513c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	2200      	movs	r2, #0
 8005132:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005136:	6878      	ldr	r0, [r7, #4]
 8005138:	f7fd f93a 	bl	80023b0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	2202      	movs	r2, #2
 8005140:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	681a      	ldr	r2, [r3, #0]
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005152:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	68db      	ldr	r3, [r3, #12]
 8005158:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800515c:	d902      	bls.n	8005164 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800515e:	2300      	movs	r3, #0
 8005160:	60fb      	str	r3, [r7, #12]
 8005162:	e002      	b.n	800516a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005164:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005168:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	68db      	ldr	r3, [r3, #12]
 800516e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8005172:	d007      	beq.n	8005184 <HAL_SPI_Init+0xa0>
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	68db      	ldr	r3, [r3, #12]
 8005178:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800517c:	d002      	beq.n	8005184 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	2200      	movs	r2, #0
 8005182:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	685b      	ldr	r3, [r3, #4]
 8005188:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	689b      	ldr	r3, [r3, #8]
 8005190:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005194:	431a      	orrs	r2, r3
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	691b      	ldr	r3, [r3, #16]
 800519a:	f003 0302 	and.w	r3, r3, #2
 800519e:	431a      	orrs	r2, r3
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	695b      	ldr	r3, [r3, #20]
 80051a4:	f003 0301 	and.w	r3, r3, #1
 80051a8:	431a      	orrs	r2, r3
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	699b      	ldr	r3, [r3, #24]
 80051ae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80051b2:	431a      	orrs	r2, r3
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	69db      	ldr	r3, [r3, #28]
 80051b8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80051bc:	431a      	orrs	r2, r3
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	6a1b      	ldr	r3, [r3, #32]
 80051c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051c6:	ea42 0103 	orr.w	r1, r2, r3
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051ce:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	430a      	orrs	r2, r1
 80051d8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	699b      	ldr	r3, [r3, #24]
 80051de:	0c1b      	lsrs	r3, r3, #16
 80051e0:	f003 0204 	and.w	r2, r3, #4
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051e8:	f003 0310 	and.w	r3, r3, #16
 80051ec:	431a      	orrs	r2, r3
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051f2:	f003 0308 	and.w	r3, r3, #8
 80051f6:	431a      	orrs	r2, r3
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	68db      	ldr	r3, [r3, #12]
 80051fc:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005200:	ea42 0103 	orr.w	r1, r2, r3
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	430a      	orrs	r2, r1
 8005210:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	69da      	ldr	r2, [r3, #28]
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005220:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	2200      	movs	r2, #0
 8005226:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	2201      	movs	r2, #1
 800522c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005230:	2300      	movs	r3, #0
}
 8005232:	4618      	mov	r0, r3
 8005234:	3710      	adds	r7, #16
 8005236:	46bd      	mov	sp, r7
 8005238:	bd80      	pop	{r7, pc}

0800523a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800523a:	b580      	push	{r7, lr}
 800523c:	b088      	sub	sp, #32
 800523e:	af00      	add	r7, sp, #0
 8005240:	60f8      	str	r0, [r7, #12]
 8005242:	60b9      	str	r1, [r7, #8]
 8005244:	603b      	str	r3, [r7, #0]
 8005246:	4613      	mov	r3, r2
 8005248:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800524a:	2300      	movs	r3, #0
 800524c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005254:	2b01      	cmp	r3, #1
 8005256:	d101      	bne.n	800525c <HAL_SPI_Transmit+0x22>
 8005258:	2302      	movs	r3, #2
 800525a:	e158      	b.n	800550e <HAL_SPI_Transmit+0x2d4>
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	2201      	movs	r2, #1
 8005260:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005264:	f7fd fb44 	bl	80028f0 <HAL_GetTick>
 8005268:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800526a:	88fb      	ldrh	r3, [r7, #6]
 800526c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005274:	b2db      	uxtb	r3, r3
 8005276:	2b01      	cmp	r3, #1
 8005278:	d002      	beq.n	8005280 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800527a:	2302      	movs	r3, #2
 800527c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800527e:	e13d      	b.n	80054fc <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8005280:	68bb      	ldr	r3, [r7, #8]
 8005282:	2b00      	cmp	r3, #0
 8005284:	d002      	beq.n	800528c <HAL_SPI_Transmit+0x52>
 8005286:	88fb      	ldrh	r3, [r7, #6]
 8005288:	2b00      	cmp	r3, #0
 800528a:	d102      	bne.n	8005292 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800528c:	2301      	movs	r3, #1
 800528e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005290:	e134      	b.n	80054fc <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	2203      	movs	r2, #3
 8005296:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	2200      	movs	r2, #0
 800529e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	68ba      	ldr	r2, [r7, #8]
 80052a4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	88fa      	ldrh	r2, [r7, #6]
 80052aa:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	88fa      	ldrh	r2, [r7, #6]
 80052b0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	2200      	movs	r2, #0
 80052b6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	2200      	movs	r2, #0
 80052bc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	2200      	movs	r2, #0
 80052c4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	2200      	movs	r2, #0
 80052cc:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	2200      	movs	r2, #0
 80052d2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	689b      	ldr	r3, [r3, #8]
 80052d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80052dc:	d10f      	bne.n	80052fe <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	681a      	ldr	r2, [r3, #0]
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80052ec:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	681a      	ldr	r2, [r3, #0]
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80052fc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005308:	2b40      	cmp	r3, #64	; 0x40
 800530a:	d007      	beq.n	800531c <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	681a      	ldr	r2, [r3, #0]
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800531a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	68db      	ldr	r3, [r3, #12]
 8005320:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005324:	d94b      	bls.n	80053be <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	685b      	ldr	r3, [r3, #4]
 800532a:	2b00      	cmp	r3, #0
 800532c:	d002      	beq.n	8005334 <HAL_SPI_Transmit+0xfa>
 800532e:	8afb      	ldrh	r3, [r7, #22]
 8005330:	2b01      	cmp	r3, #1
 8005332:	d13e      	bne.n	80053b2 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005338:	881a      	ldrh	r2, [r3, #0]
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005344:	1c9a      	adds	r2, r3, #2
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800534e:	b29b      	uxth	r3, r3
 8005350:	3b01      	subs	r3, #1
 8005352:	b29a      	uxth	r2, r3
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005358:	e02b      	b.n	80053b2 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	689b      	ldr	r3, [r3, #8]
 8005360:	f003 0302 	and.w	r3, r3, #2
 8005364:	2b02      	cmp	r3, #2
 8005366:	d112      	bne.n	800538e <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800536c:	881a      	ldrh	r2, [r3, #0]
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005378:	1c9a      	adds	r2, r3, #2
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005382:	b29b      	uxth	r3, r3
 8005384:	3b01      	subs	r3, #1
 8005386:	b29a      	uxth	r2, r3
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800538c:	e011      	b.n	80053b2 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800538e:	f7fd faaf 	bl	80028f0 <HAL_GetTick>
 8005392:	4602      	mov	r2, r0
 8005394:	69bb      	ldr	r3, [r7, #24]
 8005396:	1ad3      	subs	r3, r2, r3
 8005398:	683a      	ldr	r2, [r7, #0]
 800539a:	429a      	cmp	r2, r3
 800539c:	d803      	bhi.n	80053a6 <HAL_SPI_Transmit+0x16c>
 800539e:	683b      	ldr	r3, [r7, #0]
 80053a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053a4:	d102      	bne.n	80053ac <HAL_SPI_Transmit+0x172>
 80053a6:	683b      	ldr	r3, [r7, #0]
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d102      	bne.n	80053b2 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 80053ac:	2303      	movs	r3, #3
 80053ae:	77fb      	strb	r3, [r7, #31]
          goto error;
 80053b0:	e0a4      	b.n	80054fc <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80053b6:	b29b      	uxth	r3, r3
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d1ce      	bne.n	800535a <HAL_SPI_Transmit+0x120>
 80053bc:	e07c      	b.n	80054b8 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	685b      	ldr	r3, [r3, #4]
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d002      	beq.n	80053cc <HAL_SPI_Transmit+0x192>
 80053c6:	8afb      	ldrh	r3, [r7, #22]
 80053c8:	2b01      	cmp	r3, #1
 80053ca:	d170      	bne.n	80054ae <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80053d0:	b29b      	uxth	r3, r3
 80053d2:	2b01      	cmp	r3, #1
 80053d4:	d912      	bls.n	80053fc <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053da:	881a      	ldrh	r2, [r3, #0]
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053e6:	1c9a      	adds	r2, r3, #2
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80053f0:	b29b      	uxth	r3, r3
 80053f2:	3b02      	subs	r3, #2
 80053f4:	b29a      	uxth	r2, r3
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80053fa:	e058      	b.n	80054ae <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	330c      	adds	r3, #12
 8005406:	7812      	ldrb	r2, [r2, #0]
 8005408:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800540e:	1c5a      	adds	r2, r3, #1
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005418:	b29b      	uxth	r3, r3
 800541a:	3b01      	subs	r3, #1
 800541c:	b29a      	uxth	r2, r3
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8005422:	e044      	b.n	80054ae <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	689b      	ldr	r3, [r3, #8]
 800542a:	f003 0302 	and.w	r3, r3, #2
 800542e:	2b02      	cmp	r3, #2
 8005430:	d12b      	bne.n	800548a <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005436:	b29b      	uxth	r3, r3
 8005438:	2b01      	cmp	r3, #1
 800543a:	d912      	bls.n	8005462 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005440:	881a      	ldrh	r2, [r3, #0]
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800544c:	1c9a      	adds	r2, r3, #2
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005456:	b29b      	uxth	r3, r3
 8005458:	3b02      	subs	r3, #2
 800545a:	b29a      	uxth	r2, r3
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005460:	e025      	b.n	80054ae <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	330c      	adds	r3, #12
 800546c:	7812      	ldrb	r2, [r2, #0]
 800546e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005474:	1c5a      	adds	r2, r3, #1
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800547e:	b29b      	uxth	r3, r3
 8005480:	3b01      	subs	r3, #1
 8005482:	b29a      	uxth	r2, r3
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005488:	e011      	b.n	80054ae <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800548a:	f7fd fa31 	bl	80028f0 <HAL_GetTick>
 800548e:	4602      	mov	r2, r0
 8005490:	69bb      	ldr	r3, [r7, #24]
 8005492:	1ad3      	subs	r3, r2, r3
 8005494:	683a      	ldr	r2, [r7, #0]
 8005496:	429a      	cmp	r2, r3
 8005498:	d803      	bhi.n	80054a2 <HAL_SPI_Transmit+0x268>
 800549a:	683b      	ldr	r3, [r7, #0]
 800549c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054a0:	d102      	bne.n	80054a8 <HAL_SPI_Transmit+0x26e>
 80054a2:	683b      	ldr	r3, [r7, #0]
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d102      	bne.n	80054ae <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 80054a8:	2303      	movs	r3, #3
 80054aa:	77fb      	strb	r3, [r7, #31]
          goto error;
 80054ac:	e026      	b.n	80054fc <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80054b2:	b29b      	uxth	r3, r3
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d1b5      	bne.n	8005424 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80054b8:	69ba      	ldr	r2, [r7, #24]
 80054ba:	6839      	ldr	r1, [r7, #0]
 80054bc:	68f8      	ldr	r0, [r7, #12]
 80054be:	f000 f949 	bl	8005754 <SPI_EndRxTxTransaction>
 80054c2:	4603      	mov	r3, r0
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d002      	beq.n	80054ce <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	2220      	movs	r2, #32
 80054cc:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	689b      	ldr	r3, [r3, #8]
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d10a      	bne.n	80054ec <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80054d6:	2300      	movs	r3, #0
 80054d8:	613b      	str	r3, [r7, #16]
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	68db      	ldr	r3, [r3, #12]
 80054e0:	613b      	str	r3, [r7, #16]
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	689b      	ldr	r3, [r3, #8]
 80054e8:	613b      	str	r3, [r7, #16]
 80054ea:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d002      	beq.n	80054fa <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 80054f4:	2301      	movs	r3, #1
 80054f6:	77fb      	strb	r3, [r7, #31]
 80054f8:	e000      	b.n	80054fc <HAL_SPI_Transmit+0x2c2>
  }

error:
 80054fa:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	2201      	movs	r2, #1
 8005500:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	2200      	movs	r2, #0
 8005508:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800550c:	7ffb      	ldrb	r3, [r7, #31]
}
 800550e:	4618      	mov	r0, r3
 8005510:	3720      	adds	r7, #32
 8005512:	46bd      	mov	sp, r7
 8005514:	bd80      	pop	{r7, pc}
	...

08005518 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005518:	b580      	push	{r7, lr}
 800551a:	b088      	sub	sp, #32
 800551c:	af00      	add	r7, sp, #0
 800551e:	60f8      	str	r0, [r7, #12]
 8005520:	60b9      	str	r1, [r7, #8]
 8005522:	603b      	str	r3, [r7, #0]
 8005524:	4613      	mov	r3, r2
 8005526:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005528:	f7fd f9e2 	bl	80028f0 <HAL_GetTick>
 800552c:	4602      	mov	r2, r0
 800552e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005530:	1a9b      	subs	r3, r3, r2
 8005532:	683a      	ldr	r2, [r7, #0]
 8005534:	4413      	add	r3, r2
 8005536:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005538:	f7fd f9da 	bl	80028f0 <HAL_GetTick>
 800553c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800553e:	4b39      	ldr	r3, [pc, #228]	; (8005624 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	015b      	lsls	r3, r3, #5
 8005544:	0d1b      	lsrs	r3, r3, #20
 8005546:	69fa      	ldr	r2, [r7, #28]
 8005548:	fb02 f303 	mul.w	r3, r2, r3
 800554c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800554e:	e054      	b.n	80055fa <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005550:	683b      	ldr	r3, [r7, #0]
 8005552:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005556:	d050      	beq.n	80055fa <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005558:	f7fd f9ca 	bl	80028f0 <HAL_GetTick>
 800555c:	4602      	mov	r2, r0
 800555e:	69bb      	ldr	r3, [r7, #24]
 8005560:	1ad3      	subs	r3, r2, r3
 8005562:	69fa      	ldr	r2, [r7, #28]
 8005564:	429a      	cmp	r2, r3
 8005566:	d902      	bls.n	800556e <SPI_WaitFlagStateUntilTimeout+0x56>
 8005568:	69fb      	ldr	r3, [r7, #28]
 800556a:	2b00      	cmp	r3, #0
 800556c:	d13d      	bne.n	80055ea <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	685a      	ldr	r2, [r3, #4]
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800557c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	685b      	ldr	r3, [r3, #4]
 8005582:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005586:	d111      	bne.n	80055ac <SPI_WaitFlagStateUntilTimeout+0x94>
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	689b      	ldr	r3, [r3, #8]
 800558c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005590:	d004      	beq.n	800559c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	689b      	ldr	r3, [r3, #8]
 8005596:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800559a:	d107      	bne.n	80055ac <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	681a      	ldr	r2, [r3, #0]
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80055aa:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055b0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80055b4:	d10f      	bne.n	80055d6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	681a      	ldr	r2, [r3, #0]
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80055c4:	601a      	str	r2, [r3, #0]
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	681a      	ldr	r2, [r3, #0]
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80055d4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	2201      	movs	r2, #1
 80055da:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	2200      	movs	r2, #0
 80055e2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80055e6:	2303      	movs	r3, #3
 80055e8:	e017      	b.n	800561a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80055ea:	697b      	ldr	r3, [r7, #20]
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d101      	bne.n	80055f4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80055f0:	2300      	movs	r3, #0
 80055f2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80055f4:	697b      	ldr	r3, [r7, #20]
 80055f6:	3b01      	subs	r3, #1
 80055f8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	689a      	ldr	r2, [r3, #8]
 8005600:	68bb      	ldr	r3, [r7, #8]
 8005602:	4013      	ands	r3, r2
 8005604:	68ba      	ldr	r2, [r7, #8]
 8005606:	429a      	cmp	r2, r3
 8005608:	bf0c      	ite	eq
 800560a:	2301      	moveq	r3, #1
 800560c:	2300      	movne	r3, #0
 800560e:	b2db      	uxtb	r3, r3
 8005610:	461a      	mov	r2, r3
 8005612:	79fb      	ldrb	r3, [r7, #7]
 8005614:	429a      	cmp	r2, r3
 8005616:	d19b      	bne.n	8005550 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005618:	2300      	movs	r3, #0
}
 800561a:	4618      	mov	r0, r3
 800561c:	3720      	adds	r7, #32
 800561e:	46bd      	mov	sp, r7
 8005620:	bd80      	pop	{r7, pc}
 8005622:	bf00      	nop
 8005624:	20002780 	.word	0x20002780

08005628 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005628:	b580      	push	{r7, lr}
 800562a:	b08a      	sub	sp, #40	; 0x28
 800562c:	af00      	add	r7, sp, #0
 800562e:	60f8      	str	r0, [r7, #12]
 8005630:	60b9      	str	r1, [r7, #8]
 8005632:	607a      	str	r2, [r7, #4]
 8005634:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8005636:	2300      	movs	r3, #0
 8005638:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800563a:	f7fd f959 	bl	80028f0 <HAL_GetTick>
 800563e:	4602      	mov	r2, r0
 8005640:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005642:	1a9b      	subs	r3, r3, r2
 8005644:	683a      	ldr	r2, [r7, #0]
 8005646:	4413      	add	r3, r2
 8005648:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800564a:	f7fd f951 	bl	80028f0 <HAL_GetTick>
 800564e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	330c      	adds	r3, #12
 8005656:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005658:	4b3d      	ldr	r3, [pc, #244]	; (8005750 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800565a:	681a      	ldr	r2, [r3, #0]
 800565c:	4613      	mov	r3, r2
 800565e:	009b      	lsls	r3, r3, #2
 8005660:	4413      	add	r3, r2
 8005662:	00da      	lsls	r2, r3, #3
 8005664:	1ad3      	subs	r3, r2, r3
 8005666:	0d1b      	lsrs	r3, r3, #20
 8005668:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800566a:	fb02 f303 	mul.w	r3, r2, r3
 800566e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8005670:	e060      	b.n	8005734 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8005672:	68bb      	ldr	r3, [r7, #8]
 8005674:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005678:	d107      	bne.n	800568a <SPI_WaitFifoStateUntilTimeout+0x62>
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	2b00      	cmp	r3, #0
 800567e:	d104      	bne.n	800568a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8005680:	69fb      	ldr	r3, [r7, #28]
 8005682:	781b      	ldrb	r3, [r3, #0]
 8005684:	b2db      	uxtb	r3, r3
 8005686:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8005688:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800568a:	683b      	ldr	r3, [r7, #0]
 800568c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005690:	d050      	beq.n	8005734 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005692:	f7fd f92d 	bl	80028f0 <HAL_GetTick>
 8005696:	4602      	mov	r2, r0
 8005698:	6a3b      	ldr	r3, [r7, #32]
 800569a:	1ad3      	subs	r3, r2, r3
 800569c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800569e:	429a      	cmp	r2, r3
 80056a0:	d902      	bls.n	80056a8 <SPI_WaitFifoStateUntilTimeout+0x80>
 80056a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d13d      	bne.n	8005724 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	685a      	ldr	r2, [r3, #4]
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80056b6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	685b      	ldr	r3, [r3, #4]
 80056bc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80056c0:	d111      	bne.n	80056e6 <SPI_WaitFifoStateUntilTimeout+0xbe>
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	689b      	ldr	r3, [r3, #8]
 80056c6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80056ca:	d004      	beq.n	80056d6 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	689b      	ldr	r3, [r3, #8]
 80056d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80056d4:	d107      	bne.n	80056e6 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	681a      	ldr	r2, [r3, #0]
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80056e4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80056ee:	d10f      	bne.n	8005710 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	681a      	ldr	r2, [r3, #0]
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80056fe:	601a      	str	r2, [r3, #0]
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	681a      	ldr	r2, [r3, #0]
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800570e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	2201      	movs	r2, #1
 8005714:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	2200      	movs	r2, #0
 800571c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005720:	2303      	movs	r3, #3
 8005722:	e010      	b.n	8005746 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005724:	69bb      	ldr	r3, [r7, #24]
 8005726:	2b00      	cmp	r3, #0
 8005728:	d101      	bne.n	800572e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800572a:	2300      	movs	r3, #0
 800572c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800572e:	69bb      	ldr	r3, [r7, #24]
 8005730:	3b01      	subs	r3, #1
 8005732:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	689a      	ldr	r2, [r3, #8]
 800573a:	68bb      	ldr	r3, [r7, #8]
 800573c:	4013      	ands	r3, r2
 800573e:	687a      	ldr	r2, [r7, #4]
 8005740:	429a      	cmp	r2, r3
 8005742:	d196      	bne.n	8005672 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8005744:	2300      	movs	r3, #0
}
 8005746:	4618      	mov	r0, r3
 8005748:	3728      	adds	r7, #40	; 0x28
 800574a:	46bd      	mov	sp, r7
 800574c:	bd80      	pop	{r7, pc}
 800574e:	bf00      	nop
 8005750:	20002780 	.word	0x20002780

08005754 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005754:	b580      	push	{r7, lr}
 8005756:	b088      	sub	sp, #32
 8005758:	af02      	add	r7, sp, #8
 800575a:	60f8      	str	r0, [r7, #12]
 800575c:	60b9      	str	r1, [r7, #8]
 800575e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	9300      	str	r3, [sp, #0]
 8005764:	68bb      	ldr	r3, [r7, #8]
 8005766:	2200      	movs	r2, #0
 8005768:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800576c:	68f8      	ldr	r0, [r7, #12]
 800576e:	f7ff ff5b 	bl	8005628 <SPI_WaitFifoStateUntilTimeout>
 8005772:	4603      	mov	r3, r0
 8005774:	2b00      	cmp	r3, #0
 8005776:	d007      	beq.n	8005788 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800577c:	f043 0220 	orr.w	r2, r3, #32
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005784:	2303      	movs	r3, #3
 8005786:	e046      	b.n	8005816 <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005788:	4b25      	ldr	r3, [pc, #148]	; (8005820 <SPI_EndRxTxTransaction+0xcc>)
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	4a25      	ldr	r2, [pc, #148]	; (8005824 <SPI_EndRxTxTransaction+0xd0>)
 800578e:	fba2 2303 	umull	r2, r3, r2, r3
 8005792:	0d5b      	lsrs	r3, r3, #21
 8005794:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005798:	fb02 f303 	mul.w	r3, r2, r3
 800579c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	685b      	ldr	r3, [r3, #4]
 80057a2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80057a6:	d112      	bne.n	80057ce <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	9300      	str	r3, [sp, #0]
 80057ac:	68bb      	ldr	r3, [r7, #8]
 80057ae:	2200      	movs	r2, #0
 80057b0:	2180      	movs	r1, #128	; 0x80
 80057b2:	68f8      	ldr	r0, [r7, #12]
 80057b4:	f7ff feb0 	bl	8005518 <SPI_WaitFlagStateUntilTimeout>
 80057b8:	4603      	mov	r3, r0
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d016      	beq.n	80057ec <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80057c2:	f043 0220 	orr.w	r2, r3, #32
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 80057ca:	2303      	movs	r3, #3
 80057cc:	e023      	b.n	8005816 <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80057ce:	697b      	ldr	r3, [r7, #20]
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d00a      	beq.n	80057ea <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 80057d4:	697b      	ldr	r3, [r7, #20]
 80057d6:	3b01      	subs	r3, #1
 80057d8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	689b      	ldr	r3, [r3, #8]
 80057e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057e4:	2b80      	cmp	r3, #128	; 0x80
 80057e6:	d0f2      	beq.n	80057ce <SPI_EndRxTxTransaction+0x7a>
 80057e8:	e000      	b.n	80057ec <SPI_EndRxTxTransaction+0x98>
        break;
 80057ea:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	9300      	str	r3, [sp, #0]
 80057f0:	68bb      	ldr	r3, [r7, #8]
 80057f2:	2200      	movs	r2, #0
 80057f4:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80057f8:	68f8      	ldr	r0, [r7, #12]
 80057fa:	f7ff ff15 	bl	8005628 <SPI_WaitFifoStateUntilTimeout>
 80057fe:	4603      	mov	r3, r0
 8005800:	2b00      	cmp	r3, #0
 8005802:	d007      	beq.n	8005814 <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005808:	f043 0220 	orr.w	r2, r3, #32
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005810:	2303      	movs	r3, #3
 8005812:	e000      	b.n	8005816 <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 8005814:	2300      	movs	r3, #0
}
 8005816:	4618      	mov	r0, r3
 8005818:	3718      	adds	r7, #24
 800581a:	46bd      	mov	sp, r7
 800581c:	bd80      	pop	{r7, pc}
 800581e:	bf00      	nop
 8005820:	20002780 	.word	0x20002780
 8005824:	165e9f81 	.word	0x165e9f81

08005828 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005828:	b580      	push	{r7, lr}
 800582a:	b082      	sub	sp, #8
 800582c:	af00      	add	r7, sp, #0
 800582e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	2b00      	cmp	r3, #0
 8005834:	d101      	bne.n	800583a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005836:	2301      	movs	r3, #1
 8005838:	e049      	b.n	80058ce <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005840:	b2db      	uxtb	r3, r3
 8005842:	2b00      	cmp	r3, #0
 8005844:	d106      	bne.n	8005854 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	2200      	movs	r2, #0
 800584a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800584e:	6878      	ldr	r0, [r7, #4]
 8005850:	f7fc fe10 	bl	8002474 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	2202      	movs	r2, #2
 8005858:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681a      	ldr	r2, [r3, #0]
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	3304      	adds	r3, #4
 8005864:	4619      	mov	r1, r3
 8005866:	4610      	mov	r0, r2
 8005868:	f000 fc7c 	bl	8006164 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	2201      	movs	r2, #1
 8005870:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	2201      	movs	r2, #1
 8005878:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	2201      	movs	r2, #1
 8005880:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	2201      	movs	r2, #1
 8005888:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	2201      	movs	r2, #1
 8005890:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	2201      	movs	r2, #1
 8005898:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	2201      	movs	r2, #1
 80058a0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	2201      	movs	r2, #1
 80058a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	2201      	movs	r2, #1
 80058b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	2201      	movs	r2, #1
 80058b8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	2201      	movs	r2, #1
 80058c0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	2201      	movs	r2, #1
 80058c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80058cc:	2300      	movs	r3, #0
}
 80058ce:	4618      	mov	r0, r3
 80058d0:	3708      	adds	r7, #8
 80058d2:	46bd      	mov	sp, r7
 80058d4:	bd80      	pop	{r7, pc}
	...

080058d8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80058d8:	b480      	push	{r7}
 80058da:	b085      	sub	sp, #20
 80058dc:	af00      	add	r7, sp, #0
 80058de:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80058e6:	b2db      	uxtb	r3, r3
 80058e8:	2b01      	cmp	r3, #1
 80058ea:	d001      	beq.n	80058f0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80058ec:	2301      	movs	r3, #1
 80058ee:	e04c      	b.n	800598a <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	2202      	movs	r2, #2
 80058f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	4a26      	ldr	r2, [pc, #152]	; (8005998 <HAL_TIM_Base_Start+0xc0>)
 80058fe:	4293      	cmp	r3, r2
 8005900:	d022      	beq.n	8005948 <HAL_TIM_Base_Start+0x70>
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800590a:	d01d      	beq.n	8005948 <HAL_TIM_Base_Start+0x70>
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	4a22      	ldr	r2, [pc, #136]	; (800599c <HAL_TIM_Base_Start+0xc4>)
 8005912:	4293      	cmp	r3, r2
 8005914:	d018      	beq.n	8005948 <HAL_TIM_Base_Start+0x70>
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	4a21      	ldr	r2, [pc, #132]	; (80059a0 <HAL_TIM_Base_Start+0xc8>)
 800591c:	4293      	cmp	r3, r2
 800591e:	d013      	beq.n	8005948 <HAL_TIM_Base_Start+0x70>
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	4a1f      	ldr	r2, [pc, #124]	; (80059a4 <HAL_TIM_Base_Start+0xcc>)
 8005926:	4293      	cmp	r3, r2
 8005928:	d00e      	beq.n	8005948 <HAL_TIM_Base_Start+0x70>
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	4a1e      	ldr	r2, [pc, #120]	; (80059a8 <HAL_TIM_Base_Start+0xd0>)
 8005930:	4293      	cmp	r3, r2
 8005932:	d009      	beq.n	8005948 <HAL_TIM_Base_Start+0x70>
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	4a1c      	ldr	r2, [pc, #112]	; (80059ac <HAL_TIM_Base_Start+0xd4>)
 800593a:	4293      	cmp	r3, r2
 800593c:	d004      	beq.n	8005948 <HAL_TIM_Base_Start+0x70>
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	4a1b      	ldr	r2, [pc, #108]	; (80059b0 <HAL_TIM_Base_Start+0xd8>)
 8005944:	4293      	cmp	r3, r2
 8005946:	d115      	bne.n	8005974 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	689a      	ldr	r2, [r3, #8]
 800594e:	4b19      	ldr	r3, [pc, #100]	; (80059b4 <HAL_TIM_Base_Start+0xdc>)
 8005950:	4013      	ands	r3, r2
 8005952:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	2b06      	cmp	r3, #6
 8005958:	d015      	beq.n	8005986 <HAL_TIM_Base_Start+0xae>
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005960:	d011      	beq.n	8005986 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	681a      	ldr	r2, [r3, #0]
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	f042 0201 	orr.w	r2, r2, #1
 8005970:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005972:	e008      	b.n	8005986 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	681a      	ldr	r2, [r3, #0]
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	f042 0201 	orr.w	r2, r2, #1
 8005982:	601a      	str	r2, [r3, #0]
 8005984:	e000      	b.n	8005988 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005986:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005988:	2300      	movs	r3, #0
}
 800598a:	4618      	mov	r0, r3
 800598c:	3714      	adds	r7, #20
 800598e:	46bd      	mov	sp, r7
 8005990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005994:	4770      	bx	lr
 8005996:	bf00      	nop
 8005998:	40010000 	.word	0x40010000
 800599c:	40000400 	.word	0x40000400
 80059a0:	40000800 	.word	0x40000800
 80059a4:	40000c00 	.word	0x40000c00
 80059a8:	40010400 	.word	0x40010400
 80059ac:	40014000 	.word	0x40014000
 80059b0:	40001800 	.word	0x40001800
 80059b4:	00010007 	.word	0x00010007

080059b8 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 80059b8:	b480      	push	{r7}
 80059ba:	b083      	sub	sp, #12
 80059bc:	af00      	add	r7, sp, #0
 80059be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	6a1a      	ldr	r2, [r3, #32]
 80059c6:	f241 1311 	movw	r3, #4369	; 0x1111
 80059ca:	4013      	ands	r3, r2
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d10f      	bne.n	80059f0 <HAL_TIM_Base_Stop+0x38>
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	6a1a      	ldr	r2, [r3, #32]
 80059d6:	f240 4344 	movw	r3, #1092	; 0x444
 80059da:	4013      	ands	r3, r2
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d107      	bne.n	80059f0 <HAL_TIM_Base_Stop+0x38>
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	681a      	ldr	r2, [r3, #0]
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	f022 0201 	bic.w	r2, r2, #1
 80059ee:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	2201      	movs	r2, #1
 80059f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80059f8:	2300      	movs	r3, #0
}
 80059fa:	4618      	mov	r0, r3
 80059fc:	370c      	adds	r7, #12
 80059fe:	46bd      	mov	sp, r7
 8005a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a04:	4770      	bx	lr

08005a06 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005a06:	b580      	push	{r7, lr}
 8005a08:	b082      	sub	sp, #8
 8005a0a:	af00      	add	r7, sp, #0
 8005a0c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d101      	bne.n	8005a18 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005a14:	2301      	movs	r3, #1
 8005a16:	e049      	b.n	8005aac <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a1e:	b2db      	uxtb	r3, r3
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d106      	bne.n	8005a32 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	2200      	movs	r2, #0
 8005a28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005a2c:	6878      	ldr	r0, [r7, #4]
 8005a2e:	f7fc fd3f 	bl	80024b0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	2202      	movs	r2, #2
 8005a36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681a      	ldr	r2, [r3, #0]
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	3304      	adds	r3, #4
 8005a42:	4619      	mov	r1, r3
 8005a44:	4610      	mov	r0, r2
 8005a46:	f000 fb8d 	bl	8006164 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	2201      	movs	r2, #1
 8005a4e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	2201      	movs	r2, #1
 8005a56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	2201      	movs	r2, #1
 8005a5e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	2201      	movs	r2, #1
 8005a66:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	2201      	movs	r2, #1
 8005a6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	2201      	movs	r2, #1
 8005a76:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	2201      	movs	r2, #1
 8005a7e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	2201      	movs	r2, #1
 8005a86:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	2201      	movs	r2, #1
 8005a8e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	2201      	movs	r2, #1
 8005a96:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	2201      	movs	r2, #1
 8005a9e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	2201      	movs	r2, #1
 8005aa6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005aaa:	2300      	movs	r3, #0
}
 8005aac:	4618      	mov	r0, r3
 8005aae:	3708      	adds	r7, #8
 8005ab0:	46bd      	mov	sp, r7
 8005ab2:	bd80      	pop	{r7, pc}

08005ab4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005ab4:	b580      	push	{r7, lr}
 8005ab6:	b084      	sub	sp, #16
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	6078      	str	r0, [r7, #4]
 8005abc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005abe:	683b      	ldr	r3, [r7, #0]
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d109      	bne.n	8005ad8 <HAL_TIM_PWM_Start+0x24>
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005aca:	b2db      	uxtb	r3, r3
 8005acc:	2b01      	cmp	r3, #1
 8005ace:	bf14      	ite	ne
 8005ad0:	2301      	movne	r3, #1
 8005ad2:	2300      	moveq	r3, #0
 8005ad4:	b2db      	uxtb	r3, r3
 8005ad6:	e03c      	b.n	8005b52 <HAL_TIM_PWM_Start+0x9e>
 8005ad8:	683b      	ldr	r3, [r7, #0]
 8005ada:	2b04      	cmp	r3, #4
 8005adc:	d109      	bne.n	8005af2 <HAL_TIM_PWM_Start+0x3e>
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005ae4:	b2db      	uxtb	r3, r3
 8005ae6:	2b01      	cmp	r3, #1
 8005ae8:	bf14      	ite	ne
 8005aea:	2301      	movne	r3, #1
 8005aec:	2300      	moveq	r3, #0
 8005aee:	b2db      	uxtb	r3, r3
 8005af0:	e02f      	b.n	8005b52 <HAL_TIM_PWM_Start+0x9e>
 8005af2:	683b      	ldr	r3, [r7, #0]
 8005af4:	2b08      	cmp	r3, #8
 8005af6:	d109      	bne.n	8005b0c <HAL_TIM_PWM_Start+0x58>
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005afe:	b2db      	uxtb	r3, r3
 8005b00:	2b01      	cmp	r3, #1
 8005b02:	bf14      	ite	ne
 8005b04:	2301      	movne	r3, #1
 8005b06:	2300      	moveq	r3, #0
 8005b08:	b2db      	uxtb	r3, r3
 8005b0a:	e022      	b.n	8005b52 <HAL_TIM_PWM_Start+0x9e>
 8005b0c:	683b      	ldr	r3, [r7, #0]
 8005b0e:	2b0c      	cmp	r3, #12
 8005b10:	d109      	bne.n	8005b26 <HAL_TIM_PWM_Start+0x72>
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005b18:	b2db      	uxtb	r3, r3
 8005b1a:	2b01      	cmp	r3, #1
 8005b1c:	bf14      	ite	ne
 8005b1e:	2301      	movne	r3, #1
 8005b20:	2300      	moveq	r3, #0
 8005b22:	b2db      	uxtb	r3, r3
 8005b24:	e015      	b.n	8005b52 <HAL_TIM_PWM_Start+0x9e>
 8005b26:	683b      	ldr	r3, [r7, #0]
 8005b28:	2b10      	cmp	r3, #16
 8005b2a:	d109      	bne.n	8005b40 <HAL_TIM_PWM_Start+0x8c>
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005b32:	b2db      	uxtb	r3, r3
 8005b34:	2b01      	cmp	r3, #1
 8005b36:	bf14      	ite	ne
 8005b38:	2301      	movne	r3, #1
 8005b3a:	2300      	moveq	r3, #0
 8005b3c:	b2db      	uxtb	r3, r3
 8005b3e:	e008      	b.n	8005b52 <HAL_TIM_PWM_Start+0x9e>
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005b46:	b2db      	uxtb	r3, r3
 8005b48:	2b01      	cmp	r3, #1
 8005b4a:	bf14      	ite	ne
 8005b4c:	2301      	movne	r3, #1
 8005b4e:	2300      	moveq	r3, #0
 8005b50:	b2db      	uxtb	r3, r3
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d001      	beq.n	8005b5a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8005b56:	2301      	movs	r3, #1
 8005b58:	e092      	b.n	8005c80 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005b5a:	683b      	ldr	r3, [r7, #0]
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d104      	bne.n	8005b6a <HAL_TIM_PWM_Start+0xb6>
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	2202      	movs	r2, #2
 8005b64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005b68:	e023      	b.n	8005bb2 <HAL_TIM_PWM_Start+0xfe>
 8005b6a:	683b      	ldr	r3, [r7, #0]
 8005b6c:	2b04      	cmp	r3, #4
 8005b6e:	d104      	bne.n	8005b7a <HAL_TIM_PWM_Start+0xc6>
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	2202      	movs	r2, #2
 8005b74:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005b78:	e01b      	b.n	8005bb2 <HAL_TIM_PWM_Start+0xfe>
 8005b7a:	683b      	ldr	r3, [r7, #0]
 8005b7c:	2b08      	cmp	r3, #8
 8005b7e:	d104      	bne.n	8005b8a <HAL_TIM_PWM_Start+0xd6>
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	2202      	movs	r2, #2
 8005b84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005b88:	e013      	b.n	8005bb2 <HAL_TIM_PWM_Start+0xfe>
 8005b8a:	683b      	ldr	r3, [r7, #0]
 8005b8c:	2b0c      	cmp	r3, #12
 8005b8e:	d104      	bne.n	8005b9a <HAL_TIM_PWM_Start+0xe6>
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	2202      	movs	r2, #2
 8005b94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005b98:	e00b      	b.n	8005bb2 <HAL_TIM_PWM_Start+0xfe>
 8005b9a:	683b      	ldr	r3, [r7, #0]
 8005b9c:	2b10      	cmp	r3, #16
 8005b9e:	d104      	bne.n	8005baa <HAL_TIM_PWM_Start+0xf6>
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	2202      	movs	r2, #2
 8005ba4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005ba8:	e003      	b.n	8005bb2 <HAL_TIM_PWM_Start+0xfe>
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	2202      	movs	r2, #2
 8005bae:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	2201      	movs	r2, #1
 8005bb8:	6839      	ldr	r1, [r7, #0]
 8005bba:	4618      	mov	r0, r3
 8005bbc:	f000 fe6a 	bl	8006894 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	4a30      	ldr	r2, [pc, #192]	; (8005c88 <HAL_TIM_PWM_Start+0x1d4>)
 8005bc6:	4293      	cmp	r3, r2
 8005bc8:	d004      	beq.n	8005bd4 <HAL_TIM_PWM_Start+0x120>
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	4a2f      	ldr	r2, [pc, #188]	; (8005c8c <HAL_TIM_PWM_Start+0x1d8>)
 8005bd0:	4293      	cmp	r3, r2
 8005bd2:	d101      	bne.n	8005bd8 <HAL_TIM_PWM_Start+0x124>
 8005bd4:	2301      	movs	r3, #1
 8005bd6:	e000      	b.n	8005bda <HAL_TIM_PWM_Start+0x126>
 8005bd8:	2300      	movs	r3, #0
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d007      	beq.n	8005bee <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005bec:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	4a25      	ldr	r2, [pc, #148]	; (8005c88 <HAL_TIM_PWM_Start+0x1d4>)
 8005bf4:	4293      	cmp	r3, r2
 8005bf6:	d022      	beq.n	8005c3e <HAL_TIM_PWM_Start+0x18a>
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c00:	d01d      	beq.n	8005c3e <HAL_TIM_PWM_Start+0x18a>
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	4a22      	ldr	r2, [pc, #136]	; (8005c90 <HAL_TIM_PWM_Start+0x1dc>)
 8005c08:	4293      	cmp	r3, r2
 8005c0a:	d018      	beq.n	8005c3e <HAL_TIM_PWM_Start+0x18a>
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	4a20      	ldr	r2, [pc, #128]	; (8005c94 <HAL_TIM_PWM_Start+0x1e0>)
 8005c12:	4293      	cmp	r3, r2
 8005c14:	d013      	beq.n	8005c3e <HAL_TIM_PWM_Start+0x18a>
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	4a1f      	ldr	r2, [pc, #124]	; (8005c98 <HAL_TIM_PWM_Start+0x1e4>)
 8005c1c:	4293      	cmp	r3, r2
 8005c1e:	d00e      	beq.n	8005c3e <HAL_TIM_PWM_Start+0x18a>
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	4a19      	ldr	r2, [pc, #100]	; (8005c8c <HAL_TIM_PWM_Start+0x1d8>)
 8005c26:	4293      	cmp	r3, r2
 8005c28:	d009      	beq.n	8005c3e <HAL_TIM_PWM_Start+0x18a>
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	4a1b      	ldr	r2, [pc, #108]	; (8005c9c <HAL_TIM_PWM_Start+0x1e8>)
 8005c30:	4293      	cmp	r3, r2
 8005c32:	d004      	beq.n	8005c3e <HAL_TIM_PWM_Start+0x18a>
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	4a19      	ldr	r2, [pc, #100]	; (8005ca0 <HAL_TIM_PWM_Start+0x1ec>)
 8005c3a:	4293      	cmp	r3, r2
 8005c3c:	d115      	bne.n	8005c6a <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	689a      	ldr	r2, [r3, #8]
 8005c44:	4b17      	ldr	r3, [pc, #92]	; (8005ca4 <HAL_TIM_PWM_Start+0x1f0>)
 8005c46:	4013      	ands	r3, r2
 8005c48:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	2b06      	cmp	r3, #6
 8005c4e:	d015      	beq.n	8005c7c <HAL_TIM_PWM_Start+0x1c8>
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c56:	d011      	beq.n	8005c7c <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	681a      	ldr	r2, [r3, #0]
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	f042 0201 	orr.w	r2, r2, #1
 8005c66:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c68:	e008      	b.n	8005c7c <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	681a      	ldr	r2, [r3, #0]
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	f042 0201 	orr.w	r2, r2, #1
 8005c78:	601a      	str	r2, [r3, #0]
 8005c7a:	e000      	b.n	8005c7e <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c7c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005c7e:	2300      	movs	r3, #0
}
 8005c80:	4618      	mov	r0, r3
 8005c82:	3710      	adds	r7, #16
 8005c84:	46bd      	mov	sp, r7
 8005c86:	bd80      	pop	{r7, pc}
 8005c88:	40010000 	.word	0x40010000
 8005c8c:	40010400 	.word	0x40010400
 8005c90:	40000400 	.word	0x40000400
 8005c94:	40000800 	.word	0x40000800
 8005c98:	40000c00 	.word	0x40000c00
 8005c9c:	40014000 	.word	0x40014000
 8005ca0:	40001800 	.word	0x40001800
 8005ca4:	00010007 	.word	0x00010007

08005ca8 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005ca8:	b580      	push	{r7, lr}
 8005caa:	b082      	sub	sp, #8
 8005cac:	af00      	add	r7, sp, #0
 8005cae:	6078      	str	r0, [r7, #4]
 8005cb0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	2200      	movs	r2, #0
 8005cb8:	6839      	ldr	r1, [r7, #0]
 8005cba:	4618      	mov	r0, r3
 8005cbc:	f000 fdea 	bl	8006894 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	4a36      	ldr	r2, [pc, #216]	; (8005da0 <HAL_TIM_PWM_Stop+0xf8>)
 8005cc6:	4293      	cmp	r3, r2
 8005cc8:	d004      	beq.n	8005cd4 <HAL_TIM_PWM_Stop+0x2c>
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	4a35      	ldr	r2, [pc, #212]	; (8005da4 <HAL_TIM_PWM_Stop+0xfc>)
 8005cd0:	4293      	cmp	r3, r2
 8005cd2:	d101      	bne.n	8005cd8 <HAL_TIM_PWM_Stop+0x30>
 8005cd4:	2301      	movs	r3, #1
 8005cd6:	e000      	b.n	8005cda <HAL_TIM_PWM_Stop+0x32>
 8005cd8:	2300      	movs	r3, #0
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d017      	beq.n	8005d0e <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	6a1a      	ldr	r2, [r3, #32]
 8005ce4:	f241 1311 	movw	r3, #4369	; 0x1111
 8005ce8:	4013      	ands	r3, r2
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d10f      	bne.n	8005d0e <HAL_TIM_PWM_Stop+0x66>
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	6a1a      	ldr	r2, [r3, #32]
 8005cf4:	f240 4344 	movw	r3, #1092	; 0x444
 8005cf8:	4013      	ands	r3, r2
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d107      	bne.n	8005d0e <HAL_TIM_PWM_Stop+0x66>
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005d0c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	6a1a      	ldr	r2, [r3, #32]
 8005d14:	f241 1311 	movw	r3, #4369	; 0x1111
 8005d18:	4013      	ands	r3, r2
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d10f      	bne.n	8005d3e <HAL_TIM_PWM_Stop+0x96>
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	6a1a      	ldr	r2, [r3, #32]
 8005d24:	f240 4344 	movw	r3, #1092	; 0x444
 8005d28:	4013      	ands	r3, r2
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d107      	bne.n	8005d3e <HAL_TIM_PWM_Stop+0x96>
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	681a      	ldr	r2, [r3, #0]
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	f022 0201 	bic.w	r2, r2, #1
 8005d3c:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005d3e:	683b      	ldr	r3, [r7, #0]
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d104      	bne.n	8005d4e <HAL_TIM_PWM_Stop+0xa6>
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	2201      	movs	r2, #1
 8005d48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005d4c:	e023      	b.n	8005d96 <HAL_TIM_PWM_Stop+0xee>
 8005d4e:	683b      	ldr	r3, [r7, #0]
 8005d50:	2b04      	cmp	r3, #4
 8005d52:	d104      	bne.n	8005d5e <HAL_TIM_PWM_Stop+0xb6>
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	2201      	movs	r2, #1
 8005d58:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005d5c:	e01b      	b.n	8005d96 <HAL_TIM_PWM_Stop+0xee>
 8005d5e:	683b      	ldr	r3, [r7, #0]
 8005d60:	2b08      	cmp	r3, #8
 8005d62:	d104      	bne.n	8005d6e <HAL_TIM_PWM_Stop+0xc6>
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	2201      	movs	r2, #1
 8005d68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005d6c:	e013      	b.n	8005d96 <HAL_TIM_PWM_Stop+0xee>
 8005d6e:	683b      	ldr	r3, [r7, #0]
 8005d70:	2b0c      	cmp	r3, #12
 8005d72:	d104      	bne.n	8005d7e <HAL_TIM_PWM_Stop+0xd6>
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	2201      	movs	r2, #1
 8005d78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005d7c:	e00b      	b.n	8005d96 <HAL_TIM_PWM_Stop+0xee>
 8005d7e:	683b      	ldr	r3, [r7, #0]
 8005d80:	2b10      	cmp	r3, #16
 8005d82:	d104      	bne.n	8005d8e <HAL_TIM_PWM_Stop+0xe6>
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	2201      	movs	r2, #1
 8005d88:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005d8c:	e003      	b.n	8005d96 <HAL_TIM_PWM_Stop+0xee>
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	2201      	movs	r2, #1
 8005d92:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 8005d96:	2300      	movs	r3, #0
}
 8005d98:	4618      	mov	r0, r3
 8005d9a:	3708      	adds	r7, #8
 8005d9c:	46bd      	mov	sp, r7
 8005d9e:	bd80      	pop	{r7, pc}
 8005da0:	40010000 	.word	0x40010000
 8005da4:	40010400 	.word	0x40010400

08005da8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005da8:	b580      	push	{r7, lr}
 8005daa:	b086      	sub	sp, #24
 8005dac:	af00      	add	r7, sp, #0
 8005dae:	60f8      	str	r0, [r7, #12]
 8005db0:	60b9      	str	r1, [r7, #8]
 8005db2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005db4:	2300      	movs	r3, #0
 8005db6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005dbe:	2b01      	cmp	r3, #1
 8005dc0:	d101      	bne.n	8005dc6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005dc2:	2302      	movs	r3, #2
 8005dc4:	e0ff      	b.n	8005fc6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	2201      	movs	r2, #1
 8005dca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	2b14      	cmp	r3, #20
 8005dd2:	f200 80f0 	bhi.w	8005fb6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005dd6:	a201      	add	r2, pc, #4	; (adr r2, 8005ddc <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005dd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ddc:	08005e31 	.word	0x08005e31
 8005de0:	08005fb7 	.word	0x08005fb7
 8005de4:	08005fb7 	.word	0x08005fb7
 8005de8:	08005fb7 	.word	0x08005fb7
 8005dec:	08005e71 	.word	0x08005e71
 8005df0:	08005fb7 	.word	0x08005fb7
 8005df4:	08005fb7 	.word	0x08005fb7
 8005df8:	08005fb7 	.word	0x08005fb7
 8005dfc:	08005eb3 	.word	0x08005eb3
 8005e00:	08005fb7 	.word	0x08005fb7
 8005e04:	08005fb7 	.word	0x08005fb7
 8005e08:	08005fb7 	.word	0x08005fb7
 8005e0c:	08005ef3 	.word	0x08005ef3
 8005e10:	08005fb7 	.word	0x08005fb7
 8005e14:	08005fb7 	.word	0x08005fb7
 8005e18:	08005fb7 	.word	0x08005fb7
 8005e1c:	08005f35 	.word	0x08005f35
 8005e20:	08005fb7 	.word	0x08005fb7
 8005e24:	08005fb7 	.word	0x08005fb7
 8005e28:	08005fb7 	.word	0x08005fb7
 8005e2c:	08005f75 	.word	0x08005f75
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	68b9      	ldr	r1, [r7, #8]
 8005e36:	4618      	mov	r0, r3
 8005e38:	f000 fa34 	bl	80062a4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	699a      	ldr	r2, [r3, #24]
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	f042 0208 	orr.w	r2, r2, #8
 8005e4a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	699a      	ldr	r2, [r3, #24]
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	f022 0204 	bic.w	r2, r2, #4
 8005e5a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	6999      	ldr	r1, [r3, #24]
 8005e62:	68bb      	ldr	r3, [r7, #8]
 8005e64:	691a      	ldr	r2, [r3, #16]
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	430a      	orrs	r2, r1
 8005e6c:	619a      	str	r2, [r3, #24]
      break;
 8005e6e:	e0a5      	b.n	8005fbc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	68b9      	ldr	r1, [r7, #8]
 8005e76:	4618      	mov	r0, r3
 8005e78:	f000 fa86 	bl	8006388 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	699a      	ldr	r2, [r3, #24]
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005e8a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	699a      	ldr	r2, [r3, #24]
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005e9a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	6999      	ldr	r1, [r3, #24]
 8005ea2:	68bb      	ldr	r3, [r7, #8]
 8005ea4:	691b      	ldr	r3, [r3, #16]
 8005ea6:	021a      	lsls	r2, r3, #8
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	430a      	orrs	r2, r1
 8005eae:	619a      	str	r2, [r3, #24]
      break;
 8005eb0:	e084      	b.n	8005fbc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	68b9      	ldr	r1, [r7, #8]
 8005eb8:	4618      	mov	r0, r3
 8005eba:	f000 fadd 	bl	8006478 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	69da      	ldr	r2, [r3, #28]
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	f042 0208 	orr.w	r2, r2, #8
 8005ecc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	69da      	ldr	r2, [r3, #28]
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	f022 0204 	bic.w	r2, r2, #4
 8005edc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	69d9      	ldr	r1, [r3, #28]
 8005ee4:	68bb      	ldr	r3, [r7, #8]
 8005ee6:	691a      	ldr	r2, [r3, #16]
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	430a      	orrs	r2, r1
 8005eee:	61da      	str	r2, [r3, #28]
      break;
 8005ef0:	e064      	b.n	8005fbc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	68b9      	ldr	r1, [r7, #8]
 8005ef8:	4618      	mov	r0, r3
 8005efa:	f000 fb33 	bl	8006564 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	69da      	ldr	r2, [r3, #28]
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005f0c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	69da      	ldr	r2, [r3, #28]
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005f1c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	69d9      	ldr	r1, [r3, #28]
 8005f24:	68bb      	ldr	r3, [r7, #8]
 8005f26:	691b      	ldr	r3, [r3, #16]
 8005f28:	021a      	lsls	r2, r3, #8
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	430a      	orrs	r2, r1
 8005f30:	61da      	str	r2, [r3, #28]
      break;
 8005f32:	e043      	b.n	8005fbc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	68b9      	ldr	r1, [r7, #8]
 8005f3a:	4618      	mov	r0, r3
 8005f3c:	f000 fb6a 	bl	8006614 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	f042 0208 	orr.w	r2, r2, #8
 8005f4e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	f022 0204 	bic.w	r2, r2, #4
 8005f5e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005f66:	68bb      	ldr	r3, [r7, #8]
 8005f68:	691a      	ldr	r2, [r3, #16]
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	430a      	orrs	r2, r1
 8005f70:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005f72:	e023      	b.n	8005fbc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	68b9      	ldr	r1, [r7, #8]
 8005f7a:	4618      	mov	r0, r3
 8005f7c:	f000 fb9c 	bl	80066b8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005f8e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005f9e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005fa6:	68bb      	ldr	r3, [r7, #8]
 8005fa8:	691b      	ldr	r3, [r3, #16]
 8005faa:	021a      	lsls	r2, r3, #8
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	430a      	orrs	r2, r1
 8005fb2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005fb4:	e002      	b.n	8005fbc <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005fb6:	2301      	movs	r3, #1
 8005fb8:	75fb      	strb	r3, [r7, #23]
      break;
 8005fba:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	2200      	movs	r2, #0
 8005fc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005fc4:	7dfb      	ldrb	r3, [r7, #23]
}
 8005fc6:	4618      	mov	r0, r3
 8005fc8:	3718      	adds	r7, #24
 8005fca:	46bd      	mov	sp, r7
 8005fcc:	bd80      	pop	{r7, pc}
 8005fce:	bf00      	nop

08005fd0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005fd0:	b580      	push	{r7, lr}
 8005fd2:	b084      	sub	sp, #16
 8005fd4:	af00      	add	r7, sp, #0
 8005fd6:	6078      	str	r0, [r7, #4]
 8005fd8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005fda:	2300      	movs	r3, #0
 8005fdc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005fe4:	2b01      	cmp	r3, #1
 8005fe6:	d101      	bne.n	8005fec <HAL_TIM_ConfigClockSource+0x1c>
 8005fe8:	2302      	movs	r3, #2
 8005fea:	e0b4      	b.n	8006156 <HAL_TIM_ConfigClockSource+0x186>
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	2201      	movs	r2, #1
 8005ff0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	2202      	movs	r2, #2
 8005ff8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	689b      	ldr	r3, [r3, #8]
 8006002:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006004:	68ba      	ldr	r2, [r7, #8]
 8006006:	4b56      	ldr	r3, [pc, #344]	; (8006160 <HAL_TIM_ConfigClockSource+0x190>)
 8006008:	4013      	ands	r3, r2
 800600a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800600c:	68bb      	ldr	r3, [r7, #8]
 800600e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006012:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	68ba      	ldr	r2, [r7, #8]
 800601a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800601c:	683b      	ldr	r3, [r7, #0]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006024:	d03e      	beq.n	80060a4 <HAL_TIM_ConfigClockSource+0xd4>
 8006026:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800602a:	f200 8087 	bhi.w	800613c <HAL_TIM_ConfigClockSource+0x16c>
 800602e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006032:	f000 8086 	beq.w	8006142 <HAL_TIM_ConfigClockSource+0x172>
 8006036:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800603a:	d87f      	bhi.n	800613c <HAL_TIM_ConfigClockSource+0x16c>
 800603c:	2b70      	cmp	r3, #112	; 0x70
 800603e:	d01a      	beq.n	8006076 <HAL_TIM_ConfigClockSource+0xa6>
 8006040:	2b70      	cmp	r3, #112	; 0x70
 8006042:	d87b      	bhi.n	800613c <HAL_TIM_ConfigClockSource+0x16c>
 8006044:	2b60      	cmp	r3, #96	; 0x60
 8006046:	d050      	beq.n	80060ea <HAL_TIM_ConfigClockSource+0x11a>
 8006048:	2b60      	cmp	r3, #96	; 0x60
 800604a:	d877      	bhi.n	800613c <HAL_TIM_ConfigClockSource+0x16c>
 800604c:	2b50      	cmp	r3, #80	; 0x50
 800604e:	d03c      	beq.n	80060ca <HAL_TIM_ConfigClockSource+0xfa>
 8006050:	2b50      	cmp	r3, #80	; 0x50
 8006052:	d873      	bhi.n	800613c <HAL_TIM_ConfigClockSource+0x16c>
 8006054:	2b40      	cmp	r3, #64	; 0x40
 8006056:	d058      	beq.n	800610a <HAL_TIM_ConfigClockSource+0x13a>
 8006058:	2b40      	cmp	r3, #64	; 0x40
 800605a:	d86f      	bhi.n	800613c <HAL_TIM_ConfigClockSource+0x16c>
 800605c:	2b30      	cmp	r3, #48	; 0x30
 800605e:	d064      	beq.n	800612a <HAL_TIM_ConfigClockSource+0x15a>
 8006060:	2b30      	cmp	r3, #48	; 0x30
 8006062:	d86b      	bhi.n	800613c <HAL_TIM_ConfigClockSource+0x16c>
 8006064:	2b20      	cmp	r3, #32
 8006066:	d060      	beq.n	800612a <HAL_TIM_ConfigClockSource+0x15a>
 8006068:	2b20      	cmp	r3, #32
 800606a:	d867      	bhi.n	800613c <HAL_TIM_ConfigClockSource+0x16c>
 800606c:	2b00      	cmp	r3, #0
 800606e:	d05c      	beq.n	800612a <HAL_TIM_ConfigClockSource+0x15a>
 8006070:	2b10      	cmp	r3, #16
 8006072:	d05a      	beq.n	800612a <HAL_TIM_ConfigClockSource+0x15a>
 8006074:	e062      	b.n	800613c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	6818      	ldr	r0, [r3, #0]
 800607a:	683b      	ldr	r3, [r7, #0]
 800607c:	6899      	ldr	r1, [r3, #8]
 800607e:	683b      	ldr	r3, [r7, #0]
 8006080:	685a      	ldr	r2, [r3, #4]
 8006082:	683b      	ldr	r3, [r7, #0]
 8006084:	68db      	ldr	r3, [r3, #12]
 8006086:	f000 fbe5 	bl	8006854 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	689b      	ldr	r3, [r3, #8]
 8006090:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006092:	68bb      	ldr	r3, [r7, #8]
 8006094:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006098:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	68ba      	ldr	r2, [r7, #8]
 80060a0:	609a      	str	r2, [r3, #8]
      break;
 80060a2:	e04f      	b.n	8006144 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	6818      	ldr	r0, [r3, #0]
 80060a8:	683b      	ldr	r3, [r7, #0]
 80060aa:	6899      	ldr	r1, [r3, #8]
 80060ac:	683b      	ldr	r3, [r7, #0]
 80060ae:	685a      	ldr	r2, [r3, #4]
 80060b0:	683b      	ldr	r3, [r7, #0]
 80060b2:	68db      	ldr	r3, [r3, #12]
 80060b4:	f000 fbce 	bl	8006854 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	689a      	ldr	r2, [r3, #8]
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80060c6:	609a      	str	r2, [r3, #8]
      break;
 80060c8:	e03c      	b.n	8006144 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	6818      	ldr	r0, [r3, #0]
 80060ce:	683b      	ldr	r3, [r7, #0]
 80060d0:	6859      	ldr	r1, [r3, #4]
 80060d2:	683b      	ldr	r3, [r7, #0]
 80060d4:	68db      	ldr	r3, [r3, #12]
 80060d6:	461a      	mov	r2, r3
 80060d8:	f000 fb42 	bl	8006760 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	2150      	movs	r1, #80	; 0x50
 80060e2:	4618      	mov	r0, r3
 80060e4:	f000 fb9b 	bl	800681e <TIM_ITRx_SetConfig>
      break;
 80060e8:	e02c      	b.n	8006144 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	6818      	ldr	r0, [r3, #0]
 80060ee:	683b      	ldr	r3, [r7, #0]
 80060f0:	6859      	ldr	r1, [r3, #4]
 80060f2:	683b      	ldr	r3, [r7, #0]
 80060f4:	68db      	ldr	r3, [r3, #12]
 80060f6:	461a      	mov	r2, r3
 80060f8:	f000 fb61 	bl	80067be <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	2160      	movs	r1, #96	; 0x60
 8006102:	4618      	mov	r0, r3
 8006104:	f000 fb8b 	bl	800681e <TIM_ITRx_SetConfig>
      break;
 8006108:	e01c      	b.n	8006144 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	6818      	ldr	r0, [r3, #0]
 800610e:	683b      	ldr	r3, [r7, #0]
 8006110:	6859      	ldr	r1, [r3, #4]
 8006112:	683b      	ldr	r3, [r7, #0]
 8006114:	68db      	ldr	r3, [r3, #12]
 8006116:	461a      	mov	r2, r3
 8006118:	f000 fb22 	bl	8006760 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	2140      	movs	r1, #64	; 0x40
 8006122:	4618      	mov	r0, r3
 8006124:	f000 fb7b 	bl	800681e <TIM_ITRx_SetConfig>
      break;
 8006128:	e00c      	b.n	8006144 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681a      	ldr	r2, [r3, #0]
 800612e:	683b      	ldr	r3, [r7, #0]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	4619      	mov	r1, r3
 8006134:	4610      	mov	r0, r2
 8006136:	f000 fb72 	bl	800681e <TIM_ITRx_SetConfig>
      break;
 800613a:	e003      	b.n	8006144 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800613c:	2301      	movs	r3, #1
 800613e:	73fb      	strb	r3, [r7, #15]
      break;
 8006140:	e000      	b.n	8006144 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006142:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	2201      	movs	r2, #1
 8006148:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	2200      	movs	r2, #0
 8006150:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006154:	7bfb      	ldrb	r3, [r7, #15]
}
 8006156:	4618      	mov	r0, r3
 8006158:	3710      	adds	r7, #16
 800615a:	46bd      	mov	sp, r7
 800615c:	bd80      	pop	{r7, pc}
 800615e:	bf00      	nop
 8006160:	fffeff88 	.word	0xfffeff88

08006164 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006164:	b480      	push	{r7}
 8006166:	b085      	sub	sp, #20
 8006168:	af00      	add	r7, sp, #0
 800616a:	6078      	str	r0, [r7, #4]
 800616c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	4a40      	ldr	r2, [pc, #256]	; (8006278 <TIM_Base_SetConfig+0x114>)
 8006178:	4293      	cmp	r3, r2
 800617a:	d013      	beq.n	80061a4 <TIM_Base_SetConfig+0x40>
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006182:	d00f      	beq.n	80061a4 <TIM_Base_SetConfig+0x40>
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	4a3d      	ldr	r2, [pc, #244]	; (800627c <TIM_Base_SetConfig+0x118>)
 8006188:	4293      	cmp	r3, r2
 800618a:	d00b      	beq.n	80061a4 <TIM_Base_SetConfig+0x40>
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	4a3c      	ldr	r2, [pc, #240]	; (8006280 <TIM_Base_SetConfig+0x11c>)
 8006190:	4293      	cmp	r3, r2
 8006192:	d007      	beq.n	80061a4 <TIM_Base_SetConfig+0x40>
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	4a3b      	ldr	r2, [pc, #236]	; (8006284 <TIM_Base_SetConfig+0x120>)
 8006198:	4293      	cmp	r3, r2
 800619a:	d003      	beq.n	80061a4 <TIM_Base_SetConfig+0x40>
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	4a3a      	ldr	r2, [pc, #232]	; (8006288 <TIM_Base_SetConfig+0x124>)
 80061a0:	4293      	cmp	r3, r2
 80061a2:	d108      	bne.n	80061b6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061aa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80061ac:	683b      	ldr	r3, [r7, #0]
 80061ae:	685b      	ldr	r3, [r3, #4]
 80061b0:	68fa      	ldr	r2, [r7, #12]
 80061b2:	4313      	orrs	r3, r2
 80061b4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	4a2f      	ldr	r2, [pc, #188]	; (8006278 <TIM_Base_SetConfig+0x114>)
 80061ba:	4293      	cmp	r3, r2
 80061bc:	d02b      	beq.n	8006216 <TIM_Base_SetConfig+0xb2>
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80061c4:	d027      	beq.n	8006216 <TIM_Base_SetConfig+0xb2>
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	4a2c      	ldr	r2, [pc, #176]	; (800627c <TIM_Base_SetConfig+0x118>)
 80061ca:	4293      	cmp	r3, r2
 80061cc:	d023      	beq.n	8006216 <TIM_Base_SetConfig+0xb2>
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	4a2b      	ldr	r2, [pc, #172]	; (8006280 <TIM_Base_SetConfig+0x11c>)
 80061d2:	4293      	cmp	r3, r2
 80061d4:	d01f      	beq.n	8006216 <TIM_Base_SetConfig+0xb2>
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	4a2a      	ldr	r2, [pc, #168]	; (8006284 <TIM_Base_SetConfig+0x120>)
 80061da:	4293      	cmp	r3, r2
 80061dc:	d01b      	beq.n	8006216 <TIM_Base_SetConfig+0xb2>
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	4a29      	ldr	r2, [pc, #164]	; (8006288 <TIM_Base_SetConfig+0x124>)
 80061e2:	4293      	cmp	r3, r2
 80061e4:	d017      	beq.n	8006216 <TIM_Base_SetConfig+0xb2>
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	4a28      	ldr	r2, [pc, #160]	; (800628c <TIM_Base_SetConfig+0x128>)
 80061ea:	4293      	cmp	r3, r2
 80061ec:	d013      	beq.n	8006216 <TIM_Base_SetConfig+0xb2>
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	4a27      	ldr	r2, [pc, #156]	; (8006290 <TIM_Base_SetConfig+0x12c>)
 80061f2:	4293      	cmp	r3, r2
 80061f4:	d00f      	beq.n	8006216 <TIM_Base_SetConfig+0xb2>
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	4a26      	ldr	r2, [pc, #152]	; (8006294 <TIM_Base_SetConfig+0x130>)
 80061fa:	4293      	cmp	r3, r2
 80061fc:	d00b      	beq.n	8006216 <TIM_Base_SetConfig+0xb2>
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	4a25      	ldr	r2, [pc, #148]	; (8006298 <TIM_Base_SetConfig+0x134>)
 8006202:	4293      	cmp	r3, r2
 8006204:	d007      	beq.n	8006216 <TIM_Base_SetConfig+0xb2>
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	4a24      	ldr	r2, [pc, #144]	; (800629c <TIM_Base_SetConfig+0x138>)
 800620a:	4293      	cmp	r3, r2
 800620c:	d003      	beq.n	8006216 <TIM_Base_SetConfig+0xb2>
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	4a23      	ldr	r2, [pc, #140]	; (80062a0 <TIM_Base_SetConfig+0x13c>)
 8006212:	4293      	cmp	r3, r2
 8006214:	d108      	bne.n	8006228 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800621c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800621e:	683b      	ldr	r3, [r7, #0]
 8006220:	68db      	ldr	r3, [r3, #12]
 8006222:	68fa      	ldr	r2, [r7, #12]
 8006224:	4313      	orrs	r3, r2
 8006226:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800622e:	683b      	ldr	r3, [r7, #0]
 8006230:	695b      	ldr	r3, [r3, #20]
 8006232:	4313      	orrs	r3, r2
 8006234:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	68fa      	ldr	r2, [r7, #12]
 800623a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800623c:	683b      	ldr	r3, [r7, #0]
 800623e:	689a      	ldr	r2, [r3, #8]
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006244:	683b      	ldr	r3, [r7, #0]
 8006246:	681a      	ldr	r2, [r3, #0]
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	4a0a      	ldr	r2, [pc, #40]	; (8006278 <TIM_Base_SetConfig+0x114>)
 8006250:	4293      	cmp	r3, r2
 8006252:	d003      	beq.n	800625c <TIM_Base_SetConfig+0xf8>
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	4a0c      	ldr	r2, [pc, #48]	; (8006288 <TIM_Base_SetConfig+0x124>)
 8006258:	4293      	cmp	r3, r2
 800625a:	d103      	bne.n	8006264 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800625c:	683b      	ldr	r3, [r7, #0]
 800625e:	691a      	ldr	r2, [r3, #16]
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	2201      	movs	r2, #1
 8006268:	615a      	str	r2, [r3, #20]
}
 800626a:	bf00      	nop
 800626c:	3714      	adds	r7, #20
 800626e:	46bd      	mov	sp, r7
 8006270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006274:	4770      	bx	lr
 8006276:	bf00      	nop
 8006278:	40010000 	.word	0x40010000
 800627c:	40000400 	.word	0x40000400
 8006280:	40000800 	.word	0x40000800
 8006284:	40000c00 	.word	0x40000c00
 8006288:	40010400 	.word	0x40010400
 800628c:	40014000 	.word	0x40014000
 8006290:	40014400 	.word	0x40014400
 8006294:	40014800 	.word	0x40014800
 8006298:	40001800 	.word	0x40001800
 800629c:	40001c00 	.word	0x40001c00
 80062a0:	40002000 	.word	0x40002000

080062a4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80062a4:	b480      	push	{r7}
 80062a6:	b087      	sub	sp, #28
 80062a8:	af00      	add	r7, sp, #0
 80062aa:	6078      	str	r0, [r7, #4]
 80062ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	6a1b      	ldr	r3, [r3, #32]
 80062b2:	f023 0201 	bic.w	r2, r3, #1
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	6a1b      	ldr	r3, [r3, #32]
 80062be:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	685b      	ldr	r3, [r3, #4]
 80062c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	699b      	ldr	r3, [r3, #24]
 80062ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80062cc:	68fa      	ldr	r2, [r7, #12]
 80062ce:	4b2b      	ldr	r3, [pc, #172]	; (800637c <TIM_OC1_SetConfig+0xd8>)
 80062d0:	4013      	ands	r3, r2
 80062d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	f023 0303 	bic.w	r3, r3, #3
 80062da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80062dc:	683b      	ldr	r3, [r7, #0]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	68fa      	ldr	r2, [r7, #12]
 80062e2:	4313      	orrs	r3, r2
 80062e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80062e6:	697b      	ldr	r3, [r7, #20]
 80062e8:	f023 0302 	bic.w	r3, r3, #2
 80062ec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80062ee:	683b      	ldr	r3, [r7, #0]
 80062f0:	689b      	ldr	r3, [r3, #8]
 80062f2:	697a      	ldr	r2, [r7, #20]
 80062f4:	4313      	orrs	r3, r2
 80062f6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	4a21      	ldr	r2, [pc, #132]	; (8006380 <TIM_OC1_SetConfig+0xdc>)
 80062fc:	4293      	cmp	r3, r2
 80062fe:	d003      	beq.n	8006308 <TIM_OC1_SetConfig+0x64>
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	4a20      	ldr	r2, [pc, #128]	; (8006384 <TIM_OC1_SetConfig+0xe0>)
 8006304:	4293      	cmp	r3, r2
 8006306:	d10c      	bne.n	8006322 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006308:	697b      	ldr	r3, [r7, #20]
 800630a:	f023 0308 	bic.w	r3, r3, #8
 800630e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006310:	683b      	ldr	r3, [r7, #0]
 8006312:	68db      	ldr	r3, [r3, #12]
 8006314:	697a      	ldr	r2, [r7, #20]
 8006316:	4313      	orrs	r3, r2
 8006318:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800631a:	697b      	ldr	r3, [r7, #20]
 800631c:	f023 0304 	bic.w	r3, r3, #4
 8006320:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	4a16      	ldr	r2, [pc, #88]	; (8006380 <TIM_OC1_SetConfig+0xdc>)
 8006326:	4293      	cmp	r3, r2
 8006328:	d003      	beq.n	8006332 <TIM_OC1_SetConfig+0x8e>
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	4a15      	ldr	r2, [pc, #84]	; (8006384 <TIM_OC1_SetConfig+0xe0>)
 800632e:	4293      	cmp	r3, r2
 8006330:	d111      	bne.n	8006356 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006332:	693b      	ldr	r3, [r7, #16]
 8006334:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006338:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800633a:	693b      	ldr	r3, [r7, #16]
 800633c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006340:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006342:	683b      	ldr	r3, [r7, #0]
 8006344:	695b      	ldr	r3, [r3, #20]
 8006346:	693a      	ldr	r2, [r7, #16]
 8006348:	4313      	orrs	r3, r2
 800634a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800634c:	683b      	ldr	r3, [r7, #0]
 800634e:	699b      	ldr	r3, [r3, #24]
 8006350:	693a      	ldr	r2, [r7, #16]
 8006352:	4313      	orrs	r3, r2
 8006354:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	693a      	ldr	r2, [r7, #16]
 800635a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	68fa      	ldr	r2, [r7, #12]
 8006360:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006362:	683b      	ldr	r3, [r7, #0]
 8006364:	685a      	ldr	r2, [r3, #4]
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	697a      	ldr	r2, [r7, #20]
 800636e:	621a      	str	r2, [r3, #32]
}
 8006370:	bf00      	nop
 8006372:	371c      	adds	r7, #28
 8006374:	46bd      	mov	sp, r7
 8006376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800637a:	4770      	bx	lr
 800637c:	fffeff8f 	.word	0xfffeff8f
 8006380:	40010000 	.word	0x40010000
 8006384:	40010400 	.word	0x40010400

08006388 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006388:	b480      	push	{r7}
 800638a:	b087      	sub	sp, #28
 800638c:	af00      	add	r7, sp, #0
 800638e:	6078      	str	r0, [r7, #4]
 8006390:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	6a1b      	ldr	r3, [r3, #32]
 8006396:	f023 0210 	bic.w	r2, r3, #16
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	6a1b      	ldr	r3, [r3, #32]
 80063a2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	685b      	ldr	r3, [r3, #4]
 80063a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	699b      	ldr	r3, [r3, #24]
 80063ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80063b0:	68fa      	ldr	r2, [r7, #12]
 80063b2:	4b2e      	ldr	r3, [pc, #184]	; (800646c <TIM_OC2_SetConfig+0xe4>)
 80063b4:	4013      	ands	r3, r2
 80063b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80063be:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80063c0:	683b      	ldr	r3, [r7, #0]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	021b      	lsls	r3, r3, #8
 80063c6:	68fa      	ldr	r2, [r7, #12]
 80063c8:	4313      	orrs	r3, r2
 80063ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80063cc:	697b      	ldr	r3, [r7, #20]
 80063ce:	f023 0320 	bic.w	r3, r3, #32
 80063d2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80063d4:	683b      	ldr	r3, [r7, #0]
 80063d6:	689b      	ldr	r3, [r3, #8]
 80063d8:	011b      	lsls	r3, r3, #4
 80063da:	697a      	ldr	r2, [r7, #20]
 80063dc:	4313      	orrs	r3, r2
 80063de:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	4a23      	ldr	r2, [pc, #140]	; (8006470 <TIM_OC2_SetConfig+0xe8>)
 80063e4:	4293      	cmp	r3, r2
 80063e6:	d003      	beq.n	80063f0 <TIM_OC2_SetConfig+0x68>
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	4a22      	ldr	r2, [pc, #136]	; (8006474 <TIM_OC2_SetConfig+0xec>)
 80063ec:	4293      	cmp	r3, r2
 80063ee:	d10d      	bne.n	800640c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80063f0:	697b      	ldr	r3, [r7, #20]
 80063f2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80063f6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80063f8:	683b      	ldr	r3, [r7, #0]
 80063fa:	68db      	ldr	r3, [r3, #12]
 80063fc:	011b      	lsls	r3, r3, #4
 80063fe:	697a      	ldr	r2, [r7, #20]
 8006400:	4313      	orrs	r3, r2
 8006402:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006404:	697b      	ldr	r3, [r7, #20]
 8006406:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800640a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	4a18      	ldr	r2, [pc, #96]	; (8006470 <TIM_OC2_SetConfig+0xe8>)
 8006410:	4293      	cmp	r3, r2
 8006412:	d003      	beq.n	800641c <TIM_OC2_SetConfig+0x94>
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	4a17      	ldr	r2, [pc, #92]	; (8006474 <TIM_OC2_SetConfig+0xec>)
 8006418:	4293      	cmp	r3, r2
 800641a:	d113      	bne.n	8006444 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800641c:	693b      	ldr	r3, [r7, #16]
 800641e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006422:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006424:	693b      	ldr	r3, [r7, #16]
 8006426:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800642a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800642c:	683b      	ldr	r3, [r7, #0]
 800642e:	695b      	ldr	r3, [r3, #20]
 8006430:	009b      	lsls	r3, r3, #2
 8006432:	693a      	ldr	r2, [r7, #16]
 8006434:	4313      	orrs	r3, r2
 8006436:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006438:	683b      	ldr	r3, [r7, #0]
 800643a:	699b      	ldr	r3, [r3, #24]
 800643c:	009b      	lsls	r3, r3, #2
 800643e:	693a      	ldr	r2, [r7, #16]
 8006440:	4313      	orrs	r3, r2
 8006442:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	693a      	ldr	r2, [r7, #16]
 8006448:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	68fa      	ldr	r2, [r7, #12]
 800644e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006450:	683b      	ldr	r3, [r7, #0]
 8006452:	685a      	ldr	r2, [r3, #4]
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	697a      	ldr	r2, [r7, #20]
 800645c:	621a      	str	r2, [r3, #32]
}
 800645e:	bf00      	nop
 8006460:	371c      	adds	r7, #28
 8006462:	46bd      	mov	sp, r7
 8006464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006468:	4770      	bx	lr
 800646a:	bf00      	nop
 800646c:	feff8fff 	.word	0xfeff8fff
 8006470:	40010000 	.word	0x40010000
 8006474:	40010400 	.word	0x40010400

08006478 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006478:	b480      	push	{r7}
 800647a:	b087      	sub	sp, #28
 800647c:	af00      	add	r7, sp, #0
 800647e:	6078      	str	r0, [r7, #4]
 8006480:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	6a1b      	ldr	r3, [r3, #32]
 8006486:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	6a1b      	ldr	r3, [r3, #32]
 8006492:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	685b      	ldr	r3, [r3, #4]
 8006498:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	69db      	ldr	r3, [r3, #28]
 800649e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80064a0:	68fa      	ldr	r2, [r7, #12]
 80064a2:	4b2d      	ldr	r3, [pc, #180]	; (8006558 <TIM_OC3_SetConfig+0xe0>)
 80064a4:	4013      	ands	r3, r2
 80064a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	f023 0303 	bic.w	r3, r3, #3
 80064ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80064b0:	683b      	ldr	r3, [r7, #0]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	68fa      	ldr	r2, [r7, #12]
 80064b6:	4313      	orrs	r3, r2
 80064b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80064ba:	697b      	ldr	r3, [r7, #20]
 80064bc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80064c0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80064c2:	683b      	ldr	r3, [r7, #0]
 80064c4:	689b      	ldr	r3, [r3, #8]
 80064c6:	021b      	lsls	r3, r3, #8
 80064c8:	697a      	ldr	r2, [r7, #20]
 80064ca:	4313      	orrs	r3, r2
 80064cc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	4a22      	ldr	r2, [pc, #136]	; (800655c <TIM_OC3_SetConfig+0xe4>)
 80064d2:	4293      	cmp	r3, r2
 80064d4:	d003      	beq.n	80064de <TIM_OC3_SetConfig+0x66>
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	4a21      	ldr	r2, [pc, #132]	; (8006560 <TIM_OC3_SetConfig+0xe8>)
 80064da:	4293      	cmp	r3, r2
 80064dc:	d10d      	bne.n	80064fa <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80064de:	697b      	ldr	r3, [r7, #20]
 80064e0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80064e4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80064e6:	683b      	ldr	r3, [r7, #0]
 80064e8:	68db      	ldr	r3, [r3, #12]
 80064ea:	021b      	lsls	r3, r3, #8
 80064ec:	697a      	ldr	r2, [r7, #20]
 80064ee:	4313      	orrs	r3, r2
 80064f0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80064f2:	697b      	ldr	r3, [r7, #20]
 80064f4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80064f8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	4a17      	ldr	r2, [pc, #92]	; (800655c <TIM_OC3_SetConfig+0xe4>)
 80064fe:	4293      	cmp	r3, r2
 8006500:	d003      	beq.n	800650a <TIM_OC3_SetConfig+0x92>
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	4a16      	ldr	r2, [pc, #88]	; (8006560 <TIM_OC3_SetConfig+0xe8>)
 8006506:	4293      	cmp	r3, r2
 8006508:	d113      	bne.n	8006532 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800650a:	693b      	ldr	r3, [r7, #16]
 800650c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006510:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006512:	693b      	ldr	r3, [r7, #16]
 8006514:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006518:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800651a:	683b      	ldr	r3, [r7, #0]
 800651c:	695b      	ldr	r3, [r3, #20]
 800651e:	011b      	lsls	r3, r3, #4
 8006520:	693a      	ldr	r2, [r7, #16]
 8006522:	4313      	orrs	r3, r2
 8006524:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006526:	683b      	ldr	r3, [r7, #0]
 8006528:	699b      	ldr	r3, [r3, #24]
 800652a:	011b      	lsls	r3, r3, #4
 800652c:	693a      	ldr	r2, [r7, #16]
 800652e:	4313      	orrs	r3, r2
 8006530:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	693a      	ldr	r2, [r7, #16]
 8006536:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	68fa      	ldr	r2, [r7, #12]
 800653c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800653e:	683b      	ldr	r3, [r7, #0]
 8006540:	685a      	ldr	r2, [r3, #4]
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	697a      	ldr	r2, [r7, #20]
 800654a:	621a      	str	r2, [r3, #32]
}
 800654c:	bf00      	nop
 800654e:	371c      	adds	r7, #28
 8006550:	46bd      	mov	sp, r7
 8006552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006556:	4770      	bx	lr
 8006558:	fffeff8f 	.word	0xfffeff8f
 800655c:	40010000 	.word	0x40010000
 8006560:	40010400 	.word	0x40010400

08006564 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006564:	b480      	push	{r7}
 8006566:	b087      	sub	sp, #28
 8006568:	af00      	add	r7, sp, #0
 800656a:	6078      	str	r0, [r7, #4]
 800656c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	6a1b      	ldr	r3, [r3, #32]
 8006572:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	6a1b      	ldr	r3, [r3, #32]
 800657e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	685b      	ldr	r3, [r3, #4]
 8006584:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	69db      	ldr	r3, [r3, #28]
 800658a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800658c:	68fa      	ldr	r2, [r7, #12]
 800658e:	4b1e      	ldr	r3, [pc, #120]	; (8006608 <TIM_OC4_SetConfig+0xa4>)
 8006590:	4013      	ands	r3, r2
 8006592:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800659a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800659c:	683b      	ldr	r3, [r7, #0]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	021b      	lsls	r3, r3, #8
 80065a2:	68fa      	ldr	r2, [r7, #12]
 80065a4:	4313      	orrs	r3, r2
 80065a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80065a8:	693b      	ldr	r3, [r7, #16]
 80065aa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80065ae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80065b0:	683b      	ldr	r3, [r7, #0]
 80065b2:	689b      	ldr	r3, [r3, #8]
 80065b4:	031b      	lsls	r3, r3, #12
 80065b6:	693a      	ldr	r2, [r7, #16]
 80065b8:	4313      	orrs	r3, r2
 80065ba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	4a13      	ldr	r2, [pc, #76]	; (800660c <TIM_OC4_SetConfig+0xa8>)
 80065c0:	4293      	cmp	r3, r2
 80065c2:	d003      	beq.n	80065cc <TIM_OC4_SetConfig+0x68>
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	4a12      	ldr	r2, [pc, #72]	; (8006610 <TIM_OC4_SetConfig+0xac>)
 80065c8:	4293      	cmp	r3, r2
 80065ca:	d109      	bne.n	80065e0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80065cc:	697b      	ldr	r3, [r7, #20]
 80065ce:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80065d2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80065d4:	683b      	ldr	r3, [r7, #0]
 80065d6:	695b      	ldr	r3, [r3, #20]
 80065d8:	019b      	lsls	r3, r3, #6
 80065da:	697a      	ldr	r2, [r7, #20]
 80065dc:	4313      	orrs	r3, r2
 80065de:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	697a      	ldr	r2, [r7, #20]
 80065e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	68fa      	ldr	r2, [r7, #12]
 80065ea:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80065ec:	683b      	ldr	r3, [r7, #0]
 80065ee:	685a      	ldr	r2, [r3, #4]
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	693a      	ldr	r2, [r7, #16]
 80065f8:	621a      	str	r2, [r3, #32]
}
 80065fa:	bf00      	nop
 80065fc:	371c      	adds	r7, #28
 80065fe:	46bd      	mov	sp, r7
 8006600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006604:	4770      	bx	lr
 8006606:	bf00      	nop
 8006608:	feff8fff 	.word	0xfeff8fff
 800660c:	40010000 	.word	0x40010000
 8006610:	40010400 	.word	0x40010400

08006614 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006614:	b480      	push	{r7}
 8006616:	b087      	sub	sp, #28
 8006618:	af00      	add	r7, sp, #0
 800661a:	6078      	str	r0, [r7, #4]
 800661c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	6a1b      	ldr	r3, [r3, #32]
 8006622:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	6a1b      	ldr	r3, [r3, #32]
 800662e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	685b      	ldr	r3, [r3, #4]
 8006634:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800663a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800663c:	68fa      	ldr	r2, [r7, #12]
 800663e:	4b1b      	ldr	r3, [pc, #108]	; (80066ac <TIM_OC5_SetConfig+0x98>)
 8006640:	4013      	ands	r3, r2
 8006642:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006644:	683b      	ldr	r3, [r7, #0]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	68fa      	ldr	r2, [r7, #12]
 800664a:	4313      	orrs	r3, r2
 800664c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800664e:	693b      	ldr	r3, [r7, #16]
 8006650:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006654:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006656:	683b      	ldr	r3, [r7, #0]
 8006658:	689b      	ldr	r3, [r3, #8]
 800665a:	041b      	lsls	r3, r3, #16
 800665c:	693a      	ldr	r2, [r7, #16]
 800665e:	4313      	orrs	r3, r2
 8006660:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	4a12      	ldr	r2, [pc, #72]	; (80066b0 <TIM_OC5_SetConfig+0x9c>)
 8006666:	4293      	cmp	r3, r2
 8006668:	d003      	beq.n	8006672 <TIM_OC5_SetConfig+0x5e>
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	4a11      	ldr	r2, [pc, #68]	; (80066b4 <TIM_OC5_SetConfig+0xa0>)
 800666e:	4293      	cmp	r3, r2
 8006670:	d109      	bne.n	8006686 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006672:	697b      	ldr	r3, [r7, #20]
 8006674:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006678:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800667a:	683b      	ldr	r3, [r7, #0]
 800667c:	695b      	ldr	r3, [r3, #20]
 800667e:	021b      	lsls	r3, r3, #8
 8006680:	697a      	ldr	r2, [r7, #20]
 8006682:	4313      	orrs	r3, r2
 8006684:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	697a      	ldr	r2, [r7, #20]
 800668a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	68fa      	ldr	r2, [r7, #12]
 8006690:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006692:	683b      	ldr	r3, [r7, #0]
 8006694:	685a      	ldr	r2, [r3, #4]
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	693a      	ldr	r2, [r7, #16]
 800669e:	621a      	str	r2, [r3, #32]
}
 80066a0:	bf00      	nop
 80066a2:	371c      	adds	r7, #28
 80066a4:	46bd      	mov	sp, r7
 80066a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066aa:	4770      	bx	lr
 80066ac:	fffeff8f 	.word	0xfffeff8f
 80066b0:	40010000 	.word	0x40010000
 80066b4:	40010400 	.word	0x40010400

080066b8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80066b8:	b480      	push	{r7}
 80066ba:	b087      	sub	sp, #28
 80066bc:	af00      	add	r7, sp, #0
 80066be:	6078      	str	r0, [r7, #4]
 80066c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	6a1b      	ldr	r3, [r3, #32]
 80066c6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	6a1b      	ldr	r3, [r3, #32]
 80066d2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	685b      	ldr	r3, [r3, #4]
 80066d8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80066e0:	68fa      	ldr	r2, [r7, #12]
 80066e2:	4b1c      	ldr	r3, [pc, #112]	; (8006754 <TIM_OC6_SetConfig+0x9c>)
 80066e4:	4013      	ands	r3, r2
 80066e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80066e8:	683b      	ldr	r3, [r7, #0]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	021b      	lsls	r3, r3, #8
 80066ee:	68fa      	ldr	r2, [r7, #12]
 80066f0:	4313      	orrs	r3, r2
 80066f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80066f4:	693b      	ldr	r3, [r7, #16]
 80066f6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80066fa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80066fc:	683b      	ldr	r3, [r7, #0]
 80066fe:	689b      	ldr	r3, [r3, #8]
 8006700:	051b      	lsls	r3, r3, #20
 8006702:	693a      	ldr	r2, [r7, #16]
 8006704:	4313      	orrs	r3, r2
 8006706:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	4a13      	ldr	r2, [pc, #76]	; (8006758 <TIM_OC6_SetConfig+0xa0>)
 800670c:	4293      	cmp	r3, r2
 800670e:	d003      	beq.n	8006718 <TIM_OC6_SetConfig+0x60>
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	4a12      	ldr	r2, [pc, #72]	; (800675c <TIM_OC6_SetConfig+0xa4>)
 8006714:	4293      	cmp	r3, r2
 8006716:	d109      	bne.n	800672c <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006718:	697b      	ldr	r3, [r7, #20]
 800671a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800671e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006720:	683b      	ldr	r3, [r7, #0]
 8006722:	695b      	ldr	r3, [r3, #20]
 8006724:	029b      	lsls	r3, r3, #10
 8006726:	697a      	ldr	r2, [r7, #20]
 8006728:	4313      	orrs	r3, r2
 800672a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	697a      	ldr	r2, [r7, #20]
 8006730:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	68fa      	ldr	r2, [r7, #12]
 8006736:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006738:	683b      	ldr	r3, [r7, #0]
 800673a:	685a      	ldr	r2, [r3, #4]
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	693a      	ldr	r2, [r7, #16]
 8006744:	621a      	str	r2, [r3, #32]
}
 8006746:	bf00      	nop
 8006748:	371c      	adds	r7, #28
 800674a:	46bd      	mov	sp, r7
 800674c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006750:	4770      	bx	lr
 8006752:	bf00      	nop
 8006754:	feff8fff 	.word	0xfeff8fff
 8006758:	40010000 	.word	0x40010000
 800675c:	40010400 	.word	0x40010400

08006760 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006760:	b480      	push	{r7}
 8006762:	b087      	sub	sp, #28
 8006764:	af00      	add	r7, sp, #0
 8006766:	60f8      	str	r0, [r7, #12]
 8006768:	60b9      	str	r1, [r7, #8]
 800676a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	6a1b      	ldr	r3, [r3, #32]
 8006770:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	6a1b      	ldr	r3, [r3, #32]
 8006776:	f023 0201 	bic.w	r2, r3, #1
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	699b      	ldr	r3, [r3, #24]
 8006782:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006784:	693b      	ldr	r3, [r7, #16]
 8006786:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800678a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	011b      	lsls	r3, r3, #4
 8006790:	693a      	ldr	r2, [r7, #16]
 8006792:	4313      	orrs	r3, r2
 8006794:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006796:	697b      	ldr	r3, [r7, #20]
 8006798:	f023 030a 	bic.w	r3, r3, #10
 800679c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800679e:	697a      	ldr	r2, [r7, #20]
 80067a0:	68bb      	ldr	r3, [r7, #8]
 80067a2:	4313      	orrs	r3, r2
 80067a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	693a      	ldr	r2, [r7, #16]
 80067aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	697a      	ldr	r2, [r7, #20]
 80067b0:	621a      	str	r2, [r3, #32]
}
 80067b2:	bf00      	nop
 80067b4:	371c      	adds	r7, #28
 80067b6:	46bd      	mov	sp, r7
 80067b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067bc:	4770      	bx	lr

080067be <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80067be:	b480      	push	{r7}
 80067c0:	b087      	sub	sp, #28
 80067c2:	af00      	add	r7, sp, #0
 80067c4:	60f8      	str	r0, [r7, #12]
 80067c6:	60b9      	str	r1, [r7, #8]
 80067c8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	6a1b      	ldr	r3, [r3, #32]
 80067ce:	f023 0210 	bic.w	r2, r3, #16
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	699b      	ldr	r3, [r3, #24]
 80067da:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	6a1b      	ldr	r3, [r3, #32]
 80067e0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80067e2:	697b      	ldr	r3, [r7, #20]
 80067e4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80067e8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	031b      	lsls	r3, r3, #12
 80067ee:	697a      	ldr	r2, [r7, #20]
 80067f0:	4313      	orrs	r3, r2
 80067f2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80067f4:	693b      	ldr	r3, [r7, #16]
 80067f6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80067fa:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80067fc:	68bb      	ldr	r3, [r7, #8]
 80067fe:	011b      	lsls	r3, r3, #4
 8006800:	693a      	ldr	r2, [r7, #16]
 8006802:	4313      	orrs	r3, r2
 8006804:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	697a      	ldr	r2, [r7, #20]
 800680a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	693a      	ldr	r2, [r7, #16]
 8006810:	621a      	str	r2, [r3, #32]
}
 8006812:	bf00      	nop
 8006814:	371c      	adds	r7, #28
 8006816:	46bd      	mov	sp, r7
 8006818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800681c:	4770      	bx	lr

0800681e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800681e:	b480      	push	{r7}
 8006820:	b085      	sub	sp, #20
 8006822:	af00      	add	r7, sp, #0
 8006824:	6078      	str	r0, [r7, #4]
 8006826:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	689b      	ldr	r3, [r3, #8]
 800682c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006834:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006836:	683a      	ldr	r2, [r7, #0]
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	4313      	orrs	r3, r2
 800683c:	f043 0307 	orr.w	r3, r3, #7
 8006840:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	68fa      	ldr	r2, [r7, #12]
 8006846:	609a      	str	r2, [r3, #8]
}
 8006848:	bf00      	nop
 800684a:	3714      	adds	r7, #20
 800684c:	46bd      	mov	sp, r7
 800684e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006852:	4770      	bx	lr

08006854 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006854:	b480      	push	{r7}
 8006856:	b087      	sub	sp, #28
 8006858:	af00      	add	r7, sp, #0
 800685a:	60f8      	str	r0, [r7, #12]
 800685c:	60b9      	str	r1, [r7, #8]
 800685e:	607a      	str	r2, [r7, #4]
 8006860:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	689b      	ldr	r3, [r3, #8]
 8006866:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006868:	697b      	ldr	r3, [r7, #20]
 800686a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800686e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006870:	683b      	ldr	r3, [r7, #0]
 8006872:	021a      	lsls	r2, r3, #8
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	431a      	orrs	r2, r3
 8006878:	68bb      	ldr	r3, [r7, #8]
 800687a:	4313      	orrs	r3, r2
 800687c:	697a      	ldr	r2, [r7, #20]
 800687e:	4313      	orrs	r3, r2
 8006880:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	697a      	ldr	r2, [r7, #20]
 8006886:	609a      	str	r2, [r3, #8]
}
 8006888:	bf00      	nop
 800688a:	371c      	adds	r7, #28
 800688c:	46bd      	mov	sp, r7
 800688e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006892:	4770      	bx	lr

08006894 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006894:	b480      	push	{r7}
 8006896:	b087      	sub	sp, #28
 8006898:	af00      	add	r7, sp, #0
 800689a:	60f8      	str	r0, [r7, #12]
 800689c:	60b9      	str	r1, [r7, #8]
 800689e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80068a0:	68bb      	ldr	r3, [r7, #8]
 80068a2:	f003 031f 	and.w	r3, r3, #31
 80068a6:	2201      	movs	r2, #1
 80068a8:	fa02 f303 	lsl.w	r3, r2, r3
 80068ac:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	6a1a      	ldr	r2, [r3, #32]
 80068b2:	697b      	ldr	r3, [r7, #20]
 80068b4:	43db      	mvns	r3, r3
 80068b6:	401a      	ands	r2, r3
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	6a1a      	ldr	r2, [r3, #32]
 80068c0:	68bb      	ldr	r3, [r7, #8]
 80068c2:	f003 031f 	and.w	r3, r3, #31
 80068c6:	6879      	ldr	r1, [r7, #4]
 80068c8:	fa01 f303 	lsl.w	r3, r1, r3
 80068cc:	431a      	orrs	r2, r3
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	621a      	str	r2, [r3, #32]
}
 80068d2:	bf00      	nop
 80068d4:	371c      	adds	r7, #28
 80068d6:	46bd      	mov	sp, r7
 80068d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068dc:	4770      	bx	lr
	...

080068e0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80068e0:	b480      	push	{r7}
 80068e2:	b085      	sub	sp, #20
 80068e4:	af00      	add	r7, sp, #0
 80068e6:	6078      	str	r0, [r7, #4]
 80068e8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80068f0:	2b01      	cmp	r3, #1
 80068f2:	d101      	bne.n	80068f8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80068f4:	2302      	movs	r3, #2
 80068f6:	e06d      	b.n	80069d4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	2201      	movs	r2, #1
 80068fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	2202      	movs	r2, #2
 8006904:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	685b      	ldr	r3, [r3, #4]
 800690e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	689b      	ldr	r3, [r3, #8]
 8006916:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	4a30      	ldr	r2, [pc, #192]	; (80069e0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800691e:	4293      	cmp	r3, r2
 8006920:	d004      	beq.n	800692c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	4a2f      	ldr	r2, [pc, #188]	; (80069e4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006928:	4293      	cmp	r3, r2
 800692a:	d108      	bne.n	800693e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006932:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006934:	683b      	ldr	r3, [r7, #0]
 8006936:	685b      	ldr	r3, [r3, #4]
 8006938:	68fa      	ldr	r2, [r7, #12]
 800693a:	4313      	orrs	r3, r2
 800693c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006944:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006946:	683b      	ldr	r3, [r7, #0]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	68fa      	ldr	r2, [r7, #12]
 800694c:	4313      	orrs	r3, r2
 800694e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	68fa      	ldr	r2, [r7, #12]
 8006956:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	4a20      	ldr	r2, [pc, #128]	; (80069e0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800695e:	4293      	cmp	r3, r2
 8006960:	d022      	beq.n	80069a8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800696a:	d01d      	beq.n	80069a8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	4a1d      	ldr	r2, [pc, #116]	; (80069e8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006972:	4293      	cmp	r3, r2
 8006974:	d018      	beq.n	80069a8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	4a1c      	ldr	r2, [pc, #112]	; (80069ec <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800697c:	4293      	cmp	r3, r2
 800697e:	d013      	beq.n	80069a8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	4a1a      	ldr	r2, [pc, #104]	; (80069f0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006986:	4293      	cmp	r3, r2
 8006988:	d00e      	beq.n	80069a8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	4a15      	ldr	r2, [pc, #84]	; (80069e4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006990:	4293      	cmp	r3, r2
 8006992:	d009      	beq.n	80069a8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	4a16      	ldr	r2, [pc, #88]	; (80069f4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800699a:	4293      	cmp	r3, r2
 800699c:	d004      	beq.n	80069a8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	4a15      	ldr	r2, [pc, #84]	; (80069f8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80069a4:	4293      	cmp	r3, r2
 80069a6:	d10c      	bne.n	80069c2 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80069a8:	68bb      	ldr	r3, [r7, #8]
 80069aa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80069ae:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80069b0:	683b      	ldr	r3, [r7, #0]
 80069b2:	689b      	ldr	r3, [r3, #8]
 80069b4:	68ba      	ldr	r2, [r7, #8]
 80069b6:	4313      	orrs	r3, r2
 80069b8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	68ba      	ldr	r2, [r7, #8]
 80069c0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	2201      	movs	r2, #1
 80069c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	2200      	movs	r2, #0
 80069ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80069d2:	2300      	movs	r3, #0
}
 80069d4:	4618      	mov	r0, r3
 80069d6:	3714      	adds	r7, #20
 80069d8:	46bd      	mov	sp, r7
 80069da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069de:	4770      	bx	lr
 80069e0:	40010000 	.word	0x40010000
 80069e4:	40010400 	.word	0x40010400
 80069e8:	40000400 	.word	0x40000400
 80069ec:	40000800 	.word	0x40000800
 80069f0:	40000c00 	.word	0x40000c00
 80069f4:	40014000 	.word	0x40014000
 80069f8:	40001800 	.word	0x40001800

080069fc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80069fc:	b580      	push	{r7, lr}
 80069fe:	b082      	sub	sp, #8
 8006a00:	af00      	add	r7, sp, #0
 8006a02:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d101      	bne.n	8006a0e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006a0a:	2301      	movs	r3, #1
 8006a0c:	e040      	b.n	8006a90 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d106      	bne.n	8006a24 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	2200      	movs	r2, #0
 8006a1a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006a1e:	6878      	ldr	r0, [r7, #4]
 8006a20:	f7fb fd9e 	bl	8002560 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	2224      	movs	r2, #36	; 0x24
 8006a28:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	681a      	ldr	r2, [r3, #0]
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	f022 0201 	bic.w	r2, r2, #1
 8006a38:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006a3a:	6878      	ldr	r0, [r7, #4]
 8006a3c:	f000 f8b0 	bl	8006ba0 <UART_SetConfig>
 8006a40:	4603      	mov	r3, r0
 8006a42:	2b01      	cmp	r3, #1
 8006a44:	d101      	bne.n	8006a4a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8006a46:	2301      	movs	r3, #1
 8006a48:	e022      	b.n	8006a90 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d002      	beq.n	8006a58 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006a52:	6878      	ldr	r0, [r7, #4]
 8006a54:	f000 fb08 	bl	8007068 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	685a      	ldr	r2, [r3, #4]
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006a66:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	689a      	ldr	r2, [r3, #8]
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006a76:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	681a      	ldr	r2, [r3, #0]
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	f042 0201 	orr.w	r2, r2, #1
 8006a86:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006a88:	6878      	ldr	r0, [r7, #4]
 8006a8a:	f000 fb8f 	bl	80071ac <UART_CheckIdleState>
 8006a8e:	4603      	mov	r3, r0
}
 8006a90:	4618      	mov	r0, r3
 8006a92:	3708      	adds	r7, #8
 8006a94:	46bd      	mov	sp, r7
 8006a96:	bd80      	pop	{r7, pc}

08006a98 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006a98:	b580      	push	{r7, lr}
 8006a9a:	b08a      	sub	sp, #40	; 0x28
 8006a9c:	af02      	add	r7, sp, #8
 8006a9e:	60f8      	str	r0, [r7, #12]
 8006aa0:	60b9      	str	r1, [r7, #8]
 8006aa2:	603b      	str	r3, [r7, #0]
 8006aa4:	4613      	mov	r3, r2
 8006aa6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006aac:	2b20      	cmp	r3, #32
 8006aae:	d171      	bne.n	8006b94 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8006ab0:	68bb      	ldr	r3, [r7, #8]
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d002      	beq.n	8006abc <HAL_UART_Transmit+0x24>
 8006ab6:	88fb      	ldrh	r3, [r7, #6]
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d101      	bne.n	8006ac0 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8006abc:	2301      	movs	r3, #1
 8006abe:	e06a      	b.n	8006b96 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	2200      	movs	r2, #0
 8006ac4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	2221      	movs	r2, #33	; 0x21
 8006acc:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006ace:	f7fb ff0f 	bl	80028f0 <HAL_GetTick>
 8006ad2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	88fa      	ldrh	r2, [r7, #6]
 8006ad8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	88fa      	ldrh	r2, [r7, #6]
 8006ae0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	689b      	ldr	r3, [r3, #8]
 8006ae8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006aec:	d108      	bne.n	8006b00 <HAL_UART_Transmit+0x68>
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	691b      	ldr	r3, [r3, #16]
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d104      	bne.n	8006b00 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8006af6:	2300      	movs	r3, #0
 8006af8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006afa:	68bb      	ldr	r3, [r7, #8]
 8006afc:	61bb      	str	r3, [r7, #24]
 8006afe:	e003      	b.n	8006b08 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8006b00:	68bb      	ldr	r3, [r7, #8]
 8006b02:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006b04:	2300      	movs	r3, #0
 8006b06:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006b08:	e02c      	b.n	8006b64 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006b0a:	683b      	ldr	r3, [r7, #0]
 8006b0c:	9300      	str	r3, [sp, #0]
 8006b0e:	697b      	ldr	r3, [r7, #20]
 8006b10:	2200      	movs	r2, #0
 8006b12:	2180      	movs	r1, #128	; 0x80
 8006b14:	68f8      	ldr	r0, [r7, #12]
 8006b16:	f000 fb80 	bl	800721a <UART_WaitOnFlagUntilTimeout>
 8006b1a:	4603      	mov	r3, r0
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d001      	beq.n	8006b24 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8006b20:	2303      	movs	r3, #3
 8006b22:	e038      	b.n	8006b96 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8006b24:	69fb      	ldr	r3, [r7, #28]
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d10b      	bne.n	8006b42 <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006b2a:	69bb      	ldr	r3, [r7, #24]
 8006b2c:	881b      	ldrh	r3, [r3, #0]
 8006b2e:	461a      	mov	r2, r3
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006b38:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006b3a:	69bb      	ldr	r3, [r7, #24]
 8006b3c:	3302      	adds	r3, #2
 8006b3e:	61bb      	str	r3, [r7, #24]
 8006b40:	e007      	b.n	8006b52 <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006b42:	69fb      	ldr	r3, [r7, #28]
 8006b44:	781a      	ldrb	r2, [r3, #0]
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006b4c:	69fb      	ldr	r3, [r7, #28]
 8006b4e:	3301      	adds	r3, #1
 8006b50:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006b58:	b29b      	uxth	r3, r3
 8006b5a:	3b01      	subs	r3, #1
 8006b5c:	b29a      	uxth	r2, r3
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006b6a:	b29b      	uxth	r3, r3
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d1cc      	bne.n	8006b0a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006b70:	683b      	ldr	r3, [r7, #0]
 8006b72:	9300      	str	r3, [sp, #0]
 8006b74:	697b      	ldr	r3, [r7, #20]
 8006b76:	2200      	movs	r2, #0
 8006b78:	2140      	movs	r1, #64	; 0x40
 8006b7a:	68f8      	ldr	r0, [r7, #12]
 8006b7c:	f000 fb4d 	bl	800721a <UART_WaitOnFlagUntilTimeout>
 8006b80:	4603      	mov	r3, r0
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d001      	beq.n	8006b8a <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 8006b86:	2303      	movs	r3, #3
 8006b88:	e005      	b.n	8006b96 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	2220      	movs	r2, #32
 8006b8e:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8006b90:	2300      	movs	r3, #0
 8006b92:	e000      	b.n	8006b96 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8006b94:	2302      	movs	r3, #2
  }
}
 8006b96:	4618      	mov	r0, r3
 8006b98:	3720      	adds	r7, #32
 8006b9a:	46bd      	mov	sp, r7
 8006b9c:	bd80      	pop	{r7, pc}
	...

08006ba0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006ba0:	b580      	push	{r7, lr}
 8006ba2:	b088      	sub	sp, #32
 8006ba4:	af00      	add	r7, sp, #0
 8006ba6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006ba8:	2300      	movs	r3, #0
 8006baa:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	689a      	ldr	r2, [r3, #8]
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	691b      	ldr	r3, [r3, #16]
 8006bb4:	431a      	orrs	r2, r3
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	695b      	ldr	r3, [r3, #20]
 8006bba:	431a      	orrs	r2, r3
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	69db      	ldr	r3, [r3, #28]
 8006bc0:	4313      	orrs	r3, r2
 8006bc2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	681a      	ldr	r2, [r3, #0]
 8006bca:	4ba6      	ldr	r3, [pc, #664]	; (8006e64 <UART_SetConfig+0x2c4>)
 8006bcc:	4013      	ands	r3, r2
 8006bce:	687a      	ldr	r2, [r7, #4]
 8006bd0:	6812      	ldr	r2, [r2, #0]
 8006bd2:	6979      	ldr	r1, [r7, #20]
 8006bd4:	430b      	orrs	r3, r1
 8006bd6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	685b      	ldr	r3, [r3, #4]
 8006bde:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	68da      	ldr	r2, [r3, #12]
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	430a      	orrs	r2, r1
 8006bec:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	699b      	ldr	r3, [r3, #24]
 8006bf2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	6a1b      	ldr	r3, [r3, #32]
 8006bf8:	697a      	ldr	r2, [r7, #20]
 8006bfa:	4313      	orrs	r3, r2
 8006bfc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	689b      	ldr	r3, [r3, #8]
 8006c04:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	697a      	ldr	r2, [r7, #20]
 8006c0e:	430a      	orrs	r2, r1
 8006c10:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	4a94      	ldr	r2, [pc, #592]	; (8006e68 <UART_SetConfig+0x2c8>)
 8006c18:	4293      	cmp	r3, r2
 8006c1a:	d120      	bne.n	8006c5e <UART_SetConfig+0xbe>
 8006c1c:	4b93      	ldr	r3, [pc, #588]	; (8006e6c <UART_SetConfig+0x2cc>)
 8006c1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c22:	f003 0303 	and.w	r3, r3, #3
 8006c26:	2b03      	cmp	r3, #3
 8006c28:	d816      	bhi.n	8006c58 <UART_SetConfig+0xb8>
 8006c2a:	a201      	add	r2, pc, #4	; (adr r2, 8006c30 <UART_SetConfig+0x90>)
 8006c2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c30:	08006c41 	.word	0x08006c41
 8006c34:	08006c4d 	.word	0x08006c4d
 8006c38:	08006c47 	.word	0x08006c47
 8006c3c:	08006c53 	.word	0x08006c53
 8006c40:	2301      	movs	r3, #1
 8006c42:	77fb      	strb	r3, [r7, #31]
 8006c44:	e150      	b.n	8006ee8 <UART_SetConfig+0x348>
 8006c46:	2302      	movs	r3, #2
 8006c48:	77fb      	strb	r3, [r7, #31]
 8006c4a:	e14d      	b.n	8006ee8 <UART_SetConfig+0x348>
 8006c4c:	2304      	movs	r3, #4
 8006c4e:	77fb      	strb	r3, [r7, #31]
 8006c50:	e14a      	b.n	8006ee8 <UART_SetConfig+0x348>
 8006c52:	2308      	movs	r3, #8
 8006c54:	77fb      	strb	r3, [r7, #31]
 8006c56:	e147      	b.n	8006ee8 <UART_SetConfig+0x348>
 8006c58:	2310      	movs	r3, #16
 8006c5a:	77fb      	strb	r3, [r7, #31]
 8006c5c:	e144      	b.n	8006ee8 <UART_SetConfig+0x348>
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	4a83      	ldr	r2, [pc, #524]	; (8006e70 <UART_SetConfig+0x2d0>)
 8006c64:	4293      	cmp	r3, r2
 8006c66:	d132      	bne.n	8006cce <UART_SetConfig+0x12e>
 8006c68:	4b80      	ldr	r3, [pc, #512]	; (8006e6c <UART_SetConfig+0x2cc>)
 8006c6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c6e:	f003 030c 	and.w	r3, r3, #12
 8006c72:	2b0c      	cmp	r3, #12
 8006c74:	d828      	bhi.n	8006cc8 <UART_SetConfig+0x128>
 8006c76:	a201      	add	r2, pc, #4	; (adr r2, 8006c7c <UART_SetConfig+0xdc>)
 8006c78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c7c:	08006cb1 	.word	0x08006cb1
 8006c80:	08006cc9 	.word	0x08006cc9
 8006c84:	08006cc9 	.word	0x08006cc9
 8006c88:	08006cc9 	.word	0x08006cc9
 8006c8c:	08006cbd 	.word	0x08006cbd
 8006c90:	08006cc9 	.word	0x08006cc9
 8006c94:	08006cc9 	.word	0x08006cc9
 8006c98:	08006cc9 	.word	0x08006cc9
 8006c9c:	08006cb7 	.word	0x08006cb7
 8006ca0:	08006cc9 	.word	0x08006cc9
 8006ca4:	08006cc9 	.word	0x08006cc9
 8006ca8:	08006cc9 	.word	0x08006cc9
 8006cac:	08006cc3 	.word	0x08006cc3
 8006cb0:	2300      	movs	r3, #0
 8006cb2:	77fb      	strb	r3, [r7, #31]
 8006cb4:	e118      	b.n	8006ee8 <UART_SetConfig+0x348>
 8006cb6:	2302      	movs	r3, #2
 8006cb8:	77fb      	strb	r3, [r7, #31]
 8006cba:	e115      	b.n	8006ee8 <UART_SetConfig+0x348>
 8006cbc:	2304      	movs	r3, #4
 8006cbe:	77fb      	strb	r3, [r7, #31]
 8006cc0:	e112      	b.n	8006ee8 <UART_SetConfig+0x348>
 8006cc2:	2308      	movs	r3, #8
 8006cc4:	77fb      	strb	r3, [r7, #31]
 8006cc6:	e10f      	b.n	8006ee8 <UART_SetConfig+0x348>
 8006cc8:	2310      	movs	r3, #16
 8006cca:	77fb      	strb	r3, [r7, #31]
 8006ccc:	e10c      	b.n	8006ee8 <UART_SetConfig+0x348>
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	4a68      	ldr	r2, [pc, #416]	; (8006e74 <UART_SetConfig+0x2d4>)
 8006cd4:	4293      	cmp	r3, r2
 8006cd6:	d120      	bne.n	8006d1a <UART_SetConfig+0x17a>
 8006cd8:	4b64      	ldr	r3, [pc, #400]	; (8006e6c <UART_SetConfig+0x2cc>)
 8006cda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006cde:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006ce2:	2b30      	cmp	r3, #48	; 0x30
 8006ce4:	d013      	beq.n	8006d0e <UART_SetConfig+0x16e>
 8006ce6:	2b30      	cmp	r3, #48	; 0x30
 8006ce8:	d814      	bhi.n	8006d14 <UART_SetConfig+0x174>
 8006cea:	2b20      	cmp	r3, #32
 8006cec:	d009      	beq.n	8006d02 <UART_SetConfig+0x162>
 8006cee:	2b20      	cmp	r3, #32
 8006cf0:	d810      	bhi.n	8006d14 <UART_SetConfig+0x174>
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d002      	beq.n	8006cfc <UART_SetConfig+0x15c>
 8006cf6:	2b10      	cmp	r3, #16
 8006cf8:	d006      	beq.n	8006d08 <UART_SetConfig+0x168>
 8006cfa:	e00b      	b.n	8006d14 <UART_SetConfig+0x174>
 8006cfc:	2300      	movs	r3, #0
 8006cfe:	77fb      	strb	r3, [r7, #31]
 8006d00:	e0f2      	b.n	8006ee8 <UART_SetConfig+0x348>
 8006d02:	2302      	movs	r3, #2
 8006d04:	77fb      	strb	r3, [r7, #31]
 8006d06:	e0ef      	b.n	8006ee8 <UART_SetConfig+0x348>
 8006d08:	2304      	movs	r3, #4
 8006d0a:	77fb      	strb	r3, [r7, #31]
 8006d0c:	e0ec      	b.n	8006ee8 <UART_SetConfig+0x348>
 8006d0e:	2308      	movs	r3, #8
 8006d10:	77fb      	strb	r3, [r7, #31]
 8006d12:	e0e9      	b.n	8006ee8 <UART_SetConfig+0x348>
 8006d14:	2310      	movs	r3, #16
 8006d16:	77fb      	strb	r3, [r7, #31]
 8006d18:	e0e6      	b.n	8006ee8 <UART_SetConfig+0x348>
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	4a56      	ldr	r2, [pc, #344]	; (8006e78 <UART_SetConfig+0x2d8>)
 8006d20:	4293      	cmp	r3, r2
 8006d22:	d120      	bne.n	8006d66 <UART_SetConfig+0x1c6>
 8006d24:	4b51      	ldr	r3, [pc, #324]	; (8006e6c <UART_SetConfig+0x2cc>)
 8006d26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d2a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006d2e:	2bc0      	cmp	r3, #192	; 0xc0
 8006d30:	d013      	beq.n	8006d5a <UART_SetConfig+0x1ba>
 8006d32:	2bc0      	cmp	r3, #192	; 0xc0
 8006d34:	d814      	bhi.n	8006d60 <UART_SetConfig+0x1c0>
 8006d36:	2b80      	cmp	r3, #128	; 0x80
 8006d38:	d009      	beq.n	8006d4e <UART_SetConfig+0x1ae>
 8006d3a:	2b80      	cmp	r3, #128	; 0x80
 8006d3c:	d810      	bhi.n	8006d60 <UART_SetConfig+0x1c0>
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d002      	beq.n	8006d48 <UART_SetConfig+0x1a8>
 8006d42:	2b40      	cmp	r3, #64	; 0x40
 8006d44:	d006      	beq.n	8006d54 <UART_SetConfig+0x1b4>
 8006d46:	e00b      	b.n	8006d60 <UART_SetConfig+0x1c0>
 8006d48:	2300      	movs	r3, #0
 8006d4a:	77fb      	strb	r3, [r7, #31]
 8006d4c:	e0cc      	b.n	8006ee8 <UART_SetConfig+0x348>
 8006d4e:	2302      	movs	r3, #2
 8006d50:	77fb      	strb	r3, [r7, #31]
 8006d52:	e0c9      	b.n	8006ee8 <UART_SetConfig+0x348>
 8006d54:	2304      	movs	r3, #4
 8006d56:	77fb      	strb	r3, [r7, #31]
 8006d58:	e0c6      	b.n	8006ee8 <UART_SetConfig+0x348>
 8006d5a:	2308      	movs	r3, #8
 8006d5c:	77fb      	strb	r3, [r7, #31]
 8006d5e:	e0c3      	b.n	8006ee8 <UART_SetConfig+0x348>
 8006d60:	2310      	movs	r3, #16
 8006d62:	77fb      	strb	r3, [r7, #31]
 8006d64:	e0c0      	b.n	8006ee8 <UART_SetConfig+0x348>
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	4a44      	ldr	r2, [pc, #272]	; (8006e7c <UART_SetConfig+0x2dc>)
 8006d6c:	4293      	cmp	r3, r2
 8006d6e:	d125      	bne.n	8006dbc <UART_SetConfig+0x21c>
 8006d70:	4b3e      	ldr	r3, [pc, #248]	; (8006e6c <UART_SetConfig+0x2cc>)
 8006d72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d76:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006d7a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006d7e:	d017      	beq.n	8006db0 <UART_SetConfig+0x210>
 8006d80:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006d84:	d817      	bhi.n	8006db6 <UART_SetConfig+0x216>
 8006d86:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006d8a:	d00b      	beq.n	8006da4 <UART_SetConfig+0x204>
 8006d8c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006d90:	d811      	bhi.n	8006db6 <UART_SetConfig+0x216>
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d003      	beq.n	8006d9e <UART_SetConfig+0x1fe>
 8006d96:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006d9a:	d006      	beq.n	8006daa <UART_SetConfig+0x20a>
 8006d9c:	e00b      	b.n	8006db6 <UART_SetConfig+0x216>
 8006d9e:	2300      	movs	r3, #0
 8006da0:	77fb      	strb	r3, [r7, #31]
 8006da2:	e0a1      	b.n	8006ee8 <UART_SetConfig+0x348>
 8006da4:	2302      	movs	r3, #2
 8006da6:	77fb      	strb	r3, [r7, #31]
 8006da8:	e09e      	b.n	8006ee8 <UART_SetConfig+0x348>
 8006daa:	2304      	movs	r3, #4
 8006dac:	77fb      	strb	r3, [r7, #31]
 8006dae:	e09b      	b.n	8006ee8 <UART_SetConfig+0x348>
 8006db0:	2308      	movs	r3, #8
 8006db2:	77fb      	strb	r3, [r7, #31]
 8006db4:	e098      	b.n	8006ee8 <UART_SetConfig+0x348>
 8006db6:	2310      	movs	r3, #16
 8006db8:	77fb      	strb	r3, [r7, #31]
 8006dba:	e095      	b.n	8006ee8 <UART_SetConfig+0x348>
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	4a2f      	ldr	r2, [pc, #188]	; (8006e80 <UART_SetConfig+0x2e0>)
 8006dc2:	4293      	cmp	r3, r2
 8006dc4:	d125      	bne.n	8006e12 <UART_SetConfig+0x272>
 8006dc6:	4b29      	ldr	r3, [pc, #164]	; (8006e6c <UART_SetConfig+0x2cc>)
 8006dc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006dcc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006dd0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006dd4:	d017      	beq.n	8006e06 <UART_SetConfig+0x266>
 8006dd6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006dda:	d817      	bhi.n	8006e0c <UART_SetConfig+0x26c>
 8006ddc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006de0:	d00b      	beq.n	8006dfa <UART_SetConfig+0x25a>
 8006de2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006de6:	d811      	bhi.n	8006e0c <UART_SetConfig+0x26c>
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d003      	beq.n	8006df4 <UART_SetConfig+0x254>
 8006dec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006df0:	d006      	beq.n	8006e00 <UART_SetConfig+0x260>
 8006df2:	e00b      	b.n	8006e0c <UART_SetConfig+0x26c>
 8006df4:	2301      	movs	r3, #1
 8006df6:	77fb      	strb	r3, [r7, #31]
 8006df8:	e076      	b.n	8006ee8 <UART_SetConfig+0x348>
 8006dfa:	2302      	movs	r3, #2
 8006dfc:	77fb      	strb	r3, [r7, #31]
 8006dfe:	e073      	b.n	8006ee8 <UART_SetConfig+0x348>
 8006e00:	2304      	movs	r3, #4
 8006e02:	77fb      	strb	r3, [r7, #31]
 8006e04:	e070      	b.n	8006ee8 <UART_SetConfig+0x348>
 8006e06:	2308      	movs	r3, #8
 8006e08:	77fb      	strb	r3, [r7, #31]
 8006e0a:	e06d      	b.n	8006ee8 <UART_SetConfig+0x348>
 8006e0c:	2310      	movs	r3, #16
 8006e0e:	77fb      	strb	r3, [r7, #31]
 8006e10:	e06a      	b.n	8006ee8 <UART_SetConfig+0x348>
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	4a1b      	ldr	r2, [pc, #108]	; (8006e84 <UART_SetConfig+0x2e4>)
 8006e18:	4293      	cmp	r3, r2
 8006e1a:	d138      	bne.n	8006e8e <UART_SetConfig+0x2ee>
 8006e1c:	4b13      	ldr	r3, [pc, #76]	; (8006e6c <UART_SetConfig+0x2cc>)
 8006e1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e22:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8006e26:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006e2a:	d017      	beq.n	8006e5c <UART_SetConfig+0x2bc>
 8006e2c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006e30:	d82a      	bhi.n	8006e88 <UART_SetConfig+0x2e8>
 8006e32:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006e36:	d00b      	beq.n	8006e50 <UART_SetConfig+0x2b0>
 8006e38:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006e3c:	d824      	bhi.n	8006e88 <UART_SetConfig+0x2e8>
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d003      	beq.n	8006e4a <UART_SetConfig+0x2aa>
 8006e42:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e46:	d006      	beq.n	8006e56 <UART_SetConfig+0x2b6>
 8006e48:	e01e      	b.n	8006e88 <UART_SetConfig+0x2e8>
 8006e4a:	2300      	movs	r3, #0
 8006e4c:	77fb      	strb	r3, [r7, #31]
 8006e4e:	e04b      	b.n	8006ee8 <UART_SetConfig+0x348>
 8006e50:	2302      	movs	r3, #2
 8006e52:	77fb      	strb	r3, [r7, #31]
 8006e54:	e048      	b.n	8006ee8 <UART_SetConfig+0x348>
 8006e56:	2304      	movs	r3, #4
 8006e58:	77fb      	strb	r3, [r7, #31]
 8006e5a:	e045      	b.n	8006ee8 <UART_SetConfig+0x348>
 8006e5c:	2308      	movs	r3, #8
 8006e5e:	77fb      	strb	r3, [r7, #31]
 8006e60:	e042      	b.n	8006ee8 <UART_SetConfig+0x348>
 8006e62:	bf00      	nop
 8006e64:	efff69f3 	.word	0xefff69f3
 8006e68:	40011000 	.word	0x40011000
 8006e6c:	40023800 	.word	0x40023800
 8006e70:	40004400 	.word	0x40004400
 8006e74:	40004800 	.word	0x40004800
 8006e78:	40004c00 	.word	0x40004c00
 8006e7c:	40005000 	.word	0x40005000
 8006e80:	40011400 	.word	0x40011400
 8006e84:	40007800 	.word	0x40007800
 8006e88:	2310      	movs	r3, #16
 8006e8a:	77fb      	strb	r3, [r7, #31]
 8006e8c:	e02c      	b.n	8006ee8 <UART_SetConfig+0x348>
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	4a72      	ldr	r2, [pc, #456]	; (800705c <UART_SetConfig+0x4bc>)
 8006e94:	4293      	cmp	r3, r2
 8006e96:	d125      	bne.n	8006ee4 <UART_SetConfig+0x344>
 8006e98:	4b71      	ldr	r3, [pc, #452]	; (8007060 <UART_SetConfig+0x4c0>)
 8006e9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e9e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006ea2:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006ea6:	d017      	beq.n	8006ed8 <UART_SetConfig+0x338>
 8006ea8:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006eac:	d817      	bhi.n	8006ede <UART_SetConfig+0x33e>
 8006eae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006eb2:	d00b      	beq.n	8006ecc <UART_SetConfig+0x32c>
 8006eb4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006eb8:	d811      	bhi.n	8006ede <UART_SetConfig+0x33e>
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d003      	beq.n	8006ec6 <UART_SetConfig+0x326>
 8006ebe:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006ec2:	d006      	beq.n	8006ed2 <UART_SetConfig+0x332>
 8006ec4:	e00b      	b.n	8006ede <UART_SetConfig+0x33e>
 8006ec6:	2300      	movs	r3, #0
 8006ec8:	77fb      	strb	r3, [r7, #31]
 8006eca:	e00d      	b.n	8006ee8 <UART_SetConfig+0x348>
 8006ecc:	2302      	movs	r3, #2
 8006ece:	77fb      	strb	r3, [r7, #31]
 8006ed0:	e00a      	b.n	8006ee8 <UART_SetConfig+0x348>
 8006ed2:	2304      	movs	r3, #4
 8006ed4:	77fb      	strb	r3, [r7, #31]
 8006ed6:	e007      	b.n	8006ee8 <UART_SetConfig+0x348>
 8006ed8:	2308      	movs	r3, #8
 8006eda:	77fb      	strb	r3, [r7, #31]
 8006edc:	e004      	b.n	8006ee8 <UART_SetConfig+0x348>
 8006ede:	2310      	movs	r3, #16
 8006ee0:	77fb      	strb	r3, [r7, #31]
 8006ee2:	e001      	b.n	8006ee8 <UART_SetConfig+0x348>
 8006ee4:	2310      	movs	r3, #16
 8006ee6:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	69db      	ldr	r3, [r3, #28]
 8006eec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006ef0:	d15b      	bne.n	8006faa <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8006ef2:	7ffb      	ldrb	r3, [r7, #31]
 8006ef4:	2b08      	cmp	r3, #8
 8006ef6:	d828      	bhi.n	8006f4a <UART_SetConfig+0x3aa>
 8006ef8:	a201      	add	r2, pc, #4	; (adr r2, 8006f00 <UART_SetConfig+0x360>)
 8006efa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006efe:	bf00      	nop
 8006f00:	08006f25 	.word	0x08006f25
 8006f04:	08006f2d 	.word	0x08006f2d
 8006f08:	08006f35 	.word	0x08006f35
 8006f0c:	08006f4b 	.word	0x08006f4b
 8006f10:	08006f3b 	.word	0x08006f3b
 8006f14:	08006f4b 	.word	0x08006f4b
 8006f18:	08006f4b 	.word	0x08006f4b
 8006f1c:	08006f4b 	.word	0x08006f4b
 8006f20:	08006f43 	.word	0x08006f43
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006f24:	f7fd fcc6 	bl	80048b4 <HAL_RCC_GetPCLK1Freq>
 8006f28:	61b8      	str	r0, [r7, #24]
        break;
 8006f2a:	e013      	b.n	8006f54 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006f2c:	f7fd fcd6 	bl	80048dc <HAL_RCC_GetPCLK2Freq>
 8006f30:	61b8      	str	r0, [r7, #24]
        break;
 8006f32:	e00f      	b.n	8006f54 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006f34:	4b4b      	ldr	r3, [pc, #300]	; (8007064 <UART_SetConfig+0x4c4>)
 8006f36:	61bb      	str	r3, [r7, #24]
        break;
 8006f38:	e00c      	b.n	8006f54 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006f3a:	f7fd fbe9 	bl	8004710 <HAL_RCC_GetSysClockFreq>
 8006f3e:	61b8      	str	r0, [r7, #24]
        break;
 8006f40:	e008      	b.n	8006f54 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006f42:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006f46:	61bb      	str	r3, [r7, #24]
        break;
 8006f48:	e004      	b.n	8006f54 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8006f4a:	2300      	movs	r3, #0
 8006f4c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006f4e:	2301      	movs	r3, #1
 8006f50:	77bb      	strb	r3, [r7, #30]
        break;
 8006f52:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006f54:	69bb      	ldr	r3, [r7, #24]
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d074      	beq.n	8007044 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006f5a:	69bb      	ldr	r3, [r7, #24]
 8006f5c:	005a      	lsls	r2, r3, #1
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	685b      	ldr	r3, [r3, #4]
 8006f62:	085b      	lsrs	r3, r3, #1
 8006f64:	441a      	add	r2, r3
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	685b      	ldr	r3, [r3, #4]
 8006f6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f6e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006f70:	693b      	ldr	r3, [r7, #16]
 8006f72:	2b0f      	cmp	r3, #15
 8006f74:	d916      	bls.n	8006fa4 <UART_SetConfig+0x404>
 8006f76:	693b      	ldr	r3, [r7, #16]
 8006f78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006f7c:	d212      	bcs.n	8006fa4 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006f7e:	693b      	ldr	r3, [r7, #16]
 8006f80:	b29b      	uxth	r3, r3
 8006f82:	f023 030f 	bic.w	r3, r3, #15
 8006f86:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006f88:	693b      	ldr	r3, [r7, #16]
 8006f8a:	085b      	lsrs	r3, r3, #1
 8006f8c:	b29b      	uxth	r3, r3
 8006f8e:	f003 0307 	and.w	r3, r3, #7
 8006f92:	b29a      	uxth	r2, r3
 8006f94:	89fb      	ldrh	r3, [r7, #14]
 8006f96:	4313      	orrs	r3, r2
 8006f98:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	89fa      	ldrh	r2, [r7, #14]
 8006fa0:	60da      	str	r2, [r3, #12]
 8006fa2:	e04f      	b.n	8007044 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006fa4:	2301      	movs	r3, #1
 8006fa6:	77bb      	strb	r3, [r7, #30]
 8006fa8:	e04c      	b.n	8007044 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006faa:	7ffb      	ldrb	r3, [r7, #31]
 8006fac:	2b08      	cmp	r3, #8
 8006fae:	d828      	bhi.n	8007002 <UART_SetConfig+0x462>
 8006fb0:	a201      	add	r2, pc, #4	; (adr r2, 8006fb8 <UART_SetConfig+0x418>)
 8006fb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fb6:	bf00      	nop
 8006fb8:	08006fdd 	.word	0x08006fdd
 8006fbc:	08006fe5 	.word	0x08006fe5
 8006fc0:	08006fed 	.word	0x08006fed
 8006fc4:	08007003 	.word	0x08007003
 8006fc8:	08006ff3 	.word	0x08006ff3
 8006fcc:	08007003 	.word	0x08007003
 8006fd0:	08007003 	.word	0x08007003
 8006fd4:	08007003 	.word	0x08007003
 8006fd8:	08006ffb 	.word	0x08006ffb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006fdc:	f7fd fc6a 	bl	80048b4 <HAL_RCC_GetPCLK1Freq>
 8006fe0:	61b8      	str	r0, [r7, #24]
        break;
 8006fe2:	e013      	b.n	800700c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006fe4:	f7fd fc7a 	bl	80048dc <HAL_RCC_GetPCLK2Freq>
 8006fe8:	61b8      	str	r0, [r7, #24]
        break;
 8006fea:	e00f      	b.n	800700c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006fec:	4b1d      	ldr	r3, [pc, #116]	; (8007064 <UART_SetConfig+0x4c4>)
 8006fee:	61bb      	str	r3, [r7, #24]
        break;
 8006ff0:	e00c      	b.n	800700c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006ff2:	f7fd fb8d 	bl	8004710 <HAL_RCC_GetSysClockFreq>
 8006ff6:	61b8      	str	r0, [r7, #24]
        break;
 8006ff8:	e008      	b.n	800700c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006ffa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006ffe:	61bb      	str	r3, [r7, #24]
        break;
 8007000:	e004      	b.n	800700c <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8007002:	2300      	movs	r3, #0
 8007004:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007006:	2301      	movs	r3, #1
 8007008:	77bb      	strb	r3, [r7, #30]
        break;
 800700a:	bf00      	nop
    }

    if (pclk != 0U)
 800700c:	69bb      	ldr	r3, [r7, #24]
 800700e:	2b00      	cmp	r3, #0
 8007010:	d018      	beq.n	8007044 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	685b      	ldr	r3, [r3, #4]
 8007016:	085a      	lsrs	r2, r3, #1
 8007018:	69bb      	ldr	r3, [r7, #24]
 800701a:	441a      	add	r2, r3
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	685b      	ldr	r3, [r3, #4]
 8007020:	fbb2 f3f3 	udiv	r3, r2, r3
 8007024:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007026:	693b      	ldr	r3, [r7, #16]
 8007028:	2b0f      	cmp	r3, #15
 800702a:	d909      	bls.n	8007040 <UART_SetConfig+0x4a0>
 800702c:	693b      	ldr	r3, [r7, #16]
 800702e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007032:	d205      	bcs.n	8007040 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007034:	693b      	ldr	r3, [r7, #16]
 8007036:	b29a      	uxth	r2, r3
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	60da      	str	r2, [r3, #12]
 800703e:	e001      	b.n	8007044 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8007040:	2301      	movs	r3, #1
 8007042:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	2200      	movs	r2, #0
 8007048:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	2200      	movs	r2, #0
 800704e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8007050:	7fbb      	ldrb	r3, [r7, #30]
}
 8007052:	4618      	mov	r0, r3
 8007054:	3720      	adds	r7, #32
 8007056:	46bd      	mov	sp, r7
 8007058:	bd80      	pop	{r7, pc}
 800705a:	bf00      	nop
 800705c:	40007c00 	.word	0x40007c00
 8007060:	40023800 	.word	0x40023800
 8007064:	00f42400 	.word	0x00f42400

08007068 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007068:	b480      	push	{r7}
 800706a:	b083      	sub	sp, #12
 800706c:	af00      	add	r7, sp, #0
 800706e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007074:	f003 0301 	and.w	r3, r3, #1
 8007078:	2b00      	cmp	r3, #0
 800707a:	d00a      	beq.n	8007092 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	685b      	ldr	r3, [r3, #4]
 8007082:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	430a      	orrs	r2, r1
 8007090:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007096:	f003 0302 	and.w	r3, r3, #2
 800709a:	2b00      	cmp	r3, #0
 800709c:	d00a      	beq.n	80070b4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	685b      	ldr	r3, [r3, #4]
 80070a4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	430a      	orrs	r2, r1
 80070b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070b8:	f003 0304 	and.w	r3, r3, #4
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d00a      	beq.n	80070d6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	685b      	ldr	r3, [r3, #4]
 80070c6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	430a      	orrs	r2, r1
 80070d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070da:	f003 0308 	and.w	r3, r3, #8
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d00a      	beq.n	80070f8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	685b      	ldr	r3, [r3, #4]
 80070e8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	430a      	orrs	r2, r1
 80070f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070fc:	f003 0310 	and.w	r3, r3, #16
 8007100:	2b00      	cmp	r3, #0
 8007102:	d00a      	beq.n	800711a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	689b      	ldr	r3, [r3, #8]
 800710a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	430a      	orrs	r2, r1
 8007118:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800711e:	f003 0320 	and.w	r3, r3, #32
 8007122:	2b00      	cmp	r3, #0
 8007124:	d00a      	beq.n	800713c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	689b      	ldr	r3, [r3, #8]
 800712c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	430a      	orrs	r2, r1
 800713a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007140:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007144:	2b00      	cmp	r3, #0
 8007146:	d01a      	beq.n	800717e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	685b      	ldr	r3, [r3, #4]
 800714e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	430a      	orrs	r2, r1
 800715c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007162:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007166:	d10a      	bne.n	800717e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	685b      	ldr	r3, [r3, #4]
 800716e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	430a      	orrs	r2, r1
 800717c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007182:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007186:	2b00      	cmp	r3, #0
 8007188:	d00a      	beq.n	80071a0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	685b      	ldr	r3, [r3, #4]
 8007190:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	430a      	orrs	r2, r1
 800719e:	605a      	str	r2, [r3, #4]
  }
}
 80071a0:	bf00      	nop
 80071a2:	370c      	adds	r7, #12
 80071a4:	46bd      	mov	sp, r7
 80071a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071aa:	4770      	bx	lr

080071ac <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80071ac:	b580      	push	{r7, lr}
 80071ae:	b086      	sub	sp, #24
 80071b0:	af02      	add	r7, sp, #8
 80071b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	2200      	movs	r2, #0
 80071b8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80071bc:	f7fb fb98 	bl	80028f0 <HAL_GetTick>
 80071c0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	f003 0308 	and.w	r3, r3, #8
 80071cc:	2b08      	cmp	r3, #8
 80071ce:	d10e      	bne.n	80071ee <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80071d0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80071d4:	9300      	str	r3, [sp, #0]
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	2200      	movs	r2, #0
 80071da:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80071de:	6878      	ldr	r0, [r7, #4]
 80071e0:	f000 f81b 	bl	800721a <UART_WaitOnFlagUntilTimeout>
 80071e4:	4603      	mov	r3, r0
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d001      	beq.n	80071ee <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80071ea:	2303      	movs	r3, #3
 80071ec:	e011      	b.n	8007212 <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	2220      	movs	r2, #32
 80071f2:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	2220      	movs	r2, #32
 80071f8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	2200      	movs	r2, #0
 8007200:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	2200      	movs	r2, #0
 8007206:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	2200      	movs	r2, #0
 800720c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8007210:	2300      	movs	r3, #0
}
 8007212:	4618      	mov	r0, r3
 8007214:	3710      	adds	r7, #16
 8007216:	46bd      	mov	sp, r7
 8007218:	bd80      	pop	{r7, pc}

0800721a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800721a:	b580      	push	{r7, lr}
 800721c:	b09c      	sub	sp, #112	; 0x70
 800721e:	af00      	add	r7, sp, #0
 8007220:	60f8      	str	r0, [r7, #12]
 8007222:	60b9      	str	r1, [r7, #8]
 8007224:	603b      	str	r3, [r7, #0]
 8007226:	4613      	mov	r3, r2
 8007228:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800722a:	e0a7      	b.n	800737c <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800722c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800722e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007232:	f000 80a3 	beq.w	800737c <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007236:	f7fb fb5b 	bl	80028f0 <HAL_GetTick>
 800723a:	4602      	mov	r2, r0
 800723c:	683b      	ldr	r3, [r7, #0]
 800723e:	1ad3      	subs	r3, r2, r3
 8007240:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007242:	429a      	cmp	r2, r3
 8007244:	d302      	bcc.n	800724c <UART_WaitOnFlagUntilTimeout+0x32>
 8007246:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007248:	2b00      	cmp	r3, #0
 800724a:	d13f      	bne.n	80072cc <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007252:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007254:	e853 3f00 	ldrex	r3, [r3]
 8007258:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800725a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800725c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007260:	667b      	str	r3, [r7, #100]	; 0x64
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	461a      	mov	r2, r3
 8007268:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800726a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800726c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800726e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007270:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007272:	e841 2300 	strex	r3, r2, [r1]
 8007276:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007278:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800727a:	2b00      	cmp	r3, #0
 800727c:	d1e6      	bne.n	800724c <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	3308      	adds	r3, #8
 8007284:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007286:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007288:	e853 3f00 	ldrex	r3, [r3]
 800728c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800728e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007290:	f023 0301 	bic.w	r3, r3, #1
 8007294:	663b      	str	r3, [r7, #96]	; 0x60
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	3308      	adds	r3, #8
 800729c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800729e:	64ba      	str	r2, [r7, #72]	; 0x48
 80072a0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072a2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80072a4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80072a6:	e841 2300 	strex	r3, r2, [r1]
 80072aa:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80072ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d1e5      	bne.n	800727e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	2220      	movs	r2, #32
 80072b6:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	2220      	movs	r2, #32
 80072bc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	2200      	movs	r2, #0
 80072c4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 80072c8:	2303      	movs	r3, #3
 80072ca:	e068      	b.n	800739e <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	f003 0304 	and.w	r3, r3, #4
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d050      	beq.n	800737c <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	69db      	ldr	r3, [r3, #28]
 80072e0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80072e4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80072e8:	d148      	bne.n	800737c <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80072f2:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072fc:	e853 3f00 	ldrex	r3, [r3]
 8007300:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007304:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007308:	66fb      	str	r3, [r7, #108]	; 0x6c
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	461a      	mov	r2, r3
 8007310:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007312:	637b      	str	r3, [r7, #52]	; 0x34
 8007314:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007316:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007318:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800731a:	e841 2300 	strex	r3, r2, [r1]
 800731e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007320:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007322:	2b00      	cmp	r3, #0
 8007324:	d1e6      	bne.n	80072f4 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	3308      	adds	r3, #8
 800732c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800732e:	697b      	ldr	r3, [r7, #20]
 8007330:	e853 3f00 	ldrex	r3, [r3]
 8007334:	613b      	str	r3, [r7, #16]
   return(result);
 8007336:	693b      	ldr	r3, [r7, #16]
 8007338:	f023 0301 	bic.w	r3, r3, #1
 800733c:	66bb      	str	r3, [r7, #104]	; 0x68
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	3308      	adds	r3, #8
 8007344:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007346:	623a      	str	r2, [r7, #32]
 8007348:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800734a:	69f9      	ldr	r1, [r7, #28]
 800734c:	6a3a      	ldr	r2, [r7, #32]
 800734e:	e841 2300 	strex	r3, r2, [r1]
 8007352:	61bb      	str	r3, [r7, #24]
   return(result);
 8007354:	69bb      	ldr	r3, [r7, #24]
 8007356:	2b00      	cmp	r3, #0
 8007358:	d1e5      	bne.n	8007326 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	2220      	movs	r2, #32
 800735e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	2220      	movs	r2, #32
 8007364:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	2220      	movs	r2, #32
 800736c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	2200      	movs	r2, #0
 8007374:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8007378:	2303      	movs	r3, #3
 800737a:	e010      	b.n	800739e <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	69da      	ldr	r2, [r3, #28]
 8007382:	68bb      	ldr	r3, [r7, #8]
 8007384:	4013      	ands	r3, r2
 8007386:	68ba      	ldr	r2, [r7, #8]
 8007388:	429a      	cmp	r2, r3
 800738a:	bf0c      	ite	eq
 800738c:	2301      	moveq	r3, #1
 800738e:	2300      	movne	r3, #0
 8007390:	b2db      	uxtb	r3, r3
 8007392:	461a      	mov	r2, r3
 8007394:	79fb      	ldrb	r3, [r7, #7]
 8007396:	429a      	cmp	r2, r3
 8007398:	f43f af48 	beq.w	800722c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800739c:	2300      	movs	r3, #0
}
 800739e:	4618      	mov	r0, r3
 80073a0:	3770      	adds	r7, #112	; 0x70
 80073a2:	46bd      	mov	sp, r7
 80073a4:	bd80      	pop	{r7, pc}
	...

080073a8 <__errno>:
 80073a8:	4b01      	ldr	r3, [pc, #4]	; (80073b0 <__errno+0x8>)
 80073aa:	6818      	ldr	r0, [r3, #0]
 80073ac:	4770      	bx	lr
 80073ae:	bf00      	nop
 80073b0:	2000278c 	.word	0x2000278c

080073b4 <__libc_init_array>:
 80073b4:	b570      	push	{r4, r5, r6, lr}
 80073b6:	4d0d      	ldr	r5, [pc, #52]	; (80073ec <__libc_init_array+0x38>)
 80073b8:	4c0d      	ldr	r4, [pc, #52]	; (80073f0 <__libc_init_array+0x3c>)
 80073ba:	1b64      	subs	r4, r4, r5
 80073bc:	10a4      	asrs	r4, r4, #2
 80073be:	2600      	movs	r6, #0
 80073c0:	42a6      	cmp	r6, r4
 80073c2:	d109      	bne.n	80073d8 <__libc_init_array+0x24>
 80073c4:	4d0b      	ldr	r5, [pc, #44]	; (80073f4 <__libc_init_array+0x40>)
 80073c6:	4c0c      	ldr	r4, [pc, #48]	; (80073f8 <__libc_init_array+0x44>)
 80073c8:	f001 f824 	bl	8008414 <_init>
 80073cc:	1b64      	subs	r4, r4, r5
 80073ce:	10a4      	asrs	r4, r4, #2
 80073d0:	2600      	movs	r6, #0
 80073d2:	42a6      	cmp	r6, r4
 80073d4:	d105      	bne.n	80073e2 <__libc_init_array+0x2e>
 80073d6:	bd70      	pop	{r4, r5, r6, pc}
 80073d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80073dc:	4798      	blx	r3
 80073de:	3601      	adds	r6, #1
 80073e0:	e7ee      	b.n	80073c0 <__libc_init_array+0xc>
 80073e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80073e6:	4798      	blx	r3
 80073e8:	3601      	adds	r6, #1
 80073ea:	e7f2      	b.n	80073d2 <__libc_init_array+0x1e>
 80073ec:	08008a0c 	.word	0x08008a0c
 80073f0:	08008a0c 	.word	0x08008a0c
 80073f4:	08008a0c 	.word	0x08008a0c
 80073f8:	08008a10 	.word	0x08008a10

080073fc <memset>:
 80073fc:	4402      	add	r2, r0
 80073fe:	4603      	mov	r3, r0
 8007400:	4293      	cmp	r3, r2
 8007402:	d100      	bne.n	8007406 <memset+0xa>
 8007404:	4770      	bx	lr
 8007406:	f803 1b01 	strb.w	r1, [r3], #1
 800740a:	e7f9      	b.n	8007400 <memset+0x4>

0800740c <iprintf>:
 800740c:	b40f      	push	{r0, r1, r2, r3}
 800740e:	4b0a      	ldr	r3, [pc, #40]	; (8007438 <iprintf+0x2c>)
 8007410:	b513      	push	{r0, r1, r4, lr}
 8007412:	681c      	ldr	r4, [r3, #0]
 8007414:	b124      	cbz	r4, 8007420 <iprintf+0x14>
 8007416:	69a3      	ldr	r3, [r4, #24]
 8007418:	b913      	cbnz	r3, 8007420 <iprintf+0x14>
 800741a:	4620      	mov	r0, r4
 800741c:	f000 fa5e 	bl	80078dc <__sinit>
 8007420:	ab05      	add	r3, sp, #20
 8007422:	9a04      	ldr	r2, [sp, #16]
 8007424:	68a1      	ldr	r1, [r4, #8]
 8007426:	9301      	str	r3, [sp, #4]
 8007428:	4620      	mov	r0, r4
 800742a:	f000 fc67 	bl	8007cfc <_vfiprintf_r>
 800742e:	b002      	add	sp, #8
 8007430:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007434:	b004      	add	sp, #16
 8007436:	4770      	bx	lr
 8007438:	2000278c 	.word	0x2000278c

0800743c <_puts_r>:
 800743c:	b570      	push	{r4, r5, r6, lr}
 800743e:	460e      	mov	r6, r1
 8007440:	4605      	mov	r5, r0
 8007442:	b118      	cbz	r0, 800744c <_puts_r+0x10>
 8007444:	6983      	ldr	r3, [r0, #24]
 8007446:	b90b      	cbnz	r3, 800744c <_puts_r+0x10>
 8007448:	f000 fa48 	bl	80078dc <__sinit>
 800744c:	69ab      	ldr	r3, [r5, #24]
 800744e:	68ac      	ldr	r4, [r5, #8]
 8007450:	b913      	cbnz	r3, 8007458 <_puts_r+0x1c>
 8007452:	4628      	mov	r0, r5
 8007454:	f000 fa42 	bl	80078dc <__sinit>
 8007458:	4b2c      	ldr	r3, [pc, #176]	; (800750c <_puts_r+0xd0>)
 800745a:	429c      	cmp	r4, r3
 800745c:	d120      	bne.n	80074a0 <_puts_r+0x64>
 800745e:	686c      	ldr	r4, [r5, #4]
 8007460:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007462:	07db      	lsls	r3, r3, #31
 8007464:	d405      	bmi.n	8007472 <_puts_r+0x36>
 8007466:	89a3      	ldrh	r3, [r4, #12]
 8007468:	0598      	lsls	r0, r3, #22
 800746a:	d402      	bmi.n	8007472 <_puts_r+0x36>
 800746c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800746e:	f000 fad3 	bl	8007a18 <__retarget_lock_acquire_recursive>
 8007472:	89a3      	ldrh	r3, [r4, #12]
 8007474:	0719      	lsls	r1, r3, #28
 8007476:	d51d      	bpl.n	80074b4 <_puts_r+0x78>
 8007478:	6923      	ldr	r3, [r4, #16]
 800747a:	b1db      	cbz	r3, 80074b4 <_puts_r+0x78>
 800747c:	3e01      	subs	r6, #1
 800747e:	68a3      	ldr	r3, [r4, #8]
 8007480:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007484:	3b01      	subs	r3, #1
 8007486:	60a3      	str	r3, [r4, #8]
 8007488:	bb39      	cbnz	r1, 80074da <_puts_r+0x9e>
 800748a:	2b00      	cmp	r3, #0
 800748c:	da38      	bge.n	8007500 <_puts_r+0xc4>
 800748e:	4622      	mov	r2, r4
 8007490:	210a      	movs	r1, #10
 8007492:	4628      	mov	r0, r5
 8007494:	f000 f848 	bl	8007528 <__swbuf_r>
 8007498:	3001      	adds	r0, #1
 800749a:	d011      	beq.n	80074c0 <_puts_r+0x84>
 800749c:	250a      	movs	r5, #10
 800749e:	e011      	b.n	80074c4 <_puts_r+0x88>
 80074a0:	4b1b      	ldr	r3, [pc, #108]	; (8007510 <_puts_r+0xd4>)
 80074a2:	429c      	cmp	r4, r3
 80074a4:	d101      	bne.n	80074aa <_puts_r+0x6e>
 80074a6:	68ac      	ldr	r4, [r5, #8]
 80074a8:	e7da      	b.n	8007460 <_puts_r+0x24>
 80074aa:	4b1a      	ldr	r3, [pc, #104]	; (8007514 <_puts_r+0xd8>)
 80074ac:	429c      	cmp	r4, r3
 80074ae:	bf08      	it	eq
 80074b0:	68ec      	ldreq	r4, [r5, #12]
 80074b2:	e7d5      	b.n	8007460 <_puts_r+0x24>
 80074b4:	4621      	mov	r1, r4
 80074b6:	4628      	mov	r0, r5
 80074b8:	f000 f888 	bl	80075cc <__swsetup_r>
 80074bc:	2800      	cmp	r0, #0
 80074be:	d0dd      	beq.n	800747c <_puts_r+0x40>
 80074c0:	f04f 35ff 	mov.w	r5, #4294967295
 80074c4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80074c6:	07da      	lsls	r2, r3, #31
 80074c8:	d405      	bmi.n	80074d6 <_puts_r+0x9a>
 80074ca:	89a3      	ldrh	r3, [r4, #12]
 80074cc:	059b      	lsls	r3, r3, #22
 80074ce:	d402      	bmi.n	80074d6 <_puts_r+0x9a>
 80074d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80074d2:	f000 faa2 	bl	8007a1a <__retarget_lock_release_recursive>
 80074d6:	4628      	mov	r0, r5
 80074d8:	bd70      	pop	{r4, r5, r6, pc}
 80074da:	2b00      	cmp	r3, #0
 80074dc:	da04      	bge.n	80074e8 <_puts_r+0xac>
 80074de:	69a2      	ldr	r2, [r4, #24]
 80074e0:	429a      	cmp	r2, r3
 80074e2:	dc06      	bgt.n	80074f2 <_puts_r+0xb6>
 80074e4:	290a      	cmp	r1, #10
 80074e6:	d004      	beq.n	80074f2 <_puts_r+0xb6>
 80074e8:	6823      	ldr	r3, [r4, #0]
 80074ea:	1c5a      	adds	r2, r3, #1
 80074ec:	6022      	str	r2, [r4, #0]
 80074ee:	7019      	strb	r1, [r3, #0]
 80074f0:	e7c5      	b.n	800747e <_puts_r+0x42>
 80074f2:	4622      	mov	r2, r4
 80074f4:	4628      	mov	r0, r5
 80074f6:	f000 f817 	bl	8007528 <__swbuf_r>
 80074fa:	3001      	adds	r0, #1
 80074fc:	d1bf      	bne.n	800747e <_puts_r+0x42>
 80074fe:	e7df      	b.n	80074c0 <_puts_r+0x84>
 8007500:	6823      	ldr	r3, [r4, #0]
 8007502:	250a      	movs	r5, #10
 8007504:	1c5a      	adds	r2, r3, #1
 8007506:	6022      	str	r2, [r4, #0]
 8007508:	701d      	strb	r5, [r3, #0]
 800750a:	e7db      	b.n	80074c4 <_puts_r+0x88>
 800750c:	08008990 	.word	0x08008990
 8007510:	080089b0 	.word	0x080089b0
 8007514:	08008970 	.word	0x08008970

08007518 <puts>:
 8007518:	4b02      	ldr	r3, [pc, #8]	; (8007524 <puts+0xc>)
 800751a:	4601      	mov	r1, r0
 800751c:	6818      	ldr	r0, [r3, #0]
 800751e:	f7ff bf8d 	b.w	800743c <_puts_r>
 8007522:	bf00      	nop
 8007524:	2000278c 	.word	0x2000278c

08007528 <__swbuf_r>:
 8007528:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800752a:	460e      	mov	r6, r1
 800752c:	4614      	mov	r4, r2
 800752e:	4605      	mov	r5, r0
 8007530:	b118      	cbz	r0, 800753a <__swbuf_r+0x12>
 8007532:	6983      	ldr	r3, [r0, #24]
 8007534:	b90b      	cbnz	r3, 800753a <__swbuf_r+0x12>
 8007536:	f000 f9d1 	bl	80078dc <__sinit>
 800753a:	4b21      	ldr	r3, [pc, #132]	; (80075c0 <__swbuf_r+0x98>)
 800753c:	429c      	cmp	r4, r3
 800753e:	d12b      	bne.n	8007598 <__swbuf_r+0x70>
 8007540:	686c      	ldr	r4, [r5, #4]
 8007542:	69a3      	ldr	r3, [r4, #24]
 8007544:	60a3      	str	r3, [r4, #8]
 8007546:	89a3      	ldrh	r3, [r4, #12]
 8007548:	071a      	lsls	r2, r3, #28
 800754a:	d52f      	bpl.n	80075ac <__swbuf_r+0x84>
 800754c:	6923      	ldr	r3, [r4, #16]
 800754e:	b36b      	cbz	r3, 80075ac <__swbuf_r+0x84>
 8007550:	6923      	ldr	r3, [r4, #16]
 8007552:	6820      	ldr	r0, [r4, #0]
 8007554:	1ac0      	subs	r0, r0, r3
 8007556:	6963      	ldr	r3, [r4, #20]
 8007558:	b2f6      	uxtb	r6, r6
 800755a:	4283      	cmp	r3, r0
 800755c:	4637      	mov	r7, r6
 800755e:	dc04      	bgt.n	800756a <__swbuf_r+0x42>
 8007560:	4621      	mov	r1, r4
 8007562:	4628      	mov	r0, r5
 8007564:	f000 f926 	bl	80077b4 <_fflush_r>
 8007568:	bb30      	cbnz	r0, 80075b8 <__swbuf_r+0x90>
 800756a:	68a3      	ldr	r3, [r4, #8]
 800756c:	3b01      	subs	r3, #1
 800756e:	60a3      	str	r3, [r4, #8]
 8007570:	6823      	ldr	r3, [r4, #0]
 8007572:	1c5a      	adds	r2, r3, #1
 8007574:	6022      	str	r2, [r4, #0]
 8007576:	701e      	strb	r6, [r3, #0]
 8007578:	6963      	ldr	r3, [r4, #20]
 800757a:	3001      	adds	r0, #1
 800757c:	4283      	cmp	r3, r0
 800757e:	d004      	beq.n	800758a <__swbuf_r+0x62>
 8007580:	89a3      	ldrh	r3, [r4, #12]
 8007582:	07db      	lsls	r3, r3, #31
 8007584:	d506      	bpl.n	8007594 <__swbuf_r+0x6c>
 8007586:	2e0a      	cmp	r6, #10
 8007588:	d104      	bne.n	8007594 <__swbuf_r+0x6c>
 800758a:	4621      	mov	r1, r4
 800758c:	4628      	mov	r0, r5
 800758e:	f000 f911 	bl	80077b4 <_fflush_r>
 8007592:	b988      	cbnz	r0, 80075b8 <__swbuf_r+0x90>
 8007594:	4638      	mov	r0, r7
 8007596:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007598:	4b0a      	ldr	r3, [pc, #40]	; (80075c4 <__swbuf_r+0x9c>)
 800759a:	429c      	cmp	r4, r3
 800759c:	d101      	bne.n	80075a2 <__swbuf_r+0x7a>
 800759e:	68ac      	ldr	r4, [r5, #8]
 80075a0:	e7cf      	b.n	8007542 <__swbuf_r+0x1a>
 80075a2:	4b09      	ldr	r3, [pc, #36]	; (80075c8 <__swbuf_r+0xa0>)
 80075a4:	429c      	cmp	r4, r3
 80075a6:	bf08      	it	eq
 80075a8:	68ec      	ldreq	r4, [r5, #12]
 80075aa:	e7ca      	b.n	8007542 <__swbuf_r+0x1a>
 80075ac:	4621      	mov	r1, r4
 80075ae:	4628      	mov	r0, r5
 80075b0:	f000 f80c 	bl	80075cc <__swsetup_r>
 80075b4:	2800      	cmp	r0, #0
 80075b6:	d0cb      	beq.n	8007550 <__swbuf_r+0x28>
 80075b8:	f04f 37ff 	mov.w	r7, #4294967295
 80075bc:	e7ea      	b.n	8007594 <__swbuf_r+0x6c>
 80075be:	bf00      	nop
 80075c0:	08008990 	.word	0x08008990
 80075c4:	080089b0 	.word	0x080089b0
 80075c8:	08008970 	.word	0x08008970

080075cc <__swsetup_r>:
 80075cc:	4b32      	ldr	r3, [pc, #200]	; (8007698 <__swsetup_r+0xcc>)
 80075ce:	b570      	push	{r4, r5, r6, lr}
 80075d0:	681d      	ldr	r5, [r3, #0]
 80075d2:	4606      	mov	r6, r0
 80075d4:	460c      	mov	r4, r1
 80075d6:	b125      	cbz	r5, 80075e2 <__swsetup_r+0x16>
 80075d8:	69ab      	ldr	r3, [r5, #24]
 80075da:	b913      	cbnz	r3, 80075e2 <__swsetup_r+0x16>
 80075dc:	4628      	mov	r0, r5
 80075de:	f000 f97d 	bl	80078dc <__sinit>
 80075e2:	4b2e      	ldr	r3, [pc, #184]	; (800769c <__swsetup_r+0xd0>)
 80075e4:	429c      	cmp	r4, r3
 80075e6:	d10f      	bne.n	8007608 <__swsetup_r+0x3c>
 80075e8:	686c      	ldr	r4, [r5, #4]
 80075ea:	89a3      	ldrh	r3, [r4, #12]
 80075ec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80075f0:	0719      	lsls	r1, r3, #28
 80075f2:	d42c      	bmi.n	800764e <__swsetup_r+0x82>
 80075f4:	06dd      	lsls	r5, r3, #27
 80075f6:	d411      	bmi.n	800761c <__swsetup_r+0x50>
 80075f8:	2309      	movs	r3, #9
 80075fa:	6033      	str	r3, [r6, #0]
 80075fc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007600:	81a3      	strh	r3, [r4, #12]
 8007602:	f04f 30ff 	mov.w	r0, #4294967295
 8007606:	e03e      	b.n	8007686 <__swsetup_r+0xba>
 8007608:	4b25      	ldr	r3, [pc, #148]	; (80076a0 <__swsetup_r+0xd4>)
 800760a:	429c      	cmp	r4, r3
 800760c:	d101      	bne.n	8007612 <__swsetup_r+0x46>
 800760e:	68ac      	ldr	r4, [r5, #8]
 8007610:	e7eb      	b.n	80075ea <__swsetup_r+0x1e>
 8007612:	4b24      	ldr	r3, [pc, #144]	; (80076a4 <__swsetup_r+0xd8>)
 8007614:	429c      	cmp	r4, r3
 8007616:	bf08      	it	eq
 8007618:	68ec      	ldreq	r4, [r5, #12]
 800761a:	e7e6      	b.n	80075ea <__swsetup_r+0x1e>
 800761c:	0758      	lsls	r0, r3, #29
 800761e:	d512      	bpl.n	8007646 <__swsetup_r+0x7a>
 8007620:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007622:	b141      	cbz	r1, 8007636 <__swsetup_r+0x6a>
 8007624:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007628:	4299      	cmp	r1, r3
 800762a:	d002      	beq.n	8007632 <__swsetup_r+0x66>
 800762c:	4630      	mov	r0, r6
 800762e:	f000 fa5b 	bl	8007ae8 <_free_r>
 8007632:	2300      	movs	r3, #0
 8007634:	6363      	str	r3, [r4, #52]	; 0x34
 8007636:	89a3      	ldrh	r3, [r4, #12]
 8007638:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800763c:	81a3      	strh	r3, [r4, #12]
 800763e:	2300      	movs	r3, #0
 8007640:	6063      	str	r3, [r4, #4]
 8007642:	6923      	ldr	r3, [r4, #16]
 8007644:	6023      	str	r3, [r4, #0]
 8007646:	89a3      	ldrh	r3, [r4, #12]
 8007648:	f043 0308 	orr.w	r3, r3, #8
 800764c:	81a3      	strh	r3, [r4, #12]
 800764e:	6923      	ldr	r3, [r4, #16]
 8007650:	b94b      	cbnz	r3, 8007666 <__swsetup_r+0x9a>
 8007652:	89a3      	ldrh	r3, [r4, #12]
 8007654:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007658:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800765c:	d003      	beq.n	8007666 <__swsetup_r+0x9a>
 800765e:	4621      	mov	r1, r4
 8007660:	4630      	mov	r0, r6
 8007662:	f000 fa01 	bl	8007a68 <__smakebuf_r>
 8007666:	89a0      	ldrh	r0, [r4, #12]
 8007668:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800766c:	f010 0301 	ands.w	r3, r0, #1
 8007670:	d00a      	beq.n	8007688 <__swsetup_r+0xbc>
 8007672:	2300      	movs	r3, #0
 8007674:	60a3      	str	r3, [r4, #8]
 8007676:	6963      	ldr	r3, [r4, #20]
 8007678:	425b      	negs	r3, r3
 800767a:	61a3      	str	r3, [r4, #24]
 800767c:	6923      	ldr	r3, [r4, #16]
 800767e:	b943      	cbnz	r3, 8007692 <__swsetup_r+0xc6>
 8007680:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007684:	d1ba      	bne.n	80075fc <__swsetup_r+0x30>
 8007686:	bd70      	pop	{r4, r5, r6, pc}
 8007688:	0781      	lsls	r1, r0, #30
 800768a:	bf58      	it	pl
 800768c:	6963      	ldrpl	r3, [r4, #20]
 800768e:	60a3      	str	r3, [r4, #8]
 8007690:	e7f4      	b.n	800767c <__swsetup_r+0xb0>
 8007692:	2000      	movs	r0, #0
 8007694:	e7f7      	b.n	8007686 <__swsetup_r+0xba>
 8007696:	bf00      	nop
 8007698:	2000278c 	.word	0x2000278c
 800769c:	08008990 	.word	0x08008990
 80076a0:	080089b0 	.word	0x080089b0
 80076a4:	08008970 	.word	0x08008970

080076a8 <__sflush_r>:
 80076a8:	898a      	ldrh	r2, [r1, #12]
 80076aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80076ae:	4605      	mov	r5, r0
 80076b0:	0710      	lsls	r0, r2, #28
 80076b2:	460c      	mov	r4, r1
 80076b4:	d458      	bmi.n	8007768 <__sflush_r+0xc0>
 80076b6:	684b      	ldr	r3, [r1, #4]
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	dc05      	bgt.n	80076c8 <__sflush_r+0x20>
 80076bc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80076be:	2b00      	cmp	r3, #0
 80076c0:	dc02      	bgt.n	80076c8 <__sflush_r+0x20>
 80076c2:	2000      	movs	r0, #0
 80076c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80076c8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80076ca:	2e00      	cmp	r6, #0
 80076cc:	d0f9      	beq.n	80076c2 <__sflush_r+0x1a>
 80076ce:	2300      	movs	r3, #0
 80076d0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80076d4:	682f      	ldr	r7, [r5, #0]
 80076d6:	602b      	str	r3, [r5, #0]
 80076d8:	d032      	beq.n	8007740 <__sflush_r+0x98>
 80076da:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80076dc:	89a3      	ldrh	r3, [r4, #12]
 80076de:	075a      	lsls	r2, r3, #29
 80076e0:	d505      	bpl.n	80076ee <__sflush_r+0x46>
 80076e2:	6863      	ldr	r3, [r4, #4]
 80076e4:	1ac0      	subs	r0, r0, r3
 80076e6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80076e8:	b10b      	cbz	r3, 80076ee <__sflush_r+0x46>
 80076ea:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80076ec:	1ac0      	subs	r0, r0, r3
 80076ee:	2300      	movs	r3, #0
 80076f0:	4602      	mov	r2, r0
 80076f2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80076f4:	6a21      	ldr	r1, [r4, #32]
 80076f6:	4628      	mov	r0, r5
 80076f8:	47b0      	blx	r6
 80076fa:	1c43      	adds	r3, r0, #1
 80076fc:	89a3      	ldrh	r3, [r4, #12]
 80076fe:	d106      	bne.n	800770e <__sflush_r+0x66>
 8007700:	6829      	ldr	r1, [r5, #0]
 8007702:	291d      	cmp	r1, #29
 8007704:	d82c      	bhi.n	8007760 <__sflush_r+0xb8>
 8007706:	4a2a      	ldr	r2, [pc, #168]	; (80077b0 <__sflush_r+0x108>)
 8007708:	40ca      	lsrs	r2, r1
 800770a:	07d6      	lsls	r6, r2, #31
 800770c:	d528      	bpl.n	8007760 <__sflush_r+0xb8>
 800770e:	2200      	movs	r2, #0
 8007710:	6062      	str	r2, [r4, #4]
 8007712:	04d9      	lsls	r1, r3, #19
 8007714:	6922      	ldr	r2, [r4, #16]
 8007716:	6022      	str	r2, [r4, #0]
 8007718:	d504      	bpl.n	8007724 <__sflush_r+0x7c>
 800771a:	1c42      	adds	r2, r0, #1
 800771c:	d101      	bne.n	8007722 <__sflush_r+0x7a>
 800771e:	682b      	ldr	r3, [r5, #0]
 8007720:	b903      	cbnz	r3, 8007724 <__sflush_r+0x7c>
 8007722:	6560      	str	r0, [r4, #84]	; 0x54
 8007724:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007726:	602f      	str	r7, [r5, #0]
 8007728:	2900      	cmp	r1, #0
 800772a:	d0ca      	beq.n	80076c2 <__sflush_r+0x1a>
 800772c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007730:	4299      	cmp	r1, r3
 8007732:	d002      	beq.n	800773a <__sflush_r+0x92>
 8007734:	4628      	mov	r0, r5
 8007736:	f000 f9d7 	bl	8007ae8 <_free_r>
 800773a:	2000      	movs	r0, #0
 800773c:	6360      	str	r0, [r4, #52]	; 0x34
 800773e:	e7c1      	b.n	80076c4 <__sflush_r+0x1c>
 8007740:	6a21      	ldr	r1, [r4, #32]
 8007742:	2301      	movs	r3, #1
 8007744:	4628      	mov	r0, r5
 8007746:	47b0      	blx	r6
 8007748:	1c41      	adds	r1, r0, #1
 800774a:	d1c7      	bne.n	80076dc <__sflush_r+0x34>
 800774c:	682b      	ldr	r3, [r5, #0]
 800774e:	2b00      	cmp	r3, #0
 8007750:	d0c4      	beq.n	80076dc <__sflush_r+0x34>
 8007752:	2b1d      	cmp	r3, #29
 8007754:	d001      	beq.n	800775a <__sflush_r+0xb2>
 8007756:	2b16      	cmp	r3, #22
 8007758:	d101      	bne.n	800775e <__sflush_r+0xb6>
 800775a:	602f      	str	r7, [r5, #0]
 800775c:	e7b1      	b.n	80076c2 <__sflush_r+0x1a>
 800775e:	89a3      	ldrh	r3, [r4, #12]
 8007760:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007764:	81a3      	strh	r3, [r4, #12]
 8007766:	e7ad      	b.n	80076c4 <__sflush_r+0x1c>
 8007768:	690f      	ldr	r7, [r1, #16]
 800776a:	2f00      	cmp	r7, #0
 800776c:	d0a9      	beq.n	80076c2 <__sflush_r+0x1a>
 800776e:	0793      	lsls	r3, r2, #30
 8007770:	680e      	ldr	r6, [r1, #0]
 8007772:	bf08      	it	eq
 8007774:	694b      	ldreq	r3, [r1, #20]
 8007776:	600f      	str	r7, [r1, #0]
 8007778:	bf18      	it	ne
 800777a:	2300      	movne	r3, #0
 800777c:	eba6 0807 	sub.w	r8, r6, r7
 8007780:	608b      	str	r3, [r1, #8]
 8007782:	f1b8 0f00 	cmp.w	r8, #0
 8007786:	dd9c      	ble.n	80076c2 <__sflush_r+0x1a>
 8007788:	6a21      	ldr	r1, [r4, #32]
 800778a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800778c:	4643      	mov	r3, r8
 800778e:	463a      	mov	r2, r7
 8007790:	4628      	mov	r0, r5
 8007792:	47b0      	blx	r6
 8007794:	2800      	cmp	r0, #0
 8007796:	dc06      	bgt.n	80077a6 <__sflush_r+0xfe>
 8007798:	89a3      	ldrh	r3, [r4, #12]
 800779a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800779e:	81a3      	strh	r3, [r4, #12]
 80077a0:	f04f 30ff 	mov.w	r0, #4294967295
 80077a4:	e78e      	b.n	80076c4 <__sflush_r+0x1c>
 80077a6:	4407      	add	r7, r0
 80077a8:	eba8 0800 	sub.w	r8, r8, r0
 80077ac:	e7e9      	b.n	8007782 <__sflush_r+0xda>
 80077ae:	bf00      	nop
 80077b0:	20400001 	.word	0x20400001

080077b4 <_fflush_r>:
 80077b4:	b538      	push	{r3, r4, r5, lr}
 80077b6:	690b      	ldr	r3, [r1, #16]
 80077b8:	4605      	mov	r5, r0
 80077ba:	460c      	mov	r4, r1
 80077bc:	b913      	cbnz	r3, 80077c4 <_fflush_r+0x10>
 80077be:	2500      	movs	r5, #0
 80077c0:	4628      	mov	r0, r5
 80077c2:	bd38      	pop	{r3, r4, r5, pc}
 80077c4:	b118      	cbz	r0, 80077ce <_fflush_r+0x1a>
 80077c6:	6983      	ldr	r3, [r0, #24]
 80077c8:	b90b      	cbnz	r3, 80077ce <_fflush_r+0x1a>
 80077ca:	f000 f887 	bl	80078dc <__sinit>
 80077ce:	4b14      	ldr	r3, [pc, #80]	; (8007820 <_fflush_r+0x6c>)
 80077d0:	429c      	cmp	r4, r3
 80077d2:	d11b      	bne.n	800780c <_fflush_r+0x58>
 80077d4:	686c      	ldr	r4, [r5, #4]
 80077d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d0ef      	beq.n	80077be <_fflush_r+0xa>
 80077de:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80077e0:	07d0      	lsls	r0, r2, #31
 80077e2:	d404      	bmi.n	80077ee <_fflush_r+0x3a>
 80077e4:	0599      	lsls	r1, r3, #22
 80077e6:	d402      	bmi.n	80077ee <_fflush_r+0x3a>
 80077e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80077ea:	f000 f915 	bl	8007a18 <__retarget_lock_acquire_recursive>
 80077ee:	4628      	mov	r0, r5
 80077f0:	4621      	mov	r1, r4
 80077f2:	f7ff ff59 	bl	80076a8 <__sflush_r>
 80077f6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80077f8:	07da      	lsls	r2, r3, #31
 80077fa:	4605      	mov	r5, r0
 80077fc:	d4e0      	bmi.n	80077c0 <_fflush_r+0xc>
 80077fe:	89a3      	ldrh	r3, [r4, #12]
 8007800:	059b      	lsls	r3, r3, #22
 8007802:	d4dd      	bmi.n	80077c0 <_fflush_r+0xc>
 8007804:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007806:	f000 f908 	bl	8007a1a <__retarget_lock_release_recursive>
 800780a:	e7d9      	b.n	80077c0 <_fflush_r+0xc>
 800780c:	4b05      	ldr	r3, [pc, #20]	; (8007824 <_fflush_r+0x70>)
 800780e:	429c      	cmp	r4, r3
 8007810:	d101      	bne.n	8007816 <_fflush_r+0x62>
 8007812:	68ac      	ldr	r4, [r5, #8]
 8007814:	e7df      	b.n	80077d6 <_fflush_r+0x22>
 8007816:	4b04      	ldr	r3, [pc, #16]	; (8007828 <_fflush_r+0x74>)
 8007818:	429c      	cmp	r4, r3
 800781a:	bf08      	it	eq
 800781c:	68ec      	ldreq	r4, [r5, #12]
 800781e:	e7da      	b.n	80077d6 <_fflush_r+0x22>
 8007820:	08008990 	.word	0x08008990
 8007824:	080089b0 	.word	0x080089b0
 8007828:	08008970 	.word	0x08008970

0800782c <std>:
 800782c:	2300      	movs	r3, #0
 800782e:	b510      	push	{r4, lr}
 8007830:	4604      	mov	r4, r0
 8007832:	e9c0 3300 	strd	r3, r3, [r0]
 8007836:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800783a:	6083      	str	r3, [r0, #8]
 800783c:	8181      	strh	r1, [r0, #12]
 800783e:	6643      	str	r3, [r0, #100]	; 0x64
 8007840:	81c2      	strh	r2, [r0, #14]
 8007842:	6183      	str	r3, [r0, #24]
 8007844:	4619      	mov	r1, r3
 8007846:	2208      	movs	r2, #8
 8007848:	305c      	adds	r0, #92	; 0x5c
 800784a:	f7ff fdd7 	bl	80073fc <memset>
 800784e:	4b05      	ldr	r3, [pc, #20]	; (8007864 <std+0x38>)
 8007850:	6263      	str	r3, [r4, #36]	; 0x24
 8007852:	4b05      	ldr	r3, [pc, #20]	; (8007868 <std+0x3c>)
 8007854:	62a3      	str	r3, [r4, #40]	; 0x28
 8007856:	4b05      	ldr	r3, [pc, #20]	; (800786c <std+0x40>)
 8007858:	62e3      	str	r3, [r4, #44]	; 0x2c
 800785a:	4b05      	ldr	r3, [pc, #20]	; (8007870 <std+0x44>)
 800785c:	6224      	str	r4, [r4, #32]
 800785e:	6323      	str	r3, [r4, #48]	; 0x30
 8007860:	bd10      	pop	{r4, pc}
 8007862:	bf00      	nop
 8007864:	080082a5 	.word	0x080082a5
 8007868:	080082c7 	.word	0x080082c7
 800786c:	080082ff 	.word	0x080082ff
 8007870:	08008323 	.word	0x08008323

08007874 <_cleanup_r>:
 8007874:	4901      	ldr	r1, [pc, #4]	; (800787c <_cleanup_r+0x8>)
 8007876:	f000 b8af 	b.w	80079d8 <_fwalk_reent>
 800787a:	bf00      	nop
 800787c:	080077b5 	.word	0x080077b5

08007880 <__sfmoreglue>:
 8007880:	b570      	push	{r4, r5, r6, lr}
 8007882:	2268      	movs	r2, #104	; 0x68
 8007884:	1e4d      	subs	r5, r1, #1
 8007886:	4355      	muls	r5, r2
 8007888:	460e      	mov	r6, r1
 800788a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800788e:	f000 f997 	bl	8007bc0 <_malloc_r>
 8007892:	4604      	mov	r4, r0
 8007894:	b140      	cbz	r0, 80078a8 <__sfmoreglue+0x28>
 8007896:	2100      	movs	r1, #0
 8007898:	e9c0 1600 	strd	r1, r6, [r0]
 800789c:	300c      	adds	r0, #12
 800789e:	60a0      	str	r0, [r4, #8]
 80078a0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80078a4:	f7ff fdaa 	bl	80073fc <memset>
 80078a8:	4620      	mov	r0, r4
 80078aa:	bd70      	pop	{r4, r5, r6, pc}

080078ac <__sfp_lock_acquire>:
 80078ac:	4801      	ldr	r0, [pc, #4]	; (80078b4 <__sfp_lock_acquire+0x8>)
 80078ae:	f000 b8b3 	b.w	8007a18 <__retarget_lock_acquire_recursive>
 80078b2:	bf00      	nop
 80078b4:	20002ded 	.word	0x20002ded

080078b8 <__sfp_lock_release>:
 80078b8:	4801      	ldr	r0, [pc, #4]	; (80078c0 <__sfp_lock_release+0x8>)
 80078ba:	f000 b8ae 	b.w	8007a1a <__retarget_lock_release_recursive>
 80078be:	bf00      	nop
 80078c0:	20002ded 	.word	0x20002ded

080078c4 <__sinit_lock_acquire>:
 80078c4:	4801      	ldr	r0, [pc, #4]	; (80078cc <__sinit_lock_acquire+0x8>)
 80078c6:	f000 b8a7 	b.w	8007a18 <__retarget_lock_acquire_recursive>
 80078ca:	bf00      	nop
 80078cc:	20002dee 	.word	0x20002dee

080078d0 <__sinit_lock_release>:
 80078d0:	4801      	ldr	r0, [pc, #4]	; (80078d8 <__sinit_lock_release+0x8>)
 80078d2:	f000 b8a2 	b.w	8007a1a <__retarget_lock_release_recursive>
 80078d6:	bf00      	nop
 80078d8:	20002dee 	.word	0x20002dee

080078dc <__sinit>:
 80078dc:	b510      	push	{r4, lr}
 80078de:	4604      	mov	r4, r0
 80078e0:	f7ff fff0 	bl	80078c4 <__sinit_lock_acquire>
 80078e4:	69a3      	ldr	r3, [r4, #24]
 80078e6:	b11b      	cbz	r3, 80078f0 <__sinit+0x14>
 80078e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80078ec:	f7ff bff0 	b.w	80078d0 <__sinit_lock_release>
 80078f0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80078f4:	6523      	str	r3, [r4, #80]	; 0x50
 80078f6:	4b13      	ldr	r3, [pc, #76]	; (8007944 <__sinit+0x68>)
 80078f8:	4a13      	ldr	r2, [pc, #76]	; (8007948 <__sinit+0x6c>)
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	62a2      	str	r2, [r4, #40]	; 0x28
 80078fe:	42a3      	cmp	r3, r4
 8007900:	bf04      	itt	eq
 8007902:	2301      	moveq	r3, #1
 8007904:	61a3      	streq	r3, [r4, #24]
 8007906:	4620      	mov	r0, r4
 8007908:	f000 f820 	bl	800794c <__sfp>
 800790c:	6060      	str	r0, [r4, #4]
 800790e:	4620      	mov	r0, r4
 8007910:	f000 f81c 	bl	800794c <__sfp>
 8007914:	60a0      	str	r0, [r4, #8]
 8007916:	4620      	mov	r0, r4
 8007918:	f000 f818 	bl	800794c <__sfp>
 800791c:	2200      	movs	r2, #0
 800791e:	60e0      	str	r0, [r4, #12]
 8007920:	2104      	movs	r1, #4
 8007922:	6860      	ldr	r0, [r4, #4]
 8007924:	f7ff ff82 	bl	800782c <std>
 8007928:	68a0      	ldr	r0, [r4, #8]
 800792a:	2201      	movs	r2, #1
 800792c:	2109      	movs	r1, #9
 800792e:	f7ff ff7d 	bl	800782c <std>
 8007932:	68e0      	ldr	r0, [r4, #12]
 8007934:	2202      	movs	r2, #2
 8007936:	2112      	movs	r1, #18
 8007938:	f7ff ff78 	bl	800782c <std>
 800793c:	2301      	movs	r3, #1
 800793e:	61a3      	str	r3, [r4, #24]
 8007940:	e7d2      	b.n	80078e8 <__sinit+0xc>
 8007942:	bf00      	nop
 8007944:	0800896c 	.word	0x0800896c
 8007948:	08007875 	.word	0x08007875

0800794c <__sfp>:
 800794c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800794e:	4607      	mov	r7, r0
 8007950:	f7ff ffac 	bl	80078ac <__sfp_lock_acquire>
 8007954:	4b1e      	ldr	r3, [pc, #120]	; (80079d0 <__sfp+0x84>)
 8007956:	681e      	ldr	r6, [r3, #0]
 8007958:	69b3      	ldr	r3, [r6, #24]
 800795a:	b913      	cbnz	r3, 8007962 <__sfp+0x16>
 800795c:	4630      	mov	r0, r6
 800795e:	f7ff ffbd 	bl	80078dc <__sinit>
 8007962:	3648      	adds	r6, #72	; 0x48
 8007964:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007968:	3b01      	subs	r3, #1
 800796a:	d503      	bpl.n	8007974 <__sfp+0x28>
 800796c:	6833      	ldr	r3, [r6, #0]
 800796e:	b30b      	cbz	r3, 80079b4 <__sfp+0x68>
 8007970:	6836      	ldr	r6, [r6, #0]
 8007972:	e7f7      	b.n	8007964 <__sfp+0x18>
 8007974:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007978:	b9d5      	cbnz	r5, 80079b0 <__sfp+0x64>
 800797a:	4b16      	ldr	r3, [pc, #88]	; (80079d4 <__sfp+0x88>)
 800797c:	60e3      	str	r3, [r4, #12]
 800797e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007982:	6665      	str	r5, [r4, #100]	; 0x64
 8007984:	f000 f847 	bl	8007a16 <__retarget_lock_init_recursive>
 8007988:	f7ff ff96 	bl	80078b8 <__sfp_lock_release>
 800798c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007990:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007994:	6025      	str	r5, [r4, #0]
 8007996:	61a5      	str	r5, [r4, #24]
 8007998:	2208      	movs	r2, #8
 800799a:	4629      	mov	r1, r5
 800799c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80079a0:	f7ff fd2c 	bl	80073fc <memset>
 80079a4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80079a8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80079ac:	4620      	mov	r0, r4
 80079ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80079b0:	3468      	adds	r4, #104	; 0x68
 80079b2:	e7d9      	b.n	8007968 <__sfp+0x1c>
 80079b4:	2104      	movs	r1, #4
 80079b6:	4638      	mov	r0, r7
 80079b8:	f7ff ff62 	bl	8007880 <__sfmoreglue>
 80079bc:	4604      	mov	r4, r0
 80079be:	6030      	str	r0, [r6, #0]
 80079c0:	2800      	cmp	r0, #0
 80079c2:	d1d5      	bne.n	8007970 <__sfp+0x24>
 80079c4:	f7ff ff78 	bl	80078b8 <__sfp_lock_release>
 80079c8:	230c      	movs	r3, #12
 80079ca:	603b      	str	r3, [r7, #0]
 80079cc:	e7ee      	b.n	80079ac <__sfp+0x60>
 80079ce:	bf00      	nop
 80079d0:	0800896c 	.word	0x0800896c
 80079d4:	ffff0001 	.word	0xffff0001

080079d8 <_fwalk_reent>:
 80079d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80079dc:	4606      	mov	r6, r0
 80079de:	4688      	mov	r8, r1
 80079e0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80079e4:	2700      	movs	r7, #0
 80079e6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80079ea:	f1b9 0901 	subs.w	r9, r9, #1
 80079ee:	d505      	bpl.n	80079fc <_fwalk_reent+0x24>
 80079f0:	6824      	ldr	r4, [r4, #0]
 80079f2:	2c00      	cmp	r4, #0
 80079f4:	d1f7      	bne.n	80079e6 <_fwalk_reent+0xe>
 80079f6:	4638      	mov	r0, r7
 80079f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80079fc:	89ab      	ldrh	r3, [r5, #12]
 80079fe:	2b01      	cmp	r3, #1
 8007a00:	d907      	bls.n	8007a12 <_fwalk_reent+0x3a>
 8007a02:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007a06:	3301      	adds	r3, #1
 8007a08:	d003      	beq.n	8007a12 <_fwalk_reent+0x3a>
 8007a0a:	4629      	mov	r1, r5
 8007a0c:	4630      	mov	r0, r6
 8007a0e:	47c0      	blx	r8
 8007a10:	4307      	orrs	r7, r0
 8007a12:	3568      	adds	r5, #104	; 0x68
 8007a14:	e7e9      	b.n	80079ea <_fwalk_reent+0x12>

08007a16 <__retarget_lock_init_recursive>:
 8007a16:	4770      	bx	lr

08007a18 <__retarget_lock_acquire_recursive>:
 8007a18:	4770      	bx	lr

08007a1a <__retarget_lock_release_recursive>:
 8007a1a:	4770      	bx	lr

08007a1c <__swhatbuf_r>:
 8007a1c:	b570      	push	{r4, r5, r6, lr}
 8007a1e:	460e      	mov	r6, r1
 8007a20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007a24:	2900      	cmp	r1, #0
 8007a26:	b096      	sub	sp, #88	; 0x58
 8007a28:	4614      	mov	r4, r2
 8007a2a:	461d      	mov	r5, r3
 8007a2c:	da08      	bge.n	8007a40 <__swhatbuf_r+0x24>
 8007a2e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8007a32:	2200      	movs	r2, #0
 8007a34:	602a      	str	r2, [r5, #0]
 8007a36:	061a      	lsls	r2, r3, #24
 8007a38:	d410      	bmi.n	8007a5c <__swhatbuf_r+0x40>
 8007a3a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007a3e:	e00e      	b.n	8007a5e <__swhatbuf_r+0x42>
 8007a40:	466a      	mov	r2, sp
 8007a42:	f000 fc95 	bl	8008370 <_fstat_r>
 8007a46:	2800      	cmp	r0, #0
 8007a48:	dbf1      	blt.n	8007a2e <__swhatbuf_r+0x12>
 8007a4a:	9a01      	ldr	r2, [sp, #4]
 8007a4c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007a50:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007a54:	425a      	negs	r2, r3
 8007a56:	415a      	adcs	r2, r3
 8007a58:	602a      	str	r2, [r5, #0]
 8007a5a:	e7ee      	b.n	8007a3a <__swhatbuf_r+0x1e>
 8007a5c:	2340      	movs	r3, #64	; 0x40
 8007a5e:	2000      	movs	r0, #0
 8007a60:	6023      	str	r3, [r4, #0]
 8007a62:	b016      	add	sp, #88	; 0x58
 8007a64:	bd70      	pop	{r4, r5, r6, pc}
	...

08007a68 <__smakebuf_r>:
 8007a68:	898b      	ldrh	r3, [r1, #12]
 8007a6a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007a6c:	079d      	lsls	r5, r3, #30
 8007a6e:	4606      	mov	r6, r0
 8007a70:	460c      	mov	r4, r1
 8007a72:	d507      	bpl.n	8007a84 <__smakebuf_r+0x1c>
 8007a74:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007a78:	6023      	str	r3, [r4, #0]
 8007a7a:	6123      	str	r3, [r4, #16]
 8007a7c:	2301      	movs	r3, #1
 8007a7e:	6163      	str	r3, [r4, #20]
 8007a80:	b002      	add	sp, #8
 8007a82:	bd70      	pop	{r4, r5, r6, pc}
 8007a84:	ab01      	add	r3, sp, #4
 8007a86:	466a      	mov	r2, sp
 8007a88:	f7ff ffc8 	bl	8007a1c <__swhatbuf_r>
 8007a8c:	9900      	ldr	r1, [sp, #0]
 8007a8e:	4605      	mov	r5, r0
 8007a90:	4630      	mov	r0, r6
 8007a92:	f000 f895 	bl	8007bc0 <_malloc_r>
 8007a96:	b948      	cbnz	r0, 8007aac <__smakebuf_r+0x44>
 8007a98:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007a9c:	059a      	lsls	r2, r3, #22
 8007a9e:	d4ef      	bmi.n	8007a80 <__smakebuf_r+0x18>
 8007aa0:	f023 0303 	bic.w	r3, r3, #3
 8007aa4:	f043 0302 	orr.w	r3, r3, #2
 8007aa8:	81a3      	strh	r3, [r4, #12]
 8007aaa:	e7e3      	b.n	8007a74 <__smakebuf_r+0xc>
 8007aac:	4b0d      	ldr	r3, [pc, #52]	; (8007ae4 <__smakebuf_r+0x7c>)
 8007aae:	62b3      	str	r3, [r6, #40]	; 0x28
 8007ab0:	89a3      	ldrh	r3, [r4, #12]
 8007ab2:	6020      	str	r0, [r4, #0]
 8007ab4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007ab8:	81a3      	strh	r3, [r4, #12]
 8007aba:	9b00      	ldr	r3, [sp, #0]
 8007abc:	6163      	str	r3, [r4, #20]
 8007abe:	9b01      	ldr	r3, [sp, #4]
 8007ac0:	6120      	str	r0, [r4, #16]
 8007ac2:	b15b      	cbz	r3, 8007adc <__smakebuf_r+0x74>
 8007ac4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007ac8:	4630      	mov	r0, r6
 8007aca:	f000 fc63 	bl	8008394 <_isatty_r>
 8007ace:	b128      	cbz	r0, 8007adc <__smakebuf_r+0x74>
 8007ad0:	89a3      	ldrh	r3, [r4, #12]
 8007ad2:	f023 0303 	bic.w	r3, r3, #3
 8007ad6:	f043 0301 	orr.w	r3, r3, #1
 8007ada:	81a3      	strh	r3, [r4, #12]
 8007adc:	89a0      	ldrh	r0, [r4, #12]
 8007ade:	4305      	orrs	r5, r0
 8007ae0:	81a5      	strh	r5, [r4, #12]
 8007ae2:	e7cd      	b.n	8007a80 <__smakebuf_r+0x18>
 8007ae4:	08007875 	.word	0x08007875

08007ae8 <_free_r>:
 8007ae8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007aea:	2900      	cmp	r1, #0
 8007aec:	d044      	beq.n	8007b78 <_free_r+0x90>
 8007aee:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007af2:	9001      	str	r0, [sp, #4]
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	f1a1 0404 	sub.w	r4, r1, #4
 8007afa:	bfb8      	it	lt
 8007afc:	18e4      	addlt	r4, r4, r3
 8007afe:	f000 fc6b 	bl	80083d8 <__malloc_lock>
 8007b02:	4a1e      	ldr	r2, [pc, #120]	; (8007b7c <_free_r+0x94>)
 8007b04:	9801      	ldr	r0, [sp, #4]
 8007b06:	6813      	ldr	r3, [r2, #0]
 8007b08:	b933      	cbnz	r3, 8007b18 <_free_r+0x30>
 8007b0a:	6063      	str	r3, [r4, #4]
 8007b0c:	6014      	str	r4, [r2, #0]
 8007b0e:	b003      	add	sp, #12
 8007b10:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007b14:	f000 bc66 	b.w	80083e4 <__malloc_unlock>
 8007b18:	42a3      	cmp	r3, r4
 8007b1a:	d908      	bls.n	8007b2e <_free_r+0x46>
 8007b1c:	6825      	ldr	r5, [r4, #0]
 8007b1e:	1961      	adds	r1, r4, r5
 8007b20:	428b      	cmp	r3, r1
 8007b22:	bf01      	itttt	eq
 8007b24:	6819      	ldreq	r1, [r3, #0]
 8007b26:	685b      	ldreq	r3, [r3, #4]
 8007b28:	1949      	addeq	r1, r1, r5
 8007b2a:	6021      	streq	r1, [r4, #0]
 8007b2c:	e7ed      	b.n	8007b0a <_free_r+0x22>
 8007b2e:	461a      	mov	r2, r3
 8007b30:	685b      	ldr	r3, [r3, #4]
 8007b32:	b10b      	cbz	r3, 8007b38 <_free_r+0x50>
 8007b34:	42a3      	cmp	r3, r4
 8007b36:	d9fa      	bls.n	8007b2e <_free_r+0x46>
 8007b38:	6811      	ldr	r1, [r2, #0]
 8007b3a:	1855      	adds	r5, r2, r1
 8007b3c:	42a5      	cmp	r5, r4
 8007b3e:	d10b      	bne.n	8007b58 <_free_r+0x70>
 8007b40:	6824      	ldr	r4, [r4, #0]
 8007b42:	4421      	add	r1, r4
 8007b44:	1854      	adds	r4, r2, r1
 8007b46:	42a3      	cmp	r3, r4
 8007b48:	6011      	str	r1, [r2, #0]
 8007b4a:	d1e0      	bne.n	8007b0e <_free_r+0x26>
 8007b4c:	681c      	ldr	r4, [r3, #0]
 8007b4e:	685b      	ldr	r3, [r3, #4]
 8007b50:	6053      	str	r3, [r2, #4]
 8007b52:	4421      	add	r1, r4
 8007b54:	6011      	str	r1, [r2, #0]
 8007b56:	e7da      	b.n	8007b0e <_free_r+0x26>
 8007b58:	d902      	bls.n	8007b60 <_free_r+0x78>
 8007b5a:	230c      	movs	r3, #12
 8007b5c:	6003      	str	r3, [r0, #0]
 8007b5e:	e7d6      	b.n	8007b0e <_free_r+0x26>
 8007b60:	6825      	ldr	r5, [r4, #0]
 8007b62:	1961      	adds	r1, r4, r5
 8007b64:	428b      	cmp	r3, r1
 8007b66:	bf04      	itt	eq
 8007b68:	6819      	ldreq	r1, [r3, #0]
 8007b6a:	685b      	ldreq	r3, [r3, #4]
 8007b6c:	6063      	str	r3, [r4, #4]
 8007b6e:	bf04      	itt	eq
 8007b70:	1949      	addeq	r1, r1, r5
 8007b72:	6021      	streq	r1, [r4, #0]
 8007b74:	6054      	str	r4, [r2, #4]
 8007b76:	e7ca      	b.n	8007b0e <_free_r+0x26>
 8007b78:	b003      	add	sp, #12
 8007b7a:	bd30      	pop	{r4, r5, pc}
 8007b7c:	20002df0 	.word	0x20002df0

08007b80 <sbrk_aligned>:
 8007b80:	b570      	push	{r4, r5, r6, lr}
 8007b82:	4e0e      	ldr	r6, [pc, #56]	; (8007bbc <sbrk_aligned+0x3c>)
 8007b84:	460c      	mov	r4, r1
 8007b86:	6831      	ldr	r1, [r6, #0]
 8007b88:	4605      	mov	r5, r0
 8007b8a:	b911      	cbnz	r1, 8007b92 <sbrk_aligned+0x12>
 8007b8c:	f000 fb7a 	bl	8008284 <_sbrk_r>
 8007b90:	6030      	str	r0, [r6, #0]
 8007b92:	4621      	mov	r1, r4
 8007b94:	4628      	mov	r0, r5
 8007b96:	f000 fb75 	bl	8008284 <_sbrk_r>
 8007b9a:	1c43      	adds	r3, r0, #1
 8007b9c:	d00a      	beq.n	8007bb4 <sbrk_aligned+0x34>
 8007b9e:	1cc4      	adds	r4, r0, #3
 8007ba0:	f024 0403 	bic.w	r4, r4, #3
 8007ba4:	42a0      	cmp	r0, r4
 8007ba6:	d007      	beq.n	8007bb8 <sbrk_aligned+0x38>
 8007ba8:	1a21      	subs	r1, r4, r0
 8007baa:	4628      	mov	r0, r5
 8007bac:	f000 fb6a 	bl	8008284 <_sbrk_r>
 8007bb0:	3001      	adds	r0, #1
 8007bb2:	d101      	bne.n	8007bb8 <sbrk_aligned+0x38>
 8007bb4:	f04f 34ff 	mov.w	r4, #4294967295
 8007bb8:	4620      	mov	r0, r4
 8007bba:	bd70      	pop	{r4, r5, r6, pc}
 8007bbc:	20002df4 	.word	0x20002df4

08007bc0 <_malloc_r>:
 8007bc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007bc4:	1ccd      	adds	r5, r1, #3
 8007bc6:	f025 0503 	bic.w	r5, r5, #3
 8007bca:	3508      	adds	r5, #8
 8007bcc:	2d0c      	cmp	r5, #12
 8007bce:	bf38      	it	cc
 8007bd0:	250c      	movcc	r5, #12
 8007bd2:	2d00      	cmp	r5, #0
 8007bd4:	4607      	mov	r7, r0
 8007bd6:	db01      	blt.n	8007bdc <_malloc_r+0x1c>
 8007bd8:	42a9      	cmp	r1, r5
 8007bda:	d905      	bls.n	8007be8 <_malloc_r+0x28>
 8007bdc:	230c      	movs	r3, #12
 8007bde:	603b      	str	r3, [r7, #0]
 8007be0:	2600      	movs	r6, #0
 8007be2:	4630      	mov	r0, r6
 8007be4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007be8:	4e2e      	ldr	r6, [pc, #184]	; (8007ca4 <_malloc_r+0xe4>)
 8007bea:	f000 fbf5 	bl	80083d8 <__malloc_lock>
 8007bee:	6833      	ldr	r3, [r6, #0]
 8007bf0:	461c      	mov	r4, r3
 8007bf2:	bb34      	cbnz	r4, 8007c42 <_malloc_r+0x82>
 8007bf4:	4629      	mov	r1, r5
 8007bf6:	4638      	mov	r0, r7
 8007bf8:	f7ff ffc2 	bl	8007b80 <sbrk_aligned>
 8007bfc:	1c43      	adds	r3, r0, #1
 8007bfe:	4604      	mov	r4, r0
 8007c00:	d14d      	bne.n	8007c9e <_malloc_r+0xde>
 8007c02:	6834      	ldr	r4, [r6, #0]
 8007c04:	4626      	mov	r6, r4
 8007c06:	2e00      	cmp	r6, #0
 8007c08:	d140      	bne.n	8007c8c <_malloc_r+0xcc>
 8007c0a:	6823      	ldr	r3, [r4, #0]
 8007c0c:	4631      	mov	r1, r6
 8007c0e:	4638      	mov	r0, r7
 8007c10:	eb04 0803 	add.w	r8, r4, r3
 8007c14:	f000 fb36 	bl	8008284 <_sbrk_r>
 8007c18:	4580      	cmp	r8, r0
 8007c1a:	d13a      	bne.n	8007c92 <_malloc_r+0xd2>
 8007c1c:	6821      	ldr	r1, [r4, #0]
 8007c1e:	3503      	adds	r5, #3
 8007c20:	1a6d      	subs	r5, r5, r1
 8007c22:	f025 0503 	bic.w	r5, r5, #3
 8007c26:	3508      	adds	r5, #8
 8007c28:	2d0c      	cmp	r5, #12
 8007c2a:	bf38      	it	cc
 8007c2c:	250c      	movcc	r5, #12
 8007c2e:	4629      	mov	r1, r5
 8007c30:	4638      	mov	r0, r7
 8007c32:	f7ff ffa5 	bl	8007b80 <sbrk_aligned>
 8007c36:	3001      	adds	r0, #1
 8007c38:	d02b      	beq.n	8007c92 <_malloc_r+0xd2>
 8007c3a:	6823      	ldr	r3, [r4, #0]
 8007c3c:	442b      	add	r3, r5
 8007c3e:	6023      	str	r3, [r4, #0]
 8007c40:	e00e      	b.n	8007c60 <_malloc_r+0xa0>
 8007c42:	6822      	ldr	r2, [r4, #0]
 8007c44:	1b52      	subs	r2, r2, r5
 8007c46:	d41e      	bmi.n	8007c86 <_malloc_r+0xc6>
 8007c48:	2a0b      	cmp	r2, #11
 8007c4a:	d916      	bls.n	8007c7a <_malloc_r+0xba>
 8007c4c:	1961      	adds	r1, r4, r5
 8007c4e:	42a3      	cmp	r3, r4
 8007c50:	6025      	str	r5, [r4, #0]
 8007c52:	bf18      	it	ne
 8007c54:	6059      	strne	r1, [r3, #4]
 8007c56:	6863      	ldr	r3, [r4, #4]
 8007c58:	bf08      	it	eq
 8007c5a:	6031      	streq	r1, [r6, #0]
 8007c5c:	5162      	str	r2, [r4, r5]
 8007c5e:	604b      	str	r3, [r1, #4]
 8007c60:	4638      	mov	r0, r7
 8007c62:	f104 060b 	add.w	r6, r4, #11
 8007c66:	f000 fbbd 	bl	80083e4 <__malloc_unlock>
 8007c6a:	f026 0607 	bic.w	r6, r6, #7
 8007c6e:	1d23      	adds	r3, r4, #4
 8007c70:	1af2      	subs	r2, r6, r3
 8007c72:	d0b6      	beq.n	8007be2 <_malloc_r+0x22>
 8007c74:	1b9b      	subs	r3, r3, r6
 8007c76:	50a3      	str	r3, [r4, r2]
 8007c78:	e7b3      	b.n	8007be2 <_malloc_r+0x22>
 8007c7a:	6862      	ldr	r2, [r4, #4]
 8007c7c:	42a3      	cmp	r3, r4
 8007c7e:	bf0c      	ite	eq
 8007c80:	6032      	streq	r2, [r6, #0]
 8007c82:	605a      	strne	r2, [r3, #4]
 8007c84:	e7ec      	b.n	8007c60 <_malloc_r+0xa0>
 8007c86:	4623      	mov	r3, r4
 8007c88:	6864      	ldr	r4, [r4, #4]
 8007c8a:	e7b2      	b.n	8007bf2 <_malloc_r+0x32>
 8007c8c:	4634      	mov	r4, r6
 8007c8e:	6876      	ldr	r6, [r6, #4]
 8007c90:	e7b9      	b.n	8007c06 <_malloc_r+0x46>
 8007c92:	230c      	movs	r3, #12
 8007c94:	603b      	str	r3, [r7, #0]
 8007c96:	4638      	mov	r0, r7
 8007c98:	f000 fba4 	bl	80083e4 <__malloc_unlock>
 8007c9c:	e7a1      	b.n	8007be2 <_malloc_r+0x22>
 8007c9e:	6025      	str	r5, [r4, #0]
 8007ca0:	e7de      	b.n	8007c60 <_malloc_r+0xa0>
 8007ca2:	bf00      	nop
 8007ca4:	20002df0 	.word	0x20002df0

08007ca8 <__sfputc_r>:
 8007ca8:	6893      	ldr	r3, [r2, #8]
 8007caa:	3b01      	subs	r3, #1
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	b410      	push	{r4}
 8007cb0:	6093      	str	r3, [r2, #8]
 8007cb2:	da08      	bge.n	8007cc6 <__sfputc_r+0x1e>
 8007cb4:	6994      	ldr	r4, [r2, #24]
 8007cb6:	42a3      	cmp	r3, r4
 8007cb8:	db01      	blt.n	8007cbe <__sfputc_r+0x16>
 8007cba:	290a      	cmp	r1, #10
 8007cbc:	d103      	bne.n	8007cc6 <__sfputc_r+0x1e>
 8007cbe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007cc2:	f7ff bc31 	b.w	8007528 <__swbuf_r>
 8007cc6:	6813      	ldr	r3, [r2, #0]
 8007cc8:	1c58      	adds	r0, r3, #1
 8007cca:	6010      	str	r0, [r2, #0]
 8007ccc:	7019      	strb	r1, [r3, #0]
 8007cce:	4608      	mov	r0, r1
 8007cd0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007cd4:	4770      	bx	lr

08007cd6 <__sfputs_r>:
 8007cd6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007cd8:	4606      	mov	r6, r0
 8007cda:	460f      	mov	r7, r1
 8007cdc:	4614      	mov	r4, r2
 8007cde:	18d5      	adds	r5, r2, r3
 8007ce0:	42ac      	cmp	r4, r5
 8007ce2:	d101      	bne.n	8007ce8 <__sfputs_r+0x12>
 8007ce4:	2000      	movs	r0, #0
 8007ce6:	e007      	b.n	8007cf8 <__sfputs_r+0x22>
 8007ce8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007cec:	463a      	mov	r2, r7
 8007cee:	4630      	mov	r0, r6
 8007cf0:	f7ff ffda 	bl	8007ca8 <__sfputc_r>
 8007cf4:	1c43      	adds	r3, r0, #1
 8007cf6:	d1f3      	bne.n	8007ce0 <__sfputs_r+0xa>
 8007cf8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007cfc <_vfiprintf_r>:
 8007cfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d00:	460d      	mov	r5, r1
 8007d02:	b09d      	sub	sp, #116	; 0x74
 8007d04:	4614      	mov	r4, r2
 8007d06:	4698      	mov	r8, r3
 8007d08:	4606      	mov	r6, r0
 8007d0a:	b118      	cbz	r0, 8007d14 <_vfiprintf_r+0x18>
 8007d0c:	6983      	ldr	r3, [r0, #24]
 8007d0e:	b90b      	cbnz	r3, 8007d14 <_vfiprintf_r+0x18>
 8007d10:	f7ff fde4 	bl	80078dc <__sinit>
 8007d14:	4b89      	ldr	r3, [pc, #548]	; (8007f3c <_vfiprintf_r+0x240>)
 8007d16:	429d      	cmp	r5, r3
 8007d18:	d11b      	bne.n	8007d52 <_vfiprintf_r+0x56>
 8007d1a:	6875      	ldr	r5, [r6, #4]
 8007d1c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007d1e:	07d9      	lsls	r1, r3, #31
 8007d20:	d405      	bmi.n	8007d2e <_vfiprintf_r+0x32>
 8007d22:	89ab      	ldrh	r3, [r5, #12]
 8007d24:	059a      	lsls	r2, r3, #22
 8007d26:	d402      	bmi.n	8007d2e <_vfiprintf_r+0x32>
 8007d28:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007d2a:	f7ff fe75 	bl	8007a18 <__retarget_lock_acquire_recursive>
 8007d2e:	89ab      	ldrh	r3, [r5, #12]
 8007d30:	071b      	lsls	r3, r3, #28
 8007d32:	d501      	bpl.n	8007d38 <_vfiprintf_r+0x3c>
 8007d34:	692b      	ldr	r3, [r5, #16]
 8007d36:	b9eb      	cbnz	r3, 8007d74 <_vfiprintf_r+0x78>
 8007d38:	4629      	mov	r1, r5
 8007d3a:	4630      	mov	r0, r6
 8007d3c:	f7ff fc46 	bl	80075cc <__swsetup_r>
 8007d40:	b1c0      	cbz	r0, 8007d74 <_vfiprintf_r+0x78>
 8007d42:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007d44:	07dc      	lsls	r4, r3, #31
 8007d46:	d50e      	bpl.n	8007d66 <_vfiprintf_r+0x6a>
 8007d48:	f04f 30ff 	mov.w	r0, #4294967295
 8007d4c:	b01d      	add	sp, #116	; 0x74
 8007d4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d52:	4b7b      	ldr	r3, [pc, #492]	; (8007f40 <_vfiprintf_r+0x244>)
 8007d54:	429d      	cmp	r5, r3
 8007d56:	d101      	bne.n	8007d5c <_vfiprintf_r+0x60>
 8007d58:	68b5      	ldr	r5, [r6, #8]
 8007d5a:	e7df      	b.n	8007d1c <_vfiprintf_r+0x20>
 8007d5c:	4b79      	ldr	r3, [pc, #484]	; (8007f44 <_vfiprintf_r+0x248>)
 8007d5e:	429d      	cmp	r5, r3
 8007d60:	bf08      	it	eq
 8007d62:	68f5      	ldreq	r5, [r6, #12]
 8007d64:	e7da      	b.n	8007d1c <_vfiprintf_r+0x20>
 8007d66:	89ab      	ldrh	r3, [r5, #12]
 8007d68:	0598      	lsls	r0, r3, #22
 8007d6a:	d4ed      	bmi.n	8007d48 <_vfiprintf_r+0x4c>
 8007d6c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007d6e:	f7ff fe54 	bl	8007a1a <__retarget_lock_release_recursive>
 8007d72:	e7e9      	b.n	8007d48 <_vfiprintf_r+0x4c>
 8007d74:	2300      	movs	r3, #0
 8007d76:	9309      	str	r3, [sp, #36]	; 0x24
 8007d78:	2320      	movs	r3, #32
 8007d7a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007d7e:	f8cd 800c 	str.w	r8, [sp, #12]
 8007d82:	2330      	movs	r3, #48	; 0x30
 8007d84:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007f48 <_vfiprintf_r+0x24c>
 8007d88:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007d8c:	f04f 0901 	mov.w	r9, #1
 8007d90:	4623      	mov	r3, r4
 8007d92:	469a      	mov	sl, r3
 8007d94:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007d98:	b10a      	cbz	r2, 8007d9e <_vfiprintf_r+0xa2>
 8007d9a:	2a25      	cmp	r2, #37	; 0x25
 8007d9c:	d1f9      	bne.n	8007d92 <_vfiprintf_r+0x96>
 8007d9e:	ebba 0b04 	subs.w	fp, sl, r4
 8007da2:	d00b      	beq.n	8007dbc <_vfiprintf_r+0xc0>
 8007da4:	465b      	mov	r3, fp
 8007da6:	4622      	mov	r2, r4
 8007da8:	4629      	mov	r1, r5
 8007daa:	4630      	mov	r0, r6
 8007dac:	f7ff ff93 	bl	8007cd6 <__sfputs_r>
 8007db0:	3001      	adds	r0, #1
 8007db2:	f000 80aa 	beq.w	8007f0a <_vfiprintf_r+0x20e>
 8007db6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007db8:	445a      	add	r2, fp
 8007dba:	9209      	str	r2, [sp, #36]	; 0x24
 8007dbc:	f89a 3000 	ldrb.w	r3, [sl]
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	f000 80a2 	beq.w	8007f0a <_vfiprintf_r+0x20e>
 8007dc6:	2300      	movs	r3, #0
 8007dc8:	f04f 32ff 	mov.w	r2, #4294967295
 8007dcc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007dd0:	f10a 0a01 	add.w	sl, sl, #1
 8007dd4:	9304      	str	r3, [sp, #16]
 8007dd6:	9307      	str	r3, [sp, #28]
 8007dd8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007ddc:	931a      	str	r3, [sp, #104]	; 0x68
 8007dde:	4654      	mov	r4, sl
 8007de0:	2205      	movs	r2, #5
 8007de2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007de6:	4858      	ldr	r0, [pc, #352]	; (8007f48 <_vfiprintf_r+0x24c>)
 8007de8:	f7f8 fa12 	bl	8000210 <memchr>
 8007dec:	9a04      	ldr	r2, [sp, #16]
 8007dee:	b9d8      	cbnz	r0, 8007e28 <_vfiprintf_r+0x12c>
 8007df0:	06d1      	lsls	r1, r2, #27
 8007df2:	bf44      	itt	mi
 8007df4:	2320      	movmi	r3, #32
 8007df6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007dfa:	0713      	lsls	r3, r2, #28
 8007dfc:	bf44      	itt	mi
 8007dfe:	232b      	movmi	r3, #43	; 0x2b
 8007e00:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007e04:	f89a 3000 	ldrb.w	r3, [sl]
 8007e08:	2b2a      	cmp	r3, #42	; 0x2a
 8007e0a:	d015      	beq.n	8007e38 <_vfiprintf_r+0x13c>
 8007e0c:	9a07      	ldr	r2, [sp, #28]
 8007e0e:	4654      	mov	r4, sl
 8007e10:	2000      	movs	r0, #0
 8007e12:	f04f 0c0a 	mov.w	ip, #10
 8007e16:	4621      	mov	r1, r4
 8007e18:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007e1c:	3b30      	subs	r3, #48	; 0x30
 8007e1e:	2b09      	cmp	r3, #9
 8007e20:	d94e      	bls.n	8007ec0 <_vfiprintf_r+0x1c4>
 8007e22:	b1b0      	cbz	r0, 8007e52 <_vfiprintf_r+0x156>
 8007e24:	9207      	str	r2, [sp, #28]
 8007e26:	e014      	b.n	8007e52 <_vfiprintf_r+0x156>
 8007e28:	eba0 0308 	sub.w	r3, r0, r8
 8007e2c:	fa09 f303 	lsl.w	r3, r9, r3
 8007e30:	4313      	orrs	r3, r2
 8007e32:	9304      	str	r3, [sp, #16]
 8007e34:	46a2      	mov	sl, r4
 8007e36:	e7d2      	b.n	8007dde <_vfiprintf_r+0xe2>
 8007e38:	9b03      	ldr	r3, [sp, #12]
 8007e3a:	1d19      	adds	r1, r3, #4
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	9103      	str	r1, [sp, #12]
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	bfbb      	ittet	lt
 8007e44:	425b      	neglt	r3, r3
 8007e46:	f042 0202 	orrlt.w	r2, r2, #2
 8007e4a:	9307      	strge	r3, [sp, #28]
 8007e4c:	9307      	strlt	r3, [sp, #28]
 8007e4e:	bfb8      	it	lt
 8007e50:	9204      	strlt	r2, [sp, #16]
 8007e52:	7823      	ldrb	r3, [r4, #0]
 8007e54:	2b2e      	cmp	r3, #46	; 0x2e
 8007e56:	d10c      	bne.n	8007e72 <_vfiprintf_r+0x176>
 8007e58:	7863      	ldrb	r3, [r4, #1]
 8007e5a:	2b2a      	cmp	r3, #42	; 0x2a
 8007e5c:	d135      	bne.n	8007eca <_vfiprintf_r+0x1ce>
 8007e5e:	9b03      	ldr	r3, [sp, #12]
 8007e60:	1d1a      	adds	r2, r3, #4
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	9203      	str	r2, [sp, #12]
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	bfb8      	it	lt
 8007e6a:	f04f 33ff 	movlt.w	r3, #4294967295
 8007e6e:	3402      	adds	r4, #2
 8007e70:	9305      	str	r3, [sp, #20]
 8007e72:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007f58 <_vfiprintf_r+0x25c>
 8007e76:	7821      	ldrb	r1, [r4, #0]
 8007e78:	2203      	movs	r2, #3
 8007e7a:	4650      	mov	r0, sl
 8007e7c:	f7f8 f9c8 	bl	8000210 <memchr>
 8007e80:	b140      	cbz	r0, 8007e94 <_vfiprintf_r+0x198>
 8007e82:	2340      	movs	r3, #64	; 0x40
 8007e84:	eba0 000a 	sub.w	r0, r0, sl
 8007e88:	fa03 f000 	lsl.w	r0, r3, r0
 8007e8c:	9b04      	ldr	r3, [sp, #16]
 8007e8e:	4303      	orrs	r3, r0
 8007e90:	3401      	adds	r4, #1
 8007e92:	9304      	str	r3, [sp, #16]
 8007e94:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007e98:	482c      	ldr	r0, [pc, #176]	; (8007f4c <_vfiprintf_r+0x250>)
 8007e9a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007e9e:	2206      	movs	r2, #6
 8007ea0:	f7f8 f9b6 	bl	8000210 <memchr>
 8007ea4:	2800      	cmp	r0, #0
 8007ea6:	d03f      	beq.n	8007f28 <_vfiprintf_r+0x22c>
 8007ea8:	4b29      	ldr	r3, [pc, #164]	; (8007f50 <_vfiprintf_r+0x254>)
 8007eaa:	bb1b      	cbnz	r3, 8007ef4 <_vfiprintf_r+0x1f8>
 8007eac:	9b03      	ldr	r3, [sp, #12]
 8007eae:	3307      	adds	r3, #7
 8007eb0:	f023 0307 	bic.w	r3, r3, #7
 8007eb4:	3308      	adds	r3, #8
 8007eb6:	9303      	str	r3, [sp, #12]
 8007eb8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007eba:	443b      	add	r3, r7
 8007ebc:	9309      	str	r3, [sp, #36]	; 0x24
 8007ebe:	e767      	b.n	8007d90 <_vfiprintf_r+0x94>
 8007ec0:	fb0c 3202 	mla	r2, ip, r2, r3
 8007ec4:	460c      	mov	r4, r1
 8007ec6:	2001      	movs	r0, #1
 8007ec8:	e7a5      	b.n	8007e16 <_vfiprintf_r+0x11a>
 8007eca:	2300      	movs	r3, #0
 8007ecc:	3401      	adds	r4, #1
 8007ece:	9305      	str	r3, [sp, #20]
 8007ed0:	4619      	mov	r1, r3
 8007ed2:	f04f 0c0a 	mov.w	ip, #10
 8007ed6:	4620      	mov	r0, r4
 8007ed8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007edc:	3a30      	subs	r2, #48	; 0x30
 8007ede:	2a09      	cmp	r2, #9
 8007ee0:	d903      	bls.n	8007eea <_vfiprintf_r+0x1ee>
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d0c5      	beq.n	8007e72 <_vfiprintf_r+0x176>
 8007ee6:	9105      	str	r1, [sp, #20]
 8007ee8:	e7c3      	b.n	8007e72 <_vfiprintf_r+0x176>
 8007eea:	fb0c 2101 	mla	r1, ip, r1, r2
 8007eee:	4604      	mov	r4, r0
 8007ef0:	2301      	movs	r3, #1
 8007ef2:	e7f0      	b.n	8007ed6 <_vfiprintf_r+0x1da>
 8007ef4:	ab03      	add	r3, sp, #12
 8007ef6:	9300      	str	r3, [sp, #0]
 8007ef8:	462a      	mov	r2, r5
 8007efa:	4b16      	ldr	r3, [pc, #88]	; (8007f54 <_vfiprintf_r+0x258>)
 8007efc:	a904      	add	r1, sp, #16
 8007efe:	4630      	mov	r0, r6
 8007f00:	f3af 8000 	nop.w
 8007f04:	4607      	mov	r7, r0
 8007f06:	1c78      	adds	r0, r7, #1
 8007f08:	d1d6      	bne.n	8007eb8 <_vfiprintf_r+0x1bc>
 8007f0a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007f0c:	07d9      	lsls	r1, r3, #31
 8007f0e:	d405      	bmi.n	8007f1c <_vfiprintf_r+0x220>
 8007f10:	89ab      	ldrh	r3, [r5, #12]
 8007f12:	059a      	lsls	r2, r3, #22
 8007f14:	d402      	bmi.n	8007f1c <_vfiprintf_r+0x220>
 8007f16:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007f18:	f7ff fd7f 	bl	8007a1a <__retarget_lock_release_recursive>
 8007f1c:	89ab      	ldrh	r3, [r5, #12]
 8007f1e:	065b      	lsls	r3, r3, #25
 8007f20:	f53f af12 	bmi.w	8007d48 <_vfiprintf_r+0x4c>
 8007f24:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007f26:	e711      	b.n	8007d4c <_vfiprintf_r+0x50>
 8007f28:	ab03      	add	r3, sp, #12
 8007f2a:	9300      	str	r3, [sp, #0]
 8007f2c:	462a      	mov	r2, r5
 8007f2e:	4b09      	ldr	r3, [pc, #36]	; (8007f54 <_vfiprintf_r+0x258>)
 8007f30:	a904      	add	r1, sp, #16
 8007f32:	4630      	mov	r0, r6
 8007f34:	f000 f880 	bl	8008038 <_printf_i>
 8007f38:	e7e4      	b.n	8007f04 <_vfiprintf_r+0x208>
 8007f3a:	bf00      	nop
 8007f3c:	08008990 	.word	0x08008990
 8007f40:	080089b0 	.word	0x080089b0
 8007f44:	08008970 	.word	0x08008970
 8007f48:	080089d0 	.word	0x080089d0
 8007f4c:	080089da 	.word	0x080089da
 8007f50:	00000000 	.word	0x00000000
 8007f54:	08007cd7 	.word	0x08007cd7
 8007f58:	080089d6 	.word	0x080089d6

08007f5c <_printf_common>:
 8007f5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007f60:	4616      	mov	r6, r2
 8007f62:	4699      	mov	r9, r3
 8007f64:	688a      	ldr	r2, [r1, #8]
 8007f66:	690b      	ldr	r3, [r1, #16]
 8007f68:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007f6c:	4293      	cmp	r3, r2
 8007f6e:	bfb8      	it	lt
 8007f70:	4613      	movlt	r3, r2
 8007f72:	6033      	str	r3, [r6, #0]
 8007f74:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007f78:	4607      	mov	r7, r0
 8007f7a:	460c      	mov	r4, r1
 8007f7c:	b10a      	cbz	r2, 8007f82 <_printf_common+0x26>
 8007f7e:	3301      	adds	r3, #1
 8007f80:	6033      	str	r3, [r6, #0]
 8007f82:	6823      	ldr	r3, [r4, #0]
 8007f84:	0699      	lsls	r1, r3, #26
 8007f86:	bf42      	ittt	mi
 8007f88:	6833      	ldrmi	r3, [r6, #0]
 8007f8a:	3302      	addmi	r3, #2
 8007f8c:	6033      	strmi	r3, [r6, #0]
 8007f8e:	6825      	ldr	r5, [r4, #0]
 8007f90:	f015 0506 	ands.w	r5, r5, #6
 8007f94:	d106      	bne.n	8007fa4 <_printf_common+0x48>
 8007f96:	f104 0a19 	add.w	sl, r4, #25
 8007f9a:	68e3      	ldr	r3, [r4, #12]
 8007f9c:	6832      	ldr	r2, [r6, #0]
 8007f9e:	1a9b      	subs	r3, r3, r2
 8007fa0:	42ab      	cmp	r3, r5
 8007fa2:	dc26      	bgt.n	8007ff2 <_printf_common+0x96>
 8007fa4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007fa8:	1e13      	subs	r3, r2, #0
 8007faa:	6822      	ldr	r2, [r4, #0]
 8007fac:	bf18      	it	ne
 8007fae:	2301      	movne	r3, #1
 8007fb0:	0692      	lsls	r2, r2, #26
 8007fb2:	d42b      	bmi.n	800800c <_printf_common+0xb0>
 8007fb4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007fb8:	4649      	mov	r1, r9
 8007fba:	4638      	mov	r0, r7
 8007fbc:	47c0      	blx	r8
 8007fbe:	3001      	adds	r0, #1
 8007fc0:	d01e      	beq.n	8008000 <_printf_common+0xa4>
 8007fc2:	6823      	ldr	r3, [r4, #0]
 8007fc4:	68e5      	ldr	r5, [r4, #12]
 8007fc6:	6832      	ldr	r2, [r6, #0]
 8007fc8:	f003 0306 	and.w	r3, r3, #6
 8007fcc:	2b04      	cmp	r3, #4
 8007fce:	bf08      	it	eq
 8007fd0:	1aad      	subeq	r5, r5, r2
 8007fd2:	68a3      	ldr	r3, [r4, #8]
 8007fd4:	6922      	ldr	r2, [r4, #16]
 8007fd6:	bf0c      	ite	eq
 8007fd8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007fdc:	2500      	movne	r5, #0
 8007fde:	4293      	cmp	r3, r2
 8007fe0:	bfc4      	itt	gt
 8007fe2:	1a9b      	subgt	r3, r3, r2
 8007fe4:	18ed      	addgt	r5, r5, r3
 8007fe6:	2600      	movs	r6, #0
 8007fe8:	341a      	adds	r4, #26
 8007fea:	42b5      	cmp	r5, r6
 8007fec:	d11a      	bne.n	8008024 <_printf_common+0xc8>
 8007fee:	2000      	movs	r0, #0
 8007ff0:	e008      	b.n	8008004 <_printf_common+0xa8>
 8007ff2:	2301      	movs	r3, #1
 8007ff4:	4652      	mov	r2, sl
 8007ff6:	4649      	mov	r1, r9
 8007ff8:	4638      	mov	r0, r7
 8007ffa:	47c0      	blx	r8
 8007ffc:	3001      	adds	r0, #1
 8007ffe:	d103      	bne.n	8008008 <_printf_common+0xac>
 8008000:	f04f 30ff 	mov.w	r0, #4294967295
 8008004:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008008:	3501      	adds	r5, #1
 800800a:	e7c6      	b.n	8007f9a <_printf_common+0x3e>
 800800c:	18e1      	adds	r1, r4, r3
 800800e:	1c5a      	adds	r2, r3, #1
 8008010:	2030      	movs	r0, #48	; 0x30
 8008012:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008016:	4422      	add	r2, r4
 8008018:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800801c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008020:	3302      	adds	r3, #2
 8008022:	e7c7      	b.n	8007fb4 <_printf_common+0x58>
 8008024:	2301      	movs	r3, #1
 8008026:	4622      	mov	r2, r4
 8008028:	4649      	mov	r1, r9
 800802a:	4638      	mov	r0, r7
 800802c:	47c0      	blx	r8
 800802e:	3001      	adds	r0, #1
 8008030:	d0e6      	beq.n	8008000 <_printf_common+0xa4>
 8008032:	3601      	adds	r6, #1
 8008034:	e7d9      	b.n	8007fea <_printf_common+0x8e>
	...

08008038 <_printf_i>:
 8008038:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800803c:	7e0f      	ldrb	r7, [r1, #24]
 800803e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008040:	2f78      	cmp	r7, #120	; 0x78
 8008042:	4691      	mov	r9, r2
 8008044:	4680      	mov	r8, r0
 8008046:	460c      	mov	r4, r1
 8008048:	469a      	mov	sl, r3
 800804a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800804e:	d807      	bhi.n	8008060 <_printf_i+0x28>
 8008050:	2f62      	cmp	r7, #98	; 0x62
 8008052:	d80a      	bhi.n	800806a <_printf_i+0x32>
 8008054:	2f00      	cmp	r7, #0
 8008056:	f000 80d8 	beq.w	800820a <_printf_i+0x1d2>
 800805a:	2f58      	cmp	r7, #88	; 0x58
 800805c:	f000 80a3 	beq.w	80081a6 <_printf_i+0x16e>
 8008060:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008064:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008068:	e03a      	b.n	80080e0 <_printf_i+0xa8>
 800806a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800806e:	2b15      	cmp	r3, #21
 8008070:	d8f6      	bhi.n	8008060 <_printf_i+0x28>
 8008072:	a101      	add	r1, pc, #4	; (adr r1, 8008078 <_printf_i+0x40>)
 8008074:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008078:	080080d1 	.word	0x080080d1
 800807c:	080080e5 	.word	0x080080e5
 8008080:	08008061 	.word	0x08008061
 8008084:	08008061 	.word	0x08008061
 8008088:	08008061 	.word	0x08008061
 800808c:	08008061 	.word	0x08008061
 8008090:	080080e5 	.word	0x080080e5
 8008094:	08008061 	.word	0x08008061
 8008098:	08008061 	.word	0x08008061
 800809c:	08008061 	.word	0x08008061
 80080a0:	08008061 	.word	0x08008061
 80080a4:	080081f1 	.word	0x080081f1
 80080a8:	08008115 	.word	0x08008115
 80080ac:	080081d3 	.word	0x080081d3
 80080b0:	08008061 	.word	0x08008061
 80080b4:	08008061 	.word	0x08008061
 80080b8:	08008213 	.word	0x08008213
 80080bc:	08008061 	.word	0x08008061
 80080c0:	08008115 	.word	0x08008115
 80080c4:	08008061 	.word	0x08008061
 80080c8:	08008061 	.word	0x08008061
 80080cc:	080081db 	.word	0x080081db
 80080d0:	682b      	ldr	r3, [r5, #0]
 80080d2:	1d1a      	adds	r2, r3, #4
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	602a      	str	r2, [r5, #0]
 80080d8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80080dc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80080e0:	2301      	movs	r3, #1
 80080e2:	e0a3      	b.n	800822c <_printf_i+0x1f4>
 80080e4:	6820      	ldr	r0, [r4, #0]
 80080e6:	6829      	ldr	r1, [r5, #0]
 80080e8:	0606      	lsls	r6, r0, #24
 80080ea:	f101 0304 	add.w	r3, r1, #4
 80080ee:	d50a      	bpl.n	8008106 <_printf_i+0xce>
 80080f0:	680e      	ldr	r6, [r1, #0]
 80080f2:	602b      	str	r3, [r5, #0]
 80080f4:	2e00      	cmp	r6, #0
 80080f6:	da03      	bge.n	8008100 <_printf_i+0xc8>
 80080f8:	232d      	movs	r3, #45	; 0x2d
 80080fa:	4276      	negs	r6, r6
 80080fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008100:	485e      	ldr	r0, [pc, #376]	; (800827c <_printf_i+0x244>)
 8008102:	230a      	movs	r3, #10
 8008104:	e019      	b.n	800813a <_printf_i+0x102>
 8008106:	680e      	ldr	r6, [r1, #0]
 8008108:	602b      	str	r3, [r5, #0]
 800810a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800810e:	bf18      	it	ne
 8008110:	b236      	sxthne	r6, r6
 8008112:	e7ef      	b.n	80080f4 <_printf_i+0xbc>
 8008114:	682b      	ldr	r3, [r5, #0]
 8008116:	6820      	ldr	r0, [r4, #0]
 8008118:	1d19      	adds	r1, r3, #4
 800811a:	6029      	str	r1, [r5, #0]
 800811c:	0601      	lsls	r1, r0, #24
 800811e:	d501      	bpl.n	8008124 <_printf_i+0xec>
 8008120:	681e      	ldr	r6, [r3, #0]
 8008122:	e002      	b.n	800812a <_printf_i+0xf2>
 8008124:	0646      	lsls	r6, r0, #25
 8008126:	d5fb      	bpl.n	8008120 <_printf_i+0xe8>
 8008128:	881e      	ldrh	r6, [r3, #0]
 800812a:	4854      	ldr	r0, [pc, #336]	; (800827c <_printf_i+0x244>)
 800812c:	2f6f      	cmp	r7, #111	; 0x6f
 800812e:	bf0c      	ite	eq
 8008130:	2308      	moveq	r3, #8
 8008132:	230a      	movne	r3, #10
 8008134:	2100      	movs	r1, #0
 8008136:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800813a:	6865      	ldr	r5, [r4, #4]
 800813c:	60a5      	str	r5, [r4, #8]
 800813e:	2d00      	cmp	r5, #0
 8008140:	bfa2      	ittt	ge
 8008142:	6821      	ldrge	r1, [r4, #0]
 8008144:	f021 0104 	bicge.w	r1, r1, #4
 8008148:	6021      	strge	r1, [r4, #0]
 800814a:	b90e      	cbnz	r6, 8008150 <_printf_i+0x118>
 800814c:	2d00      	cmp	r5, #0
 800814e:	d04d      	beq.n	80081ec <_printf_i+0x1b4>
 8008150:	4615      	mov	r5, r2
 8008152:	fbb6 f1f3 	udiv	r1, r6, r3
 8008156:	fb03 6711 	mls	r7, r3, r1, r6
 800815a:	5dc7      	ldrb	r7, [r0, r7]
 800815c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008160:	4637      	mov	r7, r6
 8008162:	42bb      	cmp	r3, r7
 8008164:	460e      	mov	r6, r1
 8008166:	d9f4      	bls.n	8008152 <_printf_i+0x11a>
 8008168:	2b08      	cmp	r3, #8
 800816a:	d10b      	bne.n	8008184 <_printf_i+0x14c>
 800816c:	6823      	ldr	r3, [r4, #0]
 800816e:	07de      	lsls	r6, r3, #31
 8008170:	d508      	bpl.n	8008184 <_printf_i+0x14c>
 8008172:	6923      	ldr	r3, [r4, #16]
 8008174:	6861      	ldr	r1, [r4, #4]
 8008176:	4299      	cmp	r1, r3
 8008178:	bfde      	ittt	le
 800817a:	2330      	movle	r3, #48	; 0x30
 800817c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008180:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008184:	1b52      	subs	r2, r2, r5
 8008186:	6122      	str	r2, [r4, #16]
 8008188:	f8cd a000 	str.w	sl, [sp]
 800818c:	464b      	mov	r3, r9
 800818e:	aa03      	add	r2, sp, #12
 8008190:	4621      	mov	r1, r4
 8008192:	4640      	mov	r0, r8
 8008194:	f7ff fee2 	bl	8007f5c <_printf_common>
 8008198:	3001      	adds	r0, #1
 800819a:	d14c      	bne.n	8008236 <_printf_i+0x1fe>
 800819c:	f04f 30ff 	mov.w	r0, #4294967295
 80081a0:	b004      	add	sp, #16
 80081a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80081a6:	4835      	ldr	r0, [pc, #212]	; (800827c <_printf_i+0x244>)
 80081a8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80081ac:	6829      	ldr	r1, [r5, #0]
 80081ae:	6823      	ldr	r3, [r4, #0]
 80081b0:	f851 6b04 	ldr.w	r6, [r1], #4
 80081b4:	6029      	str	r1, [r5, #0]
 80081b6:	061d      	lsls	r5, r3, #24
 80081b8:	d514      	bpl.n	80081e4 <_printf_i+0x1ac>
 80081ba:	07df      	lsls	r7, r3, #31
 80081bc:	bf44      	itt	mi
 80081be:	f043 0320 	orrmi.w	r3, r3, #32
 80081c2:	6023      	strmi	r3, [r4, #0]
 80081c4:	b91e      	cbnz	r6, 80081ce <_printf_i+0x196>
 80081c6:	6823      	ldr	r3, [r4, #0]
 80081c8:	f023 0320 	bic.w	r3, r3, #32
 80081cc:	6023      	str	r3, [r4, #0]
 80081ce:	2310      	movs	r3, #16
 80081d0:	e7b0      	b.n	8008134 <_printf_i+0xfc>
 80081d2:	6823      	ldr	r3, [r4, #0]
 80081d4:	f043 0320 	orr.w	r3, r3, #32
 80081d8:	6023      	str	r3, [r4, #0]
 80081da:	2378      	movs	r3, #120	; 0x78
 80081dc:	4828      	ldr	r0, [pc, #160]	; (8008280 <_printf_i+0x248>)
 80081de:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80081e2:	e7e3      	b.n	80081ac <_printf_i+0x174>
 80081e4:	0659      	lsls	r1, r3, #25
 80081e6:	bf48      	it	mi
 80081e8:	b2b6      	uxthmi	r6, r6
 80081ea:	e7e6      	b.n	80081ba <_printf_i+0x182>
 80081ec:	4615      	mov	r5, r2
 80081ee:	e7bb      	b.n	8008168 <_printf_i+0x130>
 80081f0:	682b      	ldr	r3, [r5, #0]
 80081f2:	6826      	ldr	r6, [r4, #0]
 80081f4:	6961      	ldr	r1, [r4, #20]
 80081f6:	1d18      	adds	r0, r3, #4
 80081f8:	6028      	str	r0, [r5, #0]
 80081fa:	0635      	lsls	r5, r6, #24
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	d501      	bpl.n	8008204 <_printf_i+0x1cc>
 8008200:	6019      	str	r1, [r3, #0]
 8008202:	e002      	b.n	800820a <_printf_i+0x1d2>
 8008204:	0670      	lsls	r0, r6, #25
 8008206:	d5fb      	bpl.n	8008200 <_printf_i+0x1c8>
 8008208:	8019      	strh	r1, [r3, #0]
 800820a:	2300      	movs	r3, #0
 800820c:	6123      	str	r3, [r4, #16]
 800820e:	4615      	mov	r5, r2
 8008210:	e7ba      	b.n	8008188 <_printf_i+0x150>
 8008212:	682b      	ldr	r3, [r5, #0]
 8008214:	1d1a      	adds	r2, r3, #4
 8008216:	602a      	str	r2, [r5, #0]
 8008218:	681d      	ldr	r5, [r3, #0]
 800821a:	6862      	ldr	r2, [r4, #4]
 800821c:	2100      	movs	r1, #0
 800821e:	4628      	mov	r0, r5
 8008220:	f7f7 fff6 	bl	8000210 <memchr>
 8008224:	b108      	cbz	r0, 800822a <_printf_i+0x1f2>
 8008226:	1b40      	subs	r0, r0, r5
 8008228:	6060      	str	r0, [r4, #4]
 800822a:	6863      	ldr	r3, [r4, #4]
 800822c:	6123      	str	r3, [r4, #16]
 800822e:	2300      	movs	r3, #0
 8008230:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008234:	e7a8      	b.n	8008188 <_printf_i+0x150>
 8008236:	6923      	ldr	r3, [r4, #16]
 8008238:	462a      	mov	r2, r5
 800823a:	4649      	mov	r1, r9
 800823c:	4640      	mov	r0, r8
 800823e:	47d0      	blx	sl
 8008240:	3001      	adds	r0, #1
 8008242:	d0ab      	beq.n	800819c <_printf_i+0x164>
 8008244:	6823      	ldr	r3, [r4, #0]
 8008246:	079b      	lsls	r3, r3, #30
 8008248:	d413      	bmi.n	8008272 <_printf_i+0x23a>
 800824a:	68e0      	ldr	r0, [r4, #12]
 800824c:	9b03      	ldr	r3, [sp, #12]
 800824e:	4298      	cmp	r0, r3
 8008250:	bfb8      	it	lt
 8008252:	4618      	movlt	r0, r3
 8008254:	e7a4      	b.n	80081a0 <_printf_i+0x168>
 8008256:	2301      	movs	r3, #1
 8008258:	4632      	mov	r2, r6
 800825a:	4649      	mov	r1, r9
 800825c:	4640      	mov	r0, r8
 800825e:	47d0      	blx	sl
 8008260:	3001      	adds	r0, #1
 8008262:	d09b      	beq.n	800819c <_printf_i+0x164>
 8008264:	3501      	adds	r5, #1
 8008266:	68e3      	ldr	r3, [r4, #12]
 8008268:	9903      	ldr	r1, [sp, #12]
 800826a:	1a5b      	subs	r3, r3, r1
 800826c:	42ab      	cmp	r3, r5
 800826e:	dcf2      	bgt.n	8008256 <_printf_i+0x21e>
 8008270:	e7eb      	b.n	800824a <_printf_i+0x212>
 8008272:	2500      	movs	r5, #0
 8008274:	f104 0619 	add.w	r6, r4, #25
 8008278:	e7f5      	b.n	8008266 <_printf_i+0x22e>
 800827a:	bf00      	nop
 800827c:	080089e1 	.word	0x080089e1
 8008280:	080089f2 	.word	0x080089f2

08008284 <_sbrk_r>:
 8008284:	b538      	push	{r3, r4, r5, lr}
 8008286:	4d06      	ldr	r5, [pc, #24]	; (80082a0 <_sbrk_r+0x1c>)
 8008288:	2300      	movs	r3, #0
 800828a:	4604      	mov	r4, r0
 800828c:	4608      	mov	r0, r1
 800828e:	602b      	str	r3, [r5, #0]
 8008290:	f7fa fa6c 	bl	800276c <_sbrk>
 8008294:	1c43      	adds	r3, r0, #1
 8008296:	d102      	bne.n	800829e <_sbrk_r+0x1a>
 8008298:	682b      	ldr	r3, [r5, #0]
 800829a:	b103      	cbz	r3, 800829e <_sbrk_r+0x1a>
 800829c:	6023      	str	r3, [r4, #0]
 800829e:	bd38      	pop	{r3, r4, r5, pc}
 80082a0:	20002df8 	.word	0x20002df8

080082a4 <__sread>:
 80082a4:	b510      	push	{r4, lr}
 80082a6:	460c      	mov	r4, r1
 80082a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80082ac:	f000 f8a0 	bl	80083f0 <_read_r>
 80082b0:	2800      	cmp	r0, #0
 80082b2:	bfab      	itete	ge
 80082b4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80082b6:	89a3      	ldrhlt	r3, [r4, #12]
 80082b8:	181b      	addge	r3, r3, r0
 80082ba:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80082be:	bfac      	ite	ge
 80082c0:	6563      	strge	r3, [r4, #84]	; 0x54
 80082c2:	81a3      	strhlt	r3, [r4, #12]
 80082c4:	bd10      	pop	{r4, pc}

080082c6 <__swrite>:
 80082c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80082ca:	461f      	mov	r7, r3
 80082cc:	898b      	ldrh	r3, [r1, #12]
 80082ce:	05db      	lsls	r3, r3, #23
 80082d0:	4605      	mov	r5, r0
 80082d2:	460c      	mov	r4, r1
 80082d4:	4616      	mov	r6, r2
 80082d6:	d505      	bpl.n	80082e4 <__swrite+0x1e>
 80082d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80082dc:	2302      	movs	r3, #2
 80082de:	2200      	movs	r2, #0
 80082e0:	f000 f868 	bl	80083b4 <_lseek_r>
 80082e4:	89a3      	ldrh	r3, [r4, #12]
 80082e6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80082ea:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80082ee:	81a3      	strh	r3, [r4, #12]
 80082f0:	4632      	mov	r2, r6
 80082f2:	463b      	mov	r3, r7
 80082f4:	4628      	mov	r0, r5
 80082f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80082fa:	f000 b817 	b.w	800832c <_write_r>

080082fe <__sseek>:
 80082fe:	b510      	push	{r4, lr}
 8008300:	460c      	mov	r4, r1
 8008302:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008306:	f000 f855 	bl	80083b4 <_lseek_r>
 800830a:	1c43      	adds	r3, r0, #1
 800830c:	89a3      	ldrh	r3, [r4, #12]
 800830e:	bf15      	itete	ne
 8008310:	6560      	strne	r0, [r4, #84]	; 0x54
 8008312:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008316:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800831a:	81a3      	strheq	r3, [r4, #12]
 800831c:	bf18      	it	ne
 800831e:	81a3      	strhne	r3, [r4, #12]
 8008320:	bd10      	pop	{r4, pc}

08008322 <__sclose>:
 8008322:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008326:	f000 b813 	b.w	8008350 <_close_r>
	...

0800832c <_write_r>:
 800832c:	b538      	push	{r3, r4, r5, lr}
 800832e:	4d07      	ldr	r5, [pc, #28]	; (800834c <_write_r+0x20>)
 8008330:	4604      	mov	r4, r0
 8008332:	4608      	mov	r0, r1
 8008334:	4611      	mov	r1, r2
 8008336:	2200      	movs	r2, #0
 8008338:	602a      	str	r2, [r5, #0]
 800833a:	461a      	mov	r2, r3
 800833c:	f7f9 fcfc 	bl	8001d38 <_write>
 8008340:	1c43      	adds	r3, r0, #1
 8008342:	d102      	bne.n	800834a <_write_r+0x1e>
 8008344:	682b      	ldr	r3, [r5, #0]
 8008346:	b103      	cbz	r3, 800834a <_write_r+0x1e>
 8008348:	6023      	str	r3, [r4, #0]
 800834a:	bd38      	pop	{r3, r4, r5, pc}
 800834c:	20002df8 	.word	0x20002df8

08008350 <_close_r>:
 8008350:	b538      	push	{r3, r4, r5, lr}
 8008352:	4d06      	ldr	r5, [pc, #24]	; (800836c <_close_r+0x1c>)
 8008354:	2300      	movs	r3, #0
 8008356:	4604      	mov	r4, r0
 8008358:	4608      	mov	r0, r1
 800835a:	602b      	str	r3, [r5, #0]
 800835c:	f7fa f9d2 	bl	8002704 <_close>
 8008360:	1c43      	adds	r3, r0, #1
 8008362:	d102      	bne.n	800836a <_close_r+0x1a>
 8008364:	682b      	ldr	r3, [r5, #0]
 8008366:	b103      	cbz	r3, 800836a <_close_r+0x1a>
 8008368:	6023      	str	r3, [r4, #0]
 800836a:	bd38      	pop	{r3, r4, r5, pc}
 800836c:	20002df8 	.word	0x20002df8

08008370 <_fstat_r>:
 8008370:	b538      	push	{r3, r4, r5, lr}
 8008372:	4d07      	ldr	r5, [pc, #28]	; (8008390 <_fstat_r+0x20>)
 8008374:	2300      	movs	r3, #0
 8008376:	4604      	mov	r4, r0
 8008378:	4608      	mov	r0, r1
 800837a:	4611      	mov	r1, r2
 800837c:	602b      	str	r3, [r5, #0]
 800837e:	f7fa f9cd 	bl	800271c <_fstat>
 8008382:	1c43      	adds	r3, r0, #1
 8008384:	d102      	bne.n	800838c <_fstat_r+0x1c>
 8008386:	682b      	ldr	r3, [r5, #0]
 8008388:	b103      	cbz	r3, 800838c <_fstat_r+0x1c>
 800838a:	6023      	str	r3, [r4, #0]
 800838c:	bd38      	pop	{r3, r4, r5, pc}
 800838e:	bf00      	nop
 8008390:	20002df8 	.word	0x20002df8

08008394 <_isatty_r>:
 8008394:	b538      	push	{r3, r4, r5, lr}
 8008396:	4d06      	ldr	r5, [pc, #24]	; (80083b0 <_isatty_r+0x1c>)
 8008398:	2300      	movs	r3, #0
 800839a:	4604      	mov	r4, r0
 800839c:	4608      	mov	r0, r1
 800839e:	602b      	str	r3, [r5, #0]
 80083a0:	f7fa f9cc 	bl	800273c <_isatty>
 80083a4:	1c43      	adds	r3, r0, #1
 80083a6:	d102      	bne.n	80083ae <_isatty_r+0x1a>
 80083a8:	682b      	ldr	r3, [r5, #0]
 80083aa:	b103      	cbz	r3, 80083ae <_isatty_r+0x1a>
 80083ac:	6023      	str	r3, [r4, #0]
 80083ae:	bd38      	pop	{r3, r4, r5, pc}
 80083b0:	20002df8 	.word	0x20002df8

080083b4 <_lseek_r>:
 80083b4:	b538      	push	{r3, r4, r5, lr}
 80083b6:	4d07      	ldr	r5, [pc, #28]	; (80083d4 <_lseek_r+0x20>)
 80083b8:	4604      	mov	r4, r0
 80083ba:	4608      	mov	r0, r1
 80083bc:	4611      	mov	r1, r2
 80083be:	2200      	movs	r2, #0
 80083c0:	602a      	str	r2, [r5, #0]
 80083c2:	461a      	mov	r2, r3
 80083c4:	f7fa f9c5 	bl	8002752 <_lseek>
 80083c8:	1c43      	adds	r3, r0, #1
 80083ca:	d102      	bne.n	80083d2 <_lseek_r+0x1e>
 80083cc:	682b      	ldr	r3, [r5, #0]
 80083ce:	b103      	cbz	r3, 80083d2 <_lseek_r+0x1e>
 80083d0:	6023      	str	r3, [r4, #0]
 80083d2:	bd38      	pop	{r3, r4, r5, pc}
 80083d4:	20002df8 	.word	0x20002df8

080083d8 <__malloc_lock>:
 80083d8:	4801      	ldr	r0, [pc, #4]	; (80083e0 <__malloc_lock+0x8>)
 80083da:	f7ff bb1d 	b.w	8007a18 <__retarget_lock_acquire_recursive>
 80083de:	bf00      	nop
 80083e0:	20002dec 	.word	0x20002dec

080083e4 <__malloc_unlock>:
 80083e4:	4801      	ldr	r0, [pc, #4]	; (80083ec <__malloc_unlock+0x8>)
 80083e6:	f7ff bb18 	b.w	8007a1a <__retarget_lock_release_recursive>
 80083ea:	bf00      	nop
 80083ec:	20002dec 	.word	0x20002dec

080083f0 <_read_r>:
 80083f0:	b538      	push	{r3, r4, r5, lr}
 80083f2:	4d07      	ldr	r5, [pc, #28]	; (8008410 <_read_r+0x20>)
 80083f4:	4604      	mov	r4, r0
 80083f6:	4608      	mov	r0, r1
 80083f8:	4611      	mov	r1, r2
 80083fa:	2200      	movs	r2, #0
 80083fc:	602a      	str	r2, [r5, #0]
 80083fe:	461a      	mov	r2, r3
 8008400:	f7fa f963 	bl	80026ca <_read>
 8008404:	1c43      	adds	r3, r0, #1
 8008406:	d102      	bne.n	800840e <_read_r+0x1e>
 8008408:	682b      	ldr	r3, [r5, #0]
 800840a:	b103      	cbz	r3, 800840e <_read_r+0x1e>
 800840c:	6023      	str	r3, [r4, #0]
 800840e:	bd38      	pop	{r3, r4, r5, pc}
 8008410:	20002df8 	.word	0x20002df8

08008414 <_init>:
 8008414:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008416:	bf00      	nop
 8008418:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800841a:	bc08      	pop	{r3}
 800841c:	469e      	mov	lr, r3
 800841e:	4770      	bx	lr

08008420 <_fini>:
 8008420:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008422:	bf00      	nop
 8008424:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008426:	bc08      	pop	{r3}
 8008428:	469e      	mov	lr, r3
 800842a:	4770      	bx	lr
